{
  "3": {
    "metadata": {
      "scriptId": "3",
      "url": "node:internal/per_context/primordials",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 748,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "9d302e02cad3701963ad08c6808447eec06832579ad75795e14c5bc8f21fc803",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 22794,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/per_context/primordials"
    },
    "source": "'use strict';\r\n\r\n/* eslint-disable node-core/prefer-primordials */\r\n\r\n// This file subclasses and stores the JS builtins that come from the VM\r\n// so that Node.js's builtin modules do not need to later look these up from\r\n// the global proxy, which can be mutated by users.\r\n\r\n// Use of primordials have sometimes a dramatic impact on performance, please\r\n// benchmark all changes made in performance-sensitive areas of the codebase.\r\n// See: https://github.com/nodejs/node/pull/38248\r\n\r\nconst {\r\n  defineProperty: ReflectDefineProperty,\r\n  getOwnPropertyDescriptor: ReflectGetOwnPropertyDescriptor,\r\n  ownKeys: ReflectOwnKeys,\r\n} = Reflect;\r\n\r\n// `uncurryThis` is equivalent to `func => Function.prototype.call.bind(func)`.\r\n// It is using `bind.bind(call)` to avoid using `Function.prototype.bind`\r\n// and `Function.prototype.call` after it may have been mutated by users.\r\nconst { apply, bind, call } = Function.prototype;\r\nconst uncurryThis = bind.bind(call);\r\nprimordials.uncurryThis = uncurryThis;\r\n\r\n// `applyBind` is equivalent to `func => Function.prototype.apply.bind(func)`.\r\n// It is using `bind.bind(apply)` to avoid using `Function.prototype.bind`\r\n// and `Function.prototype.apply` after it may have been mutated by users.\r\nconst applyBind = bind.bind(apply);\r\nprimordials.applyBind = applyBind;\r\n\r\n// Methods that accept a variable number of arguments, and thus it's useful to\r\n// also create `${prefix}${key}Apply`, which uses `Function.prototype.apply`,\r\n// instead of `Function.prototype.call`, and thus doesn't require iterator\r\n// destructuring.\r\nconst varargsMethods = [\r\n  // 'ArrayPrototypeConcat' is omitted, because it performs the spread\r\n  // on its own for arrays and array-likes with a truthy\r\n  // @@isConcatSpreadable symbol property.\r\n  'ArrayOf',\r\n  'ArrayPrototypePush',\r\n  'ArrayPrototypeUnshift',\r\n  // 'FunctionPrototypeCall' is omitted, since there's 'ReflectApply'\r\n  // and 'FunctionPrototypeApply'.\r\n  'MathHypot',\r\n  'MathMax',\r\n  'MathMin',\r\n  'StringFromCharCode',\r\n  'StringFromCodePoint',\r\n  'StringPrototypeConcat',\r\n  'TypedArrayOf',\r\n];\r\n\r\nfunction getNewKey(key) {\r\n  return typeof key === 'symbol' ?\r\n    `Symbol${key.description[7].toUpperCase()}${key.description.slice(8)}` :\r\n    `${key[0].toUpperCase()}${key.slice(1)}`;\r\n}\r\n\r\nfunction copyAccessor(dest, prefix, key, { enumerable, get, set }) {\r\n  ReflectDefineProperty(dest, `${prefix}Get${key}`, {\r\n    __proto__: null,\r\n    value: uncurryThis(get),\r\n    enumerable,\r\n  });\r\n  if (set !== undefined) {\r\n    ReflectDefineProperty(dest, `${prefix}Set${key}`, {\r\n      __proto__: null,\r\n      value: uncurryThis(set),\r\n      enumerable,\r\n    });\r\n  }\r\n}\r\n\r\nfunction copyPropsRenamed(src, dest, prefix) {\r\n  for (const key of ReflectOwnKeys(src)) {\r\n    const newKey = getNewKey(key);\r\n    const desc = ReflectGetOwnPropertyDescriptor(src, key);\r\n    if ('get' in desc) {\r\n      copyAccessor(dest, prefix, newKey, desc);\r\n    } else {\r\n      const name = `${prefix}${newKey}`;\r\n      ReflectDefineProperty(dest, name, { __proto__: null, ...desc });\r\n      if (varargsMethods.includes(name)) {\r\n        ReflectDefineProperty(dest, `${name}Apply`, {\r\n          __proto__: null,\r\n          // `src` is bound as the `this` so that the static `this` points\r\n          // to the object it was defined on,\r\n          // e.g.: `ArrayOfApply` gets a `this` of `Array`:\r\n          value: applyBind(desc.value, src),\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction copyPropsRenamedBound(src, dest, prefix) {\r\n  for (const key of ReflectOwnKeys(src)) {\r\n    const newKey = getNewKey(key);\r\n    const desc = ReflectGetOwnPropertyDescriptor(src, key);\r\n    if ('get' in desc) {\r\n      copyAccessor(dest, prefix, newKey, desc);\r\n    } else {\r\n      const { value } = desc;\r\n      if (typeof value === 'function') {\r\n        desc.value = value.bind(src);\r\n      }\r\n\r\n      const name = `${prefix}${newKey}`;\r\n      ReflectDefineProperty(dest, name, { __proto__: null, ...desc });\r\n      if (varargsMethods.includes(name)) {\r\n        ReflectDefineProperty(dest, `${name}Apply`, {\r\n          __proto__: null,\r\n          value: applyBind(value, src),\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction copyPrototype(src, dest, prefix) {\r\n  for (const key of ReflectOwnKeys(src)) {\r\n    const newKey = getNewKey(key);\r\n    const desc = ReflectGetOwnPropertyDescriptor(src, key);\r\n    if ('get' in desc) {\r\n      copyAccessor(dest, prefix, newKey, desc);\r\n    } else {\r\n      const { value } = desc;\r\n      if (typeof value === 'function') {\r\n        desc.value = uncurryThis(value);\r\n      }\r\n\r\n      const name = `${prefix}${newKey}`;\r\n      ReflectDefineProperty(dest, name, { __proto__: null, ...desc });\r\n      if (varargsMethods.includes(name)) {\r\n        ReflectDefineProperty(dest, `${name}Apply`, {\r\n          __proto__: null,\r\n          value: applyBind(value),\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Create copies of configurable value properties of the global object\r\n[\r\n  'Proxy',\r\n  'globalThis',\r\n].forEach((name) => {\r\n  // eslint-disable-next-line no-restricted-globals\r\n  primordials[name] = globalThis[name];\r\n});\r\n\r\n// Create copies of URI handling functions\r\n[\r\n  decodeURI,\r\n  decodeURIComponent,\r\n  encodeURI,\r\n  encodeURIComponent,\r\n].forEach((fn) => {\r\n  primordials[fn.name] = fn;\r\n});\r\n\r\n// Create copies of legacy functions\r\n[\r\n  escape,\r\n  eval,\r\n  unescape,\r\n].forEach((fn) => {\r\n  primordials[fn.name] = fn;\r\n});\r\n\r\n// Create copies of the namespace objects\r\n[\r\n  'Atomics',\r\n  'JSON',\r\n  'Math',\r\n  'Proxy',\r\n  'Reflect',\r\n].forEach((name) => {\r\n  // eslint-disable-next-line no-restricted-globals\r\n  copyPropsRenamed(globalThis[name], primordials, name);\r\n});\r\n\r\n// Create copies of intrinsic objects\r\n[\r\n  'AggregateError',\r\n  'Array',\r\n  'ArrayBuffer',\r\n  'BigInt',\r\n  'BigInt64Array',\r\n  'BigUint64Array',\r\n  'Boolean',\r\n  'DataView',\r\n  'Date',\r\n  'Error',\r\n  'EvalError',\r\n  'FinalizationRegistry',\r\n  'Float32Array',\r\n  'Float64Array',\r\n  'Function',\r\n  'Int16Array',\r\n  'Int32Array',\r\n  'Int8Array',\r\n  'Map',\r\n  'Number',\r\n  'Object',\r\n  'RangeError',\r\n  'ReferenceError',\r\n  'RegExp',\r\n  'Set',\r\n  'String',\r\n  'Symbol',\r\n  'SyntaxError',\r\n  'TypeError',\r\n  'URIError',\r\n  'Uint16Array',\r\n  'Uint32Array',\r\n  'Uint8Array',\r\n  'Uint8ClampedArray',\r\n  'WeakMap',\r\n  'WeakRef',\r\n  'WeakSet',\r\n].forEach((name) => {\r\n  // eslint-disable-next-line no-restricted-globals\r\n  const original = globalThis[name];\r\n  primordials[name] = original;\r\n  copyPropsRenamed(original, primordials, name);\r\n  copyPrototype(original.prototype, primordials, `${name}Prototype`);\r\n});\r\n\r\n// Define Symbol.dispose and Symbol.asyncDispose\r\n// Until these are defined by the environment.\r\n// TODO(MoLow): Remove this polyfill once Symbol.dispose and Symbol.asyncDispose are available in V8.\r\nprimordials.SymbolDispose ??= primordials.SymbolFor('nodejs.dispose');\r\nprimordials.SymbolAsyncDispose ??= primordials.SymbolFor('nodejs.asyncDispose');\r\n\r\n// Create copies of intrinsic objects that require a valid `this` to call\r\n// static methods.\r\n// Refs: https://www.ecma-international.org/ecma-262/#sec-promise.all\r\n[\r\n  'Promise',\r\n].forEach((name) => {\r\n  // eslint-disable-next-line no-restricted-globals\r\n  const original = globalThis[name];\r\n  primordials[name] = original;\r\n  copyPropsRenamedBound(original, primordials, name);\r\n  copyPrototype(original.prototype, primordials, `${name}Prototype`);\r\n});\r\n\r\n// Create copies of abstract intrinsic objects that are not directly exposed\r\n// on the global object.\r\n// Refs: https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object\r\n[\r\n  { name: 'TypedArray', original: Reflect.getPrototypeOf(Uint8Array) },\r\n  { name: 'ArrayIterator', original: {\r\n    prototype: Reflect.getPrototypeOf(Array.prototype[Symbol.iterator]()),\r\n  } },\r\n  { name: 'StringIterator', original: {\r\n    prototype: Reflect.getPrototypeOf(String.prototype[Symbol.iterator]()),\r\n  } },\r\n].forEach(({ name, original }) => {\r\n  primordials[name] = original;\r\n  // The static %TypedArray% methods require a valid `this`, but can't be bound,\r\n  // as they need a subclass constructor as the receiver:\r\n  copyPrototype(original, primordials, name);\r\n  copyPrototype(original.prototype, primordials, `${name}Prototype`);\r\n});\r\n\r\nprimordials.IteratorPrototype = Reflect.getPrototypeOf(primordials.ArrayIteratorPrototype);\r\n\r\n/* eslint-enable node-core/prefer-primordials */\r\n\r\nconst {\r\n  Array: ArrayConstructor,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeMap,\r\n  FinalizationRegistry,\r\n  FunctionPrototypeCall,\r\n  Map,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ObjectSetPrototypeOf,\r\n  Promise,\r\n  PromisePrototypeThen,\r\n  PromiseResolve,\r\n  ReflectApply,\r\n  ReflectConstruct,\r\n  ReflectGet,\r\n  ReflectSet,\r\n  RegExp,\r\n  RegExpPrototype,\r\n  RegExpPrototypeExec,\r\n  RegExpPrototypeGetDotAll,\r\n  RegExpPrototypeGetFlags,\r\n  RegExpPrototypeGetGlobal,\r\n  RegExpPrototypeGetHasIndices,\r\n  RegExpPrototypeGetIgnoreCase,\r\n  RegExpPrototypeGetMultiline,\r\n  RegExpPrototypeGetSource,\r\n  RegExpPrototypeGetSticky,\r\n  RegExpPrototypeGetUnicode,\r\n  Set,\r\n  SymbolIterator,\r\n  SymbolMatch,\r\n  SymbolMatchAll,\r\n  SymbolReplace,\r\n  SymbolSearch,\r\n  SymbolSpecies,\r\n  SymbolSplit,\r\n  WeakMap,\r\n  WeakRef,\r\n  WeakSet,\r\n} = primordials;\r\n\r\n\r\n/**\r\n * Creates a class that can be safely iterated over.\r\n *\r\n * Because these functions are used by `makeSafe`, which is exposed on the\r\n * `primordials` object, it's important to use const references to the\r\n * primordials that they use.\r\n * @template {Iterable} T\r\n * @template {*} TReturn\r\n * @template {*} TNext\r\n * @param {(self: T) => IterableIterator<T>} factory\r\n * @param {(...args: [] | [TNext]) => IteratorResult<T, TReturn>} next\r\n * @returns {Iterator<T, TReturn, TNext>}\r\n */\r\nconst createSafeIterator = (factory, next) => {\r\n  class SafeIterator {\r\n    constructor(iterable) {\r\n      this._iterator = factory(iterable);\r\n    }\r\n    next() {\r\n      return next(this._iterator);\r\n    }\r\n    [SymbolIterator]() {\r\n      return this;\r\n    }\r\n  }\r\n  ObjectSetPrototypeOf(SafeIterator.prototype, null);\r\n  ObjectFreeze(SafeIterator.prototype);\r\n  ObjectFreeze(SafeIterator);\r\n  return SafeIterator;\r\n};\r\n\r\nprimordials.SafeArrayIterator = createSafeIterator(\r\n  primordials.ArrayPrototypeSymbolIterator,\r\n  primordials.ArrayIteratorPrototypeNext,\r\n);\r\nprimordials.SafeStringIterator = createSafeIterator(\r\n  primordials.StringPrototypeSymbolIterator,\r\n  primordials.StringIteratorPrototypeNext,\r\n);\r\n\r\nconst copyProps = (src, dest) => {\r\n  ArrayPrototypeForEach(ReflectOwnKeys(src), (key) => {\r\n    if (!ReflectGetOwnPropertyDescriptor(dest, key)) {\r\n      ReflectDefineProperty(\r\n        dest,\r\n        key,\r\n        { __proto__: null, ...ReflectGetOwnPropertyDescriptor(src, key) });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * @type {typeof primordials.makeSafe}\r\n */\r\nconst makeSafe = (unsafe, safe) => {\r\n  if (SymbolIterator in unsafe.prototype) {\r\n    const dummy = new unsafe();\r\n    let next; // We can reuse the same `next` method.\r\n\r\n    ArrayPrototypeForEach(ReflectOwnKeys(unsafe.prototype), (key) => {\r\n      if (!ReflectGetOwnPropertyDescriptor(safe.prototype, key)) {\r\n        const desc = ReflectGetOwnPropertyDescriptor(unsafe.prototype, key);\r\n        if (\r\n          typeof desc.value === 'function' &&\r\n          desc.value.length === 0 &&\r\n          SymbolIterator in (FunctionPrototypeCall(desc.value, dummy) ?? {})\r\n        ) {\r\n          const createIterator = uncurryThis(desc.value);\r\n          next ??= uncurryThis(createIterator(dummy).next);\r\n          const SafeIterator = createSafeIterator(createIterator, next);\r\n          desc.value = function() {\r\n            return new SafeIterator(this);\r\n          };\r\n        }\r\n        ReflectDefineProperty(safe.prototype, key, { __proto__: null, ...desc });\r\n      }\r\n    });\r\n  } else {\r\n    copyProps(unsafe.prototype, safe.prototype);\r\n  }\r\n  copyProps(unsafe, safe);\r\n\r\n  ObjectSetPrototypeOf(safe.prototype, null);\r\n  ObjectFreeze(safe.prototype);\r\n  ObjectFreeze(safe);\r\n  return safe;\r\n};\r\nprimordials.makeSafe = makeSafe;\r\n\r\n// Subclass the constructors because we need to use their prototype\r\n// methods later.\r\n// Defining the `constructor` is necessary here to avoid the default\r\n// constructor which uses the user-mutable `%ArrayIteratorPrototype%.next`.\r\nprimordials.SafeMap = makeSafe(\r\n  Map,\r\n  class SafeMap extends Map {\r\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\r\n  },\r\n);\r\nprimordials.SafeWeakMap = makeSafe(\r\n  WeakMap,\r\n  class SafeWeakMap extends WeakMap {\r\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\r\n  },\r\n);\r\n\r\nprimordials.SafeSet = makeSafe(\r\n  Set,\r\n  class SafeSet extends Set {\r\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\r\n  },\r\n);\r\nprimordials.SafeWeakSet = makeSafe(\r\n  WeakSet,\r\n  class SafeWeakSet extends WeakSet {\r\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\r\n  },\r\n);\r\n\r\nprimordials.SafeFinalizationRegistry = makeSafe(\r\n  FinalizationRegistry,\r\n  class SafeFinalizationRegistry extends FinalizationRegistry {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(cleanupCallback) { super(cleanupCallback); }\r\n  },\r\n);\r\nprimordials.SafeWeakRef = makeSafe(\r\n  WeakRef,\r\n  class SafeWeakRef extends WeakRef {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(target) { super(target); }\r\n  },\r\n);\r\n\r\nconst SafePromise = makeSafe(\r\n  Promise,\r\n  class SafePromise extends Promise {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(executor) { super(executor); }\r\n  },\r\n);\r\n\r\n/**\r\n * Attaches a callback that is invoked when the Promise is settled (fulfilled or\r\n * rejected). The resolved value cannot be modified from the callback.\r\n * Prefer using async functions when possible.\r\n * @param {Promise<any>} thisPromise\r\n * @param {() => void) | undefined | null} onFinally The callback to execute\r\n *        when the Promise is settled (fulfilled or rejected).\r\n * @returns {Promise} A Promise for the completion of the callback.\r\n */\r\nprimordials.SafePromisePrototypeFinally = (thisPromise, onFinally) =>\r\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\r\n  // prototype to user-land.\r\n  new Promise((a, b) =>\r\n    new SafePromise((a, b) => PromisePrototypeThen(thisPromise, a, b))\r\n      .finally(onFinally)\r\n      .then(a, b),\r\n  );\r\n\r\nprimordials.AsyncIteratorPrototype =\r\n  primordials.ReflectGetPrototypeOf(\r\n    primordials.ReflectGetPrototypeOf(\r\n      async function* () {}).prototype);\r\n\r\nconst arrayToSafePromiseIterable = (promises, mapFn) =>\r\n  new primordials.SafeArrayIterator(\r\n    ArrayPrototypeMap(\r\n      promises,\r\n      (promise, i) =>\r\n        new SafePromise((a, b) => PromisePrototypeThen(mapFn == null ? promise : mapFn(promise, i), a, b)),\r\n    ),\r\n  );\r\n\r\n/**\r\n * @template T,U\r\n * @param {Array<T | PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<Awaited<U>[]>}\r\n */\r\nprimordials.SafePromiseAll = (promises, mapFn) =>\r\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\r\n  // prototype to user-land.\r\n  new Promise((a, b) =>\r\n    SafePromise.all(arrayToSafePromiseIterable(promises, mapFn)).then(a, b),\r\n  );\r\n\r\n/**\r\n * Should only be used for internal functions, this would produce similar\r\n * results as `Promise.all` but without prototype pollution, and the return\r\n * value is not a genuine Array but an array-like object.\r\n * @template T,U\r\n * @param {ArrayLike<T | PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<ArrayLike<Awaited<U>>>}\r\n */\r\nprimordials.SafePromiseAllReturnArrayLike = (promises, mapFn) =>\r\n  new Promise((resolve, reject) => {\r\n    const { length } = promises;\r\n\r\n    const returnVal = ArrayConstructor(length);\r\n    ObjectSetPrototypeOf(returnVal, null);\r\n    if (length === 0) resolve(returnVal);\r\n\r\n    let pendingPromises = length;\r\n    for (let i = 0; i < length; i++) {\r\n      const promise = mapFn != null ? mapFn(promises[i], i) : promises[i];\r\n      PromisePrototypeThen(PromiseResolve(promise), (result) => {\r\n        returnVal[i] = result;\r\n        if (--pendingPromises === 0) resolve(returnVal);\r\n      }, reject);\r\n    }\r\n  });\r\n\r\n/**\r\n * Should only be used when we only care about waiting for all the promises to\r\n * resolve, not what value they resolve to.\r\n * @template T,U\r\n * @param {ArrayLike<T | PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<void>}\r\n */\r\nprimordials.SafePromiseAllReturnVoid = (promises, mapFn) =>\r\n  new Promise((resolve, reject) => {\r\n    let pendingPromises = promises.length;\r\n    if (pendingPromises === 0) resolve();\r\n    const onFulfilled = () => {\r\n      if (--pendingPromises === 0) {\r\n        resolve();\r\n      }\r\n    };\r\n    for (let i = 0; i < promises.length; i++) {\r\n      const promise = mapFn != null ? mapFn(promises[i], i) : promises[i];\r\n      PromisePrototypeThen(PromiseResolve(promise), onFulfilled, reject);\r\n    }\r\n  });\r\n\r\n/**\r\n * @template T,U\r\n * @param {Array<T|PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<PromiseSettledResult<any>[]>}\r\n */\r\nprimordials.SafePromiseAllSettled = (promises, mapFn) =>\r\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\r\n  // prototype to user-land.\r\n  new Promise((a, b) =>\r\n    SafePromise.allSettled(arrayToSafePromiseIterable(promises, mapFn)).then(a, b),\r\n  );\r\n\r\n/**\r\n * Should only be used when we only care about waiting for all the promises to\r\n * settle, not what value they resolve or reject to.\r\n * @template T,U\r\n * @param {ArrayLike<T|PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<void>}\r\n */\r\nprimordials.SafePromiseAllSettledReturnVoid = (promises, mapFn) => new Promise((resolve) => {\r\n  let pendingPromises = promises.length;\r\n  if (pendingPromises === 0) resolve();\r\n  const onSettle = () => {\r\n    if (--pendingPromises === 0) resolve();\r\n  };\r\n  for (let i = 0; i < promises.length; i++) {\r\n    const promise = mapFn != null ? mapFn(promises[i], i) : promises[i];\r\n    PromisePrototypeThen(PromiseResolve(promise), onSettle, onSettle);\r\n  }\r\n});\r\n\r\n/**\r\n * @template T,U\r\n * @param {Array<T|PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<Awaited<U>>}\r\n */\r\nprimordials.SafePromiseAny = (promises, mapFn) =>\r\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\r\n  // prototype to user-land.\r\n  new Promise((a, b) =>\r\n    SafePromise.any(arrayToSafePromiseIterable(promises, mapFn)).then(a, b),\r\n  );\r\n\r\n/**\r\n * @template T,U\r\n * @param {Array<T|PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<Awaited<U>>}\r\n */\r\nprimordials.SafePromiseRace = (promises, mapFn) =>\r\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\r\n  // prototype to user-land.\r\n  new Promise((a, b) =>\r\n    SafePromise.race(arrayToSafePromiseIterable(promises, mapFn)).then(a, b),\r\n  );\r\n\r\n\r\nconst {\r\n  exec: OriginalRegExpPrototypeExec,\r\n  [SymbolMatch]: OriginalRegExpPrototypeSymbolMatch,\r\n  [SymbolMatchAll]: OriginalRegExpPrototypeSymbolMatchAll,\r\n  [SymbolReplace]: OriginalRegExpPrototypeSymbolReplace,\r\n  [SymbolSearch]: OriginalRegExpPrototypeSymbolSearch,\r\n  [SymbolSplit]: OriginalRegExpPrototypeSymbolSplit,\r\n} = RegExpPrototype;\r\n\r\nclass RegExpLikeForStringSplitting {\r\n  #regex;\r\n  constructor() {\r\n    this.#regex = ReflectConstruct(RegExp, arguments);\r\n  }\r\n\r\n  get lastIndex() {\r\n    return ReflectGet(this.#regex, 'lastIndex');\r\n  }\r\n  set lastIndex(value) {\r\n    ReflectSet(this.#regex, 'lastIndex', value);\r\n  }\r\n\r\n  exec() {\r\n    return ReflectApply(OriginalRegExpPrototypeExec, this.#regex, arguments);\r\n  }\r\n}\r\nObjectSetPrototypeOf(RegExpLikeForStringSplitting.prototype, null);\r\n\r\n/**\r\n * @param {RegExp} pattern\r\n * @returns {RegExp}\r\n */\r\nprimordials.hardenRegExp = function hardenRegExp(pattern) {\r\n  ObjectDefineProperties(pattern, {\r\n    [SymbolMatch]: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: OriginalRegExpPrototypeSymbolMatch,\r\n    },\r\n    [SymbolMatchAll]: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: OriginalRegExpPrototypeSymbolMatchAll,\r\n    },\r\n    [SymbolReplace]: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: OriginalRegExpPrototypeSymbolReplace,\r\n    },\r\n    [SymbolSearch]: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: OriginalRegExpPrototypeSymbolSearch,\r\n    },\r\n    [SymbolSplit]: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: OriginalRegExpPrototypeSymbolSplit,\r\n    },\r\n    constructor: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: {\r\n        [SymbolSpecies]: RegExpLikeForStringSplitting,\r\n      },\r\n    },\r\n    dotAll: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetDotAll(pattern),\r\n    },\r\n    exec: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: OriginalRegExpPrototypeExec,\r\n    },\r\n    global: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetGlobal(pattern),\r\n    },\r\n    hasIndices: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetHasIndices(pattern),\r\n    },\r\n    ignoreCase: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetIgnoreCase(pattern),\r\n    },\r\n    multiline: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetMultiline(pattern),\r\n    },\r\n    source: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetSource(pattern),\r\n    },\r\n    sticky: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetSticky(pattern),\r\n    },\r\n    unicode: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetUnicode(pattern),\r\n    },\r\n  });\r\n  ObjectDefineProperty(pattern, 'flags', {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value: RegExpPrototypeGetFlags(pattern),\r\n  });\r\n  return pattern;\r\n};\r\n\r\n\r\n/**\r\n * @param {string} str\r\n * @param {RegExp} regexp\r\n * @returns {number}\r\n */\r\nprimordials.SafeStringPrototypeSearch = (str, regexp) => {\r\n  regexp.lastIndex = 0;\r\n  const match = RegExpPrototypeExec(regexp, str);\r\n  return match ? match.index : -1;\r\n};\r\n\r\nObjectSetPrototypeOf(primordials, null);\r\nObjectFreeze(primordials);\r\n"
  },
  "4": {
    "metadata": {
      "scriptId": "4",
      "url": "node:internal/per_context/domexception",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 153,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "43ce514c107fd4251093b31c959426ec177810f76cf1964d403dbed864dcd2e8",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4636,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/per_context/domexception"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ErrorCaptureStackTrace,\r\n  ErrorPrototype,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  SafeMap,\r\n  SafeSet,\r\n  SafeWeakMap,\r\n  SymbolToStringTag,\r\n  TypeError,\r\n} = primordials;\r\n\r\nfunction throwInvalidThisError(Base, type) {\r\n  const err = new Base();\r\n  const key = 'ERR_INVALID_THIS';\r\n  ObjectDefineProperties(err, {\r\n    message: {\r\n      __proto__: null,\r\n      value: `Value of \"this\" must be of ${type}`,\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: true,\r\n    },\r\n    toString: {\r\n      __proto__: null,\r\n      value() {\r\n        return `${this.name} [${key}]: ${this.message}`;\r\n      },\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: true,\r\n    },\r\n  });\r\n  err.code = key;\r\n  throw err;\r\n}\r\n\r\nconst internalsMap = new SafeWeakMap();\r\nconst nameToCodeMap = new SafeMap();\r\n\r\n// These were removed from the error names table.\r\n// See https://github.com/heycam/webidl/pull/946.\r\nconst disusedNamesSet = new SafeSet()\r\n  .add('DOMStringSizeError')\r\n  .add('NoDataAllowedError')\r\n  .add('ValidationError');\r\n\r\nclass DOMException {\r\n  constructor(message = '', options = 'Error') {\r\n    ErrorCaptureStackTrace(this);\r\n\r\n    if (options && typeof options === 'object') {\r\n      const { name } = options;\r\n      internalsMap.set(this, {\r\n        message: `${message}`,\r\n        name: `${name}`,\r\n      });\r\n\r\n      if ('cause' in options) {\r\n        ObjectDefineProperty(this, 'cause', {\r\n          __proto__: null,\r\n          value: options.cause,\r\n          configurable: true,\r\n          writable: true,\r\n          enumerable: false,\r\n        });\r\n      }\r\n    } else {\r\n      internalsMap.set(this, {\r\n        message: `${message}`,\r\n        name: `${options}`,\r\n      });\r\n    }\r\n  }\r\n\r\n  get name() {\r\n    const internals = internalsMap.get(this);\r\n    if (internals === undefined) {\r\n      throwInvalidThisError(TypeError, 'DOMException');\r\n    }\r\n    return internals.name;\r\n  }\r\n\r\n  get message() {\r\n    const internals = internalsMap.get(this);\r\n    if (internals === undefined) {\r\n      throwInvalidThisError(TypeError, 'DOMException');\r\n    }\r\n    return internals.message;\r\n  }\r\n\r\n  get code() {\r\n    const internals = internalsMap.get(this);\r\n    if (internals === undefined) {\r\n      throwInvalidThisError(TypeError, 'DOMException');\r\n    }\r\n\r\n    if (disusedNamesSet.has(internals.name)) {\r\n      return 0;\r\n    }\r\n\r\n    const code = nameToCodeMap.get(internals.name);\r\n    return code === undefined ? 0 : code;\r\n  }\r\n}\r\n\r\nObjectSetPrototypeOf(DOMException.prototype, ErrorPrototype);\r\nObjectDefineProperties(DOMException.prototype, {\r\n  [SymbolToStringTag]: { __proto__: null, configurable: true, value: 'DOMException' },\r\n  name: { __proto__: null, enumerable: true, configurable: true },\r\n  message: { __proto__: null, enumerable: true, configurable: true },\r\n  code: { __proto__: null, enumerable: true, configurable: true },\r\n});\r\n\r\nfor (const { 0: name, 1: codeName, 2: value } of [\r\n  ['IndexSizeError', 'INDEX_SIZE_ERR', 1],\r\n  ['DOMStringSizeError', 'DOMSTRING_SIZE_ERR', 2],\r\n  ['HierarchyRequestError', 'HIERARCHY_REQUEST_ERR', 3],\r\n  ['WrongDocumentError', 'WRONG_DOCUMENT_ERR', 4],\r\n  ['InvalidCharacterError', 'INVALID_CHARACTER_ERR', 5],\r\n  ['NoDataAllowedError', 'NO_DATA_ALLOWED_ERR', 6],\r\n  ['NoModificationAllowedError', 'NO_MODIFICATION_ALLOWED_ERR', 7],\r\n  ['NotFoundError', 'NOT_FOUND_ERR', 8],\r\n  ['NotSupportedError', 'NOT_SUPPORTED_ERR', 9],\r\n  ['InUseAttributeError', 'INUSE_ATTRIBUTE_ERR', 10],\r\n  ['InvalidStateError', 'INVALID_STATE_ERR', 11],\r\n  ['SyntaxError', 'SYNTAX_ERR', 12],\r\n  ['InvalidModificationError', 'INVALID_MODIFICATION_ERR', 13],\r\n  ['NamespaceError', 'NAMESPACE_ERR', 14],\r\n  ['InvalidAccessError', 'INVALID_ACCESS_ERR', 15],\r\n  ['ValidationError', 'VALIDATION_ERR', 16],\r\n  ['TypeMismatchError', 'TYPE_MISMATCH_ERR', 17],\r\n  ['SecurityError', 'SECURITY_ERR', 18],\r\n  ['NetworkError', 'NETWORK_ERR', 19],\r\n  ['AbortError', 'ABORT_ERR', 20],\r\n  ['URLMismatchError', 'URL_MISMATCH_ERR', 21],\r\n  ['QuotaExceededError', 'QUOTA_EXCEEDED_ERR', 22],\r\n  ['TimeoutError', 'TIMEOUT_ERR', 23],\r\n  ['InvalidNodeTypeError', 'INVALID_NODE_TYPE_ERR', 24],\r\n  ['DataCloneError', 'DATA_CLONE_ERR', 25],\r\n  // There are some more error names, but since they don't have codes assigned,\r\n  // we don't need to care about them.\r\n]) {\r\n  const desc = { enumerable: true, value };\r\n  ObjectDefineProperty(DOMException, codeName, desc);\r\n  ObjectDefineProperty(DOMException.prototype, codeName, desc);\r\n  nameToCodeMap.set(name, value);\r\n}\r\n\r\nexports.DOMException = DOMException;\r\n"
  },
  "5": {
    "metadata": {
      "scriptId": "5",
      "url": "node:internal/per_context/messageport",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 39,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "54d7f5614437826db833ed826cd0438fac4be40d230175286d08ce51e18f61c4",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1034,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/per_context/messageport"
    },
    "source": "'use strict';\r\nconst {\r\n  SymbolFor,\r\n} = primordials;\r\n\r\nclass MessageEvent {\r\n  constructor(data, target, type, ports) {\r\n    this.data = data;\r\n    this.target = target;\r\n    this.type = type;\r\n    this.ports = ports ?? [];\r\n  }\r\n}\r\n\r\nconst kHybridDispatch = SymbolFor('nodejs.internal.kHybridDispatch');\r\nconst kCurrentlyReceivingPorts =\r\n  SymbolFor('nodejs.internal.kCurrentlyReceivingPorts');\r\n\r\nexports.emitMessage = function(data, ports, type) {\r\n  if (typeof this[kHybridDispatch] === 'function') {\r\n    this[kCurrentlyReceivingPorts] = ports;\r\n    try {\r\n      this[kHybridDispatch](data, type, undefined);\r\n    } finally {\r\n      this[kCurrentlyReceivingPorts] = undefined;\r\n    }\r\n    return;\r\n  }\r\n\r\n  const event = new MessageEvent(data, this, type, ports);\r\n  if (type === 'message') {\r\n    if (typeof this.onmessage === 'function')\r\n      this.onmessage(event);\r\n  } else {\r\n    // eslint-disable-next-line no-lonely-if\r\n    if (typeof this.onmessageerror === 'function')\r\n      this.onmessageerror(event);\r\n  }\r\n};\r\n"
  },
  "6": {
    "metadata": {
      "scriptId": "6",
      "url": "node:internal/bootstrap/realm",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 475,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "64cc2970e2b3dca04428986f72a63ba3099c9b18e5ba8f7248753e1f61857d21",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 15757,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/bootstrap/realm"
    },
    "source": "// This file is executed in every realm that is created by Node.js, including\r\n// the context of main thread, worker threads, and ShadowRealms.\r\n// Only per-realm internal states and bindings should be bootstrapped in this\r\n// file and no globals should be exposed to the user code.\r\n//\r\n// This file creates the internal module & binding loaders used by built-in\r\n// modules. In contrast, user land modules are loaded using\r\n// lib/internal/modules/cjs/loader.js (CommonJS Modules) or\r\n// lib/internal/modules/esm/* (ES Modules).\r\n//\r\n// This file is compiled and run by node.cc before bootstrap/node.js\r\n// was called, therefore the loaders are bootstrapped before we start to\r\n// actually bootstrap Node.js. It creates the following objects:\r\n//\r\n// C++ binding loaders:\r\n// - process.binding(): the legacy C++ binding loader, accessible from user land\r\n//   because it is an object attached to the global process object.\r\n//   These C++ bindings are created using NODE_BUILTIN_MODULE_CONTEXT_AWARE()\r\n//   and have their nm_flags set to NM_F_BUILTIN. We do not make any guarantees\r\n//   about the stability of these bindings, but still have to take care of\r\n//   compatibility issues caused by them from time to time.\r\n// - process._linkedBinding(): intended to be used by embedders to add\r\n//   additional C++ bindings in their applications. These C++ bindings\r\n//   can be created using NODE_BINDING_CONTEXT_AWARE_CPP() with the flag\r\n//   NM_F_LINKED.\r\n// - internalBinding(): the private internal C++ binding loader, inaccessible\r\n//   from user land unless through `require('internal/test/binding')`.\r\n//   These C++ bindings are created using NODE_BINDING_CONTEXT_AWARE_INTERNAL()\r\n//   and have their nm_flags set to NM_F_INTERNAL.\r\n//\r\n// Internal JavaScript module loader:\r\n// - BuiltinModule: a minimal module system used to load the JavaScript core\r\n//   modules found in lib/**/*.js and deps/**/*.js. All core modules are\r\n//   compiled into the node binary via node_javascript.cc generated by js2c.py,\r\n//   so they can be loaded faster without the cost of I/O. This class makes the\r\n//   lib/internal/*, deps/internal/* modules and internalBinding() available by\r\n//   default to core modules, and lets the core modules require itself via\r\n//   require('internal/bootstrap/realm') even when this file is not written in\r\n//   CommonJS style.\r\n//\r\n// Other objects:\r\n// - process.moduleLoadList: an array recording the bindings and the modules\r\n//   loaded in the process and the order in which they are loaded.\r\n\r\n'use strict';\r\n\r\n// This file is compiled as if it's wrapped in a function with arguments\r\n// passed by node::RunBootstrapping()\r\n/* global process, getLinkedBinding, getInternalBinding, primordials */\r\n\r\nconst {\r\n  ArrayFrom,\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  Error,\r\n  ObjectDefineProperty,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  ObjectSetPrototypeOf,\r\n  ReflectGet,\r\n  SafeMap,\r\n  SafeSet,\r\n  String,\r\n  StringPrototypeSlice,\r\n  StringPrototypeStartsWith,\r\n  TypeError,\r\n} = primordials;\r\n\r\n// Set up process.moduleLoadList.\r\nconst moduleLoadList = [];\r\nObjectDefineProperty(process, 'moduleLoadList', {\r\n  __proto__: null,\r\n  value: moduleLoadList,\r\n  configurable: true,\r\n  enumerable: true,\r\n  writable: false,\r\n});\r\n\r\n\r\n// processBindingAllowList contains the name of bindings that are allowed\r\n// for access via process.binding(). This is used to provide a transition\r\n// path for modules that are being moved over to internalBinding.\r\n// Certain bindings may not actually correspond to an internalBinding any\r\n// more, we just implement them as legacy wrappers instead. See the\r\n// legacyWrapperList.\r\nconst processBindingAllowList = new SafeSet([\r\n  'buffer',\r\n  'cares_wrap',\r\n  'config',\r\n  'constants',\r\n  'contextify',\r\n  'fs',\r\n  'fs_event_wrap',\r\n  'icu',\r\n  'inspector',\r\n  'js_stream',\r\n  'os',\r\n  'pipe_wrap',\r\n  'process_wrap',\r\n  'spawn_sync',\r\n  'stream_wrap',\r\n  'tcp_wrap',\r\n  'tls_wrap',\r\n  'tty_wrap',\r\n  'udp_wrap',\r\n  'uv',\r\n  'zlib',\r\n]);\r\n\r\nconst runtimeDeprecatedList = new SafeSet([\r\n  'async_wrap',\r\n  'crypto',\r\n  'http_parser',\r\n  'signal_wrap',\r\n  'url',\r\n  'v8',\r\n]);\r\n\r\nconst legacyWrapperList = new SafeSet([\r\n  'natives',\r\n  'util',\r\n]);\r\n\r\n// The code bellow assumes that the two lists must not contain any modules\r\n// beginning with \"internal/\".\r\n// Modules that can only be imported via the node: scheme.\r\nconst schemelessBlockList = new SafeSet([\r\n  'sea',\r\n  'test',\r\n  'test/reporters',\r\n]);\r\n// Modules that will only be enabled at run time.\r\nconst experimentalModuleList = new SafeSet();\r\n\r\n// Set up process.binding() and process._linkedBinding().\r\n{\r\n  const bindingObj = { __proto__: null };\r\n\r\n  process.binding = function binding(module) {\r\n    module = String(module);\r\n    const mod = bindingObj[module];\r\n    if (typeof mod === 'object') {\r\n      return mod;\r\n    }\r\n    // Deprecated specific process.binding() modules, but not all, allow\r\n    // selective fallback to internalBinding for the deprecated ones.\r\n    if (runtimeDeprecatedList.has(module)) {\r\n      process.emitWarning(\r\n        `Access to process.binding('${module}') is deprecated.`,\r\n        'DeprecationWarning',\r\n        'DEP0111');\r\n      return internalBinding(module);\r\n    }\r\n    if (legacyWrapperList.has(module)) {\r\n      return requireBuiltin('internal/legacy/processbinding')[module]();\r\n    }\r\n    if (processBindingAllowList.has(module)) {\r\n      return internalBinding(module);\r\n    }\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    throw new Error(`No such module: ${module}`);\r\n  };\r\n\r\n  process._linkedBinding = function _linkedBinding(module) {\r\n    module = String(module);\r\n    let mod = bindingObj[module];\r\n    if (typeof mod !== 'object')\r\n      mod = bindingObj[module] = getLinkedBinding(module);\r\n    return mod;\r\n  };\r\n}\r\n\r\n/**\r\n * Set up internalBinding() in the closure.\r\n * @type {import('typings/globals').internalBinding}\r\n */\r\nlet internalBinding;\r\n{\r\n  const bindingObj = { __proto__: null };\r\n  // eslint-disable-next-line no-global-assign\r\n  internalBinding = function internalBinding(module) {\r\n    let mod = bindingObj[module];\r\n    if (typeof mod !== 'object') {\r\n      mod = bindingObj[module] = getInternalBinding(module);\r\n      ArrayPrototypePush(moduleLoadList, `Internal Binding ${module}`);\r\n    }\r\n    return mod;\r\n  };\r\n}\r\n\r\nconst selfId = 'internal/bootstrap/realm';\r\nconst {\r\n  builtinIds,\r\n  compileFunction,\r\n  setInternalLoaders,\r\n} = internalBinding('builtins');\r\n\r\nconst { ModuleWrap } = internalBinding('module_wrap');\r\nObjectSetPrototypeOf(ModuleWrap.prototype, null);\r\n\r\nconst getOwn = (target, property, receiver) => {\r\n  return ObjectPrototypeHasOwnProperty(target, property) ?\r\n    ReflectGet(target, property, receiver) :\r\n    undefined;\r\n};\r\n\r\nconst publicBuiltinIds = builtinIds\r\n  .filter((id) =>\r\n    !StringPrototypeStartsWith(id, 'internal/') &&\r\n      !experimentalModuleList.has(id),\r\n  );\r\n// Do not expose the loaders to user land even with --expose-internals.\r\nconst internalBuiltinIds = builtinIds\r\n  .filter((id) => StringPrototypeStartsWith(id, 'internal/') && id !== selfId);\r\n\r\n// When --expose-internals is on we'll add the internal builtin ids to these.\r\nlet canBeRequiredByUsersList = new SafeSet(publicBuiltinIds);\r\nlet canBeRequiredByUsersWithoutSchemeList =\r\n  new SafeSet(publicBuiltinIds.filter((id) => !schemelessBlockList.has(id)));\r\n\r\n/**\r\n * An internal abstraction for the built-in JavaScript modules of Node.js.\r\n * Be careful not to expose this to user land unless --expose-internals is\r\n * used, in which case there is no compatibility guarantee about this class.\r\n */\r\nclass BuiltinModule {\r\n  /**\r\n   * A map from the module IDs to the module instances.\r\n   * @type {Map<string, BuiltinModule>}\r\n   */\r\n  static map = new SafeMap(\r\n    ArrayPrototypeMap(builtinIds, (id) => [id, new BuiltinModule(id)]),\r\n  );\r\n\r\n  constructor(id) {\r\n    this.filename = `${id}.js`;\r\n    this.id = id;\r\n\r\n    // The CJS exports object of the module.\r\n    this.exports = {};\r\n    // States used to work around circular dependencies.\r\n    this.loaded = false;\r\n    this.loading = false;\r\n\r\n    // The following properties are used by the ESM implementation and only\r\n    // initialized when the built-in module is loaded by users.\r\n    /**\r\n     * The C++ ModuleWrap binding used to interface with the ESM implementation.\r\n     * @type {ModuleWrap|undefined}\r\n     */\r\n    this.module = undefined;\r\n    /**\r\n     * Exported names for the ESM imports.\r\n     * @type {string[]|undefined}\r\n     */\r\n    this.exportKeys = undefined;\r\n  }\r\n\r\n  static allowRequireByUsers(id) {\r\n    if (id === selfId) {\r\n      // No code because this is an assertion against bugs.\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      throw new Error(`Should not allow ${id}`);\r\n    }\r\n    canBeRequiredByUsersList.add(id);\r\n    if (!schemelessBlockList.has(id)) {\r\n      canBeRequiredByUsersWithoutSchemeList.add(id);\r\n    }\r\n  }\r\n\r\n  static setRealmAllowRequireByUsers(ids) {\r\n    canBeRequiredByUsersList =\r\n      new SafeSet(ArrayPrototypeFilter(ids, (id) => ArrayPrototypeIncludes(publicBuiltinIds, id)));\r\n    canBeRequiredByUsersWithoutSchemeList =\r\n      new SafeSet(ArrayPrototypeFilter(ids, (id) => !schemelessBlockList.has(id)));\r\n  }\r\n\r\n  // To be called during pre-execution when --expose-internals is on.\r\n  // Enables the user-land module loader to access internal modules.\r\n  static exposeInternals() {\r\n    for (let i = 0; i < internalBuiltinIds.length; ++i) {\r\n      BuiltinModule.allowRequireByUsers(internalBuiltinIds[i]);\r\n    }\r\n  }\r\n\r\n  static exists(id) {\r\n    return BuiltinModule.map.has(id);\r\n  }\r\n\r\n  static canBeRequiredByUsers(id) {\r\n    return canBeRequiredByUsersList.has(id);\r\n  }\r\n\r\n  static canBeRequiredWithoutScheme(id) {\r\n    return canBeRequiredByUsersWithoutSchemeList.has(id);\r\n  }\r\n\r\n  static normalizeRequirableId(id) {\r\n    if (StringPrototypeStartsWith(id, 'node:')) {\r\n      const normalizedId = StringPrototypeSlice(id, 5);\r\n      if (BuiltinModule.canBeRequiredByUsers(normalizedId)) {\r\n        return normalizedId;\r\n      }\r\n    } else if (BuiltinModule.canBeRequiredWithoutScheme(id)) {\r\n      return id;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  static isBuiltin(id) {\r\n    return BuiltinModule.canBeRequiredWithoutScheme(id) || (\r\n      typeof id === 'string' &&\r\n        StringPrototypeStartsWith(id, 'node:') &&\r\n        BuiltinModule.canBeRequiredByUsers(StringPrototypeSlice(id, 5))\r\n    );\r\n  }\r\n\r\n  static getCanBeRequiredByUsersWithoutSchemeList() {\r\n    return ArrayFrom(canBeRequiredByUsersWithoutSchemeList);\r\n  }\r\n\r\n  static getSchemeOnlyModuleNames() {\r\n    return ArrayFrom(schemelessBlockList);\r\n  }\r\n\r\n  // Used by user-land module loaders to compile and load builtins.\r\n  compileForPublicLoader() {\r\n    if (!BuiltinModule.canBeRequiredByUsers(this.id)) {\r\n      // No code because this is an assertion against bugs\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      throw new Error(`Should not compile ${this.id} for public use`);\r\n    }\r\n    this.compileForInternalLoader();\r\n    if (!this.exportKeys) {\r\n      // When using --expose-internals, we do not want to reflect the named\r\n      // exports from core modules as this can trigger unnecessary getters.\r\n      const internal = StringPrototypeStartsWith(this.id, 'internal/');\r\n      this.exportKeys = internal ? [] : ObjectKeys(this.exports);\r\n    }\r\n    return this.exports;\r\n  }\r\n\r\n  getESMFacade() {\r\n    if (this.module) return this.module;\r\n    const url = `node:${this.id}`;\r\n    const builtin = this;\r\n    const exportsKeys = ArrayPrototypeSlice(this.exportKeys);\r\n    if (!ArrayPrototypeIncludes(exportsKeys, 'default')) {\r\n      ArrayPrototypePush(exportsKeys, 'default');\r\n    }\r\n    this.module = new ModuleWrap(\r\n      url, undefined, exportsKeys,\r\n      function() {\r\n        builtin.syncExports();\r\n        this.setExport('default', builtin.exports);\r\n      });\r\n    // Ensure immediate sync execution to capture exports now\r\n    this.module.instantiate();\r\n    this.module.evaluate(-1, false);\r\n    return this.module;\r\n  }\r\n\r\n  // Provide named exports for all builtin libraries so that the libraries\r\n  // may be imported in a nicer way for ESM users. The default export is left\r\n  // as the entire namespace (module.exports) and updates when this function is\r\n  // called so that APMs and other behavior are supported.\r\n  syncExports() {\r\n    const names = this.exportKeys;\r\n    if (this.module) {\r\n      for (let i = 0; i < names.length; i++) {\r\n        const exportName = names[i];\r\n        if (exportName === 'default') continue;\r\n        this.module.setExport(exportName,\r\n                              getOwn(this.exports, exportName, this.exports));\r\n      }\r\n    }\r\n  }\r\n\r\n  compileForInternalLoader() {\r\n    if (this.loaded || this.loading) {\r\n      return this.exports;\r\n    }\r\n\r\n    const id = this.id;\r\n    this.loading = true;\r\n\r\n    try {\r\n      const requireFn = StringPrototypeStartsWith(this.id, 'internal/deps/') ?\r\n        requireWithFallbackInDeps : requireBuiltin;\r\n\r\n      const fn = compileFunction(id);\r\n      // Arguments must match the parameters specified in\r\n      // BuiltinLoader::LookupAndCompile().\r\n      fn(this.exports, requireFn, this, process, internalBinding, primordials);\r\n\r\n      this.loaded = true;\r\n    } finally {\r\n      this.loading = false;\r\n    }\r\n\r\n    // \"NativeModule\" is a legacy name of \"BuiltinModule\". We keep it\r\n    // here to avoid breaking users who parse process.moduleLoadList.\r\n    ArrayPrototypePush(moduleLoadList, `NativeModule ${id}`);\r\n    return this.exports;\r\n  }\r\n}\r\n\r\n// Think of this as module.exports in this file even though it is not\r\n// written in CommonJS style.\r\nconst loaderExports = {\r\n  internalBinding,\r\n  BuiltinModule,\r\n  require: requireBuiltin,\r\n};\r\n\r\nfunction requireBuiltin(id) {\r\n  if (id === selfId) {\r\n    return loaderExports;\r\n  }\r\n\r\n  const mod = BuiltinModule.map.get(id);\r\n  // Can't load the internal errors module from here, have to use a raw error.\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  if (!mod) throw new TypeError(`Missing internal module '${id}'`);\r\n  return mod.compileForInternalLoader();\r\n}\r\n\r\n// Allow internal modules from dependencies to require\r\n// other modules from dependencies by providing fallbacks.\r\nfunction requireWithFallbackInDeps(request) {\r\n  if (StringPrototypeStartsWith(request, 'node:')) {\r\n    request = StringPrototypeSlice(request, 5);\r\n  } else if (!BuiltinModule.map.has(request)) {\r\n    request = `internal/deps/${request}`;\r\n  }\r\n  return requireBuiltin(request);\r\n}\r\n\r\nfunction setupPrepareStackTrace() {\r\n  const {\r\n    setEnhanceStackForFatalException,\r\n    setPrepareStackTraceCallback,\r\n  } = internalBinding('errors');\r\n  const {\r\n    prepareStackTraceCallback,\r\n    ErrorPrepareStackTrace,\r\n    fatalExceptionStackEnhancers: {\r\n      beforeInspector,\r\n      afterInspector,\r\n    },\r\n  } = requireBuiltin('internal/errors');\r\n  // Tell our PrepareStackTraceCallback passed to the V8 API\r\n  // to call prepareStackTrace().\r\n  setPrepareStackTraceCallback(prepareStackTraceCallback);\r\n  // Set the function used to enhance the error stack for printing\r\n  setEnhanceStackForFatalException(beforeInspector, afterInspector);\r\n  // Setup the default Error.prepareStackTrace.\r\n  ObjectDefineProperty(Error, 'prepareStackTrace', {\r\n    __proto__: null,\r\n    writable: true,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: ErrorPrepareStackTrace,\r\n  });\r\n}\r\n\r\n// Store the internal loaders in C++.\r\nsetInternalLoaders(internalBinding, requireBuiltin);\r\n\r\n// Setup per-realm bindings.\r\nsetupPrepareStackTrace();\r\n"
  },
  "7": {
    "metadata": {
      "scriptId": "7",
      "url": "node:internal/errors",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1885,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "22298675d4468f521fe2722c1894ec0d725f853043692e74f6ccf2a2d2d981f2",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 69094,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/errors"
    },
    "source": "/* eslint node-core/documented-errors: \"error\" */\r\n/* eslint node-core/alphabetize-errors: [\"error\", {checkErrorDeclarations: true}] */\r\n/* eslint node-core/prefer-util-format-errors: \"error\" */\r\n\r\n'use strict';\r\n\r\n// The whole point behind this internal module is to allow Node.js to no\r\n// longer be forced to treat every error message change as a semver-major\r\n// change. The NodeError classes here all expose a `code` property whose\r\n// value statically and permanently identifies the error. While the error\r\n// message may change, the code should not.\r\n\r\nconst {\r\n  AggregateError,\r\n  ArrayIsArray,\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSplice,\r\n  ArrayPrototypeUnshift,\r\n  Error,\r\n  ErrorCaptureStackTrace,\r\n  ErrorPrototypeToString,\r\n  JSONStringify,\r\n  MapPrototypeGet,\r\n  MathAbs,\r\n  MathMax,\r\n  Number,\r\n  NumberIsInteger,\r\n  ObjectAssign,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ObjectIsExtensible,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  RangeError,\r\n  ReflectApply,\r\n  RegExpPrototypeExec,\r\n  SafeArrayIterator,\r\n  SafeMap,\r\n  SafeWeakMap,\r\n  String,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeSlice,\r\n  StringPrototypeSplit,\r\n  StringPrototypeStartsWith,\r\n  StringPrototypeToLowerCase,\r\n  Symbol,\r\n  SymbolFor,\r\n  SyntaxError,\r\n  TypeError,\r\n  URIError,\r\n} = primordials;\r\n\r\nconst kIsNodeError = Symbol('kIsNodeError');\r\n\r\nconst isWindows = process.platform === 'win32';\r\n\r\nconst messages = new SafeMap();\r\nconst codes = {};\r\n\r\nconst classRegExp = /^[A-Z][a-zA-Z0-9]*$/;\r\n\r\n// Sorted by a rough estimate on most frequently used entries.\r\nconst kTypes = [\r\n  'string',\r\n  'function',\r\n  'number',\r\n  'object',\r\n  // Accept 'Function' and 'Object' as alternative to the lower cased version.\r\n  'Function',\r\n  'Object',\r\n  'boolean',\r\n  'bigint',\r\n  'symbol',\r\n];\r\n\r\nconst MainContextError = Error;\r\nconst overrideStackTrace = new SafeWeakMap();\r\nlet internalPrepareStackTrace = defaultPrepareStackTrace;\r\n\r\n/**\r\n * The default implementation of `Error.prepareStackTrace` with simple\r\n * concatenation of stack frames.\r\n * Read more about `Error.prepareStackTrace` at https://v8.dev/docs/stack-trace-api#customizing-stack-traces.\r\n */\r\nfunction defaultPrepareStackTrace(error, trace) {\r\n  // Normal error formatting:\r\n  //\r\n  // Error: Message\r\n  //     at function (file)\r\n  //     at file\r\n  let errorString;\r\n  if (kIsNodeError in error) {\r\n    errorString = `${error.name} [${error.code}]: ${error.message}`;\r\n  } else {\r\n    errorString = ErrorPrototypeToString(error);\r\n  }\r\n  if (trace.length === 0) {\r\n    return errorString;\r\n  }\r\n  return `${errorString}\\n    at ${ArrayPrototypeJoin(trace, '\\n    at ')}`;\r\n}\r\n\r\nfunction setInternalPrepareStackTrace(callback) {\r\n  internalPrepareStackTrace = callback;\r\n}\r\n\r\n/**\r\n * Every realm has its own prepareStackTraceCallback. When `error.stack` is\r\n * accessed, if the error is created in a shadow realm, the shadow realm's\r\n * prepareStackTraceCallback is invoked. Otherwise, the principal realm's\r\n * prepareStackTraceCallback is invoked. Note that accessing `error.stack`\r\n * of error objects created in a VM Context will always invoke the\r\n * prepareStackTraceCallback of the principal realm.\r\n * @param {object} globalThis The global object of the realm that the error was\r\n *   created in. When the error object is created in a VM Context, this is the\r\n *   global object of that VM Context.\r\n * @param {object} error The error object.\r\n * @param {CallSite[]} trace An array of CallSite objects, read more at https://v8.dev/docs/stack-trace-api#customizing-stack-traces.\r\n * @returns {string}\r\n */\r\nfunction prepareStackTraceCallback(globalThis, error, trace) {\r\n  // API for node internals to override error stack formatting\r\n  // without interfering with userland code.\r\n  if (overrideStackTrace.has(error)) {\r\n    const f = overrideStackTrace.get(error);\r\n    overrideStackTrace.delete(error);\r\n    return f(error, trace);\r\n  }\r\n\r\n  // Polyfill of V8's Error.prepareStackTrace API.\r\n  // https://crbug.com/v8/7848\r\n  // `globalThis` is the global that contains the constructor which\r\n  // created `error`.\r\n  if (typeof globalThis.Error?.prepareStackTrace === 'function') {\r\n    return globalThis.Error.prepareStackTrace(error, trace);\r\n  }\r\n  // We still have legacy usage that depends on the main context's `Error`\r\n  // being used, even when the error is from a different context.\r\n  // TODO(devsnek): evaluate if this can be eventually deprecated/removed.\r\n  if (typeof MainContextError.prepareStackTrace === 'function') {\r\n    return MainContextError.prepareStackTrace(error, trace);\r\n  }\r\n\r\n  // If the Error.prepareStackTrace was not a function, fallback to the\r\n  // internal implementation.\r\n  return internalPrepareStackTrace(error, trace);\r\n}\r\n\r\n/**\r\n * The default Error.prepareStackTrace implementation.\r\n */\r\nfunction ErrorPrepareStackTrace(error, trace) {\r\n  return internalPrepareStackTrace(error, trace);\r\n}\r\n\r\nconst aggregateTwoErrors = (innerError, outerError) => {\r\n  if (innerError && outerError && innerError !== outerError) {\r\n    if (ArrayIsArray(outerError.errors)) {\r\n      // If `outerError` is already an `AggregateError`.\r\n      ArrayPrototypePush(outerError.errors, innerError);\r\n      return outerError;\r\n    }\r\n    let err;\r\n    if (isErrorStackTraceLimitWritable()) {\r\n      const limit = Error.stackTraceLimit;\r\n      Error.stackTraceLimit = 0;\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      err = new AggregateError(new SafeArrayIterator([\r\n        outerError,\r\n        innerError,\r\n      ]), outerError.message);\r\n      Error.stackTraceLimit = limit;\r\n      ErrorCaptureStackTrace(err, aggregateTwoErrors);\r\n    } else {\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      err = new AggregateError(new SafeArrayIterator([\r\n        outerError,\r\n        innerError,\r\n      ]), outerError.message);\r\n    }\r\n    err.code = outerError.code;\r\n    return err;\r\n  }\r\n  return innerError || outerError;\r\n};\r\n\r\nclass NodeAggregateError extends AggregateError {\r\n  constructor(errors, message) {\r\n    super(new SafeArrayIterator(errors), message);\r\n    this.code = errors[0]?.code;\r\n  }\r\n\r\n  get [kIsNodeError]() {\r\n    return true;\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return AggregateError;\r\n  }\r\n}\r\n\r\nconst assert = require('internal/assert');\r\n\r\n// Lazily loaded\r\nlet util;\r\n\r\nlet internalUtil = null;\r\nfunction lazyInternalUtil() {\r\n  internalUtil ??= require('internal/util');\r\n  return internalUtil;\r\n}\r\n\r\nlet internalUtilInspect = null;\r\nfunction lazyInternalUtilInspect() {\r\n  internalUtilInspect ??= require('internal/util/inspect');\r\n  return internalUtilInspect;\r\n}\r\n\r\nlet utilColors;\r\nfunction lazyUtilColors() {\r\n  utilColors ??= require('internal/util/colors');\r\n  return utilColors;\r\n}\r\n\r\nlet buffer;\r\nfunction lazyBuffer() {\r\n  buffer ??= require('buffer').Buffer;\r\n  return buffer;\r\n}\r\n\r\nfunction isErrorStackTraceLimitWritable() {\r\n  // Do no touch Error.stackTraceLimit as V8 would attempt to install\r\n  // it again during deserialization.\r\n  if (require('internal/v8/startup_snapshot').namespace.isBuildingSnapshot()) {\r\n    return false;\r\n  }\r\n\r\n  const desc = ObjectGetOwnPropertyDescriptor(Error, 'stackTraceLimit');\r\n  if (desc === undefined) {\r\n    return ObjectIsExtensible(Error);\r\n  }\r\n\r\n  return ObjectPrototypeHasOwnProperty(desc, 'writable') ?\r\n    desc.writable :\r\n    desc.set !== undefined;\r\n}\r\n\r\nfunction inspectWithNoCustomRetry(obj, options) {\r\n  const utilInspect = lazyInternalUtilInspect();\r\n\r\n  try {\r\n    return utilInspect.inspect(obj, options);\r\n  } catch {\r\n    return utilInspect.inspect(obj, { ...options, customInspect: false });\r\n  }\r\n}\r\n\r\n// A specialized Error that includes an additional info property with\r\n// additional information about the error condition.\r\n// It has the properties present in a UVException but with a custom error\r\n// message followed by the uv error code and uv error message.\r\n// It also has its own error code with the original uv error context put into\r\n// `err.info`.\r\n// The context passed into this error must have .code, .syscall and .message,\r\n// and may have .path and .dest.\r\nclass SystemError extends Error {\r\n  constructor(key, context) {\r\n    super();\r\n    const prefix = getMessage(key, [], this);\r\n    let message = `${prefix}: ${context.syscall} returned ` +\r\n                  `${context.code} (${context.message})`;\r\n\r\n    if (context.path !== undefined)\r\n      message += ` ${context.path}`;\r\n    if (context.dest !== undefined)\r\n      message += ` => ${context.dest}`;\r\n\r\n    this.code = key;\r\n\r\n    ObjectDefineProperties(this, {\r\n      [kIsNodeError]: {\r\n        __proto__: null,\r\n        value: true,\r\n        enumerable: false,\r\n        writable: false,\r\n        configurable: true,\r\n      },\r\n      name: {\r\n        __proto__: null,\r\n        value: 'SystemError',\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: true,\r\n      },\r\n      message: {\r\n        __proto__: null,\r\n        value: message,\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: true,\r\n      },\r\n      info: {\r\n        __proto__: null,\r\n        value: context,\r\n        enumerable: true,\r\n        configurable: true,\r\n        writable: false,\r\n      },\r\n      errno: {\r\n        __proto__: null,\r\n        get() {\r\n          return context.errno;\r\n        },\r\n        set: (value) => {\r\n          context.errno = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true,\r\n      },\r\n      syscall: {\r\n        __proto__: null,\r\n        get() {\r\n          return context.syscall;\r\n        },\r\n        set: (value) => {\r\n          context.syscall = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true,\r\n      },\r\n    });\r\n\r\n    if (context.path !== undefined) {\r\n      // TODO(BridgeAR): Investigate why and when the `.toString()` was\r\n      // introduced. The `path` and `dest` properties in the context seem to\r\n      // always be of type string. We should probably just remove the\r\n      // `.toString()` and `Buffer.from()` operations and set the value on the\r\n      // context as the user did.\r\n      ObjectDefineProperty(this, 'path', {\r\n        __proto__: null,\r\n        get() {\r\n          return context.path != null ?\r\n            context.path.toString() : context.path;\r\n        },\r\n        set: (value) => {\r\n          context.path = value ?\r\n            lazyBuffer().from(value.toString()) : undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true,\r\n      });\r\n    }\r\n\r\n    if (context.dest !== undefined) {\r\n      ObjectDefineProperty(this, 'dest', {\r\n        __proto__: null,\r\n        get() {\r\n          return context.dest != null ?\r\n            context.dest.toString() : context.dest;\r\n        },\r\n        set: (value) => {\r\n          context.dest = value ?\r\n            lazyBuffer().from(value.toString()) : undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  toString() {\r\n    return `${this.name} [${this.code}]: ${this.message}`;\r\n  }\r\n\r\n  [SymbolFor('nodejs.util.inspect.custom')](recurseTimes, ctx) {\r\n    return lazyInternalUtilInspect().inspect(this, {\r\n      ...ctx,\r\n      getters: true,\r\n      customInspect: false,\r\n    });\r\n  }\r\n}\r\n\r\nfunction makeSystemErrorWithCode(key) {\r\n  return class NodeError extends SystemError {\r\n    constructor(ctx) {\r\n      super(key, ctx);\r\n    }\r\n  };\r\n}\r\n\r\n// This is a special error type that is only used for the E function.\r\nclass HideStackFramesError extends Error {\r\n}\r\n\r\nfunction makeNodeErrorForHideStackFrame(Base, clazz) {\r\n  class HideStackFramesError extends Base {\r\n    constructor(...args) {\r\n      if (isErrorStackTraceLimitWritable()) {\r\n        const limit = Error.stackTraceLimit;\r\n        Error.stackTraceLimit = 0;\r\n        super(...args);\r\n        Error.stackTraceLimit = limit;\r\n      } else {\r\n        super(...args);\r\n      }\r\n    }\r\n\r\n    // This is a workaround for wpt tests that expect that the error\r\n    // constructor has a `name` property of the base class.\r\n    get ['constructor']() {\r\n      return clazz;\r\n    }\r\n  }\r\n\r\n  return HideStackFramesError;\r\n}\r\n\r\nfunction makeNodeErrorWithCode(Base, key) {\r\n  const msg = messages.get(key);\r\n  const expectedLength = typeof msg !== 'string' ? -1 : getExpectedArgumentLength(msg);\r\n\r\n  switch (expectedLength) {\r\n    case 0: {\r\n      class NodeError extends Base {\r\n        code = key;\r\n\r\n        constructor(...args) {\r\n          assert(\r\n            args.length === 0,\r\n            `Code: ${key}; The provided arguments length (${args.length}) does not ` +\r\n              `match the required ones (${expectedLength}).`,\r\n          );\r\n          super(msg);\r\n        }\r\n\r\n        // This is a workaround for wpt tests that expect that the error\r\n        // constructor has a `name` property of the base class.\r\n        get ['constructor']() {\r\n          return Base;\r\n        }\r\n\r\n        get [kIsNodeError]() {\r\n          return true;\r\n        }\r\n\r\n        toString() {\r\n          return `${this.name} [${key}]: ${this.message}`;\r\n        }\r\n      }\r\n      return NodeError;\r\n    }\r\n    case -1: {\r\n      class NodeError extends Base {\r\n        code = key;\r\n\r\n        constructor(...args) {\r\n          super();\r\n          ObjectDefineProperty(this, 'message', {\r\n            __proto__: null,\r\n            value: getMessage(key, args, this),\r\n            enumerable: false,\r\n            writable: true,\r\n            configurable: true,\r\n          });\r\n        }\r\n\r\n        // This is a workaround for wpt tests that expect that the error\r\n        // constructor has a `name` property of the base class.\r\n        get ['constructor']() {\r\n          return Base;\r\n        }\r\n\r\n        get [kIsNodeError]() {\r\n          return true;\r\n        }\r\n\r\n        toString() {\r\n          return `${this.name} [${key}]: ${this.message}`;\r\n        }\r\n      }\r\n      return NodeError;\r\n    }\r\n    default: {\r\n\r\n      class NodeError extends Base {\r\n        code = key;\r\n\r\n        constructor(...args) {\r\n          assert(\r\n            args.length === expectedLength,\r\n            `Code: ${key}; The provided arguments length (${args.length}) does not ` +\r\n              `match the required ones (${expectedLength}).`,\r\n          );\r\n\r\n          ArrayPrototypeUnshift(args, msg);\r\n          super(ReflectApply(lazyInternalUtilInspect().format, null, args));\r\n        }\r\n\r\n        // This is a workaround for wpt tests that expect that the error\r\n        // constructor has a `name` property of the base class.\r\n        get ['constructor']() {\r\n          return Base;\r\n        }\r\n\r\n        get [kIsNodeError]() {\r\n          return true;\r\n        }\r\n\r\n        toString() {\r\n          return `${this.name} [${key}]: ${this.message}`;\r\n        }\r\n      }\r\n      return NodeError;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This function removes unnecessary frames from Node.js core errors.\r\n * @template {(...args: unknown[]) => unknown} T\r\n * @param {T} fn\r\n * @returns {T}\r\n */\r\nfunction hideStackFrames(fn) {\r\n  function wrappedFn(...args) {\r\n    try {\r\n      return ReflectApply(fn, this, args);\r\n    } catch (error) {\r\n      Error.stackTraceLimit && ErrorCaptureStackTrace(error, wrappedFn);\r\n      throw error;\r\n    }\r\n  }\r\n  wrappedFn.withoutStackTrace = fn;\r\n  return wrappedFn;\r\n}\r\n\r\n// Utility function for registering the error codes. Only used here. Exported\r\n// *only* to allow for testing.\r\nfunction E(sym, val, def, ...otherClasses) {\r\n  // Special case for SystemError that formats the error message differently\r\n  // The SystemErrors only have SystemError as their base classes.\r\n  messages.set(sym, val);\r\n\r\n  const ErrClass = def === SystemError ?\r\n    makeSystemErrorWithCode(sym) :\r\n    makeNodeErrorWithCode(def, sym);\r\n\r\n  if (otherClasses.length !== 0) {\r\n    if (otherClasses.includes(HideStackFramesError)) {\r\n      if (otherClasses.length !== 1) {\r\n        otherClasses.forEach((clazz) => {\r\n          if (clazz !== HideStackFramesError) {\r\n            ErrClass[clazz.name] = makeNodeErrorWithCode(clazz, sym);\r\n            ErrClass[clazz.name].HideStackFramesError = makeNodeErrorForHideStackFrame(ErrClass[clazz.name], clazz);\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      otherClasses.forEach((clazz) => {\r\n        ErrClass[clazz.name] = makeNodeErrorWithCode(clazz, sym);\r\n      });\r\n    }\r\n  }\r\n\r\n  if (otherClasses.includes(HideStackFramesError)) {\r\n    ErrClass.HideStackFramesError = makeNodeErrorForHideStackFrame(ErrClass, def);\r\n  }\r\n\r\n  codes[sym] = ErrClass;\r\n}\r\n\r\nfunction getExpectedArgumentLength(msg) {\r\n  let expectedLength = 0;\r\n  const regex = /%[dfijoOs]/g;\r\n  while (RegExpPrototypeExec(regex, msg) !== null) expectedLength++;\r\n  return expectedLength;\r\n}\r\n\r\nfunction getMessage(key, args, self) {\r\n  const msg = messages.get(key);\r\n\r\n  if (typeof msg === 'function') {\r\n    assert(\r\n      msg.length <= args.length, // Default options do not count.\r\n      `Code: ${key}; The provided arguments length (${args.length}) does not ` +\r\n        `match the required ones (${msg.length}).`,\r\n    );\r\n    return ReflectApply(msg, self, args);\r\n  }\r\n\r\n  const expectedLength = getExpectedArgumentLength(msg);\r\n  assert(\r\n    expectedLength === args.length,\r\n    `Code: ${key}; The provided arguments length (${args.length}) does not ` +\r\n      `match the required ones (${expectedLength}).`,\r\n  );\r\n  if (args.length === 0)\r\n    return msg;\r\n\r\n  ArrayPrototypeUnshift(args, msg);\r\n  return ReflectApply(lazyInternalUtilInspect().format, null, args);\r\n}\r\n\r\nlet uvBinding;\r\n\r\nfunction lazyUv() {\r\n  uvBinding ??= internalBinding('uv');\r\n  return uvBinding;\r\n}\r\n\r\nconst uvUnmappedError = ['UNKNOWN', 'unknown error'];\r\n\r\nfunction uvErrmapGet(name) {\r\n  uvBinding = lazyUv();\r\n  uvBinding.errmap ??= uvBinding.getErrorMap();\r\n  return MapPrototypeGet(uvBinding.errmap, name);\r\n}\r\n\r\n/**\r\n * This creates an error compatible with errors produced in the C++\r\n * function UVException using a context object with data assembled in C++.\r\n * The goal is to migrate them to ERR_* errors later when compatibility is\r\n * not a concern.\r\n */\r\nclass UVException extends Error {\r\n  /**\r\n   * @param {object} ctx\r\n   */\r\n  constructor(ctx) {\r\n    const { 0: code, 1: uvmsg } = uvErrmapGet(ctx.errno) || uvUnmappedError;\r\n    let message = `${code}: ${ctx.message || uvmsg}, ${ctx.syscall}`;\r\n\r\n    let path;\r\n    let dest;\r\n    if (ctx.path) {\r\n      path = ctx.path.toString();\r\n      message += ` '${path}'`;\r\n    }\r\n    if (ctx.dest) {\r\n      dest = ctx.dest.toString();\r\n      message += ` -> '${dest}'`;\r\n    }\r\n\r\n    super(message);\r\n\r\n    for (const prop of ObjectKeys(ctx)) {\r\n      if (prop === 'message' || prop === 'path' || prop === 'dest') {\r\n        continue;\r\n      }\r\n      this[prop] = ctx[prop];\r\n    }\r\n\r\n    this.code = code;\r\n    if (path) {\r\n      this.path = path;\r\n    }\r\n    if (dest) {\r\n      this.dest = dest;\r\n    }\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return Error;\r\n  }\r\n}\r\n\r\n/**\r\n * This creates an error compatible with errors produced in the C++\r\n * This function should replace the deprecated\r\n * `exceptionWithHostPort()` function.\r\n */\r\nclass UVExceptionWithHostPort extends Error {\r\n  /**\r\n   * @param {number} err - A libuv error number\r\n   * @param {string} syscall\r\n   * @param {string} address\r\n   * @param {number} [port]\r\n   */\r\n  constructor(err, syscall, address, port) {\r\n    const { 0: code, 1: uvmsg } = uvErrmapGet(err) || uvUnmappedError;\r\n    const message = `${syscall} ${code}: ${uvmsg}`;\r\n    let details = '';\r\n\r\n    if (port && port > 0) {\r\n      details = ` ${address}:${port}`;\r\n    } else if (address) {\r\n      details = ` ${address}`;\r\n    }\r\n\r\n    super(`${message}${details}`);\r\n\r\n    this.code = code;\r\n    this.errno = err;\r\n    this.syscall = syscall;\r\n    this.address = address;\r\n    if (port) {\r\n      this.port = port;\r\n    }\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return Error;\r\n  }\r\n}\r\n\r\n/**\r\n * This used to be util._errnoException().\r\n */\r\nclass ErrnoException extends Error {\r\n  /**\r\n   * @param {number} err - A libuv error number\r\n   * @param {string} syscall\r\n   * @param {string} [original] err\r\n   */\r\n  constructor(err, syscall, original) {\r\n    // TODO(joyeecheung): We have to use the type-checked\r\n    // getSystemErrorName(err) to guard against invalid arguments from users.\r\n    // This can be replaced with [ code ] = errmap.get(err) when this method\r\n    // is no longer exposed to user land.\r\n    util ??= require('util');\r\n    const code = util.getSystemErrorName(err);\r\n    const message = original ?\r\n      `${syscall} ${code} ${original}` : `${syscall} ${code}`;\r\n\r\n    super(message);\r\n\r\n    this.errno = err;\r\n    this.code = code;\r\n    this.syscall = syscall;\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return Error;\r\n  }\r\n}\r\n\r\n/**\r\n * Deprecated, new Error is `UVExceptionWithHostPort()`\r\n * New function added the error description directly\r\n * from C++. this method for backwards compatibility\r\n * @param {number} err - A libuv error number\r\n * @param {string} syscall\r\n * @param {string} address\r\n * @param {number} [port]\r\n * @param {string} [additional]\r\n * @returns {Error}\r\n */\r\nclass ExceptionWithHostPort extends Error {\r\n  constructor(err, syscall, address, port, additional) {\r\n    // TODO(joyeecheung): We have to use the type-checked\r\n    // getSystemErrorName(err) to guard against invalid arguments from users.\r\n    // This can be replaced with [ code ] = errmap.get(err) when this method\r\n    // is no longer exposed to user land.\r\n    util ??= require('util');\r\n    const code = util.getSystemErrorName(err);\r\n    let details = '';\r\n    if (port && port > 0) {\r\n      details = ` ${address}:${port}`;\r\n    } else if (address) {\r\n      details = ` ${address}`;\r\n    }\r\n    if (additional) {\r\n      details += ` - Local (${additional})`;\r\n    }\r\n\r\n    super(`${syscall} ${code}${details}`);\r\n\r\n    this.errno = err;\r\n    this.code = code;\r\n    this.syscall = syscall;\r\n    this.address = address;\r\n    if (port) {\r\n      this.port = port;\r\n    }\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return Error;\r\n  }\r\n}\r\n\r\nclass DNSException extends Error {\r\n  /**\r\n   * @param {number|string} code - A libuv error number or a c-ares error code\r\n   * @param {string} syscall\r\n   * @param {string} [hostname]\r\n   */\r\n  constructor(code, syscall, hostname) {\r\n    let errno;\r\n    // If `code` is of type number, it is a libuv error number, else it is a\r\n    // c-ares error code.\r\n    // TODO(joyeecheung): translate c-ares error codes into numeric ones and\r\n    // make them available in a property that's not error.errno (since they\r\n    // can be in conflict with libuv error codes). Also make sure\r\n    // util.getSystemErrorName() can understand them when an being informed that\r\n    // the number is a c-ares error code.\r\n    if (typeof code === 'number') {\r\n      errno = code;\r\n      // ENOTFOUND is not a proper POSIX error, but this error has been in place\r\n      // long enough that it's not practical to remove it.\r\n      if (code === lazyUv().UV_EAI_NODATA || code === lazyUv().UV_EAI_NONAME) {\r\n        code = 'ENOTFOUND'; // Fabricated error name.\r\n      } else {\r\n        code = lazyInternalUtil().getSystemErrorName(code);\r\n      }\r\n    }\r\n    super(`${syscall} ${code}${hostname ? ` ${hostname}` : ''}`);\r\n    this.errno = errno;\r\n    this.code = code;\r\n    this.syscall = syscall;\r\n    if (hostname) {\r\n      this.hostname = hostname;\r\n    }\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return Error;\r\n  }\r\n}\r\n\r\nclass ConnResetException extends Error {\r\n  constructor(msg) {\r\n    super(msg);\r\n    this.code = 'ECONNRESET';\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return Error;\r\n  }\r\n}\r\n\r\nlet maxStack_ErrorName;\r\nlet maxStack_ErrorMessage;\r\n\r\n/**\r\n * Returns true if `err.name` and `err.message` are equal to engine-specific\r\n * values indicating max call stack size has been exceeded.\r\n * \"Maximum call stack size exceeded\" in V8.\r\n * @param {Error} err\r\n * @returns {boolean}\r\n */\r\nfunction isStackOverflowError(err) {\r\n  if (maxStack_ErrorMessage === undefined) {\r\n    try {\r\n      function overflowStack() { overflowStack(); }\r\n      overflowStack();\r\n    } catch (err) {\r\n      maxStack_ErrorMessage = err.message;\r\n      maxStack_ErrorName = err.name;\r\n    }\r\n  }\r\n\r\n  return err && err.name === maxStack_ErrorName &&\r\n         err.message === maxStack_ErrorMessage;\r\n}\r\n\r\n// Only use this for integers! Decimal numbers do not work with this function.\r\nfunction addNumericalSeparator(val) {\r\n  let res = '';\r\n  let i = val.length;\r\n  const start = val[0] === '-' ? 1 : 0;\r\n  for (; i >= start + 4; i -= 3) {\r\n    res = `_${StringPrototypeSlice(val, i - 3, i)}${res}`;\r\n  }\r\n  return `${StringPrototypeSlice(val, 0, i)}${res}`;\r\n}\r\n\r\n// Used to enhance the stack that will be picked up by the inspector\r\nconst kEnhanceStackBeforeInspector = Symbol('kEnhanceStackBeforeInspector');\r\n\r\n// These are supposed to be called only on fatal exceptions before\r\n// the process exits.\r\nconst fatalExceptionStackEnhancers = {\r\n  beforeInspector(error) {\r\n    if (typeof error[kEnhanceStackBeforeInspector] !== 'function') {\r\n      return error.stack;\r\n    }\r\n\r\n    try {\r\n      // Set the error.stack here so it gets picked up by the\r\n      // inspector.\r\n      error.stack = error[kEnhanceStackBeforeInspector]();\r\n    } catch {\r\n      // We are just enhancing the error. If it fails, ignore it.\r\n    }\r\n    return error.stack;\r\n  },\r\n  afterInspector(error) {\r\n    const originalStack = error.stack;\r\n    let useColors = true;\r\n    // Some consoles do not convert ANSI escape sequences to colors,\r\n    // rather display them directly to the stdout. On those consoles,\r\n    // libuv emulates colors by intercepting stdout stream and calling\r\n    // corresponding Windows API functions for setting console colors.\r\n    // However, fatal error are handled differently and we cannot easily\r\n    // highlight them. On Windows, detecting whether a console supports\r\n    // ANSI escape sequences is not reliable.\r\n    if (isWindows) {\r\n      const info = internalBinding('os').getOSInformation();\r\n      const ver = ArrayPrototypeMap(StringPrototypeSplit(info[2], '.'),\r\n                                    Number);\r\n      if (ver[0] !== 10 || ver[2] < 14393) {\r\n        useColors = false;\r\n      }\r\n    }\r\n    const {\r\n      inspect,\r\n      inspectDefaultOptions: {\r\n        colors: defaultColors,\r\n      },\r\n    } = lazyInternalUtilInspect();\r\n    const colors = useColors && (lazyUtilColors().shouldColorize(process.stderr) || defaultColors);\r\n    try {\r\n      return inspect(error, {\r\n        colors,\r\n        customInspect: false,\r\n        depth: MathMax(inspect.defaultOptions.depth, 5),\r\n      });\r\n    } catch {\r\n      return originalStack;\r\n    }\r\n  },\r\n};\r\n\r\nconst {\r\n  privateSymbols: {\r\n    arrow_message_private_symbol,\r\n  },\r\n} = internalBinding('util');\r\n// Ensures the printed error line is from user code.\r\nfunction setArrowMessage(err, arrowMessage) {\r\n  err[arrow_message_private_symbol] = arrowMessage;\r\n}\r\n\r\n// Hide stack lines before the first user code line.\r\nfunction hideInternalStackFrames(error) {\r\n  overrideStackTrace.set(error, (error, stackFrames) => {\r\n    let frames = stackFrames;\r\n    if (typeof stackFrames === 'object') {\r\n      frames = ArrayPrototypeFilter(\r\n        stackFrames,\r\n        (frm) => !StringPrototypeStartsWith(frm.getFileName() || '',\r\n                                            'node:internal'),\r\n      );\r\n    }\r\n    ArrayPrototypeUnshift(frames, error);\r\n    return ArrayPrototypeJoin(frames, '\\n    at ');\r\n  });\r\n}\r\n\r\n// Node uses an AbortError that isn't exactly the same as the DOMException\r\n// to make usage of the error in userland and readable-stream easier.\r\n// It is a regular error with `.code` and `.name`.\r\nclass AbortError extends Error {\r\n  constructor(message = 'The operation was aborted', options = undefined) {\r\n    if (options !== undefined && typeof options !== 'object') {\r\n      throw new codes.ERR_INVALID_ARG_TYPE('options', 'Object', options);\r\n    }\r\n    super(message, options);\r\n    this.code = 'ABORT_ERR';\r\n    this.name = 'AbortError';\r\n  }\r\n}\r\n\r\n/**\r\n * This creates a generic Node.js error.\r\n * @param {string} message The error message.\r\n * @param {object} errorProperties Object with additional properties to be added to the error.\r\n * @returns {Error}\r\n */\r\nconst genericNodeError = hideStackFrames(function genericNodeError(message, errorProperties) {\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const err = new Error(message);\r\n  ObjectAssign(err, errorProperties);\r\n  return err;\r\n});\r\n\r\n/**\r\n * Determine the specific type of a value for type-mismatch errors.\r\n * @param {*} value\r\n * @returns {string}\r\n */\r\nfunction determineSpecificType(value) {\r\n  if (value === null) {\r\n    return 'null';\r\n  } else if (value === undefined) {\r\n    return 'undefined';\r\n  }\r\n\r\n  const type = typeof value;\r\n\r\n  switch (type) {\r\n    case 'bigint':\r\n      return `type bigint (${value}n)`;\r\n    case 'number':\r\n      if (value === 0) {\r\n        return 1 / value === -Infinity ? 'type number (-0)' : 'type number (0)';\r\n      } else if (value !== value) { // eslint-disable-line no-self-compare\r\n        return 'type number (NaN)';\r\n      } else if (value === Infinity) {\r\n        return 'type number (Infinity)';\r\n      } else if (value === -Infinity) {\r\n        return 'type number (-Infinity)';\r\n      }\r\n      return `type number (${value})`;\r\n    case 'boolean':\r\n      return value ? 'type boolean (true)' : 'type boolean (false)';\r\n    case 'symbol':\r\n      return `type symbol (${String(value)})`;\r\n    case 'function':\r\n      return `function ${value.name}`;\r\n    case 'object':\r\n      if (value.constructor && 'name' in value.constructor) {\r\n        return `an instance of ${value.constructor.name}`;\r\n      }\r\n      return `${lazyInternalUtilInspect().inspect(value, { depth: -1 })}`;\r\n    case 'string':\r\n      value.length > 28 && (value = `${StringPrototypeSlice(value, 0, 25)}...`);\r\n      if (StringPrototypeIndexOf(value, \"'\") === -1) {\r\n        return `type string ('${value}')`;\r\n      }\r\n      return `type string (${JSONStringify(value)})`;\r\n    default:\r\n      value = lazyInternalUtilInspect().inspect(value, { colors: false });\r\n      if (value.length > 28) {\r\n        value = `${StringPrototypeSlice(value, 0, 25)}...`;\r\n      }\r\n\r\n      return `type ${type} (${value})`;\r\n  }\r\n}\r\n\r\n/**\r\n * Create a list string in the form like 'A and B' or 'A, B, ..., and Z'.\r\n * We cannot use Intl.ListFormat because it's not available in\r\n * --without-intl builds.\r\n * @param {string[]} array An array of strings.\r\n * @param {string} [type] The list type to be inserted before the last element.\r\n * @returns {string}\r\n */\r\nfunction formatList(array, type = 'and') {\r\n  switch (array.length) {\r\n    case 0: return '';\r\n    case 1: return `${array[0]}`;\r\n    case 2: return `${array[0]} ${type} ${array[1]}`;\r\n    case 3: return `${array[0]}, ${array[1]}, ${type} ${array[2]}`;\r\n    default:\r\n      return `${ArrayPrototypeJoin(ArrayPrototypeSlice(array, 0, -1), ', ')}, ${type} ${array[array.length - 1]}`;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  AbortError,\r\n  aggregateTwoErrors,\r\n  NodeAggregateError,\r\n  codes,\r\n  ConnResetException,\r\n  DNSException,\r\n  // This is exported only to facilitate testing.\r\n  determineSpecificType,\r\n  E,\r\n  ErrnoException,\r\n  ExceptionWithHostPort,\r\n  fatalExceptionStackEnhancers,\r\n  formatList,\r\n  genericNodeError,\r\n  getMessage,\r\n  hideInternalStackFrames,\r\n  hideStackFrames,\r\n  inspectWithNoCustomRetry,\r\n  isErrorStackTraceLimitWritable,\r\n  isStackOverflowError,\r\n  kEnhanceStackBeforeInspector,\r\n  kIsNodeError,\r\n  defaultPrepareStackTrace,\r\n  setInternalPrepareStackTrace,\r\n  overrideStackTrace,\r\n  prepareStackTraceCallback,\r\n  ErrorPrepareStackTrace,\r\n  setArrowMessage,\r\n  SystemError,\r\n  uvErrmapGet,\r\n  UVException,\r\n  UVExceptionWithHostPort,\r\n};\r\n\r\n// To declare an error message, use the E(sym, val, def) function above. The sym\r\n// must be an upper case string. The val can be either a function or a string.\r\n// The def must be an error class.\r\n// The return value of the function must be a string.\r\n// Examples:\r\n// E('EXAMPLE_KEY1', 'This is the error value', Error);\r\n// E('EXAMPLE_KEY2', (a, b) => return `${a} ${b}`, RangeError);\r\n//\r\n// Once an error code has been assigned, the code itself MUST NOT change and\r\n// any given error code must never be reused to identify a different error.\r\n//\r\n// Any error code added here should also be added to the documentation\r\n//\r\n// Note: Please try to keep these in alphabetical order\r\n//\r\n// Note: Node.js specific errors must begin with the prefix ERR_\r\n\r\nE('ERR_ACCESS_DENIED',\r\n  'Access to this API has been restricted. Permission: %s',\r\n  Error);\r\nE('ERR_AMBIGUOUS_ARGUMENT', 'The \"%s\" argument is ambiguous. %s', TypeError);\r\nE('ERR_ARG_NOT_ITERABLE', '%s must be iterable', TypeError);\r\nE('ERR_ASSERTION', '%s', Error);\r\nE('ERR_ASYNC_CALLBACK', '%s must be a function', TypeError);\r\nE('ERR_ASYNC_TYPE', 'Invalid name for async \"type\": %s', TypeError);\r\nE('ERR_BROTLI_INVALID_PARAM', '%s is not a valid Brotli parameter', RangeError);\r\nE('ERR_BUFFER_OUT_OF_BOUNDS',\r\n  // Using a default argument here is important so the argument is not counted\r\n  // towards `Function#length`.\r\n  (name = undefined) => {\r\n    if (name) {\r\n      return `\"${name}\" is outside of buffer bounds`;\r\n    }\r\n    return 'Attempt to access memory outside buffer bounds';\r\n  }, RangeError);\r\nE('ERR_BUFFER_TOO_LARGE',\r\n  'Cannot create a Buffer larger than %s bytes',\r\n  RangeError);\r\nE('ERR_CANNOT_WATCH_SIGINT', 'Cannot watch for SIGINT signals', Error);\r\nE('ERR_CHILD_CLOSED_BEFORE_REPLY',\r\n  'Child closed before reply received', Error);\r\nE('ERR_CHILD_PROCESS_IPC_REQUIRED',\r\n  \"Forked processes must have an IPC channel, missing value 'ipc' in %s\",\r\n  Error);\r\nE('ERR_CHILD_PROCESS_STDIO_MAXBUFFER', '%s maxBuffer length exceeded',\r\n  RangeError);\r\nE('ERR_CONSOLE_WRITABLE_STREAM',\r\n  'Console expects a writable stream instance for %s', TypeError);\r\nE('ERR_CONTEXT_NOT_INITIALIZED', 'context used is not initialized', Error);\r\nE('ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED',\r\n  'Custom engines not supported by this OpenSSL', Error);\r\nE('ERR_CRYPTO_ECDH_INVALID_FORMAT', 'Invalid ECDH format: %s', TypeError);\r\nE('ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY',\r\n  'Public key is not valid for specified curve', Error);\r\nE('ERR_CRYPTO_ENGINE_UNKNOWN', 'Engine \"%s\" was not found', Error);\r\nE('ERR_CRYPTO_FIPS_FORCED',\r\n  'Cannot set FIPS mode, it was forced with --force-fips at startup.', Error);\r\nE('ERR_CRYPTO_FIPS_UNAVAILABLE', 'Cannot set FIPS mode in a non-FIPS build.',\r\n  Error);\r\nE('ERR_CRYPTO_HASH_FINALIZED', 'Digest already called', Error);\r\nE('ERR_CRYPTO_HASH_UPDATE_FAILED', 'Hash update failed', Error);\r\nE('ERR_CRYPTO_INCOMPATIBLE_KEY', 'Incompatible %s: %s', Error);\r\nE('ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS', 'The selected key encoding %s %s.',\r\n  Error);\r\nE('ERR_CRYPTO_INVALID_DIGEST', 'Invalid digest: %s', TypeError);\r\nE('ERR_CRYPTO_INVALID_JWK', 'Invalid JWK data', TypeError);\r\nE('ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE',\r\n  'Invalid key object type %s, expected %s.', TypeError);\r\nE('ERR_CRYPTO_INVALID_STATE', 'Invalid state for operation %s', Error);\r\nE('ERR_CRYPTO_PBKDF2_ERROR', 'PBKDF2 error', Error);\r\nE('ERR_CRYPTO_SCRYPT_INVALID_PARAMETER', 'Invalid scrypt parameter', Error);\r\nE('ERR_CRYPTO_SCRYPT_NOT_SUPPORTED', 'Scrypt algorithm not supported', Error);\r\n// Switch to TypeError. The current implementation does not seem right.\r\nE('ERR_CRYPTO_SIGN_KEY_REQUIRED', 'No key provided to sign', Error);\r\nE('ERR_DEBUGGER_ERROR', '%s', Error);\r\nE('ERR_DEBUGGER_STARTUP_ERROR', '%s', Error);\r\nE('ERR_DIR_CLOSED', 'Directory handle was closed', Error);\r\nE('ERR_DIR_CONCURRENT_OPERATION',\r\n  'Cannot do synchronous work on directory handle with concurrent ' +\r\n  'asynchronous operations', Error);\r\nE('ERR_DNS_SET_SERVERS_FAILED', 'c-ares failed to set servers: \"%s\" [%s]',\r\n  Error);\r\nE('ERR_DOMAIN_CALLBACK_NOT_AVAILABLE',\r\n  'A callback was registered through ' +\r\n     'process.setUncaughtExceptionCaptureCallback(), which is mutually ' +\r\n     'exclusive with using the `domain` module',\r\n  Error);\r\nE('ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE',\r\n  'The `domain` module is in use, which is mutually exclusive with calling ' +\r\n     'process.setUncaughtExceptionCaptureCallback()',\r\n  Error);\r\nE('ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION',\r\n  'Deserialize main function is already configured.', Error);\r\nE('ERR_ENCODING_INVALID_ENCODED_DATA', function(encoding, ret) {\r\n  this.errno = ret;\r\n  return `The encoded data was not valid for encoding ${encoding}`;\r\n}, TypeError);\r\nE('ERR_ENCODING_NOT_SUPPORTED', 'The \"%s\" encoding is not supported',\r\n  RangeError);\r\nE('ERR_EVAL_ESM_CANNOT_PRINT', '--print cannot be used with ESM input', Error);\r\nE('ERR_EVENT_RECURSION', 'The event \"%s\" is already being dispatched', Error);\r\nE('ERR_FALSY_VALUE_REJECTION', function(reason) {\r\n  this.reason = reason;\r\n  return 'Promise was rejected with falsy value';\r\n}, Error, HideStackFramesError);\r\nE('ERR_FEATURE_UNAVAILABLE_ON_PLATFORM',\r\n  'The feature %s is unavailable on the current platform' +\r\n  ', which is being used to run Node.js',\r\n  TypeError);\r\nE('ERR_FS_CP_DIR_TO_NON_DIR',\r\n  'Cannot overwrite non-directory with directory', SystemError);\r\nE('ERR_FS_CP_EEXIST', 'Target already exists', SystemError);\r\nE('ERR_FS_CP_EINVAL', 'Invalid src or dest', SystemError);\r\nE('ERR_FS_CP_FIFO_PIPE', 'Cannot copy a FIFO pipe', SystemError);\r\nE('ERR_FS_CP_NON_DIR_TO_DIR',\r\n  'Cannot overwrite directory with non-directory', SystemError);\r\nE('ERR_FS_CP_SOCKET', 'Cannot copy a socket file', SystemError);\r\nE('ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY',\r\n  'Cannot overwrite symlink in subdirectory of self', SystemError);\r\nE('ERR_FS_CP_UNKNOWN', 'Cannot copy an unknown file type', SystemError);\r\nE('ERR_FS_EISDIR', 'Path is a directory', SystemError, HideStackFramesError);\r\nE('ERR_FS_FILE_TOO_LARGE', 'File size (%s) is greater than 2 GiB', RangeError);\r\nE('ERR_FS_INVALID_SYMLINK_TYPE',\r\n  'Symlink type must be one of \"dir\", \"file\", or \"junction\". Received \"%s\"',\r\n  Error); // Switch to TypeError. The current implementation does not seem right\r\nE('ERR_HTTP2_ALTSVC_INVALID_ORIGIN',\r\n  'HTTP/2 ALTSVC frames require a valid origin', TypeError);\r\nE('ERR_HTTP2_ALTSVC_LENGTH',\r\n  'HTTP/2 ALTSVC frames are limited to 16382 bytes', TypeError);\r\nE('ERR_HTTP2_CONNECT_AUTHORITY',\r\n  ':authority header is required for CONNECT requests', Error);\r\nE('ERR_HTTP2_CONNECT_PATH',\r\n  'The :path header is forbidden for CONNECT requests', Error);\r\nE('ERR_HTTP2_CONNECT_SCHEME',\r\n  'The :scheme header is forbidden for CONNECT requests', Error);\r\nE('ERR_HTTP2_GOAWAY_SESSION',\r\n  'New streams cannot be created after receiving a GOAWAY', Error);\r\nE('ERR_HTTP2_HEADERS_AFTER_RESPOND',\r\n  'Cannot specify additional headers after response initiated', Error);\r\nE('ERR_HTTP2_HEADERS_SENT', 'Response has already been initiated.', Error);\r\nE('ERR_HTTP2_HEADER_SINGLE_VALUE',\r\n  'Header field \"%s\" must only have a single value', TypeError);\r\nE('ERR_HTTP2_INFO_STATUS_NOT_ALLOWED',\r\n  'Informational status codes cannot be used', RangeError);\r\nE('ERR_HTTP2_INVALID_CONNECTION_HEADERS',\r\n  'HTTP/1 Connection specific headers are forbidden: \"%s\"', TypeError);\r\nE('ERR_HTTP2_INVALID_HEADER_VALUE',\r\n  'Invalid value \"%s\" for header \"%s\"', TypeError, HideStackFramesError);\r\nE('ERR_HTTP2_INVALID_INFO_STATUS',\r\n  'Invalid informational status code: %s', RangeError);\r\nE('ERR_HTTP2_INVALID_ORIGIN',\r\n  'HTTP/2 ORIGIN frames require a valid origin', TypeError);\r\nE('ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH',\r\n  'Packed settings length must be a multiple of six', RangeError);\r\nE('ERR_HTTP2_INVALID_PSEUDOHEADER',\r\n  '\"%s\" is an invalid pseudoheader or is used incorrectly', TypeError, HideStackFramesError);\r\nE('ERR_HTTP2_INVALID_SESSION', 'The session has been destroyed', Error);\r\nE('ERR_HTTP2_INVALID_SETTING_VALUE',\r\n  // Using default arguments here is important so the arguments are not counted\r\n  // towards `Function#length`.\r\n  function(name, actual, min = undefined, max = undefined) {\r\n    this.actual = actual;\r\n    if (min !== undefined) {\r\n      this.min = min;\r\n      this.max = max;\r\n    }\r\n    return `Invalid value for setting \"${name}\": ${actual}`;\r\n  }, TypeError, RangeError, HideStackFramesError);\r\nE('ERR_HTTP2_INVALID_STREAM', 'The stream has been destroyed', Error);\r\nE('ERR_HTTP2_MAX_PENDING_SETTINGS_ACK',\r\n  'Maximum number of pending settings acknowledgements', Error);\r\nE('ERR_HTTP2_NESTED_PUSH',\r\n  'A push stream cannot initiate another push stream.', Error);\r\nE('ERR_HTTP2_NO_MEM', 'Out of memory', Error);\r\nE('ERR_HTTP2_NO_SOCKET_MANIPULATION',\r\n  'HTTP/2 sockets should not be directly manipulated (e.g. read and written)',\r\n  Error);\r\nE('ERR_HTTP2_ORIGIN_LENGTH',\r\n  'HTTP/2 ORIGIN frames are limited to 16382 bytes', TypeError);\r\nE('ERR_HTTP2_OUT_OF_STREAMS',\r\n  'No stream ID is available because maximum stream ID has been reached',\r\n  Error);\r\nE('ERR_HTTP2_PAYLOAD_FORBIDDEN',\r\n  'Responses with %s status must not have a payload', Error);\r\nE('ERR_HTTP2_PING_CANCEL', 'HTTP2 ping cancelled', Error);\r\nE('ERR_HTTP2_PING_LENGTH', 'HTTP2 ping payload must be 8 bytes', RangeError);\r\nE('ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED',\r\n  'Cannot set HTTP/2 pseudo-headers', TypeError, HideStackFramesError);\r\nE('ERR_HTTP2_PUSH_DISABLED', 'HTTP/2 client has disabled push streams', Error);\r\nE('ERR_HTTP2_SEND_FILE', 'Directories cannot be sent', Error);\r\nE('ERR_HTTP2_SEND_FILE_NOSEEK',\r\n  'Offset or length can only be specified for regular files', Error);\r\nE('ERR_HTTP2_SESSION_ERROR', 'Session closed with error code %s', Error);\r\nE('ERR_HTTP2_SETTINGS_CANCEL', 'HTTP2 session settings canceled', Error);\r\nE('ERR_HTTP2_SOCKET_BOUND',\r\n  'The socket is already bound to an Http2Session', Error);\r\nE('ERR_HTTP2_SOCKET_UNBOUND',\r\n  'The socket has been disconnected from the Http2Session', Error);\r\nE('ERR_HTTP2_STATUS_101',\r\n  'HTTP status code 101 (Switching Protocols) is forbidden in HTTP/2', Error);\r\nE('ERR_HTTP2_STATUS_INVALID', 'Invalid status code: %s', RangeError);\r\nE('ERR_HTTP2_STREAM_CANCEL', function(error) {\r\n  let msg = 'The pending stream has been canceled';\r\n  if (error) {\r\n    this.cause = error;\r\n    if (typeof error.message === 'string')\r\n      msg += ` (caused by: ${error.message})`;\r\n  }\r\n  return msg;\r\n}, Error);\r\nE('ERR_HTTP2_STREAM_ERROR', 'Stream closed with error code %s', Error);\r\nE('ERR_HTTP2_STREAM_SELF_DEPENDENCY',\r\n  'A stream cannot depend on itself', Error);\r\nE('ERR_HTTP2_TOO_MANY_CUSTOM_SETTINGS',\r\n  'Number of custom settings exceeds MAX_ADDITIONAL_SETTINGS', Error);\r\nE('ERR_HTTP2_TOO_MANY_INVALID_FRAMES', 'Too many invalid HTTP/2 frames', Error);\r\nE('ERR_HTTP2_TRAILERS_ALREADY_SENT',\r\n  'Trailing headers have already been sent', Error);\r\nE('ERR_HTTP2_TRAILERS_NOT_READY',\r\n  'Trailing headers cannot be sent until after the wantTrailers event is ' +\r\n  'emitted', Error);\r\nE('ERR_HTTP2_UNSUPPORTED_PROTOCOL', 'protocol \"%s\" is unsupported.', Error);\r\nE('ERR_HTTP_BODY_NOT_ALLOWED',\r\n  'Adding content for this request method or response status is not allowed.', Error);\r\nE('ERR_HTTP_CONTENT_LENGTH_MISMATCH',\r\n  'Response body\\'s content-length of %s byte(s) does not match the content-length of %s byte(s) set in header', Error);\r\nE('ERR_HTTP_HEADERS_SENT',\r\n  'Cannot %s headers after they are sent to the client', Error);\r\nE('ERR_HTTP_INVALID_HEADER_VALUE',\r\n  'Invalid value \"%s\" for header \"%s\"', TypeError, HideStackFramesError);\r\nE('ERR_HTTP_INVALID_STATUS_CODE', 'Invalid status code: %s', RangeError);\r\nE('ERR_HTTP_REQUEST_TIMEOUT', 'Request timeout', Error);\r\nE('ERR_HTTP_SOCKET_ASSIGNED',\r\n  'ServerResponse has an already assigned socket', Error);\r\nE('ERR_HTTP_SOCKET_ENCODING',\r\n  'Changing the socket encoding is not allowed per RFC7230 Section 3.', Error);\r\nE('ERR_HTTP_TRAILER_INVALID',\r\n  'Trailers are invalid with this transfer encoding', Error);\r\nE('ERR_ILLEGAL_CONSTRUCTOR', 'Illegal constructor', TypeError);\r\nE('ERR_IMPORT_ATTRIBUTE_MISSING',\r\n  'Module \"%s\" needs an import attribute of \"%s: %s\"', TypeError);\r\nE('ERR_IMPORT_ATTRIBUTE_TYPE_INCOMPATIBLE',\r\n  'Module \"%s\" is not of type \"%s\"', TypeError);\r\nE('ERR_IMPORT_ATTRIBUTE_UNSUPPORTED',\r\n  'Import attribute \"%s\" with value \"%s\" is not supported', TypeError);\r\nE('ERR_INCOMPATIBLE_OPTION_PAIR',\r\n  'Option \"%s\" cannot be used in combination with option \"%s\"', TypeError, HideStackFramesError);\r\nE('ERR_INPUT_TYPE_NOT_ALLOWED', '--input-type can only be used with string ' +\r\n  'input via --eval, --print, or STDIN', Error);\r\nE('ERR_INSPECTOR_ALREADY_ACTIVATED',\r\n  'Inspector is already activated. Close it with inspector.close() ' +\r\n  'before activating it again.',\r\n  Error);\r\nE('ERR_INSPECTOR_ALREADY_CONNECTED', '%s is already connected', Error);\r\nE('ERR_INSPECTOR_CLOSED', 'Session was closed', Error);\r\nE('ERR_INSPECTOR_COMMAND', 'Inspector error %d: %s', Error);\r\nE('ERR_INSPECTOR_NOT_ACTIVE', 'Inspector is not active', Error);\r\nE('ERR_INSPECTOR_NOT_AVAILABLE', 'Inspector is not available', Error);\r\nE('ERR_INSPECTOR_NOT_CONNECTED', 'Session is not connected', Error);\r\nE('ERR_INSPECTOR_NOT_WORKER', 'Current thread is not a worker', Error);\r\nE('ERR_INTERNAL_ASSERTION', (message) => {\r\n  const suffix = 'This is caused by either a bug in Node.js ' +\r\n    'or incorrect usage of Node.js internals.\\n' +\r\n    'Please open an issue with this stack trace at ' +\r\n    'https://github.com/nodejs/node/issues\\n';\r\n  return message === undefined ? suffix : `${message}\\n${suffix}`;\r\n}, Error);\r\nE('ERR_INVALID_ADDRESS_FAMILY', function(addressType, host, port) {\r\n  this.host = host;\r\n  this.port = port;\r\n  return `Invalid address family: ${addressType} ${host}:${port}`;\r\n}, RangeError);\r\nE('ERR_INVALID_ARG_TYPE',\r\n  (name, expected, actual) => {\r\n    assert(typeof name === 'string', \"'name' must be a string\");\r\n    if (!ArrayIsArray(expected)) {\r\n      expected = [expected];\r\n    }\r\n\r\n    let msg = 'The ';\r\n    if (StringPrototypeEndsWith(name, ' argument')) {\r\n      // For cases like 'first argument'\r\n      msg += `${name} `;\r\n    } else {\r\n      const type = StringPrototypeIncludes(name, '.') ? 'property' : 'argument';\r\n      msg += `\"${name}\" ${type} `;\r\n    }\r\n    msg += 'must be ';\r\n\r\n    const types = [];\r\n    const instances = [];\r\n    const other = [];\r\n\r\n    for (const value of expected) {\r\n      assert(typeof value === 'string',\r\n             'All expected entries have to be of type string');\r\n      if (ArrayPrototypeIncludes(kTypes, value)) {\r\n        ArrayPrototypePush(types, StringPrototypeToLowerCase(value));\r\n      } else if (RegExpPrototypeExec(classRegExp, value) !== null) {\r\n        ArrayPrototypePush(instances, value);\r\n      } else {\r\n        assert(value !== 'object',\r\n               'The value \"object\" should be written as \"Object\"');\r\n        ArrayPrototypePush(other, value);\r\n      }\r\n    }\r\n\r\n    // Special handle `object` in case other instances are allowed to outline\r\n    // the differences between each other.\r\n    if (instances.length > 0) {\r\n      const pos = ArrayPrototypeIndexOf(types, 'object');\r\n      if (pos !== -1) {\r\n        ArrayPrototypeSplice(types, pos, 1);\r\n        ArrayPrototypePush(instances, 'Object');\r\n      }\r\n    }\r\n\r\n    if (types.length > 0) {\r\n      msg += `${types.length > 1 ? 'one of type' : 'of type'} ${formatList(types, 'or')}`;\r\n      if (instances.length > 0 || other.length > 0)\r\n        msg += ' or ';\r\n    }\r\n\r\n    if (instances.length > 0) {\r\n      msg += `an instance of ${formatList(instances, 'or')}`;\r\n      if (other.length > 0)\r\n        msg += ' or ';\r\n    }\r\n\r\n    if (other.length > 0) {\r\n      if (other.length > 1) {\r\n        msg += `one of ${formatList(other, 'or')}`;\r\n      } else {\r\n        if (StringPrototypeToLowerCase(other[0]) !== other[0])\r\n          msg += 'an ';\r\n        msg += `${other[0]}`;\r\n      }\r\n    }\r\n\r\n    msg += `. Received ${determineSpecificType(actual)}`;\r\n\r\n    return msg;\r\n  }, TypeError, HideStackFramesError);\r\nE('ERR_INVALID_ARG_VALUE', (name, value, reason = 'is invalid') => {\r\n  let inspected = lazyInternalUtilInspect().inspect(value);\r\n  if (inspected.length > 128) {\r\n    inspected = `${StringPrototypeSlice(inspected, 0, 128)}...`;\r\n  }\r\n  const type = StringPrototypeIncludes(name, '.') ? 'property' : 'argument';\r\n  return `The ${type} '${name}' ${reason}. Received ${inspected}`;\r\n}, TypeError, RangeError, HideStackFramesError);\r\nE('ERR_INVALID_ASYNC_ID', 'Invalid %s value: %s', RangeError);\r\nE('ERR_INVALID_BUFFER_SIZE',\r\n  'Buffer size must be a multiple of %s', RangeError);\r\nE('ERR_INVALID_CHAR',\r\n  // Using a default argument here is important so the argument is not counted\r\n  // towards `Function#length`.\r\n  (name, field = undefined) => {\r\n    let msg = `Invalid character in ${name}`;\r\n    if (field !== undefined) {\r\n      msg += ` [\"${field}\"]`;\r\n    }\r\n    return msg;\r\n  }, TypeError, HideStackFramesError);\r\nE('ERR_INVALID_CURSOR_POS',\r\n  'Cannot set cursor row without setting its column', TypeError);\r\nE('ERR_INVALID_FD',\r\n  '\"fd\" must be a positive integer: %s', RangeError);\r\nE('ERR_INVALID_FD_TYPE', 'Unsupported fd type: %s', TypeError);\r\nE('ERR_INVALID_FILE_URL_HOST',\r\n  'File URL host must be \"localhost\" or empty on %s', TypeError);\r\nE('ERR_INVALID_FILE_URL_PATH', 'File URL path %s', TypeError);\r\nE('ERR_INVALID_HANDLE_TYPE', 'This handle type cannot be sent', TypeError);\r\nE('ERR_INVALID_HTTP_TOKEN', '%s must be a valid HTTP token [\"%s\"]', TypeError, HideStackFramesError);\r\nE('ERR_INVALID_IP_ADDRESS', 'Invalid IP address: %s', TypeError);\r\nE('ERR_INVALID_MIME_SYNTAX', (production, str, invalidIndex) => {\r\n  const msg = invalidIndex !== -1 ? ` at ${invalidIndex}` : '';\r\n  return `The MIME syntax for a ${production} in \"${str}\" is invalid` + msg;\r\n}, TypeError);\r\nE('ERR_INVALID_MODULE_SPECIFIER', (request, reason, base = undefined) => {\r\n  return `Invalid module \"${request}\" ${reason}${base ?\r\n    ` imported from ${base}` : ''}`;\r\n}, TypeError);\r\nE('ERR_INVALID_PACKAGE_CONFIG', (path, base, message) => {\r\n  return `Invalid package config ${path}${base ? ` while importing ${base}` :\r\n    ''}${message ? `. ${message}` : ''}`;\r\n}, Error);\r\nE('ERR_INVALID_PACKAGE_TARGET',\r\n  (pkgPath, key, target, isImport = false, base = undefined) => {\r\n    const relError = typeof target === 'string' && !isImport &&\r\n      target.length && !StringPrototypeStartsWith(target, './');\r\n    if (key === '.') {\r\n      assert(isImport === false);\r\n      return `Invalid \"exports\" main target ${JSONStringify(target)} defined ` +\r\n        `in the package config ${pkgPath}package.json${base ?\r\n          ` imported from ${base}` : ''}${relError ?\r\n          '; targets must start with \"./\"' : ''}`;\r\n    }\r\n    return `Invalid \"${isImport ? 'imports' : 'exports'}\" target ${\r\n      JSONStringify(target)} defined for '${key}' in the package config ${\r\n      pkgPath}package.json${base ? ` imported from ${base}` : ''}${relError ?\r\n      '; targets must start with \"./\"' : ''}`;\r\n  }, Error);\r\nE('ERR_INVALID_PROTOCOL',\r\n  'Protocol \"%s\" not supported. Expected \"%s\"',\r\n  TypeError);\r\nE('ERR_INVALID_REPL_EVAL_CONFIG',\r\n  'Cannot specify both \"breakEvalOnSigint\" and \"eval\" for REPL', TypeError);\r\nE('ERR_INVALID_REPL_INPUT', '%s', TypeError);\r\nE('ERR_INVALID_RETURN_PROPERTY', (input, name, prop, value) => {\r\n  return `Expected a valid ${input} to be returned for the \"${prop}\" from the` +\r\n         ` \"${name}\" hook but got ${determineSpecificType(value)}.`;\r\n}, TypeError);\r\nE('ERR_INVALID_RETURN_PROPERTY_VALUE', (input, name, prop, value) => {\r\n  return `Expected ${input} to be returned for the \"${prop}\" from the` +\r\n         ` \"${name}\" hook but got ${determineSpecificType(value)}.`;\r\n}, TypeError);\r\nE('ERR_INVALID_RETURN_VALUE', (input, name, value) => {\r\n  const type = determineSpecificType(value);\r\n\r\n  return `Expected ${input} to be returned from the \"${name}\"` +\r\n         ` function but got ${type}.`;\r\n}, TypeError, RangeError);\r\nE('ERR_INVALID_STATE', 'Invalid state: %s', Error, TypeError, RangeError);\r\nE('ERR_INVALID_SYNC_FORK_INPUT',\r\n  'Asynchronous forks do not support ' +\r\n    'Buffer, TypedArray, DataView or string input: %s',\r\n  TypeError);\r\nE('ERR_INVALID_THIS', 'Value of \"this\" must be of type %s', TypeError);\r\nE('ERR_INVALID_TUPLE', '%s must be an iterable %s tuple', TypeError);\r\nE('ERR_INVALID_URI', 'URI malformed', URIError);\r\nE('ERR_INVALID_URL', function(input, base = null) {\r\n  this.input = input;\r\n\r\n  if (base != null) {\r\n    this.base = base;\r\n  }\r\n\r\n  // Don't include URL in message.\r\n  // (See https://github.com/nodejs/node/pull/38614)\r\n  return 'Invalid URL';\r\n}, TypeError);\r\nE('ERR_INVALID_URL_SCHEME',\r\n  (expected) => {\r\n    if (typeof expected === 'string')\r\n      expected = [expected];\r\n    assert(expected.length <= 2);\r\n    const res = expected.length === 2 ?\r\n      `one of scheme ${expected[0]} or ${expected[1]}` :\r\n      `of scheme ${expected[0]}`;\r\n    return `The URL must be ${res}`;\r\n  }, TypeError);\r\nE('ERR_IPC_CHANNEL_CLOSED', 'Channel closed', Error);\r\nE('ERR_IPC_DISCONNECTED', 'IPC channel is already disconnected', Error);\r\nE('ERR_IPC_ONE_PIPE', 'Child process can have only one IPC pipe', Error);\r\nE('ERR_IPC_SYNC_FORK', 'IPC cannot be used with synchronous forks', Error);\r\nE(\r\n  'ERR_LOADER_CHAIN_INCOMPLETE',\r\n  '\"%s\" did not call the next hook in its chain and did not' +\r\n  ' explicitly signal a short circuit. If this is intentional, include' +\r\n  ' `shortCircuit: true` in the hook\\'s return.',\r\n  Error,\r\n);\r\nE('ERR_METHOD_NOT_IMPLEMENTED', 'The %s method is not implemented', Error);\r\nE('ERR_MISSING_ARGS',\r\n  (...args) => {\r\n    assert(args.length > 0, 'At least one arg needs to be specified');\r\n    let msg = 'The ';\r\n    const len = args.length;\r\n    const wrap = (a) => `\"${a}\"`;\r\n    args = ArrayPrototypeMap(\r\n      args,\r\n      (a) => (ArrayIsArray(a) ?\r\n        ArrayPrototypeJoin(ArrayPrototypeMap(a, wrap), ' or ') :\r\n        wrap(a)),\r\n    );\r\n    msg += `${formatList(args)} argument${len > 1 ? 's' : ''}`;\r\n    return `${msg} must be specified`;\r\n  }, TypeError);\r\nE('ERR_MISSING_OPTION', '%s is required', TypeError);\r\nE('ERR_MODULE_NOT_FOUND', function(path, base, exactUrl) {\r\n  if (exactUrl) {\r\n    lazyInternalUtil().setOwnProperty(this, 'url', `${exactUrl}`);\r\n  }\r\n  return `Cannot find ${\r\n    exactUrl ? 'module' : 'package'} '${path}' imported from ${base}`;\r\n}, Error);\r\nE('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times', Error);\r\nE('ERR_NAPI_CONS_FUNCTION', 'Constructor must be a function', TypeError);\r\nE('ERR_NAPI_INVALID_DATAVIEW_ARGS',\r\n  'byte_offset + byte_length should be less than or equal to the size in ' +\r\n    'bytes of the array passed in',\r\n  RangeError);\r\nE('ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT',\r\n  'start offset of %s should be a multiple of %s', RangeError);\r\nE('ERR_NAPI_INVALID_TYPEDARRAY_LENGTH',\r\n  'Invalid typed array length', RangeError);\r\nE('ERR_NETWORK_IMPORT_BAD_RESPONSE',\r\n  \"import '%s' received a bad response: %s\", Error);\r\nE('ERR_NETWORK_IMPORT_DISALLOWED',\r\n  \"import of '%s' by %s is not supported: %s\", Error);\r\nE('ERR_NOT_BUILDING_SNAPSHOT',\r\n  'Operation cannot be invoked when not building startup snapshot', Error);\r\nE('ERR_NOT_IN_SINGLE_EXECUTABLE_APPLICATION',\r\n  'Operation cannot be invoked when not in a single-executable application', Error);\r\nE('ERR_NOT_SUPPORTED_IN_SNAPSHOT', '%s is not supported in startup snapshot', Error);\r\nE('ERR_NO_CRYPTO',\r\n  'Node.js is not compiled with OpenSSL crypto support', Error);\r\nE('ERR_NO_ICU',\r\n  '%s is not supported on Node.js compiled without ICU', TypeError);\r\nE('ERR_OPERATION_FAILED', 'Operation failed: %s', Error, TypeError);\r\nE('ERR_OUT_OF_RANGE',\r\n  (str, range, input, replaceDefaultBoolean = false) => {\r\n    assert(range, 'Missing \"range\" argument');\r\n    let msg = replaceDefaultBoolean ? str :\r\n      `The value of \"${str}\" is out of range.`;\r\n    let received;\r\n    if (NumberIsInteger(input) && MathAbs(input) > 2 ** 32) {\r\n      received = addNumericalSeparator(String(input));\r\n    } else if (typeof input === 'bigint') {\r\n      received = String(input);\r\n      if (input > 2n ** 32n || input < -(2n ** 32n)) {\r\n        received = addNumericalSeparator(received);\r\n      }\r\n      received += 'n';\r\n    } else {\r\n      received = lazyInternalUtilInspect().inspect(input);\r\n    }\r\n    msg += ` It must be ${range}. Received ${received}`;\r\n    return msg;\r\n  }, RangeError, HideStackFramesError);\r\nE('ERR_PACKAGE_IMPORT_NOT_DEFINED', (specifier, packagePath, base) => {\r\n  return `Package import specifier \"${specifier}\" is not defined${packagePath ?\r\n    ` in package ${packagePath}package.json` : ''} imported from ${base}`;\r\n}, TypeError);\r\nE('ERR_PACKAGE_PATH_NOT_EXPORTED', (pkgPath, subpath, base = undefined) => {\r\n  if (subpath === '.')\r\n    return `No \"exports\" main defined in ${pkgPath}package.json${base ?\r\n      ` imported from ${base}` : ''}`;\r\n  return `Package subpath '${subpath}' is not defined by \"exports\" in ${\r\n    pkgPath}package.json${base ? ` imported from ${base}` : ''}`;\r\n}, Error);\r\nE('ERR_PARSE_ARGS_INVALID_OPTION_VALUE', '%s', TypeError);\r\nE('ERR_PARSE_ARGS_UNEXPECTED_POSITIONAL', \"Unexpected argument '%s'. This \" +\r\n  'command does not take positional arguments', TypeError);\r\nE('ERR_PARSE_ARGS_UNKNOWN_OPTION', (option, allowPositionals) => {\r\n  const suggestDashDash = allowPositionals ? '. To specify a positional ' +\r\n    \"argument starting with a '-', place it at the end of the command after \" +\r\n    `'--', as in '-- ${JSONStringify(option)}` : '';\r\n  return `Unknown option '${option}'${suggestDashDash}`;\r\n}, TypeError);\r\nE('ERR_PERFORMANCE_INVALID_TIMESTAMP',\r\n  '%d is not a valid timestamp', TypeError);\r\nE('ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS', '%s', TypeError);\r\nE('ERR_REQUIRE_CYCLE_MODULE', '%s', Error);\r\nE('ERR_REQUIRE_ESM',\r\n  function(filename, hasEsmSyntax, parentPath = null, packageJsonPath = null) {\r\n    hideInternalStackFrames(this);\r\n    let msg = `require() of ES Module ${filename}${parentPath ? ` from ${\r\n      parentPath}` : ''} not supported.`;\r\n    if (!packageJsonPath) {\r\n      if (StringPrototypeEndsWith(filename, '.mjs'))\r\n        msg += `\\nInstead change the require of ${filename} to a dynamic ` +\r\n            'import() which is available in all CommonJS modules.';\r\n      return msg;\r\n    }\r\n    const path = require('path');\r\n    const basename = parentPath && path.basename(filename) ===\r\n      path.basename(parentPath) ? filename : path.basename(filename);\r\n    if (hasEsmSyntax) {\r\n      msg += `\\nInstead change the require of ${basename} in ${parentPath} to` +\r\n        ' a dynamic import() which is available in all CommonJS modules.';\r\n      return msg;\r\n    }\r\n    msg += `\\n${basename} is treated as an ES module file as it is a .js ` +\r\n      'file whose nearest parent package.json contains \"type\": \"module\" ' +\r\n      'which declares all .js files in that package scope as ES modules.' +\r\n      `\\nInstead either rename ${basename} to end in .cjs, change the requiring ` +\r\n      'code to use dynamic import() which is available in all CommonJS ' +\r\n      'modules, or change \"type\": \"module\" to \"type\": \"commonjs\" in ' +\r\n      `${packageJsonPath} to treat all .js files as CommonJS (using .mjs for ` +\r\n      'all ES modules instead).\\n';\r\n    return msg;\r\n  }, Error);\r\nE('ERR_SCRIPT_EXECUTION_INTERRUPTED',\r\n  'Script execution was interrupted by `SIGINT`', Error);\r\nE('ERR_SERVER_ALREADY_LISTEN',\r\n  'Listen method has been called more than once without closing.', Error);\r\nE('ERR_SERVER_NOT_RUNNING', 'Server is not running.', Error);\r\nE('ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND',\r\n  'Cannot find asset %s for the single executable application', Error);\r\nE('ERR_SOCKET_ALREADY_BOUND', 'Socket is already bound', Error);\r\nE('ERR_SOCKET_BAD_BUFFER_SIZE',\r\n  'Buffer size must be a positive integer', TypeError);\r\nE('ERR_SOCKET_BAD_PORT', (name, port, allowZero = true) => {\r\n  assert(typeof allowZero === 'boolean',\r\n         \"The 'allowZero' argument must be of type boolean.\");\r\n  const operator = allowZero ? '>=' : '>';\r\n  return `${name} should be ${operator} 0 and < 65536. Received ${determineSpecificType(port)}.`;\r\n}, RangeError, HideStackFramesError);\r\nE('ERR_SOCKET_BAD_TYPE',\r\n  'Bad socket type specified. Valid types are: udp4, udp6', TypeError);\r\nE('ERR_SOCKET_BUFFER_SIZE',\r\n  'Could not get or set buffer size',\r\n  SystemError);\r\nE('ERR_SOCKET_CLOSED', 'Socket is closed', Error);\r\nE('ERR_SOCKET_CLOSED_BEFORE_CONNECTION',\r\n  'Socket closed before the connection was established',\r\n  Error);\r\nE('ERR_SOCKET_CONNECTION_TIMEOUT',\r\n  'Socket connection timeout', Error);\r\nE('ERR_SOCKET_DGRAM_IS_CONNECTED', 'Already connected', Error);\r\nE('ERR_SOCKET_DGRAM_NOT_CONNECTED', 'Not connected', Error);\r\nE('ERR_SOCKET_DGRAM_NOT_RUNNING', 'Not running', Error);\r\nE('ERR_SRI_PARSE',\r\n  'Subresource Integrity string %j had an unexpected %j at position %d',\r\n  SyntaxError);\r\nE('ERR_STREAM_ALREADY_FINISHED',\r\n  'Cannot call %s after a stream was finished',\r\n  Error);\r\nE('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable', Error);\r\nE('ERR_STREAM_DESTROYED', 'Cannot call %s after a stream was destroyed', Error);\r\nE('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\r\nE('ERR_STREAM_PREMATURE_CLOSE', 'Premature close', Error);\r\nE('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF', Error);\r\nE('ERR_STREAM_UNSHIFT_AFTER_END_EVENT',\r\n  'stream.unshift() after end event', Error);\r\nE('ERR_STREAM_WRAP', 'Stream has StringDecoder set or is in objectMode', Error);\r\nE('ERR_STREAM_WRITE_AFTER_END', 'write after end', Error);\r\nE('ERR_SYNTHETIC', 'JavaScript Callstack', Error);\r\nE('ERR_SYSTEM_ERROR', 'A system error occurred', SystemError, HideStackFramesError);\r\nE('ERR_TAP_LEXER_ERROR', function(errorMsg) {\r\n  hideInternalStackFrames(this);\r\n  return errorMsg;\r\n}, Error);\r\nE('ERR_TAP_PARSER_ERROR', function(errorMsg, details, tokenCausedError, source) {\r\n  hideInternalStackFrames(this);\r\n  this.cause = tokenCausedError;\r\n  const { column, line, start, end } = tokenCausedError.location;\r\n  const errorDetails = `${details} at line ${line}, column ${column} (start ${start}, end ${end})`;\r\n  return errorMsg + errorDetails;\r\n}, SyntaxError);\r\nE('ERR_TAP_VALIDATION_ERROR', function(errorMsg) {\r\n  hideInternalStackFrames(this);\r\n  return errorMsg;\r\n}, Error);\r\nE('ERR_TEST_FAILURE', function(error, failureType) {\r\n  hideInternalStackFrames(this);\r\n  assert(typeof failureType === 'string' || typeof failureType === 'symbol',\r\n         \"The 'failureType' argument must be of type string or symbol.\");\r\n\r\n  let msg = error?.message ?? error;\r\n\r\n  if (typeof msg !== 'string') {\r\n    msg = inspectWithNoCustomRetry(msg);\r\n  }\r\n\r\n  this.failureType = failureType;\r\n  this.cause = error;\r\n  return msg;\r\n}, Error);\r\nE('ERR_TLS_ALPN_CALLBACK_INVALID_RESULT', (value, protocols) => {\r\n  return `ALPN callback returned a value (${\r\n    value\r\n  }) that did not match any of the client's offered protocols (${\r\n    protocols.join(', ')\r\n  })`;\r\n}, TypeError);\r\nE('ERR_TLS_ALPN_CALLBACK_WITH_PROTOCOLS',\r\n  'The ALPNCallback and ALPNProtocols TLS options are mutually exclusive',\r\n  TypeError);\r\nE('ERR_TLS_CERT_ALTNAME_FORMAT', 'Invalid subject alternative name string',\r\n  SyntaxError);\r\nE('ERR_TLS_CERT_ALTNAME_INVALID', function(reason, host, cert) {\r\n  this.reason = reason;\r\n  this.host = host;\r\n  this.cert = cert;\r\n  return `Hostname/IP does not match certificate's altnames: ${reason}`;\r\n}, Error);\r\nE('ERR_TLS_DH_PARAM_SIZE', 'DH parameter size %s is less than 2048', Error);\r\nE('ERR_TLS_HANDSHAKE_TIMEOUT', 'TLS handshake timeout', Error);\r\nE('ERR_TLS_INVALID_CONTEXT', '%s must be a SecureContext', TypeError);\r\nE('ERR_TLS_INVALID_PROTOCOL_VERSION',\r\n  '%j is not a valid %s TLS protocol version', TypeError);\r\nE('ERR_TLS_INVALID_STATE', 'TLS socket connection must be securely established',\r\n  Error);\r\nE('ERR_TLS_PROTOCOL_VERSION_CONFLICT',\r\n  'TLS protocol version %j conflicts with secureProtocol %j', TypeError);\r\nE('ERR_TLS_RENEGOTIATION_DISABLED',\r\n  'TLS session renegotiation disabled for this socket', Error);\r\n\r\n// This should probably be a `TypeError`.\r\nE('ERR_TLS_REQUIRED_SERVER_NAME',\r\n  '\"servername\" is required parameter for Server.addContext', Error);\r\nE('ERR_TLS_SESSION_ATTACK', 'TLS session renegotiation attack detected', Error);\r\nE('ERR_TLS_SNI_FROM_SERVER',\r\n  'Cannot issue SNI from a TLS server-side socket', Error);\r\nE('ERR_TRACE_EVENTS_CATEGORY_REQUIRED',\r\n  'At least one category is required', TypeError);\r\nE('ERR_TRACE_EVENTS_UNAVAILABLE', 'Trace events are unavailable', Error);\r\n\r\n// This should probably be a `RangeError`.\r\nE('ERR_TTY_INIT_FAILED', 'TTY initialization failed', SystemError);\r\nE('ERR_UNAVAILABLE_DURING_EXIT', 'Cannot call function in process exit ' +\r\n  'handler', Error);\r\nE('ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET',\r\n  '`process.setupUncaughtExceptionCapture()` was called while a capture ' +\r\n    'callback was already active',\r\n  Error);\r\nE('ERR_UNESCAPED_CHARACTERS', '%s contains unescaped characters', TypeError);\r\nE('ERR_UNHANDLED_ERROR',\r\n  // Using a default argument here is important so the argument is not counted\r\n  // towards `Function#length`.\r\n  (err = undefined) => {\r\n    const msg = 'Unhandled error.';\r\n    if (err === undefined) return msg;\r\n    return `${msg} (${err})`;\r\n  }, Error);\r\nE('ERR_UNKNOWN_BUILTIN_MODULE', 'No such built-in module: %s', Error);\r\nE('ERR_UNKNOWN_CREDENTIAL', '%s identifier does not exist: %s', Error);\r\nE('ERR_UNKNOWN_ENCODING', 'Unknown encoding: %s', TypeError);\r\nE('ERR_UNKNOWN_FILE_EXTENSION', 'Unknown file extension \"%s\" for %s', TypeError);\r\nE('ERR_UNKNOWN_MODULE_FORMAT', 'Unknown module format: %s for URL %s',\r\n  RangeError);\r\nE('ERR_UNKNOWN_SIGNAL', 'Unknown signal: %s', TypeError, HideStackFramesError);\r\nE('ERR_UNSUPPORTED_DIR_IMPORT', function(path, base, exactUrl) {\r\n  lazyInternalUtil().setOwnProperty(this, 'url', exactUrl);\r\n  return `Directory import '${path}' is not supported ` +\r\n    `resolving ES modules imported from ${base}`;\r\n}, Error);\r\nE('ERR_UNSUPPORTED_ESM_URL_SCHEME', (url, supported) => {\r\n  let msg = `Only URLs with a scheme in: ${formatList(supported)} are supported by the default ESM loader`;\r\n  if (isWindows && url.protocol.length === 2) {\r\n    msg +=\r\n      '. On Windows, absolute paths must be valid file:// URLs';\r\n  }\r\n  msg += `. Received protocol '${url.protocol}'`;\r\n  return msg;\r\n}, Error);\r\nE('ERR_UNSUPPORTED_RESOLVE_REQUEST',\r\n  'Failed to resolve module specifier \"%s\" from \"%s\": Invalid relative URL or base scheme is not hierarchical.',\r\n  TypeError);\r\nE('ERR_USE_AFTER_CLOSE', '%s was closed', Error);\r\n\r\n// This should probably be a `TypeError`.\r\nE('ERR_VALID_PERFORMANCE_ENTRY_TYPE',\r\n  'At least one valid performance entry type is required', Error);\r\nE('ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING',\r\n  'A dynamic import callback was not specified.', TypeError);\r\nE('ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING_FLAG',\r\n  'A dynamic import callback was invoked without --experimental-vm-modules',\r\n  TypeError);\r\nE('ERR_VM_MODULE_ALREADY_LINKED', 'Module has already been linked', Error);\r\nE('ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA',\r\n  'Cached data cannot be created for a module which has been evaluated', Error);\r\nE('ERR_VM_MODULE_DIFFERENT_CONTEXT',\r\n  'Linked modules must use the same context', Error);\r\nE('ERR_VM_MODULE_LINK_FAILURE', function(message, cause) {\r\n  this.cause = cause;\r\n  return message;\r\n}, Error);\r\nE('ERR_VM_MODULE_NOT_MODULE',\r\n  'Provided module is not an instance of Module', Error);\r\nE('ERR_VM_MODULE_STATUS', 'Module status %s', Error);\r\nE('ERR_WASI_ALREADY_STARTED', 'WASI instance has already started', Error);\r\nE('ERR_WEBASSEMBLY_RESPONSE', 'WebAssembly response %s', TypeError);\r\nE('ERR_WORKER_INIT_FAILED', 'Worker initialization failure: %s', Error);\r\nE('ERR_WORKER_INVALID_EXEC_ARGV', (errors, msg = 'invalid execArgv flags') =>\r\n  `Initiated Worker with ${msg}: ${ArrayPrototypeJoin(errors, ', ')}`,\r\n  Error);\r\nE('ERR_WORKER_NOT_RUNNING', 'Worker instance not running', Error);\r\nE('ERR_WORKER_OUT_OF_MEMORY',\r\n  'Worker terminated due to reaching memory limit: %s', Error);\r\nE('ERR_WORKER_PATH', (filename) =>\r\n  'The worker script or module filename must be an absolute path or a ' +\r\n  'relative path starting with \\'./\\' or \\'../\\'.' +\r\n  (StringPrototypeStartsWith(filename, 'file://') ?\r\n    ' Wrap file:// URLs with `new URL`.' : ''\r\n  ) +\r\n  (StringPrototypeStartsWith(filename, 'data:text/javascript') ?\r\n    ' Wrap data: URLs with `new URL`.' : ''\r\n  ) +\r\n  ` Received \"${filename}\"`,\r\n  TypeError);\r\nE('ERR_WORKER_UNSERIALIZABLE_ERROR',\r\n  'Serializing an uncaught exception failed', Error);\r\nE('ERR_WORKER_UNSUPPORTED_OPERATION',\r\n  '%s is not supported in workers', TypeError);\r\nE('ERR_ZLIB_INITIALIZATION_FAILED', 'Initialization failed', Error);\r\n"
  },
  "8": {
    "metadata": {
      "scriptId": "8",
      "url": "node:internal/assert",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 25,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "18d756c23d35317895b40556f266bcd162b8d17b7701f9ab2dc3bd1307d3b71c",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 499,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/assert"
    },
    "source": "'use strict';\r\n\r\nlet error;\r\nfunction lazyError() {\r\n  if (!error) {\r\n    error = require('internal/errors').codes.ERR_INTERNAL_ASSERTION;\r\n  }\r\n  return error;\r\n}\r\n\r\nfunction assert(value, message) {\r\n  if (!value) {\r\n    const ERR_INTERNAL_ASSERTION = lazyError();\r\n    throw new ERR_INTERNAL_ASSERTION(message);\r\n  }\r\n}\r\n\r\nfunction fail(message) {\r\n  const ERR_INTERNAL_ASSERTION = lazyError();\r\n  throw new ERR_INTERNAL_ASSERTION(message);\r\n}\r\n\r\nassert.fail = fail;\r\n\r\nmodule.exports = assert;\r\n"
  },
  "9": {
    "metadata": {
      "scriptId": "9",
      "url": "node:internal/bootstrap/node",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 426,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "8e3b07d1764ddafd1cbe981e9fd86f19140136306f0bc2a7b0b10ac13bb53b64",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 14553,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/bootstrap/node"
    },
    "source": "// Hello, and welcome to hacking node.js!\r\n//\r\n// This file is invoked by `Realm::BootstrapRealm()` in `src/node_realm.cc`,\r\n// and is responsible for setting up Node.js core before main scripts\r\n// under `lib/internal/main/` are executed.\r\n//\r\n// By default, Node.js binaries come with an embedded V8 startup snapshot\r\n// that is generated at build-time with a `node_mksnapshot` executable.\r\n// The snapshot generation code can be found in `SnapshotBuilder::Generate()`\r\n// from `src/node_snapshotable.cc`.\r\n// This snapshot captures the V8 heap initialized by scripts under\r\n// `lib/internal/bootstrap/`, including this file. When initializing the main\r\n// thread, Node.js deserializes the heap from the snapshot, instead of actually\r\n// running this script and others in `lib/internal/bootstrap/`. To disable this\r\n// behavior, pass `--no-node-snapshot` when starting the process so that\r\n// Node.js actually runs this script to initialize the heap.\r\n//\r\n// This script is expected not to perform any asynchronous operations itself\r\n// when being executed - those should be done in either\r\n// `lib/internal/process/pre_execution.js` or in main scripts. It should not\r\n// query any run-time states (e.g. command line arguments, environment\r\n// variables) when being executed - functions in this script that are invoked\r\n// at a later time can, however, query those states lazily.\r\n// The majority of the code here focuses on setting up the global object and\r\n// the process object in a synchronous, environment-independent manner.\r\n//\r\n// Scripts run before this file:\r\n// - `lib/internal/per_context/primordials.js`: this saves copies of JavaScript\r\n//   builtins that won't be affected by user land monkey-patching for internal\r\n//   modules to use.\r\n// - `lib/internal/per_context/domexception.js`: implementation of the\r\n//   `DOMException` class.\r\n// - `lib/internal/per_context/messageport.js`: JS-side components of the\r\n//   `MessagePort` implementation.\r\n// - `lib/internal/bootstrap/realm.js`: this sets up internal binding and\r\n//   module loaders, including `process.binding()`, `process._linkedBinding()`,\r\n//   `internalBinding()` and `BuiltinModule`, and per-realm internal states\r\n//   and bindings, including `prepare_stack_trace_callback`.\r\n//\r\n// The initialization done in this script is included in both the main thread\r\n// and the worker threads. After this, further initialization is done based\r\n// on the configuration of the Node.js instance by executing the scripts in\r\n// `lib/internal/bootstrap/switches/`.\r\n//\r\n// Then, depending on how the Node.js instance is launched, one of the main\r\n// scripts in `lib/internal/main` will be selected by C++ to start the actual\r\n// execution. They may run additional setups exported by\r\n// `lib/internal/process/pre_execution.js` depending on the run-time states.\r\n\r\n'use strict';\r\n\r\n// This file is compiled as if it's wrapped in a function with arguments\r\n// passed by `BuiltinLoader::CompileAndCall()`.\r\n/* global process, require, internalBinding, primordials */\r\n\r\nconst {\r\n  FunctionPrototypeCall,\r\n  JSONParse,\r\n  Number,\r\n  NumberIsNaN,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ObjectGetPrototypeOf,\r\n  ObjectSetPrototypeOf,\r\n  SymbolToStringTag,\r\n  globalThis,\r\n} = primordials;\r\nconst config = internalBinding('config');\r\nconst internalTimers = require('internal/timers');\r\nconst {\r\n  defineOperation,\r\n  deprecate,\r\n} = require('internal/util');\r\nconst {\r\n  validateInteger,\r\n} = require('internal/validators');\r\nconst {\r\n  constants: {\r\n    kExitCode,\r\n    kExiting,\r\n    kHasExitCode,\r\n  },\r\n  privateSymbols: {\r\n    exit_info_private_symbol,\r\n  },\r\n} = internalBinding('util');\r\n\r\nsetupProcessObject();\r\n\r\nsetupGlobalProxy();\r\nsetupBuffer();\r\n\r\nprocess.domain = null;\r\n\r\n// process._exiting and process.exitCode\r\n{\r\n  const fields = process[exit_info_private_symbol];\r\n  ObjectDefineProperty(process, '_exiting', {\r\n    __proto__: null,\r\n    get() {\r\n      return fields[kExiting] === 1;\r\n    },\r\n    set(value) {\r\n      fields[kExiting] = value ? 1 : 0;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n  });\r\n\r\n  let exitCode;\r\n  ObjectDefineProperty(process, 'exitCode', {\r\n    __proto__: null,\r\n    get() {\r\n      return exitCode;\r\n    },\r\n    set(code) {\r\n      if (code !== null && code !== undefined) {\r\n        let value = code;\r\n        if (typeof code === 'string' && code !== '' &&\r\n          NumberIsNaN((value = Number(code)))) {\r\n          value = code;\r\n        }\r\n        validateInteger(value, 'code');\r\n        fields[kExitCode] = value;\r\n        fields[kHasExitCode] = 1;\r\n      } else {\r\n        fields[kHasExitCode] = 0;\r\n      }\r\n      exitCode = code;\r\n    },\r\n    enumerable: true,\r\n    configurable: false,\r\n  });\r\n}\r\nprocess._exiting = false;\r\n\r\n// process.config is serialized config.gypi\r\nconst binding = internalBinding('builtins');\r\n\r\nconst processConfig = JSONParse(binding.config, (_key, value) => {\r\n  // The `reviver` argument of the JSONParse method will visit all the values of\r\n  // the parsed config, including the \"root\" object, so there is no need to\r\n  // explicitly freeze the config outside of this method\r\n  return ObjectFreeze(value);\r\n});\r\n\r\nObjectDefineProperty(process, 'config', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  configurable: true,\r\n  value: processConfig,\r\n});\r\n\r\nrequire('internal/worker/js_transferable').setup();\r\n\r\n// Bootstrappers for all threads, including worker threads and main thread\r\nconst perThreadSetup = require('internal/process/per_thread');\r\nconst rawMethods = internalBinding('process_methods');\r\n\r\n// Set up methods on the process object for all threads\r\n{\r\n  process.dlopen = rawMethods.dlopen;\r\n  process.uptime = rawMethods.uptime;\r\n\r\n  // TODO(joyeecheung): either remove them or make them public\r\n  process._getActiveRequests = rawMethods._getActiveRequests;\r\n  process._getActiveHandles = rawMethods._getActiveHandles;\r\n  process.getActiveResourcesInfo = rawMethods.getActiveResourcesInfo;\r\n\r\n  // TODO(joyeecheung): remove these\r\n  process.reallyExit = rawMethods.reallyExit;\r\n  process._kill = rawMethods._kill;\r\n\r\n  const wrapped = perThreadSetup.wrapProcessMethods(rawMethods);\r\n  process.loadEnvFile = wrapped.loadEnvFile;\r\n  process._rawDebug = wrapped._rawDebug;\r\n  process.cpuUsage = wrapped.cpuUsage;\r\n  process.resourceUsage = wrapped.resourceUsage;\r\n  process.memoryUsage = wrapped.memoryUsage;\r\n  process.constrainedMemory = rawMethods.constrainedMemory;\r\n  process.availableMemory = rawMethods.availableMemory;\r\n  process.kill = wrapped.kill;\r\n  process.exit = wrapped.exit;\r\n\r\n  process.hrtime = perThreadSetup.hrtime;\r\n  process.hrtime.bigint = perThreadSetup.hrtimeBigInt;\r\n\r\n  process.openStdin = function() {\r\n    process.stdin.resume();\r\n    return process.stdin;\r\n  };\r\n}\r\n\r\nconst credentials = internalBinding('credentials');\r\nif (credentials.implementsPosixCredentials) {\r\n  process.getuid = credentials.getuid;\r\n  process.geteuid = credentials.geteuid;\r\n  process.getgid = credentials.getgid;\r\n  process.getegid = credentials.getegid;\r\n  process.getgroups = credentials.getgroups;\r\n}\r\n\r\n// Setup the callbacks that node::AsyncWrap will call when there are hooks to\r\n// process. They use the same functions as the JS embedder API. These callbacks\r\n// are setup immediately to prevent async_wrap.setupHooks() from being hijacked\r\n// and the cost of doing so is negligible.\r\nconst { nativeHooks } = require('internal/async_hooks');\r\ninternalBinding('async_wrap').setupHooks(nativeHooks);\r\n\r\nconst {\r\n  setupTaskQueue,\r\n} = require('internal/process/task_queues');\r\nconst timers = require('timers');\r\n// Non-standard extensions:\r\ndefineOperation(globalThis, 'clearImmediate', timers.clearImmediate);\r\ndefineOperation(globalThis, 'setImmediate', timers.setImmediate);\r\n\r\n// Set the per-Environment callback that will be called\r\n// when the TrackingTraceStateObserver updates trace state.\r\n// Note that when NODE_USE_V8_PLATFORM is true, the observer is\r\n// attached to the per-process TracingController.\r\nconst { setTraceCategoryStateUpdateHandler } = internalBinding('trace_events');\r\nsetTraceCategoryStateUpdateHandler(perThreadSetup.toggleTraceCategoryState);\r\n\r\n// process.allowedNodeEnvironmentFlags\r\nObjectDefineProperty(process, 'allowedNodeEnvironmentFlags', {\r\n  __proto__: null,\r\n  get() {\r\n    const flags = perThreadSetup.buildAllowedFlags();\r\n    process.allowedNodeEnvironmentFlags = flags;\r\n    return process.allowedNodeEnvironmentFlags;\r\n  },\r\n  // If the user tries to set this to another value, override\r\n  // this completely to that value.\r\n  set(value) {\r\n    ObjectDefineProperty(this, 'allowedNodeEnvironmentFlags', {\r\n      __proto__: null,\r\n      value,\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n    });\r\n  },\r\n  enumerable: true,\r\n  configurable: true,\r\n});\r\n\r\n// process.assert\r\nprocess.assert = deprecate(\r\n  perThreadSetup.assert,\r\n  'process.assert() is deprecated. Please use the `assert` module instead.',\r\n  'DEP0100');\r\n\r\n// TODO(joyeecheung): this property has not been well-maintained, should we\r\n// deprecate it in favor of a better API?\r\nconst { isDebugBuild, hasOpenSSL, hasInspector } = config;\r\nconst features = {\r\n  inspector: hasInspector,\r\n  debug: isDebugBuild,\r\n  uv: true,\r\n  ipv6: true,  // TODO(bnoordhuis) ping libuv\r\n  tls_alpn: hasOpenSSL,\r\n  tls_sni: hasOpenSSL,\r\n  tls_ocsp: hasOpenSSL,\r\n  tls: hasOpenSSL,\r\n  // This needs to be dynamic because --no-node-snapshot disables the\r\n  // code cache even if the binary is built with embedded code cache.\r\n  get cached_builtins() {\r\n    return binding.hasCachedBuiltins();\r\n  },\r\n};\r\n\r\nObjectDefineProperty(process, 'features', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  writable: false,\r\n  configurable: false,\r\n  value: features,\r\n});\r\n\r\n{\r\n  const {\r\n    onGlobalUncaughtException,\r\n    setUncaughtExceptionCaptureCallback,\r\n    hasUncaughtExceptionCaptureCallback,\r\n  } = require('internal/process/execution');\r\n\r\n  // For legacy reasons this is still called `_fatalException`, even\r\n  // though it is now a global uncaught exception handler.\r\n  // The C++ land node::errors::TriggerUncaughtException grabs it\r\n  // from the process object because it has been monkey-patchable.\r\n  // TODO(joyeecheung): investigate whether process._fatalException\r\n  // can be deprecated.\r\n  process._fatalException = onGlobalUncaughtException;\r\n  process.setUncaughtExceptionCaptureCallback =\r\n    setUncaughtExceptionCaptureCallback;\r\n  process.hasUncaughtExceptionCaptureCallback =\r\n    hasUncaughtExceptionCaptureCallback;\r\n}\r\n\r\nconst { emitWarning, emitWarningSync } = require('internal/process/warning');\r\nprocess.emitWarning = emitWarning;\r\ninternalBinding('process_methods').setEmitWarningSync(emitWarningSync);\r\n\r\n// We initialize the tick callbacks and the timer callbacks last during\r\n// bootstrap to make sure that any operation done before this are synchronous.\r\n// If any ticks or timers are scheduled before this they are unlikely to work.\r\n{\r\n  const { nextTick, runNextTicks } = setupTaskQueue();\r\n  process.nextTick = nextTick;\r\n  // Used to emulate a tick manually in the JS land.\r\n  // A better name for this function would be `runNextTicks` but\r\n  // it has been exposed to the process object so we keep this legacy name\r\n  // TODO(joyeecheung): either remove it or make it public\r\n  process._tickCallback = runNextTicks;\r\n\r\n  const { setupTimers } = internalBinding('timers');\r\n  const {\r\n    processImmediate,\r\n    processTimers,\r\n  } = internalTimers.getTimerCallbacks(runNextTicks);\r\n  // Sets two per-Environment callbacks that will be run from libuv:\r\n  // - processImmediate will be run in the callback of the per-Environment\r\n  //   check handle.\r\n  // - processTimers will be run in the callback of the per-Environment timer.\r\n  setupTimers(processImmediate, processTimers);\r\n  // Note: only after this point are the timers effective\r\n}\r\n\r\n{\r\n  const {\r\n    getSourceMapsEnabled,\r\n    setSourceMapsEnabled,\r\n    maybeCacheGeneratedSourceMap,\r\n  } = require('internal/source_map/source_map_cache');\r\n  const {\r\n    setMaybeCacheGeneratedSourceMap,\r\n  } = internalBinding('errors');\r\n\r\n  ObjectDefineProperty(process, 'sourceMapsEnabled', {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return getSourceMapsEnabled();\r\n    },\r\n  });\r\n  process.setSourceMapsEnabled = setSourceMapsEnabled;\r\n  // The C++ land calls back to maybeCacheGeneratedSourceMap()\r\n  // when code is generated by user with eval() or new Function()\r\n  // to cache the source maps from the evaluated code, if any.\r\n  setMaybeCacheGeneratedSourceMap(maybeCacheGeneratedSourceMap);\r\n}\r\n\r\n{\r\n  const { getBuiltinModule } = require('internal/modules/helpers');\r\n  process.getBuiltinModule = getBuiltinModule;\r\n}\r\n\r\nfunction setupProcessObject() {\r\n  const EventEmitter = require('events');\r\n  const origProcProto = ObjectGetPrototypeOf(process);\r\n  ObjectSetPrototypeOf(origProcProto, EventEmitter.prototype);\r\n  FunctionPrototypeCall(EventEmitter, process);\r\n  ObjectDefineProperty(process, SymbolToStringTag, {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    writable: true,\r\n    configurable: false,\r\n    value: 'process',\r\n  });\r\n\r\n  // Create global.process as getters so that we have a\r\n  // deprecation path for these in ES Modules.\r\n  // See https://github.com/nodejs/node/pull/26334.\r\n  let _process = process;\r\n  ObjectDefineProperty(globalThis, 'process', {\r\n    __proto__: null,\r\n    get() {\r\n      return _process;\r\n    },\r\n    set(value) {\r\n      _process = value;\r\n    },\r\n    enumerable: false,\r\n    configurable: true,\r\n  });\r\n}\r\n\r\nfunction setupGlobalProxy() {\r\n  ObjectDefineProperty(globalThis, SymbolToStringTag, {\r\n    __proto__: null,\r\n    value: 'global',\r\n    writable: false,\r\n    enumerable: false,\r\n    configurable: true,\r\n  });\r\n  globalThis.global = globalThis;\r\n}\r\n\r\nfunction setupBuffer() {\r\n  const {\r\n    Buffer,\r\n  } = require('buffer');\r\n  const bufferBinding = internalBinding('buffer');\r\n\r\n  // Only after this point can C++ use Buffer::New()\r\n  bufferBinding.setBufferPrototype(Buffer.prototype);\r\n  delete bufferBinding.setBufferPrototype;\r\n\r\n  // Create global.Buffer as getters so that we have a\r\n  // deprecation path for these in ES Modules.\r\n  // See https://github.com/nodejs/node/pull/26334.\r\n  let _Buffer = Buffer;\r\n  ObjectDefineProperty(globalThis, 'Buffer', {\r\n    __proto__: null,\r\n    get() {\r\n      return _Buffer;\r\n    },\r\n    set(value) {\r\n      _Buffer = value;\r\n    },\r\n    enumerable: false,\r\n    configurable: true,\r\n  });\r\n}\r\n"
  },
  "10": {
    "metadata": {
      "scriptId": "10",
      "url": "node:internal/timers",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 686,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "2599c983592bef607785893de9e41974d30238f2bb88e08a0d2ca43b7b61b082",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 20246,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/timers"
    },
    "source": "'use strict';\r\n\r\n// HOW and WHY the timers implementation works the way it does.\r\n//\r\n// Timers are crucial to Node.js. Internally, any TCP I/O connection creates a\r\n// timer so that we can time out of connections. Additionally, many user\r\n// libraries and applications also use timers. As such there may be a\r\n// significantly large amount of timeouts scheduled at any given time.\r\n// Therefore, it is very important that the timers implementation is performant\r\n// and efficient.\r\n//\r\n// Note: It is suggested you first read through the lib/internal/linkedlist.js\r\n// linked list implementation, since timers depend on it extensively. It can be\r\n// somewhat counter-intuitive at first, as it is not actually a class. Instead,\r\n// it is a set of helpers that operate on an existing object.\r\n//\r\n// In order to be as performant as possible, the architecture and data\r\n// structures are designed so that they are optimized to handle the following\r\n// use cases as efficiently as possible:\r\n\r\n// - Adding a new timer. (insert)\r\n// - Removing an existing timer. (remove)\r\n// - Handling a timer timing out. (timeout)\r\n//\r\n// Whenever possible, the implementation tries to make the complexity of these\r\n// operations as close to constant-time as possible.\r\n// (So that performance is not impacted by the number of scheduled timers.)\r\n//\r\n// Object maps are kept which contain linked lists keyed by their duration in\r\n// milliseconds.\r\n//\r\n/* eslint-disable node-core/non-ascii-character */\r\n//\r\n// ╔════ > Object Map\r\n// ║\r\n// ╠══\r\n// ║ lists: { '40': { }, '320': { etc } } (keys of millisecond duration)\r\n// ╚══          ┌────┘\r\n//              │\r\n// ╔══          │\r\n// ║ TimersList { _idleNext: { }, _idlePrev: (self) }\r\n// ║         ┌────────────────┘\r\n// ║    ╔══  │                              ^\r\n// ║    ║    { _idleNext: { },  _idlePrev: { }, _onTimeout: (callback) }\r\n// ║    ║      ┌───────────┘\r\n// ║    ║      │                                  ^\r\n// ║    ║      { _idleNext: { etc },  _idlePrev: { }, _onTimeout: (callback) }\r\n// ╠══  ╠══\r\n// ║    ║\r\n// ║    ╚════ >  Actual JavaScript timeouts\r\n// ║\r\n// ╚════ > Linked List\r\n//\r\n/* eslint-enable node-core/non-ascii-character */\r\n//\r\n// With this, virtually constant-time insertion (append), removal, and timeout\r\n// is possible in the JavaScript layer. Any one list of timers is able to be\r\n// sorted by just appending to it because all timers within share the same\r\n// duration. Therefore, any timer added later will always have been scheduled to\r\n// timeout later, thus only needing to be appended.\r\n// Removal from an object-property linked list is also virtually constant-time\r\n// as can be seen in the lib/internal/linkedlist.js implementation.\r\n// Timeouts only need to process any timers currently due to expire, which will\r\n// always be at the beginning of the list for reasons stated above. Any timers\r\n// after the first one encountered that does not yet need to timeout will also\r\n// always be due to timeout at a later time.\r\n//\r\n// Less-than constant time operations are thus contained in two places:\r\n// The PriorityQueue — an efficient binary heap implementation that does all\r\n// operations in worst-case O(log n) time — which manages the order of expiring\r\n// Timeout lists and the object map lookup of a specific list by the duration of\r\n// timers within (or creation of a new list). However, these operations combined\r\n// have shown to be trivial in comparison to other timers architectures.\r\n\r\nconst {\r\n  MathMax,\r\n  MathTrunc,\r\n  NumberIsFinite,\r\n  NumberMIN_SAFE_INTEGER,\r\n  ReflectApply,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst binding = internalBinding('timers');\r\nconst {\r\n  immediateInfo,\r\n  timeoutInfo,\r\n} = binding;\r\n\r\nconst {\r\n  getDefaultTriggerAsyncId,\r\n  newAsyncId,\r\n  initHooksExist,\r\n  destroyHooksExist,\r\n  // The needed emit*() functions.\r\n  emitInit,\r\n  emitBefore,\r\n  emitAfter,\r\n  emitDestroy,\r\n} = require('internal/async_hooks');\r\n\r\n// Symbols for storing async id state.\r\nconst async_id_symbol = Symbol('asyncId');\r\nconst trigger_async_id_symbol = Symbol('triggerId');\r\n\r\nconst kHasPrimitive = Symbol('kHasPrimitive');\r\n\r\nconst {\r\n  ERR_OUT_OF_RANGE,\r\n} = require('internal/errors').codes;\r\nconst {\r\n  validateFunction,\r\n  validateNumber,\r\n} = require('internal/validators');\r\n\r\nconst L = require('internal/linkedlist');\r\nconst PriorityQueue = require('internal/priority_queue');\r\n\r\nconst { inspect } = require('internal/util/inspect');\r\nlet debug = require('internal/util/debuglog').debuglog('timer', (fn) => {\r\n  debug = fn;\r\n});\r\n\r\n// *Must* match Environment::ImmediateInfo::Fields in src/env.h.\r\nconst kCount = 0;\r\nconst kRefCount = 1;\r\nconst kHasOutstanding = 2;\r\n\r\n// Timeout values > TIMEOUT_MAX are set to 1.\r\nconst TIMEOUT_MAX = 2 ** 31 - 1;\r\n\r\nlet timerListId = NumberMIN_SAFE_INTEGER;\r\n\r\nconst kRefed = Symbol('refed');\r\n\r\nlet nextExpiry = Infinity;\r\n// timeoutInfo is an Int32Array that contains the reference count of Timeout\r\n// objects at index 0. This is a TypedArray so that GetActiveResourcesInfo() in\r\n// `src/node_process_methods.cc` is able to access this value without crossing\r\n// the JS-C++ boundary, which is slow at the time of writing.\r\ntimeoutInfo[0] = 0;\r\n\r\n// This is a priority queue with a custom sorting function that first compares\r\n// the expiry times of two lists and if they're the same then compares their\r\n// individual IDs to determine which list was created first.\r\nconst timerListQueue = new PriorityQueue(compareTimersLists, setPosition);\r\n\r\n// Object map containing linked lists of timers, keyed and sorted by their\r\n// duration in milliseconds.\r\n//\r\n// - key = time in milliseconds\r\n// - value = linked list\r\nconst timerListMap = { __proto__: null };\r\n\r\nfunction initAsyncResource(resource, type) {\r\n  const asyncId = resource[async_id_symbol] = newAsyncId();\r\n  const triggerAsyncId =\r\n    resource[trigger_async_id_symbol] = getDefaultTriggerAsyncId();\r\n  if (initHooksExist())\r\n    emitInit(asyncId, type, triggerAsyncId, resource);\r\n}\r\nclass Timeout {\r\n  // Timer constructor function.\r\n  // The entire prototype is defined in lib/timers.js\r\n  constructor(callback, after, args, isRepeat, isRefed) {\r\n    after *= 1; // Coalesce to number or NaN\r\n    if (!(after >= 1 && after <= TIMEOUT_MAX)) {\r\n      if (after > TIMEOUT_MAX) {\r\n        process.emitWarning(`${after} does not fit into` +\r\n                            ' a 32-bit signed integer.' +\r\n                            '\\nTimeout duration was set to 1.',\r\n                            'TimeoutOverflowWarning');\r\n      }\r\n      after = 1; // Schedule on next tick, follows browser behavior\r\n    }\r\n\r\n    this._idleTimeout = after;\r\n    this._idlePrev = this;\r\n    this._idleNext = this;\r\n    this._idleStart = null;\r\n    // This must be set to null first to avoid function tracking\r\n    // on the hidden class, revisit in V8 versions after 6.2\r\n    this._onTimeout = null;\r\n    this._onTimeout = callback;\r\n    this._timerArgs = args;\r\n    this._repeat = isRepeat ? after : null;\r\n    this._destroyed = false;\r\n\r\n    if (isRefed)\r\n      incRefCount();\r\n    this[kRefed] = isRefed;\r\n    this[kHasPrimitive] = false;\r\n\r\n    initAsyncResource(this, 'Timeout');\r\n  }\r\n\r\n  // Make sure the linked list only shows the minimal necessary information.\r\n  [inspect.custom](_, options) {\r\n    return inspect(this, {\r\n      ...options,\r\n      // Only inspect one level.\r\n      depth: 0,\r\n      // It should not recurse.\r\n      customInspect: false,\r\n    });\r\n  }\r\n\r\n  refresh() {\r\n    if (this[kRefed])\r\n      active(this);\r\n    else\r\n      unrefActive(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  unref() {\r\n    if (this[kRefed]) {\r\n      this[kRefed] = false;\r\n      if (!this._destroyed)\r\n        decRefCount();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  ref() {\r\n    if (!this[kRefed]) {\r\n      this[kRefed] = true;\r\n      if (!this._destroyed)\r\n        incRefCount();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  hasRef() {\r\n    return this[kRefed];\r\n  }\r\n}\r\n\r\nclass TimersList {\r\n  constructor(expiry, msecs) {\r\n    this._idleNext = this; // Create the list with the linkedlist properties to\r\n    this._idlePrev = this; // Prevent any unnecessary hidden class changes.\r\n    this.expiry = expiry;\r\n    this.id = timerListId++;\r\n    this.msecs = msecs;\r\n    this.priorityQueuePosition = null;\r\n  }\r\n\r\n  // Make sure the linked list only shows the minimal necessary information.\r\n  [inspect.custom](_, options) {\r\n    return inspect(this, {\r\n      ...options,\r\n      // Only inspect one level.\r\n      depth: 0,\r\n      // It should not recurse.\r\n      customInspect: false,\r\n    });\r\n  }\r\n}\r\n\r\n// A linked list for storing `setImmediate()` requests\r\nclass ImmediateList {\r\n  constructor() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n\r\n  // Appends an item to the end of the linked list, adjusting the current tail's\r\n  // next pointer and the item's previous pointer where applicable\r\n  append(item) {\r\n    if (this.tail !== null) {\r\n      this.tail._idleNext = item;\r\n      item._idlePrev = this.tail;\r\n    } else {\r\n      this.head = item;\r\n    }\r\n    this.tail = item;\r\n  }\r\n\r\n  // Removes an item from the linked list, adjusting the pointers of adjacent\r\n  // items and the linked list's head or tail pointers as necessary\r\n  remove(item) {\r\n    if (item._idleNext) {\r\n      item._idleNext._idlePrev = item._idlePrev;\r\n    }\r\n\r\n    if (item._idlePrev) {\r\n      item._idlePrev._idleNext = item._idleNext;\r\n    }\r\n\r\n    if (item === this.head)\r\n      this.head = item._idleNext;\r\n    if (item === this.tail)\r\n      this.tail = item._idlePrev;\r\n\r\n    item._idleNext = null;\r\n    item._idlePrev = null;\r\n  }\r\n}\r\n\r\n// Create a single linked list instance only once at startup\r\nconst immediateQueue = new ImmediateList();\r\n\r\nfunction incRefCount() {\r\n  if (timeoutInfo[0]++ === 0) {\r\n    // We need to use the binding as the receiver for fast API calls.\r\n    binding.toggleTimerRef(true);\r\n  }\r\n}\r\n\r\nfunction decRefCount() {\r\n  if (--timeoutInfo[0] === 0) {\r\n    // We need to use the binding as the receiver for fast API calls.\r\n    binding.toggleTimerRef(false);\r\n  }\r\n}\r\n\r\n// Schedule or re-schedule a timer.\r\n// The item must have been enroll()'d first.\r\nfunction active(item) {\r\n  insertGuarded(item, true);\r\n}\r\n\r\n// Internal APIs that need timeouts should use `unrefActive()` instead of\r\n// `active()` so that they do not unnecessarily keep the process open.\r\nfunction unrefActive(item) {\r\n  insertGuarded(item, false);\r\n}\r\n\r\n// The underlying logic for scheduling or re-scheduling a timer.\r\n//\r\n// Appends a timer onto the end of an existing timers list, or creates a new\r\n// list if one does not already exist for the specified timeout duration.\r\nfunction insertGuarded(item, refed, start) {\r\n  const msecs = item._idleTimeout;\r\n  if (msecs < 0 || msecs === undefined)\r\n    return;\r\n\r\n  insert(item, msecs, start);\r\n\r\n  const isDestroyed = item._destroyed;\r\n  if (isDestroyed || !item[async_id_symbol]) {\r\n    item._destroyed = false;\r\n    initAsyncResource(item, 'Timeout');\r\n  }\r\n\r\n  if (isDestroyed) {\r\n    if (refed)\r\n      incRefCount();\r\n  } else if (refed === !item[kRefed]) {\r\n    if (refed)\r\n      incRefCount();\r\n    else\r\n      decRefCount();\r\n  }\r\n  item[kRefed] = refed;\r\n}\r\n\r\n// We need to use the binding as the receiver for fast API calls.\r\nfunction insert(item, msecs, start = binding.getLibuvNow()) {\r\n  // Truncate so that accuracy of sub-millisecond timers is not assumed.\r\n  msecs = MathTrunc(msecs);\r\n  item._idleStart = start;\r\n\r\n  // Use an existing list if there is one, otherwise we need to make a new one.\r\n  let list = timerListMap[msecs];\r\n  if (list === undefined) {\r\n    debug('no %d list was found in insert, creating a new one', msecs);\r\n    const expiry = start + msecs;\r\n    timerListMap[msecs] = list = new TimersList(expiry, msecs);\r\n    timerListQueue.insert(list);\r\n\r\n    if (nextExpiry > expiry) {\r\n      // We need to use the binding as the receiver for fast API calls.\r\n      binding.scheduleTimer(msecs);\r\n      nextExpiry = expiry;\r\n    }\r\n  }\r\n\r\n  L.append(list, item);\r\n}\r\n\r\nfunction setUnrefTimeout(callback, after) {\r\n  // Type checking identical to setTimeout()\r\n  validateFunction(callback, 'callback');\r\n\r\n  const timer = new Timeout(callback, after, undefined, false, false);\r\n  insert(timer, timer._idleTimeout);\r\n\r\n  return timer;\r\n}\r\n\r\n// Type checking used by timers.enroll() and Socket#setTimeout()\r\nfunction getTimerDuration(msecs, name) {\r\n  validateNumber(msecs, name);\r\n  if (msecs < 0 || !NumberIsFinite(msecs)) {\r\n    throw new ERR_OUT_OF_RANGE(name, 'a non-negative finite number', msecs);\r\n  }\r\n\r\n  // Ensure that msecs fits into signed int32\r\n  if (msecs > TIMEOUT_MAX) {\r\n    process.emitWarning(`${msecs} does not fit into a 32-bit signed integer.` +\r\n                        `\\nTimer duration was truncated to ${TIMEOUT_MAX}.`,\r\n                        'TimeoutOverflowWarning');\r\n    return TIMEOUT_MAX;\r\n  }\r\n\r\n  return msecs;\r\n}\r\n\r\nfunction compareTimersLists(a, b) {\r\n  const expiryDiff = a.expiry - b.expiry;\r\n  if (expiryDiff === 0) {\r\n    if (a.id < b.id)\r\n      return -1;\r\n    if (a.id > b.id)\r\n      return 1;\r\n  }\r\n  return expiryDiff;\r\n}\r\n\r\nfunction setPosition(node, pos) {\r\n  node.priorityQueuePosition = pos;\r\n}\r\n\r\nfunction getTimerCallbacks(runNextTicks) {\r\n  // If an uncaught exception was thrown during execution of immediateQueue,\r\n  // this queue will store all remaining Immediates that need to run upon\r\n  // resolution of all error handling (if process is still alive).\r\n  const outstandingQueue = new ImmediateList();\r\n\r\n  function processImmediate() {\r\n    const queue = outstandingQueue.head !== null ?\r\n      outstandingQueue : immediateQueue;\r\n    let immediate = queue.head;\r\n\r\n    // Clear the linked list early in case new `setImmediate()`\r\n    // calls occur while immediate callbacks are executed\r\n    if (queue !== outstandingQueue) {\r\n      queue.head = queue.tail = null;\r\n      immediateInfo[kHasOutstanding] = 1;\r\n    }\r\n\r\n    let prevImmediate;\r\n    let ranAtLeastOneImmediate = false;\r\n    while (immediate !== null) {\r\n      if (ranAtLeastOneImmediate)\r\n        runNextTicks();\r\n      else\r\n        ranAtLeastOneImmediate = true;\r\n\r\n      // It's possible for this current Immediate to be cleared while executing\r\n      // the next tick queue above, which means we need to use the previous\r\n      // Immediate's _idleNext which is guaranteed to not have been cleared.\r\n      if (immediate._destroyed) {\r\n        outstandingQueue.head = immediate = prevImmediate._idleNext;\r\n        continue;\r\n      }\r\n\r\n      // TODO(RaisinTen): Destroy and unref the Immediate after _onImmediate()\r\n      // gets executed, just like how Timeouts work.\r\n      immediate._destroyed = true;\r\n\r\n      immediateInfo[kCount]--;\r\n      if (immediate[kRefed])\r\n        immediateInfo[kRefCount]--;\r\n      immediate[kRefed] = null;\r\n\r\n      prevImmediate = immediate;\r\n\r\n      const asyncId = immediate[async_id_symbol];\r\n      emitBefore(asyncId, immediate[trigger_async_id_symbol], immediate);\r\n\r\n      try {\r\n        const argv = immediate._argv;\r\n        if (!argv)\r\n          immediate._onImmediate();\r\n        else\r\n          immediate._onImmediate(...argv);\r\n      } finally {\r\n        immediate._onImmediate = null;\r\n\r\n        if (destroyHooksExist())\r\n          emitDestroy(asyncId);\r\n\r\n        outstandingQueue.head = immediate = immediate._idleNext;\r\n      }\r\n\r\n      emitAfter(asyncId);\r\n    }\r\n\r\n    if (queue === outstandingQueue)\r\n      outstandingQueue.head = null;\r\n    immediateInfo[kHasOutstanding] = 0;\r\n  }\r\n\r\n\r\n  function processTimers(now) {\r\n    debug('process timer lists %d', now);\r\n    nextExpiry = Infinity;\r\n\r\n    let list;\r\n    let ranAtLeastOneList = false;\r\n    while ((list = timerListQueue.peek()) != null) {\r\n      if (list.expiry > now) {\r\n        nextExpiry = list.expiry;\r\n        return timeoutInfo[0] > 0 ? nextExpiry : -nextExpiry;\r\n      }\r\n      if (ranAtLeastOneList)\r\n        runNextTicks();\r\n      else\r\n        ranAtLeastOneList = true;\r\n      listOnTimeout(list, now);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function listOnTimeout(list, now) {\r\n    const msecs = list.msecs;\r\n\r\n    debug('timeout callback %d', msecs);\r\n\r\n    let ranAtLeastOneTimer = false;\r\n    let timer;\r\n    while ((timer = L.peek(list)) != null) {\r\n      const diff = now - timer._idleStart;\r\n\r\n      // Check if this loop iteration is too early for the next timer.\r\n      // This happens if there are more timers scheduled for later in the list.\r\n      if (diff < msecs) {\r\n        list.expiry = MathMax(timer._idleStart + msecs, now + 1);\r\n        list.id = timerListId++;\r\n        timerListQueue.percolateDown(1);\r\n        debug('%d list wait because diff is %d', msecs, diff);\r\n        return;\r\n      }\r\n\r\n      if (ranAtLeastOneTimer)\r\n        runNextTicks();\r\n      else\r\n        ranAtLeastOneTimer = true;\r\n\r\n      // The actual logic for when a timeout happens.\r\n      L.remove(timer);\r\n\r\n      const asyncId = timer[async_id_symbol];\r\n\r\n      if (!timer._onTimeout) {\r\n        if (!timer._destroyed) {\r\n          timer._destroyed = true;\r\n\r\n          if (timer[kRefed])\r\n            timeoutInfo[0]--;\r\n\r\n          if (destroyHooksExist())\r\n            emitDestroy(asyncId);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      emitBefore(asyncId, timer[trigger_async_id_symbol], timer);\r\n\r\n      let start;\r\n      if (timer._repeat) {\r\n        // We need to use the binding as the receiver for fast API calls.\r\n        start = binding.getLibuvNow();\r\n      }\r\n\r\n      try {\r\n        const args = timer._timerArgs;\r\n        if (args === undefined)\r\n          timer._onTimeout();\r\n        else\r\n          ReflectApply(timer._onTimeout, timer, args);\r\n      } finally {\r\n        if (timer._repeat && timer._idleTimeout !== -1) {\r\n          timer._idleTimeout = timer._repeat;\r\n          insert(timer, timer._idleTimeout, start);\r\n        } else if (!timer._idleNext && !timer._idlePrev && !timer._destroyed) {\r\n          timer._destroyed = true;\r\n\r\n          if (timer[kRefed])\r\n            timeoutInfo[0]--;\r\n\r\n          if (destroyHooksExist())\r\n            emitDestroy(asyncId);\r\n        }\r\n      }\r\n\r\n      emitAfter(asyncId);\r\n    }\r\n\r\n    // If `L.peek(list)` returned nothing, the list was either empty or we have\r\n    // called all of the timer timeouts.\r\n    // As such, we can remove the list from the object map and\r\n    // the PriorityQueue.\r\n    debug('%d list empty', msecs);\r\n\r\n    // The current list may have been removed and recreated since the reference\r\n    // to `list` was created. Make sure they're the same instance of the list\r\n    // before destroying.\r\n    if (list === timerListMap[msecs]) {\r\n      delete timerListMap[msecs];\r\n      timerListQueue.shift();\r\n    }\r\n  }\r\n\r\n  return {\r\n    processImmediate,\r\n    processTimers,\r\n  };\r\n}\r\n\r\nclass Immediate {\r\n  constructor(callback, args) {\r\n    this._idleNext = null;\r\n    this._idlePrev = null;\r\n    this._onImmediate = callback;\r\n    this._argv = args;\r\n    this._destroyed = false;\r\n    this[kRefed] = false;\r\n\r\n    initAsyncResource(this, 'Immediate');\r\n\r\n    this.ref();\r\n    immediateInfo[kCount]++;\r\n\r\n    immediateQueue.append(this);\r\n  }\r\n\r\n  ref() {\r\n    if (this[kRefed] === false) {\r\n      this[kRefed] = true;\r\n\r\n      if (immediateInfo[kRefCount]++ === 0) {\r\n        // We need to use the binding as the receiver for fast API calls.\r\n        binding.toggleImmediateRef(true);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  unref() {\r\n    if (this[kRefed] === true) {\r\n      this[kRefed] = false;\r\n      if (--immediateInfo[kRefCount] === 0) {\r\n        // We need to use the binding as the receiver for fast API calls.\r\n        binding.toggleImmediateRef(false);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  hasRef() {\r\n    return !!this[kRefed];\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  TIMEOUT_MAX,\r\n  kTimeout: Symbol('timeout'), // For hiding Timeouts on other internals.\r\n  async_id_symbol,\r\n  trigger_async_id_symbol,\r\n  Timeout,\r\n  Immediate,\r\n  kRefed,\r\n  kHasPrimitive,\r\n  initAsyncResource,\r\n  setUnrefTimeout,\r\n  getTimerDuration,\r\n  immediateQueue,\r\n  getTimerCallbacks,\r\n  immediateInfoFields: {\r\n    kCount,\r\n    kRefCount,\r\n    kHasOutstanding,\r\n  },\r\n  active,\r\n  unrefActive,\r\n  insert,\r\n  timerListMap,\r\n  timerListQueue,\r\n  decRefCount,\r\n  incRefCount,\r\n};\r\n"
  },
  "11": {
    "metadata": {
      "scriptId": "11",
      "url": "node:internal/async_hooks",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 627,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "ebf0f39bbafb218cf9a70d235d020a12891c3c4ef43866f98714a2b80eaf0c95",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 20709,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/async_hooks"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeSlice,\r\n  ErrorCaptureStackTrace,\r\n  ObjectDefineProperty,\r\n  ObjectPrototypeHasOwnProperty,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst { exitCodes: { kGenericUserError } } = internalBinding('errors');\r\n\r\nconst async_wrap = internalBinding('async_wrap');\r\nconst { setCallbackTrampoline } = async_wrap;\r\n/* async_hook_fields is a Uint32Array wrapping the uint32_t array of\r\n * Environment::AsyncHooks::fields_[]. Each index tracks the number of active\r\n * hooks for each type.\r\n *\r\n * async_id_fields is a Float64Array wrapping the double array of\r\n * Environment::AsyncHooks::async_id_fields_[]. Each index contains the ids for\r\n * the various asynchronous states of the application. These are:\r\n *  kExecutionAsyncId: The async_id assigned to the resource responsible for the\r\n *    current execution stack.\r\n *  kTriggerAsyncId: The async_id of the resource that caused (or 'triggered')\r\n *    the resource corresponding to the current execution stack.\r\n *  kAsyncIdCounter: Incremental counter tracking the next assigned async_id.\r\n *  kDefaultTriggerAsyncId: Written immediately before a resource's constructor\r\n *    that sets the value of the init()'s triggerAsyncId. The precedence order\r\n *    of retrieving the triggerAsyncId value is:\r\n *    1. the value passed directly to the constructor\r\n *    2. value set in kDefaultTriggerAsyncId\r\n *    3. executionAsyncId of the current resource.\r\n *\r\n * async_ids_stack is a Float64Array that contains part of the async ID\r\n * stack. Each pushAsyncContext() call adds two doubles to it, and each\r\n * popAsyncContext() call removes two doubles from it.\r\n * It has a fixed size, so if that is exceeded, calls to the native\r\n * side are used instead in pushAsyncContext() and popAsyncContext().\r\n */\r\nconst {\r\n  async_hook_fields,\r\n  async_id_fields,\r\n  execution_async_resources,\r\n} = async_wrap;\r\n// Store the pair executionAsyncId and triggerAsyncId in a AliasedFloat64Array\r\n// in Environment::AsyncHooks::async_ids_stack_ which tracks the resource\r\n// responsible for the current execution stack. This is unwound as each resource\r\n// exits. In the case of a fatal exception this stack is emptied after calling\r\n// each hook's after() callback.\r\nconst {\r\n  pushAsyncContext: pushAsyncContext_,\r\n  popAsyncContext: popAsyncContext_,\r\n  executionAsyncResource: executionAsyncResource_,\r\n  clearAsyncIdStack,\r\n} = async_wrap;\r\n// Properties in active_hooks are used to keep track of the set of hooks being\r\n// executed in case another hook is enabled/disabled. The new set of hooks is\r\n// then restored once the active set of hooks is finished executing.\r\nconst active_hooks = {\r\n  // Array of all AsyncHooks that will be iterated whenever an async event\r\n  // fires. Using var instead of (preferably const) in order to assign\r\n  // active_hooks.tmp_array if a hook is enabled/disabled during hook\r\n  // execution.\r\n  array: [],\r\n  // Use a counter to track nested calls of async hook callbacks and make sure\r\n  // the active_hooks.array isn't altered mid execution.\r\n  call_depth: 0,\r\n  // Use to temporarily store and updated active_hooks.array if the user\r\n  // enables or disables a hook while hooks are being processed. If a hook is\r\n  // enabled() or disabled() during hook execution then the current set of\r\n  // active hooks is duplicated and set equal to active_hooks.tmp_array. Any\r\n  // subsequent changes are on the duplicated array. When all hooks have\r\n  // completed executing active_hooks.tmp_array is assigned to\r\n  // active_hooks.array.\r\n  tmp_array: null,\r\n  // Keep track of the field counts held in active_hooks.tmp_array. Because the\r\n  // async_hook_fields can't be reassigned, store each uint32 in an array that\r\n  // is written back to async_hook_fields when active_hooks.array is restored.\r\n  tmp_fields: null,\r\n};\r\n\r\nconst { registerDestroyHook } = async_wrap;\r\nconst { enqueueMicrotask } = internalBinding('task_queue');\r\nconst { resource_symbol, owner_symbol } = internalBinding('symbols');\r\n\r\n// Each constant tracks how many callbacks there are for any given step of\r\n// async execution. These are tracked so if the user didn't include callbacks\r\n// for a given step, that step can bail out early.\r\nconst {\r\n  kInit, kBefore, kAfter, kDestroy, kTotals, kPromiseResolve,\r\n  kCheck, kExecutionAsyncId, kAsyncIdCounter, kTriggerAsyncId,\r\n  kDefaultTriggerAsyncId, kStackLength, kUsesExecutionAsyncResource,\r\n} = async_wrap.constants;\r\n\r\nconst { async_id_symbol,\r\n        trigger_async_id_symbol } = internalBinding('symbols');\r\n\r\n// Lazy load of internal/util/inspect;\r\nlet inspect;\r\n\r\n// Used in AsyncHook and AsyncResource.\r\nconst init_symbol = Symbol('init');\r\nconst before_symbol = Symbol('before');\r\nconst after_symbol = Symbol('after');\r\nconst destroy_symbol = Symbol('destroy');\r\nconst promise_resolve_symbol = Symbol('promiseResolve');\r\nconst emitBeforeNative = emitHookFactory(before_symbol, 'emitBeforeNative');\r\nconst emitAfterNative = emitHookFactory(after_symbol, 'emitAfterNative');\r\nconst emitDestroyNative = emitHookFactory(destroy_symbol, 'emitDestroyNative');\r\nconst emitPromiseResolveNative =\r\n    emitHookFactory(promise_resolve_symbol, 'emitPromiseResolveNative');\r\n\r\nlet domain_cb;\r\nfunction useDomainTrampoline(fn) {\r\n  domain_cb = fn;\r\n}\r\n\r\nfunction callbackTrampoline(asyncId, resource, cb, ...args) {\r\n  const index = async_hook_fields[kStackLength] - 1;\r\n  execution_async_resources[index] = resource;\r\n\r\n  if (asyncId !== 0 && hasHooks(kBefore))\r\n    emitBeforeNative(asyncId);\r\n\r\n  let result;\r\n  if (asyncId === 0 && typeof domain_cb === 'function') {\r\n    args.unshift(cb);\r\n    result = domain_cb.apply(this, args);\r\n  } else {\r\n    result = cb.apply(this, args);\r\n  }\r\n\r\n  if (asyncId !== 0 && hasHooks(kAfter))\r\n    emitAfterNative(asyncId);\r\n\r\n  execution_async_resources.pop();\r\n  return result;\r\n}\r\n\r\nconst topLevelResource = {};\r\n\r\nfunction executionAsyncResource() {\r\n  // Indicate to the native layer that this function is likely to be used,\r\n  // in which case it will inform JS about the current async resource via\r\n  // the trampoline above.\r\n  async_hook_fields[kUsesExecutionAsyncResource] = 1;\r\n\r\n  const index = async_hook_fields[kStackLength] - 1;\r\n  if (index === -1) return topLevelResource;\r\n  const resource = execution_async_resources[index] ||\r\n    executionAsyncResource_(index);\r\n  return lookupPublicResource(resource);\r\n}\r\n\r\nfunction inspectExceptionValue(e) {\r\n  inspect ??= require('internal/util/inspect').inspect;\r\n  return { message: inspect(e) };\r\n}\r\n\r\n// Used to fatally abort the process if a callback throws.\r\nfunction fatalError(e) {\r\n  if (typeof e?.stack === 'string') {\r\n    process._rawDebug(e.stack);\r\n  } else {\r\n    const o = inspectExceptionValue(e);\r\n    ErrorCaptureStackTrace(o, fatalError);\r\n    process._rawDebug(o.stack);\r\n  }\r\n\r\n  const { getOptionValue } = require('internal/options');\r\n  if (getOptionValue('--abort-on-uncaught-exception')) {\r\n    process.abort();\r\n  }\r\n  process.exit(kGenericUserError);\r\n}\r\n\r\nfunction lookupPublicResource(resource) {\r\n  if (typeof resource !== 'object' || resource === null) return resource;\r\n  // TODO(addaleax): Merge this with owner_symbol and use it across all\r\n  // AsyncWrap instances.\r\n  const publicResource = resource[resource_symbol];\r\n  if (publicResource !== undefined)\r\n    return publicResource;\r\n  return resource;\r\n}\r\n\r\n// Emit From Native //\r\n\r\n// Used by C++ to call all init() callbacks. Because some state can be setup\r\n// from C++ there's no need to perform all the same operations as in\r\n// emitInitScript.\r\nfunction emitInitNative(asyncId, type, triggerAsyncId, resource) {\r\n  active_hooks.call_depth += 1;\r\n  resource = lookupPublicResource(resource);\r\n  // Use a single try/catch for all hooks to avoid setting up one per iteration.\r\n  try {\r\n    // Using var here instead of let because \"for (var ...)\" is faster than let.\r\n    // Refs: https://github.com/nodejs/node/pull/30380#issuecomment-552948364\r\n    // eslint-disable-next-line no-var\r\n    for (var i = 0; i < active_hooks.array.length; i++) {\r\n      if (typeof active_hooks.array[i][init_symbol] === 'function') {\r\n        active_hooks.array[i][init_symbol](\r\n          asyncId, type, triggerAsyncId,\r\n          resource,\r\n        );\r\n      }\r\n    }\r\n  } catch (e) {\r\n    fatalError(e);\r\n  } finally {\r\n    active_hooks.call_depth -= 1;\r\n  }\r\n\r\n  // Hooks can only be restored if there have been no recursive hook calls.\r\n  // Also the active hooks do not need to be restored if enable()/disable()\r\n  // weren't called during hook execution, in which case active_hooks.tmp_array\r\n  // will be null.\r\n  if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\r\n    restoreActiveHooks();\r\n  }\r\n}\r\n\r\n// Called from native. The asyncId stack handling is taken care of there\r\n// before this is called.\r\nfunction emitHook(symbol, asyncId) {\r\n  active_hooks.call_depth += 1;\r\n  // Use a single try/catch for all hook to avoid setting up one per\r\n  // iteration.\r\n  try {\r\n    // Using var here instead of let because \"for (var ...)\" is faster than let.\r\n    // Refs: https://github.com/nodejs/node/pull/30380#issuecomment-552948364\r\n    // eslint-disable-next-line no-var\r\n    for (var i = 0; i < active_hooks.array.length; i++) {\r\n      if (typeof active_hooks.array[i][symbol] === 'function') {\r\n        active_hooks.array[i][symbol](asyncId);\r\n      }\r\n    }\r\n  } catch (e) {\r\n    fatalError(e);\r\n  } finally {\r\n    active_hooks.call_depth -= 1;\r\n  }\r\n\r\n  // Hooks can only be restored if there have been no recursive hook calls.\r\n  // Also the active hooks do not need to be restored if enable()/disable()\r\n  // weren't called during hook execution, in which case\r\n  // active_hooks.tmp_array will be null.\r\n  if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\r\n    restoreActiveHooks();\r\n  }\r\n}\r\n\r\nfunction emitHookFactory(symbol, name) {\r\n  const fn = emitHook.bind(undefined, symbol);\r\n\r\n  // Set the name property of the function as it looks good in the stack trace.\r\n  ObjectDefineProperty(fn, 'name', {\r\n    __proto__: null,\r\n    value: name,\r\n  });\r\n  return fn;\r\n}\r\n\r\n// Manage Active Hooks //\r\n\r\nfunction getHookArrays() {\r\n  if (active_hooks.call_depth === 0)\r\n    return [active_hooks.array, async_hook_fields];\r\n  // If this hook is being enabled while in the middle of processing the array\r\n  // of currently active hooks then duplicate the current set of active hooks\r\n  // and store this there. This shouldn't fire until the next time hooks are\r\n  // processed.\r\n  if (active_hooks.tmp_array === null)\r\n    storeActiveHooks();\r\n  return [active_hooks.tmp_array, active_hooks.tmp_fields];\r\n}\r\n\r\n\r\nfunction storeActiveHooks() {\r\n  active_hooks.tmp_array = ArrayPrototypeSlice(active_hooks.array);\r\n  // Don't want to make the assumption that kInit to kDestroy are indexes 0 to\r\n  // 4. So do this the long way.\r\n  active_hooks.tmp_fields = [];\r\n  copyHooks(active_hooks.tmp_fields, async_hook_fields);\r\n}\r\n\r\nfunction copyHooks(destination, source) {\r\n  destination[kInit] = source[kInit];\r\n  destination[kBefore] = source[kBefore];\r\n  destination[kAfter] = source[kAfter];\r\n  destination[kDestroy] = source[kDestroy];\r\n  destination[kPromiseResolve] = source[kPromiseResolve];\r\n}\r\n\r\n\r\n// Then restore the correct hooks array in case any hooks were added/removed\r\n// during hook callback execution.\r\nfunction restoreActiveHooks() {\r\n  active_hooks.array = active_hooks.tmp_array;\r\n  copyHooks(async_hook_fields, active_hooks.tmp_fields);\r\n\r\n  active_hooks.tmp_array = null;\r\n  active_hooks.tmp_fields = null;\r\n}\r\n\r\nfunction trackPromise(promise, parent) {\r\n  if (promise[async_id_symbol]) {\r\n    return;\r\n  }\r\n\r\n  // Get trigger id from parent async id before making the async id of the\r\n  // child so if a new one must be made it will be lower than the child.\r\n  const triggerAsyncId = parent ? getOrSetAsyncId(parent) :\r\n    getDefaultTriggerAsyncId();\r\n\r\n  promise[async_id_symbol] = newAsyncId();\r\n  promise[trigger_async_id_symbol] = triggerAsyncId;\r\n}\r\n\r\nfunction promiseInitHook(promise, parent) {\r\n  trackPromise(promise, parent);\r\n  const asyncId = promise[async_id_symbol];\r\n  const triggerAsyncId = promise[trigger_async_id_symbol];\r\n  emitInitScript(asyncId, 'PROMISE', triggerAsyncId, promise);\r\n}\r\n\r\nfunction promiseInitHookWithDestroyTracking(promise, parent) {\r\n  promiseInitHook(promise, parent);\r\n  destroyTracking(promise, parent);\r\n}\r\n\r\nfunction destroyTracking(promise, parent) {\r\n  trackPromise(promise, parent);\r\n  const asyncId = promise[async_id_symbol];\r\n  registerDestroyHook(promise, asyncId);\r\n}\r\n\r\nfunction promiseBeforeHook(promise) {\r\n  trackPromise(promise);\r\n  const asyncId = promise[async_id_symbol];\r\n  const triggerId = promise[trigger_async_id_symbol];\r\n  emitBeforeScript(asyncId, triggerId, promise);\r\n}\r\n\r\nfunction promiseAfterHook(promise) {\r\n  trackPromise(promise);\r\n  const asyncId = promise[async_id_symbol];\r\n  if (hasHooks(kAfter)) {\r\n    emitAfterNative(asyncId);\r\n  }\r\n  if (asyncId === executionAsyncId()) {\r\n    // This condition might not be true if async_hooks was enabled during\r\n    // the promise callback execution.\r\n    // Popping it off the stack can be skipped in that case, because it is\r\n    // known that it would correspond to exactly one call with\r\n    // PromiseHookType::kBefore that was not witnessed by the PromiseHook.\r\n    popAsyncContext(asyncId);\r\n  }\r\n}\r\n\r\nfunction promiseResolveHook(promise) {\r\n  trackPromise(promise);\r\n  const asyncId = promise[async_id_symbol];\r\n  emitPromiseResolveNative(asyncId);\r\n}\r\n\r\nlet wantPromiseHook = false;\r\nfunction enableHooks() {\r\n  async_hook_fields[kCheck] += 1;\r\n\r\n  setCallbackTrampoline(callbackTrampoline);\r\n}\r\n\r\nlet stopPromiseHook;\r\nfunction updatePromiseHookMode() {\r\n  wantPromiseHook = true;\r\n  let initHook;\r\n  if (initHooksExist()) {\r\n    initHook = destroyHooksExist() ? promiseInitHookWithDestroyTracking :\r\n      promiseInitHook;\r\n  } else if (destroyHooksExist()) {\r\n    initHook = destroyTracking;\r\n  }\r\n  if (stopPromiseHook) stopPromiseHook();\r\n  const promiseHooks = require('internal/promise_hooks');\r\n  stopPromiseHook = promiseHooks.createHook({\r\n    init: initHook,\r\n    before: promiseBeforeHook,\r\n    after: promiseAfterHook,\r\n    settled: promiseResolveHooksExist() ? promiseResolveHook : undefined,\r\n  });\r\n}\r\n\r\nfunction disableHooks() {\r\n  async_hook_fields[kCheck] -= 1;\r\n\r\n  wantPromiseHook = false;\r\n\r\n  setCallbackTrampoline();\r\n\r\n  // Delay the call to `disablePromiseHook()` because we might currently be\r\n  // between the `before` and `after` calls of a Promise.\r\n  enqueueMicrotask(disablePromiseHookIfNecessary);\r\n}\r\n\r\nfunction disablePromiseHookIfNecessary() {\r\n  if (!wantPromiseHook && stopPromiseHook) {\r\n    stopPromiseHook();\r\n  }\r\n}\r\n\r\n// Internal Embedder API //\r\n\r\n// Increment the internal id counter and return the value. Important that the\r\n// counter increment first. Since it's done the same way in\r\n// Environment::new_async_uid()\r\nfunction newAsyncId() {\r\n  return ++async_id_fields[kAsyncIdCounter];\r\n}\r\n\r\nfunction getOrSetAsyncId(object) {\r\n  if (ObjectPrototypeHasOwnProperty(object, async_id_symbol)) {\r\n    return object[async_id_symbol];\r\n  }\r\n\r\n  return object[async_id_symbol] = newAsyncId();\r\n}\r\n\r\n\r\n// Return the triggerAsyncId meant for the constructor calling it. It's up to\r\n// the user to safeguard this call and make sure it's zero'd out when the\r\n// constructor is complete.\r\nfunction getDefaultTriggerAsyncId() {\r\n  const defaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\r\n  // If defaultTriggerAsyncId isn't set, use the executionAsyncId\r\n  if (defaultTriggerAsyncId < 0)\r\n    return async_id_fields[kExecutionAsyncId];\r\n  return defaultTriggerAsyncId;\r\n}\r\n\r\n\r\nfunction clearDefaultTriggerAsyncId() {\r\n  async_id_fields[kDefaultTriggerAsyncId] = -1;\r\n}\r\n\r\n/**\r\n * Sets a default top level trigger ID to be used\r\n * @template {Array<unknown>} T\r\n * @template {unknown} R\r\n * @param {number} triggerAsyncId\r\n * @param { (...T: args) => R } block\r\n * @param  {T} args\r\n * @returns {R}\r\n */\r\nfunction defaultTriggerAsyncIdScope(triggerAsyncId, block, ...args) {\r\n  if (triggerAsyncId === undefined)\r\n    return block.apply(null, args);\r\n  // CHECK(NumberIsSafeInteger(triggerAsyncId))\r\n  // CHECK(triggerAsyncId > 0)\r\n  const oldDefaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\r\n  async_id_fields[kDefaultTriggerAsyncId] = triggerAsyncId;\r\n\r\n  try {\r\n    return block.apply(null, args);\r\n  } finally {\r\n    async_id_fields[kDefaultTriggerAsyncId] = oldDefaultTriggerAsyncId;\r\n  }\r\n}\r\n\r\nfunction hasHooks(key) {\r\n  return async_hook_fields[key] > 0;\r\n}\r\n\r\nfunction enabledHooksExist() {\r\n  return hasHooks(kCheck);\r\n}\r\n\r\nfunction initHooksExist() {\r\n  return hasHooks(kInit);\r\n}\r\n\r\nfunction afterHooksExist() {\r\n  return hasHooks(kAfter);\r\n}\r\n\r\nfunction destroyHooksExist() {\r\n  return hasHooks(kDestroy);\r\n}\r\n\r\nfunction promiseResolveHooksExist() {\r\n  return hasHooks(kPromiseResolve);\r\n}\r\n\r\n\r\nfunction emitInitScript(asyncId, type, triggerAsyncId, resource) {\r\n  // Short circuit all checks for the common case. Which is that no hooks have\r\n  // been set. Do this to remove performance impact for embedders (and core).\r\n  if (!hasHooks(kInit))\r\n    return;\r\n\r\n  if (triggerAsyncId === null) {\r\n    triggerAsyncId = getDefaultTriggerAsyncId();\r\n  }\r\n\r\n  emitInitNative(asyncId, type, triggerAsyncId, resource);\r\n}\r\n\r\n\r\nfunction emitBeforeScript(asyncId, triggerAsyncId, resource) {\r\n  pushAsyncContext(asyncId, triggerAsyncId, resource);\r\n\r\n  if (hasHooks(kBefore))\r\n    emitBeforeNative(asyncId);\r\n}\r\n\r\n\r\nfunction emitAfterScript(asyncId) {\r\n  if (hasHooks(kAfter))\r\n    emitAfterNative(asyncId);\r\n\r\n  popAsyncContext(asyncId);\r\n}\r\n\r\n\r\nfunction emitDestroyScript(asyncId) {\r\n  // Return early if there are no destroy callbacks, or invalid asyncId.\r\n  if (!hasHooks(kDestroy) || asyncId <= 0)\r\n    return;\r\n  async_wrap.queueDestroyAsyncId(asyncId);\r\n}\r\n\r\n\r\nfunction hasAsyncIdStack() {\r\n  return hasHooks(kStackLength);\r\n}\r\n\r\n\r\n// This is the equivalent of the native push_async_ids() call.\r\nfunction pushAsyncContext(asyncId, triggerAsyncId, resource) {\r\n  const offset = async_hook_fields[kStackLength];\r\n  execution_async_resources[offset] = resource;\r\n  if (offset * 2 >= async_wrap.async_ids_stack.length)\r\n    return pushAsyncContext_(asyncId, triggerAsyncId);\r\n  async_wrap.async_ids_stack[offset * 2] = async_id_fields[kExecutionAsyncId];\r\n  async_wrap.async_ids_stack[offset * 2 + 1] = async_id_fields[kTriggerAsyncId];\r\n  async_hook_fields[kStackLength]++;\r\n  async_id_fields[kExecutionAsyncId] = asyncId;\r\n  async_id_fields[kTriggerAsyncId] = triggerAsyncId;\r\n}\r\n\r\n\r\n// This is the equivalent of the native pop_async_ids() call.\r\nfunction popAsyncContext(asyncId) {\r\n  const stackLength = async_hook_fields[kStackLength];\r\n  if (stackLength === 0) return false;\r\n\r\n  if (enabledHooksExist() && async_id_fields[kExecutionAsyncId] !== asyncId) {\r\n    // Do the same thing as the native code (i.e. crash hard).\r\n    return popAsyncContext_(asyncId);\r\n  }\r\n\r\n  const offset = stackLength - 1;\r\n  async_id_fields[kExecutionAsyncId] = async_wrap.async_ids_stack[2 * offset];\r\n  async_id_fields[kTriggerAsyncId] = async_wrap.async_ids_stack[2 * offset + 1];\r\n  execution_async_resources.pop();\r\n  async_hook_fields[kStackLength] = offset;\r\n  return offset > 0;\r\n}\r\n\r\n\r\nfunction executionAsyncId() {\r\n  return async_id_fields[kExecutionAsyncId];\r\n}\r\n\r\nfunction triggerAsyncId() {\r\n  return async_id_fields[kTriggerAsyncId];\r\n}\r\n\r\n\r\nmodule.exports = {\r\n  executionAsyncId,\r\n  triggerAsyncId,\r\n  // Private API\r\n  getHookArrays,\r\n  symbols: {\r\n    async_id_symbol, trigger_async_id_symbol,\r\n    init_symbol, before_symbol, after_symbol, destroy_symbol,\r\n    promise_resolve_symbol, owner_symbol,\r\n  },\r\n  constants: {\r\n    kInit, kBefore, kAfter, kDestroy, kTotals, kPromiseResolve,\r\n  },\r\n  enableHooks,\r\n  disableHooks,\r\n  updatePromiseHookMode,\r\n  clearDefaultTriggerAsyncId,\r\n  clearAsyncIdStack,\r\n  hasAsyncIdStack,\r\n  executionAsyncResource,\r\n  // Internal Embedder API\r\n  newAsyncId,\r\n  getOrSetAsyncId,\r\n  getDefaultTriggerAsyncId,\r\n  defaultTriggerAsyncIdScope,\r\n  enabledHooksExist,\r\n  initHooksExist,\r\n  afterHooksExist,\r\n  destroyHooksExist,\r\n  emitInit: emitInitScript,\r\n  emitBefore: emitBeforeScript,\r\n  emitAfter: emitAfterScript,\r\n  emitDestroy: emitDestroyScript,\r\n  pushAsyncContext,\r\n  popAsyncContext,\r\n  registerDestroyHook,\r\n  useDomainTrampoline,\r\n  nativeHooks: {\r\n    init: emitInitNative,\r\n    before: emitBeforeNative,\r\n    after: emitAfterNative,\r\n    destroy: emitDestroyNative,\r\n    promise_resolve: emitPromiseResolveNative,\r\n  },\r\n  asyncWrap: {\r\n    Providers: async_wrap.Providers,\r\n  },\r\n};\r\n"
  },
  "12": {
    "metadata": {
      "scriptId": "12",
      "url": "node:internal/validators",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 604,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "b023b303abf6b875748aeb9fea798906327655d8bc112453b6e45bcea71206c6",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 17309,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/validators"
    },
    "source": "/* eslint jsdoc/require-jsdoc: \"error\" */\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeMap,\r\n  NumberIsInteger,\r\n  NumberIsNaN,\r\n  NumberMAX_SAFE_INTEGER,\r\n  NumberMIN_SAFE_INTEGER,\r\n  NumberParseInt,\r\n  ObjectPrototypeHasOwnProperty,\r\n  RegExpPrototypeExec,\r\n  String,\r\n  StringPrototypeToUpperCase,\r\n  StringPrototypeTrim,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE: { HideStackFramesError: ERR_INVALID_ARG_TYPE },\r\n    ERR_INVALID_ARG_VALUE: { HideStackFramesError: ERR_INVALID_ARG_VALUE },\r\n    ERR_OUT_OF_RANGE: { HideStackFramesError: ERR_OUT_OF_RANGE },\r\n    ERR_SOCKET_BAD_PORT: { HideStackFramesError: ERR_SOCKET_BAD_PORT },\r\n    ERR_UNKNOWN_SIGNAL: { HideStackFramesError: ERR_UNKNOWN_SIGNAL },\r\n  },\r\n  hideStackFrames,\r\n} = require('internal/errors');\r\nconst { normalizeEncoding } = require('internal/util');\r\nconst {\r\n  isAsyncFunction,\r\n  isArrayBufferView,\r\n} = require('internal/util/types');\r\nconst { signals } = internalBinding('constants').os;\r\n\r\n/**\r\n * @param {*} value\r\n * @returns {boolean}\r\n */\r\nfunction isInt32(value) {\r\n  return value === (value | 0);\r\n}\r\n\r\n/**\r\n * @param {*} value\r\n * @returns {boolean}\r\n */\r\nfunction isUint32(value) {\r\n  return value === (value >>> 0);\r\n}\r\n\r\nconst octalReg = /^[0-7]+$/;\r\nconst modeDesc = 'must be a 32-bit unsigned integer or an octal string';\r\n\r\n/**\r\n * Parse and validate values that will be converted into mode_t (the S_*\r\n * constants). Only valid numbers and octal strings are allowed. They could be\r\n * converted to 32-bit unsigned integers or non-negative signed integers in the\r\n * C++ land, but any value higher than 0o777 will result in platform-specific\r\n * behaviors.\r\n * @param {*} value Values to be validated\r\n * @param {string} name Name of the argument\r\n * @param {number} [def] If specified, will be returned for invalid values\r\n * @returns {number}\r\n */\r\nfunction parseFileMode(value, name, def) {\r\n  value ??= def;\r\n  if (typeof value === 'string') {\r\n    if (RegExpPrototypeExec(octalReg, value) === null) {\r\n      throw new ERR_INVALID_ARG_VALUE(name, value, modeDesc);\r\n    }\r\n    value = NumberParseInt(value, 8);\r\n  }\r\n\r\n  validateUint32(value, name);\r\n  return value;\r\n}\r\n\r\n/**\r\n * @callback validateInteger\r\n * @param {*} value\r\n * @param {string} name\r\n * @param {number} [min]\r\n * @param {number} [max]\r\n * @returns {asserts value is number}\r\n */\r\n\r\n/** @type {validateInteger} */\r\nconst validateInteger = hideStackFrames(\r\n  (value, name, min = NumberMIN_SAFE_INTEGER, max = NumberMAX_SAFE_INTEGER) => {\r\n    if (typeof value !== 'number')\r\n      throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\r\n    if (!NumberIsInteger(value))\r\n      throw new ERR_OUT_OF_RANGE(name, 'an integer', value);\r\n    if (value < min || value > max)\r\n      throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\r\n  },\r\n);\r\n\r\n/**\r\n * @callback validateInt32\r\n * @param {*} value\r\n * @param {string} name\r\n * @param {number} [min]\r\n * @param {number} [max]\r\n * @returns {asserts value is number}\r\n */\r\n\r\n/** @type {validateInt32} */\r\nconst validateInt32 = hideStackFrames(\r\n  (value, name, min = -2147483648, max = 2147483647) => {\r\n    // The defaults for min and max correspond to the limits of 32-bit integers.\r\n    if (typeof value !== 'number') {\r\n      throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\r\n    }\r\n    if (!NumberIsInteger(value)) {\r\n      throw new ERR_OUT_OF_RANGE(name, 'an integer', value);\r\n    }\r\n    if (value < min || value > max) {\r\n      throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\r\n    }\r\n  },\r\n);\r\n\r\n/**\r\n * @callback validateUint32\r\n * @param {*} value\r\n * @param {string} name\r\n * @param {boolean} [positive=false]\r\n * @returns {asserts value is number}\r\n */\r\n\r\n/** @type {validateUint32} */\r\nconst validateUint32 = hideStackFrames((value, name, positive = false) => {\r\n  if (typeof value !== 'number') {\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\r\n  }\r\n  if (!NumberIsInteger(value)) {\r\n    throw new ERR_OUT_OF_RANGE(name, 'an integer', value);\r\n  }\r\n  const min = positive ? 1 : 0;\r\n  // 2 ** 32 === 4294967296\r\n  const max = 4_294_967_295;\r\n  if (value < min || value > max) {\r\n    throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateString\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is string}\r\n */\r\n\r\n/** @type {validateString} */\r\nconst validateString = hideStackFrames((value, name) => {\r\n  if (typeof value !== 'string')\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'string', value);\r\n});\r\n\r\n/**\r\n * @callback validateNumber\r\n * @param {*} value\r\n * @param {string} name\r\n * @param {number} [min]\r\n * @param {number} [max]\r\n * @returns {asserts value is number}\r\n */\r\n\r\n/** @type {validateNumber} */\r\nconst validateNumber = hideStackFrames((value, name, min = undefined, max) => {\r\n  if (typeof value !== 'number')\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\r\n\r\n  if ((min != null && value < min) || (max != null && value > max) ||\r\n    ((min != null || max != null) && NumberIsNaN(value))) {\r\n    throw new ERR_OUT_OF_RANGE(\r\n      name,\r\n      `${min != null ? `>= ${min}` : ''}${min != null && max != null ? ' && ' : ''}${max != null ? `<= ${max}` : ''}`,\r\n      value);\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateOneOf\r\n * @template T\r\n * @param {T} value\r\n * @param {string} name\r\n * @param {T[]} oneOf\r\n */\r\n\r\n/** @type {validateOneOf} */\r\nconst validateOneOf = hideStackFrames((value, name, oneOf) => {\r\n  if (!ArrayPrototypeIncludes(oneOf, value)) {\r\n    const allowed = ArrayPrototypeJoin(\r\n      ArrayPrototypeMap(oneOf, (v) =>\r\n        (typeof v === 'string' ? `'${v}'` : String(v))),\r\n      ', ');\r\n    const reason = 'must be one of: ' + allowed;\r\n    throw new ERR_INVALID_ARG_VALUE(name, value, reason);\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateBoolean\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is boolean}\r\n */\r\n\r\n/** @type {validateBoolean} */\r\nconst validateBoolean = hideStackFrames((value, name) => {\r\n  if (typeof value !== 'boolean')\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'boolean', value);\r\n});\r\n\r\nconst kValidateObjectNone = 0;\r\nconst kValidateObjectAllowNullable = 1 << 0;\r\nconst kValidateObjectAllowArray = 1 << 1;\r\nconst kValidateObjectAllowFunction = 1 << 2;\r\nconst kValidateObjectAllowObjects = kValidateObjectAllowArray |\r\n  kValidateObjectAllowFunction;\r\nconst kValidateObjectAllowObjectsAndNull = kValidateObjectAllowNullable |\r\n  kValidateObjectAllowArray |\r\n  kValidateObjectAllowFunction;\r\n\r\n/**\r\n * @callback validateObject\r\n * @param {*} value\r\n * @param {string} name\r\n * @param {number} [options]\r\n */\r\n\r\n/** @type {validateObject} */\r\nconst validateObject = hideStackFrames(\r\n  (value, name, options = kValidateObjectNone) => {\r\n    if (options === kValidateObjectNone) {\r\n      if (value === null || ArrayIsArray(value)) {\r\n        throw new ERR_INVALID_ARG_TYPE(name, 'Object', value);\r\n      }\r\n\r\n      if (typeof value !== 'object') {\r\n        throw new ERR_INVALID_ARG_TYPE(name, 'Object', value);\r\n      }\r\n    } else {\r\n      const throwOnNullable = (kValidateObjectAllowNullable & options) === 0;\r\n\r\n      if (throwOnNullable && value === null) {\r\n        throw new ERR_INVALID_ARG_TYPE(name, 'Object', value);\r\n      }\r\n\r\n      const throwOnArray = (kValidateObjectAllowArray & options) === 0;\r\n\r\n      if (throwOnArray && ArrayIsArray(value)) {\r\n        throw new ERR_INVALID_ARG_TYPE(name, 'Object', value);\r\n      }\r\n\r\n      const throwOnFunction = (kValidateObjectAllowFunction & options) === 0;\r\n      const typeofValue = typeof value;\r\n\r\n      if (typeofValue !== 'object' && (throwOnFunction || typeofValue !== 'function')) {\r\n        throw new ERR_INVALID_ARG_TYPE(name, 'Object', value);\r\n      }\r\n    }\r\n  });\r\n\r\n/**\r\n * @callback validateDictionary - We are using the Web IDL Standard definition\r\n *                                of \"dictionary\" here, which means any value\r\n *                                whose Type is either Undefined, Null, or\r\n *                                Object (which includes functions).\r\n * @param {*} value\r\n * @param {string} name\r\n * @see https://webidl.spec.whatwg.org/#es-dictionary\r\n * @see https://tc39.es/ecma262/#table-typeof-operator-results\r\n */\r\n\r\n/** @type {validateDictionary} */\r\nconst validateDictionary = hideStackFrames(\r\n  (value, name) => {\r\n    if (value != null && typeof value !== 'object' && typeof value !== 'function') {\r\n      throw new ERR_INVALID_ARG_TYPE(name, 'a dictionary', value);\r\n    }\r\n  });\r\n\r\n/**\r\n * @callback validateArray\r\n * @param {*} value\r\n * @param {string} name\r\n * @param {number} [minLength]\r\n * @returns {asserts value is any[]}\r\n */\r\n\r\n/** @type {validateArray} */\r\nconst validateArray = hideStackFrames((value, name, minLength = 0) => {\r\n  if (!ArrayIsArray(value)) {\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'Array', value);\r\n  }\r\n  if (value.length < minLength) {\r\n    const reason = `must be longer than ${minLength}`;\r\n    throw new ERR_INVALID_ARG_VALUE(name, value, reason);\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateStringArray\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is string[]}\r\n */\r\n\r\n/** @type {validateStringArray} */\r\nconst validateStringArray = hideStackFrames((value, name) => {\r\n  validateArray(value, name);\r\n  for (let i = 0; i < value.length; ++i) {\r\n    // Don't use validateString here for performance reasons, as\r\n    // we would generate intermediate strings for the name.\r\n    if (typeof value[i] !== 'string') {\r\n      throw new ERR_INVALID_ARG_TYPE(`${name}[${i}]`, 'string', value[i]);\r\n    }\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateBooleanArray\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is boolean[]}\r\n */\r\n\r\n/** @type {validateBooleanArray} */\r\nconst validateBooleanArray = hideStackFrames((value, name) => {\r\n  validateArray(value, name);\r\n  for (let i = 0; i < value.length; ++i) {\r\n    // Don't use validateBoolean here for performance reasons, as\r\n    // we would generate intermediate strings for the name.\r\n    if (value[i] !== true && value[i] !== false) {\r\n      throw new ERR_INVALID_ARG_TYPE(`${name}[${i}]`, 'boolean', value[i]);\r\n    }\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateAbortSignalArray\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is AbortSignal[]}\r\n */\r\n\r\n/** @type {validateAbortSignalArray} */\r\nfunction validateAbortSignalArray(value, name) {\r\n  validateArray(value, name);\r\n  for (let i = 0; i < value.length; i++) {\r\n    const signal = value[i];\r\n    const indexedName = `${name}[${i}]`;\r\n    if (signal == null) {\r\n      throw new ERR_INVALID_ARG_TYPE(indexedName, 'AbortSignal', signal);\r\n    }\r\n    validateAbortSignal(signal, indexedName);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {*} signal\r\n * @param {string} [name='signal']\r\n * @returns {asserts signal is keyof signals}\r\n */\r\nconst validateSignalName = hideStackFrames((signal, name = 'signal') => {\r\n  validateString(signal, name);\r\n\r\n  if (signals[signal] === undefined) {\r\n    if (signals[StringPrototypeToUpperCase(signal)] !== undefined) {\r\n      throw new ERR_UNKNOWN_SIGNAL(signal +\r\n                                   ' (signals must use all capital letters)');\r\n    }\r\n\r\n    throw new ERR_UNKNOWN_SIGNAL(signal);\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateBuffer\r\n * @param {*} buffer\r\n * @param {string} [name='buffer']\r\n * @returns {asserts buffer is ArrayBufferView}\r\n */\r\n\r\n/** @type {validateBuffer} */\r\nconst validateBuffer = hideStackFrames((buffer, name = 'buffer') => {\r\n  if (!isArrayBufferView(buffer)) {\r\n    throw new ERR_INVALID_ARG_TYPE(name,\r\n                                   ['Buffer', 'TypedArray', 'DataView'],\r\n                                   buffer);\r\n  }\r\n});\r\n\r\n/**\r\n * @param {string} data\r\n * @param {string} encoding\r\n */\r\nconst validateEncoding = hideStackFrames((data, encoding) => {\r\n  const normalizedEncoding = normalizeEncoding(encoding);\r\n  const length = data.length;\r\n\r\n  if (normalizedEncoding === 'hex' && length % 2 !== 0) {\r\n    throw new ERR_INVALID_ARG_VALUE('encoding', encoding,\r\n                                    `is invalid for data of length ${length}`);\r\n  }\r\n});\r\n\r\n/**\r\n * Check that the port number is not NaN when coerced to a number,\r\n * is an integer and that it falls within the legal range of port numbers.\r\n * @param {*} port\r\n * @param {string} [name='Port']\r\n * @param {boolean} [allowZero=true]\r\n * @returns {number}\r\n */\r\nconst validatePort = hideStackFrames((port, name = 'Port', allowZero = true) => {\r\n  if ((typeof port !== 'number' && typeof port !== 'string') ||\r\n      (typeof port === 'string' && StringPrototypeTrim(port).length === 0) ||\r\n      +port !== (+port >>> 0) ||\r\n      port > 0xFFFF ||\r\n      (port === 0 && !allowZero)) {\r\n    throw new ERR_SOCKET_BAD_PORT(name, port, allowZero);\r\n  }\r\n  return port | 0;\r\n});\r\n\r\n/**\r\n * @callback validateAbortSignal\r\n * @param {*} signal\r\n * @param {string} name\r\n */\r\n\r\n/** @type {validateAbortSignal} */\r\nconst validateAbortSignal = hideStackFrames((signal, name) => {\r\n  if (signal !== undefined &&\r\n      (signal === null ||\r\n       typeof signal !== 'object' ||\r\n       !('aborted' in signal))) {\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'AbortSignal', signal);\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateFunction\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is Function}\r\n */\r\n\r\n/** @type {validateFunction} */\r\nconst validateFunction = hideStackFrames((value, name) => {\r\n  if (typeof value !== 'function')\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'Function', value);\r\n});\r\n\r\n/**\r\n * @callback validatePlainFunction\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is Function}\r\n */\r\n\r\n/** @type {validatePlainFunction} */\r\nconst validatePlainFunction = hideStackFrames((value, name) => {\r\n  if (typeof value !== 'function' || isAsyncFunction(value))\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'Function', value);\r\n});\r\n\r\n/**\r\n * @callback validateUndefined\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is undefined}\r\n */\r\n\r\n/** @type {validateUndefined} */\r\nconst validateUndefined = hideStackFrames((value, name) => {\r\n  if (value !== undefined)\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'undefined', value);\r\n});\r\n\r\n/**\r\n * @template T\r\n * @param {T} value\r\n * @param {string} name\r\n * @param {T[]} union\r\n */\r\nfunction validateUnion(value, name, union) {\r\n  if (!ArrayPrototypeIncludes(union, value)) {\r\n    throw new ERR_INVALID_ARG_TYPE(name, `('${ArrayPrototypeJoin(union, '|')}')`, value);\r\n  }\r\n}\r\n\r\n/*\r\n  The rules for the Link header field are described here:\r\n  https://www.rfc-editor.org/rfc/rfc8288.html#section-3\r\n\r\n  This regex validates any string surrounded by angle brackets\r\n  (not necessarily a valid URI reference) followed by zero or more\r\n  link-params separated by semicolons.\r\n*/\r\nconst linkValueRegExp = /^(?:<[^>]*>)(?:\\s*;\\s*[^;\"\\s]+(?:=(\")?[^;\"\\s]*\\1)?)*$/;\r\n\r\n/**\r\n * @param {any} value\r\n * @param {string} name\r\n */\r\nconst validateLinkHeaderFormat = hideStackFrames((value, name) => {\r\n  if (\r\n    typeof value === 'undefined' ||\r\n    !RegExpPrototypeExec(linkValueRegExp, value)\r\n  ) {\r\n    throw new ERR_INVALID_ARG_VALUE(\r\n      name,\r\n      value,\r\n      'must be an array or string of format \"</styles.css>; rel=preload; as=style\"',\r\n    );\r\n  }\r\n});\r\n\r\nconst validateInternalField = hideStackFrames((object, fieldKey, className) => {\r\n  if (typeof object !== 'object' || object === null || !ObjectPrototypeHasOwnProperty(object, fieldKey)) {\r\n    throw new ERR_INVALID_ARG_TYPE('this', className, object);\r\n  }\r\n});\r\n\r\n/**\r\n * @param {any} hints\r\n * @return {string}\r\n */\r\nconst validateLinkHeaderValue = hideStackFrames((hints) => {\r\n  if (typeof hints === 'string') {\r\n    validateLinkHeaderFormat.withoutStackTrace(hints, 'hints');\r\n    return hints;\r\n  } else if (ArrayIsArray(hints)) {\r\n    const hintsLength = hints.length;\r\n    let result = '';\r\n\r\n    if (hintsLength === 0) {\r\n      return result;\r\n    }\r\n\r\n    for (let i = 0; i < hintsLength; i++) {\r\n      const link = hints[i];\r\n      validateLinkHeaderFormat.withoutStackTrace(link, 'hints');\r\n      result += link;\r\n\r\n      if (i !== hintsLength - 1) {\r\n        result += ', ';\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_VALUE(\r\n    'hints',\r\n    hints,\r\n    'must be an array or string of format \"</styles.css>; rel=preload; as=style\"',\r\n  );\r\n});\r\n\r\nmodule.exports = {\r\n  isInt32,\r\n  isUint32,\r\n  parseFileMode,\r\n  validateArray,\r\n  validateStringArray,\r\n  validateBooleanArray,\r\n  validateAbortSignalArray,\r\n  validateBoolean,\r\n  validateBuffer,\r\n  validateDictionary,\r\n  validateEncoding,\r\n  validateFunction,\r\n  validateInt32,\r\n  validateInteger,\r\n  validateNumber,\r\n  validateObject,\r\n  kValidateObjectNone,\r\n  kValidateObjectAllowNullable,\r\n  kValidateObjectAllowArray,\r\n  kValidateObjectAllowFunction,\r\n  kValidateObjectAllowObjects,\r\n  kValidateObjectAllowObjectsAndNull,\r\n  validateOneOf,\r\n  validatePlainFunction,\r\n  validatePort,\r\n  validateSignalName,\r\n  validateString,\r\n  validateUint32,\r\n  validateUndefined,\r\n  validateUnion,\r\n  validateAbortSignal,\r\n  validateLinkHeaderValue,\r\n  validateInternalField,\r\n};\r\n"
  },
  "13": {
    "metadata": {
      "scriptId": "13",
      "url": "node:internal/util",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 947,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "98e9729a8b5b37936a218bc59c3ff148746e11cbbc434d389936106aeeec1f0e",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 26804,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/util"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayBufferPrototypeGetByteLength,\r\n  ArrayFrom,\r\n  ArrayIsArray,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSort,\r\n  Error,\r\n  ErrorCaptureStackTrace,\r\n  FunctionPrototypeCall,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ObjectGetOwnPropertyDescriptors,\r\n  ObjectGetPrototypeOf,\r\n  ObjectPrototypeHasOwnProperty,\r\n  ObjectSetPrototypeOf,\r\n  ObjectValues,\r\n  Promise,\r\n  ReflectApply,\r\n  ReflectConstruct,\r\n  RegExpPrototypeExec,\r\n  RegExpPrototypeGetDotAll,\r\n  RegExpPrototypeGetGlobal,\r\n  RegExpPrototypeGetHasIndices,\r\n  RegExpPrototypeGetIgnoreCase,\r\n  RegExpPrototypeGetMultiline,\r\n  RegExpPrototypeGetSource,\r\n  RegExpPrototypeGetSticky,\r\n  RegExpPrototypeGetUnicode,\r\n  SafeMap,\r\n  SafeSet,\r\n  SafeWeakMap,\r\n  SafeWeakRef,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeReplace,\r\n  StringPrototypeToLowerCase,\r\n  StringPrototypeToUpperCase,\r\n  Symbol,\r\n  SymbolFor,\r\n  SymbolReplace,\r\n  SymbolSplit,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_NO_CRYPTO,\r\n    ERR_UNKNOWN_SIGNAL,\r\n  },\r\n  isErrorStackTraceLimitWritable,\r\n  overrideStackTrace,\r\n  uvErrmapGet,\r\n} = require('internal/errors');\r\nconst { signals } = internalBinding('constants').os;\r\nconst {\r\n  isArrayBufferDetached: _isArrayBufferDetached,\r\n  guessHandleType: _guessHandleType,\r\n  privateSymbols: {\r\n    arrow_message_private_symbol,\r\n    decorated_private_symbol,\r\n  },\r\n  sleep: _sleep,\r\n} = internalBinding('util');\r\nconst { isNativeError, isPromise } = internalBinding('types');\r\nconst { getOptionValue } = require('internal/options');\r\nconst { encodings } = internalBinding('string_decoder');\r\n\r\nconst noCrypto = !process.versions.openssl;\r\n\r\nconst experimentalWarnings = new SafeSet();\r\n\r\nconst colorRegExp = /\\u001b\\[\\d\\d?m/g; // eslint-disable-line no-control-regex\r\n\r\nlet uvBinding;\r\n\r\nfunction lazyUv() {\r\n  uvBinding ??= internalBinding('uv');\r\n  return uvBinding;\r\n}\r\n\r\nfunction removeColors(str) {\r\n  return StringPrototypeReplace(str, colorRegExp, '');\r\n}\r\n\r\nfunction isError(e) {\r\n  // An error could be an instance of Error while not being a native error\r\n  // or could be from a different realm and not be instance of Error but still\r\n  // be a native error.\r\n  return isNativeError(e) || e instanceof Error;\r\n}\r\n\r\n// Keep a list of deprecation codes that have been warned on so we only warn on\r\n// each one once.\r\nconst codesWarned = new SafeSet();\r\n\r\nlet validateString;\r\n\r\nfunction getDeprecationWarningEmitter(\r\n  code, msg, deprecated, useEmitSync,\r\n  shouldEmitWarning = () => true,\r\n) {\r\n  let warned = false;\r\n  return function() {\r\n    if (!warned && shouldEmitWarning()) {\r\n      warned = true;\r\n      if (code !== undefined) {\r\n        if (!codesWarned.has(code)) {\r\n          const emitWarning = useEmitSync ?\r\n            require('internal/process/warning').emitWarningSync :\r\n            process.emitWarning;\r\n          emitWarning(msg, 'DeprecationWarning', code, deprecated);\r\n          codesWarned.add(code);\r\n        }\r\n      } else {\r\n        process.emitWarning(msg, 'DeprecationWarning', deprecated);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction isPendingDeprecation() {\r\n  return getOptionValue('--pending-deprecation') &&\r\n    !getOptionValue('--no-deprecation');\r\n}\r\n\r\n// Internal deprecator for pending --pending-deprecation. This can be invoked\r\n// at snapshot building time as the warning permission is only queried at\r\n// run time.\r\nfunction pendingDeprecate(fn, msg, code) {\r\n  const emitDeprecationWarning = getDeprecationWarningEmitter(\r\n    code, msg, deprecated, false, isPendingDeprecation,\r\n  );\r\n  function deprecated(...args) {\r\n    emitDeprecationWarning();\r\n    return ReflectApply(fn, this, args);\r\n  }\r\n  return deprecated;\r\n}\r\n\r\n// Mark that a method should not be used.\r\n// Returns a modified function which warns once by default.\r\n// If --no-deprecation is set, then it is a no-op.\r\nfunction deprecate(fn, msg, code, useEmitSync) {\r\n  // Lazy-load to avoid a circular dependency.\r\n  if (validateString === undefined)\r\n    ({ validateString } = require('internal/validators'));\r\n\r\n  if (code !== undefined)\r\n    validateString(code, 'code');\r\n\r\n  const emitDeprecationWarning = getDeprecationWarningEmitter(\r\n    code, msg, deprecated, useEmitSync,\r\n  );\r\n\r\n  function deprecated(...args) {\r\n    // TODO(joyeecheung): use getOptionValue('--no-deprecation') instead.\r\n    if (!process.noDeprecation) {\r\n      emitDeprecationWarning();\r\n    }\r\n    if (new.target) {\r\n      return ReflectConstruct(fn, args, new.target);\r\n    }\r\n    return ReflectApply(fn, this, args);\r\n  }\r\n\r\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\r\n  ObjectSetPrototypeOf(deprecated, fn);\r\n  if (fn.prototype) {\r\n    // Setting this (rather than using Object.setPrototype, as above) ensures\r\n    // that calling the unwrapped constructor gives an instanceof the wrapped\r\n    // constructor.\r\n    deprecated.prototype = fn.prototype;\r\n  }\r\n\r\n  return deprecated;\r\n}\r\n\r\nfunction decorateErrorStack(err) {\r\n  if (!(isError(err) && err.stack) || err[decorated_private_symbol])\r\n    return;\r\n\r\n  const arrow = err[arrow_message_private_symbol];\r\n\r\n  if (arrow) {\r\n    err.stack = arrow + err.stack;\r\n    err[decorated_private_symbol] = true;\r\n  }\r\n}\r\n\r\nfunction assertCrypto() {\r\n  if (noCrypto)\r\n    throw new ERR_NO_CRYPTO();\r\n}\r\n\r\n// Return undefined if there is no match.\r\n// Move the \"slow cases\" to a separate function to make sure this function gets\r\n// inlined properly. That prioritizes the common case.\r\nfunction normalizeEncoding(enc) {\r\n  if (enc == null || enc === 'utf8' || enc === 'utf-8') return 'utf8';\r\n  return slowCases(enc);\r\n}\r\n\r\nfunction slowCases(enc) {\r\n  switch (enc.length) {\r\n    case 4:\r\n      if (enc === 'UTF8') return 'utf8';\r\n      if (enc === 'ucs2' || enc === 'UCS2') return 'utf16le';\r\n      enc = StringPrototypeToLowerCase(enc);\r\n      if (enc === 'utf8') return 'utf8';\r\n      if (enc === 'ucs2') return 'utf16le';\r\n      break;\r\n    case 3:\r\n      if (enc === 'hex' || enc === 'HEX' ||\r\n      StringPrototypeToLowerCase(enc) === 'hex')\r\n        return 'hex';\r\n      break;\r\n    case 5:\r\n      if (enc === 'ascii') return 'ascii';\r\n      if (enc === 'ucs-2') return 'utf16le';\r\n      if (enc === 'UTF-8') return 'utf8';\r\n      if (enc === 'ASCII') return 'ascii';\r\n      if (enc === 'UCS-2') return 'utf16le';\r\n      enc = StringPrototypeToLowerCase(enc);\r\n      if (enc === 'utf-8') return 'utf8';\r\n      if (enc === 'ascii') return 'ascii';\r\n      if (enc === 'ucs-2') return 'utf16le';\r\n      break;\r\n    case 6:\r\n      if (enc === 'base64') return 'base64';\r\n      if (enc === 'latin1' || enc === 'binary') return 'latin1';\r\n      if (enc === 'BASE64') return 'base64';\r\n      if (enc === 'LATIN1' || enc === 'BINARY') return 'latin1';\r\n      enc = StringPrototypeToLowerCase(enc);\r\n      if (enc === 'base64') return 'base64';\r\n      if (enc === 'latin1' || enc === 'binary') return 'latin1';\r\n      break;\r\n    case 7:\r\n      if (enc === 'utf16le' || enc === 'UTF16LE' ||\r\n      StringPrototypeToLowerCase(enc) === 'utf16le')\r\n        return 'utf16le';\r\n      break;\r\n    case 8:\r\n      if (enc === 'utf-16le' || enc === 'UTF-16LE' ||\r\n      StringPrototypeToLowerCase(enc) === 'utf-16le')\r\n        return 'utf16le';\r\n      break;\r\n    case 9:\r\n      if (enc === 'base64url' || enc === 'BASE64URL' ||\r\n      StringPrototypeToLowerCase(enc) === 'base64url')\r\n        return 'base64url';\r\n      break;\r\n    default:\r\n      if (enc === '') return 'utf8';\r\n  }\r\n}\r\n\r\nfunction emitExperimentalWarning(feature) {\r\n  if (experimentalWarnings.has(feature)) return;\r\n  const msg = `${feature} is an experimental feature and might change at any time`;\r\n  experimentalWarnings.add(feature);\r\n  process.emitWarning(msg, 'ExperimentalWarning');\r\n}\r\n\r\nfunction filterDuplicateStrings(items, low) {\r\n  const map = new SafeMap();\r\n  for (let i = 0; i < items.length; i++) {\r\n    const item = items[i];\r\n    const key = StringPrototypeToLowerCase(item);\r\n    if (low) {\r\n      map.set(key, key);\r\n    } else {\r\n      map.set(key, item);\r\n    }\r\n  }\r\n  return ArrayPrototypeSort(ArrayFrom(map.values()));\r\n}\r\n\r\nfunction cachedResult(fn) {\r\n  let result;\r\n  return () => {\r\n    if (result === undefined)\r\n      result = fn();\r\n    return ArrayPrototypeSlice(result);\r\n  };\r\n}\r\n\r\n// Useful for Wrapping an ES6 Class with a constructor Function that\r\n// does not require the new keyword. For instance:\r\n//   class A { constructor(x) {this.x = x;}}\r\n//   const B = createClassWrapper(A);\r\n//   B() instanceof A // true\r\n//   B() instanceof B // true\r\nfunction createClassWrapper(type) {\r\n  function fn(...args) {\r\n    return ReflectConstruct(type, args, new.target || type);\r\n  }\r\n  // Mask the wrapper function name and length values\r\n  ObjectDefineProperties(fn, {\r\n    name: { __proto__: null, value: type.name },\r\n    length: { __proto__: null, value: type.length },\r\n  });\r\n  ObjectSetPrototypeOf(fn, type);\r\n  fn.prototype = type.prototype;\r\n  return fn;\r\n}\r\n\r\nlet signalsToNamesMapping;\r\nfunction getSignalsToNamesMapping() {\r\n  if (signalsToNamesMapping !== undefined)\r\n    return signalsToNamesMapping;\r\n\r\n  signalsToNamesMapping = { __proto__: null };\r\n  for (const key in signals) {\r\n    signalsToNamesMapping[signals[key]] = key;\r\n  }\r\n\r\n  return signalsToNamesMapping;\r\n}\r\n\r\nfunction convertToValidSignal(signal) {\r\n  if (typeof signal === 'number' && getSignalsToNamesMapping()[signal])\r\n    return signal;\r\n\r\n  if (typeof signal === 'string') {\r\n    const signalName = signals[StringPrototypeToUpperCase(signal)];\r\n    if (signalName) return signalName;\r\n  }\r\n\r\n  throw new ERR_UNKNOWN_SIGNAL(signal);\r\n}\r\n\r\nfunction getConstructorOf(obj) {\r\n  while (obj) {\r\n    const descriptor = ObjectGetOwnPropertyDescriptor(obj, 'constructor');\r\n    if (descriptor !== undefined &&\r\n        typeof descriptor.value === 'function' &&\r\n        descriptor.value.name !== '') {\r\n      return descriptor.value;\r\n    }\r\n\r\n    obj = ObjectGetPrototypeOf(obj);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nlet cachedURL;\r\nlet cachedCWD;\r\n\r\n/**\r\n * Get the current working directory while accounting for the possibility that it has been deleted.\r\n * `process.cwd()` can fail if the parent directory is deleted while the process runs.\r\n * @returns {URL} The current working directory or the volume root if it cannot be determined.\r\n */\r\nfunction getCWDURL() {\r\n  const { sep } = require('path');\r\n  const { pathToFileURL } = require('internal/url');\r\n\r\n  let cwd;\r\n\r\n  try {\r\n    // The implementation of `process.cwd()` already uses proper cache when it can.\r\n    // It's a relatively cheap call performance-wise for the most common use case.\r\n    cwd = process.cwd();\r\n  } catch {\r\n    cachedURL ??= pathToFileURL(sep);\r\n  }\r\n\r\n  if (cwd != null && cwd !== cachedCWD) {\r\n    cachedURL = pathToFileURL(cwd + sep);\r\n    cachedCWD = cwd;\r\n  }\r\n\r\n  return cachedURL;\r\n}\r\n\r\nfunction getSystemErrorName(err) {\r\n  const entry = uvErrmapGet(err);\r\n  return entry ? entry[0] : `Unknown system error ${err}`;\r\n}\r\n\r\nfunction getSystemErrorMap() {\r\n  return lazyUv().getErrorMap();\r\n}\r\n\r\nconst kCustomPromisifiedSymbol = SymbolFor('nodejs.util.promisify.custom');\r\nconst kCustomPromisifyArgsSymbol = Symbol('customPromisifyArgs');\r\n\r\nlet validateFunction;\r\n\r\nfunction promisify(original) {\r\n  // Lazy-load to avoid a circular dependency.\r\n  if (validateFunction === undefined)\r\n    ({ validateFunction } = require('internal/validators'));\r\n\r\n  validateFunction(original, 'original');\r\n\r\n  if (original[kCustomPromisifiedSymbol]) {\r\n    const fn = original[kCustomPromisifiedSymbol];\r\n\r\n    validateFunction(fn, 'util.promisify.custom');\r\n\r\n    return ObjectDefineProperty(fn, kCustomPromisifiedSymbol, {\r\n      __proto__: null,\r\n      value: fn, enumerable: false, writable: false, configurable: true,\r\n    });\r\n  }\r\n\r\n  // Names to create an object from in case the callback receives multiple\r\n  // arguments, e.g. ['bytesRead', 'buffer'] for fs.read.\r\n  const argumentNames = original[kCustomPromisifyArgsSymbol];\r\n\r\n  function fn(...args) {\r\n    return new Promise((resolve, reject) => {\r\n      ArrayPrototypePush(args, (err, ...values) => {\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n        if (argumentNames !== undefined && values.length > 1) {\r\n          const obj = {};\r\n          for (let i = 0; i < argumentNames.length; i++)\r\n            obj[argumentNames[i]] = values[i];\r\n          resolve(obj);\r\n        } else {\r\n          resolve(values[0]);\r\n        }\r\n      });\r\n      if (isPromise(ReflectApply(original, this, args))) {\r\n        process.emitWarning('Calling promisify on a function that returns a Promise is likely a mistake.',\r\n                            'DeprecationWarning', 'DEP0174');\r\n      }\r\n    });\r\n  }\r\n\r\n  ObjectSetPrototypeOf(fn, ObjectGetPrototypeOf(original));\r\n\r\n  ObjectDefineProperty(fn, kCustomPromisifiedSymbol, {\r\n    __proto__: null,\r\n    value: fn, enumerable: false, writable: false, configurable: true,\r\n  });\r\n\r\n  const descriptors = ObjectGetOwnPropertyDescriptors(original);\r\n  const propertiesValues = ObjectValues(descriptors);\r\n  for (let i = 0; i < propertiesValues.length; i++) {\r\n    // We want to use null-prototype objects to not rely on globally mutable\r\n    // %Object.prototype%.\r\n    ObjectSetPrototypeOf(propertiesValues[i], null);\r\n  }\r\n  return ObjectDefineProperties(fn, descriptors);\r\n}\r\n\r\npromisify.custom = kCustomPromisifiedSymbol;\r\n\r\n// The built-in Array#join is slower in v8 6.0\r\nfunction join(output, separator) {\r\n  let str = '';\r\n  if (output.length !== 0) {\r\n    const lastIndex = output.length - 1;\r\n    for (let i = 0; i < lastIndex; i++) {\r\n      // It is faster not to use a template string here\r\n      str += output[i];\r\n      str += separator;\r\n    }\r\n    str += output[lastIndex];\r\n  }\r\n  return str;\r\n}\r\n\r\n// As of V8 6.6, depending on the size of the array, this is anywhere\r\n// between 1.5-10x faster than the two-arg version of Array#splice()\r\nfunction spliceOne(list, index) {\r\n  for (; index + 1 < list.length; index++)\r\n    list[index] = list[index + 1];\r\n  list.pop();\r\n}\r\n\r\nconst kNodeModulesRE = /^(?:.*)[\\\\/]node_modules[\\\\/]/;\r\n\r\nlet getStructuredStackImpl;\r\n\r\nfunction lazyGetStructuredStack() {\r\n  if (getStructuredStackImpl === undefined) {\r\n    // Lazy-load to avoid a circular dependency.\r\n    const { runInNewContext } = require('vm');\r\n    // Use `runInNewContext()` to get something tamper-proof and\r\n    // side-effect-free. Since this is currently only used for a deprecated API\r\n    // and module mocking, the perf implications should be okay.\r\n    getStructuredStackImpl = runInNewContext(`(function() {\r\n      try { Error.stackTraceLimit = Infinity; } catch {}\r\n      return function structuredStack() {\r\n        const e = new Error();\r\n        overrideStackTrace.set(e, (err, trace) => trace);\r\n        return e.stack;\r\n      };\r\n    })()`, { overrideStackTrace }, { filename: 'structured-stack' });\r\n  }\r\n\r\n  return getStructuredStackImpl;\r\n}\r\n\r\nfunction getStructuredStack() {\r\n  const getStructuredStackImpl = lazyGetStructuredStack();\r\n\r\n  return getStructuredStackImpl();\r\n}\r\n\r\nfunction isInsideNodeModules() {\r\n  const stack = getStructuredStack();\r\n\r\n  // Iterate over all stack frames and look for the first one not coming\r\n  // from inside Node.js itself:\r\n  if (ArrayIsArray(stack)) {\r\n    for (const frame of stack) {\r\n      const filename = frame.getFileName();\r\n      // If a filename does not start with / or contain \\,\r\n      // it's likely from Node.js core.\r\n      if (\r\n        filename[0] !== '/' &&\r\n        StringPrototypeIncludes(filename, '\\\\') === false\r\n      ) {\r\n        continue;\r\n      }\r\n      return RegExpPrototypeExec(kNodeModulesRE, filename) !== null;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction once(callback, { preserveReturnValue = false } = kEmptyObject) {\r\n  let called = false;\r\n  let returnValue;\r\n  return function(...args) {\r\n    if (called) return returnValue;\r\n    called = true;\r\n    const result = ReflectApply(callback, this, args);\r\n    returnValue = preserveReturnValue ? result : undefined;\r\n    return result;\r\n  };\r\n}\r\n\r\nlet validateUint32;\r\n\r\nfunction sleep(msec) {\r\n  // Lazy-load to avoid a circular dependency.\r\n  if (validateUint32 === undefined)\r\n    ({ validateUint32 } = require('internal/validators'));\r\n\r\n  validateUint32(msec, 'msec');\r\n  _sleep(msec);\r\n}\r\n\r\nfunction createDeferredPromise() {\r\n  let resolve;\r\n  let reject;\r\n  const promise = new Promise((res, rej) => {\r\n    resolve = res;\r\n    reject = rej;\r\n  });\r\n\r\n  return { promise, resolve, reject };\r\n}\r\n\r\n// https://heycam.github.io/webidl/#define-the-operations\r\nfunction defineOperation(target, name, method) {\r\n  ObjectDefineProperty(target, name, {\r\n    __proto__: null,\r\n    writable: true,\r\n    enumerable: true,\r\n    configurable: true,\r\n    value: method,\r\n  });\r\n}\r\n\r\n// https://heycam.github.io/webidl/#es-interfaces\r\nfunction exposeInterface(target, name, interfaceObject) {\r\n  ObjectDefineProperty(target, name, {\r\n    __proto__: null,\r\n    writable: true,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: interfaceObject,\r\n  });\r\n}\r\n\r\n// https://heycam.github.io/webidl/#es-namespaces\r\nfunction exposeNamespace(target, name, namespaceObject) {\r\n  ObjectDefineProperty(target, name, {\r\n    __proto__: null,\r\n    writable: true,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: namespaceObject,\r\n  });\r\n}\r\n\r\nfunction exposeGetterAndSetter(target, name, getter, setter = undefined) {\r\n  ObjectDefineProperty(target, name, {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    configurable: true,\r\n    get: getter,\r\n    set: setter,\r\n  });\r\n}\r\n\r\nfunction defineLazyProperties(target, id, keys, enumerable = true) {\r\n  const descriptors = { __proto__: null };\r\n  let mod;\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const key = keys[i];\r\n    let lazyLoadedValue;\r\n    function set(value) {\r\n      ObjectDefineProperty(target, key, {\r\n        __proto__: null,\r\n        writable: true,\r\n        value,\r\n      });\r\n    }\r\n    ObjectDefineProperty(set, 'name', {\r\n      __proto__: null,\r\n      value: `set ${key}`,\r\n    });\r\n    function get() {\r\n      mod ??= require(id);\r\n      if (lazyLoadedValue === undefined) {\r\n        lazyLoadedValue = mod[key];\r\n        set(lazyLoadedValue);\r\n      }\r\n      return lazyLoadedValue;\r\n    }\r\n    ObjectDefineProperty(get, 'name', {\r\n      __proto__: null,\r\n      value: `get ${key}`,\r\n    });\r\n    descriptors[key] = {\r\n      __proto__: null,\r\n      configurable: true,\r\n      enumerable,\r\n      get,\r\n      set,\r\n    };\r\n  }\r\n  ObjectDefineProperties(target, descriptors);\r\n}\r\n\r\nfunction defineReplaceableLazyAttribute(target, id, keys, writable = true, check) {\r\n  let mod;\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const key = keys[i];\r\n    let value;\r\n    let setterCalled = false;\r\n\r\n    function get() {\r\n      if (check !== undefined) {\r\n        FunctionPrototypeCall(check, this);\r\n      }\r\n      if (setterCalled) {\r\n        return value;\r\n      }\r\n      mod ??= require(id);\r\n      value ??= mod[key];\r\n      return value;\r\n    }\r\n\r\n    ObjectDefineProperty(get, 'name', {\r\n      __proto__: null,\r\n      value: `get ${key}`,\r\n    });\r\n\r\n    function set(val) {\r\n      setterCalled = true;\r\n      value = val;\r\n    }\r\n    ObjectDefineProperty(set, 'name', {\r\n      __proto__: null,\r\n      value: `set ${key}`,\r\n    });\r\n\r\n    ObjectDefineProperty(target, key, {\r\n      __proto__: null,\r\n      enumerable: true,\r\n      configurable: true,\r\n      get,\r\n      set: writable ? set : undefined,\r\n    });\r\n  }\r\n}\r\n\r\nfunction exposeLazyInterfaces(target, id, keys) {\r\n  defineLazyProperties(target, id, keys, false);\r\n}\r\n\r\nlet _DOMException;\r\nconst lazyDOMExceptionClass = () => {\r\n  _DOMException ??= internalBinding('messaging').DOMException;\r\n  return _DOMException;\r\n};\r\n\r\nconst lazyDOMException = (message, name) => {\r\n  _DOMException ??= internalBinding('messaging').DOMException;\r\n  if (isErrorStackTraceLimitWritable()) {\r\n    const limit = Error.stackTraceLimit;\r\n    Error.stackTraceLimit = 0;\r\n    const ex = new _DOMException(message, name);\r\n    Error.stackTraceLimit = limit;\r\n    ErrorCaptureStackTrace(ex, lazyDOMException);\r\n    return ex;\r\n  }\r\n  return new _DOMException(message, name);\r\n\r\n};\r\n\r\nconst kEnumerableProperty = { __proto__: null };\r\nkEnumerableProperty.enumerable = true;\r\nObjectFreeze(kEnumerableProperty);\r\n\r\nconst kEmptyObject = ObjectFreeze({ __proto__: null });\r\n\r\nfunction filterOwnProperties(source, keys) {\r\n  const filtered = { __proto__: null };\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const key = keys[i];\r\n    if (ObjectPrototypeHasOwnProperty(source, key)) {\r\n      filtered[key] = source[key];\r\n    }\r\n  }\r\n\r\n  return filtered;\r\n}\r\n\r\n/**\r\n * Mimics `obj[key] = value` but ignoring potential prototype inheritance.\r\n * @param {any} obj\r\n * @param {string} key\r\n * @param {any} value\r\n * @returns {any}\r\n */\r\nfunction setOwnProperty(obj, key, value) {\r\n  return ObjectDefineProperty(obj, key, {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    value,\r\n    writable: true,\r\n  });\r\n}\r\n\r\nlet internalGlobal;\r\nfunction getInternalGlobal() {\r\n  if (internalGlobal == null) {\r\n    // Lazy-load to avoid a circular dependency.\r\n    const { runInNewContext } = require('vm');\r\n    internalGlobal = runInNewContext('this', undefined, { contextName: 'internal' });\r\n  }\r\n  return internalGlobal;\r\n}\r\n\r\nfunction SideEffectFreeRegExpPrototypeExec(regex, string) {\r\n  const { RegExp: RegExpFromAnotherRealm } = getInternalGlobal();\r\n  return FunctionPrototypeCall(RegExpFromAnotherRealm.prototype.exec, regex, string);\r\n}\r\n\r\nconst crossRelmRegexes = new SafeWeakMap();\r\nfunction getCrossRelmRegex(regex) {\r\n  const cached = crossRelmRegexes.get(regex);\r\n  if (cached) return cached;\r\n\r\n  let flagString = '';\r\n  if (RegExpPrototypeGetHasIndices(regex)) flagString += 'd';\r\n  if (RegExpPrototypeGetGlobal(regex)) flagString += 'g';\r\n  if (RegExpPrototypeGetIgnoreCase(regex)) flagString += 'i';\r\n  if (RegExpPrototypeGetMultiline(regex)) flagString += 'm';\r\n  if (RegExpPrototypeGetDotAll(regex)) flagString += 's';\r\n  if (RegExpPrototypeGetUnicode(regex)) flagString += 'u';\r\n  if (RegExpPrototypeGetSticky(regex)) flagString += 'y';\r\n\r\n  const { RegExp: RegExpFromAnotherRealm } = getInternalGlobal();\r\n  const crossRelmRegex = new RegExpFromAnotherRealm(RegExpPrototypeGetSource(regex), flagString);\r\n  crossRelmRegexes.set(regex, crossRelmRegex);\r\n  return crossRelmRegex;\r\n}\r\n\r\nfunction SideEffectFreeRegExpPrototypeSymbolReplace(regex, string, replacement) {\r\n  return getCrossRelmRegex(regex)[SymbolReplace](string, replacement);\r\n}\r\n\r\nfunction SideEffectFreeRegExpPrototypeSymbolSplit(regex, string, limit = undefined) {\r\n  return getCrossRelmRegex(regex)[SymbolSplit](string, limit);\r\n}\r\n\r\n\r\nfunction isArrayBufferDetached(value) {\r\n  if (ArrayBufferPrototypeGetByteLength(value) === 0) {\r\n    return _isArrayBufferDetached(value);\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Helper function to lazy-load an initialize-once value.\r\n * @template T Return value of initializer\r\n * @param {()=>T} initializer Initializer of the lazily loaded value.\r\n * @returns {()=>T}\r\n */\r\nfunction getLazy(initializer) {\r\n  let value;\r\n  let initialized = false;\r\n  return function() {\r\n    if (initialized === false) {\r\n      value = initializer();\r\n      initialized = true;\r\n    }\r\n    return value;\r\n  };\r\n}\r\n\r\n// Setup user-facing NODE_V8_COVERAGE environment variable that writes\r\n// ScriptCoverage objects to a specified directory.\r\nfunction setupCoverageHooks(dir) {\r\n  const cwd = require('internal/process/execution').tryGetCwd();\r\n  const { resolve } = require('path');\r\n  const coverageDirectory = resolve(cwd, dir);\r\n  const { sourceMapCacheToObject } =\r\n    require('internal/source_map/source_map_cache');\r\n\r\n  if (process.features.inspector) {\r\n    internalBinding('profiler').setCoverageDirectory(coverageDirectory);\r\n    internalBinding('profiler').setSourceMapCacheGetter(sourceMapCacheToObject);\r\n  } else {\r\n    process.emitWarning('The inspector is disabled, ' +\r\n                        'coverage could not be collected',\r\n                        'Warning');\r\n    return '';\r\n  }\r\n  return coverageDirectory;\r\n}\r\n\r\n\r\nconst handleTypes = ['TCP', 'TTY', 'UDP', 'FILE', 'PIPE', 'UNKNOWN'];\r\nfunction guessHandleType(fd) {\r\n  const type = _guessHandleType(fd);\r\n  return handleTypes[type];\r\n}\r\n\r\nclass WeakReference {\r\n  #weak = null;\r\n  // eslint-disable-next-line no-unused-private-class-members\r\n  #strong = null;\r\n  #refCount = 0;\r\n  constructor(object) {\r\n    this.#weak = new SafeWeakRef(object);\r\n  }\r\n\r\n  incRef() {\r\n    this.#refCount++;\r\n    if (this.#refCount === 1) {\r\n      const derefed = this.#weak.deref();\r\n      if (derefed !== undefined) {\r\n        this.#strong = derefed;\r\n      }\r\n    }\r\n    return this.#refCount;\r\n  }\r\n\r\n  decRef() {\r\n    this.#refCount--;\r\n    if (this.#refCount === 0) {\r\n      this.#strong = null;\r\n    }\r\n    return this.#refCount;\r\n  }\r\n\r\n  get() {\r\n    return this.#weak.deref();\r\n  }\r\n}\r\n\r\nconst encodingsMap = { __proto__: null };\r\nfor (let i = 0; i < encodings.length; ++i)\r\n  encodingsMap[encodings[i]] = i;\r\n\r\nmodule.exports = {\r\n  getLazy,\r\n  assertCrypto,\r\n  cachedResult,\r\n  convertToValidSignal,\r\n  createClassWrapper,\r\n  createDeferredPromise,\r\n  decorateErrorStack,\r\n  defineOperation,\r\n  defineLazyProperties,\r\n  defineReplaceableLazyAttribute,\r\n  deprecate,\r\n  emitExperimentalWarning,\r\n  encodingsMap,\r\n  exposeInterface,\r\n  exposeLazyInterfaces,\r\n  exposeNamespace,\r\n  exposeGetterAndSetter,\r\n  filterDuplicateStrings,\r\n  filterOwnProperties,\r\n  getConstructorOf,\r\n  getCWDURL,\r\n  getInternalGlobal,\r\n  getStructuredStack,\r\n  getSystemErrorMap,\r\n  getSystemErrorName,\r\n  guessHandleType,\r\n  isArrayBufferDetached,\r\n  isError,\r\n  isInsideNodeModules,\r\n  join,\r\n  lazyDOMException,\r\n  lazyDOMExceptionClass,\r\n  normalizeEncoding,\r\n  once,\r\n  promisify,\r\n  SideEffectFreeRegExpPrototypeExec,\r\n  SideEffectFreeRegExpPrototypeSymbolReplace,\r\n  SideEffectFreeRegExpPrototypeSymbolSplit,\r\n  sleep,\r\n  spliceOne,\r\n  setupCoverageHooks,\r\n  removeColors,\r\n\r\n  // Symbol used to customize promisify conversion\r\n  customPromisifyArgs: kCustomPromisifyArgsSymbol,\r\n\r\n  // Symbol used to provide a custom inspect function for an object as an\r\n  // alternative to using 'inspect'\r\n  customInspectSymbol: SymbolFor('nodejs.util.inspect.custom'),\r\n\r\n  // Used by the buffer module to capture an internal reference to the\r\n  // default isEncoding implementation, just in case userland overrides it.\r\n  kIsEncodingSymbol: Symbol('kIsEncodingSymbol'),\r\n  kVmBreakFirstLineSymbol: Symbol('kVmBreakFirstLineSymbol'),\r\n\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n  setOwnProperty,\r\n  pendingDeprecate,\r\n  WeakReference,\r\n};\r\n"
  },
  "14": {
    "metadata": {
      "scriptId": "14",
      "url": "node:internal/options",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 69,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "80cbc13728362c61dfb57f2e9629e6530a808c76175afb90b8cc12182df091fa",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1765,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/options"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  getCLIOptionsValues,\r\n  getCLIOptionsInfo,\r\n  getEmbedderOptions: getEmbedderOptionsFromBinding,\r\n} = internalBinding('options');\r\n\r\nlet warnOnAllowUnauthorized = true;\r\n\r\nlet optionsDict;\r\nlet cliInfo;\r\nlet embedderOptions;\r\n\r\n// getCLIOptionsValues() would serialize the option values from C++ land.\r\n// It would error if the values are queried before bootstrap is\r\n// complete so that we don't accidentally include runtime-dependent\r\n// states into a runtime-independent snapshot.\r\nfunction getCLIOptionsFromBinding() {\r\n  if (!optionsDict) {\r\n    optionsDict = getCLIOptionsValues();\r\n  }\r\n  return optionsDict;\r\n}\r\n\r\nfunction getCLIOptionsInfoFromBinding() {\r\n  if (!cliInfo) {\r\n    cliInfo = getCLIOptionsInfo();\r\n  }\r\n  return cliInfo;\r\n}\r\n\r\nfunction getEmbedderOptions() {\r\n  if (!embedderOptions) {\r\n    embedderOptions = getEmbedderOptionsFromBinding();\r\n  }\r\n  return embedderOptions;\r\n}\r\n\r\nfunction refreshOptions() {\r\n  optionsDict = undefined;\r\n}\r\n\r\nfunction getOptionValue(optionName) {\r\n  const optionsDict = getCLIOptionsFromBinding();\r\n  return optionsDict[optionName];\r\n}\r\n\r\nfunction getAllowUnauthorized() {\r\n  const allowUnauthorized = process.env.NODE_TLS_REJECT_UNAUTHORIZED === '0';\r\n\r\n  if (allowUnauthorized && warnOnAllowUnauthorized) {\r\n    warnOnAllowUnauthorized = false;\r\n    process.emitWarning(\r\n      'Setting the NODE_TLS_REJECT_UNAUTHORIZED ' +\r\n      'environment variable to \\'0\\' makes TLS connections ' +\r\n      'and HTTPS requests insecure by disabling ' +\r\n      'certificate verification.');\r\n  }\r\n  return allowUnauthorized;\r\n}\r\n\r\nmodule.exports = {\r\n  getCLIOptionsInfo: getCLIOptionsInfoFromBinding,\r\n  getOptionValue,\r\n  getAllowUnauthorized,\r\n  getEmbedderOptions,\r\n  refreshOptions,\r\n};\r\n"
  },
  "15": {
    "metadata": {
      "scriptId": "15",
      "url": "node:internal/util/types",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 110,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "fbda408393f56a143c747832fa2c23406374d1c2c54a0a5ecc3ba2be1035a340",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2579,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/util/types"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayBufferIsView,\r\n  ObjectDefineProperties,\r\n  TypedArrayPrototypeGetSymbolToStringTag,\r\n} = primordials;\r\n\r\nfunction isTypedArray(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) !== undefined;\r\n}\r\n\r\nfunction isUint8Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint8Array';\r\n}\r\n\r\nfunction isUint8ClampedArray(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint8ClampedArray';\r\n}\r\n\r\nfunction isUint16Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint16Array';\r\n}\r\n\r\nfunction isUint32Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint32Array';\r\n}\r\n\r\nfunction isInt8Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int8Array';\r\n}\r\n\r\nfunction isInt16Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int16Array';\r\n}\r\n\r\nfunction isInt32Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int32Array';\r\n}\r\n\r\nfunction isFloat32Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Float32Array';\r\n}\r\n\r\nfunction isFloat64Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Float64Array';\r\n}\r\n\r\nfunction isBigInt64Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'BigInt64Array';\r\n}\r\n\r\nfunction isBigUint64Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'BigUint64Array';\r\n}\r\n\r\nmodule.exports = {\r\n  ...internalBinding('types'),\r\n  isArrayBufferView: ArrayBufferIsView,\r\n  isTypedArray,\r\n  isUint8Array,\r\n  isUint8ClampedArray,\r\n  isUint16Array,\r\n  isUint32Array,\r\n  isInt8Array,\r\n  isInt16Array,\r\n  isInt32Array,\r\n  isFloat32Array,\r\n  isFloat64Array,\r\n  isBigInt64Array,\r\n  isBigUint64Array,\r\n};\r\n\r\nlet isCryptoKey;\r\nlet isKeyObject;\r\n\r\nObjectDefineProperties(module.exports, {\r\n  isKeyObject: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    value(obj) {\r\n      if (!process.versions.openssl) {\r\n        return false;\r\n      }\r\n\r\n      if (!isKeyObject) {\r\n        ({ isKeyObject } = require('internal/crypto/keys'));\r\n      }\r\n\r\n      return isKeyObject(obj);\r\n    },\r\n  },\r\n  isCryptoKey: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    value(obj) {\r\n      if (!process.versions.openssl) {\r\n        return false;\r\n      }\r\n\r\n      if (!isCryptoKey) {\r\n        ({ isCryptoKey } = require('internal/crypto/keys'));\r\n      }\r\n\r\n      return isCryptoKey(obj);\r\n    },\r\n  },\r\n});\r\n"
  },
  "16": {
    "metadata": {
      "scriptId": "16",
      "url": "node:internal/linkedlist",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 55,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "7723d7ccf96478c3d83f80fb31c85220ee88cd133574dd9f7e89119e506a3968",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1183,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/linkedlist"
    },
    "source": "'use strict';\r\n\r\nfunction init(list) {\r\n  list._idleNext = list;\r\n  list._idlePrev = list;\r\n  return list;\r\n}\r\n\r\n// Show the most idle item.\r\nfunction peek(list) {\r\n  if (list._idlePrev === list) return null;\r\n  return list._idlePrev;\r\n}\r\n\r\n// Remove an item from its list.\r\nfunction remove(item) {\r\n  if (item._idleNext) {\r\n    item._idleNext._idlePrev = item._idlePrev;\r\n  }\r\n\r\n  if (item._idlePrev) {\r\n    item._idlePrev._idleNext = item._idleNext;\r\n  }\r\n\r\n  item._idleNext = null;\r\n  item._idlePrev = null;\r\n}\r\n\r\n// Remove an item from its list and place at the end.\r\nfunction append(list, item) {\r\n  if (item._idleNext || item._idlePrev) {\r\n    remove(item);\r\n  }\r\n\r\n  // Items are linked  with _idleNext -> (older) and _idlePrev -> (newer).\r\n  // Note: This linkage (next being older) may seem counter-intuitive at first.\r\n  item._idleNext = list._idleNext;\r\n  item._idlePrev = list;\r\n\r\n  // The list _idleNext points to tail (newest) and _idlePrev to head (oldest).\r\n  list._idleNext._idlePrev = item;\r\n  list._idleNext = item;\r\n}\r\n\r\nfunction isEmpty(list) {\r\n  return list._idleNext === list;\r\n}\r\n\r\nmodule.exports = {\r\n  init,\r\n  peek,\r\n  remove,\r\n  append,\r\n  isEmpty,\r\n};\r\n"
  },
  "17": {
    "metadata": {
      "scriptId": "17",
      "url": "node:internal/priority_queue",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 113,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "da7f11d14fccbaa1863685cae72f4388784ab23eb0549e112c3e7510407c78b3",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2743,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/priority_queue"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n} = primordials;\r\n\r\n// The PriorityQueue is a basic implementation of a binary heap that accepts\r\n// a custom sorting function via its constructor. This function is passed\r\n// the two nodes to compare, similar to the native Array#sort. Crucially\r\n// this enables priority queues that are based on a comparison of more than\r\n// just a single criteria.\r\n\r\nmodule.exports = class PriorityQueue {\r\n  #compare = (a, b) => a - b;\r\n  #heap = new Array(64);\r\n  #setPosition;\r\n  #size = 0;\r\n\r\n  constructor(comparator, setPosition) {\r\n    if (comparator !== undefined)\r\n      this.#compare = comparator;\r\n    if (setPosition !== undefined)\r\n      this.#setPosition = setPosition;\r\n  }\r\n\r\n  insert(value) {\r\n    const heap = this.#heap;\r\n    const pos = ++this.#size;\r\n    heap[pos] = value;\r\n\r\n    if (heap.length === pos)\r\n      heap.length *= 2;\r\n\r\n    this.percolateUp(pos);\r\n  }\r\n\r\n  peek() {\r\n    return this.#heap[1];\r\n  }\r\n\r\n  peekBottom() {\r\n    return this.#heap[this.#size];\r\n  }\r\n\r\n  percolateDown(pos) {\r\n    const compare = this.#compare;\r\n    const setPosition = this.#setPosition;\r\n    const heap = this.#heap;\r\n    const size = this.#size;\r\n    const item = heap[pos];\r\n\r\n    while (pos * 2 <= size) {\r\n      let childIndex = pos * 2 + 1;\r\n      if (childIndex > size || compare(heap[pos * 2], heap[childIndex]) < 0)\r\n        childIndex = pos * 2;\r\n      const child = heap[childIndex];\r\n      if (compare(item, child) <= 0)\r\n        break;\r\n      if (setPosition !== undefined)\r\n        setPosition(child, pos);\r\n      heap[pos] = child;\r\n      pos = childIndex;\r\n    }\r\n    heap[pos] = item;\r\n    if (setPosition !== undefined)\r\n      setPosition(item, pos);\r\n  }\r\n\r\n  percolateUp(pos) {\r\n    const heap = this.#heap;\r\n    const compare = this.#compare;\r\n    const setPosition = this.#setPosition;\r\n    const item = heap[pos];\r\n\r\n    while (pos > 1) {\r\n      const parent = heap[pos / 2 | 0];\r\n      if (compare(parent, item) <= 0)\r\n        break;\r\n      heap[pos] = parent;\r\n      if (setPosition !== undefined)\r\n        setPosition(parent, pos);\r\n      pos = pos / 2 | 0;\r\n    }\r\n    heap[pos] = item;\r\n    if (setPosition !== undefined)\r\n      setPosition(item, pos);\r\n  }\r\n\r\n  removeAt(pos) {\r\n    const heap = this.#heap;\r\n    const size = --this.#size;\r\n    heap[pos] = heap[size + 1];\r\n    heap[size + 1] = undefined;\r\n\r\n    if (size > 0 && pos <= size) {\r\n      if (pos > 1 && this.#compare(heap[pos / 2 | 0], heap[pos]) > 0)\r\n        this.percolateUp(pos);\r\n      else\r\n        this.percolateDown(pos);\r\n    }\r\n  }\r\n\r\n  shift() {\r\n    const heap = this.#heap;\r\n    const value = heap[1];\r\n    if (value === undefined)\r\n      return;\r\n\r\n    this.removeAt(1);\r\n\r\n    return value;\r\n  }\r\n};\r\n"
  },
  "18": {
    "metadata": {
      "scriptId": "18",
      "url": "node:internal/util/inspect",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 2432,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "dc67c4a9d2a269ec1bc2a9e6186222f470f6892667182a8a25f67c91f7e80174",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 84159,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/util/inspect"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n  ArrayIsArray,\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePop,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypePushApply,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSort,\r\n  ArrayPrototypeSplice,\r\n  ArrayPrototypeUnshift,\r\n  BigIntPrototypeValueOf,\r\n  BooleanPrototypeValueOf,\r\n  DatePrototypeGetTime,\r\n  DatePrototypeToISOString,\r\n  DatePrototypeToString,\r\n  ErrorPrototypeToString,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeCall,\r\n  FunctionPrototypeToString,\r\n  JSONStringify,\r\n  MapPrototypeEntries,\r\n  MapPrototypeGetSize,\r\n  MathFloor,\r\n  MathMax,\r\n  MathMin,\r\n  MathRound,\r\n  MathSqrt,\r\n  MathTrunc,\r\n  Number,\r\n  NumberIsFinite,\r\n  NumberIsNaN,\r\n  NumberParseFloat,\r\n  NumberParseInt,\r\n  NumberPrototypeToString,\r\n  NumberPrototypeValueOf,\r\n  Object,\r\n  ObjectAssign,\r\n  ObjectDefineProperty,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ObjectGetOwnPropertyNames,\r\n  ObjectGetOwnPropertySymbols,\r\n  ObjectGetPrototypeOf,\r\n  ObjectIs,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  ObjectPrototypePropertyIsEnumerable,\r\n  ObjectSeal,\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n  ReflectOwnKeys,\r\n  RegExp,\r\n  RegExpPrototypeExec,\r\n  RegExpPrototypeSymbolReplace,\r\n  RegExpPrototypeSymbolSplit,\r\n  RegExpPrototypeToString,\r\n  SafeMap,\r\n  SafeSet,\r\n  SafeStringIterator,\r\n  SetPrototypeGetSize,\r\n  SetPrototypeValues,\r\n  String,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeCodePointAt,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeLastIndexOf,\r\n  StringPrototypeNormalize,\r\n  StringPrototypePadEnd,\r\n  StringPrototypePadStart,\r\n  StringPrototypeRepeat,\r\n  StringPrototypeReplaceAll,\r\n  StringPrototypeSlice,\r\n  StringPrototypeSplit,\r\n  StringPrototypeStartsWith,\r\n  StringPrototypeToLowerCase,\r\n  StringPrototypeTrim,\r\n  StringPrototypeValueOf,\r\n  SymbolIterator,\r\n  SymbolPrototypeToString,\r\n  SymbolPrototypeValueOf,\r\n  SymbolToPrimitive,\r\n  SymbolToStringTag,\r\n  TypedArrayPrototypeGetLength,\r\n  TypedArrayPrototypeGetSymbolToStringTag,\r\n  Uint8Array,\r\n  globalThis,\r\n  uncurryThis,\r\n} = primordials;\r\n\r\nconst {\r\n  constants: {\r\n    ALL_PROPERTIES,\r\n    ONLY_ENUMERABLE,\r\n    kPending,\r\n    kRejected,\r\n  },\r\n  getOwnNonIndexProperties,\r\n  getPromiseDetails,\r\n  getProxyDetails,\r\n  previewEntries,\r\n  getConstructorName: internalGetConstructorName,\r\n  getExternalValue,\r\n} = internalBinding('util');\r\n\r\nconst {\r\n  customInspectSymbol,\r\n  isError,\r\n  join,\r\n  removeColors,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  isStackOverflowError,\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  isAsyncFunction,\r\n  isGeneratorFunction,\r\n  isAnyArrayBuffer,\r\n  isArrayBuffer,\r\n  isArgumentsObject,\r\n  isBoxedPrimitive,\r\n  isDataView,\r\n  isExternal,\r\n  isMap,\r\n  isMapIterator,\r\n  isModuleNamespaceObject,\r\n  isNativeError,\r\n  isPromise,\r\n  isSet,\r\n  isSetIterator,\r\n  isWeakMap,\r\n  isWeakSet,\r\n  isRegExp,\r\n  isDate,\r\n  isTypedArray,\r\n  isStringObject,\r\n  isNumberObject,\r\n  isBooleanObject,\r\n  isBigIntObject,\r\n} = require('internal/util/types');\r\n\r\nconst assert = require('internal/assert');\r\n\r\nconst { BuiltinModule } = require('internal/bootstrap/realm');\r\nconst {\r\n  validateObject,\r\n  validateString,\r\n  kValidateObjectAllowArray,\r\n} = require('internal/validators');\r\n\r\nlet hexSlice;\r\nlet internalUrl;\r\n\r\nfunction pathToFileUrlHref(filepath) {\r\n  internalUrl ??= require('internal/url');\r\n  return internalUrl.pathToFileURL(filepath).href;\r\n}\r\n\r\nconst builtInObjects = new SafeSet(\r\n  ArrayPrototypeFilter(\r\n    ObjectGetOwnPropertyNames(globalThis),\r\n    (e) => RegExpPrototypeExec(/^[A-Z][a-zA-Z0-9]+$/, e) !== null,\r\n  ),\r\n);\r\n\r\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot\r\nconst isUndetectableObject = (v) => typeof v === 'undefined' && v !== undefined;\r\n\r\n// These options must stay in sync with `getUserOptions`. So if any option will\r\n// be added or removed, `getUserOptions` must also be updated accordingly.\r\nconst inspectDefaultOptions = ObjectSeal({\r\n  showHidden: false,\r\n  depth: 2,\r\n  colors: false,\r\n  customInspect: true,\r\n  showProxy: false,\r\n  maxArrayLength: 100,\r\n  maxStringLength: 10000,\r\n  breakLength: 80,\r\n  compact: 3,\r\n  sorted: false,\r\n  getters: false,\r\n  numericSeparator: false,\r\n});\r\n\r\nconst kObjectType = 0;\r\nconst kArrayType = 1;\r\nconst kArrayExtrasType = 2;\r\n\r\n/* eslint-disable no-control-regex */\r\nconst strEscapeSequencesRegExp = /[\\x00-\\x1f\\x27\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]/;\r\nconst strEscapeSequencesReplacer = /[\\x00-\\x1f\\x27\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]/g;\r\nconst strEscapeSequencesRegExpSingle = /[\\x00-\\x1f\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]/;\r\nconst strEscapeSequencesReplacerSingle = /[\\x00-\\x1f\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]/g;\r\n/* eslint-enable no-control-regex */\r\n\r\nconst keyStrRegExp = /^[a-zA-Z_][a-zA-Z_0-9]*$/;\r\nconst numberRegExp = /^(0|[1-9][0-9]*)$/;\r\n\r\nconst coreModuleRegExp = /^ {4}at (?:[^/\\\\(]+ \\(|)node:(.+):\\d+:\\d+\\)?$/;\r\nconst nodeModulesRegExp = /[/\\\\]node_modules[/\\\\](.+?)(?=[/\\\\])/g;\r\n\r\nconst classRegExp = /^(\\s+[^(]*?)\\s*{/;\r\n// eslint-disable-next-line node-core/no-unescaped-regexp-dot\r\nconst stripCommentsRegExp = /(\\/\\/.*?\\n)|(\\/\\*(.|\\n)*?\\*\\/)/g;\r\n\r\nconst kMinLineLength = 16;\r\n\r\n// Constants to map the iterator state.\r\nconst kWeak = 0;\r\nconst kIterator = 1;\r\nconst kMapEntries = 2;\r\n\r\n// Escaped control characters (plus the single quote and the backslash). Use\r\n// empty strings to fill up unused entries.\r\nconst meta = [\r\n  '\\\\x00', '\\\\x01', '\\\\x02', '\\\\x03', '\\\\x04', '\\\\x05', '\\\\x06', '\\\\x07', // x07\r\n  '\\\\b', '\\\\t', '\\\\n', '\\\\x0B', '\\\\f', '\\\\r', '\\\\x0E', '\\\\x0F',           // x0F\r\n  '\\\\x10', '\\\\x11', '\\\\x12', '\\\\x13', '\\\\x14', '\\\\x15', '\\\\x16', '\\\\x17', // x17\r\n  '\\\\x18', '\\\\x19', '\\\\x1A', '\\\\x1B', '\\\\x1C', '\\\\x1D', '\\\\x1E', '\\\\x1F', // x1F\r\n  '', '', '', '', '', '', '', \"\\\\'\", '', '', '', '', '', '', '', '',      // x2F\r\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',         // x3F\r\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',         // x4F\r\n  '', '', '', '', '', '', '', '', '', '', '', '', '\\\\\\\\', '', '', '',     // x5F\r\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',         // x6F\r\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '\\\\x7F',    // x7F\r\n  '\\\\x80', '\\\\x81', '\\\\x82', '\\\\x83', '\\\\x84', '\\\\x85', '\\\\x86', '\\\\x87', // x87\r\n  '\\\\x88', '\\\\x89', '\\\\x8A', '\\\\x8B', '\\\\x8C', '\\\\x8D', '\\\\x8E', '\\\\x8F', // x8F\r\n  '\\\\x90', '\\\\x91', '\\\\x92', '\\\\x93', '\\\\x94', '\\\\x95', '\\\\x96', '\\\\x97', // x97\r\n  '\\\\x98', '\\\\x99', '\\\\x9A', '\\\\x9B', '\\\\x9C', '\\\\x9D', '\\\\x9E', '\\\\x9F', // x9F\r\n];\r\n\r\n// Regex used for ansi escape code splitting\r\n// Adopted from https://github.com/chalk/ansi-regex/blob/HEAD/index.js\r\n// License: MIT, authors: @sindresorhus, Qix-, arjunmehta and LitoMore\r\n// Matches all ansi escape code sequences in a string\r\nconst ansiPattern = '[\\\\u001B\\\\u009B][[\\\\]()#;?]*' +\r\n  '(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*' +\r\n  '|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)' +\r\n  '|(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))';\r\nconst ansi = new RegExp(ansiPattern, 'g');\r\n\r\nlet getStringWidth;\r\n\r\nfunction getUserOptions(ctx, isCrossContext) {\r\n  const ret = {\r\n    stylize: ctx.stylize,\r\n    showHidden: ctx.showHidden,\r\n    depth: ctx.depth,\r\n    colors: ctx.colors,\r\n    customInspect: ctx.customInspect,\r\n    showProxy: ctx.showProxy,\r\n    maxArrayLength: ctx.maxArrayLength,\r\n    maxStringLength: ctx.maxStringLength,\r\n    breakLength: ctx.breakLength,\r\n    compact: ctx.compact,\r\n    sorted: ctx.sorted,\r\n    getters: ctx.getters,\r\n    numericSeparator: ctx.numericSeparator,\r\n    ...ctx.userOptions,\r\n  };\r\n\r\n  // Typically, the target value will be an instance of `Object`. If that is\r\n  // *not* the case, the object may come from another vm.Context, and we want\r\n  // to avoid passing it objects from this Context in that case, so we remove\r\n  // the prototype from the returned object itself + the `stylize()` function,\r\n  // and remove all other non-primitives, including non-primitive user options.\r\n  if (isCrossContext) {\r\n    ObjectSetPrototypeOf(ret, null);\r\n    for (const key of ObjectKeys(ret)) {\r\n      if ((typeof ret[key] === 'object' || typeof ret[key] === 'function') &&\r\n          ret[key] !== null) {\r\n        delete ret[key];\r\n      }\r\n    }\r\n    ret.stylize = ObjectSetPrototypeOf((value, flavour) => {\r\n      let stylized;\r\n      try {\r\n        stylized = `${ctx.stylize(value, flavour)}`;\r\n      } catch {\r\n        // Continue regardless of error.\r\n      }\r\n\r\n      if (typeof stylized !== 'string') return value;\r\n      // `stylized` is a string as it should be, which is safe to pass along.\r\n      return stylized;\r\n    }, null);\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Echos the value of any input. Tries to print the value out\r\n * in the best way possible given the different types.\r\n * @param {any} value The value to print out.\r\n * @param {object} opts Optional options object that alters the output.\r\n */\r\n/* Legacy: value, showHidden, depth, colors */\r\nfunction inspect(value, opts) {\r\n  // Default options\r\n  const ctx = {\r\n    budget: {},\r\n    indentationLvl: 0,\r\n    seen: [],\r\n    currentDepth: 0,\r\n    stylize: stylizeNoColor,\r\n    showHidden: inspectDefaultOptions.showHidden,\r\n    depth: inspectDefaultOptions.depth,\r\n    colors: inspectDefaultOptions.colors,\r\n    customInspect: inspectDefaultOptions.customInspect,\r\n    showProxy: inspectDefaultOptions.showProxy,\r\n    maxArrayLength: inspectDefaultOptions.maxArrayLength,\r\n    maxStringLength: inspectDefaultOptions.maxStringLength,\r\n    breakLength: inspectDefaultOptions.breakLength,\r\n    compact: inspectDefaultOptions.compact,\r\n    sorted: inspectDefaultOptions.sorted,\r\n    getters: inspectDefaultOptions.getters,\r\n    numericSeparator: inspectDefaultOptions.numericSeparator,\r\n  };\r\n  if (arguments.length > 1) {\r\n    // Legacy...\r\n    if (arguments.length > 2) {\r\n      if (arguments[2] !== undefined) {\r\n        ctx.depth = arguments[2];\r\n      }\r\n      if (arguments.length > 3 && arguments[3] !== undefined) {\r\n        ctx.colors = arguments[3];\r\n      }\r\n    }\r\n    // Set user-specified options\r\n    if (typeof opts === 'boolean') {\r\n      ctx.showHidden = opts;\r\n    } else if (opts) {\r\n      const optKeys = ObjectKeys(opts);\r\n      for (let i = 0; i < optKeys.length; ++i) {\r\n        const key = optKeys[i];\r\n        // TODO(BridgeAR): Find a solution what to do about stylize. Either make\r\n        // this function public or add a new API with a similar or better\r\n        // functionality.\r\n        if (\r\n          ObjectPrototypeHasOwnProperty(inspectDefaultOptions, key) ||\r\n          key === 'stylize') {\r\n          ctx[key] = opts[key];\r\n        } else if (ctx.userOptions === undefined) {\r\n          // This is required to pass through the actual user input.\r\n          ctx.userOptions = opts;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\r\n  if (ctx.maxArrayLength === null) ctx.maxArrayLength = Infinity;\r\n  if (ctx.maxStringLength === null) ctx.maxStringLength = Infinity;\r\n  return formatValue(ctx, value, 0);\r\n}\r\ninspect.custom = customInspectSymbol;\r\n\r\nObjectDefineProperty(inspect, 'defaultOptions', {\r\n  __proto__: null,\r\n  get() {\r\n    return inspectDefaultOptions;\r\n  },\r\n  set(options) {\r\n    validateObject(options, 'options');\r\n    return ObjectAssign(inspectDefaultOptions, options);\r\n  },\r\n});\r\n\r\n// Set Graphics Rendition https://en.wikipedia.org/wiki/ANSI_escape_code#graphics\r\n// Each color consists of an array with the color code as first entry and the\r\n// reset code as second entry.\r\nconst defaultFG = 39;\r\nconst defaultBG = 49;\r\ninspect.colors = {\r\n  __proto__: null,\r\n  reset: [0, 0],\r\n  bold: [1, 22],\r\n  dim: [2, 22], // Alias: faint\r\n  italic: [3, 23],\r\n  underline: [4, 24],\r\n  blink: [5, 25],\r\n  // Swap foreground and background colors\r\n  inverse: [7, 27], // Alias: swapcolors, swapColors\r\n  hidden: [8, 28], // Alias: conceal\r\n  strikethrough: [9, 29], // Alias: strikeThrough, crossedout, crossedOut\r\n  doubleunderline: [21, 24], // Alias: doubleUnderline\r\n  black: [30, defaultFG],\r\n  red: [31, defaultFG],\r\n  green: [32, defaultFG],\r\n  yellow: [33, defaultFG],\r\n  blue: [34, defaultFG],\r\n  magenta: [35, defaultFG],\r\n  cyan: [36, defaultFG],\r\n  white: [37, defaultFG],\r\n  bgBlack: [40, defaultBG],\r\n  bgRed: [41, defaultBG],\r\n  bgGreen: [42, defaultBG],\r\n  bgYellow: [43, defaultBG],\r\n  bgBlue: [44, defaultBG],\r\n  bgMagenta: [45, defaultBG],\r\n  bgCyan: [46, defaultBG],\r\n  bgWhite: [47, defaultBG],\r\n  framed: [51, 54],\r\n  overlined: [53, 55],\r\n  gray: [90, defaultFG], // Alias: grey, blackBright\r\n  redBright: [91, defaultFG],\r\n  greenBright: [92, defaultFG],\r\n  yellowBright: [93, defaultFG],\r\n  blueBright: [94, defaultFG],\r\n  magentaBright: [95, defaultFG],\r\n  cyanBright: [96, defaultFG],\r\n  whiteBright: [97, defaultFG],\r\n  bgGray: [100, defaultBG], // Alias: bgGrey, bgBlackBright\r\n  bgRedBright: [101, defaultBG],\r\n  bgGreenBright: [102, defaultBG],\r\n  bgYellowBright: [103, defaultBG],\r\n  bgBlueBright: [104, defaultBG],\r\n  bgMagentaBright: [105, defaultBG],\r\n  bgCyanBright: [106, defaultBG],\r\n  bgWhiteBright: [107, defaultBG],\r\n};\r\n\r\nfunction defineColorAlias(target, alias) {\r\n  ObjectDefineProperty(inspect.colors, alias, {\r\n    __proto__: null,\r\n    get() {\r\n      return this[target];\r\n    },\r\n    set(value) {\r\n      this[target] = value;\r\n    },\r\n    configurable: true,\r\n    enumerable: false,\r\n  });\r\n}\r\n\r\ndefineColorAlias('gray', 'grey');\r\ndefineColorAlias('gray', 'blackBright');\r\ndefineColorAlias('bgGray', 'bgGrey');\r\ndefineColorAlias('bgGray', 'bgBlackBright');\r\ndefineColorAlias('dim', 'faint');\r\ndefineColorAlias('strikethrough', 'crossedout');\r\ndefineColorAlias('strikethrough', 'strikeThrough');\r\ndefineColorAlias('strikethrough', 'crossedOut');\r\ndefineColorAlias('hidden', 'conceal');\r\ndefineColorAlias('inverse', 'swapColors');\r\ndefineColorAlias('inverse', 'swapcolors');\r\ndefineColorAlias('doubleunderline', 'doubleUnderline');\r\n\r\n// TODO(BridgeAR): Add function style support for more complex styles.\r\n// Don't use 'blue' not visible on cmd.exe\r\ninspect.styles = ObjectAssign({ __proto__: null }, {\r\n  special: 'cyan',\r\n  number: 'yellow',\r\n  bigint: 'yellow',\r\n  boolean: 'yellow',\r\n  undefined: 'grey',\r\n  null: 'bold',\r\n  string: 'green',\r\n  symbol: 'green',\r\n  date: 'magenta',\r\n  // \"name\": intentionally not styling\r\n  // TODO(BridgeAR): Highlight regular expressions properly.\r\n  regexp: 'red',\r\n  module: 'underline',\r\n});\r\n\r\nfunction addQuotes(str, quotes) {\r\n  if (quotes === -1) {\r\n    return `\"${str}\"`;\r\n  }\r\n  if (quotes === -2) {\r\n    return `\\`${str}\\``;\r\n  }\r\n  return `'${str}'`;\r\n}\r\n\r\nfunction escapeFn(str) {\r\n  const charCode = StringPrototypeCharCodeAt(str);\r\n  return meta.length > charCode ? meta[charCode] : `\\\\u${NumberPrototypeToString(charCode, 16)}`;\r\n}\r\n\r\n// Escape control characters, single quotes and the backslash.\r\n// This is similar to JSON stringify escaping.\r\nfunction strEscape(str) {\r\n  let escapeTest = strEscapeSequencesRegExp;\r\n  let escapeReplace = strEscapeSequencesReplacer;\r\n  let singleQuote = 39;\r\n\r\n  // Check for double quotes. If not present, do not escape single quotes and\r\n  // instead wrap the text in double quotes. If double quotes exist, check for\r\n  // backticks. If they do not exist, use those as fallback instead of the\r\n  // double quotes.\r\n  if (StringPrototypeIncludes(str, \"'\")) {\r\n    // This invalidates the charCode and therefore can not be matched for\r\n    // anymore.\r\n    if (!StringPrototypeIncludes(str, '\"')) {\r\n      singleQuote = -1;\r\n    } else if (!StringPrototypeIncludes(str, '`') &&\r\n               !StringPrototypeIncludes(str, '${')) {\r\n      singleQuote = -2;\r\n    }\r\n    if (singleQuote !== 39) {\r\n      escapeTest = strEscapeSequencesRegExpSingle;\r\n      escapeReplace = strEscapeSequencesReplacerSingle;\r\n    }\r\n  }\r\n\r\n  // Some magic numbers that worked out fine while benchmarking with v8 6.0\r\n  if (str.length < 5000 && RegExpPrototypeExec(escapeTest, str) === null)\r\n    return addQuotes(str, singleQuote);\r\n  if (str.length > 100) {\r\n    str = RegExpPrototypeSymbolReplace(escapeReplace, str, escapeFn);\r\n    return addQuotes(str, singleQuote);\r\n  }\r\n\r\n  let result = '';\r\n  let last = 0;\r\n  for (let i = 0; i < str.length; i++) {\r\n    const point = StringPrototypeCharCodeAt(str, i);\r\n    if (point === singleQuote ||\r\n        point === 92 ||\r\n        point < 32 ||\r\n        (point > 126 && point < 160)) {\r\n      if (last === i) {\r\n        result += meta[point];\r\n      } else {\r\n        result += `${StringPrototypeSlice(str, last, i)}${meta[point]}`;\r\n      }\r\n      last = i + 1;\r\n    } else if (point >= 0xd800 && point <= 0xdfff) {\r\n      if (point <= 0xdbff && i + 1 < str.length) {\r\n        const point = StringPrototypeCharCodeAt(str, i + 1);\r\n        if (point >= 0xdc00 && point <= 0xdfff) {\r\n          i++;\r\n          continue;\r\n        }\r\n      }\r\n      result += `${StringPrototypeSlice(str, last, i)}\\\\u${NumberPrototypeToString(point, 16)}`;\r\n      last = i + 1;\r\n    }\r\n  }\r\n\r\n  if (last !== str.length) {\r\n    result += StringPrototypeSlice(str, last);\r\n  }\r\n  return addQuotes(result, singleQuote);\r\n}\r\n\r\nfunction stylizeWithColor(str, styleType) {\r\n  const style = inspect.styles[styleType];\r\n  if (style !== undefined) {\r\n    const color = inspect.colors[style];\r\n    if (color !== undefined)\r\n      return `\\u001b[${color[0]}m${str}\\u001b[${color[1]}m`;\r\n  }\r\n  return str;\r\n}\r\n\r\nfunction stylizeNoColor(str) {\r\n  return str;\r\n}\r\n\r\n// Return a new empty array to push in the results of the default formatter.\r\nfunction getEmptyFormatArray() {\r\n  return [];\r\n}\r\n\r\nfunction isInstanceof(object, proto) {\r\n  try {\r\n    return object instanceof proto;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction getConstructorName(obj, ctx, recurseTimes, protoProps) {\r\n  let firstProto;\r\n  const tmp = obj;\r\n  while (obj || isUndetectableObject(obj)) {\r\n    const descriptor = ObjectGetOwnPropertyDescriptor(obj, 'constructor');\r\n    if (descriptor !== undefined &&\r\n        typeof descriptor.value === 'function' &&\r\n        descriptor.value.name !== '' &&\r\n        isInstanceof(tmp, descriptor.value)) {\r\n      if (protoProps !== undefined &&\r\n         (firstProto !== obj ||\r\n         !builtInObjects.has(descriptor.value.name))) {\r\n        addPrototypeProperties(\r\n          ctx, tmp, firstProto || tmp, recurseTimes, protoProps);\r\n      }\r\n      return String(descriptor.value.name);\r\n    }\r\n\r\n    obj = ObjectGetPrototypeOf(obj);\r\n    if (firstProto === undefined) {\r\n      firstProto = obj;\r\n    }\r\n  }\r\n\r\n  if (firstProto === null) {\r\n    return null;\r\n  }\r\n\r\n  const res = internalGetConstructorName(tmp);\r\n\r\n  if (recurseTimes > ctx.depth && ctx.depth !== null) {\r\n    return `${res} <Complex prototype>`;\r\n  }\r\n\r\n  const protoConstr = getConstructorName(\r\n    firstProto, ctx, recurseTimes + 1, protoProps);\r\n\r\n  if (protoConstr === null) {\r\n    return `${res} <${inspect(firstProto, {\r\n      ...ctx,\r\n      customInspect: false,\r\n      depth: -1,\r\n    })}>`;\r\n  }\r\n\r\n  return `${res} <${protoConstr}>`;\r\n}\r\n\r\n// This function has the side effect of adding prototype properties to the\r\n// `output` argument (which is an array). This is intended to highlight user\r\n// defined prototype properties.\r\nfunction addPrototypeProperties(ctx, main, obj, recurseTimes, output) {\r\n  let depth = 0;\r\n  let keys;\r\n  let keySet;\r\n  do {\r\n    if (depth !== 0 || main === obj) {\r\n      obj = ObjectGetPrototypeOf(obj);\r\n      // Stop as soon as a null prototype is encountered.\r\n      if (obj === null) {\r\n        return;\r\n      }\r\n      // Stop as soon as a built-in object type is detected.\r\n      const descriptor = ObjectGetOwnPropertyDescriptor(obj, 'constructor');\r\n      if (descriptor !== undefined &&\r\n          typeof descriptor.value === 'function' &&\r\n          builtInObjects.has(descriptor.value.name)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (depth === 0) {\r\n      keySet = new SafeSet();\r\n    } else {\r\n      ArrayPrototypeForEach(keys, (key) => keySet.add(key));\r\n    }\r\n    // Get all own property names and symbols.\r\n    keys = ReflectOwnKeys(obj);\r\n    ArrayPrototypePush(ctx.seen, main);\r\n    for (const key of keys) {\r\n      // Ignore the `constructor` property and keys that exist on layers above.\r\n      if (key === 'constructor' ||\r\n          ObjectPrototypeHasOwnProperty(main, key) ||\r\n          (depth !== 0 && keySet.has(key))) {\r\n        continue;\r\n      }\r\n      const desc = ObjectGetOwnPropertyDescriptor(obj, key);\r\n      if (typeof desc.value === 'function') {\r\n        continue;\r\n      }\r\n      const value = formatProperty(\r\n        ctx, obj, recurseTimes, key, kObjectType, desc, main);\r\n      if (ctx.colors) {\r\n        // Faint!\r\n        ArrayPrototypePush(output, `\\u001b[2m${value}\\u001b[22m`);\r\n      } else {\r\n        ArrayPrototypePush(output, value);\r\n      }\r\n    }\r\n    ArrayPrototypePop(ctx.seen);\r\n  // Limit the inspection to up to three prototype layers. Using `recurseTimes`\r\n  // is not a good choice here, because it's as if the properties are declared\r\n  // on the current object from the users perspective.\r\n  } while (++depth !== 3);\r\n}\r\n\r\nfunction getPrefix(constructor, tag, fallback, size = '') {\r\n  if (constructor === null) {\r\n    if (tag !== '' && fallback !== tag) {\r\n      return `[${fallback}${size}: null prototype] [${tag}] `;\r\n    }\r\n    return `[${fallback}${size}: null prototype] `;\r\n  }\r\n\r\n  if (tag !== '' && constructor !== tag) {\r\n    return `${constructor}${size} [${tag}] `;\r\n  }\r\n  return `${constructor}${size} `;\r\n}\r\n\r\n// Look up the keys of the object.\r\nfunction getKeys(value, showHidden) {\r\n  let keys;\r\n  const symbols = ObjectGetOwnPropertySymbols(value);\r\n  if (showHidden) {\r\n    keys = ObjectGetOwnPropertyNames(value);\r\n    if (symbols.length !== 0)\r\n      ArrayPrototypePushApply(keys, symbols);\r\n  } else {\r\n    // This might throw if `value` is a Module Namespace Object from an\r\n    // unevaluated module, but we don't want to perform the actual type\r\n    // check because it's expensive.\r\n    // TODO(devsnek): track https://github.com/tc39/ecma262/issues/1209\r\n    // and modify this logic as needed.\r\n    try {\r\n      keys = ObjectKeys(value);\r\n    } catch (err) {\r\n      assert(isNativeError(err) && err.name === 'ReferenceError' &&\r\n             isModuleNamespaceObject(value));\r\n      keys = ObjectGetOwnPropertyNames(value);\r\n    }\r\n    if (symbols.length !== 0) {\r\n      const filter = (key) => ObjectPrototypePropertyIsEnumerable(value, key);\r\n      ArrayPrototypePushApply(keys, ArrayPrototypeFilter(symbols, filter));\r\n    }\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction getCtxStyle(value, constructor, tag) {\r\n  let fallback = '';\r\n  if (constructor === null) {\r\n    fallback = internalGetConstructorName(value);\r\n    if (fallback === tag) {\r\n      fallback = 'Object';\r\n    }\r\n  }\r\n  return getPrefix(constructor, tag, fallback);\r\n}\r\n\r\nfunction formatProxy(ctx, proxy, recurseTimes) {\r\n  if (recurseTimes > ctx.depth && ctx.depth !== null) {\r\n    return ctx.stylize('Proxy [Array]', 'special');\r\n  }\r\n  recurseTimes += 1;\r\n  ctx.indentationLvl += 2;\r\n  const res = [\r\n    formatValue(ctx, proxy[0], recurseTimes),\r\n    formatValue(ctx, proxy[1], recurseTimes),\r\n  ];\r\n  ctx.indentationLvl -= 2;\r\n  return reduceToSingleString(\r\n    ctx, res, '', ['Proxy [', ']'], kArrayExtrasType, recurseTimes);\r\n}\r\n\r\n// Note: using `formatValue` directly requires the indentation level to be\r\n// corrected by setting `ctx.indentationLvL += diff` and then to decrease the\r\n// value afterwards again.\r\nfunction formatValue(ctx, value, recurseTimes, typedArray) {\r\n  // Primitive types cannot have properties.\r\n  if (typeof value !== 'object' &&\r\n      typeof value !== 'function' &&\r\n      !isUndetectableObject(value)) {\r\n    return formatPrimitive(ctx.stylize, value, ctx);\r\n  }\r\n  if (value === null) {\r\n    return ctx.stylize('null', 'null');\r\n  }\r\n\r\n  // Memorize the context for custom inspection on proxies.\r\n  const context = value;\r\n  // Always check for proxies to prevent side effects and to prevent triggering\r\n  // any proxy handlers.\r\n  const proxy = getProxyDetails(value, !!ctx.showProxy);\r\n  if (proxy !== undefined) {\r\n    if (proxy === null || proxy[0] === null) {\r\n      return ctx.stylize('<Revoked Proxy>', 'special');\r\n    }\r\n    if (ctx.showProxy) {\r\n      return formatProxy(ctx, proxy, recurseTimes);\r\n    }\r\n    value = proxy;\r\n  }\r\n\r\n  // Provide a hook for user-specified inspect functions.\r\n  // Check that value is an object with an inspect function on it.\r\n  if (ctx.customInspect) {\r\n    const maybeCustom = value[customInspectSymbol];\r\n    if (typeof maybeCustom === 'function' &&\r\n        // Filter out the util module, its inspect function is special.\r\n        maybeCustom !== inspect &&\r\n        // Also filter out any prototype objects using the circular check.\r\n        !(value.constructor && value.constructor.prototype === value)) {\r\n      // This makes sure the recurseTimes are reported as before while using\r\n      // a counter internally.\r\n      const depth = ctx.depth === null ? null : ctx.depth - recurseTimes;\r\n      const isCrossContext =\r\n        proxy !== undefined || !(context instanceof Object);\r\n      const ret = FunctionPrototypeCall(\r\n        maybeCustom,\r\n        context,\r\n        depth,\r\n        getUserOptions(ctx, isCrossContext),\r\n        inspect,\r\n      );\r\n      // If the custom inspection method returned `this`, don't go into\r\n      // infinite recursion.\r\n      if (ret !== context) {\r\n        if (typeof ret !== 'string') {\r\n          return formatValue(ctx, ret, recurseTimes);\r\n        }\r\n        return StringPrototypeReplaceAll(ret, '\\n', `\\n${StringPrototypeRepeat(' ', ctx.indentationLvl)}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Using an array here is actually better for the average case than using\r\n  // a Set. `seen` will only check for the depth and will never grow too large.\r\n  if (ctx.seen.includes(value)) {\r\n    let index = 1;\r\n    if (ctx.circular === undefined) {\r\n      ctx.circular = new SafeMap();\r\n      ctx.circular.set(value, index);\r\n    } else {\r\n      index = ctx.circular.get(value);\r\n      if (index === undefined) {\r\n        index = ctx.circular.size + 1;\r\n        ctx.circular.set(value, index);\r\n      }\r\n    }\r\n    return ctx.stylize(`[Circular *${index}]`, 'special');\r\n  }\r\n\r\n  return formatRaw(ctx, value, recurseTimes, typedArray);\r\n}\r\n\r\nfunction formatRaw(ctx, value, recurseTimes, typedArray) {\r\n  let keys;\r\n  let protoProps;\r\n  if (ctx.showHidden && (recurseTimes <= ctx.depth || ctx.depth === null)) {\r\n    protoProps = [];\r\n  }\r\n\r\n  const constructor = getConstructorName(value, ctx, recurseTimes, protoProps);\r\n  // Reset the variable to check for this later on.\r\n  if (protoProps !== undefined && protoProps.length === 0) {\r\n    protoProps = undefined;\r\n  }\r\n\r\n  let tag = value[SymbolToStringTag];\r\n  // Only list the tag in case it's non-enumerable / not an own property.\r\n  // Otherwise we'd print this twice.\r\n  if (typeof tag !== 'string' ||\r\n      (tag !== '' &&\r\n      (ctx.showHidden ?\r\n        ObjectPrototypeHasOwnProperty :\r\n        ObjectPrototypePropertyIsEnumerable)(\r\n        value, SymbolToStringTag,\r\n      ))) {\r\n    tag = '';\r\n  }\r\n  let base = '';\r\n  let formatter = getEmptyFormatArray;\r\n  let braces;\r\n  let noIterator = true;\r\n  let i = 0;\r\n  const filter = ctx.showHidden ? ALL_PROPERTIES : ONLY_ENUMERABLE;\r\n\r\n  let extrasType = kObjectType;\r\n\r\n  // Iterators and the rest are split to reduce checks.\r\n  // We have to check all values in case the constructor is set to null.\r\n  // Otherwise it would not possible to identify all types properly.\r\n  if (SymbolIterator in value || constructor === null) {\r\n    noIterator = false;\r\n    if (ArrayIsArray(value)) {\r\n      // Only set the constructor for non ordinary (\"Array [...]\") arrays.\r\n      const prefix = (constructor !== 'Array' || tag !== '') ?\r\n        getPrefix(constructor, tag, 'Array', `(${value.length})`) :\r\n        '';\r\n      keys = getOwnNonIndexProperties(value, filter);\r\n      braces = [`${prefix}[`, ']'];\r\n      if (value.length === 0 && keys.length === 0 && protoProps === undefined)\r\n        return `${braces[0]}]`;\r\n      extrasType = kArrayExtrasType;\r\n      formatter = formatArray;\r\n    } else if (isSet(value)) {\r\n      const size = SetPrototypeGetSize(value);\r\n      const prefix = getPrefix(constructor, tag, 'Set', `(${size})`);\r\n      keys = getKeys(value, ctx.showHidden);\r\n      formatter = constructor !== null ?\r\n        FunctionPrototypeBind(formatSet, null, value) :\r\n        FunctionPrototypeBind(formatSet, null, SetPrototypeValues(value));\r\n      if (size === 0 && keys.length === 0 && protoProps === undefined)\r\n        return `${prefix}{}`;\r\n      braces = [`${prefix}{`, '}'];\r\n    } else if (isMap(value)) {\r\n      const size = MapPrototypeGetSize(value);\r\n      const prefix = getPrefix(constructor, tag, 'Map', `(${size})`);\r\n      keys = getKeys(value, ctx.showHidden);\r\n      formatter = constructor !== null ?\r\n        FunctionPrototypeBind(formatMap, null, value) :\r\n        FunctionPrototypeBind(formatMap, null, MapPrototypeEntries(value));\r\n      if (size === 0 && keys.length === 0 && protoProps === undefined)\r\n        return `${prefix}{}`;\r\n      braces = [`${prefix}{`, '}'];\r\n    } else if (isTypedArray(value)) {\r\n      keys = getOwnNonIndexProperties(value, filter);\r\n      let bound = value;\r\n      let fallback = '';\r\n      if (constructor === null) {\r\n        fallback = TypedArrayPrototypeGetSymbolToStringTag(value);\r\n        // Reconstruct the array information.\r\n        bound = new primordials[fallback](value);\r\n      }\r\n      const size = TypedArrayPrototypeGetLength(value);\r\n      const prefix = getPrefix(constructor, tag, fallback, `(${size})`);\r\n      braces = [`${prefix}[`, ']'];\r\n      if (value.length === 0 && keys.length === 0 && !ctx.showHidden)\r\n        return `${braces[0]}]`;\r\n      // Special handle the value. The original value is required below. The\r\n      // bound function is required to reconstruct missing information.\r\n      formatter = FunctionPrototypeBind(formatTypedArray, null, bound, size);\r\n      extrasType = kArrayExtrasType;\r\n    } else if (isMapIterator(value)) {\r\n      keys = getKeys(value, ctx.showHidden);\r\n      braces = getIteratorBraces('Map', tag);\r\n      // Add braces to the formatter parameters.\r\n      formatter = FunctionPrototypeBind(formatIterator, null, braces);\r\n    } else if (isSetIterator(value)) {\r\n      keys = getKeys(value, ctx.showHidden);\r\n      braces = getIteratorBraces('Set', tag);\r\n      // Add braces to the formatter parameters.\r\n      formatter = FunctionPrototypeBind(formatIterator, null, braces);\r\n    } else {\r\n      noIterator = true;\r\n    }\r\n  }\r\n  if (noIterator) {\r\n    keys = getKeys(value, ctx.showHidden);\r\n    braces = ['{', '}'];\r\n    if (constructor === 'Object') {\r\n      if (isArgumentsObject(value)) {\r\n        braces[0] = '[Arguments] {';\r\n      } else if (tag !== '') {\r\n        braces[0] = `${getPrefix(constructor, tag, 'Object')}{`;\r\n      }\r\n      if (keys.length === 0 && protoProps === undefined) {\r\n        return `${braces[0]}}`;\r\n      }\r\n    } else if (typeof value === 'function') {\r\n      base = getFunctionBase(value, constructor, tag);\r\n      if (keys.length === 0 && protoProps === undefined)\r\n        return ctx.stylize(base, 'special');\r\n    } else if (isRegExp(value)) {\r\n      // Make RegExps say that they are RegExps\r\n      base = RegExpPrototypeToString(\r\n        constructor !== null ? value : new RegExp(value),\r\n      );\r\n      const prefix = getPrefix(constructor, tag, 'RegExp');\r\n      if (prefix !== 'RegExp ')\r\n        base = `${prefix}${base}`;\r\n      if ((keys.length === 0 && protoProps === undefined) ||\r\n          (recurseTimes > ctx.depth && ctx.depth !== null)) {\r\n        return ctx.stylize(base, 'regexp');\r\n      }\r\n    } else if (isDate(value)) {\r\n      // Make dates with properties first say the date\r\n      base = NumberIsNaN(DatePrototypeGetTime(value)) ?\r\n        DatePrototypeToString(value) :\r\n        DatePrototypeToISOString(value);\r\n      const prefix = getPrefix(constructor, tag, 'Date');\r\n      if (prefix !== 'Date ')\r\n        base = `${prefix}${base}`;\r\n      if (keys.length === 0 && protoProps === undefined) {\r\n        return ctx.stylize(base, 'date');\r\n      }\r\n    } else if (isError(value)) {\r\n      base = formatError(value, constructor, tag, ctx, keys);\r\n      if (keys.length === 0 && protoProps === undefined)\r\n        return base;\r\n    } else if (isAnyArrayBuffer(value)) {\r\n      // Fast path for ArrayBuffer and SharedArrayBuffer.\r\n      // Can't do the same for DataView because it has a non-primitive\r\n      // .buffer property that we need to recurse for.\r\n      const arrayType = isArrayBuffer(value) ? 'ArrayBuffer' :\r\n        'SharedArrayBuffer';\r\n      const prefix = getPrefix(constructor, tag, arrayType);\r\n      if (typedArray === undefined) {\r\n        formatter = formatArrayBuffer;\r\n      } else if (keys.length === 0 && protoProps === undefined) {\r\n        return prefix +\r\n              `{ byteLength: ${formatNumber(ctx.stylize, value.byteLength, false)} }`;\r\n      }\r\n      braces[0] = `${prefix}{`;\r\n      ArrayPrototypeUnshift(keys, 'byteLength');\r\n    } else if (isDataView(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'DataView')}{`;\r\n      // .buffer goes last, it's not a primitive like the others.\r\n      ArrayPrototypeUnshift(keys, 'byteLength', 'byteOffset', 'buffer');\r\n    } else if (isPromise(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'Promise')}{`;\r\n      formatter = formatPromise;\r\n    } else if (isWeakSet(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'WeakSet')}{`;\r\n      formatter = ctx.showHidden ? formatWeakSet : formatWeakCollection;\r\n    } else if (isWeakMap(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'WeakMap')}{`;\r\n      formatter = ctx.showHidden ? formatWeakMap : formatWeakCollection;\r\n    } else if (isModuleNamespaceObject(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'Module')}{`;\r\n      // Special handle keys for namespace objects.\r\n      formatter = formatNamespaceObject.bind(null, keys);\r\n    } else if (isBoxedPrimitive(value)) {\r\n      base = getBoxedBase(value, ctx, keys, constructor, tag);\r\n      if (keys.length === 0 && protoProps === undefined) {\r\n        return base;\r\n      }\r\n    } else {\r\n      if (keys.length === 0 && protoProps === undefined) {\r\n        if (isExternal(value)) {\r\n          const address = getExternalValue(value).toString(16);\r\n          return ctx.stylize(`[External: ${address}]`, 'special');\r\n        }\r\n        return `${getCtxStyle(value, constructor, tag)}{}`;\r\n      }\r\n      braces[0] = `${getCtxStyle(value, constructor, tag)}{`;\r\n    }\r\n  }\r\n\r\n  if (recurseTimes > ctx.depth && ctx.depth !== null) {\r\n    let constructorName = StringPrototypeSlice(getCtxStyle(value, constructor, tag), 0, -1);\r\n    if (constructor !== null)\r\n      constructorName = `[${constructorName}]`;\r\n    return ctx.stylize(constructorName, 'special');\r\n  }\r\n  recurseTimes += 1;\r\n\r\n  ctx.seen.push(value);\r\n  ctx.currentDepth = recurseTimes;\r\n  let output;\r\n  const indentationLvl = ctx.indentationLvl;\r\n  try {\r\n    output = formatter(ctx, value, recurseTimes);\r\n    for (i = 0; i < keys.length; i++) {\r\n      ArrayPrototypePush(\r\n        output,\r\n        formatProperty(ctx, value, recurseTimes, keys[i], extrasType),\r\n      );\r\n    }\r\n    if (protoProps !== undefined) {\r\n      ArrayPrototypePushApply(output, protoProps);\r\n    }\r\n  } catch (err) {\r\n    const constructorName = StringPrototypeSlice(getCtxStyle(value, constructor, tag), 0, -1);\r\n    return handleMaxCallStackSize(ctx, err, constructorName, indentationLvl);\r\n  }\r\n  if (ctx.circular !== undefined) {\r\n    const index = ctx.circular.get(value);\r\n    if (index !== undefined) {\r\n      const reference = ctx.stylize(`<ref *${index}>`, 'special');\r\n      // Add reference always to the very beginning of the output.\r\n      if (ctx.compact !== true) {\r\n        base = base === '' ? reference : `${reference} ${base}`;\r\n      } else {\r\n        braces[0] = `${reference} ${braces[0]}`;\r\n      }\r\n    }\r\n  }\r\n  ctx.seen.pop();\r\n\r\n  if (ctx.sorted) {\r\n    const comparator = ctx.sorted === true ? undefined : ctx.sorted;\r\n    if (extrasType === kObjectType) {\r\n      ArrayPrototypeSort(output, comparator);\r\n    } else if (keys.length > 1) {\r\n      const sorted = ArrayPrototypeSort(ArrayPrototypeSlice(output, output.length - keys.length), comparator);\r\n      ArrayPrototypeUnshift(sorted, output, output.length - keys.length, keys.length);\r\n      ReflectApply(ArrayPrototypeSplice, null, sorted);\r\n    }\r\n  }\r\n\r\n  const res = reduceToSingleString(\r\n    ctx, output, base, braces, extrasType, recurseTimes, value);\r\n  const budget = ctx.budget[ctx.indentationLvl] || 0;\r\n  const newLength = budget + res.length;\r\n  ctx.budget[ctx.indentationLvl] = newLength;\r\n  // If any indentationLvl exceeds this limit, limit further inspecting to the\r\n  // minimum. Otherwise the recursive algorithm might continue inspecting the\r\n  // object even though the maximum string size (~2 ** 28 on 32 bit systems and\r\n  // ~2 ** 30 on 64 bit systems) exceeded. The actual output is not limited at\r\n  // exactly 2 ** 27 but a bit higher. This depends on the object shape.\r\n  // This limit also makes sure that huge objects don't block the event loop\r\n  // significantly.\r\n  if (newLength > 2 ** 27) {\r\n    ctx.depth = -1;\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction getIteratorBraces(type, tag) {\r\n  if (tag !== `${type} Iterator`) {\r\n    if (tag !== '')\r\n      tag += '] [';\r\n    tag += `${type} Iterator`;\r\n  }\r\n  return [`[${tag}] {`, '}'];\r\n}\r\n\r\nfunction getBoxedBase(value, ctx, keys, constructor, tag) {\r\n  let fn;\r\n  let type;\r\n  if (isNumberObject(value)) {\r\n    fn = NumberPrototypeValueOf;\r\n    type = 'Number';\r\n  } else if (isStringObject(value)) {\r\n    fn = StringPrototypeValueOf;\r\n    type = 'String';\r\n    // For boxed Strings, we have to remove the 0-n indexed entries,\r\n    // since they just noisy up the output and are redundant\r\n    // Make boxed primitive Strings look like such\r\n    keys.splice(0, value.length);\r\n  } else if (isBooleanObject(value)) {\r\n    fn = BooleanPrototypeValueOf;\r\n    type = 'Boolean';\r\n  } else if (isBigIntObject(value)) {\r\n    fn = BigIntPrototypeValueOf;\r\n    type = 'BigInt';\r\n  } else {\r\n    fn = SymbolPrototypeValueOf;\r\n    type = 'Symbol';\r\n  }\r\n  let base = `[${type}`;\r\n  if (type !== constructor) {\r\n    if (constructor === null) {\r\n      base += ' (null prototype)';\r\n    } else {\r\n      base += ` (${constructor})`;\r\n    }\r\n  }\r\n  base += `: ${formatPrimitive(stylizeNoColor, fn(value), ctx)}]`;\r\n  if (tag !== '' && tag !== constructor) {\r\n    base += ` [${tag}]`;\r\n  }\r\n  if (keys.length !== 0 || ctx.stylize === stylizeNoColor)\r\n    return base;\r\n  return ctx.stylize(base, StringPrototypeToLowerCase(type));\r\n}\r\n\r\nfunction getClassBase(value, constructor, tag) {\r\n  const hasName = ObjectPrototypeHasOwnProperty(value, 'name');\r\n  const name = (hasName && value.name) || '(anonymous)';\r\n  let base = `class ${name}`;\r\n  if (constructor !== 'Function' && constructor !== null) {\r\n    base += ` [${constructor}]`;\r\n  }\r\n  if (tag !== '' && constructor !== tag) {\r\n    base += ` [${tag}]`;\r\n  }\r\n  if (constructor !== null) {\r\n    const superName = ObjectGetPrototypeOf(value).name;\r\n    if (superName) {\r\n      base += ` extends ${superName}`;\r\n    }\r\n  } else {\r\n    base += ' extends [null prototype]';\r\n  }\r\n  return `[${base}]`;\r\n}\r\n\r\nfunction getFunctionBase(value, constructor, tag) {\r\n  const stringified = FunctionPrototypeToString(value);\r\n  if (StringPrototypeStartsWith(stringified, 'class') && StringPrototypeEndsWith(stringified, '}')) {\r\n    const slice = StringPrototypeSlice(stringified, 5, -1);\r\n    const bracketIndex = StringPrototypeIndexOf(slice, '{');\r\n    if (bracketIndex !== -1 &&\r\n        (!StringPrototypeIncludes(StringPrototypeSlice(slice, 0, bracketIndex), '(') ||\r\n        // Slow path to guarantee that it's indeed a class.\r\n        RegExpPrototypeExec(classRegExp, RegExpPrototypeSymbolReplace(stripCommentsRegExp, slice)) !== null)\r\n    ) {\r\n      return getClassBase(value, constructor, tag);\r\n    }\r\n  }\r\n  let type = 'Function';\r\n  if (isGeneratorFunction(value)) {\r\n    type = `Generator${type}`;\r\n  }\r\n  if (isAsyncFunction(value)) {\r\n    type = `Async${type}`;\r\n  }\r\n  let base = `[${type}`;\r\n  if (constructor === null) {\r\n    base += ' (null prototype)';\r\n  }\r\n  if (value.name === '') {\r\n    base += ' (anonymous)';\r\n  } else {\r\n    base += `: ${value.name}`;\r\n  }\r\n  base += ']';\r\n  if (constructor !== type && constructor !== null) {\r\n    base += ` ${constructor}`;\r\n  }\r\n  if (tag !== '' && constructor !== tag) {\r\n    base += ` [${tag}]`;\r\n  }\r\n  return base;\r\n}\r\n\r\nfunction identicalSequenceRange(a, b) {\r\n  for (let i = 0; i < a.length - 3; i++) {\r\n    // Find the first entry of b that matches the current entry of a.\r\n    const pos = ArrayPrototypeIndexOf(b, a[i]);\r\n    if (pos !== -1) {\r\n      const rest = b.length - pos;\r\n      if (rest > 3) {\r\n        let len = 1;\r\n        const maxLen = MathMin(a.length - i, rest);\r\n        // Count the number of consecutive entries.\r\n        while (maxLen > len && a[i + len] === b[pos + len]) {\r\n          len++;\r\n        }\r\n        if (len > 3) {\r\n          return { len, offset: i };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return { len: 0, offset: 0 };\r\n}\r\n\r\nfunction getStackString(error) {\r\n  return error.stack ? String(error.stack) : ErrorPrototypeToString(error);\r\n}\r\n\r\nfunction getStackFrames(ctx, err, stack) {\r\n  const frames = StringPrototypeSplit(stack, '\\n');\r\n\r\n  let cause;\r\n  try {\r\n    ({ cause } = err);\r\n  } catch {\r\n    // If 'cause' is a getter that throws, ignore it.\r\n  }\r\n\r\n  // Remove stack frames identical to frames in cause.\r\n  if (cause != null && isError(cause)) {\r\n    const causeStack = getStackString(cause);\r\n    const causeStackStart = StringPrototypeIndexOf(causeStack, '\\n    at');\r\n    if (causeStackStart !== -1) {\r\n      const causeFrames = StringPrototypeSplit(StringPrototypeSlice(causeStack, causeStackStart + 1), '\\n');\r\n      const { len, offset } = identicalSequenceRange(frames, causeFrames);\r\n      if (len > 0) {\r\n        const skipped = len - 2;\r\n        const msg = `    ... ${skipped} lines matching cause stack trace ...`;\r\n        frames.splice(offset + 1, skipped, ctx.stylize(msg, 'undefined'));\r\n      }\r\n    }\r\n  }\r\n  return frames;\r\n}\r\n\r\nfunction improveStack(stack, constructor, name, tag) {\r\n  // A stack trace may contain arbitrary data. Only manipulate the output\r\n  // for \"regular errors\" (errors that \"look normal\") for now.\r\n  let len = name.length;\r\n\r\n  if (constructor === null ||\r\n      (StringPrototypeEndsWith(name, 'Error') &&\r\n      StringPrototypeStartsWith(stack, name) &&\r\n      (stack.length === len || stack[len] === ':' || stack[len] === '\\n'))) {\r\n    let fallback = 'Error';\r\n    if (constructor === null) {\r\n      const start = RegExpPrototypeExec(/^([A-Z][a-z_ A-Z0-9[\\]()-]+)(?::|\\n {4}at)/, stack) ||\r\n      RegExpPrototypeExec(/^([a-z_A-Z0-9-]*Error)$/, stack);\r\n      fallback = (start && start[1]) || '';\r\n      len = fallback.length;\r\n      fallback = fallback || 'Error';\r\n    }\r\n    const prefix = StringPrototypeSlice(getPrefix(constructor, tag, fallback), 0, -1);\r\n    if (name !== prefix) {\r\n      if (StringPrototypeIncludes(prefix, name)) {\r\n        if (len === 0) {\r\n          stack = `${prefix}: ${stack}`;\r\n        } else {\r\n          stack = `${prefix}${StringPrototypeSlice(stack, len)}`;\r\n        }\r\n      } else {\r\n        stack = `${prefix} [${name}]${StringPrototypeSlice(stack, len)}`;\r\n      }\r\n    }\r\n  }\r\n  return stack;\r\n}\r\n\r\nfunction removeDuplicateErrorKeys(ctx, keys, err, stack) {\r\n  if (!ctx.showHidden && keys.length !== 0) {\r\n    for (const name of ['name', 'message', 'stack']) {\r\n      const index = ArrayPrototypeIndexOf(keys, name);\r\n      // Only hide the property in case it's part of the original stack\r\n      if (index !== -1 && StringPrototypeIncludes(stack, err[name])) {\r\n        ArrayPrototypeSplice(keys, index, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction markNodeModules(ctx, line) {\r\n  let tempLine = '';\r\n  let nodeModule;\r\n  let pos = 0;\r\n  while ((nodeModule = nodeModulesRegExp.exec(line)) !== null) {\r\n    // '/node_modules/'.length === 14\r\n    tempLine += StringPrototypeSlice(line, pos, nodeModule.index + 14);\r\n    tempLine += ctx.stylize(nodeModule[1], 'module');\r\n    pos = nodeModule.index + nodeModule[0].length;\r\n  }\r\n  if (pos !== 0) {\r\n    line = tempLine + StringPrototypeSlice(line, pos);\r\n  }\r\n  return line;\r\n}\r\n\r\nfunction markCwd(ctx, line, workingDirectory) {\r\n  let cwdStartPos = StringPrototypeIndexOf(line, workingDirectory);\r\n  let tempLine = '';\r\n  let cwdLength = workingDirectory.length;\r\n  if (cwdStartPos !== -1) {\r\n    if (StringPrototypeSlice(line, cwdStartPos - 7, cwdStartPos) === 'file://') {\r\n      cwdLength += 7;\r\n      cwdStartPos -= 7;\r\n    }\r\n    const start = line[cwdStartPos - 1] === '(' ? cwdStartPos - 1 : cwdStartPos;\r\n    const end = start !== cwdStartPos && StringPrototypeEndsWith(line, ')') ? -1 : line.length;\r\n    const workingDirectoryEndPos = cwdStartPos + cwdLength + 1;\r\n    const cwdSlice = StringPrototypeSlice(line, start, workingDirectoryEndPos);\r\n\r\n    tempLine += StringPrototypeSlice(line, 0, start);\r\n    tempLine += ctx.stylize(cwdSlice, 'undefined');\r\n    tempLine += StringPrototypeSlice(line, workingDirectoryEndPos, end);\r\n    if (end === -1) {\r\n      tempLine += ctx.stylize(')', 'undefined');\r\n    }\r\n  } else {\r\n    tempLine += line;\r\n  }\r\n  return tempLine;\r\n}\r\n\r\nfunction safeGetCWD() {\r\n  let workingDirectory;\r\n  try {\r\n    workingDirectory = process.cwd();\r\n  } catch {\r\n    return;\r\n  }\r\n  return workingDirectory;\r\n}\r\n\r\nfunction formatError(err, constructor, tag, ctx, keys) {\r\n  const name = err.name != null ? String(err.name) : 'Error';\r\n  let stack = getStackString(err);\r\n\r\n  removeDuplicateErrorKeys(ctx, keys, err, stack);\r\n\r\n  if ('cause' in err &&\r\n      (keys.length === 0 || !ArrayPrototypeIncludes(keys, 'cause'))) {\r\n    ArrayPrototypePush(keys, 'cause');\r\n  }\r\n\r\n  // Print errors aggregated into AggregateError\r\n  if (ArrayIsArray(err.errors) &&\r\n      (keys.length === 0 || !ArrayPrototypeIncludes(keys, 'errors'))) {\r\n    ArrayPrototypePush(keys, 'errors');\r\n  }\r\n\r\n  stack = improveStack(stack, constructor, name, tag);\r\n\r\n  // Ignore the error message if it's contained in the stack.\r\n  let pos = (err.message && StringPrototypeIndexOf(stack, err.message)) || -1;\r\n  if (pos !== -1)\r\n    pos += err.message.length;\r\n  // Wrap the error in brackets in case it has no stack trace.\r\n  const stackStart = StringPrototypeIndexOf(stack, '\\n    at', pos);\r\n  if (stackStart === -1) {\r\n    stack = `[${stack}]`;\r\n  } else {\r\n    let newStack = StringPrototypeSlice(stack, 0, stackStart);\r\n    const stackFramePart = StringPrototypeSlice(stack, stackStart + 1);\r\n    const lines = getStackFrames(ctx, err, stackFramePart);\r\n    if (ctx.colors) {\r\n      // Highlight userland code and node modules.\r\n      const workingDirectory = safeGetCWD();\r\n      let esmWorkingDirectory;\r\n      for (let line of lines) {\r\n        const core = RegExpPrototypeExec(coreModuleRegExp, line);\r\n        if (core !== null && BuiltinModule.exists(core[1])) {\r\n          newStack += `\\n${ctx.stylize(line, 'undefined')}`;\r\n        } else {\r\n          newStack += '\\n';\r\n\r\n          line = markNodeModules(ctx, line);\r\n          if (workingDirectory !== undefined) {\r\n            let newLine = markCwd(ctx, line, workingDirectory);\r\n            if (newLine === line) {\r\n              esmWorkingDirectory ??= pathToFileUrlHref(workingDirectory);\r\n              newLine = markCwd(ctx, line, esmWorkingDirectory);\r\n            }\r\n            line = newLine;\r\n          }\r\n\r\n          newStack += line;\r\n        }\r\n      }\r\n    } else {\r\n      newStack += `\\n${ArrayPrototypeJoin(lines, '\\n')}`;\r\n    }\r\n    stack = newStack;\r\n  }\r\n  // The message and the stack have to be indented as well!\r\n  if (ctx.indentationLvl !== 0) {\r\n    const indentation = StringPrototypeRepeat(' ', ctx.indentationLvl);\r\n    stack = StringPrototypeReplaceAll(stack, '\\n', `\\n${indentation}`);\r\n  }\r\n  return stack;\r\n}\r\n\r\nfunction groupArrayElements(ctx, output, value) {\r\n  let totalLength = 0;\r\n  let maxLength = 0;\r\n  let i = 0;\r\n  let outputLength = output.length;\r\n  if (ctx.maxArrayLength < output.length) {\r\n    // This makes sure the \"... n more items\" part is not taken into account.\r\n    outputLength--;\r\n  }\r\n  const separatorSpace = 2; // Add 1 for the space and 1 for the separator.\r\n  const dataLen = new Array(outputLength);\r\n  // Calculate the total length of all output entries and the individual max\r\n  // entries length of all output entries. We have to remove colors first,\r\n  // otherwise the length would not be calculated properly.\r\n  for (; i < outputLength; i++) {\r\n    const len = getStringWidth(output[i], ctx.colors);\r\n    dataLen[i] = len;\r\n    totalLength += len + separatorSpace;\r\n    if (maxLength < len)\r\n      maxLength = len;\r\n  }\r\n  // Add two to `maxLength` as we add a single whitespace character plus a comma\r\n  // in-between two entries.\r\n  const actualMax = maxLength + separatorSpace;\r\n  // Check if at least three entries fit next to each other and prevent grouping\r\n  // of arrays that contains entries of very different length (i.e., if a single\r\n  // entry is longer than 1/5 of all other entries combined). Otherwise the\r\n  // space in-between small entries would be enormous.\r\n  if (actualMax * 3 + ctx.indentationLvl < ctx.breakLength &&\r\n      (totalLength / actualMax > 5 || maxLength <= 6)) {\r\n\r\n    const approxCharHeights = 2.5;\r\n    const averageBias = MathSqrt(actualMax - totalLength / output.length);\r\n    const biasedMax = MathMax(actualMax - 3 - averageBias, 1);\r\n    // Dynamically check how many columns seem possible.\r\n    const columns = MathMin(\r\n      // Ideally a square should be drawn. We expect a character to be about 2.5\r\n      // times as high as wide. This is the area formula to calculate a square\r\n      // which contains n rectangles of size `actualMax * approxCharHeights`.\r\n      // Divide that by `actualMax` to receive the correct number of columns.\r\n      // The added bias increases the columns for short entries.\r\n      MathRound(\r\n        MathSqrt(\r\n          approxCharHeights * biasedMax * outputLength,\r\n        ) / biasedMax,\r\n      ),\r\n      // Do not exceed the breakLength.\r\n      MathFloor((ctx.breakLength - ctx.indentationLvl) / actualMax),\r\n      // Limit array grouping for small `compact` modes as the user requested\r\n      // minimal grouping.\r\n      ctx.compact * 4,\r\n      // Limit the columns to a maximum of fifteen.\r\n      15,\r\n    );\r\n    // Return with the original output if no grouping should happen.\r\n    if (columns <= 1) {\r\n      return output;\r\n    }\r\n    const tmp = [];\r\n    const maxLineLength = [];\r\n    for (let i = 0; i < columns; i++) {\r\n      let lineMaxLength = 0;\r\n      for (let j = i; j < output.length; j += columns) {\r\n        if (dataLen[j] > lineMaxLength)\r\n          lineMaxLength = dataLen[j];\r\n      }\r\n      lineMaxLength += separatorSpace;\r\n      maxLineLength[i] = lineMaxLength;\r\n    }\r\n    let order = StringPrototypePadStart;\r\n    if (value !== undefined) {\r\n      for (let i = 0; i < output.length; i++) {\r\n        if (typeof value[i] !== 'number' && typeof value[i] !== 'bigint') {\r\n          order = StringPrototypePadEnd;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    // Each iteration creates a single line of grouped entries.\r\n    for (let i = 0; i < outputLength; i += columns) {\r\n      // The last lines may contain less entries than columns.\r\n      const max = MathMin(i + columns, outputLength);\r\n      let str = '';\r\n      let j = i;\r\n      for (; j < max - 1; j++) {\r\n        // Calculate extra color padding in case it's active. This has to be\r\n        // done line by line as some lines might contain more colors than\r\n        // others.\r\n        const padding = maxLineLength[j - i] + output[j].length - dataLen[j];\r\n        str += order(`${output[j]}, `, padding, ' ');\r\n      }\r\n      if (order === StringPrototypePadStart) {\r\n        const padding = maxLineLength[j - i] +\r\n                        output[j].length -\r\n                        dataLen[j] -\r\n                        separatorSpace;\r\n        str += StringPrototypePadStart(output[j], padding, ' ');\r\n      } else {\r\n        str += output[j];\r\n      }\r\n      ArrayPrototypePush(tmp, str);\r\n    }\r\n    if (ctx.maxArrayLength < output.length) {\r\n      ArrayPrototypePush(tmp, output[outputLength]);\r\n    }\r\n    output = tmp;\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction handleMaxCallStackSize(ctx, err, constructorName, indentationLvl) {\r\n  if (isStackOverflowError(err)) {\r\n    ctx.seen.pop();\r\n    ctx.indentationLvl = indentationLvl;\r\n    return ctx.stylize(\r\n      `[${constructorName}: Inspection interrupted ` +\r\n        'prematurely. Maximum call stack size exceeded.]',\r\n      'special',\r\n    );\r\n  }\r\n  /* c8 ignore next */\r\n  assert.fail(err.stack);\r\n}\r\n\r\nfunction addNumericSeparator(integerString) {\r\n  let result = '';\r\n  let i = integerString.length;\r\n  const start = StringPrototypeStartsWith(integerString, '-') ? 1 : 0;\r\n  for (; i >= start + 4; i -= 3) {\r\n    result = `_${StringPrototypeSlice(integerString, i - 3, i)}${result}`;\r\n  }\r\n  return i === integerString.length ?\r\n    integerString :\r\n    `${StringPrototypeSlice(integerString, 0, i)}${result}`;\r\n}\r\n\r\nfunction addNumericSeparatorEnd(integerString) {\r\n  let result = '';\r\n  let i = 0;\r\n  for (; i < integerString.length - 3; i += 3) {\r\n    result += `${StringPrototypeSlice(integerString, i, i + 3)}_`;\r\n  }\r\n  return i === 0 ?\r\n    integerString :\r\n    `${result}${StringPrototypeSlice(integerString, i)}`;\r\n}\r\n\r\nconst remainingText = (remaining) => `... ${remaining} more item${remaining > 1 ? 's' : ''}`;\r\n\r\nfunction formatNumber(fn, number, numericSeparator) {\r\n  if (!numericSeparator) {\r\n    // Format -0 as '-0'. Checking `number === -0` won't distinguish 0 from -0.\r\n    if (ObjectIs(number, -0)) {\r\n      return fn('-0', 'number');\r\n    }\r\n    return fn(`${number}`, 'number');\r\n  }\r\n  const integer = MathTrunc(number);\r\n  const string = String(integer);\r\n  if (integer === number) {\r\n    if (!NumberIsFinite(number) || StringPrototypeIncludes(string, 'e')) {\r\n      return fn(string, 'number');\r\n    }\r\n    return fn(`${addNumericSeparator(string)}`, 'number');\r\n  }\r\n  if (NumberIsNaN(number)) {\r\n    return fn(string, 'number');\r\n  }\r\n  return fn(`${\r\n    addNumericSeparator(string)\r\n  }.${\r\n    addNumericSeparatorEnd(\r\n      StringPrototypeSlice(String(number), string.length + 1),\r\n    )\r\n  }`, 'number');\r\n}\r\n\r\nfunction formatBigInt(fn, bigint, numericSeparator) {\r\n  const string = String(bigint);\r\n  if (!numericSeparator) {\r\n    return fn(`${string}n`, 'bigint');\r\n  }\r\n  return fn(`${addNumericSeparator(string)}n`, 'bigint');\r\n}\r\n\r\nfunction formatPrimitive(fn, value, ctx) {\r\n  if (typeof value === 'string') {\r\n    let trailer = '';\r\n    if (value.length > ctx.maxStringLength) {\r\n      const remaining = value.length - ctx.maxStringLength;\r\n      value = StringPrototypeSlice(value, 0, ctx.maxStringLength);\r\n      trailer = `... ${remaining} more character${remaining > 1 ? 's' : ''}`;\r\n    }\r\n    if (ctx.compact !== true &&\r\n        // We do not support handling unicode characters width with\r\n        // the readline getStringWidth function as there are\r\n        // performance implications.\r\n        value.length > kMinLineLength &&\r\n        value.length > ctx.breakLength - ctx.indentationLvl - 4) {\r\n      return ArrayPrototypeJoin(\r\n        ArrayPrototypeMap(\r\n          RegExpPrototypeSymbolSplit(/(?<=\\n)/, value),\r\n          (line) => fn(strEscape(line), 'string'),\r\n        ),\r\n        ` +\\n${StringPrototypeRepeat(' ', ctx.indentationLvl + 2)}`,\r\n      ) + trailer;\r\n    }\r\n    return fn(strEscape(value), 'string') + trailer;\r\n  }\r\n  if (typeof value === 'number')\r\n    return formatNumber(fn, value, ctx.numericSeparator);\r\n  if (typeof value === 'bigint')\r\n    return formatBigInt(fn, value, ctx.numericSeparator);\r\n  if (typeof value === 'boolean')\r\n    return fn(`${value}`, 'boolean');\r\n  if (typeof value === 'undefined')\r\n    return fn('undefined', 'undefined');\r\n  // es6 symbol primitive\r\n  return fn(SymbolPrototypeToString(value), 'symbol');\r\n}\r\n\r\nfunction formatNamespaceObject(keys, ctx, value, recurseTimes) {\r\n  const output = new Array(keys.length);\r\n  for (let i = 0; i < keys.length; i++) {\r\n    try {\r\n      output[i] = formatProperty(ctx, value, recurseTimes, keys[i],\r\n                                 kObjectType);\r\n    } catch (err) {\r\n      assert(isNativeError(err) && err.name === 'ReferenceError');\r\n      // Use the existing functionality. This makes sure the indentation and\r\n      // line breaks are always correct. Otherwise it is very difficult to keep\r\n      // this aligned, even though this is a hacky way of dealing with this.\r\n      const tmp = { [keys[i]]: '' };\r\n      output[i] = formatProperty(ctx, tmp, recurseTimes, keys[i], kObjectType);\r\n      const pos = StringPrototypeLastIndexOf(output[i], ' ');\r\n      // We have to find the last whitespace and have to replace that value as\r\n      // it will be visualized as a regular string.\r\n      output[i] = StringPrototypeSlice(output[i], 0, pos + 1) +\r\n                  ctx.stylize('<uninitialized>', 'special');\r\n    }\r\n  }\r\n  // Reset the keys to an empty array. This prevents duplicated inspection.\r\n  keys.length = 0;\r\n  return output;\r\n}\r\n\r\n// The array is sparse and/or has extra keys\r\nfunction formatSpecialArray(ctx, value, recurseTimes, maxLength, output, i) {\r\n  const keys = ObjectKeys(value);\r\n  let index = i;\r\n  for (; i < keys.length && output.length < maxLength; i++) {\r\n    const key = keys[i];\r\n    const tmp = +key;\r\n    // Arrays can only have up to 2^32 - 1 entries\r\n    if (tmp > 2 ** 32 - 2) {\r\n      break;\r\n    }\r\n    if (`${index}` !== key) {\r\n      if (RegExpPrototypeExec(numberRegExp, key) === null) {\r\n        break;\r\n      }\r\n      const emptyItems = tmp - index;\r\n      const ending = emptyItems > 1 ? 's' : '';\r\n      const message = `<${emptyItems} empty item${ending}>`;\r\n      ArrayPrototypePush(output, ctx.stylize(message, 'undefined'));\r\n      index = tmp;\r\n      if (output.length === maxLength) {\r\n        break;\r\n      }\r\n    }\r\n    ArrayPrototypePush(output, formatProperty(ctx, value, recurseTimes, key, kArrayType));\r\n    index++;\r\n  }\r\n  const remaining = value.length - index;\r\n  if (output.length !== maxLength) {\r\n    if (remaining > 0) {\r\n      const ending = remaining > 1 ? 's' : '';\r\n      const message = `<${remaining} empty item${ending}>`;\r\n      ArrayPrototypePush(output, ctx.stylize(message, 'undefined'));\r\n    }\r\n  } else if (remaining > 0) {\r\n    ArrayPrototypePush(output, remainingText(remaining));\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatArrayBuffer(ctx, value) {\r\n  let buffer;\r\n  try {\r\n    buffer = new Uint8Array(value);\r\n  } catch {\r\n    return [ctx.stylize('(detached)', 'special')];\r\n  }\r\n  if (hexSlice === undefined)\r\n    hexSlice = uncurryThis(require('buffer').Buffer.prototype.hexSlice);\r\n  let str = StringPrototypeTrim(RegExpPrototypeSymbolReplace(\r\n    /(.{2})/g,\r\n    hexSlice(buffer, 0, MathMin(ctx.maxArrayLength, buffer.length)),\r\n    '$1 ',\r\n  ));\r\n  const remaining = buffer.length - ctx.maxArrayLength;\r\n  if (remaining > 0)\r\n    str += ` ... ${remaining} more byte${remaining > 1 ? 's' : ''}`;\r\n  return [`${ctx.stylize('[Uint8Contents]', 'special')}: <${str}>`];\r\n}\r\n\r\nfunction formatArray(ctx, value, recurseTimes) {\r\n  const valLen = value.length;\r\n  const len = MathMin(MathMax(0, ctx.maxArrayLength), valLen);\r\n\r\n  const remaining = valLen - len;\r\n  const output = [];\r\n  for (let i = 0; i < len; i++) {\r\n    // Special handle sparse arrays.\r\n    if (!ObjectPrototypeHasOwnProperty(value, i)) {\r\n      return formatSpecialArray(ctx, value, recurseTimes, len, output, i);\r\n    }\r\n    ArrayPrototypePush(output, formatProperty(ctx, value, recurseTimes, i, kArrayType));\r\n  }\r\n  if (remaining > 0) {\r\n    ArrayPrototypePush(output, remainingText(remaining));\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatTypedArray(value, length, ctx, ignored, recurseTimes) {\r\n  const maxLength = MathMin(MathMax(0, ctx.maxArrayLength), length);\r\n  const remaining = value.length - maxLength;\r\n  const output = new Array(maxLength);\r\n  const elementFormatter = value.length > 0 && typeof value[0] === 'number' ?\r\n    formatNumber :\r\n    formatBigInt;\r\n  for (let i = 0; i < maxLength; ++i) {\r\n    output[i] = elementFormatter(ctx.stylize, value[i], ctx.numericSeparator);\r\n  }\r\n  if (remaining > 0) {\r\n    output[maxLength] = remainingText(remaining);\r\n  }\r\n  if (ctx.showHidden) {\r\n    // .buffer goes last, it's not a primitive like the others.\r\n    // All besides `BYTES_PER_ELEMENT` are actually getters.\r\n    ctx.indentationLvl += 2;\r\n    for (const key of [\r\n      'BYTES_PER_ELEMENT',\r\n      'length',\r\n      'byteLength',\r\n      'byteOffset',\r\n      'buffer',\r\n    ]) {\r\n      const str = formatValue(ctx, value[key], recurseTimes, true);\r\n      ArrayPrototypePush(output, `[${key}]: ${str}`);\r\n    }\r\n    ctx.indentationLvl -= 2;\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatSet(value, ctx, ignored, recurseTimes) {\r\n  const length = value.size;\r\n  const maxLength = MathMin(MathMax(0, ctx.maxArrayLength), length);\r\n  const remaining = length - maxLength;\r\n  const output = [];\r\n  ctx.indentationLvl += 2;\r\n  let i = 0;\r\n  for (const v of value) {\r\n    if (i >= maxLength) break;\r\n    ArrayPrototypePush(output, formatValue(ctx, v, recurseTimes));\r\n    i++;\r\n  }\r\n  if (remaining > 0) {\r\n    ArrayPrototypePush(output, remainingText(remaining));\r\n  }\r\n  ctx.indentationLvl -= 2;\r\n  return output;\r\n}\r\n\r\nfunction formatMap(value, ctx, ignored, recurseTimes) {\r\n  const length = value.size;\r\n  const maxLength = MathMin(MathMax(0, ctx.maxArrayLength), length);\r\n  const remaining = length - maxLength;\r\n  const output = [];\r\n  ctx.indentationLvl += 2;\r\n  let i = 0;\r\n  for (const { 0: k, 1: v } of value) {\r\n    if (i >= maxLength) break;\r\n    ArrayPrototypePush(\r\n      output,\r\n      `${formatValue(ctx, k, recurseTimes)} => ${formatValue(ctx, v, recurseTimes)}`,\r\n    );\r\n    i++;\r\n  }\r\n  if (remaining > 0) {\r\n    ArrayPrototypePush(output, remainingText(remaining));\r\n  }\r\n  ctx.indentationLvl -= 2;\r\n  return output;\r\n}\r\n\r\nfunction formatSetIterInner(ctx, recurseTimes, entries, state) {\r\n  const maxArrayLength = MathMax(ctx.maxArrayLength, 0);\r\n  const maxLength = MathMin(maxArrayLength, entries.length);\r\n  const output = new Array(maxLength);\r\n  ctx.indentationLvl += 2;\r\n  for (let i = 0; i < maxLength; i++) {\r\n    output[i] = formatValue(ctx, entries[i], recurseTimes);\r\n  }\r\n  ctx.indentationLvl -= 2;\r\n  if (state === kWeak && !ctx.sorted) {\r\n    // Sort all entries to have a halfway reliable output (if more entries than\r\n    // retrieved ones exist, we can not reliably return the same output) if the\r\n    // output is not sorted anyway.\r\n    ArrayPrototypeSort(output);\r\n  }\r\n  const remaining = entries.length - maxLength;\r\n  if (remaining > 0) {\r\n    ArrayPrototypePush(output, remainingText(remaining));\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatMapIterInner(ctx, recurseTimes, entries, state) {\r\n  const maxArrayLength = MathMax(ctx.maxArrayLength, 0);\r\n  // Entries exist as [key1, val1, key2, val2, ...]\r\n  const len = entries.length / 2;\r\n  const remaining = len - maxArrayLength;\r\n  const maxLength = MathMin(maxArrayLength, len);\r\n  const output = new Array(maxLength);\r\n  let i = 0;\r\n  ctx.indentationLvl += 2;\r\n  if (state === kWeak) {\r\n    for (; i < maxLength; i++) {\r\n      const pos = i * 2;\r\n      output[i] =\r\n        `${formatValue(ctx, entries[pos], recurseTimes)} => ${formatValue(ctx, entries[pos + 1], recurseTimes)}`;\r\n    }\r\n    // Sort all entries to have a halfway reliable output (if more entries than\r\n    // retrieved ones exist, we can not reliably return the same output) if the\r\n    // output is not sorted anyway.\r\n    if (!ctx.sorted)\r\n      ArrayPrototypeSort(output);\r\n  } else {\r\n    for (; i < maxLength; i++) {\r\n      const pos = i * 2;\r\n      const res = [\r\n        formatValue(ctx, entries[pos], recurseTimes),\r\n        formatValue(ctx, entries[pos + 1], recurseTimes),\r\n      ];\r\n      output[i] = reduceToSingleString(\r\n        ctx, res, '', ['[', ']'], kArrayExtrasType, recurseTimes);\r\n    }\r\n  }\r\n  ctx.indentationLvl -= 2;\r\n  if (remaining > 0) {\r\n    ArrayPrototypePush(output, remainingText(remaining));\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatWeakCollection(ctx) {\r\n  return [ctx.stylize('<items unknown>', 'special')];\r\n}\r\n\r\nfunction formatWeakSet(ctx, value, recurseTimes) {\r\n  const entries = previewEntries(value);\r\n  return formatSetIterInner(ctx, recurseTimes, entries, kWeak);\r\n}\r\n\r\nfunction formatWeakMap(ctx, value, recurseTimes) {\r\n  const entries = previewEntries(value);\r\n  return formatMapIterInner(ctx, recurseTimes, entries, kWeak);\r\n}\r\n\r\nfunction formatIterator(braces, ctx, value, recurseTimes) {\r\n  const { 0: entries, 1: isKeyValue } = previewEntries(value, true);\r\n  if (isKeyValue) {\r\n    // Mark entry iterators as such.\r\n    braces[0] = RegExpPrototypeSymbolReplace(/ Iterator] {$/, braces[0], ' Entries] {');\r\n    return formatMapIterInner(ctx, recurseTimes, entries, kMapEntries);\r\n  }\r\n\r\n  return formatSetIterInner(ctx, recurseTimes, entries, kIterator);\r\n}\r\n\r\nfunction formatPromise(ctx, value, recurseTimes) {\r\n  let output;\r\n  const { 0: state, 1: result } = getPromiseDetails(value);\r\n  if (state === kPending) {\r\n    output = [ctx.stylize('<pending>', 'special')];\r\n  } else {\r\n    ctx.indentationLvl += 2;\r\n    const str = formatValue(ctx, result, recurseTimes);\r\n    ctx.indentationLvl -= 2;\r\n    output = [\r\n      state === kRejected ?\r\n        `${ctx.stylize('<rejected>', 'special')} ${str}` :\r\n        str,\r\n    ];\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatProperty(ctx, value, recurseTimes, key, type, desc,\r\n                        original = value) {\r\n  let name, str;\r\n  let extra = ' ';\r\n  desc = desc || ObjectGetOwnPropertyDescriptor(value, key) ||\r\n    { value: value[key], enumerable: true };\r\n  if (desc.value !== undefined) {\r\n    const diff = (ctx.compact !== true || type !== kObjectType) ? 2 : 3;\r\n    ctx.indentationLvl += diff;\r\n    str = formatValue(ctx, desc.value, recurseTimes);\r\n    if (diff === 3 && ctx.breakLength < getStringWidth(str, ctx.colors)) {\r\n      extra = `\\n${StringPrototypeRepeat(' ', ctx.indentationLvl)}`;\r\n    }\r\n    ctx.indentationLvl -= diff;\r\n  } else if (desc.get !== undefined) {\r\n    const label = desc.set !== undefined ? 'Getter/Setter' : 'Getter';\r\n    const s = ctx.stylize;\r\n    const sp = 'special';\r\n    if (ctx.getters && (ctx.getters === true ||\r\n          (ctx.getters === 'get' && desc.set === undefined) ||\r\n          (ctx.getters === 'set' && desc.set !== undefined))) {\r\n      try {\r\n        const tmp = FunctionPrototypeCall(desc.get, original);\r\n        ctx.indentationLvl += 2;\r\n        if (tmp === null) {\r\n          str = `${s(`[${label}:`, sp)} ${s('null', 'null')}${s(']', sp)}`;\r\n        } else if (typeof tmp === 'object') {\r\n          str = `${s(`[${label}]`, sp)} ${formatValue(ctx, tmp, recurseTimes)}`;\r\n        } else {\r\n          const primitive = formatPrimitive(s, tmp, ctx);\r\n          str = `${s(`[${label}:`, sp)} ${primitive}${s(']', sp)}`;\r\n        }\r\n        ctx.indentationLvl -= 2;\r\n      } catch (err) {\r\n        const message = `<Inspection threw (${err.message})>`;\r\n        str = `${s(`[${label}:`, sp)} ${message}${s(']', sp)}`;\r\n      }\r\n    } else {\r\n      str = ctx.stylize(`[${label}]`, sp);\r\n    }\r\n  } else if (desc.set !== undefined) {\r\n    str = ctx.stylize('[Setter]', 'special');\r\n  } else {\r\n    str = ctx.stylize('undefined', 'undefined');\r\n  }\r\n  if (type === kArrayType) {\r\n    return str;\r\n  }\r\n  if (typeof key === 'symbol') {\r\n    const tmp = RegExpPrototypeSymbolReplace(\r\n      strEscapeSequencesReplacer,\r\n      SymbolPrototypeToString(key),\r\n      escapeFn,\r\n    );\r\n    name = `[${ctx.stylize(tmp, 'symbol')}]`;\r\n  } else if (key === '__proto__') {\r\n    name = \"['__proto__']\";\r\n  } else if (desc.enumerable === false) {\r\n    const tmp = RegExpPrototypeSymbolReplace(\r\n      strEscapeSequencesReplacer,\r\n      key,\r\n      escapeFn,\r\n    );\r\n    name = `[${tmp}]`;\r\n  } else if (RegExpPrototypeExec(keyStrRegExp, key) !== null) {\r\n    name = ctx.stylize(key, 'name');\r\n  } else {\r\n    name = ctx.stylize(strEscape(key), 'string');\r\n  }\r\n  return `${name}:${extra}${str}`;\r\n}\r\n\r\nfunction isBelowBreakLength(ctx, output, start, base) {\r\n  // Each entry is separated by at least a comma. Thus, we start with a total\r\n  // length of at least `output.length`. In addition, some cases have a\r\n  // whitespace in-between each other that is added to the total as well.\r\n  // TODO(BridgeAR): Add unicode support. Use the readline getStringWidth\r\n  // function. Check the performance overhead and make it an opt-in in case it's\r\n  // significant.\r\n  let totalLength = output.length + start;\r\n  if (totalLength + output.length > ctx.breakLength)\r\n    return false;\r\n  for (let i = 0; i < output.length; i++) {\r\n    if (ctx.colors) {\r\n      totalLength += removeColors(output[i]).length;\r\n    } else {\r\n      totalLength += output[i].length;\r\n    }\r\n    if (totalLength > ctx.breakLength) {\r\n      return false;\r\n    }\r\n  }\r\n  // Do not line up properties on the same line if `base` contains line breaks.\r\n  return base === '' || !StringPrototypeIncludes(base, '\\n');\r\n}\r\n\r\nfunction reduceToSingleString(\r\n  ctx, output, base, braces, extrasType, recurseTimes, value) {\r\n  if (ctx.compact !== true) {\r\n    if (typeof ctx.compact === 'number' && ctx.compact >= 1) {\r\n      // Memorize the original output length. In case the output is grouped,\r\n      // prevent lining up the entries on a single line.\r\n      const entries = output.length;\r\n      // Group array elements together if the array contains at least six\r\n      // separate entries.\r\n      if (extrasType === kArrayExtrasType && entries > 6) {\r\n        output = groupArrayElements(ctx, output, value);\r\n      }\r\n      // `ctx.currentDepth` is set to the most inner depth of the currently\r\n      // inspected object part while `recurseTimes` is the actual current depth\r\n      // that is inspected.\r\n      //\r\n      // Example:\r\n      //\r\n      // const a = { first: [ 1, 2, 3 ], second: { inner: [ 1, 2, 3 ] } }\r\n      //\r\n      // The deepest depth of `a` is 2 (a.second.inner) and `a.first` has a max\r\n      // depth of 1.\r\n      //\r\n      // Consolidate all entries of the local most inner depth up to\r\n      // `ctx.compact`, as long as the properties are smaller than\r\n      // `ctx.breakLength`.\r\n      if (ctx.currentDepth - recurseTimes < ctx.compact &&\r\n          entries === output.length) {\r\n        // Line up all entries on a single line in case the entries do not\r\n        // exceed `breakLength`. Add 10 as constant to start next to all other\r\n        // factors that may reduce `breakLength`.\r\n        const start = output.length + ctx.indentationLvl +\r\n                      braces[0].length + base.length + 10;\r\n        if (isBelowBreakLength(ctx, output, start, base)) {\r\n          const joinedOutput = join(output, ', ');\r\n          if (!StringPrototypeIncludes(joinedOutput, '\\n')) {\r\n            return `${base ? `${base} ` : ''}${braces[0]} ${joinedOutput}` +\r\n              ` ${braces[1]}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Line up each entry on an individual line.\r\n    const indentation = `\\n${StringPrototypeRepeat(' ', ctx.indentationLvl)}`;\r\n    return `${base ? `${base} ` : ''}${braces[0]}${indentation}  ` +\r\n      `${join(output, `,${indentation}  `)}${indentation}${braces[1]}`;\r\n  }\r\n  // Line up all entries on a single line in case the entries do not exceed\r\n  // `breakLength`.\r\n  if (isBelowBreakLength(ctx, output, 0, base)) {\r\n    return `${braces[0]}${base ? ` ${base}` : ''} ${join(output, ', ')} ` +\r\n      braces[1];\r\n  }\r\n  const indentation = StringPrototypeRepeat(' ', ctx.indentationLvl);\r\n  // If the opening \"brace\" is too large, like in the case of \"Set {\",\r\n  // we need to force the first item to be on the next line or the\r\n  // items will not line up correctly.\r\n  const ln = base === '' && braces[0].length === 1 ?\r\n    ' ' : `${base ? ` ${base}` : ''}\\n${indentation}  `;\r\n  // Line up each entry on an individual line.\r\n  return `${braces[0]}${ln}${join(output, `,\\n${indentation}  `)} ${braces[1]}`;\r\n}\r\n\r\nfunction hasBuiltInToString(value) {\r\n  // Prevent triggering proxy traps.\r\n  const getFullProxy = false;\r\n  const proxyTarget = getProxyDetails(value, getFullProxy);\r\n  if (proxyTarget !== undefined) {\r\n    if (proxyTarget === null) {\r\n      return true;\r\n    }\r\n    value = proxyTarget;\r\n  }\r\n\r\n  // Check if value has a custom Symbol.toPrimitive transformation.\r\n  if (typeof value[SymbolToPrimitive] === 'function') {\r\n    return false;\r\n  }\r\n\r\n  // Count objects that have no `toString` function as built-in.\r\n  if (typeof value.toString !== 'function') {\r\n    return true;\r\n  }\r\n\r\n  // The object has a own `toString` property. Thus it's not not a built-in one.\r\n  if (ObjectPrototypeHasOwnProperty(value, 'toString')) {\r\n    return false;\r\n  }\r\n\r\n  // Find the object that has the `toString` property as own property in the\r\n  // prototype chain.\r\n  let pointer = value;\r\n  do {\r\n    pointer = ObjectGetPrototypeOf(pointer);\r\n  } while (!ObjectPrototypeHasOwnProperty(pointer, 'toString'));\r\n\r\n  // Check closer if the object is a built-in.\r\n  const descriptor = ObjectGetOwnPropertyDescriptor(pointer, 'constructor');\r\n  return descriptor !== undefined &&\r\n    typeof descriptor.value === 'function' &&\r\n    builtInObjects.has(descriptor.value.name);\r\n}\r\n\r\nconst firstErrorLine = (error) => StringPrototypeSplit(error.message, '\\n', 1)[0];\r\nlet CIRCULAR_ERROR_MESSAGE;\r\nfunction tryStringify(arg) {\r\n  try {\r\n    return JSONStringify(arg);\r\n  } catch (err) {\r\n    // Populate the circular error message lazily\r\n    if (!CIRCULAR_ERROR_MESSAGE) {\r\n      try {\r\n        const a = {};\r\n        a.a = a;\r\n        JSONStringify(a);\r\n      } catch (circularError) {\r\n        CIRCULAR_ERROR_MESSAGE = firstErrorLine(circularError);\r\n      }\r\n    }\r\n    if (err.name === 'TypeError' &&\r\n        firstErrorLine(err) === CIRCULAR_ERROR_MESSAGE) {\r\n      return '[Circular]';\r\n    }\r\n    throw err;\r\n  }\r\n}\r\n\r\nfunction format(...args) {\r\n  return formatWithOptionsInternal(undefined, args);\r\n}\r\n\r\nfunction formatWithOptions(inspectOptions, ...args) {\r\n  validateObject(inspectOptions, 'inspectOptions', kValidateObjectAllowArray);\r\n  return formatWithOptionsInternal(inspectOptions, args);\r\n}\r\n\r\nfunction formatNumberNoColor(number, options) {\r\n  return formatNumber(\r\n    stylizeNoColor,\r\n    number,\r\n    options?.numericSeparator ?? inspectDefaultOptions.numericSeparator,\r\n  );\r\n}\r\n\r\nfunction formatBigIntNoColor(bigint, options) {\r\n  return formatBigInt(\r\n    stylizeNoColor,\r\n    bigint,\r\n    options?.numericSeparator ?? inspectDefaultOptions.numericSeparator,\r\n  );\r\n}\r\n\r\nfunction formatWithOptionsInternal(inspectOptions, args) {\r\n  const first = args[0];\r\n  let a = 0;\r\n  let str = '';\r\n  let join = '';\r\n\r\n  if (typeof first === 'string') {\r\n    if (args.length === 1) {\r\n      return first;\r\n    }\r\n    let tempStr;\r\n    let lastPos = 0;\r\n\r\n    for (let i = 0; i < first.length - 1; i++) {\r\n      if (StringPrototypeCharCodeAt(first, i) === 37) { // '%'\r\n        const nextChar = StringPrototypeCharCodeAt(first, ++i);\r\n        if (a + 1 !== args.length) {\r\n          switch (nextChar) {\r\n            case 115: { // 's'\r\n              const tempArg = args[++a];\r\n              if (typeof tempArg === 'number') {\r\n                tempStr = formatNumberNoColor(tempArg, inspectOptions);\r\n              } else if (typeof tempArg === 'bigint') {\r\n                tempStr = formatBigIntNoColor(tempArg, inspectOptions);\r\n              } else if (typeof tempArg !== 'object' ||\r\n                         tempArg === null ||\r\n                         !hasBuiltInToString(tempArg)) {\r\n                tempStr = String(tempArg);\r\n              } else {\r\n                tempStr = inspect(tempArg, {\r\n                  ...inspectOptions,\r\n                  compact: 3,\r\n                  colors: false,\r\n                  depth: 0,\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            case 106: // 'j'\r\n              tempStr = tryStringify(args[++a]);\r\n              break;\r\n            case 100: { // 'd'\r\n              const tempNum = args[++a];\r\n              if (typeof tempNum === 'bigint') {\r\n                tempStr = formatBigIntNoColor(tempNum, inspectOptions);\r\n              } else if (typeof tempNum === 'symbol') {\r\n                tempStr = 'NaN';\r\n              } else {\r\n                tempStr = formatNumberNoColor(Number(tempNum), inspectOptions);\r\n              }\r\n              break;\r\n            }\r\n            case 79: // 'O'\r\n              tempStr = inspect(args[++a], inspectOptions);\r\n              break;\r\n            case 111: // 'o'\r\n              tempStr = inspect(args[++a], {\r\n                ...inspectOptions,\r\n                showHidden: true,\r\n                showProxy: true,\r\n                depth: 4,\r\n              });\r\n              break;\r\n            case 105: { // 'i'\r\n              const tempInteger = args[++a];\r\n              if (typeof tempInteger === 'bigint') {\r\n                tempStr = formatBigIntNoColor(tempInteger, inspectOptions);\r\n              } else if (typeof tempInteger === 'symbol') {\r\n                tempStr = 'NaN';\r\n              } else {\r\n                tempStr = formatNumberNoColor(\r\n                  NumberParseInt(tempInteger), inspectOptions);\r\n              }\r\n              break;\r\n            }\r\n            case 102: { // 'f'\r\n              const tempFloat = args[++a];\r\n              if (typeof tempFloat === 'symbol') {\r\n                tempStr = 'NaN';\r\n              } else {\r\n                tempStr = formatNumberNoColor(\r\n                  NumberParseFloat(tempFloat), inspectOptions);\r\n              }\r\n              break;\r\n            }\r\n            case 99: // 'c'\r\n              a += 1;\r\n              tempStr = '';\r\n              break;\r\n            case 37: // '%'\r\n              str += StringPrototypeSlice(first, lastPos, i);\r\n              lastPos = i + 1;\r\n              continue;\r\n            default: // Any other character is not a correct placeholder\r\n              continue;\r\n          }\r\n          if (lastPos !== i - 1) {\r\n            str += StringPrototypeSlice(first, lastPos, i - 1);\r\n          }\r\n          str += tempStr;\r\n          lastPos = i + 1;\r\n        } else if (nextChar === 37) {\r\n          str += StringPrototypeSlice(first, lastPos, i);\r\n          lastPos = i + 1;\r\n        }\r\n      }\r\n    }\r\n    if (lastPos !== 0) {\r\n      a++;\r\n      join = ' ';\r\n      if (lastPos < first.length) {\r\n        str += StringPrototypeSlice(first, lastPos);\r\n      }\r\n    }\r\n  }\r\n\r\n  while (a < args.length) {\r\n    const value = args[a];\r\n    str += join;\r\n    str += typeof value !== 'string' ? inspect(value, inspectOptions) : value;\r\n    join = ' ';\r\n    a++;\r\n  }\r\n  return str;\r\n}\r\n\r\nfunction isZeroWidthCodePoint(code) {\r\n  return code <= 0x1F || // C0 control codes\r\n    (code >= 0x7F && code <= 0x9F) || // C1 control codes\r\n    (code >= 0x300 && code <= 0x36F) || // Combining Diacritical Marks\r\n    (code >= 0x200B && code <= 0x200F) || // Modifying Invisible Characters\r\n    // Combining Diacritical Marks for Symbols\r\n    (code >= 0x20D0 && code <= 0x20FF) ||\r\n    (code >= 0xFE00 && code <= 0xFE0F) || // Variation Selectors\r\n    (code >= 0xFE20 && code <= 0xFE2F) || // Combining Half Marks\r\n    (code >= 0xE0100 && code <= 0xE01EF); // Variation Selectors\r\n}\r\n\r\nif (internalBinding('config').hasIntl) {\r\n  const icu = internalBinding('icu');\r\n  // icu.getStringWidth(string, ambiguousAsFullWidth, expandEmojiSequence)\r\n  // Defaults: ambiguousAsFullWidth = false; expandEmojiSequence = true;\r\n  // TODO(BridgeAR): Expose the options to the user. That is probably the\r\n  // best thing possible at the moment, since it's difficult to know what\r\n  // the receiving end supports.\r\n  getStringWidth = function getStringWidth(str, removeControlChars = true) {\r\n    let width = 0;\r\n\r\n    if (removeControlChars) {\r\n      str = stripVTControlCharacters(str);\r\n    }\r\n    for (let i = 0; i < str.length; i++) {\r\n      // Try to avoid calling into C++ by first handling the ASCII portion of\r\n      // the string. If it is fully ASCII, we skip the C++ part.\r\n      const code = str.charCodeAt(i);\r\n      if (code >= 127) {\r\n        width += icu.getStringWidth(StringPrototypeNormalize(StringPrototypeSlice(str, i), 'NFC'));\r\n        break;\r\n      }\r\n      width += code >= 32 ? 1 : 0;\r\n    }\r\n    return width;\r\n  };\r\n} else {\r\n  /**\r\n   * Returns the number of columns required to display the given string.\r\n   */\r\n  getStringWidth = function getStringWidth(str, removeControlChars = true) {\r\n    let width = 0;\r\n\r\n    if (removeControlChars)\r\n      str = stripVTControlCharacters(str);\r\n    str = StringPrototypeNormalize(str, 'NFC');\r\n    for (const char of new SafeStringIterator(str)) {\r\n      const code = StringPrototypeCodePointAt(char, 0);\r\n      if (isFullWidthCodePoint(code)) {\r\n        width += 2;\r\n      } else if (!isZeroWidthCodePoint(code)) {\r\n        width++;\r\n      }\r\n    }\r\n\r\n    return width;\r\n  };\r\n\r\n  /**\r\n   * Returns true if the character represented by a given\r\n   * Unicode code point is full-width. Otherwise returns false.\r\n   */\r\n  const isFullWidthCodePoint = (code) => {\r\n    // Code points are partially derived from:\r\n    // https://www.unicode.org/Public/UNIDATA/EastAsianWidth.txt\r\n    return code >= 0x1100 && (\r\n      code <= 0x115f ||  // Hangul Jamo\r\n      code === 0x2329 || // LEFT-POINTING ANGLE BRACKET\r\n      code === 0x232a || // RIGHT-POINTING ANGLE BRACKET\r\n      // CJK Radicals Supplement .. Enclosed CJK Letters and Months\r\n      (code >= 0x2e80 && code <= 0x3247 && code !== 0x303f) ||\r\n      // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A\r\n      (code >= 0x3250 && code <= 0x4dbf) ||\r\n      // CJK Unified Ideographs .. Yi Radicals\r\n      (code >= 0x4e00 && code <= 0xa4c6) ||\r\n      // Hangul Jamo Extended-A\r\n      (code >= 0xa960 && code <= 0xa97c) ||\r\n      // Hangul Syllables\r\n      (code >= 0xac00 && code <= 0xd7a3) ||\r\n      // CJK Compatibility Ideographs\r\n      (code >= 0xf900 && code <= 0xfaff) ||\r\n      // Vertical Forms\r\n      (code >= 0xfe10 && code <= 0xfe19) ||\r\n      // CJK Compatibility Forms .. Small Form Variants\r\n      (code >= 0xfe30 && code <= 0xfe6b) ||\r\n      // Halfwidth and Fullwidth Forms\r\n      (code >= 0xff01 && code <= 0xff60) ||\r\n      (code >= 0xffe0 && code <= 0xffe6) ||\r\n      // Kana Supplement\r\n      (code >= 0x1b000 && code <= 0x1b001) ||\r\n      // Enclosed Ideographic Supplement\r\n      (code >= 0x1f200 && code <= 0x1f251) ||\r\n      // Miscellaneous Symbols and Pictographs 0x1f300 - 0x1f5ff\r\n      // Emoticons 0x1f600 - 0x1f64f\r\n      (code >= 0x1f300 && code <= 0x1f64f) ||\r\n      // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane\r\n      (code >= 0x20000 && code <= 0x3fffd)\r\n    );\r\n  };\r\n\r\n}\r\n\r\n/**\r\n * Remove all VT control characters. Use to estimate displayed string width.\r\n */\r\nfunction stripVTControlCharacters(str) {\r\n  validateString(str, 'str');\r\n\r\n  return RegExpPrototypeSymbolReplace(ansi, str, '');\r\n}\r\n\r\nmodule.exports = {\r\n  identicalSequenceRange,\r\n  inspect,\r\n  inspectDefaultOptions,\r\n  format,\r\n  formatWithOptions,\r\n  getStringWidth,\r\n  stripVTControlCharacters,\r\n  isZeroWidthCodePoint,\r\n};\r\n"
  },
  "19": {
    "metadata": {
      "scriptId": "19",
      "url": "node:internal/util/debuglog",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 496,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "bb1f645eec5ee80d64d8d0e5b3839a4404fd596fab489b4b6fd98c889d2266a8",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 12325,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/util/debuglog"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  MathFloor,\r\n  Number,\r\n  NumberPrototypeToFixed,\r\n  ObjectDefineProperty,\r\n  RegExp,\r\n  RegExpPrototypeExec,\r\n  SafeArrayIterator,\r\n  SafeMap,\r\n  StringPrototypePadStart,\r\n  StringPrototypeSplit,\r\n  StringPrototypeToLowerCase,\r\n  StringPrototypeToUpperCase,\r\n} = primordials;\r\nconst {\r\n  CHAR_LOWERCASE_B: kTraceBegin,\r\n  CHAR_LOWERCASE_E: kTraceEnd,\r\n  CHAR_LOWERCASE_N: kTraceInstant,\r\n} = require('internal/constants');\r\nconst { inspect, format, formatWithOptions } = require('internal/util/inspect');\r\nconst { isTraceCategoryEnabled, trace } = internalBinding('trace_events');\r\n\r\n// `debugImpls` and `testEnabled` are deliberately not initialized so any call\r\n// to `debuglog()` before `initializeDebugEnv()` is called will throw.\r\nlet debugImpls;\r\nlet testEnabled;\r\n\r\n\r\n// `debugEnv` is initial value of process.env.NODE_DEBUG\r\nfunction initializeDebugEnv(debugEnv) {\r\n  debugImpls = { __proto__: null };\r\n  if (debugEnv) {\r\n    // This is run before any user code, it's OK not to use primordials.\r\n    debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\r\n      .replaceAll('*', '.*')\r\n      .replaceAll(',', '$|^');\r\n    const debugEnvRegex = new RegExp(`^${debugEnv}$`, 'i');\r\n    testEnabled = (str) => RegExpPrototypeExec(debugEnvRegex, str) !== null;\r\n  } else {\r\n    testEnabled = () => false;\r\n  }\r\n}\r\n\r\n// Emits warning when user sets\r\n// NODE_DEBUG=http or NODE_DEBUG=http2.\r\nfunction emitWarningIfNeeded(set) {\r\n  if ('HTTP' === set || 'HTTP2' === set) {\r\n    process.emitWarning('Setting the NODE_DEBUG environment variable ' +\r\n      'to \\'' + StringPrototypeToLowerCase(set) + '\\' can expose sensitive ' +\r\n      'data (such as passwords, tokens and authentication headers) ' +\r\n      'in the resulting log.');\r\n  }\r\n}\r\n\r\nconst noop = () => {};\r\n\r\nlet utilColors;\r\nfunction lazyUtilColors() {\r\n  utilColors ??= require('internal/util/colors');\r\n  return utilColors;\r\n}\r\n\r\nfunction debuglogImpl(enabled, set, args) {\r\n  if (debugImpls[set] === undefined) {\r\n    if (enabled) {\r\n      const pid = process.pid;\r\n      emitWarningIfNeeded(set);\r\n      debugImpls[set] = function debug(...args) {\r\n        const colors = lazyUtilColors().shouldColorize(process.stderr);\r\n        const msg = formatWithOptions({ colors }, ...args);\r\n        const coloredPID = inspect(pid, { colors });\r\n        process.stderr.write(format('%s %s: %s\\n', set, coloredPID, msg));\r\n      };\r\n    } else {\r\n      debugImpls[set] = noop;\r\n    }\r\n  }\r\n  return debugImpls[set];\r\n}\r\n\r\n// debuglogImpl depends on process.pid and process.env.NODE_DEBUG,\r\n// so it needs to be called lazily in top scopes of internal modules\r\n// that may be loaded before these run time states are allowed to\r\n// be accessed.\r\nfunction debuglog(set, cb) {\r\n  function init() {\r\n    set = StringPrototypeToUpperCase(set);\r\n    enabled = testEnabled(set);\r\n  }\r\n  let debug = (...args) => {\r\n    init();\r\n    // Only invokes debuglogImpl() when the debug function is\r\n    // called for the first time.\r\n    debug = debuglogImpl(enabled, set);\r\n    if (typeof cb === 'function')\r\n      cb(debug);\r\n    switch (args.length) {\r\n      case 1: return debug(args[0]);\r\n      case 2: return debug(args[0], args[1]);\r\n      default: return debug(...new SafeArrayIterator(args));\r\n    }\r\n  };\r\n  let enabled;\r\n  let test = () => {\r\n    init();\r\n    test = () => enabled;\r\n    return enabled;\r\n  };\r\n  const logger = (...args) => {\r\n    switch (args.length) {\r\n      case 1: return debug(args[0]);\r\n      case 2: return debug(args[0], args[1]);\r\n      default: return debug(...new SafeArrayIterator(args));\r\n    }\r\n  };\r\n  ObjectDefineProperty(logger, 'enabled', {\r\n    __proto__: null,\r\n    get() {\r\n      return test();\r\n    },\r\n    configurable: true,\r\n    enumerable: true,\r\n  });\r\n  return logger;\r\n}\r\n\r\nfunction pad(value) {\r\n  return StringPrototypePadStart(`${value}`, 2, '0');\r\n}\r\n\r\nconst kNone = 1 << 0;\r\nconst kSkipLog = 1 << 1;\r\nconst kSkipTrace = 1 << 2;\r\n\r\nconst kSecond = 1000;\r\nconst kMinute = 60 * kSecond;\r\nconst kHour = 60 * kMinute;\r\n\r\nfunction formatTime(ms) {\r\n  let hours = 0;\r\n  let minutes = 0;\r\n  let seconds = 0;\r\n\r\n  if (ms >= kSecond) {\r\n    if (ms >= kMinute) {\r\n      if (ms >= kHour) {\r\n        hours = MathFloor(ms / kHour);\r\n        ms = ms % kHour;\r\n      }\r\n      minutes = MathFloor(ms / kMinute);\r\n      ms = ms % kMinute;\r\n    }\r\n    seconds = ms / kSecond;\r\n  }\r\n\r\n  if (hours !== 0 || minutes !== 0) {\r\n    ({ 0: seconds, 1: ms } = StringPrototypeSplit(\r\n      NumberPrototypeToFixed(seconds, 3),\r\n      '.',\r\n    ));\r\n    const res = hours !== 0 ? `${hours}:${pad(minutes)}` : minutes;\r\n    return `${res}:${pad(seconds)}.${ms} (${hours !== 0 ? 'h:m' : ''}m:ss.mmm)`;\r\n  }\r\n\r\n  if (seconds !== 0) {\r\n    return `${NumberPrototypeToFixed(seconds, 3)}s`;\r\n  }\r\n\r\n  return `${Number(NumberPrototypeToFixed(ms, 3))}ms`;\r\n}\r\n\r\nfunction safeTraceLabel(label) {\r\n  return label.replace(/\\\\/g, '\\\\\\\\');\r\n}\r\n\r\n/**\r\n * @typedef {(label: string, timeFormatted: string, args?: any[]) => void} LogImpl\r\n */\r\n\r\n/**\r\n * Returns true if label was found\r\n * @param {string} timesStore\r\n * @param {string} implementation\r\n * @param {LogImpl} logImp\r\n * @param {string} label\r\n * @param {any} args\r\n * @returns {void}\r\n */\r\nfunction timeLogImpl(timesStore, implementation, logImp, label, args) {\r\n  const time = timesStore.get(label);\r\n  if (time === undefined) {\r\n    process.emitWarning(`No such label '${label}' for ${implementation}`);\r\n    return;\r\n  }\r\n\r\n  const duration = process.hrtime(time);\r\n  const ms = duration[0] * 1000 + duration[1] / 1e6;\r\n\r\n  const formatted = formatTime(ms);\r\n\r\n  if (args === undefined) {\r\n    logImp(label, formatted);\r\n  } else {\r\n    logImp(label, formatted, args);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {SafeMap} timesStore\r\n * @param {string} traceCategory\r\n * @param {string} implementation\r\n * @param {number} timerFlags\r\n * @param {string} logLabel\r\n * @param {string} traceLabel\r\n * @returns {void}\r\n */\r\nfunction time(timesStore, traceCategory, implementation, timerFlags, logLabel = 'default', traceLabel = undefined) {\r\n  // Coerces everything other than Symbol to a string\r\n  logLabel = `${logLabel}`;\r\n\r\n  if (traceLabel !== undefined) {\r\n    traceLabel = `${traceLabel}`;\r\n  } else {\r\n    traceLabel = logLabel;\r\n  }\r\n\r\n  if (timesStore.has(logLabel)) {\r\n    process.emitWarning(`Label '${logLabel}' already exists for ${implementation}`);\r\n    return;\r\n  }\r\n\r\n  if ((timerFlags & kSkipTrace) === 0) {\r\n    traceLabel = safeTraceLabel(traceLabel);\r\n    trace(kTraceBegin, traceCategory, traceLabel, 0);\r\n  }\r\n\r\n  timesStore.set(logLabel, process.hrtime());\r\n}\r\n\r\n/**\r\n * @param {SafeMap} timesStore\r\n * @param {string} traceCategory\r\n * @param {string} implementation\r\n * @param {number} timerFlags\r\n * @param {LogImpl} logImpl\r\n * @param {string} logLabel\r\n * @param {string} traceLabel\r\n * @returns {void}\r\n */\r\nfunction timeEnd(\r\n  timesStore,\r\n  traceCategory,\r\n  implementation,\r\n  timerFlags,\r\n  logImpl,\r\n  logLabel = 'default',\r\n  traceLabel = undefined,\r\n) {\r\n  // Coerces everything other than Symbol to a string\r\n  logLabel = `${logLabel}`;\r\n\r\n  if (traceLabel !== undefined) {\r\n    traceLabel = `${traceLabel}`;\r\n  } else {\r\n    traceLabel = logLabel;\r\n  }\r\n\r\n  if ((timerFlags & kSkipLog) === 0) {\r\n    timeLogImpl(timesStore, implementation, logImpl, logLabel);\r\n  }\r\n\r\n  if ((timerFlags & kSkipTrace) === 0) {\r\n    traceLabel = safeTraceLabel(traceLabel);\r\n    trace(kTraceEnd, traceCategory, traceLabel, 0);\r\n  }\r\n\r\n  timesStore.delete(logLabel);\r\n}\r\n\r\n/**\r\n * @param {SafeMap} timesStore\r\n * @param {string} traceCategory\r\n * @param {string} implementation\r\n * @param {number} timerFlags\r\n * @param {LogImpl} logImpl\r\n * @param {string} logLabel\r\n * @param {string} traceLabel\r\n * @param {any[]} args\r\n * @returns {void}\r\n */\r\nfunction timeLog(\r\n  timesStore,\r\n  traceCategory,\r\n  implementation,\r\n  timerFlags,\r\n  logImpl,\r\n  logLabel = 'default',\r\n  traceLabel = undefined,\r\n  args,\r\n) {\r\n  // Coerces everything other than Symbol to a string\r\n  logLabel = `${logLabel}`;\r\n\r\n  if (traceLabel !== undefined) {\r\n    traceLabel = `${traceLabel}`;\r\n  } else {\r\n    traceLabel = logLabel;\r\n  }\r\n\r\n  if ((timerFlags & kSkipLog) === 0) {\r\n    timeLogImpl(timesStore, implementation, logImpl, logLabel, args);\r\n  }\r\n\r\n  if ((timerFlags & kSkipTrace) === 0) {\r\n    traceLabel = safeTraceLabel(traceLabel);\r\n    trace(kTraceInstant, traceCategory, traceLabel, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * @type {Record<string, SafeMap>}\r\n */\r\nlet tracesStores;\r\n\r\n/**\r\n * @typedef {(logLabel: string, traceLabel?: string) => void} TimerStart\r\n */\r\n\r\n/**\r\n * @typedef {(logLabel: string, traceLabel?: string) => void} TimerEnd\r\n */\r\n\r\n/**\r\n * @typedef {(logLabel: string, traceLabel?: string, args?: any[]) => void} TimerLog\r\n */\r\n\r\n/**\r\n * Debuglog with time fns and support for trace\r\n * @param {string} set\r\n * @param {(startTimer: TimerStart, endTimer: TimerEnd, logTimer: TimerLog) => void} cb\r\n * @returns {{startTimer: TimerStart, endTimer: TimerEnd, logTimer: TimerLog}}\r\n */\r\nfunction debugWithTimer(set, cb) {\r\n  set = StringPrototypeToUpperCase(set);\r\n\r\n  if (tracesStores === undefined) {\r\n    tracesStores = { __proto__: null };\r\n  }\r\n\r\n  /**\r\n   * @type {LogImpl}\r\n   */\r\n  function logImpl(label, timeFormatted, args) {\r\n    const pid = process.pid;\r\n    const colors = { colors: lazyUtilColors().shouldColorize(process.stderr) };\r\n    const coloredPID = inspect(pid, colors);\r\n\r\n    if (args === undefined)\r\n      process.stderr.write(format('%s %s %s: %s\\n', set, coloredPID, label, timeFormatted));\r\n    else\r\n      process.stderr.write(\r\n        format(\r\n          '%s %s %s: %s\\n',\r\n          set,\r\n          coloredPID,\r\n          label,\r\n          timeFormatted,\r\n          ...new SafeArrayIterator(args),\r\n        ),\r\n      );\r\n  }\r\n\r\n  const kTraceCategory = `node,node.${StringPrototypeToLowerCase(set)}`;\r\n  let debugLogCategoryEnabled = false;\r\n  let traceCategoryEnabled = false;\r\n  let timerFlags = kNone;\r\n\r\n  /**\r\n   * @type {TimerStart}\r\n   */\r\n  function internalStartTimer(logLabel, traceLabel) {\r\n    time(\r\n      tracesStores[set],\r\n      kTraceCategory,\r\n      'debuglog.time',\r\n      timerFlags,\r\n      logLabel,\r\n      traceLabel,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @type {TimerEnd}\r\n   */\r\n  function internalEndTimer(logLabel, traceLabel) {\r\n    timeEnd(\r\n      tracesStores[set],\r\n      kTraceCategory,\r\n      'debuglog.timeEnd',\r\n      timerFlags,\r\n      logImpl,\r\n      logLabel,\r\n      traceLabel,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @type {TimerLog}\r\n   */\r\n  function internalLogTimer(logLabel, traceLabel, args) {\r\n    timeLog(\r\n      tracesStores[set],\r\n      kTraceCategory,\r\n      'debuglog.timeLog',\r\n      timerFlags,\r\n      logImpl,\r\n      logLabel,\r\n      traceLabel,\r\n      args,\r\n    );\r\n  }\r\n\r\n  function init() {\r\n    if (tracesStores[set] === undefined) {\r\n      tracesStores[set] = new SafeMap();\r\n    }\r\n    emitWarningIfNeeded(set);\r\n    debugLogCategoryEnabled = testEnabled(set);\r\n    traceCategoryEnabled = isTraceCategoryEnabled(kTraceCategory);\r\n\r\n    if (!debugLogCategoryEnabled) {\r\n      timerFlags |= kSkipLog;\r\n    }\r\n\r\n    if (!traceCategoryEnabled) {\r\n      timerFlags |= kSkipTrace;\r\n    }\r\n\r\n    // TODO(H4ad): support traceCategory being enabled dynamically\r\n    if (debugLogCategoryEnabled || traceCategoryEnabled)\r\n      cb(internalStartTimer, internalEndTimer, internalLogTimer);\r\n    else\r\n      cb(noop, noop, noop);\r\n  }\r\n\r\n  /**\r\n   * @type {TimerStart}\r\n   */\r\n  const startTimer = (logLabel, traceLabel) => {\r\n    init();\r\n\r\n    if (debugLogCategoryEnabled || traceCategoryEnabled)\r\n      internalStartTimer(logLabel, traceLabel);\r\n  };\r\n\r\n  /**\r\n   * @type {TimerEnd}\r\n   */\r\n  const endTimer = (logLabel, traceLabel) => {\r\n    init();\r\n\r\n    if (debugLogCategoryEnabled || traceCategoryEnabled)\r\n      internalEndTimer(logLabel, traceLabel);\r\n  };\r\n\r\n  /**\r\n   * @type {TimerLog}\r\n   */\r\n  const logTimer = (logLabel, traceLabel, args) => {\r\n    init();\r\n\r\n    if (debugLogCategoryEnabled || traceCategoryEnabled)\r\n      internalLogTimer(logLabel, traceLabel, args);\r\n  };\r\n\r\n  return {\r\n    startTimer,\r\n    endTimer,\r\n    logTimer,\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  kNone,\r\n  kSkipLog,\r\n  kSkipTrace,\r\n  formatTime,\r\n  time,\r\n  timeEnd,\r\n  timeLog,\r\n  debuglog,\r\n  debugWithTimer,\r\n  initializeDebugEnv,\r\n};\r\n"
  },
  "21": {
    "metadata": {
      "scriptId": "21",
      "url": "node:events",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1227,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "ec2ff7b3f79864c490cab2c9c994f6b70cc8faf07255bf9dec030d1eafc0fc7f",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 37250,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:events"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypePop,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSplice,\r\n  ArrayPrototypeUnshift,\r\n  Boolean,\r\n  Error,\r\n  ErrorCaptureStackTrace,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeCall,\r\n  NumberMAX_SAFE_INTEGER,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectGetPrototypeOf,\r\n  ObjectSetPrototypeOf,\r\n  Promise,\r\n  PromiseReject,\r\n  PromiseResolve,\r\n  ReflectApply,\r\n  ReflectOwnKeys,\r\n  String,\r\n  StringPrototypeSplit,\r\n  Symbol,\r\n  SymbolAsyncIterator,\r\n  SymbolDispose,\r\n  SymbolFor,\r\n} = primordials;\r\nconst kRejection = SymbolFor('nodejs.rejection');\r\n\r\nconst { kEmptyObject } = require('internal/util');\r\n\r\nconst {\r\n  inspect,\r\n  identicalSequenceRange,\r\n} = require('internal/util/inspect');\r\n\r\nlet spliceOne;\r\nlet FixedQueue;\r\nlet kFirstEventParam;\r\nlet kResistStopPropagation;\r\n\r\nconst {\r\n  AbortError,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_THIS,\r\n    ERR_UNHANDLED_ERROR,\r\n  },\r\n  genericNodeError,\r\n  kEnhanceStackBeforeInspector,\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateInteger,\r\n  validateAbortSignal,\r\n  validateBoolean,\r\n  validateFunction,\r\n  validateNumber,\r\n  validateObject,\r\n  validateString,\r\n} = require('internal/validators');\r\nconst { addAbortListener } = require('internal/events/abort_listener');\r\n\r\nconst kCapture = Symbol('kCapture');\r\nconst kErrorMonitor = Symbol('events.errorMonitor');\r\nconst kShapeMode = Symbol('shapeMode');\r\nconst kMaxEventTargetListeners = Symbol('events.maxEventTargetListeners');\r\nconst kMaxEventTargetListenersWarned =\r\n  Symbol('events.maxEventTargetListenersWarned');\r\nconst kWatermarkData = SymbolFor('nodejs.watermarkData');\r\n\r\nlet EventEmitterAsyncResource;\r\n// The EventEmitterAsyncResource has to be initialized lazily because event.js\r\n// is loaded so early in the bootstrap process, before async_hooks is available.\r\n//\r\n// This implementation was adapted straight from addaleax's\r\n// eventemitter-asyncresource MIT-licensed userland module.\r\n// https://github.com/addaleax/eventemitter-asyncresource\r\nfunction lazyEventEmitterAsyncResource() {\r\n  if (EventEmitterAsyncResource === undefined) {\r\n    const {\r\n      AsyncResource,\r\n    } = require('async_hooks');\r\n\r\n    const kEventEmitter = Symbol('kEventEmitter');\r\n    const kAsyncResource = Symbol('kAsyncResource');\r\n    class EventEmitterReferencingAsyncResource extends AsyncResource {\r\n      /**\r\n       * @param {EventEmitter} ee\r\n       * @param {string} [type]\r\n       * @param {{\r\n       *   triggerAsyncId?: number,\r\n       *   requireManualDestroy?: boolean,\r\n       * }} [options]\r\n       */\r\n      constructor(ee, type, options) {\r\n        super(type, options);\r\n        this[kEventEmitter] = ee;\r\n      }\r\n\r\n      /**\r\n       * @type {EventEmitter}\r\n       */\r\n      get eventEmitter() {\r\n        if (this[kEventEmitter] === undefined)\r\n          throw new ERR_INVALID_THIS('EventEmitterReferencingAsyncResource');\r\n        return this[kEventEmitter];\r\n      }\r\n    }\r\n\r\n    EventEmitterAsyncResource =\r\n      class EventEmitterAsyncResource extends EventEmitter {\r\n        /**\r\n         * @param {{\r\n         *   name?: string,\r\n         *   triggerAsyncId?: number,\r\n         *   requireManualDestroy?: boolean,\r\n         * }} [options]\r\n         */\r\n        constructor(options = undefined) {\r\n          let name;\r\n          if (typeof options === 'string') {\r\n            name = options;\r\n            options = undefined;\r\n          } else {\r\n            if (new.target === EventEmitterAsyncResource) {\r\n              validateString(options?.name, 'options.name');\r\n            }\r\n            name = options?.name || new.target.name;\r\n          }\r\n          super(options);\r\n\r\n          this[kAsyncResource] =\r\n            new EventEmitterReferencingAsyncResource(this, name, options);\r\n        }\r\n\r\n        /**\r\n         * @param {symbol,string} event\r\n         * @param  {...any} args\r\n         * @returns {boolean}\r\n         */\r\n        emit(event, ...args) {\r\n          if (this[kAsyncResource] === undefined)\r\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\r\n          const { asyncResource } = this;\r\n          ArrayPrototypeUnshift(args, super.emit, this, event);\r\n          return ReflectApply(asyncResource.runInAsyncScope, asyncResource,\r\n                              args);\r\n        }\r\n\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        emitDestroy() {\r\n          if (this[kAsyncResource] === undefined)\r\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\r\n          this.asyncResource.emitDestroy();\r\n        }\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        get asyncId() {\r\n          if (this[kAsyncResource] === undefined)\r\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\r\n          return this.asyncResource.asyncId();\r\n        }\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        get triggerAsyncId() {\r\n          if (this[kAsyncResource] === undefined)\r\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\r\n          return this.asyncResource.triggerAsyncId();\r\n        }\r\n\r\n        /**\r\n         * @type {EventEmitterReferencingAsyncResource}\r\n         */\r\n        get asyncResource() {\r\n          if (this[kAsyncResource] === undefined)\r\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\r\n          return this[kAsyncResource];\r\n        }\r\n      };\r\n  }\r\n  return EventEmitterAsyncResource;\r\n}\r\n\r\n/**\r\n * Creates a new `EventEmitter` instance.\r\n * @param {{ captureRejections?: boolean; }} [opts]\r\n * @constructs {EventEmitter}\r\n */\r\nfunction EventEmitter(opts) {\r\n  EventEmitter.init.call(this, opts);\r\n}\r\nmodule.exports = EventEmitter;\r\nmodule.exports.addAbortListener = addAbortListener;\r\nmodule.exports.once = once;\r\nmodule.exports.on = on;\r\nmodule.exports.getEventListeners = getEventListeners;\r\nmodule.exports.getMaxListeners = getMaxListeners;\r\n// Backwards-compat with node 0.10.x\r\nEventEmitter.EventEmitter = EventEmitter;\r\n\r\nEventEmitter.usingDomains = false;\r\n\r\nEventEmitter.captureRejectionSymbol = kRejection;\r\nObjectDefineProperty(EventEmitter, 'captureRejections', {\r\n  __proto__: null,\r\n  get() {\r\n    return EventEmitter.prototype[kCapture];\r\n  },\r\n  set(value) {\r\n    validateBoolean(value, 'EventEmitter.captureRejections');\r\n\r\n    EventEmitter.prototype[kCapture] = value;\r\n  },\r\n  enumerable: true,\r\n});\r\n\r\nObjectDefineProperty(EventEmitter, 'EventEmitterAsyncResource', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get: lazyEventEmitterAsyncResource,\r\n  set: undefined,\r\n  configurable: true,\r\n});\r\n\r\nEventEmitter.errorMonitor = kErrorMonitor;\r\n\r\n// The default for captureRejections is false\r\nObjectDefineProperty(EventEmitter.prototype, kCapture, {\r\n  __proto__: null,\r\n  value: false,\r\n  writable: true,\r\n  enumerable: false,\r\n});\r\n\r\nEventEmitter.prototype._events = undefined;\r\nEventEmitter.prototype._eventsCount = 0;\r\nEventEmitter.prototype._maxListeners = undefined;\r\n\r\n// By default EventEmitters will print a warning if more than 10 listeners are\r\n// added to it. This is a useful default which helps finding memory leaks.\r\nlet defaultMaxListeners = 10;\r\nlet isEventTarget;\r\n\r\nfunction checkListener(listener) {\r\n  validateFunction(listener, 'listener');\r\n}\r\n\r\nObjectDefineProperty(EventEmitter, 'defaultMaxListeners', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get: function() {\r\n    return defaultMaxListeners;\r\n  },\r\n  set: function(arg) {\r\n    validateNumber(arg, 'defaultMaxListeners', 0);\r\n    defaultMaxListeners = arg;\r\n  },\r\n});\r\n\r\nObjectDefineProperties(EventEmitter, {\r\n  kMaxEventTargetListeners: {\r\n    __proto__: null,\r\n    value: kMaxEventTargetListeners,\r\n    enumerable: false,\r\n    configurable: false,\r\n    writable: false,\r\n  },\r\n  kMaxEventTargetListenersWarned: {\r\n    __proto__: null,\r\n    value: kMaxEventTargetListenersWarned,\r\n    enumerable: false,\r\n    configurable: false,\r\n    writable: false,\r\n  },\r\n});\r\n\r\n/**\r\n * Sets the max listeners.\r\n * @param {number} n\r\n * @param {EventTarget[] | EventEmitter[]} [eventTargets]\r\n * @returns {void}\r\n */\r\nEventEmitter.setMaxListeners =\r\n  function(n = defaultMaxListeners, ...eventTargets) {\r\n    validateNumber(n, 'setMaxListeners', 0);\r\n    if (eventTargets.length === 0) {\r\n      defaultMaxListeners = n;\r\n    } else {\r\n      if (isEventTarget === undefined)\r\n        isEventTarget = require('internal/event_target').isEventTarget;\r\n\r\n      for (let i = 0; i < eventTargets.length; i++) {\r\n        const target = eventTargets[i];\r\n        if (isEventTarget(target)) {\r\n          target[kMaxEventTargetListeners] = n;\r\n          target[kMaxEventTargetListenersWarned] = false;\r\n        } else if (typeof target.setMaxListeners === 'function') {\r\n          target.setMaxListeners(n);\r\n        } else {\r\n          throw new ERR_INVALID_ARG_TYPE(\r\n            'eventTargets',\r\n            ['EventEmitter', 'EventTarget'],\r\n            target);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n// If you're updating this function definition, please also update any\r\n// re-definitions, such as the one in the Domain module (lib/domain.js).\r\nEventEmitter.init = function(opts) {\r\n\r\n  if (this._events === undefined ||\r\n      this._events === ObjectGetPrototypeOf(this)._events) {\r\n    this._events = { __proto__: null };\r\n    this._eventsCount = 0;\r\n    this[kShapeMode] = false;\r\n  } else {\r\n    this[kShapeMode] = true;\r\n  }\r\n\r\n  this._maxListeners = this._maxListeners || undefined;\r\n\r\n\r\n  if (opts?.captureRejections) {\r\n    validateBoolean(opts.captureRejections, 'options.captureRejections');\r\n    this[kCapture] = Boolean(opts.captureRejections);\r\n  } else {\r\n    // Assigning the kCapture property directly saves an expensive\r\n    // prototype lookup in a very sensitive hot path.\r\n    this[kCapture] = EventEmitter.prototype[kCapture];\r\n  }\r\n};\r\n\r\nfunction addCatch(that, promise, type, args) {\r\n  if (!that[kCapture]) {\r\n    return;\r\n  }\r\n\r\n  // Handle Promises/A+ spec, then could be a getter\r\n  // that throws on second use.\r\n  try {\r\n    const then = promise.then;\r\n\r\n    if (typeof then === 'function') {\r\n      then.call(promise, undefined, function(err) {\r\n        // The callback is called with nextTick to avoid a follow-up\r\n        // rejection from this promise.\r\n        process.nextTick(emitUnhandledRejectionOrErr, that, err, type, args);\r\n      });\r\n    }\r\n  } catch (err) {\r\n    that.emit('error', err);\r\n  }\r\n}\r\n\r\nfunction emitUnhandledRejectionOrErr(ee, err, type, args) {\r\n  if (typeof ee[kRejection] === 'function') {\r\n    ee[kRejection](err, type, ...args);\r\n  } else {\r\n    // We have to disable the capture rejections mechanism, otherwise\r\n    // we might end up in an infinite loop.\r\n    const prev = ee[kCapture];\r\n\r\n    // If the error handler throws, it is not catchable and it\r\n    // will end up in 'uncaughtException'. We restore the previous\r\n    // value of kCapture in case the uncaughtException is present\r\n    // and the exception is handled.\r\n    try {\r\n      ee[kCapture] = false;\r\n      ee.emit('error', err);\r\n    } finally {\r\n      ee[kCapture] = prev;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Increases the max listeners of the event emitter.\r\n * @param {number} n\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\r\n  validateNumber(n, 'setMaxListeners', 0);\r\n  this._maxListeners = n;\r\n  return this;\r\n};\r\n\r\nfunction _getMaxListeners(that) {\r\n  if (that._maxListeners === undefined)\r\n    return EventEmitter.defaultMaxListeners;\r\n  return that._maxListeners;\r\n}\r\n\r\n/**\r\n * Returns the current max listener value for the event emitter.\r\n * @returns {number}\r\n */\r\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\r\n  return _getMaxListeners(this);\r\n};\r\n\r\nfunction enhanceStackTrace(err, own) {\r\n  let ctorInfo = '';\r\n  try {\r\n    const { name } = this.constructor;\r\n    if (name !== 'EventEmitter')\r\n      ctorInfo = ` on ${name} instance`;\r\n  } catch {\r\n    // Continue regardless of error.\r\n  }\r\n  const sep = `\\nEmitted 'error' event${ctorInfo} at:\\n`;\r\n\r\n  const errStack = ArrayPrototypeSlice(\r\n    StringPrototypeSplit(err.stack, '\\n'), 1);\r\n  const ownStack = ArrayPrototypeSlice(\r\n    StringPrototypeSplit(own.stack, '\\n'), 1);\r\n\r\n  const { len, offset } = identicalSequenceRange(ownStack, errStack);\r\n  if (len > 0) {\r\n    ArrayPrototypeSplice(ownStack, offset + 1, len - 2,\r\n                         '    [... lines matching original stack trace ...]');\r\n  }\r\n\r\n  return err.stack + sep + ArrayPrototypeJoin(ownStack, '\\n');\r\n}\r\n\r\n/**\r\n * Synchronously calls each of the listeners registered\r\n * for the event.\r\n * @param {string | symbol} type\r\n * @param {...any} [args]\r\n * @returns {boolean}\r\n */\r\nEventEmitter.prototype.emit = function emit(type, ...args) {\r\n  let doError = (type === 'error');\r\n\r\n  const events = this._events;\r\n  if (events !== undefined) {\r\n    if (doError && events[kErrorMonitor] !== undefined)\r\n      this.emit(kErrorMonitor, ...args);\r\n    doError = (doError && events.error === undefined);\r\n  } else if (!doError)\r\n    return false;\r\n\r\n  // If there is no 'error' event listener then throw.\r\n  if (doError) {\r\n    let er;\r\n    if (args.length > 0)\r\n      er = args[0];\r\n    if (er instanceof Error) {\r\n      try {\r\n        const capture = {};\r\n        ErrorCaptureStackTrace(capture, EventEmitter.prototype.emit);\r\n        ObjectDefineProperty(er, kEnhanceStackBeforeInspector, {\r\n          __proto__: null,\r\n          value: FunctionPrototypeBind(enhanceStackTrace, this, er, capture),\r\n          configurable: true,\r\n        });\r\n      } catch {\r\n        // Continue regardless of error.\r\n      }\r\n\r\n      // Note: The comments on the `throw` lines are intentional, they show\r\n      // up in Node's output if this results in an unhandled exception.\r\n      throw er; // Unhandled 'error' event\r\n    }\r\n\r\n    let stringifiedEr;\r\n    try {\r\n      stringifiedEr = inspect(er);\r\n    } catch {\r\n      stringifiedEr = er;\r\n    }\r\n\r\n    // At least give some kind of context to the user\r\n    const err = new ERR_UNHANDLED_ERROR(stringifiedEr);\r\n    err.context = er;\r\n    throw err; // Unhandled 'error' event\r\n  }\r\n\r\n  const handler = events[type];\r\n\r\n  if (handler === undefined)\r\n    return false;\r\n\r\n  if (typeof handler === 'function') {\r\n    const result = handler.apply(this, args);\r\n\r\n    // We check if result is undefined first because that\r\n    // is the most common case so we do not pay any perf\r\n    // penalty\r\n    if (result !== undefined && result !== null) {\r\n      addCatch(this, result, type, args);\r\n    }\r\n  } else {\r\n    const len = handler.length;\r\n    const listeners = arrayClone(handler);\r\n    for (let i = 0; i < len; ++i) {\r\n      const result = listeners[i].apply(this, args);\r\n\r\n      // We check if result is undefined first because that\r\n      // is the most common case so we do not pay any perf\r\n      // penalty.\r\n      // This code is duplicated because extracting it away\r\n      // would make it non-inlineable.\r\n      if (result !== undefined && result !== null) {\r\n        addCatch(this, result, type, args);\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction _addListener(target, type, listener, prepend) {\r\n  let m;\r\n  let events;\r\n  let existing;\r\n\r\n  checkListener(listener);\r\n\r\n  events = target._events;\r\n  if (events === undefined) {\r\n    events = target._events = { __proto__: null };\r\n    target._eventsCount = 0;\r\n  } else {\r\n    // To avoid recursion in the case that type === \"newListener\"! Before\r\n    // adding it to the listeners, first emit \"newListener\".\r\n    if (events.newListener !== undefined) {\r\n      target.emit('newListener', type,\r\n                  listener.listener ?? listener);\r\n\r\n      // Re-assign `events` because a newListener handler could have caused the\r\n      // this._events to be assigned to a new object\r\n      events = target._events;\r\n    }\r\n    existing = events[type];\r\n  }\r\n\r\n  if (existing === undefined) {\r\n    // Optimize the case of one listener. Don't need the extra array object.\r\n    events[type] = listener;\r\n    ++target._eventsCount;\r\n  } else {\r\n    if (typeof existing === 'function') {\r\n      // Adding the second element, need to change to array.\r\n      existing = events[type] =\r\n        prepend ? [listener, existing] : [existing, listener];\r\n      // If we've already got an array, just append.\r\n    } else if (prepend) {\r\n      existing.unshift(listener);\r\n    } else {\r\n      existing.push(listener);\r\n    }\r\n\r\n    // Check for listener leak\r\n    m = _getMaxListeners(target);\r\n    if (m > 0 && existing.length > m && !existing.warned) {\r\n      existing.warned = true;\r\n      // No error code for this since it is a Warning\r\n      const w = genericNodeError(\r\n        `Possible EventEmitter memory leak detected. ${existing.length} ${String(type)} listeners ` +\r\n        `added to ${inspect(target, { depth: -1 })}. MaxListeners is ${m}. Use emitter.setMaxListeners() to increase limit`,\r\n        { name: 'MaxListenersExceededWarning', emitter: target, type: type, count: existing.length });\r\n      process.emitWarning(w);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Adds a listener to the event emitter.\r\n * @param {string | symbol} type\r\n * @param {Function} listener\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.addListener = function addListener(type, listener) {\r\n  return _addListener(this, type, listener, false);\r\n};\r\n\r\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\r\n\r\n/**\r\n * Adds the `listener` function to the beginning of\r\n * the listeners array.\r\n * @param {string | symbol} type\r\n * @param {Function} listener\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.prependListener =\r\n    function prependListener(type, listener) {\r\n      return _addListener(this, type, listener, true);\r\n    };\r\n\r\nfunction onceWrapper() {\r\n  if (!this.fired) {\r\n    this.target.removeListener(this.type, this.wrapFn);\r\n    this.fired = true;\r\n    if (arguments.length === 0)\r\n      return this.listener.call(this.target);\r\n    return this.listener.apply(this.target, arguments);\r\n  }\r\n}\r\n\r\nfunction _onceWrap(target, type, listener) {\r\n  const state = { fired: false, wrapFn: undefined, target, type, listener };\r\n  const wrapped = onceWrapper.bind(state);\r\n  wrapped.listener = listener;\r\n  state.wrapFn = wrapped;\r\n  return wrapped;\r\n}\r\n\r\n/**\r\n * Adds a one-time `listener` function to the event emitter.\r\n * @param {string | symbol} type\r\n * @param {Function} listener\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.once = function once(type, listener) {\r\n  checkListener(listener);\r\n\r\n  this.on(type, _onceWrap(this, type, listener));\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds a one-time `listener` function to the beginning of\r\n * the listeners array.\r\n * @param {string | symbol} type\r\n * @param {Function} listener\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.prependOnceListener =\r\n    function prependOnceListener(type, listener) {\r\n      checkListener(listener);\r\n\r\n      this.prependListener(type, _onceWrap(this, type, listener));\r\n      return this;\r\n    };\r\n\r\n/**\r\n * Removes the specified `listener` from the listeners array.\r\n * @param {string | symbol} type\r\n * @param {Function} listener\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.removeListener =\r\n    function removeListener(type, listener) {\r\n      checkListener(listener);\r\n\r\n      const events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      const list = events[type];\r\n      if (list === undefined)\r\n        return this;\r\n\r\n      if (list === listener || list.listener === listener) {\r\n        this._eventsCount -= 1;\r\n\r\n        if (this[kShapeMode]) {\r\n          events[type] = undefined;\r\n        } else if (this._eventsCount === 0) {\r\n          this._events = { __proto__: null };\r\n        } else {\r\n          delete events[type];\r\n          if (events.removeListener)\r\n            this.emit('removeListener', type, list.listener || listener);\r\n        }\r\n      } else if (typeof list !== 'function') {\r\n        let position = -1;\r\n\r\n        for (let i = list.length - 1; i >= 0; i--) {\r\n          if (list[i] === listener || list[i].listener === listener) {\r\n            position = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (position < 0)\r\n          return this;\r\n\r\n        if (position === 0)\r\n          list.shift();\r\n        else {\r\n          if (spliceOne === undefined)\r\n            spliceOne = require('internal/util').spliceOne;\r\n          spliceOne(list, position);\r\n        }\r\n\r\n        if (list.length === 1)\r\n          events[type] = list[0];\r\n\r\n        if (events.removeListener !== undefined)\r\n          this.emit('removeListener', type, listener);\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\r\n\r\n/**\r\n * Removes all listeners from the event emitter. (Only\r\n * removes listeners for a specific event name if specified\r\n * as `type`).\r\n * @param {string | symbol} [type]\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.removeAllListeners =\r\n    function removeAllListeners(type) {\r\n      const events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      // Not listening for removeListener, no need to emit\r\n      if (events.removeListener === undefined) {\r\n        if (arguments.length === 0) {\r\n          this._events = { __proto__: null };\r\n          this._eventsCount = 0;\r\n        } else if (events[type] !== undefined) {\r\n          if (--this._eventsCount === 0)\r\n            this._events = { __proto__: null };\r\n          else\r\n            delete events[type];\r\n        }\r\n        this[kShapeMode] = false;\r\n        return this;\r\n      }\r\n\r\n      // Emit removeListener for all listeners on all events\r\n      if (arguments.length === 0) {\r\n        for (const key of ReflectOwnKeys(events)) {\r\n          if (key === 'removeListener') continue;\r\n          this.removeAllListeners(key);\r\n        }\r\n        this.removeAllListeners('removeListener');\r\n        this._events = { __proto__: null };\r\n        this._eventsCount = 0;\r\n        this[kShapeMode] = false;\r\n        return this;\r\n      }\r\n\r\n      const listeners = events[type];\r\n\r\n      if (typeof listeners === 'function') {\r\n        this.removeListener(type, listeners);\r\n      } else if (listeners !== undefined) {\r\n        // LIFO order\r\n        for (let i = listeners.length - 1; i >= 0; i--) {\r\n          this.removeListener(type, listeners[i]);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nfunction _listeners(target, type, unwrap) {\r\n  const events = target._events;\r\n\r\n  if (events === undefined)\r\n    return [];\r\n\r\n  const evlistener = events[type];\r\n  if (evlistener === undefined)\r\n    return [];\r\n\r\n  if (typeof evlistener === 'function')\r\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\r\n\r\n  return unwrap ?\r\n    unwrapListeners(evlistener) : arrayClone(evlistener);\r\n}\r\n\r\n/**\r\n * Returns a copy of the array of listeners for the event name\r\n * specified as `type`.\r\n * @param {string | symbol} type\r\n * @returns {Function[]}\r\n */\r\nEventEmitter.prototype.listeners = function listeners(type) {\r\n  return _listeners(this, type, true);\r\n};\r\n\r\n/**\r\n * Returns a copy of the array of listeners and wrappers for\r\n * the event name specified as `type`.\r\n * @param {string | symbol} type\r\n * @returns {Function[]}\r\n */\r\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\r\n  return _listeners(this, type, false);\r\n};\r\n\r\n/**\r\n * Returns the number of listeners listening to the event name\r\n * specified as `type`.\r\n * @deprecated since v3.2.0\r\n * @param {EventEmitter} emitter\r\n * @param {string | symbol} type\r\n * @returns {number}\r\n */\r\nEventEmitter.listenerCount = function(emitter, type) {\r\n  if (typeof emitter.listenerCount === 'function') {\r\n    return emitter.listenerCount(type);\r\n  }\r\n  return FunctionPrototypeCall(listenerCount, emitter, type);\r\n};\r\n\r\nEventEmitter.prototype.listenerCount = listenerCount;\r\n\r\n/**\r\n * Returns the number of listeners listening to event name\r\n * specified as `type`.\r\n * @param {string | symbol} type\r\n * @param {Function} listener\r\n * @returns {number}\r\n */\r\nfunction listenerCount(type, listener) {\r\n  const events = this._events;\r\n\r\n  if (events !== undefined) {\r\n    const evlistener = events[type];\r\n\r\n    if (typeof evlistener === 'function') {\r\n      if (listener != null) {\r\n        return listener === evlistener || listener === evlistener.listener ? 1 : 0;\r\n      }\r\n\r\n      return 1;\r\n    } else if (evlistener !== undefined) {\r\n      if (listener != null) {\r\n        let matching = 0;\r\n\r\n        for (let i = 0, l = evlistener.length; i < l; i++) {\r\n          if (evlistener[i] === listener || evlistener[i].listener === listener) {\r\n            matching++;\r\n          }\r\n        }\r\n\r\n        return matching;\r\n      }\r\n\r\n      return evlistener.length;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Returns an array listing the events for which\r\n * the emitter has registered listeners.\r\n * @returns {any[]}\r\n */\r\nEventEmitter.prototype.eventNames = function eventNames() {\r\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\r\n};\r\n\r\nfunction arrayClone(arr) {\r\n  // At least since V8 8.3, this implementation is faster than the previous\r\n  // which always used a simple for-loop\r\n  switch (arr.length) {\r\n    case 2: return [arr[0], arr[1]];\r\n    case 3: return [arr[0], arr[1], arr[2]];\r\n    case 4: return [arr[0], arr[1], arr[2], arr[3]];\r\n    case 5: return [arr[0], arr[1], arr[2], arr[3], arr[4]];\r\n    case 6: return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]];\r\n  }\r\n  return ArrayPrototypeSlice(arr);\r\n}\r\n\r\nfunction unwrapListeners(arr) {\r\n  const ret = arrayClone(arr);\r\n  for (let i = 0; i < ret.length; ++i) {\r\n    const orig = ret[i].listener;\r\n    if (typeof orig === 'function')\r\n      ret[i] = orig;\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Returns a copy of the array of listeners for the event name\r\n * specified as `type`.\r\n * @param {EventEmitter | EventTarget} emitterOrTarget\r\n * @param {string | symbol} type\r\n * @returns {Function[]}\r\n */\r\nfunction getEventListeners(emitterOrTarget, type) {\r\n  // First check if EventEmitter\r\n  if (typeof emitterOrTarget.listeners === 'function') {\r\n    return emitterOrTarget.listeners(type);\r\n  }\r\n  // Require event target lazily to avoid always loading it\r\n  const { isEventTarget, kEvents } = require('internal/event_target');\r\n  if (isEventTarget(emitterOrTarget)) {\r\n    const root = emitterOrTarget[kEvents].get(type);\r\n    const listeners = [];\r\n    let handler = root?.next;\r\n    while (handler?.listener !== undefined) {\r\n      const listener = handler.listener?.deref ?\r\n        handler.listener.deref() : handler.listener;\r\n      listeners.push(listener);\r\n      handler = handler.next;\r\n    }\r\n    return listeners;\r\n  }\r\n  throw new ERR_INVALID_ARG_TYPE('emitter',\r\n                                 ['EventEmitter', 'EventTarget'],\r\n                                 emitterOrTarget);\r\n}\r\n\r\n/**\r\n * Returns the max listeners set.\r\n * @param {EventEmitter | EventTarget} emitterOrTarget\r\n * @returns {number}\r\n */\r\nfunction getMaxListeners(emitterOrTarget) {\r\n  if (typeof emitterOrTarget?.getMaxListeners === 'function') {\r\n    return _getMaxListeners(emitterOrTarget);\r\n  } else if (emitterOrTarget?.[kMaxEventTargetListeners]) {\r\n    return emitterOrTarget[kMaxEventTargetListeners];\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE('emitter',\r\n                                 ['EventEmitter', 'EventTarget'],\r\n                                 emitterOrTarget);\r\n}\r\n\r\n/**\r\n * Creates a `Promise` that is fulfilled when the emitter\r\n * emits the given event.\r\n * @param {EventEmitter} emitter\r\n * @param {string} name\r\n * @param {{ signal: AbortSignal; }} [options]\r\n * @returns {Promise}\r\n */\r\nasync function once(emitter, name, options = kEmptyObject) {\r\n  validateObject(options, 'options');\r\n  const signal = options?.signal;\r\n  validateAbortSignal(signal, 'options.signal');\r\n  if (signal?.aborted)\r\n    throw new AbortError(undefined, { cause: signal?.reason });\r\n  return new Promise((resolve, reject) => {\r\n    const errorListener = (err) => {\r\n      emitter.removeListener(name, resolver);\r\n      if (signal != null) {\r\n        eventTargetAgnosticRemoveListener(signal, 'abort', abortListener);\r\n      }\r\n      reject(err);\r\n    };\r\n    const resolver = (...args) => {\r\n      if (typeof emitter.removeListener === 'function') {\r\n        emitter.removeListener('error', errorListener);\r\n      }\r\n      if (signal != null) {\r\n        eventTargetAgnosticRemoveListener(signal, 'abort', abortListener);\r\n      }\r\n      resolve(args);\r\n    };\r\n\r\n    kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;\r\n    const opts = { __proto__: null, once: true, [kResistStopPropagation]: true };\r\n    eventTargetAgnosticAddListener(emitter, name, resolver, opts);\r\n    if (name !== 'error' && typeof emitter.once === 'function') {\r\n      // EventTarget does not have `error` event semantics like Node\r\n      // EventEmitters, we listen to `error` events only on EventEmitters.\r\n      emitter.once('error', errorListener);\r\n    }\r\n    function abortListener() {\r\n      eventTargetAgnosticRemoveListener(emitter, name, resolver);\r\n      eventTargetAgnosticRemoveListener(emitter, 'error', errorListener);\r\n      reject(new AbortError(undefined, { cause: signal?.reason }));\r\n    }\r\n    if (signal != null) {\r\n      eventTargetAgnosticAddListener(\r\n        signal, 'abort', abortListener, { __proto__: null, once: true, [kResistStopPropagation]: true });\r\n    }\r\n  });\r\n}\r\n\r\nconst AsyncIteratorPrototype = ObjectGetPrototypeOf(\r\n  ObjectGetPrototypeOf(async function* () {}).prototype);\r\n\r\nfunction createIterResult(value, done) {\r\n  return { value, done };\r\n}\r\n\r\nfunction eventTargetAgnosticRemoveListener(emitter, name, listener, flags) {\r\n  if (typeof emitter.removeListener === 'function') {\r\n    emitter.removeListener(name, listener);\r\n  } else if (typeof emitter.removeEventListener === 'function') {\r\n    emitter.removeEventListener(name, listener, flags);\r\n  } else {\r\n    throw new ERR_INVALID_ARG_TYPE('emitter', 'EventEmitter', emitter);\r\n  }\r\n}\r\n\r\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\r\n  if (typeof emitter.on === 'function') {\r\n    if (flags?.once) {\r\n      emitter.once(name, listener);\r\n    } else {\r\n      emitter.on(name, listener);\r\n    }\r\n  } else if (typeof emitter.addEventListener === 'function') {\r\n    emitter.addEventListener(name, listener, flags);\r\n  } else {\r\n    throw new ERR_INVALID_ARG_TYPE('emitter', 'EventEmitter', emitter);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns an `AsyncIterator` that iterates `event` events.\r\n * @param {EventEmitter} emitter\r\n * @param {string | symbol} event\r\n * @param {{\r\n *    signal: AbortSignal;\r\n *    close?: string[];\r\n *    highWaterMark?: number,\r\n *    lowWaterMark?: number\r\n *   }} [options]\r\n * @returns {AsyncIterator}\r\n */\r\nfunction on(emitter, event, options = kEmptyObject) {\r\n  // Parameters validation\r\n  validateObject(options, 'options');\r\n  const signal = options.signal;\r\n  validateAbortSignal(signal, 'options.signal');\r\n  if (signal?.aborted)\r\n    throw new AbortError(undefined, { cause: signal?.reason });\r\n  // Support both highWaterMark and highWatermark for backward compatibility\r\n  const highWatermark = options.highWaterMark ?? options.highWatermark ?? NumberMAX_SAFE_INTEGER;\r\n  validateInteger(highWatermark, 'options.highWaterMark', 1);\r\n  // Support both lowWaterMark and lowWatermark for backward compatibility\r\n  const lowWatermark = options.lowWaterMark ?? options.lowWatermark ?? 1;\r\n  validateInteger(lowWatermark, 'options.lowWaterMark', 1);\r\n\r\n  // Preparing controlling queues and variables\r\n  FixedQueue ??= require('internal/fixed_queue');\r\n  const unconsumedEvents = new FixedQueue();\r\n  const unconsumedPromises = new FixedQueue();\r\n  let paused = false;\r\n  let error = null;\r\n  let finished = false;\r\n  let size = 0;\r\n\r\n  const iterator = ObjectSetPrototypeOf({\r\n    next() {\r\n      // First, we consume all unread events\r\n      if (size) {\r\n        const value = unconsumedEvents.shift();\r\n        size--;\r\n        if (paused && size < lowWatermark) {\r\n          emitter.resume();\r\n          paused = false;\r\n        }\r\n        return PromiseResolve(createIterResult(value, false));\r\n      }\r\n\r\n      // Then we error, if an error happened\r\n      // This happens one time if at all, because after 'error'\r\n      // we stop listening\r\n      if (error) {\r\n        const p = PromiseReject(error);\r\n        // Only the first element errors\r\n        error = null;\r\n        return p;\r\n      }\r\n\r\n      // If the iterator is finished, resolve to done\r\n      if (finished) return closeHandler();\r\n\r\n      // Wait until an event happens\r\n      return new Promise(function(resolve, reject) {\r\n        unconsumedPromises.push({ resolve, reject });\r\n      });\r\n    },\r\n\r\n    return() {\r\n      return closeHandler();\r\n    },\r\n\r\n    throw(err) {\r\n      if (!err || !(err instanceof Error)) {\r\n        throw new ERR_INVALID_ARG_TYPE('EventEmitter.AsyncIterator',\r\n                                       'Error', err);\r\n      }\r\n      errorHandler(err);\r\n    },\r\n    [SymbolAsyncIterator]() {\r\n      return this;\r\n    },\r\n    [kWatermarkData]: {\r\n      /**\r\n       * The current queue size\r\n       */\r\n      get size() {\r\n        return size;\r\n      },\r\n      /**\r\n       * The low watermark. The emitter is resumed every time size is lower than it\r\n       */\r\n      get low() {\r\n        return lowWatermark;\r\n      },\r\n      /**\r\n       * The high watermark. The emitter is paused every time size is higher than it\r\n       */\r\n      get high() {\r\n        return highWatermark;\r\n      },\r\n      /**\r\n       * It checks whether the emitter is paused by the watermark controller or not\r\n       */\r\n      get isPaused() {\r\n        return paused;\r\n      },\r\n    },\r\n  }, AsyncIteratorPrototype);\r\n\r\n  // Adding event handlers\r\n  const { addEventListener, removeAll } = listenersController();\r\n  kFirstEventParam ??= require('internal/events/symbols').kFirstEventParam;\r\n  addEventListener(emitter, event, options[kFirstEventParam] ? eventHandler : function(...args) {\r\n    return eventHandler(args);\r\n  });\r\n  if (event !== 'error' && typeof emitter.on === 'function') {\r\n    addEventListener(emitter, 'error', errorHandler);\r\n  }\r\n  const closeEvents = options?.close;\r\n  if (closeEvents?.length) {\r\n    for (let i = 0; i < closeEvents.length; i++) {\r\n      addEventListener(emitter, closeEvents[i], closeHandler);\r\n    }\r\n  }\r\n\r\n  const abortListenerDisposable = signal ? addAbortListener(signal, abortListener) : null;\r\n\r\n  return iterator;\r\n\r\n  function abortListener() {\r\n    errorHandler(new AbortError(undefined, { cause: signal?.reason }));\r\n  }\r\n\r\n  function eventHandler(value) {\r\n    if (unconsumedPromises.isEmpty()) {\r\n      size++;\r\n      if (!paused && size > highWatermark) {\r\n        paused = true;\r\n        emitter.pause();\r\n      }\r\n      unconsumedEvents.push(value);\r\n    } else unconsumedPromises.shift().resolve(createIterResult(value, false));\r\n  }\r\n\r\n  function errorHandler(err) {\r\n    if (unconsumedPromises.isEmpty()) error = err;\r\n    else unconsumedPromises.shift().reject(err);\r\n\r\n    closeHandler();\r\n  }\r\n\r\n  function closeHandler() {\r\n    abortListenerDisposable?.[SymbolDispose]();\r\n    removeAll();\r\n    finished = true;\r\n    const doneResult = createIterResult(undefined, true);\r\n    while (!unconsumedPromises.isEmpty()) {\r\n      unconsumedPromises.shift().resolve(doneResult);\r\n    }\r\n\r\n    return PromiseResolve(doneResult);\r\n  }\r\n}\r\n\r\nfunction listenersController() {\r\n  const listeners = [];\r\n\r\n  return {\r\n    addEventListener(emitter, event, handler, flags) {\r\n      eventTargetAgnosticAddListener(emitter, event, handler, flags);\r\n      ArrayPrototypePush(listeners, [emitter, event, handler, flags]);\r\n    },\r\n    removeAll() {\r\n      while (listeners.length > 0) {\r\n        ReflectApply(eventTargetAgnosticRemoveListener, undefined, ArrayPrototypePop(listeners));\r\n      }\r\n    },\r\n  };\r\n}\r\n"
  },
  "22": {
    "metadata": {
      "scriptId": "22",
      "url": "node:internal/events/abort_listener",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 54,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "ed4d4598e28d72f54d64a5b67654339b77d56b84a319e656e8933430773c2adb",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1374,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/events/abort_listener"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  SymbolDispose,\r\n} = primordials;\r\nconst {\r\n  validateAbortSignal,\r\n  validateFunction,\r\n} = require('internal/validators');\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nlet queueMicrotask;\r\nlet kResistStopPropagation;\r\n\r\n/**\r\n * @param {AbortSignal} signal\r\n * @param {EventListener} listener\r\n * @returns {Disposable}\r\n */\r\nfunction addAbortListener(signal, listener) {\r\n  if (signal === undefined) {\r\n    throw new ERR_INVALID_ARG_TYPE('signal', 'AbortSignal', signal);\r\n  }\r\n  validateAbortSignal(signal, 'signal');\r\n  validateFunction(listener, 'listener');\r\n\r\n  let removeEventListener;\r\n  if (signal.aborted) {\r\n    queueMicrotask ??= require('internal/process/task_queues').queueMicrotask;\r\n    queueMicrotask(() => listener());\r\n  } else {\r\n    kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;\r\n    // TODO(atlowChemi) add { subscription: true } and return directly\r\n    signal.addEventListener('abort', listener, { __proto__: null, once: true, [kResistStopPropagation]: true });\r\n    removeEventListener = () => {\r\n      signal.removeEventListener('abort', listener);\r\n    };\r\n  }\r\n  return {\r\n    __proto__: null,\r\n    [SymbolDispose]() {\r\n      removeEventListener?.();\r\n    },\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  __proto__: null,\r\n  addAbortListener,\r\n};\r\n"
  },
  "23": {
    "metadata": {
      "scriptId": "23",
      "url": "node:buffer",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1340,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "b7f0c157bc262cc3b98dd84f244150b6ebf24b8b39ca5643168a9bd165f60dce",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 40125,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:buffer"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  Array,\r\n  ArrayIsArray,\r\n  ArrayPrototypeForEach,\r\n  MathFloor,\r\n  MathMin,\r\n  MathTrunc,\r\n  NumberIsNaN,\r\n  NumberMAX_SAFE_INTEGER,\r\n  NumberMIN_SAFE_INTEGER,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  RegExpPrototypeSymbolReplace,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeSlice,\r\n  StringPrototypeToLowerCase,\r\n  StringPrototypeTrim,\r\n  SymbolSpecies,\r\n  SymbolToPrimitive,\r\n  TypedArrayPrototypeFill,\r\n  TypedArrayPrototypeGetBuffer,\r\n  TypedArrayPrototypeGetByteLength,\r\n  TypedArrayPrototypeGetByteOffset,\r\n  TypedArrayPrototypeGetLength,\r\n  TypedArrayPrototypeSet,\r\n  TypedArrayPrototypeSlice,\r\n  Uint8Array,\r\n  Uint8ArrayPrototype,\r\n} = primordials;\r\n\r\nconst {\r\n  byteLengthUtf8,\r\n  compare: _compare,\r\n  compareOffset,\r\n  createFromString,\r\n  fill: bindingFill,\r\n  isAscii: bindingIsAscii,\r\n  isUtf8: bindingIsUtf8,\r\n  indexOfBuffer,\r\n  indexOfNumber,\r\n  indexOfString,\r\n  swap16: _swap16,\r\n  swap32: _swap32,\r\n  swap64: _swap64,\r\n  kMaxLength,\r\n  kStringMaxLength,\r\n  atob: _atob,\r\n  btoa: _btoa,\r\n} = internalBinding('buffer');\r\nconst {\r\n  constants: {\r\n    ALL_PROPERTIES,\r\n    ONLY_ENUMERABLE,\r\n  },\r\n  getOwnNonIndexProperties,\r\n} = internalBinding('util');\r\nconst {\r\n  customInspectSymbol,\r\n  isInsideNodeModules,\r\n  lazyDOMException,\r\n  normalizeEncoding,\r\n  kIsEncodingSymbol,\r\n  defineLazyProperties,\r\n  encodingsMap,\r\n} = require('internal/util');\r\nconst {\r\n  isAnyArrayBuffer,\r\n  isArrayBufferView,\r\n  isUint8Array,\r\n  isTypedArray,\r\n} = require('internal/util/types');\r\nconst {\r\n  inspect: utilInspect,\r\n} = require('internal/util/inspect');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_BUFFER_OUT_OF_BOUNDS,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_BUFFER_SIZE,\r\n    ERR_MISSING_ARGS,\r\n    ERR_OUT_OF_RANGE,\r\n    ERR_UNKNOWN_ENCODING,\r\n  },\r\n  genericNodeError,\r\n} = require('internal/errors');\r\nconst {\r\n  validateArray,\r\n  validateBuffer,\r\n  validateInteger,\r\n  validateNumber,\r\n  validateString,\r\n} = require('internal/validators');\r\n// Provide validateInteger() but with kMaxLength as the default maximum value.\r\nconst validateOffset = (value, name, min = 0, max = kMaxLength) =>\r\n  validateInteger(value, name, min, max);\r\n\r\nconst {\r\n  FastBuffer,\r\n  markAsUntransferable,\r\n  addBufferPrototypeMethods,\r\n  createUnsafeBuffer,\r\n} = require('internal/buffer');\r\n\r\nFastBuffer.prototype.constructor = Buffer;\r\nBuffer.prototype = FastBuffer.prototype;\r\naddBufferPrototypeMethods(Buffer.prototype);\r\n\r\nconst constants = ObjectDefineProperties({}, {\r\n  MAX_LENGTH: {\r\n    __proto__: null,\r\n    value: kMaxLength,\r\n    writable: false,\r\n    enumerable: true,\r\n  },\r\n  MAX_STRING_LENGTH: {\r\n    __proto__: null,\r\n    value: kStringMaxLength,\r\n    writable: false,\r\n    enumerable: true,\r\n  },\r\n});\r\n\r\nBuffer.poolSize = 8 * 1024;\r\nlet poolSize, poolOffset, allocPool;\r\n\r\nfunction createPool() {\r\n  poolSize = Buffer.poolSize;\r\n  allocPool = createUnsafeBuffer(poolSize).buffer;\r\n  markAsUntransferable(allocPool);\r\n  poolOffset = 0;\r\n}\r\ncreatePool();\r\n\r\nfunction alignPool() {\r\n  // Ensure aligned slices\r\n  if (poolOffset & 0x7) {\r\n    poolOffset |= 0x7;\r\n    poolOffset++;\r\n  }\r\n}\r\n\r\nlet bufferWarningAlreadyEmitted = false;\r\nlet nodeModulesCheckCounter = 0;\r\nconst bufferWarning = 'Buffer() is deprecated due to security and usability ' +\r\n                      'issues. Please use the Buffer.alloc(), ' +\r\n                      'Buffer.allocUnsafe(), or Buffer.from() methods instead.';\r\n\r\nfunction showFlaggedDeprecation() {\r\n  if (bufferWarningAlreadyEmitted ||\r\n      ++nodeModulesCheckCounter > 10000 ||\r\n      (!require('internal/options').getOptionValue('--pending-deprecation') &&\r\n       isInsideNodeModules())) {\r\n    // We don't emit a warning, because we either:\r\n    // - Already did so, or\r\n    // - Already checked too many times whether a call is coming\r\n    //   from node_modules and want to stop slowing down things, or\r\n    // - We aren't running with `--pending-deprecation` enabled,\r\n    //   and the code is inside `node_modules`.\r\n    return;\r\n  }\r\n\r\n  process.emitWarning(bufferWarning, 'DeprecationWarning', 'DEP0005');\r\n  bufferWarningAlreadyEmitted = true;\r\n}\r\n\r\nfunction toInteger(n, defaultVal) {\r\n  n = +n;\r\n  if (!NumberIsNaN(n) &&\r\n      n >= NumberMIN_SAFE_INTEGER &&\r\n      n <= NumberMAX_SAFE_INTEGER) {\r\n    return ((n % 1) === 0 ? n : MathFloor(n));\r\n  }\r\n  return defaultVal;\r\n}\r\n\r\nfunction _copy(source, target, targetStart, sourceStart, sourceEnd) {\r\n  if (!isUint8Array(source))\r\n    throw new ERR_INVALID_ARG_TYPE('source', ['Buffer', 'Uint8Array'], source);\r\n  if (!isUint8Array(target))\r\n    throw new ERR_INVALID_ARG_TYPE('target', ['Buffer', 'Uint8Array'], target);\r\n\r\n  if (targetStart === undefined) {\r\n    targetStart = 0;\r\n  } else {\r\n    targetStart = toInteger(targetStart, 0);\r\n    if (targetStart < 0)\r\n      throw new ERR_OUT_OF_RANGE('targetStart', '>= 0', targetStart);\r\n  }\r\n\r\n  if (sourceStart === undefined) {\r\n    sourceStart = 0;\r\n  } else {\r\n    sourceStart = toInteger(sourceStart, 0);\r\n    if (sourceStart < 0 || sourceStart > source.length)\r\n      throw new ERR_OUT_OF_RANGE('sourceStart', `>= 0 && <= ${source.length}`, sourceStart);\r\n  }\r\n\r\n  if (sourceEnd === undefined) {\r\n    sourceEnd = source.length;\r\n  } else {\r\n    sourceEnd = toInteger(sourceEnd, 0);\r\n    if (sourceEnd < 0)\r\n      throw new ERR_OUT_OF_RANGE('sourceEnd', '>= 0', sourceEnd);\r\n  }\r\n\r\n  if (targetStart >= target.length || sourceStart >= sourceEnd)\r\n    return 0;\r\n\r\n  return _copyActual(source, target, targetStart, sourceStart, sourceEnd);\r\n}\r\n\r\nfunction _copyActual(source, target, targetStart, sourceStart, sourceEnd) {\r\n  if (sourceEnd - sourceStart > target.length - targetStart)\r\n    sourceEnd = sourceStart + target.length - targetStart;\r\n\r\n  let nb = sourceEnd - sourceStart;\r\n  const sourceLen = source.length - sourceStart;\r\n  if (nb > sourceLen)\r\n    nb = sourceLen;\r\n\r\n  if (sourceStart !== 0 || sourceEnd < source.length)\r\n    source = new Uint8Array(source.buffer, source.byteOffset + sourceStart, nb);\r\n\r\n  TypedArrayPrototypeSet(target, source, targetStart);\r\n\r\n  return nb;\r\n}\r\n\r\n/**\r\n * The Buffer() constructor is deprecated in documentation and should not be\r\n * used moving forward. Rather, developers should use one of the three new\r\n * factory APIs: Buffer.from(), Buffer.allocUnsafe() or Buffer.alloc() based on\r\n * their specific needs. There is no runtime deprecation because of the extent\r\n * to which the Buffer constructor is used in the ecosystem currently -- a\r\n * runtime deprecation would introduce too much breakage at this time. It's not\r\n * likely that the Buffer constructors would ever actually be removed.\r\n * Deprecation Code: DEP0005\r\n */\r\nfunction Buffer(arg, encodingOrOffset, length) {\r\n  showFlaggedDeprecation();\r\n  // Common case.\r\n  if (typeof arg === 'number') {\r\n    if (typeof encodingOrOffset === 'string') {\r\n      throw new ERR_INVALID_ARG_TYPE('string', 'string', arg);\r\n    }\r\n    return Buffer.alloc(arg);\r\n  }\r\n  return Buffer.from(arg, encodingOrOffset, length);\r\n}\r\n\r\nObjectDefineProperty(Buffer, SymbolSpecies, {\r\n  __proto__: null,\r\n  enumerable: false,\r\n  configurable: true,\r\n  get() { return FastBuffer; },\r\n});\r\n\r\n/**\r\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\r\n * if value is a number.\r\n * Buffer.from(str[, encoding])\r\n * Buffer.from(array)\r\n * Buffer.from(buffer)\r\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\r\n */\r\nBuffer.from = function from(value, encodingOrOffset, length) {\r\n  if (typeof value === 'string')\r\n    return fromString(value, encodingOrOffset);\r\n\r\n  if (typeof value === 'object' && value !== null) {\r\n    if (isAnyArrayBuffer(value))\r\n      return fromArrayBuffer(value, encodingOrOffset, length);\r\n\r\n    const valueOf = value.valueOf && value.valueOf();\r\n    if (valueOf != null &&\r\n        valueOf !== value &&\r\n        (typeof valueOf === 'string' || typeof valueOf === 'object')) {\r\n      return from(valueOf, encodingOrOffset, length);\r\n    }\r\n\r\n    const b = fromObject(value);\r\n    if (b)\r\n      return b;\r\n\r\n    if (typeof value[SymbolToPrimitive] === 'function') {\r\n      const primitive = value[SymbolToPrimitive]('string');\r\n      if (typeof primitive === 'string') {\r\n        return fromString(primitive, encodingOrOffset);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE(\r\n    'first argument',\r\n    ['string', 'Buffer', 'ArrayBuffer', 'Array', 'Array-like Object'],\r\n    value,\r\n  );\r\n};\r\n\r\n/**\r\n * Creates the Buffer as a copy of the underlying ArrayBuffer of the view\r\n * rather than the contents of the view.\r\n * @param {TypedArray} view\r\n * @param {number} [offset]\r\n * @param {number} [length]\r\n * @returns {Buffer}\r\n */\r\nBuffer.copyBytesFrom = function copyBytesFrom(view, offset, length) {\r\n  if (!isTypedArray(view)) {\r\n    throw new ERR_INVALID_ARG_TYPE('view', [ 'TypedArray' ], view);\r\n  }\r\n\r\n  const viewLength = TypedArrayPrototypeGetLength(view);\r\n  if (viewLength === 0) {\r\n    return Buffer.alloc(0);\r\n  }\r\n\r\n  if (offset !== undefined || length !== undefined) {\r\n    if (offset !== undefined) {\r\n      validateInteger(offset, 'offset', 0);\r\n      if (offset >= viewLength) return Buffer.alloc(0);\r\n    } else {\r\n      offset = 0;\r\n    }\r\n    let end;\r\n    if (length !== undefined) {\r\n      validateInteger(length, 'length', 0);\r\n      end = offset + length;\r\n    } else {\r\n      end = viewLength;\r\n    }\r\n\r\n    view = TypedArrayPrototypeSlice(view, offset, end);\r\n  }\r\n\r\n  return fromArrayLike(new Uint8Array(\r\n    TypedArrayPrototypeGetBuffer(view),\r\n    TypedArrayPrototypeGetByteOffset(view),\r\n    TypedArrayPrototypeGetByteLength(view)));\r\n};\r\n\r\n// Identical to the built-in %TypedArray%.of(), but avoids using the deprecated\r\n// Buffer() constructor. Must use arrow function syntax to avoid automatically\r\n// adding a `prototype` property and making the function a constructor.\r\n//\r\n// Refs: https://tc39.github.io/ecma262/#sec-%typedarray%.of\r\n// Refs: https://esdiscuss.org/topic/isconstructor#content-11\r\nconst of = (...items) => {\r\n  const newObj = createUnsafeBuffer(items.length);\r\n  for (let k = 0; k < items.length; k++)\r\n    newObj[k] = items[k];\r\n  return newObj;\r\n};\r\nBuffer.of = of;\r\n\r\nObjectSetPrototypeOf(Buffer, Uint8Array);\r\n\r\n/**\r\n * Creates a new filled Buffer instance.\r\n * alloc(size[, fill[, encoding]])\r\n */\r\nBuffer.alloc = function alloc(size, fill, encoding) {\r\n  validateNumber(size, 'size', 0, kMaxLength);\r\n  if (fill !== undefined && fill !== 0 && size > 0) {\r\n    const buf = createUnsafeBuffer(size);\r\n    return _fill(buf, fill, 0, buf.length, encoding);\r\n  }\r\n  return new FastBuffer(size);\r\n};\r\n\r\n/**\r\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer\r\n * instance. If `--zero-fill-buffers` is set, will zero-fill the buffer.\r\n */\r\nBuffer.allocUnsafe = function allocUnsafe(size) {\r\n  validateNumber(size, 'size', 0, kMaxLength);\r\n  return allocate(size);\r\n};\r\n\r\n/**\r\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled\r\n * Buffer instance that is not allocated off the pre-initialized pool.\r\n * If `--zero-fill-buffers` is set, will zero-fill the buffer.\r\n */\r\nBuffer.allocUnsafeSlow = function allocUnsafeSlow(size) {\r\n  validateNumber(size, 'size', 0, kMaxLength);\r\n  return createUnsafeBuffer(size);\r\n};\r\n\r\n// If --zero-fill-buffers command line argument is set, a zero-filled\r\n// buffer is returned.\r\nfunction SlowBuffer(size) {\r\n  validateNumber(size, 'size', 0, kMaxLength);\r\n  return createUnsafeBuffer(size);\r\n}\r\n\r\nObjectSetPrototypeOf(SlowBuffer.prototype, Uint8ArrayPrototype);\r\nObjectSetPrototypeOf(SlowBuffer, Uint8Array);\r\n\r\nfunction allocate(size) {\r\n  if (size <= 0) {\r\n    return new FastBuffer();\r\n  }\r\n  if (size < (Buffer.poolSize >>> 1)) {\r\n    if (size > (poolSize - poolOffset))\r\n      createPool();\r\n    const b = new FastBuffer(allocPool, poolOffset, size);\r\n    poolOffset += size;\r\n    alignPool();\r\n    return b;\r\n  }\r\n  return createUnsafeBuffer(size);\r\n}\r\n\r\nfunction fromStringFast(string, ops) {\r\n  const length = ops.byteLength(string);\r\n\r\n  if (length >= (Buffer.poolSize >>> 1))\r\n    return createFromString(string, ops.encodingVal);\r\n\r\n  if (length > (poolSize - poolOffset))\r\n    createPool();\r\n  let b = new FastBuffer(allocPool, poolOffset, length);\r\n  const actual = ops.write(b, string, 0, length);\r\n  if (actual !== length) {\r\n    // byteLength() may overestimate. That's a rare case, though.\r\n    b = new FastBuffer(allocPool, poolOffset, actual);\r\n  }\r\n  poolOffset += actual;\r\n  alignPool();\r\n  return b;\r\n}\r\n\r\nfunction fromString(string, encoding) {\r\n  let ops;\r\n  if (typeof encoding !== 'string' || encoding.length === 0) {\r\n    if (string.length === 0)\r\n      return new FastBuffer();\r\n    ops = encodingOps.utf8;\r\n  } else {\r\n    ops = getEncodingOps(encoding);\r\n    if (ops === undefined)\r\n      throw new ERR_UNKNOWN_ENCODING(encoding);\r\n    if (string.length === 0)\r\n      return new FastBuffer();\r\n  }\r\n  return fromStringFast(string, ops);\r\n}\r\n\r\nfunction fromArrayBuffer(obj, byteOffset, length) {\r\n  // Convert byteOffset to integer\r\n  if (byteOffset === undefined) {\r\n    byteOffset = 0;\r\n  } else {\r\n    byteOffset = +byteOffset;\r\n    if (NumberIsNaN(byteOffset))\r\n      byteOffset = 0;\r\n  }\r\n\r\n  const maxLength = obj.byteLength - byteOffset;\r\n\r\n  if (maxLength < 0)\r\n    throw new ERR_BUFFER_OUT_OF_BOUNDS('offset');\r\n\r\n  if (length === undefined) {\r\n    length = maxLength;\r\n  } else {\r\n    // Convert length to non-negative integer.\r\n    length = +length;\r\n    if (length > 0) {\r\n      if (length > maxLength)\r\n        throw new ERR_BUFFER_OUT_OF_BOUNDS('length');\r\n    } else {\r\n      length = 0;\r\n    }\r\n  }\r\n\r\n  return new FastBuffer(obj, byteOffset, length);\r\n}\r\n\r\nfunction fromArrayLike(obj) {\r\n  if (obj.length <= 0)\r\n    return new FastBuffer();\r\n  if (obj.length < (Buffer.poolSize >>> 1)) {\r\n    if (obj.length > (poolSize - poolOffset))\r\n      createPool();\r\n    const b = new FastBuffer(allocPool, poolOffset, obj.length);\r\n    TypedArrayPrototypeSet(b, obj, 0);\r\n    poolOffset += obj.length;\r\n    alignPool();\r\n    return b;\r\n  }\r\n  return new FastBuffer(obj);\r\n}\r\n\r\nfunction fromObject(obj) {\r\n  if (obj.length !== undefined || isAnyArrayBuffer(obj.buffer)) {\r\n    if (typeof obj.length !== 'number') {\r\n      return new FastBuffer();\r\n    }\r\n    return fromArrayLike(obj);\r\n  }\r\n\r\n  if (obj.type === 'Buffer' && ArrayIsArray(obj.data)) {\r\n    return fromArrayLike(obj.data);\r\n  }\r\n}\r\n\r\n// Static methods\r\n\r\nBuffer.isBuffer = function isBuffer(b) {\r\n  return b instanceof Buffer;\r\n};\r\n\r\nBuffer.compare = function compare(buf1, buf2) {\r\n  if (!isUint8Array(buf1)) {\r\n    throw new ERR_INVALID_ARG_TYPE('buf1', ['Buffer', 'Uint8Array'], buf1);\r\n  }\r\n\r\n  if (!isUint8Array(buf2)) {\r\n    throw new ERR_INVALID_ARG_TYPE('buf2', ['Buffer', 'Uint8Array'], buf2);\r\n  }\r\n\r\n  if (buf1 === buf2) {\r\n    return 0;\r\n  }\r\n\r\n  return _compare(buf1, buf2);\r\n};\r\n\r\nBuffer.isEncoding = function isEncoding(encoding) {\r\n  return typeof encoding === 'string' && encoding.length !== 0 &&\r\n         normalizeEncoding(encoding) !== undefined;\r\n};\r\nBuffer[kIsEncodingSymbol] = Buffer.isEncoding;\r\n\r\nBuffer.concat = function concat(list, length) {\r\n  validateArray(list, 'list');\r\n\r\n  if (list.length === 0)\r\n    return new FastBuffer();\r\n\r\n  if (length === undefined) {\r\n    length = 0;\r\n    for (let i = 0; i < list.length; i++) {\r\n      if (list[i].length) {\r\n        length += list[i].length;\r\n      }\r\n    }\r\n  } else {\r\n    validateOffset(length, 'length');\r\n  }\r\n\r\n  const buffer = Buffer.allocUnsafe(length);\r\n  let pos = 0;\r\n  for (let i = 0; i < list.length; i++) {\r\n    const buf = list[i];\r\n    if (!isUint8Array(buf)) {\r\n      // TODO(BridgeAR): This should not be of type ERR_INVALID_ARG_TYPE.\r\n      // Instead, find the proper error code for this.\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        `list[${i}]`, ['Buffer', 'Uint8Array'], list[i]);\r\n    }\r\n    pos += _copyActual(buf, buffer, pos, 0, buf.length);\r\n  }\r\n\r\n  // Note: `length` is always equal to `buffer.length` at this point\r\n  if (pos < length) {\r\n    // Zero-fill the remaining bytes if the specified `length` was more than\r\n    // the actual total length, i.e. if we have some remaining allocated bytes\r\n    // there were not initialized.\r\n    TypedArrayPrototypeFill(buffer, 0, pos, length);\r\n  }\r\n\r\n  return buffer;\r\n};\r\n\r\nfunction base64ByteLength(str, bytes) {\r\n  // Handle padding\r\n  if (StringPrototypeCharCodeAt(str, bytes - 1) === 0x3D)\r\n    bytes--;\r\n  if (bytes > 1 && StringPrototypeCharCodeAt(str, bytes - 1) === 0x3D)\r\n    bytes--;\r\n\r\n  // Base64 ratio: 3/4\r\n  return (bytes * 3) >>> 2;\r\n}\r\n\r\nconst encodingOps = {\r\n  utf8: {\r\n    encoding: 'utf8',\r\n    encodingVal: encodingsMap.utf8,\r\n    byteLength: byteLengthUtf8,\r\n    write: (buf, string, offset, len) => buf.utf8Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.utf8Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfString(buf, val, byteOffset, encodingsMap.utf8, dir),\r\n  },\r\n  ucs2: {\r\n    encoding: 'ucs2',\r\n    encodingVal: encodingsMap.utf16le,\r\n    byteLength: (string) => string.length * 2,\r\n    write: (buf, string, offset, len) => buf.ucs2Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.ucs2Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfString(buf, val, byteOffset, encodingsMap.utf16le, dir),\r\n  },\r\n  utf16le: {\r\n    encoding: 'utf16le',\r\n    encodingVal: encodingsMap.utf16le,\r\n    byteLength: (string) => string.length * 2,\r\n    write: (buf, string, offset, len) => buf.ucs2Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.ucs2Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfString(buf, val, byteOffset, encodingsMap.utf16le, dir),\r\n  },\r\n  latin1: {\r\n    encoding: 'latin1',\r\n    encodingVal: encodingsMap.latin1,\r\n    byteLength: (string) => string.length,\r\n    write: (buf, string, offset, len) => buf.latin1Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.latin1Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfString(buf, val, byteOffset, encodingsMap.latin1, dir),\r\n  },\r\n  ascii: {\r\n    encoding: 'ascii',\r\n    encodingVal: encodingsMap.ascii,\r\n    byteLength: (string) => string.length,\r\n    write: (buf, string, offset, len) => buf.asciiWrite(string, offset, len),\r\n    slice: (buf, start, end) => buf.asciiSlice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfBuffer(buf,\r\n                    fromStringFast(val, encodingOps.ascii),\r\n                    byteOffset,\r\n                    encodingsMap.ascii,\r\n                    dir),\r\n  },\r\n  base64: {\r\n    encoding: 'base64',\r\n    encodingVal: encodingsMap.base64,\r\n    byteLength: (string) => base64ByteLength(string, string.length),\r\n    write: (buf, string, offset, len) => buf.base64Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.base64Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfBuffer(buf,\r\n                    fromStringFast(val, encodingOps.base64),\r\n                    byteOffset,\r\n                    encodingsMap.base64,\r\n                    dir),\r\n  },\r\n  base64url: {\r\n    encoding: 'base64url',\r\n    encodingVal: encodingsMap.base64url,\r\n    byteLength: (string) => base64ByteLength(string, string.length),\r\n    write: (buf, string, offset, len) =>\r\n      buf.base64urlWrite(string, offset, len),\r\n    slice: (buf, start, end) => buf.base64urlSlice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfBuffer(buf,\r\n                    fromStringFast(val, encodingOps.base64url),\r\n                    byteOffset,\r\n                    encodingsMap.base64url,\r\n                    dir),\r\n  },\r\n  hex: {\r\n    encoding: 'hex',\r\n    encodingVal: encodingsMap.hex,\r\n    byteLength: (string) => string.length >>> 1,\r\n    write: (buf, string, offset, len) => buf.hexWrite(string, offset, len),\r\n    slice: (buf, start, end) => buf.hexSlice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfBuffer(buf,\r\n                    fromStringFast(val, encodingOps.hex),\r\n                    byteOffset,\r\n                    encodingsMap.hex,\r\n                    dir),\r\n  },\r\n};\r\nfunction getEncodingOps(encoding) {\r\n  encoding += '';\r\n  switch (encoding.length) {\r\n    case 4:\r\n      if (encoding === 'utf8') return encodingOps.utf8;\r\n      if (encoding === 'ucs2') return encodingOps.ucs2;\r\n      encoding = StringPrototypeToLowerCase(encoding);\r\n      if (encoding === 'utf8') return encodingOps.utf8;\r\n      if (encoding === 'ucs2') return encodingOps.ucs2;\r\n      break;\r\n    case 5:\r\n      if (encoding === 'utf-8') return encodingOps.utf8;\r\n      if (encoding === 'ascii') return encodingOps.ascii;\r\n      if (encoding === 'ucs-2') return encodingOps.ucs2;\r\n      encoding = StringPrototypeToLowerCase(encoding);\r\n      if (encoding === 'utf-8') return encodingOps.utf8;\r\n      if (encoding === 'ascii') return encodingOps.ascii;\r\n      if (encoding === 'ucs-2') return encodingOps.ucs2;\r\n      break;\r\n    case 7:\r\n      if (encoding === 'utf16le' ||\r\n          StringPrototypeToLowerCase(encoding) === 'utf16le')\r\n        return encodingOps.utf16le;\r\n      break;\r\n    case 8:\r\n      if (encoding === 'utf-16le' ||\r\n          StringPrototypeToLowerCase(encoding) === 'utf-16le')\r\n        return encodingOps.utf16le;\r\n      break;\r\n    case 6:\r\n      if (encoding === 'latin1' || encoding === 'binary')\r\n        return encodingOps.latin1;\r\n      if (encoding === 'base64') return encodingOps.base64;\r\n      encoding = StringPrototypeToLowerCase(encoding);\r\n      if (encoding === 'latin1' || encoding === 'binary')\r\n        return encodingOps.latin1;\r\n      if (encoding === 'base64') return encodingOps.base64;\r\n      break;\r\n    case 3:\r\n      if (encoding === 'hex' || StringPrototypeToLowerCase(encoding) === 'hex')\r\n        return encodingOps.hex;\r\n      break;\r\n    case 9:\r\n      if (encoding === 'base64url' ||\r\n          StringPrototypeToLowerCase(encoding) === 'base64url')\r\n        return encodingOps.base64url;\r\n      break;\r\n  }\r\n}\r\n\r\nfunction byteLength(string, encoding) {\r\n  if (typeof string !== 'string') {\r\n    if (isArrayBufferView(string) || isAnyArrayBuffer(string)) {\r\n      return string.byteLength;\r\n    }\r\n\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'string', ['string', 'Buffer', 'ArrayBuffer'], string,\r\n    );\r\n  }\r\n\r\n  const len = string.length;\r\n  if (len === 0)\r\n    return 0;\r\n\r\n  if (encoding) {\r\n    const ops = getEncodingOps(encoding);\r\n    if (ops) {\r\n      return ops.byteLength(string);\r\n    }\r\n  }\r\n  return byteLengthUtf8(string);\r\n}\r\n\r\nBuffer.byteLength = byteLength;\r\n\r\n// For backwards compatibility.\r\nObjectDefineProperty(Buffer.prototype, 'parent', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get() {\r\n    if (!(this instanceof Buffer))\r\n      return undefined;\r\n    return this.buffer;\r\n  },\r\n});\r\nObjectDefineProperty(Buffer.prototype, 'offset', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get() {\r\n    if (!(this instanceof Buffer))\r\n      return undefined;\r\n    return this.byteOffset;\r\n  },\r\n});\r\n\r\nBuffer.prototype.copy =\r\n  function copy(target, targetStart, sourceStart, sourceEnd) {\r\n    return _copy(this, target, targetStart, sourceStart, sourceEnd);\r\n  };\r\n\r\n// No need to verify that \"buf.length <= MAX_UINT32\" since it's a read-only\r\n// property of a typed array.\r\n// This behaves neither like String nor Uint8Array in that we set start/end\r\n// to their upper/lower bounds if the value passed is out of range.\r\nBuffer.prototype.toString = function toString(encoding, start, end) {\r\n  if (arguments.length === 0) {\r\n    return this.utf8Slice(0, this.length);\r\n  }\r\n\r\n  const len = this.length;\r\n\r\n  if (start <= 0)\r\n    start = 0;\r\n  else if (start >= len)\r\n    return '';\r\n  else\r\n    start |= 0;\r\n\r\n  if (end === undefined || end > len)\r\n    end = len;\r\n  else\r\n    end |= 0;\r\n\r\n  if (end <= start)\r\n    return '';\r\n\r\n  if (encoding === undefined)\r\n    return this.utf8Slice(start, end);\r\n\r\n  const ops = getEncodingOps(encoding);\r\n  if (ops === undefined)\r\n    throw new ERR_UNKNOWN_ENCODING(encoding);\r\n\r\n  return ops.slice(this, start, end);\r\n};\r\n\r\nBuffer.prototype.equals = function equals(otherBuffer) {\r\n  if (!isUint8Array(otherBuffer)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'otherBuffer', ['Buffer', 'Uint8Array'], otherBuffer);\r\n  }\r\n\r\n  if (this === otherBuffer)\r\n    return true;\r\n  const len = TypedArrayPrototypeGetByteLength(this);\r\n  if (len !== TypedArrayPrototypeGetByteLength(otherBuffer))\r\n    return false;\r\n\r\n  return len === 0 || _compare(this, otherBuffer) === 0;\r\n};\r\n\r\nlet INSPECT_MAX_BYTES = 50;\r\n// Override how buffers are presented by util.inspect().\r\nBuffer.prototype[customInspectSymbol] = function inspect(recurseTimes, ctx) {\r\n  const max = INSPECT_MAX_BYTES;\r\n  const actualMax = MathMin(max, this.length);\r\n  const remaining = this.length - max;\r\n  let str = StringPrototypeTrim(RegExpPrototypeSymbolReplace(\r\n    /(.{2})/g, this.hexSlice(0, actualMax), '$1 '));\r\n  if (remaining > 0)\r\n    str += ` ... ${remaining} more byte${remaining > 1 ? 's' : ''}`;\r\n  // Inspect special properties as well, if possible.\r\n  if (ctx) {\r\n    let extras = false;\r\n    const filter = ctx.showHidden ? ALL_PROPERTIES : ONLY_ENUMERABLE;\r\n    const obj = { __proto__: null };\r\n    ArrayPrototypeForEach(getOwnNonIndexProperties(this, filter),\r\n                          (key) => {\r\n                            extras = true;\r\n                            obj[key] = this[key];\r\n                          });\r\n    if (extras) {\r\n      if (this.length !== 0)\r\n        str += ', ';\r\n      // '[Object: null prototype] {'.length === 26\r\n      // This is guarded with a test.\r\n      str += StringPrototypeSlice(utilInspect(obj, {\r\n        ...ctx,\r\n        breakLength: Infinity,\r\n        compact: true,\r\n      }), 27, -2);\r\n    }\r\n  }\r\n  return `<${this.constructor.name} ${str}>`;\r\n};\r\nBuffer.prototype.inspect = Buffer.prototype[customInspectSymbol];\r\n\r\nBuffer.prototype.compare = function compare(target,\r\n                                            targetStart,\r\n                                            targetEnd,\r\n                                            sourceStart,\r\n                                            sourceEnd) {\r\n  if (!isUint8Array(target)) {\r\n    throw new ERR_INVALID_ARG_TYPE('target', ['Buffer', 'Uint8Array'], target);\r\n  }\r\n  if (arguments.length === 1)\r\n    return _compare(this, target);\r\n\r\n  if (targetStart === undefined)\r\n    targetStart = 0;\r\n  else\r\n    validateOffset(targetStart, 'targetStart');\r\n\r\n  if (targetEnd === undefined)\r\n    targetEnd = target.length;\r\n  else\r\n    validateOffset(targetEnd, 'targetEnd', 0, target.length);\r\n\r\n  if (sourceStart === undefined)\r\n    sourceStart = 0;\r\n  else\r\n    validateOffset(sourceStart, 'sourceStart');\r\n\r\n  if (sourceEnd === undefined)\r\n    sourceEnd = this.length;\r\n  else\r\n    validateOffset(sourceEnd, 'sourceEnd', 0, this.length);\r\n\r\n  if (sourceStart >= sourceEnd)\r\n    return (targetStart >= targetEnd ? 0 : -1);\r\n  if (targetStart >= targetEnd)\r\n    return 1;\r\n\r\n  return compareOffset(this, target, targetStart, sourceStart, targetEnd,\r\n                       sourceEnd);\r\n};\r\n\r\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\r\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\r\n//\r\n// Arguments:\r\n// - buffer - a Buffer to search\r\n// - val - a string, Buffer, or number\r\n// - byteOffset - an index into `buffer`; will be clamped to an int32\r\n// - encoding - an optional encoding, relevant if val is a string\r\n// - dir - true for indexOf, false for lastIndexOf\r\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\r\n  validateBuffer(buffer);\r\n\r\n  if (typeof byteOffset === 'string') {\r\n    encoding = byteOffset;\r\n    byteOffset = undefined;\r\n  } else if (byteOffset > 0x7fffffff) {\r\n    byteOffset = 0x7fffffff;\r\n  } else if (byteOffset < -0x80000000) {\r\n    byteOffset = -0x80000000;\r\n  }\r\n  // Coerce to Number. Values like null and [] become 0.\r\n  byteOffset = +byteOffset;\r\n  // If the offset is undefined, \"foo\", {}, coerces to NaN, search whole buffer.\r\n  if (NumberIsNaN(byteOffset)) {\r\n    byteOffset = dir ? 0 : (buffer.length || buffer.byteLength);\r\n  }\r\n  dir = !!dir;  // Cast to bool.\r\n\r\n  if (typeof val === 'number')\r\n    return indexOfNumber(buffer, val >>> 0, byteOffset, dir);\r\n\r\n  let ops;\r\n  if (encoding === undefined)\r\n    ops = encodingOps.utf8;\r\n  else\r\n    ops = getEncodingOps(encoding);\r\n\r\n  if (typeof val === 'string') {\r\n    if (ops === undefined)\r\n      throw new ERR_UNKNOWN_ENCODING(encoding);\r\n    return ops.indexOf(buffer, val, byteOffset, dir);\r\n  }\r\n\r\n  if (isUint8Array(val)) {\r\n    const encodingVal =\r\n      (ops === undefined ? encodingsMap.utf8 : ops.encodingVal);\r\n    return indexOfBuffer(buffer, val, byteOffset, encodingVal, dir);\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE(\r\n    'value', ['number', 'string', 'Buffer', 'Uint8Array'], val,\r\n  );\r\n}\r\n\r\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\r\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\r\n};\r\n\r\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\r\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\r\n};\r\n\r\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\r\n  return this.indexOf(val, byteOffset, encoding) !== -1;\r\n};\r\n\r\n// Usage:\r\n//    buffer.fill(number[, offset[, end]])\r\n//    buffer.fill(buffer[, offset[, end]])\r\n//    buffer.fill(string[, offset[, end]][, encoding])\r\nBuffer.prototype.fill = function fill(value, offset, end, encoding) {\r\n  return _fill(this, value, offset, end, encoding);\r\n};\r\n\r\nfunction _fill(buf, value, offset, end, encoding) {\r\n  if (typeof value === 'string') {\r\n    if (offset === undefined || typeof offset === 'string') {\r\n      encoding = offset;\r\n      offset = 0;\r\n      end = buf.length;\r\n    } else if (typeof end === 'string') {\r\n      encoding = end;\r\n      end = buf.length;\r\n    }\r\n\r\n    const normalizedEncoding = normalizeEncoding(encoding);\r\n    if (normalizedEncoding === undefined) {\r\n      validateString(encoding, 'encoding');\r\n      throw new ERR_UNKNOWN_ENCODING(encoding);\r\n    }\r\n\r\n    if (value.length === 0) {\r\n      // If value === '' default to zero.\r\n      value = 0;\r\n    } else if (value.length === 1) {\r\n      // Fast path: If `value` fits into a single byte, use that numeric value.\r\n      if (normalizedEncoding === 'utf8') {\r\n        const code = StringPrototypeCharCodeAt(value, 0);\r\n        if (code < 128) {\r\n          value = code;\r\n        }\r\n      } else if (normalizedEncoding === 'latin1') {\r\n        value = StringPrototypeCharCodeAt(value, 0);\r\n      }\r\n    }\r\n  } else {\r\n    encoding = undefined;\r\n  }\r\n\r\n  if (offset === undefined) {\r\n    offset = 0;\r\n    end = buf.length;\r\n  } else {\r\n    validateOffset(offset, 'offset');\r\n    // Invalid ranges are not set to a default, so can range check early.\r\n    if (end === undefined) {\r\n      end = buf.length;\r\n    } else {\r\n      validateOffset(end, 'end', 0, buf.length);\r\n    }\r\n    if (offset >= end)\r\n      return buf;\r\n  }\r\n\r\n\r\n  if (typeof value === 'number') {\r\n    // OOB check\r\n    const byteLen = TypedArrayPrototypeGetByteLength(buf);\r\n    const fillLength = end - offset;\r\n    if (offset > end || fillLength + offset > byteLen)\r\n      throw new ERR_BUFFER_OUT_OF_BOUNDS();\r\n\r\n    TypedArrayPrototypeFill(buf, value, offset, end);\r\n  } else {\r\n    const res = bindingFill(buf, value, offset, end, encoding);\r\n    if (res < 0) {\r\n      if (res === -1)\r\n        throw new ERR_INVALID_ARG_VALUE('value', value);\r\n      throw new ERR_BUFFER_OUT_OF_BOUNDS();\r\n    }\r\n  }\r\n\r\n  return buf;\r\n}\r\n\r\nBuffer.prototype.write = function write(string, offset, length, encoding) {\r\n  // Buffer#write(string);\r\n  if (offset === undefined) {\r\n    return this.utf8Write(string, 0, this.length);\r\n  }\r\n  // Buffer#write(string, encoding)\r\n  if (length === undefined && typeof offset === 'string') {\r\n    encoding = offset;\r\n    length = this.length;\r\n    offset = 0;\r\n\r\n  // Buffer#write(string, offset[, length][, encoding])\r\n  } else {\r\n    validateOffset(offset, 'offset', 0, this.length);\r\n\r\n    const remaining = this.length - offset;\r\n\r\n    if (length === undefined) {\r\n      length = remaining;\r\n    } else if (typeof length === 'string') {\r\n      encoding = length;\r\n      length = remaining;\r\n    } else {\r\n      validateOffset(length, 'length', 0, this.length);\r\n      if (length > remaining)\r\n        length = remaining;\r\n    }\r\n  }\r\n\r\n  if (!encoding)\r\n    return this.utf8Write(string, offset, length);\r\n\r\n  const ops = getEncodingOps(encoding);\r\n  if (ops === undefined)\r\n    throw new ERR_UNKNOWN_ENCODING(encoding);\r\n  return ops.write(this, string, offset, length);\r\n};\r\n\r\nBuffer.prototype.toJSON = function toJSON() {\r\n  if (this.length > 0) {\r\n    const data = new Array(this.length);\r\n    for (let i = 0; i < this.length; ++i)\r\n      data[i] = this[i];\r\n    return { type: 'Buffer', data };\r\n  }\r\n  return { type: 'Buffer', data: [] };\r\n};\r\n\r\nfunction adjustOffset(offset, length) {\r\n  // Use Math.trunc() to convert offset to an integer value that can be larger\r\n  // than an Int32. Hence, don't use offset | 0 or similar techniques.\r\n  offset = MathTrunc(offset);\r\n  if (offset === 0) {\r\n    return 0;\r\n  }\r\n  if (offset < 0) {\r\n    offset += length;\r\n    return offset > 0 ? offset : 0;\r\n  }\r\n  if (offset < length) {\r\n    return offset;\r\n  }\r\n  return NumberIsNaN(offset) ? 0 : length;\r\n}\r\n\r\nBuffer.prototype.subarray = function subarray(start, end) {\r\n  const srcLength = this.length;\r\n  start = adjustOffset(start, srcLength);\r\n  end = end !== undefined ? adjustOffset(end, srcLength) : srcLength;\r\n  const newLength = end > start ? end - start : 0;\r\n  return new FastBuffer(this.buffer, this.byteOffset + start, newLength);\r\n};\r\n\r\nBuffer.prototype.slice = function slice(start, end) {\r\n  return this.subarray(start, end);\r\n};\r\n\r\nfunction swap(b, n, m) {\r\n  const i = b[n];\r\n  b[n] = b[m];\r\n  b[m] = i;\r\n}\r\n\r\nBuffer.prototype.swap16 = function swap16() {\r\n  // For Buffer.length < 128, it's generally faster to\r\n  // do the swap in javascript. For larger buffers,\r\n  // dropping down to the native code is faster.\r\n  const len = this.length;\r\n  if (len % 2 !== 0)\r\n    throw new ERR_INVALID_BUFFER_SIZE('16-bits');\r\n  if (len < 128) {\r\n    for (let i = 0; i < len; i += 2)\r\n      swap(this, i, i + 1);\r\n    return this;\r\n  }\r\n  return _swap16(this);\r\n};\r\n\r\nBuffer.prototype.swap32 = function swap32() {\r\n  // For Buffer.length < 192, it's generally faster to\r\n  // do the swap in javascript. For larger buffers,\r\n  // dropping down to the native code is faster.\r\n  const len = this.length;\r\n  if (len % 4 !== 0)\r\n    throw new ERR_INVALID_BUFFER_SIZE('32-bits');\r\n  if (len < 192) {\r\n    for (let i = 0; i < len; i += 4) {\r\n      swap(this, i, i + 3);\r\n      swap(this, i + 1, i + 2);\r\n    }\r\n    return this;\r\n  }\r\n  return _swap32(this);\r\n};\r\n\r\nBuffer.prototype.swap64 = function swap64() {\r\n  // For Buffer.length < 192, it's generally faster to\r\n  // do the swap in javascript. For larger buffers,\r\n  // dropping down to the native code is faster.\r\n  const len = this.length;\r\n  if (len % 8 !== 0)\r\n    throw new ERR_INVALID_BUFFER_SIZE('64-bits');\r\n  if (len < 192) {\r\n    for (let i = 0; i < len; i += 8) {\r\n      swap(this, i, i + 7);\r\n      swap(this, i + 1, i + 6);\r\n      swap(this, i + 2, i + 5);\r\n      swap(this, i + 3, i + 4);\r\n    }\r\n    return this;\r\n  }\r\n  return _swap64(this);\r\n};\r\n\r\nBuffer.prototype.toLocaleString = Buffer.prototype.toString;\r\n\r\nlet transcode;\r\nif (internalBinding('config').hasIntl) {\r\n  const {\r\n    icuErrName,\r\n    transcode: _transcode,\r\n  } = internalBinding('icu');\r\n\r\n  // Transcodes the Buffer from one encoding to another, returning a new\r\n  // Buffer instance.\r\n  transcode = function transcode(source, fromEncoding, toEncoding) {\r\n    if (!isUint8Array(source)) {\r\n      throw new ERR_INVALID_ARG_TYPE('source',\r\n                                     ['Buffer', 'Uint8Array'], source);\r\n    }\r\n    if (source.length === 0) return Buffer.alloc(0);\r\n\r\n    fromEncoding = normalizeEncoding(fromEncoding) || fromEncoding;\r\n    toEncoding = normalizeEncoding(toEncoding) || toEncoding;\r\n    const result = _transcode(source, fromEncoding, toEncoding);\r\n    if (typeof result !== 'number')\r\n      return result;\r\n\r\n    const code = icuErrName(result);\r\n    const err = genericNodeError(\r\n      `Unable to transcode Buffer [${code}]`,\r\n      { code: code, errno: result },\r\n    );\r\n    throw err;\r\n  };\r\n}\r\n\r\nfunction btoa(input) {\r\n  // The implementation here has not been performance optimized in any way and\r\n  // should not be.\r\n  // Refs: https://github.com/nodejs/node/pull/38433#issuecomment-828426932\r\n  if (arguments.length === 0) {\r\n    throw new ERR_MISSING_ARGS('input');\r\n  }\r\n  const result = _btoa(`${input}`);\r\n  if (result === -1) {\r\n    throw lazyDOMException('Invalid character', 'InvalidCharacterError');\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction atob(input) {\r\n  if (arguments.length === 0) {\r\n    throw new ERR_MISSING_ARGS('input');\r\n  }\r\n\r\n  const result = _atob(`${input}`);\r\n\r\n  switch (result) {\r\n    case -2: // Invalid character\r\n      throw lazyDOMException('Invalid character', 'InvalidCharacterError');\r\n    case -1: // Single character remained\r\n      throw lazyDOMException(\r\n        'The string to be decoded is not correctly encoded.',\r\n        'InvalidCharacterError');\r\n    case -3: // Possible overflow\r\n      // TODO(@anonrig): Throw correct error in here.\r\n      throw lazyDOMException('The input causes overflow.', 'InvalidCharacterError');\r\n    default:\r\n      return result;\r\n  }\r\n}\r\n\r\nfunction isUtf8(input) {\r\n  if (isTypedArray(input) || isAnyArrayBuffer(input)) {\r\n    return bindingIsUtf8(input);\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE('input', ['ArrayBuffer', 'Buffer', 'TypedArray'], input);\r\n}\r\n\r\nfunction isAscii(input) {\r\n  if (isTypedArray(input) || isAnyArrayBuffer(input)) {\r\n    return bindingIsAscii(input);\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE('input', ['ArrayBuffer', 'Buffer', 'TypedArray'], input);\r\n}\r\n\r\nmodule.exports = {\r\n  Buffer,\r\n  SlowBuffer,\r\n  transcode,\r\n  isUtf8,\r\n  isAscii,\r\n\r\n  // Legacy\r\n  kMaxLength,\r\n  kStringMaxLength,\r\n  btoa,\r\n  atob,\r\n};\r\n\r\nObjectDefineProperties(module.exports, {\r\n  constants: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    value: constants,\r\n  },\r\n  INSPECT_MAX_BYTES: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() { return INSPECT_MAX_BYTES; },\r\n    set(val) {\r\n      validateNumber(val, 'INSPECT_MAX_BYTES', 0);\r\n      INSPECT_MAX_BYTES = val;\r\n    },\r\n  },\r\n});\r\n\r\ndefineLazyProperties(\r\n  module.exports,\r\n  'internal/blob',\r\n  ['Blob', 'resolveObjectURL'],\r\n);\r\ndefineLazyProperties(\r\n  module.exports,\r\n  'internal/file',\r\n  ['File'],\r\n);\r\n"
  },
  "24": {
    "metadata": {
      "scriptId": "24",
      "url": "node:internal/buffer",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1096,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "d333f0f01aa92d86ed8c0237f45918a3ac653455dc06fcc8a4961b4beccf52de",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 32358,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/buffer"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  BigInt,\r\n  Float32Array,\r\n  Float64Array,\r\n  MathFloor,\r\n  Number,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  ERR_BUFFER_OUT_OF_BOUNDS,\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_OUT_OF_RANGE,\r\n} = require('internal/errors').codes;\r\nconst { validateNumber } = require('internal/validators');\r\nconst {\r\n  asciiSlice,\r\n  base64Slice,\r\n  base64urlSlice,\r\n  latin1Slice,\r\n  hexSlice,\r\n  ucs2Slice,\r\n  utf8Slice,\r\n  asciiWrite,\r\n  base64Write,\r\n  base64urlWrite,\r\n  latin1Write,\r\n  hexWrite,\r\n  ucs2Write,\r\n  utf8Write,\r\n  getZeroFillToggle,\r\n} = internalBinding('buffer');\r\n\r\nconst {\r\n  privateSymbols: {\r\n    untransferable_object_private_symbol,\r\n  },\r\n} = internalBinding('util');\r\n\r\n// Temporary buffers to convert numbers.\r\nconst float32Array = new Float32Array(1);\r\nconst uInt8Float32Array = new Uint8Array(float32Array.buffer);\r\nconst float64Array = new Float64Array(1);\r\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer);\r\n\r\n// Check endianness.\r\nfloat32Array[0] = -1; // 0xBF800000\r\n// Either it is [0, 0, 128, 191] or [191, 128, 0, 0]. It is not possible to\r\n// check this with `os.endianness()` because that is determined at compile time.\r\nconst bigEndian = uInt8Float32Array[3] === 0;\r\n\r\nfunction checkBounds(buf, offset, byteLength) {\r\n  validateNumber(offset, 'offset');\r\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined)\r\n    boundsError(offset, buf.length - (byteLength + 1));\r\n}\r\n\r\nfunction checkInt(value, min, max, buf, offset, byteLength) {\r\n  if (value > max || value < min) {\r\n    const n = typeof min === 'bigint' ? 'n' : '';\r\n    let range;\r\n    if (byteLength > 3) {\r\n      if (min === 0 || min === 0n) {\r\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;\r\n      } else {\r\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and ` +\r\n                `< 2${n} ** ${(byteLength + 1) * 8 - 1}${n}`;\r\n      }\r\n    } else {\r\n      range = `>= ${min}${n} and <= ${max}${n}`;\r\n    }\r\n    throw new ERR_OUT_OF_RANGE('value', range, value);\r\n  }\r\n  checkBounds(buf, offset, byteLength);\r\n}\r\n\r\nfunction boundsError(value, length, type) {\r\n  if (MathFloor(value) !== value) {\r\n    validateNumber(value, type);\r\n    throw new ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);\r\n  }\r\n\r\n  if (length < 0)\r\n    throw new ERR_BUFFER_OUT_OF_BOUNDS();\r\n\r\n  throw new ERR_OUT_OF_RANGE(type || 'offset',\r\n                             `>= ${type ? 1 : 0} and <= ${length}`,\r\n                             value);\r\n}\r\n\r\n// Read integers.\r\nfunction readBigUInt64LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  const lo = first +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 24;\r\n\r\n  const hi = this[++offset] +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    last * 2 ** 24;\r\n\r\n  return BigInt(lo) + (BigInt(hi) << 32n);\r\n}\r\n\r\nfunction readBigUInt64BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  const hi = first * 2 ** 24 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset];\r\n\r\n  const lo = this[++offset] * 2 ** 24 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    last;\r\n\r\n  return (BigInt(hi) << 32n) + BigInt(lo);\r\n}\r\n\r\nfunction readBigInt64LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  const val = this[offset + 4] +\r\n    this[offset + 5] * 2 ** 8 +\r\n    this[offset + 6] * 2 ** 16 +\r\n    (last << 24); // Overflow\r\n  return (BigInt(val) << 32n) +\r\n    BigInt(first +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 24);\r\n}\r\n\r\nfunction readBigInt64BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  const val = (first << 24) + // Overflow\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset];\r\n  return (BigInt(val) << 32n) +\r\n    BigInt(this[++offset] * 2 ** 24 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    last);\r\n}\r\n\r\nfunction readUIntLE(offset, byteLength) {\r\n  if (offset === undefined)\r\n    throw new ERR_INVALID_ARG_TYPE('offset', 'number', offset);\r\n  if (byteLength === 6)\r\n    return readUInt48LE(this, offset);\r\n  if (byteLength === 5)\r\n    return readUInt40LE(this, offset);\r\n  if (byteLength === 3)\r\n    return readUInt24LE(this, offset);\r\n  if (byteLength === 4)\r\n    return this.readUInt32LE(offset);\r\n  if (byteLength === 2)\r\n    return this.readUInt16LE(offset);\r\n  if (byteLength === 1)\r\n    return this.readUInt8(offset);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction readUInt48LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 5];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 6);\r\n\r\n  return first +\r\n    buf[++offset] * 2 ** 8 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 24 +\r\n    (buf[++offset] + last * 2 ** 8) * 2 ** 32;\r\n}\r\n\r\nfunction readUInt40LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 4];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 5);\r\n\r\n  return first +\r\n    buf[++offset] * 2 ** 8 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 24 +\r\n    last * 2 ** 32;\r\n}\r\n\r\nfunction readUInt32LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  return first +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    last * 2 ** 24;\r\n}\r\n\r\nfunction readUInt24LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 2];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 3);\r\n\r\n  return first + buf[++offset] * 2 ** 8 + last * 2 ** 16;\r\n}\r\n\r\nfunction readUInt16LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 1];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 2);\r\n\r\n  return first + last * 2 ** 8;\r\n}\r\n\r\nfunction readUInt8(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const val = this[offset];\r\n  if (val === undefined)\r\n    boundsError(offset, this.length - 1);\r\n\r\n  return val;\r\n}\r\n\r\nfunction readUIntBE(offset, byteLength) {\r\n  if (offset === undefined)\r\n    throw new ERR_INVALID_ARG_TYPE('offset', 'number', offset);\r\n  if (byteLength === 6)\r\n    return readUInt48BE(this, offset);\r\n  if (byteLength === 5)\r\n    return readUInt40BE(this, offset);\r\n  if (byteLength === 3)\r\n    return readUInt24BE(this, offset);\r\n  if (byteLength === 4)\r\n    return this.readUInt32BE(offset);\r\n  if (byteLength === 2)\r\n    return this.readUInt16BE(offset);\r\n  if (byteLength === 1)\r\n    return this.readUInt8(offset);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction readUInt48BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 5];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 6);\r\n\r\n  return (first * 2 ** 8 + buf[++offset]) * 2 ** 32 +\r\n    buf[++offset] * 2 ** 24 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readUInt40BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 4];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 5);\r\n\r\n  return first * 2 ** 32 +\r\n    buf[++offset] * 2 ** 24 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readUInt32BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  return first * 2 ** 24 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readUInt24BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 2];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 3);\r\n\r\n  return first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;\r\n}\r\n\r\nfunction readUInt16BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 1];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 2);\r\n\r\n  return first * 2 ** 8 + last;\r\n}\r\n\r\nfunction readIntLE(offset, byteLength) {\r\n  if (offset === undefined)\r\n    throw new ERR_INVALID_ARG_TYPE('offset', 'number', offset);\r\n  if (byteLength === 6)\r\n    return readInt48LE(this, offset);\r\n  if (byteLength === 5)\r\n    return readInt40LE(this, offset);\r\n  if (byteLength === 3)\r\n    return readInt24LE(this, offset);\r\n  if (byteLength === 4)\r\n    return this.readInt32LE(offset);\r\n  if (byteLength === 2)\r\n    return this.readInt16LE(offset);\r\n  if (byteLength === 1)\r\n    return this.readInt8(offset);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction readInt48LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 5];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 6);\r\n\r\n  const val = buf[offset + 4] + last * 2 ** 8;\r\n  return (val | (val & 2 ** 15) * 0x1fffe) * 2 ** 32 +\r\n    first +\r\n    buf[++offset] * 2 ** 8 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 24;\r\n}\r\n\r\nfunction readInt40LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 4];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 5);\r\n\r\n  return (last | (last & 2 ** 7) * 0x1fffffe) * 2 ** 32 +\r\n    first +\r\n    buf[++offset] * 2 ** 8 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 24;\r\n}\r\n\r\nfunction readInt32LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  return first +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    (last << 24); // Overflow\r\n}\r\n\r\nfunction readInt24LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 2];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 3);\r\n\r\n  const val = first + buf[++offset] * 2 ** 8 + last * 2 ** 16;\r\n  return val | (val & 2 ** 23) * 0x1fe;\r\n}\r\n\r\nfunction readInt16LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 1];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 2);\r\n\r\n  const val = first + last * 2 ** 8;\r\n  return val | (val & 2 ** 15) * 0x1fffe;\r\n}\r\n\r\nfunction readInt8(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const val = this[offset];\r\n  if (val === undefined)\r\n    boundsError(offset, this.length - 1);\r\n\r\n  return val | (val & 2 ** 7) * 0x1fffffe;\r\n}\r\n\r\nfunction readIntBE(offset, byteLength) {\r\n  if (offset === undefined)\r\n    throw new ERR_INVALID_ARG_TYPE('offset', 'number', offset);\r\n  if (byteLength === 6)\r\n    return readInt48BE(this, offset);\r\n  if (byteLength === 5)\r\n    return readInt40BE(this, offset);\r\n  if (byteLength === 3)\r\n    return readInt24BE(this, offset);\r\n  if (byteLength === 4)\r\n    return this.readInt32BE(offset);\r\n  if (byteLength === 2)\r\n    return this.readInt16BE(offset);\r\n  if (byteLength === 1)\r\n    return this.readInt8(offset);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction readInt48BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 5];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 6);\r\n\r\n  const val = buf[++offset] + first * 2 ** 8;\r\n  return (val | (val & 2 ** 15) * 0x1fffe) * 2 ** 32 +\r\n    buf[++offset] * 2 ** 24 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readInt40BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 4];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 5);\r\n\r\n  return (first | (first & 2 ** 7) * 0x1fffffe) * 2 ** 32 +\r\n    buf[++offset] * 2 ** 24 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readInt32BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  return (first << 24) + // Overflow\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readInt24BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 2];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 3);\r\n\r\n  const val = first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;\r\n  return val | (val & 2 ** 23) * 0x1fe;\r\n}\r\n\r\nfunction readInt16BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 1];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 2);\r\n\r\n  const val = first * 2 ** 8 + last;\r\n  return val | (val & 2 ** 15) * 0x1fffe;\r\n}\r\n\r\n// Read floats\r\nfunction readFloatBackwards(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  uInt8Float32Array[3] = first;\r\n  uInt8Float32Array[2] = this[++offset];\r\n  uInt8Float32Array[1] = this[++offset];\r\n  uInt8Float32Array[0] = last;\r\n  return float32Array[0];\r\n}\r\n\r\nfunction readFloatForwards(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  uInt8Float32Array[0] = first;\r\n  uInt8Float32Array[1] = this[++offset];\r\n  uInt8Float32Array[2] = this[++offset];\r\n  uInt8Float32Array[3] = last;\r\n  return float32Array[0];\r\n}\r\n\r\nfunction readDoubleBackwards(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  uInt8Float64Array[7] = first;\r\n  uInt8Float64Array[6] = this[++offset];\r\n  uInt8Float64Array[5] = this[++offset];\r\n  uInt8Float64Array[4] = this[++offset];\r\n  uInt8Float64Array[3] = this[++offset];\r\n  uInt8Float64Array[2] = this[++offset];\r\n  uInt8Float64Array[1] = this[++offset];\r\n  uInt8Float64Array[0] = last;\r\n  return float64Array[0];\r\n}\r\n\r\nfunction readDoubleForwards(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  uInt8Float64Array[0] = first;\r\n  uInt8Float64Array[1] = this[++offset];\r\n  uInt8Float64Array[2] = this[++offset];\r\n  uInt8Float64Array[3] = this[++offset];\r\n  uInt8Float64Array[4] = this[++offset];\r\n  uInt8Float64Array[5] = this[++offset];\r\n  uInt8Float64Array[6] = this[++offset];\r\n  uInt8Float64Array[7] = last;\r\n  return float64Array[0];\r\n}\r\n\r\n// Write integers.\r\nfunction writeBigU_Int64LE(buf, value, offset, min, max) {\r\n  checkInt(value, min, max, buf, offset, 7);\r\n\r\n  let lo = Number(value & 0xffffffffn);\r\n  buf[offset++] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset++] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset++] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset++] = lo;\r\n  let hi = Number(value >> 32n & 0xffffffffn);\r\n  buf[offset++] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset++] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset++] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset++] = hi;\r\n  return offset;\r\n}\r\n\r\nfunction writeBigUInt64LE(value, offset = 0) {\r\n  return writeBigU_Int64LE(this, value, offset, 0n, 0xffffffffffffffffn);\r\n}\r\n\r\nfunction writeBigU_Int64BE(buf, value, offset, min, max) {\r\n  checkInt(value, min, max, buf, offset, 7);\r\n\r\n  let lo = Number(value & 0xffffffffn);\r\n  buf[offset + 7] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset + 6] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset + 5] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset + 4] = lo;\r\n  let hi = Number(value >> 32n & 0xffffffffn);\r\n  buf[offset + 3] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset + 2] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset + 1] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset] = hi;\r\n  return offset + 8;\r\n}\r\n\r\nfunction writeBigUInt64BE(value, offset = 0) {\r\n  return writeBigU_Int64BE(this, value, offset, 0n, 0xffffffffffffffffn);\r\n}\r\n\r\nfunction writeBigInt64LE(value, offset = 0) {\r\n  return writeBigU_Int64LE(\r\n    this, value, offset, -0x8000000000000000n, 0x7fffffffffffffffn);\r\n}\r\n\r\nfunction writeBigInt64BE(value, offset = 0) {\r\n  return writeBigU_Int64BE(\r\n    this, value, offset, -0x8000000000000000n, 0x7fffffffffffffffn);\r\n}\r\n\r\nfunction writeUIntLE(value, offset, byteLength) {\r\n  if (byteLength === 6)\r\n    return writeU_Int48LE(this, value, offset, 0, 0xffffffffffff);\r\n  if (byteLength === 5)\r\n    return writeU_Int40LE(this, value, offset, 0, 0xffffffffff);\r\n  if (byteLength === 3)\r\n    return writeU_Int24LE(this, value, offset, 0, 0xffffff);\r\n  if (byteLength === 4)\r\n    return writeU_Int32LE(this, value, offset, 0, 0xffffffff);\r\n  if (byteLength === 2)\r\n    return writeU_Int16LE(this, value, offset, 0, 0xffff);\r\n  if (byteLength === 1)\r\n    return writeU_Int8(this, value, offset, 0, 0xff);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction writeU_Int48LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 5);\r\n\r\n  const newVal = MathFloor(value * 2 ** -32);\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  buf[offset++] = newVal;\r\n  buf[offset++] = (newVal >>> 8);\r\n  return offset;\r\n}\r\n\r\nfunction writeU_Int40LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 4);\r\n\r\n  const newVal = value;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  buf[offset++] = MathFloor(newVal * 2 ** -32);\r\n  return offset;\r\n}\r\n\r\nfunction writeU_Int32LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 3);\r\n\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  return offset;\r\n}\r\n\r\nfunction writeUInt32LE(value, offset = 0) {\r\n  return writeU_Int32LE(this, value, offset, 0, 0xffffffff);\r\n}\r\n\r\nfunction writeU_Int24LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 2);\r\n\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  return offset;\r\n}\r\n\r\nfunction writeU_Int16LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 1);\r\n\r\n  buf[offset++] = value;\r\n  buf[offset++] = (value >>> 8);\r\n  return offset;\r\n}\r\n\r\nfunction writeUInt16LE(value, offset = 0) {\r\n  return writeU_Int16LE(this, value, offset, 0, 0xffff);\r\n}\r\n\r\nfunction writeU_Int8(buf, value, offset, min, max) {\r\n  value = +value;\r\n  // `checkInt()` can not be used here because it checks two entries.\r\n  validateNumber(offset, 'offset');\r\n  if (value > max || value < min) {\r\n    throw new ERR_OUT_OF_RANGE('value', `>= ${min} and <= ${max}`, value);\r\n  }\r\n  if (buf[offset] === undefined)\r\n    boundsError(offset, buf.length - 1);\r\n\r\n  buf[offset] = value;\r\n  return offset + 1;\r\n}\r\n\r\nfunction writeUInt8(value, offset = 0) {\r\n  return writeU_Int8(this, value, offset, 0, 0xff);\r\n}\r\n\r\nfunction writeUIntBE(value, offset, byteLength) {\r\n  if (byteLength === 6)\r\n    return writeU_Int48BE(this, value, offset, 0, 0xffffffffffff);\r\n  if (byteLength === 5)\r\n    return writeU_Int40BE(this, value, offset, 0, 0xffffffffff);\r\n  if (byteLength === 3)\r\n    return writeU_Int24BE(this, value, offset, 0, 0xffffff);\r\n  if (byteLength === 4)\r\n    return writeU_Int32BE(this, value, offset, 0, 0xffffffff);\r\n  if (byteLength === 2)\r\n    return writeU_Int16BE(this, value, offset, 0, 0xffff);\r\n  if (byteLength === 1)\r\n    return writeU_Int8(this, value, offset, 0, 0xff);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction writeU_Int48BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 5);\r\n\r\n  const newVal = MathFloor(value * 2 ** -32);\r\n  buf[offset++] = (newVal >>> 8);\r\n  buf[offset++] = newVal;\r\n  buf[offset + 3] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 2] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 1] = value;\r\n  value = value >>> 8;\r\n  buf[offset] = value;\r\n  return offset + 4;\r\n}\r\n\r\nfunction writeU_Int40BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 4);\r\n\r\n  buf[offset++] = MathFloor(value * 2 ** -32);\r\n  buf[offset + 3] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 2] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 1] = value;\r\n  value = value >>> 8;\r\n  buf[offset] = value;\r\n  return offset + 4;\r\n}\r\n\r\nfunction writeU_Int32BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 3);\r\n\r\n  buf[offset + 3] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 2] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 1] = value;\r\n  value = value >>> 8;\r\n  buf[offset] = value;\r\n  return offset + 4;\r\n}\r\n\r\nfunction writeUInt32BE(value, offset = 0) {\r\n  return writeU_Int32BE(this, value, offset, 0, 0xffffffff);\r\n}\r\n\r\nfunction writeU_Int24BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 2);\r\n\r\n  buf[offset + 2] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 1] = value;\r\n  value = value >>> 8;\r\n  buf[offset] = value;\r\n  return offset + 3;\r\n}\r\n\r\nfunction writeU_Int16BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 1);\r\n\r\n  buf[offset++] = (value >>> 8);\r\n  buf[offset++] = value;\r\n  return offset;\r\n}\r\n\r\nfunction writeUInt16BE(value, offset = 0) {\r\n  return writeU_Int16BE(this, value, offset, 0, 0xffff);\r\n}\r\n\r\nfunction writeIntLE(value, offset, byteLength) {\r\n  if (byteLength === 6)\r\n    return writeU_Int48LE(this, value, offset, -0x800000000000, 0x7fffffffffff);\r\n  if (byteLength === 5)\r\n    return writeU_Int40LE(this, value, offset, -0x8000000000, 0x7fffffffff);\r\n  if (byteLength === 3)\r\n    return writeU_Int24LE(this, value, offset, -0x800000, 0x7fffff);\r\n  if (byteLength === 4)\r\n    return writeU_Int32LE(this, value, offset, -0x80000000, 0x7fffffff);\r\n  if (byteLength === 2)\r\n    return writeU_Int16LE(this, value, offset, -0x8000, 0x7fff);\r\n  if (byteLength === 1)\r\n    return writeU_Int8(this, value, offset, -0x80, 0x7f);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction writeInt32LE(value, offset = 0) {\r\n  return writeU_Int32LE(this, value, offset, -0x80000000, 0x7fffffff);\r\n}\r\n\r\nfunction writeInt16LE(value, offset = 0) {\r\n  return writeU_Int16LE(this, value, offset, -0x8000, 0x7fff);\r\n}\r\n\r\nfunction writeInt8(value, offset = 0) {\r\n  return writeU_Int8(this, value, offset, -0x80, 0x7f);\r\n}\r\n\r\nfunction writeIntBE(value, offset, byteLength) {\r\n  if (byteLength === 6)\r\n    return writeU_Int48BE(this, value, offset, -0x800000000000, 0x7fffffffffff);\r\n  if (byteLength === 5)\r\n    return writeU_Int40BE(this, value, offset, -0x8000000000, 0x7fffffffff);\r\n  if (byteLength === 3)\r\n    return writeU_Int24BE(this, value, offset, -0x800000, 0x7fffff);\r\n  if (byteLength === 4)\r\n    return writeU_Int32BE(this, value, offset, -0x80000000, 0x7fffffff);\r\n  if (byteLength === 2)\r\n    return writeU_Int16BE(this, value, offset, -0x8000, 0x7fff);\r\n  if (byteLength === 1)\r\n    return writeU_Int8(this, value, offset, -0x80, 0x7f);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction writeInt32BE(value, offset = 0) {\r\n  return writeU_Int32BE(this, value, offset, -0x80000000, 0x7fffffff);\r\n}\r\n\r\nfunction writeInt16BE(value, offset = 0) {\r\n  return writeU_Int16BE(this, value, offset, -0x8000, 0x7fff);\r\n}\r\n\r\n// Write floats.\r\nfunction writeDoubleForwards(val, offset = 0) {\r\n  val = +val;\r\n  checkBounds(this, offset, 7);\r\n\r\n  float64Array[0] = val;\r\n  this[offset++] = uInt8Float64Array[0];\r\n  this[offset++] = uInt8Float64Array[1];\r\n  this[offset++] = uInt8Float64Array[2];\r\n  this[offset++] = uInt8Float64Array[3];\r\n  this[offset++] = uInt8Float64Array[4];\r\n  this[offset++] = uInt8Float64Array[5];\r\n  this[offset++] = uInt8Float64Array[6];\r\n  this[offset++] = uInt8Float64Array[7];\r\n  return offset;\r\n}\r\n\r\nfunction writeDoubleBackwards(val, offset = 0) {\r\n  val = +val;\r\n  checkBounds(this, offset, 7);\r\n\r\n  float64Array[0] = val;\r\n  this[offset++] = uInt8Float64Array[7];\r\n  this[offset++] = uInt8Float64Array[6];\r\n  this[offset++] = uInt8Float64Array[5];\r\n  this[offset++] = uInt8Float64Array[4];\r\n  this[offset++] = uInt8Float64Array[3];\r\n  this[offset++] = uInt8Float64Array[2];\r\n  this[offset++] = uInt8Float64Array[1];\r\n  this[offset++] = uInt8Float64Array[0];\r\n  return offset;\r\n}\r\n\r\nfunction writeFloatForwards(val, offset = 0) {\r\n  val = +val;\r\n  checkBounds(this, offset, 3);\r\n\r\n  float32Array[0] = val;\r\n  this[offset++] = uInt8Float32Array[0];\r\n  this[offset++] = uInt8Float32Array[1];\r\n  this[offset++] = uInt8Float32Array[2];\r\n  this[offset++] = uInt8Float32Array[3];\r\n  return offset;\r\n}\r\n\r\nfunction writeFloatBackwards(val, offset = 0) {\r\n  val = +val;\r\n  checkBounds(this, offset, 3);\r\n\r\n  float32Array[0] = val;\r\n  this[offset++] = uInt8Float32Array[3];\r\n  this[offset++] = uInt8Float32Array[2];\r\n  this[offset++] = uInt8Float32Array[1];\r\n  this[offset++] = uInt8Float32Array[0];\r\n  return offset;\r\n}\r\n\r\nclass FastBuffer extends Uint8Array {\r\n  // Using an explicit constructor here is necessary to avoid relying on\r\n  // `Array.prototype[Symbol.iterator]`, which can be mutated by users.\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(bufferOrLength, byteOffset, length) {\r\n    super(bufferOrLength, byteOffset, length);\r\n  }\r\n}\r\n\r\nfunction addBufferPrototypeMethods(proto) {\r\n  proto.readBigUInt64LE = readBigUInt64LE;\r\n  proto.readBigUInt64BE = readBigUInt64BE;\r\n  proto.readBigUint64LE = readBigUInt64LE;\r\n  proto.readBigUint64BE = readBigUInt64BE;\r\n  proto.readBigInt64LE = readBigInt64LE;\r\n  proto.readBigInt64BE = readBigInt64BE;\r\n  proto.writeBigUInt64LE = writeBigUInt64LE;\r\n  proto.writeBigUInt64BE = writeBigUInt64BE;\r\n  proto.writeBigUint64LE = writeBigUInt64LE;\r\n  proto.writeBigUint64BE = writeBigUInt64BE;\r\n  proto.writeBigInt64LE = writeBigInt64LE;\r\n  proto.writeBigInt64BE = writeBigInt64BE;\r\n\r\n  proto.readUIntLE = readUIntLE;\r\n  proto.readUInt32LE = readUInt32LE;\r\n  proto.readUInt16LE = readUInt16LE;\r\n  proto.readUInt8 = readUInt8;\r\n  proto.readUIntBE = readUIntBE;\r\n  proto.readUInt32BE = readUInt32BE;\r\n  proto.readUInt16BE = readUInt16BE;\r\n  proto.readUintLE = readUIntLE;\r\n  proto.readUint32LE = readUInt32LE;\r\n  proto.readUint16LE = readUInt16LE;\r\n  proto.readUint8 = readUInt8;\r\n  proto.readUintBE = readUIntBE;\r\n  proto.readUint32BE = readUInt32BE;\r\n  proto.readUint16BE = readUInt16BE;\r\n  proto.readIntLE = readIntLE;\r\n  proto.readInt32LE = readInt32LE;\r\n  proto.readInt16LE = readInt16LE;\r\n  proto.readInt8 = readInt8;\r\n  proto.readIntBE = readIntBE;\r\n  proto.readInt32BE = readInt32BE;\r\n  proto.readInt16BE = readInt16BE;\r\n\r\n  proto.writeUIntLE = writeUIntLE;\r\n  proto.writeUInt32LE = writeUInt32LE;\r\n  proto.writeUInt16LE = writeUInt16LE;\r\n  proto.writeUInt8 = writeUInt8;\r\n  proto.writeUIntBE = writeUIntBE;\r\n  proto.writeUInt32BE = writeUInt32BE;\r\n  proto.writeUInt16BE = writeUInt16BE;\r\n  proto.writeUintLE = writeUIntLE;\r\n  proto.writeUint32LE = writeUInt32LE;\r\n  proto.writeUint16LE = writeUInt16LE;\r\n  proto.writeUint8 = writeUInt8;\r\n  proto.writeUintBE = writeUIntBE;\r\n  proto.writeUint32BE = writeUInt32BE;\r\n  proto.writeUint16BE = writeUInt16BE;\r\n  proto.writeIntLE = writeIntLE;\r\n  proto.writeInt32LE = writeInt32LE;\r\n  proto.writeInt16LE = writeInt16LE;\r\n  proto.writeInt8 = writeInt8;\r\n  proto.writeIntBE = writeIntBE;\r\n  proto.writeInt32BE = writeInt32BE;\r\n  proto.writeInt16BE = writeInt16BE;\r\n\r\n  proto.readFloatLE = bigEndian ? readFloatBackwards : readFloatForwards;\r\n  proto.readFloatBE = bigEndian ? readFloatForwards : readFloatBackwards;\r\n  proto.readDoubleLE = bigEndian ? readDoubleBackwards : readDoubleForwards;\r\n  proto.readDoubleBE = bigEndian ? readDoubleForwards : readDoubleBackwards;\r\n  proto.writeFloatLE = bigEndian ? writeFloatBackwards : writeFloatForwards;\r\n  proto.writeFloatBE = bigEndian ? writeFloatForwards : writeFloatBackwards;\r\n  proto.writeDoubleLE = bigEndian ? writeDoubleBackwards : writeDoubleForwards;\r\n  proto.writeDoubleBE = bigEndian ? writeDoubleForwards : writeDoubleBackwards;\r\n\r\n  proto.asciiSlice = asciiSlice;\r\n  proto.base64Slice = base64Slice;\r\n  proto.base64urlSlice = base64urlSlice;\r\n  proto.latin1Slice = latin1Slice;\r\n  proto.hexSlice = hexSlice;\r\n  proto.ucs2Slice = ucs2Slice;\r\n  proto.utf8Slice = utf8Slice;\r\n  proto.asciiWrite = asciiWrite;\r\n  proto.base64Write = base64Write;\r\n  proto.base64urlWrite = base64urlWrite;\r\n  proto.latin1Write = latin1Write;\r\n  proto.hexWrite = hexWrite;\r\n  proto.ucs2Write = ucs2Write;\r\n  proto.utf8Write = utf8Write;\r\n}\r\n\r\n// This would better be placed in internal/worker/io.js, but that doesn't work\r\n// because Buffer needs this and that would introduce a cyclic dependency.\r\nfunction markAsUntransferable(obj) {\r\n  if ((typeof obj !== 'object' && typeof obj !== 'function') || obj === null)\r\n    return;  // This object is a primitive and therefore already untransferable.\r\n  obj[untransferable_object_private_symbol] = true;\r\n}\r\n\r\n// This simply checks if the object is marked as untransferable and doesn't\r\n// check whether we are able to transfer it.\r\nfunction isMarkedAsUntransferable(obj) {\r\n  if (obj == null)\r\n    return false;\r\n  // Private symbols are not inherited.\r\n  return obj[untransferable_object_private_symbol] !== undefined;\r\n}\r\n\r\n// A toggle used to access the zero fill setting of the array buffer allocator\r\n// in C++.\r\n// |zeroFill| can be undefined when running inside an isolate where we\r\n// do not own the ArrayBuffer allocator.  Zero fill is always on in that case.\r\nlet zeroFill = getZeroFillToggle();\r\nfunction createUnsafeBuffer(size) {\r\n  zeroFill[0] = 0;\r\n  try {\r\n    return new FastBuffer(size);\r\n  } finally {\r\n    zeroFill[0] = 1;\r\n  }\r\n}\r\n\r\n// The connection between the JS land zero fill toggle and the\r\n// C++ one in the NodeArrayBufferAllocator gets lost if the toggle\r\n// is deserialized from the snapshot, because V8 owns the underlying\r\n// memory of this toggle. This resets the connection.\r\nfunction reconnectZeroFillToggle() {\r\n  zeroFill = getZeroFillToggle();\r\n}\r\n\r\nmodule.exports = {\r\n  FastBuffer,\r\n  addBufferPrototypeMethods,\r\n  markAsUntransferable,\r\n  isMarkedAsUntransferable,\r\n  createUnsafeBuffer,\r\n  readUInt16BE,\r\n  readUInt32BE,\r\n  reconnectZeroFillToggle,\r\n};\r\n"
  },
  "25": {
    "metadata": {
      "scriptId": "25",
      "url": "node:internal/worker/js_transferable",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 100,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "eb0fe8f9a5af0d000437a0d789138df06d9a9007d66ef1c67f222ad116755ff9",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3307,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/worker/js_transferable"
    },
    "source": "'use strict';\r\nconst {\r\n  Error,\r\n  StringPrototypeSplit,\r\n} = primordials;\r\nconst {\r\n  messaging_deserialize_symbol,\r\n  messaging_transfer_symbol,\r\n  messaging_clone_symbol,\r\n  messaging_transfer_list_symbol,\r\n} = internalBinding('symbols');\r\nconst {\r\n  setDeserializerCreateObjectFunction,\r\n} = internalBinding('messaging');\r\nconst {\r\n  privateSymbols: {\r\n    transfer_mode_private_symbol,\r\n  },\r\n  constants: {\r\n    kDisallowCloneAndTransfer,\r\n    kTransferable,\r\n    kCloneable,\r\n  },\r\n} = internalBinding('util');\r\n\r\nfunction setup() {\r\n  // Register the handler that will be used when deserializing JS-based objects\r\n  // from .postMessage() calls. The format of `deserializeInfo` is generally\r\n  // 'module:Constructor', e.g. 'internal/fs/promises:FileHandle'.\r\n  setDeserializerCreateObjectFunction((deserializeInfo) => {\r\n    const { 0: module, 1: ctor } = StringPrototypeSplit(deserializeInfo, ':');\r\n    const Ctor = require(module)[ctor];\r\n    if (typeof Ctor !== 'function' ||\r\n        typeof Ctor.prototype[messaging_deserialize_symbol] !== 'function') {\r\n      // Not one of the official errors because one should not be able to get\r\n      // here without messing with Node.js internals.\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      throw new Error(`Unknown deserialize spec ${deserializeInfo}`);\r\n    }\r\n\r\n    return new Ctor();\r\n  });\r\n}\r\n\r\n/**\r\n * Mark an object as being transferable or customized cloneable in\r\n * `.postMessage()`.\r\n * This should only applied to host objects like Web API interfaces, Node.js'\r\n * built-in objects.\r\n * Objects marked as cloneable and transferable should implement the method\r\n * `@@kClone` and `@@kTransfer` respectively. Method `@@kDeserialize` is\r\n * required to deserialize the data to a new instance.\r\n *\r\n * Example implementation of a cloneable interface (assuming its located in\r\n * `internal/my_interface.js`):\r\n *\r\n * ```\r\n * class MyInterface {\r\n *   constructor(...args) {\r\n *     markTransferMode(this, true);\r\n *     this.args = args;\r\n *   }\r\n *   [kDeserialize](data) {\r\n *     this.args = data.args;\r\n *   }\r\n *   [kClone]() {\r\n *     return {\r\n *        data: { args: this.args },\r\n *        deserializeInfo: 'internal/my_interface:MyInterface',\r\n *     }\r\n *   }\r\n * }\r\n *\r\n * module.exports = {\r\n *   MyInterface,\r\n * };\r\n * ```\r\n * @param {object} obj Host objects that can be either cloned or transferred.\r\n * @param {boolean} [cloneable] if the object can be cloned and `@@kClone` is\r\n *                              implemented.\r\n * @param {boolean} [transferable] if the object can be transferred and\r\n *                                 `@@kTransfer` is implemented.\r\n */\r\nfunction markTransferMode(obj, cloneable = false, transferable = false) {\r\n  if ((typeof obj !== 'object' && typeof obj !== 'function') || obj === null)\r\n    return;  // This object is a primitive and therefore already untransferable.\r\n  let mode = kDisallowCloneAndTransfer;\r\n  if (cloneable) mode |= kCloneable;\r\n  if (transferable) mode |= kTransferable;\r\n  obj[transfer_mode_private_symbol] = mode;\r\n}\r\n\r\nmodule.exports = {\r\n  markTransferMode,\r\n  setup,\r\n  kClone: messaging_clone_symbol,\r\n  kDeserialize: messaging_deserialize_symbol,\r\n  kTransfer: messaging_transfer_symbol,\r\n  kTransferList: messaging_transfer_list_symbol,\r\n};\r\n"
  },
  "26": {
    "metadata": {
      "scriptId": "26",
      "url": "node:internal/process/per_thread",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 433,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "54525b2c8187190bce5e6f013fd61ce0047cf41d19980babe7b2e9041bf9534a",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 13149,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/per_thread"
    },
    "source": "'use strict';\r\n\r\n// This files contains process bootstrappers that can be\r\n// run when setting up each thread, including the main\r\n// thread and the worker threads.\r\n\r\nconst {\r\n  ArrayPrototypeEvery,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSplice,\r\n  BigUint64Array,\r\n  Float64Array,\r\n  NumberMAX_SAFE_INTEGER,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ReflectApply,\r\n  RegExpPrototypeExec,\r\n  SafeArrayIterator,\r\n  Set,\r\n  SetPrototypeEntries,\r\n  SetPrototypeValues,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeReplace,\r\n  StringPrototypeSlice,\r\n  StringPrototypeStartsWith,\r\n  Symbol,\r\n  SymbolIterator,\r\n} = primordials;\r\n\r\nconst {\r\n  ErrnoException,\r\n  codes: {\r\n    ERR_ASSERTION,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_OUT_OF_RANGE,\r\n    ERR_UNKNOWN_SIGNAL,\r\n  },\r\n} = require('internal/errors');\r\nconst format = require('internal/util/inspect').format;\r\nconst {\r\n  validateArray,\r\n  validateNumber,\r\n  validateObject,\r\n} = require('internal/validators');\r\nconst { getValidatedPath } = require('internal/fs/utils');\r\nconst { toNamespacedPath } = require('path');\r\nconst constants = internalBinding('constants').os.signals;\r\n\r\nconst kInternal = Symbol('internal properties');\r\n\r\nfunction assert(x, msg) {\r\n  if (!x) throw new ERR_ASSERTION(msg || 'assertion error');\r\n}\r\nconst { exitCodes: { kNoFailure } } = internalBinding('errors');\r\n\r\nconst binding = internalBinding('process_methods');\r\n\r\n// The 3 entries filled in by the original process.hrtime contains\r\n// the upper/lower 32 bits of the second part of the value,\r\n// and the remaining nanoseconds of the value.\r\nconst hrValues = binding.hrtimeBuffer;\r\n// Use a BigUint64Array because this is actually a bit\r\n// faster than simply returning a BigInt from C++ in V8 7.1.\r\nconst hrBigintValues = new BigUint64Array(binding.hrtimeBuffer.buffer, 0, 1);\r\n\r\nfunction hrtime(time) {\r\n  binding.hrtime();\r\n\r\n  if (time !== undefined) {\r\n    validateArray(time, 'time');\r\n    if (time.length !== 2) {\r\n      throw new ERR_OUT_OF_RANGE('time', 2, time.length);\r\n    }\r\n\r\n    const sec = (hrValues[0] * 0x100000000 + hrValues[1]) - time[0];\r\n    const nsec = hrValues[2] - time[1];\r\n    const needsBorrow = nsec < 0;\r\n    return [needsBorrow ? sec - 1 : sec, needsBorrow ? nsec + 1e9 : nsec];\r\n  }\r\n\r\n  return [\r\n    hrValues[0] * 0x100000000 + hrValues[1],\r\n    hrValues[2],\r\n  ];\r\n}\r\n\r\nfunction hrtimeBigInt() {\r\n  binding.hrtimeBigInt();\r\n  return hrBigintValues[0];\r\n}\r\n\r\nfunction nop() {}\r\n\r\n// The execution of this function itself should not cause any side effects.\r\nfunction wrapProcessMethods(binding) {\r\n  const {\r\n    cpuUsage: _cpuUsage,\r\n    memoryUsage: _memoryUsage,\r\n    rss,\r\n    resourceUsage: _resourceUsage,\r\n    loadEnvFile: _loadEnvFile,\r\n  } = binding;\r\n\r\n  function _rawDebug(...args) {\r\n    binding._rawDebug(ReflectApply(format, null, args));\r\n  }\r\n\r\n  // Create the argument array that will be passed to the native function.\r\n  const cpuValues = new Float64Array(2);\r\n\r\n  // Replace the native function with the JS version that calls the native\r\n  // function.\r\n  function cpuUsage(prevValue) {\r\n    // If a previous value was passed in, ensure it has the correct shape.\r\n    if (prevValue) {\r\n      if (!previousValueIsValid(prevValue.user)) {\r\n        validateObject(prevValue, 'prevValue');\r\n\r\n        validateNumber(prevValue.user, 'prevValue.user');\r\n        throw new ERR_INVALID_ARG_VALUE.RangeError('prevValue.user',\r\n                                                   prevValue.user);\r\n      }\r\n\r\n      if (!previousValueIsValid(prevValue.system)) {\r\n        validateNumber(prevValue.system, 'prevValue.system');\r\n        throw new ERR_INVALID_ARG_VALUE.RangeError('prevValue.system',\r\n                                                   prevValue.system);\r\n      }\r\n    }\r\n\r\n    // Call the native function to get the current values.\r\n    _cpuUsage(cpuValues);\r\n\r\n    // If a previous value was passed in, return diff of current from previous.\r\n    if (prevValue) {\r\n      return {\r\n        user: cpuValues[0] - prevValue.user,\r\n        system: cpuValues[1] - prevValue.system,\r\n      };\r\n    }\r\n\r\n    // If no previous value passed in, return current value.\r\n    return {\r\n      user: cpuValues[0],\r\n      system: cpuValues[1],\r\n    };\r\n  }\r\n\r\n  // Ensure that a previously passed in value is valid. Currently, the native\r\n  // implementation always returns numbers <= Number.MAX_SAFE_INTEGER.\r\n  function previousValueIsValid(num) {\r\n    return typeof num === 'number' &&\r\n        num <= NumberMAX_SAFE_INTEGER &&\r\n        num >= 0;\r\n  }\r\n\r\n  const memValues = new Float64Array(5);\r\n  function memoryUsage() {\r\n    _memoryUsage(memValues);\r\n    return {\r\n      rss: memValues[0],\r\n      heapTotal: memValues[1],\r\n      heapUsed: memValues[2],\r\n      external: memValues[3],\r\n      arrayBuffers: memValues[4],\r\n    };\r\n  }\r\n\r\n  memoryUsage.rss = rss;\r\n\r\n  function exit(code) {\r\n    if (arguments.length !== 0) {\r\n      process.exitCode = code;\r\n    }\r\n\r\n    if (!process._exiting) {\r\n      process._exiting = true;\r\n      process.emit('exit', process.exitCode || kNoFailure);\r\n    }\r\n    // FIXME(joyeecheung): This is an undocumented API that gets monkey-patched\r\n    // in the user land. Either document it, or deprecate it in favor of a\r\n    // better public alternative.\r\n    process.reallyExit(process.exitCode || kNoFailure);\r\n\r\n    // If this is a worker, v8::Isolate::TerminateExecution() is called above.\r\n    // That function spoofs the stack pointer to cause the stack guard\r\n    // check to throw the termination exception. Because v8 performs\r\n    // stack guard check upon every function call, we give it a chance.\r\n    //\r\n    // Without this, user code after `process.exit()` would take effect.\r\n    // test/parallel/test-worker-voluntarily-exit-followed-by-addition.js\r\n    // test/parallel/test-worker-voluntarily-exit-followed-by-throw.js\r\n    nop();\r\n  }\r\n\r\n  function kill(pid, sig) {\r\n    let err;\r\n\r\n    // eslint-disable-next-line eqeqeq\r\n    if (pid != (pid | 0)) {\r\n      throw new ERR_INVALID_ARG_TYPE('pid', 'number', pid);\r\n    }\r\n\r\n    // Preserve null signal\r\n    if (sig === (sig | 0)) {\r\n      // XXX(joyeecheung): we have to use process._kill here because\r\n      // it's monkey-patched by tests.\r\n      err = process._kill(pid, sig);\r\n    } else {\r\n      sig = sig || 'SIGTERM';\r\n      if (constants[sig]) {\r\n        err = process._kill(pid, constants[sig]);\r\n      } else {\r\n        throw new ERR_UNKNOWN_SIGNAL(sig);\r\n      }\r\n    }\r\n\r\n    if (err)\r\n      throw new ErrnoException(err, 'kill');\r\n\r\n    return true;\r\n  }\r\n\r\n  const resourceValues = new Float64Array(16);\r\n  function resourceUsage() {\r\n    _resourceUsage(resourceValues);\r\n    return {\r\n      userCPUTime: resourceValues[0],\r\n      systemCPUTime: resourceValues[1],\r\n      maxRSS: resourceValues[2],\r\n      sharedMemorySize: resourceValues[3],\r\n      unsharedDataSize: resourceValues[4],\r\n      unsharedStackSize: resourceValues[5],\r\n      minorPageFault: resourceValues[6],\r\n      majorPageFault: resourceValues[7],\r\n      swappedOut: resourceValues[8],\r\n      fsRead: resourceValues[9],\r\n      fsWrite: resourceValues[10],\r\n      ipcSent: resourceValues[11],\r\n      ipcReceived: resourceValues[12],\r\n      signalsCount: resourceValues[13],\r\n      voluntaryContextSwitches: resourceValues[14],\r\n      involuntaryContextSwitches: resourceValues[15],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Loads the `.env` file to process.env.\r\n   * @param {string | URL | Buffer | undefined} path\r\n   */\r\n  function loadEnvFile(path = undefined) { // Provide optional value so that `loadEnvFile.length` returns 0\r\n    if (path != null) {\r\n      path = getValidatedPath(path);\r\n      _loadEnvFile(toNamespacedPath(path));\r\n    } else {\r\n      _loadEnvFile();\r\n    }\r\n  }\r\n\r\n\r\n  return {\r\n    _rawDebug,\r\n    cpuUsage,\r\n    resourceUsage,\r\n    memoryUsage,\r\n    kill,\r\n    exit,\r\n    loadEnvFile,\r\n  };\r\n}\r\n\r\nconst replaceUnderscoresRegex = /_/g;\r\nconst leadingDashesRegex = /^--?/;\r\nconst trailingValuesRegex = /=.*$/;\r\n\r\n// This builds the initial process.allowedNodeEnvironmentFlags\r\n// from data in the config binding.\r\nfunction buildAllowedFlags() {\r\n  const {\r\n    envSettings: { kAllowedInEnvvar },\r\n    types: { kBoolean },\r\n  } = internalBinding('options');\r\n  const { getCLIOptionsInfo } = require('internal/options');\r\n  const { options, aliases } = getCLIOptionsInfo();\r\n\r\n  const allowedNodeEnvironmentFlags = [];\r\n  for (const { 0: name, 1: info } of options) {\r\n    if (info.envVarSettings === kAllowedInEnvvar) {\r\n      ArrayPrototypePush(allowedNodeEnvironmentFlags, name);\r\n      if (info.type === kBoolean) {\r\n        const negatedName = `--no-${name.slice(2)}`;\r\n        ArrayPrototypePush(allowedNodeEnvironmentFlags, negatedName);\r\n      }\r\n    }\r\n  }\r\n\r\n  function isAccepted(to) {\r\n    if (!StringPrototypeStartsWith(to, '-') || to === '--') return true;\r\n    const recursiveExpansion = aliases.get(to);\r\n    if (recursiveExpansion) {\r\n      if (recursiveExpansion[0] === to)\r\n        ArrayPrototypeSplice(recursiveExpansion, 0, 1);\r\n      return ArrayPrototypeEvery(recursiveExpansion, isAccepted);\r\n    }\r\n    return options.get(to).envVarSettings === kAllowedInEnvvar;\r\n  }\r\n  for (const { 0: from, 1: expansion } of aliases) {\r\n    if (ArrayPrototypeEvery(expansion, isAccepted)) {\r\n      let canonical = from;\r\n      if (StringPrototypeEndsWith(canonical, '='))\r\n        canonical = StringPrototypeSlice(canonical, 0, canonical.length - 1);\r\n      if (StringPrototypeEndsWith(canonical, ' <arg>'))\r\n        canonical = StringPrototypeSlice(canonical, 0, canonical.length - 4);\r\n      ArrayPrototypePush(allowedNodeEnvironmentFlags, canonical);\r\n    }\r\n  }\r\n\r\n  const trimLeadingDashes =\r\n    (flag) => StringPrototypeReplace(flag, leadingDashesRegex, '');\r\n\r\n  // Save these for comparison against flags provided to\r\n  // process.allowedNodeEnvironmentFlags.has() which lack leading dashes.\r\n  const nodeFlags = ArrayPrototypeMap(allowedNodeEnvironmentFlags,\r\n                                      trimLeadingDashes);\r\n\r\n  class NodeEnvironmentFlagsSet extends Set {\r\n    constructor(array) {\r\n      super();\r\n      this[kInternal] = { array };\r\n    }\r\n\r\n    add() {\r\n      // No-op, `Set` API compatible\r\n      return this;\r\n    }\r\n\r\n    delete() {\r\n      // No-op, `Set` API compatible\r\n      return false;\r\n    }\r\n\r\n    clear() {\r\n      // No-op, `Set` API compatible\r\n    }\r\n\r\n    has(key) {\r\n      // This will return `true` based on various possible\r\n      // permutations of a flag, including present/missing leading\r\n      // dash(es) and/or underscores-for-dashes.\r\n      // Strips any values after `=`, inclusive.\r\n      // TODO(addaleax): It might be more flexible to run the option parser\r\n      // on a dummy option set and see whether it rejects the argument or\r\n      // not.\r\n      if (typeof key === 'string') {\r\n        key = StringPrototypeReplace(key, replaceUnderscoresRegex, '-');\r\n        if (RegExpPrototypeExec(leadingDashesRegex, key) !== null) {\r\n          key = StringPrototypeReplace(key, trailingValuesRegex, '');\r\n          return ArrayPrototypeIncludes(this[kInternal].array, key);\r\n        }\r\n        return ArrayPrototypeIncludes(nodeFlags, key);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    entries() {\r\n      this[kInternal].set ??=\r\n        new Set(new SafeArrayIterator(this[kInternal].array));\r\n      return SetPrototypeEntries(this[kInternal].set);\r\n    }\r\n\r\n    forEach(callback, thisArg = undefined) {\r\n      ArrayPrototypeForEach(\r\n        this[kInternal].array,\r\n        (v) => ReflectApply(callback, thisArg, [v, v, this]),\r\n      );\r\n    }\r\n\r\n    get size() {\r\n      return this[kInternal].array.length;\r\n    }\r\n\r\n    values() {\r\n      this[kInternal].set ??=\r\n        new Set(new SafeArrayIterator(this[kInternal].array));\r\n      return SetPrototypeValues(this[kInternal].set);\r\n    }\r\n  }\r\n  const flagSetValues = NodeEnvironmentFlagsSet.prototype.values;\r\n  ObjectDefineProperty(NodeEnvironmentFlagsSet.prototype, SymbolIterator, {\r\n    __proto__: null,\r\n    value: flagSetValues,\r\n  });\r\n  ObjectDefineProperty(NodeEnvironmentFlagsSet.prototype, 'keys', {\r\n    __proto__: null,\r\n    value: flagSetValues,\r\n  });\r\n\r\n  ObjectFreeze(NodeEnvironmentFlagsSet.prototype.constructor);\r\n  ObjectFreeze(NodeEnvironmentFlagsSet.prototype);\r\n\r\n  return ObjectFreeze(new NodeEnvironmentFlagsSet(\r\n    allowedNodeEnvironmentFlags,\r\n  ));\r\n}\r\n\r\n// Lazy load internal/trace_events_async_hooks only if the async_hooks\r\n// trace event category is enabled.\r\nlet traceEventsAsyncHook;\r\n// Dynamically enable/disable the traceEventsAsyncHook\r\nfunction toggleTraceCategoryState(asyncHooksEnabled) {\r\n  if (asyncHooksEnabled) {\r\n    if (!traceEventsAsyncHook) {\r\n      traceEventsAsyncHook =\r\n        require('internal/trace_events_async_hooks').createHook();\r\n    }\r\n    traceEventsAsyncHook.enable();\r\n  } else if (traceEventsAsyncHook) {\r\n    traceEventsAsyncHook.disable();\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  toggleTraceCategoryState,\r\n  assert,\r\n  buildAllowedFlags,\r\n  wrapProcessMethods,\r\n  hrtime,\r\n  hrtimeBigInt,\r\n};\r\n"
  },
  "27": {
    "metadata": {
      "scriptId": "27",
      "url": "node:internal/fs/utils",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 991,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "699c9f4460af32ed854b88cdeee73575ffb37b86d48eccdb2df9f79bd90fb451",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 28342,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/fs/utils"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  BigInt,\r\n  Date,\r\n  DateNow,\r\n  DatePrototypeGetTime,\r\n  ErrorCaptureStackTrace,\r\n  FunctionPrototypeCall,\r\n  MathMin,\r\n  MathRound,\r\n  Number,\r\n  NumberIsFinite,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectIs,\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n  ReflectOwnKeys,\r\n  RegExpPrototypeSymbolReplace,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeIncludes,\r\n  Symbol,\r\n  TypedArrayPrototypeAt,\r\n  TypedArrayPrototypeIncludes,\r\n} = primordials;\r\n\r\nconst { Buffer } = require('buffer');\r\nconst {\r\n  UVException,\r\n  codes: {\r\n    ERR_FS_EISDIR,\r\n    ERR_FS_INVALID_SYMLINK_TYPE,\r\n    ERR_INCOMPATIBLE_OPTION_PAIR,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_OUT_OF_RANGE,\r\n  },\r\n  hideStackFrames,\r\n} = require('internal/errors');\r\nconst {\r\n  isArrayBufferView,\r\n  isBigInt64Array,\r\n  isDate,\r\n  isUint8Array,\r\n} = require('internal/util/types');\r\nconst {\r\n  kEmptyObject,\r\n  once,\r\n  deprecate,\r\n} = require('internal/util');\r\nconst { toPathIfFileURL } = require('internal/url');\r\nconst {\r\n  validateAbortSignal,\r\n  validateBoolean,\r\n  validateFunction,\r\n  validateInt32,\r\n  validateInteger,\r\n  validateObject,\r\n  validateUint32,\r\n} = require('internal/validators');\r\nconst pathModule = require('path');\r\nconst kType = Symbol('type');\r\nconst kStats = Symbol('stats');\r\nconst assert = require('internal/assert');\r\n\r\nconst {\r\n  fs: {\r\n    F_OK = 0,\r\n    W_OK = 0,\r\n    R_OK = 0,\r\n    X_OK = 0,\r\n    COPYFILE_EXCL,\r\n    COPYFILE_FICLONE,\r\n    COPYFILE_FICLONE_FORCE,\r\n    O_APPEND,\r\n    O_CREAT,\r\n    O_EXCL,\r\n    O_RDONLY,\r\n    O_RDWR,\r\n    O_SYNC,\r\n    O_TRUNC,\r\n    O_WRONLY,\r\n    S_IFBLK,\r\n    S_IFCHR,\r\n    S_IFDIR,\r\n    S_IFIFO,\r\n    S_IFLNK,\r\n    S_IFMT,\r\n    S_IFREG,\r\n    S_IFSOCK,\r\n    UV_FS_SYMLINK_DIR,\r\n    UV_FS_SYMLINK_JUNCTION,\r\n    UV_DIRENT_UNKNOWN,\r\n    UV_DIRENT_FILE,\r\n    UV_DIRENT_DIR,\r\n    UV_DIRENT_LINK,\r\n    UV_DIRENT_FIFO,\r\n    UV_DIRENT_SOCKET,\r\n    UV_DIRENT_CHAR,\r\n    UV_DIRENT_BLOCK,\r\n  },\r\n  os: {\r\n    errno: {\r\n      EISDIR,\r\n    },\r\n  },\r\n} = internalBinding('constants');\r\n\r\n// The access modes can be any of F_OK, R_OK, W_OK or X_OK. Some might not be\r\n// available on specific systems. They can be used in combination as well\r\n// (F_OK | R_OK | W_OK | X_OK).\r\nconst kMinimumAccessMode = MathMin(F_OK, W_OK, R_OK, X_OK);\r\nconst kMaximumAccessMode = F_OK | W_OK | R_OK | X_OK;\r\n\r\nconst kDefaultCopyMode = 0;\r\n// The copy modes can be any of COPYFILE_EXCL, COPYFILE_FICLONE or\r\n// COPYFILE_FICLONE_FORCE. They can be used in combination as well\r\n// (COPYFILE_EXCL | COPYFILE_FICLONE | COPYFILE_FICLONE_FORCE).\r\nconst kMinimumCopyMode = MathMin(\r\n  kDefaultCopyMode,\r\n  COPYFILE_EXCL,\r\n  COPYFILE_FICLONE,\r\n  COPYFILE_FICLONE_FORCE,\r\n);\r\nconst kMaximumCopyMode = COPYFILE_EXCL |\r\n                         COPYFILE_FICLONE |\r\n                         COPYFILE_FICLONE_FORCE;\r\n\r\n// Most platforms don't allow reads or writes >= 2 GiB.\r\n// See https://github.com/libuv/libuv/pull/1501.\r\nconst kIoMaxLength = 2 ** 31 - 1;\r\n\r\n// Use 64kb in case the file type is not a regular file and thus do not know the\r\n// actual file size. Increasing the value further results in more frequent over\r\n// allocation for small files and consumes CPU time and memory that should be\r\n// used else wise.\r\n// Use up to 512kb per read otherwise to partition reading big files to prevent\r\n// blocking other threads in case the available threads are all in use.\r\nconst kReadFileUnknownBufferLength = 64 * 1024;\r\nconst kReadFileBufferLength = 512 * 1024;\r\n\r\nconst kWriteFileMaxChunkSize = 512 * 1024;\r\n\r\nconst kMaxUserId = 2 ** 32 - 1;\r\n\r\nconst isWindows = process.platform === 'win32';\r\n\r\nlet fs;\r\nfunction lazyLoadFs() {\r\n  if (!fs) {\r\n    fs = require('fs');\r\n  }\r\n  return fs;\r\n}\r\n\r\nfunction assertEncoding(encoding) {\r\n  if (encoding && !Buffer.isEncoding(encoding)) {\r\n    const reason = 'is invalid encoding';\r\n    throw new ERR_INVALID_ARG_VALUE(encoding, 'encoding', reason);\r\n  }\r\n}\r\n\r\nclass Dirent {\r\n  constructor(name, type, path) {\r\n    this.name = name;\r\n    this.parentPath = path;\r\n    this.path = path;\r\n    this[kType] = type;\r\n  }\r\n\r\n  isDirectory() {\r\n    return this[kType] === UV_DIRENT_DIR;\r\n  }\r\n\r\n  isFile() {\r\n    return this[kType] === UV_DIRENT_FILE;\r\n  }\r\n\r\n  isBlockDevice() {\r\n    return this[kType] === UV_DIRENT_BLOCK;\r\n  }\r\n\r\n  isCharacterDevice() {\r\n    return this[kType] === UV_DIRENT_CHAR;\r\n  }\r\n\r\n  isSymbolicLink() {\r\n    return this[kType] === UV_DIRENT_LINK;\r\n  }\r\n\r\n  isFIFO() {\r\n    return this[kType] === UV_DIRENT_FIFO;\r\n  }\r\n\r\n  isSocket() {\r\n    return this[kType] === UV_DIRENT_SOCKET;\r\n  }\r\n}\r\n\r\nclass DirentFromStats extends Dirent {\r\n  constructor(name, stats, path) {\r\n    super(name, null, path);\r\n    this[kStats] = stats;\r\n  }\r\n}\r\n\r\nfor (const name of ReflectOwnKeys(Dirent.prototype)) {\r\n  if (name === 'constructor') {\r\n    continue;\r\n  }\r\n  DirentFromStats.prototype[name] = function() {\r\n    return this[kStats][name]();\r\n  };\r\n}\r\n\r\nfunction copyObject(source) {\r\n  const target = {};\r\n  for (const key in source)\r\n    target[key] = source[key];\r\n  return target;\r\n}\r\n\r\nconst bufferSep = Buffer.from(pathModule.sep);\r\n\r\nfunction join(path, name) {\r\n  if ((typeof path === 'string' || isUint8Array(path)) &&\r\n      name === undefined) {\r\n    return path;\r\n  }\r\n\r\n  if (typeof path === 'string' && isUint8Array(name)) {\r\n    const pathBuffer = Buffer.from(pathModule.join(path, pathModule.sep));\r\n    return Buffer.concat([pathBuffer, name]);\r\n  }\r\n\r\n  if (typeof path === 'string' && typeof name === 'string') {\r\n    return pathModule.join(path, name);\r\n  }\r\n\r\n  if (isUint8Array(path) && isUint8Array(name)) {\r\n    return Buffer.concat([path, bufferSep, name]);\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE(\r\n    'path', ['string', 'Buffer'], path);\r\n}\r\n\r\nfunction getDirents(path, { 0: names, 1: types }, callback) {\r\n  let i;\r\n  if (typeof callback === 'function') {\r\n    const len = names.length;\r\n    let toFinish = 0;\r\n    callback = once(callback);\r\n    for (i = 0; i < len; i++) {\r\n      const type = types[i];\r\n      if (type === UV_DIRENT_UNKNOWN) {\r\n        const name = names[i];\r\n        const idx = i;\r\n        toFinish++;\r\n        let filepath;\r\n        try {\r\n          filepath = join(path, name);\r\n        } catch (err) {\r\n          callback(err);\r\n          return;\r\n        }\r\n        lazyLoadFs().lstat(filepath, (err, stats) => {\r\n          if (err) {\r\n            callback(err);\r\n            return;\r\n          }\r\n          names[idx] = new DirentFromStats(name, stats, path);\r\n          if (--toFinish === 0) {\r\n            callback(null, names);\r\n          }\r\n        });\r\n      } else {\r\n        names[i] = new Dirent(names[i], types[i], path);\r\n      }\r\n    }\r\n    if (toFinish === 0) {\r\n      callback(null, names);\r\n    }\r\n  } else {\r\n    const len = names.length;\r\n    for (i = 0; i < len; i++) {\r\n      names[i] = getDirent(path, names[i], types[i]);\r\n    }\r\n    return names;\r\n  }\r\n}\r\n\r\nfunction getDirent(path, name, type, callback) {\r\n  if (typeof callback === 'function') {\r\n    if (type === UV_DIRENT_UNKNOWN) {\r\n      let filepath;\r\n      try {\r\n        filepath = join(path, name);\r\n      } catch (err) {\r\n        callback(err);\r\n        return;\r\n      }\r\n      lazyLoadFs().lstat(filepath, (err, stats) => {\r\n        if (err) {\r\n          callback(err);\r\n          return;\r\n        }\r\n        callback(null, new DirentFromStats(name, stats, filepath));\r\n      });\r\n    } else {\r\n      callback(null, new Dirent(name, type, path));\r\n    }\r\n  } else if (type === UV_DIRENT_UNKNOWN) {\r\n    const filepath = join(path, name);\r\n    const stats = lazyLoadFs().lstatSync(filepath);\r\n    return new DirentFromStats(name, stats, path);\r\n  } else {\r\n    return new Dirent(name, type, path);\r\n  }\r\n}\r\n\r\nfunction getOptions(options, defaultOptions = kEmptyObject) {\r\n  if (options == null || typeof options === 'function') {\r\n    return defaultOptions;\r\n  }\r\n\r\n  if (typeof options === 'string') {\r\n    defaultOptions = { ...defaultOptions };\r\n    defaultOptions.encoding = options;\r\n    options = defaultOptions;\r\n  } else if (typeof options !== 'object') {\r\n    throw new ERR_INVALID_ARG_TYPE('options', ['string', 'Object'], options);\r\n  }\r\n\r\n  if (options.encoding !== 'buffer')\r\n    assertEncoding(options.encoding);\r\n\r\n  if (options.signal !== undefined) {\r\n    validateAbortSignal(options.signal, 'options.signal');\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\n/**\r\n * @param {InternalFSBinding.FSSyncContext} ctx\r\n */\r\nfunction handleErrorFromBinding(ctx) {\r\n  if (ctx.errno !== undefined) {  // libuv error numbers\r\n    const err = new UVException(ctx);\r\n    ErrorCaptureStackTrace(err, handleErrorFromBinding);\r\n    throw err;\r\n  }\r\n  if (ctx.error !== undefined) {  // Errors created in C++ land.\r\n    // TODO(joyeecheung): currently, ctx.error are encoding errors\r\n    // usually caused by memory problems. We need to figure out proper error\r\n    // code(s) for this.\r\n    ErrorCaptureStackTrace(ctx.error, handleErrorFromBinding);\r\n    throw ctx.error;\r\n  }\r\n}\r\n\r\nfunction preprocessSymlinkDestination(path, type, linkPath) {\r\n  if (!isWindows) {\r\n    // No preprocessing is needed on Unix.\r\n    return path;\r\n  }\r\n  path = '' + path;\r\n  if (type === 'junction') {\r\n    // Junctions paths need to be absolute and \\\\?\\-prefixed.\r\n    // A relative target is relative to the link's parent directory.\r\n    path = pathModule.resolve(linkPath, '..', path);\r\n    return pathModule.toNamespacedPath(path);\r\n  }\r\n  if (pathModule.isAbsolute(path)) {\r\n    // If the path is absolute, use the \\\\?\\-prefix to enable long filenames\r\n    return pathModule.toNamespacedPath(path);\r\n  }\r\n  // Windows symlinks don't tolerate forward slashes.\r\n  return RegExpPrototypeSymbolReplace(/\\//g, path, '\\\\');\r\n}\r\n\r\n// Constructor for file stats.\r\nfunction StatsBase(dev, mode, nlink, uid, gid, rdev, blksize,\r\n                   ino, size, blocks) {\r\n  this.dev = dev;\r\n  this.mode = mode;\r\n  this.nlink = nlink;\r\n  this.uid = uid;\r\n  this.gid = gid;\r\n  this.rdev = rdev;\r\n  this.blksize = blksize;\r\n  this.ino = ino;\r\n  this.size = size;\r\n  this.blocks = blocks;\r\n}\r\n\r\nStatsBase.prototype.isDirectory = function() {\r\n  return this._checkModeProperty(S_IFDIR);\r\n};\r\n\r\nStatsBase.prototype.isFile = function() {\r\n  return this._checkModeProperty(S_IFREG);\r\n};\r\n\r\nStatsBase.prototype.isBlockDevice = function() {\r\n  return this._checkModeProperty(S_IFBLK);\r\n};\r\n\r\nStatsBase.prototype.isCharacterDevice = function() {\r\n  return this._checkModeProperty(S_IFCHR);\r\n};\r\n\r\nStatsBase.prototype.isSymbolicLink = function() {\r\n  return this._checkModeProperty(S_IFLNK);\r\n};\r\n\r\nStatsBase.prototype.isFIFO = function() {\r\n  return this._checkModeProperty(S_IFIFO);\r\n};\r\n\r\nStatsBase.prototype.isSocket = function() {\r\n  return this._checkModeProperty(S_IFSOCK);\r\n};\r\n\r\nconst kNsPerMsBigInt = 10n ** 6n;\r\nconst kNsPerSecBigInt = 10n ** 9n;\r\nconst kMsPerSec = 10 ** 3;\r\nconst kNsPerMs = 10 ** 6;\r\nfunction msFromTimeSpec(sec, nsec) {\r\n  return sec * kMsPerSec + nsec / kNsPerMs;\r\n}\r\n\r\nfunction nsFromTimeSpecBigInt(sec, nsec) {\r\n  return sec * kNsPerSecBigInt + nsec;\r\n}\r\n\r\n// The Date constructor performs Math.floor() on the absolute value\r\n// of the timestamp: https://tc39.es/ecma262/#sec-timeclip\r\n// Since there may be a precision loss when the timestamp is\r\n// converted to a floating point number, we manually round\r\n// the timestamp here before passing it to Date().\r\n// Refs: https://github.com/nodejs/node/pull/12607\r\n// Refs: https://github.com/nodejs/node/pull/43714\r\nfunction dateFromMs(ms) {\r\n  // Coercing to number, ms can be bigint\r\n  return new Date(MathRound(Number(ms)));\r\n}\r\n\r\nconst lazyDateFields = {\r\n  __proto__: null,\r\n  atime: {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this.atime = dateFromMs(this.atimeMs);\r\n    },\r\n    set(value) {\r\n      ObjectDefineProperty(this, 'atime', { __proto__: null, value, writable: true });\r\n    },\r\n  },\r\n  mtime: {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this.mtime = dateFromMs(this.mtimeMs);\r\n    },\r\n    set(value) {\r\n      ObjectDefineProperty(this, 'mtime', { __proto__: null, value, writable: true });\r\n    },\r\n  },\r\n  ctime: {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this.ctime = dateFromMs(this.ctimeMs);\r\n    },\r\n    set(value) {\r\n      ObjectDefineProperty(this, 'ctime', { __proto__: null, value, writable: true });\r\n    },\r\n  },\r\n  birthtime: {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this.birthtime = dateFromMs(this.birthtimeMs);\r\n    },\r\n    set(value) {\r\n      ObjectDefineProperty(this, 'birthtime', { __proto__: null, value, writable: true });\r\n    },\r\n  },\r\n};\r\n\r\nfunction BigIntStats(dev, mode, nlink, uid, gid, rdev, blksize,\r\n                     ino, size, blocks,\r\n                     atimeNs, mtimeNs, ctimeNs, birthtimeNs) {\r\n  ReflectApply(StatsBase, this, [dev, mode, nlink, uid, gid, rdev, blksize,\r\n                                 ino, size, blocks]);\r\n\r\n  this.atimeMs = atimeNs / kNsPerMsBigInt;\r\n  this.mtimeMs = mtimeNs / kNsPerMsBigInt;\r\n  this.ctimeMs = ctimeNs / kNsPerMsBigInt;\r\n  this.birthtimeMs = birthtimeNs / kNsPerMsBigInt;\r\n  this.atimeNs = atimeNs;\r\n  this.mtimeNs = mtimeNs;\r\n  this.ctimeNs = ctimeNs;\r\n  this.birthtimeNs = birthtimeNs;\r\n}\r\n\r\nObjectSetPrototypeOf(BigIntStats.prototype, StatsBase.prototype);\r\nObjectSetPrototypeOf(BigIntStats, StatsBase);\r\nObjectDefineProperties(BigIntStats.prototype, lazyDateFields);\r\n\r\nBigIntStats.prototype._checkModeProperty = function(property) {\r\n  if (isWindows && (property === S_IFIFO || property === S_IFBLK ||\r\n    property === S_IFSOCK)) {\r\n    return false;  // Some types are not available on Windows\r\n  }\r\n  return (this.mode & BigInt(S_IFMT)) === BigInt(property);\r\n};\r\n\r\nfunction Stats(dev, mode, nlink, uid, gid, rdev, blksize,\r\n               ino, size, blocks,\r\n               atimeMs, mtimeMs, ctimeMs, birthtimeMs) {\r\n  FunctionPrototypeCall(StatsBase, this, dev, mode, nlink, uid, gid, rdev,\r\n                        blksize, ino, size, blocks);\r\n  this.atimeMs = atimeMs;\r\n  this.mtimeMs = mtimeMs;\r\n  this.ctimeMs = ctimeMs;\r\n  this.birthtimeMs = birthtimeMs;\r\n}\r\n\r\nObjectSetPrototypeOf(Stats.prototype, StatsBase.prototype);\r\nObjectSetPrototypeOf(Stats, StatsBase);\r\nObjectDefineProperties(Stats.prototype, lazyDateFields);\r\n\r\nStats.prototype._checkModeProperty = function(property) {\r\n  if (isWindows && (property === S_IFIFO || property === S_IFBLK ||\r\n    property === S_IFSOCK)) {\r\n    return false;  // Some types are not available on Windows\r\n  }\r\n  return (this.mode & S_IFMT) === property;\r\n};\r\n\r\n/**\r\n * @param {Float64Array | BigInt64Array} stats\r\n * @param {number} offset\r\n * @returns {BigIntStats | Stats}\r\n */\r\nfunction getStatsFromBinding(stats, offset = 0) {\r\n  if (isBigInt64Array(stats)) {\r\n    return new BigIntStats(\r\n      stats[0 + offset], stats[1 + offset], stats[2 + offset],\r\n      stats[3 + offset], stats[4 + offset], stats[5 + offset],\r\n      stats[6 + offset], stats[7 + offset], stats[8 + offset],\r\n      stats[9 + offset],\r\n      nsFromTimeSpecBigInt(stats[10 + offset], stats[11 + offset]),\r\n      nsFromTimeSpecBigInt(stats[12 + offset], stats[13 + offset]),\r\n      nsFromTimeSpecBigInt(stats[14 + offset], stats[15 + offset]),\r\n      nsFromTimeSpecBigInt(stats[16 + offset], stats[17 + offset]),\r\n    );\r\n  }\r\n  return new Stats(\r\n    stats[0 + offset], stats[1 + offset], stats[2 + offset],\r\n    stats[3 + offset], stats[4 + offset], stats[5 + offset],\r\n    stats[6 + offset], stats[7 + offset], stats[8 + offset],\r\n    stats[9 + offset],\r\n    msFromTimeSpec(stats[10 + offset], stats[11 + offset]),\r\n    msFromTimeSpec(stats[12 + offset], stats[13 + offset]),\r\n    msFromTimeSpec(stats[14 + offset], stats[15 + offset]),\r\n    msFromTimeSpec(stats[16 + offset], stats[17 + offset]),\r\n  );\r\n}\r\n\r\nclass StatFs {\r\n  constructor(type, bsize, blocks, bfree, bavail, files, ffree) {\r\n    this.type = type;\r\n    this.bsize = bsize;\r\n    this.blocks = blocks;\r\n    this.bfree = bfree;\r\n    this.bavail = bavail;\r\n    this.files = files;\r\n    this.ffree = ffree;\r\n  }\r\n}\r\n\r\nfunction getStatFsFromBinding(stats) {\r\n  return new StatFs(\r\n    stats[0], stats[1], stats[2], stats[3], stats[4], stats[5], stats[6],\r\n  );\r\n}\r\n\r\nfunction stringToFlags(flags, name = 'flags') {\r\n  if (typeof flags === 'number') {\r\n    validateInt32(flags, name);\r\n    return flags;\r\n  }\r\n\r\n  if (flags == null) {\r\n    return O_RDONLY;\r\n  }\r\n\r\n  switch (flags) {\r\n    case 'r' : return O_RDONLY;\r\n    case 'rs' : // Fall through.\r\n    case 'sr' : return O_RDONLY | O_SYNC;\r\n    case 'r+' : return O_RDWR;\r\n    case 'rs+' : // Fall through.\r\n    case 'sr+' : return O_RDWR | O_SYNC;\r\n\r\n    case 'w' : return O_TRUNC | O_CREAT | O_WRONLY;\r\n    case 'wx' : // Fall through.\r\n    case 'xw' : return O_TRUNC | O_CREAT | O_WRONLY | O_EXCL;\r\n\r\n    case 'w+' : return O_TRUNC | O_CREAT | O_RDWR;\r\n    case 'wx+': // Fall through.\r\n    case 'xw+': return O_TRUNC | O_CREAT | O_RDWR | O_EXCL;\r\n\r\n    case 'a' : return O_APPEND | O_CREAT | O_WRONLY;\r\n    case 'ax' : // Fall through.\r\n    case 'xa' : return O_APPEND | O_CREAT | O_WRONLY | O_EXCL;\r\n    case 'as' : // Fall through.\r\n    case 'sa' : return O_APPEND | O_CREAT | O_WRONLY | O_SYNC;\r\n\r\n    case 'a+' : return O_APPEND | O_CREAT | O_RDWR;\r\n    case 'ax+': // Fall through.\r\n    case 'xa+': return O_APPEND | O_CREAT | O_RDWR | O_EXCL;\r\n    case 'as+': // Fall through.\r\n    case 'sa+': return O_APPEND | O_CREAT | O_RDWR | O_SYNC;\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_VALUE('flags', flags);\r\n}\r\n\r\nconst stringToSymlinkType = hideStackFrames((type) => {\r\n  let flags = 0;\r\n  if (typeof type === 'string') {\r\n    switch (type) {\r\n      case 'dir':\r\n        flags |= UV_FS_SYMLINK_DIR;\r\n        break;\r\n      case 'junction':\r\n        flags |= UV_FS_SYMLINK_JUNCTION;\r\n        break;\r\n      case 'file':\r\n        break;\r\n      default:\r\n        throw new ERR_FS_INVALID_SYMLINK_TYPE(type);\r\n    }\r\n  }\r\n  return flags;\r\n});\r\n\r\n// converts Date or number to a fractional UNIX timestamp\r\nfunction toUnixTimestamp(time, name = 'time') {\r\n  // eslint-disable-next-line eqeqeq\r\n  if (typeof time === 'string' && +time == time) {\r\n    return +time;\r\n  }\r\n  if (NumberIsFinite(time)) {\r\n    if (time < 0) {\r\n      return DateNow() / 1000;\r\n    }\r\n    return time;\r\n  }\r\n  if (isDate(time)) {\r\n    // Convert to 123.456 UNIX timestamp\r\n    return DatePrototypeGetTime(time) / 1000;\r\n  }\r\n  throw new ERR_INVALID_ARG_TYPE(name, ['Date', 'Time in seconds'], time);\r\n}\r\n\r\nconst validateOffsetLengthRead = hideStackFrames(\r\n  (offset, length, bufferLength) => {\r\n    if (offset < 0) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError('offset', '>= 0', offset);\r\n    }\r\n    if (length < 0) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError('length', '>= 0', length);\r\n    }\r\n    if (offset + length > bufferLength) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError('length',\r\n                                                      `<= ${bufferLength - offset}`, length);\r\n    }\r\n  },\r\n);\r\n\r\nconst validateOffsetLengthWrite = hideStackFrames(\r\n  (offset, length, byteLength) => {\r\n    if (offset > byteLength) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError('offset', `<= ${byteLength}`, offset);\r\n    }\r\n\r\n    if (length > byteLength - offset) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError('length', `<= ${byteLength - offset}`, length);\r\n    }\r\n\r\n    if (length < 0) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError('length', '>= 0', length);\r\n    }\r\n\r\n    validateInt32.withoutStackTrace(length, 'length', 0);\r\n  },\r\n);\r\n\r\nconst validatePath = hideStackFrames((path, propName = 'path') => {\r\n  if (typeof path !== 'string' && !isUint8Array(path)) {\r\n    throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(propName, ['string', 'Buffer', 'URL'], path);\r\n  }\r\n\r\n  const pathIsString = typeof path === 'string';\r\n  const pathIsUint8Array = isUint8Array(path);\r\n\r\n  // We can only perform meaningful checks on strings and Uint8Arrays.\r\n  if ((!pathIsString && !pathIsUint8Array) ||\r\n      (pathIsString && !StringPrototypeIncludes(path, '\\u0000')) ||\r\n      (pathIsUint8Array && !TypedArrayPrototypeIncludes(path, 0))) {\r\n    return;\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_VALUE.HideStackFramesError(\r\n    propName,\r\n    path,\r\n    'must be a string, Uint8Array, or URL without null bytes',\r\n  );\r\n});\r\n\r\nconst getValidatedPath = hideStackFrames((fileURLOrPath, propName = 'path') => {\r\n  const path = toPathIfFileURL(fileURLOrPath);\r\n  validatePath(path, propName);\r\n  return path;\r\n});\r\n\r\nconst getValidatedFd = hideStackFrames((fd, propName = 'fd') => {\r\n  if (ObjectIs(fd, -0)) {\r\n    return 0;\r\n  }\r\n\r\n  validateInt32(fd, propName, 0);\r\n\r\n  return fd;\r\n});\r\n\r\nconst validateBufferArray = hideStackFrames((buffers, propName = 'buffers') => {\r\n  if (!ArrayIsArray(buffers))\r\n    throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(propName, 'ArrayBufferView[]', buffers);\r\n\r\n  for (let i = 0; i < buffers.length; i++) {\r\n    if (!isArrayBufferView(buffers[i]))\r\n      throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(propName, 'ArrayBufferView[]', buffers);\r\n  }\r\n\r\n  return buffers;\r\n});\r\n\r\nlet nonPortableTemplateWarn = true;\r\n\r\nfunction warnOnNonPortableTemplate(template) {\r\n  // Template strings passed to the mkdtemp() family of functions should not\r\n  // end with 'X' because they are handled inconsistently across platforms.\r\n  if (nonPortableTemplateWarn &&\r\n    ((typeof template === 'string' && StringPrototypeEndsWith(template, 'X')) ||\r\n    (typeof template !== 'string' && TypedArrayPrototypeAt(template, -1) === 0x58))) {\r\n    process.emitWarning('mkdtemp() templates ending with X are not portable. ' +\r\n                        'For details see: https://nodejs.org/api/fs.html');\r\n    nonPortableTemplateWarn = false;\r\n  }\r\n}\r\n\r\nconst defaultCpOptions = {\r\n  dereference: false,\r\n  errorOnExist: false,\r\n  filter: undefined,\r\n  force: true,\r\n  preserveTimestamps: false,\r\n  recursive: false,\r\n  verbatimSymlinks: false,\r\n};\r\n\r\nconst defaultRmOptions = {\r\n  recursive: false,\r\n  force: false,\r\n  retryDelay: 100,\r\n  maxRetries: 0,\r\n};\r\n\r\nconst defaultRmdirOptions = {\r\n  retryDelay: 100,\r\n  maxRetries: 0,\r\n  recursive: false,\r\n};\r\n\r\nconst validateCpOptions = hideStackFrames((options) => {\r\n  if (options === undefined)\r\n    return { ...defaultCpOptions };\r\n  validateObject(options, 'options');\r\n  options = { ...defaultCpOptions, ...options };\r\n  validateBoolean(options.dereference, 'options.dereference');\r\n  validateBoolean(options.errorOnExist, 'options.errorOnExist');\r\n  validateBoolean(options.force, 'options.force');\r\n  validateBoolean(options.preserveTimestamps, 'options.preserveTimestamps');\r\n  validateBoolean(options.recursive, 'options.recursive');\r\n  validateBoolean(options.verbatimSymlinks, 'options.verbatimSymlinks');\r\n  options.mode = getValidMode(options.mode, 'copyFile');\r\n  if (options.dereference === true && options.verbatimSymlinks === true) {\r\n    throw new ERR_INCOMPATIBLE_OPTION_PAIR.HideStackFramesError('dereference', 'verbatimSymlinks');\r\n  }\r\n  if (options.filter !== undefined) {\r\n    validateFunction(options.filter, 'options.filter');\r\n  }\r\n  return options;\r\n});\r\n\r\nconst validateRmOptions = hideStackFrames((path, options, expectDir, cb) => {\r\n  options = validateRmdirOptions(options, defaultRmOptions);\r\n  validateBoolean(options.force, 'options.force');\r\n\r\n  lazyLoadFs().lstat(path, (err, stats) => {\r\n    if (err) {\r\n      if (options.force && err.code === 'ENOENT') {\r\n        return cb(null, options);\r\n      }\r\n      return cb(err, options);\r\n    }\r\n\r\n    if (expectDir && !stats.isDirectory()) {\r\n      return cb(false);\r\n    }\r\n\r\n    if (stats.isDirectory() && !options.recursive) {\r\n      const err = new ERR_FS_EISDIR.HideStackFramesError({\r\n        code: 'EISDIR',\r\n        message: 'is a directory',\r\n        path,\r\n        syscall: 'rm',\r\n        errno: EISDIR,\r\n      });\r\n\r\n      return cb(err);\r\n    }\r\n    return cb(null, options);\r\n  });\r\n});\r\n\r\nconst validateRmOptionsSync = hideStackFrames((path, options, expectDir) => {\r\n  options = validateRmdirOptions.withoutStackTrace(options, defaultRmOptions);\r\n  validateBoolean.withoutStackTrace(options.force, 'options.force');\r\n\r\n  if (!options.force || expectDir || !options.recursive) {\r\n    const isDirectory = lazyLoadFs()\r\n      .lstatSync(path, { throwIfNoEntry: !options.force })?.isDirectory();\r\n\r\n    if (expectDir && !isDirectory) {\r\n      return false;\r\n    }\r\n\r\n    if (isDirectory && !options.recursive) {\r\n      throw new ERR_FS_EISDIR.HideStackFramesError({\r\n        code: 'EISDIR',\r\n        message: 'is a directory',\r\n        path,\r\n        syscall: 'rm',\r\n        errno: EISDIR,\r\n      });\r\n    }\r\n  }\r\n\r\n  return options;\r\n});\r\n\r\nlet recursiveRmdirWarned;\r\nfunction emitRecursiveRmdirWarning() {\r\n  if (recursiveRmdirWarned === undefined) {\r\n    // TODO(joyeecheung): use getOptionValue('--no-deprecation') instead.\r\n    recursiveRmdirWarned = process.noDeprecation;\r\n  }\r\n  if (!recursiveRmdirWarned) {\r\n    process.emitWarning(\r\n      'In future versions of Node.js, fs.rmdir(path, { recursive: true }) ' +\r\n      'will be removed. Use fs.rm(path, { recursive: true }) instead',\r\n      'DeprecationWarning',\r\n      'DEP0147',\r\n    );\r\n    recursiveRmdirWarned = true;\r\n  }\r\n}\r\n\r\nconst validateRmdirOptions = hideStackFrames(\r\n  (options, defaults = defaultRmdirOptions) => {\r\n    if (options === undefined)\r\n      return defaults;\r\n    validateObject.withoutStackTrace(options, 'options');\r\n\r\n    options = { ...defaults, ...options };\r\n\r\n    validateBoolean.withoutStackTrace(options.recursive, 'options.recursive');\r\n    validateInt32.withoutStackTrace(options.retryDelay, 'options.retryDelay', 0);\r\n    validateUint32.withoutStackTrace(options.maxRetries, 'options.maxRetries');\r\n\r\n    return options;\r\n  });\r\n\r\nconst getValidMode = hideStackFrames((mode, type) => {\r\n  let min = kMinimumAccessMode;\r\n  let max = kMaximumAccessMode;\r\n  let def = F_OK;\r\n  if (type === 'copyFile') {\r\n    min = kMinimumCopyMode;\r\n    max = kMaximumCopyMode;\r\n    def = mode || kDefaultCopyMode;\r\n  } else {\r\n    assert(type === 'access');\r\n  }\r\n  if (mode == null) {\r\n    return def;\r\n  }\r\n  validateInteger.withoutStackTrace(mode, 'mode', min, max);\r\n  return mode;\r\n});\r\n\r\nconst validateStringAfterArrayBufferView = hideStackFrames((buffer, name) => {\r\n  if (typeof buffer !== 'string') {\r\n    throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(\r\n      name,\r\n      ['string', 'Buffer', 'TypedArray', 'DataView'],\r\n      buffer,\r\n    );\r\n  }\r\n});\r\n\r\nconst validatePosition = hideStackFrames((position, name, length) => {\r\n  if (typeof position === 'number') {\r\n    validateInteger.withoutStackTrace(position, name, -1);\r\n  } else if (typeof position === 'bigint') {\r\n    const maxPosition = 2n ** 63n - 1n - BigInt(length);\r\n    if (!(position >= -1n && position <= maxPosition)) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError(name,\r\n                                                      `>= -1 && <= ${maxPosition}`,\r\n                                                      position);\r\n    }\r\n  } else {\r\n    throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(name, ['integer', 'bigint'], position);\r\n  }\r\n});\r\n\r\nmodule.exports = {\r\n  constants: {\r\n    kIoMaxLength,\r\n    kMaxUserId,\r\n    kReadFileBufferLength,\r\n    kReadFileUnknownBufferLength,\r\n    kWriteFileMaxChunkSize,\r\n  },\r\n  assertEncoding,\r\n  BigIntStats,  // for testing\r\n  copyObject,\r\n  Dirent,\r\n  DirentFromStats,\r\n  emitRecursiveRmdirWarning,\r\n  getDirent,\r\n  getDirents,\r\n  getOptions,\r\n  getValidatedFd,\r\n  getValidatedPath,\r\n  handleErrorFromBinding,\r\n  preprocessSymlinkDestination,\r\n  realpathCacheKey: Symbol('realpathCacheKey'),\r\n  getStatFsFromBinding,\r\n  getStatsFromBinding,\r\n  stringToFlags,\r\n  stringToSymlinkType,\r\n  Stats: deprecate(Stats, 'fs.Stats constructor is deprecated.', 'DEP0180'),\r\n  toUnixTimestamp,\r\n  validateBufferArray,\r\n  validateCpOptions,\r\n  validateOffsetLengthRead,\r\n  validateOffsetLengthWrite,\r\n  validatePath,\r\n  validatePosition,\r\n  validateRmOptions,\r\n  validateRmOptionsSync,\r\n  validateRmdirOptions,\r\n  validateStringAfterArrayBufferView,\r\n  warnOnNonPortableTemplate,\r\n};\r\n"
  },
  "28": {
    "metadata": {
      "scriptId": "28",
      "url": "node:internal/url",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1615,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "bf47d639201b8b330fa80f622e54edbbe4d620eda65276ed755b37b2e8f2ee24",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 49671,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/url"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n  ArrayIsArray,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeReduce,\r\n  ArrayPrototypeSlice,\r\n  Boolean,\r\n  Int8Array,\r\n  IteratorPrototype,\r\n  Number,\r\n  ObjectDefineProperties,\r\n  ObjectSetPrototypeOf,\r\n  ReflectGetOwnPropertyDescriptor,\r\n  ReflectOwnKeys,\r\n  RegExpPrototypeSymbolReplace,\r\n  SafeMap,\r\n  SafeSet,\r\n  StringPrototypeCharAt,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeCodePointAt,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeSlice,\r\n  StringPrototypeStartsWith,\r\n  StringPrototypeToWellFormed,\r\n  Symbol,\r\n  SymbolIterator,\r\n  SymbolToStringTag,\r\n  decodeURIComponent,\r\n} = primordials;\r\n\r\nconst { inspect } = require('internal/util/inspect');\r\nconst {\r\n  encodeStr,\r\n  hexTable,\r\n  isHexTable,\r\n} = require('internal/querystring');\r\n\r\nconst {\r\n  getConstructorOf,\r\n  removeColors,\r\n  kEnumerableProperty,\r\n  kEmptyObject,\r\n  SideEffectFreeRegExpPrototypeSymbolReplace,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  markTransferMode,\r\n} = require('internal/worker/js_transferable');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_ARG_NOT_ITERABLE,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_FILE_URL_HOST,\r\n    ERR_INVALID_FILE_URL_PATH,\r\n    ERR_INVALID_THIS,\r\n    ERR_INVALID_TUPLE,\r\n    ERR_INVALID_URL,\r\n    ERR_INVALID_URL_SCHEME,\r\n    ERR_MISSING_ARGS,\r\n    ERR_NO_CRYPTO,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  CHAR_AMPERSAND,\r\n  CHAR_BACKWARD_SLASH,\r\n  CHAR_EQUAL,\r\n  CHAR_FORWARD_SLASH,\r\n  CHAR_LOWERCASE_A,\r\n  CHAR_LOWERCASE_Z,\r\n  CHAR_PERCENT,\r\n  CHAR_PLUS,\r\n} = require('internal/constants');\r\nconst path = require('path');\r\n\r\nconst {\r\n  validateFunction,\r\n} = require('internal/validators');\r\n\r\nconst querystring = require('querystring');\r\n\r\nconst { platform } = process;\r\nconst isWindows = platform === 'win32';\r\n\r\nconst bindingUrl = internalBinding('url');\r\n\r\nconst FORWARD_SLASH = /\\//g;\r\n\r\nconst contextForInspect = Symbol('context');\r\n\r\n// `unsafeProtocol`, `hostlessProtocol` and `slashedProtocol` is\r\n// deliberately moved to `internal/url` rather than `url`.\r\n// Workers does not bootstrap URL module. Therefore, `SafeSet`\r\n// is not initialized on bootstrap. This case breaks the\r\n// test-require-delete-array-iterator test.\r\n\r\n// Protocols that can allow \"unsafe\" and \"unwise\" chars.\r\nconst unsafeProtocol = new SafeSet([\r\n  'javascript',\r\n  'javascript:',\r\n]);\r\n// Protocols that never have a hostname.\r\nconst hostlessProtocol = new SafeSet([\r\n  'javascript',\r\n  'javascript:',\r\n]);\r\n// Protocols that always contain a // bit.\r\nconst slashedProtocol = new SafeSet([\r\n  'http',\r\n  'http:',\r\n  'https',\r\n  'https:',\r\n  'ftp',\r\n  'ftp:',\r\n  'gopher',\r\n  'gopher:',\r\n  'file',\r\n  'file:',\r\n  'ws',\r\n  'ws:',\r\n  'wss',\r\n  'wss:',\r\n]);\r\n\r\nconst updateActions = {\r\n  kProtocol: 0,\r\n  kHost: 1,\r\n  kHostname: 2,\r\n  kPort: 3,\r\n  kUsername: 4,\r\n  kPassword: 5,\r\n  kPathname: 6,\r\n  kSearch: 7,\r\n  kHash: 8,\r\n  kHref: 9,\r\n};\r\nlet blob;\r\nlet cryptoRandom;\r\n\r\nfunction lazyBlob() {\r\n  blob ??= require('internal/blob');\r\n  return blob;\r\n}\r\n\r\nfunction lazyCryptoRandom() {\r\n  try {\r\n    cryptoRandom ??= require('internal/crypto/random');\r\n  } catch {\r\n    // If Node.js built without crypto support, we'll fall\r\n    // through here and handle it later.\r\n  }\r\n  return cryptoRandom;\r\n}\r\n\r\n// This class provides the internal state of a URL object. An instance of this\r\n// class is stored in every URL object and is accessed internally by setters\r\n// and getters. It roughly corresponds to the concept of a URL record in the\r\n// URL Standard, with a few differences. It is also the object transported to\r\n// the C++ binding.\r\n// Refs: https://url.spec.whatwg.org/#concept-url\r\nclass URLContext {\r\n  // This is the maximum value uint32_t can get.\r\n  // Ada uses uint32_t(-1) for declaring omitted values.\r\n  static #omitted = 4294967295;\r\n\r\n  href = '';\r\n  protocol_end = 0;\r\n  username_end = 0;\r\n  host_start = 0;\r\n  host_end = 0;\r\n  pathname_start = 0;\r\n  search_start = 0;\r\n  hash_start = 0;\r\n  port = 0;\r\n  /**\r\n   * Refers to `ada::scheme::type`\r\n   *\r\n   * enum type : uint8_t {\r\n   *   HTTP = 0,\r\n   *   NOT_SPECIAL = 1,\r\n   *   HTTPS = 2,\r\n   *   WS = 3,\r\n   *   FTP = 4,\r\n   *   WSS = 5,\r\n   *   FILE = 6\r\n   * };\r\n   * @type {number}\r\n   */\r\n  scheme_type = 1;\r\n\r\n  get hasPort() {\r\n    return this.port !== URLContext.#omitted;\r\n  }\r\n\r\n  get hasSearch() {\r\n    return this.search_start !== URLContext.#omitted;\r\n  }\r\n\r\n  get hasHash() {\r\n    return this.hash_start !== URLContext.#omitted;\r\n  }\r\n}\r\n\r\nlet setURLSearchParamsModified;\r\nlet setURLSearchParamsContext;\r\nlet getURLSearchParamsList;\r\nlet setURLSearchParams;\r\n\r\nclass URLSearchParamsIterator {\r\n  #target;\r\n  #kind;\r\n  #index;\r\n\r\n  // https://heycam.github.io/webidl/#dfn-default-iterator-object\r\n  constructor(target, kind) {\r\n    this.#target = target;\r\n    this.#kind = kind;\r\n    this.#index = 0;\r\n  }\r\n\r\n  next() {\r\n    if (typeof this !== 'object' || this === null || !(#target in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParamsIterator');\r\n\r\n    const index = this.#index;\r\n    const values = getURLSearchParamsList(this.#target);\r\n    const len = values.length;\r\n    if (index >= len) {\r\n      return {\r\n        value: undefined,\r\n        done: true,\r\n      };\r\n    }\r\n\r\n    const name = values[index];\r\n    const value = values[index + 1];\r\n    this.#index = index + 2;\r\n\r\n    let result;\r\n    if (this.#kind === 'key') {\r\n      result = name;\r\n    } else if (this.#kind === 'value') {\r\n      result = value;\r\n    } else {\r\n      result = [name, value];\r\n    }\r\n\r\n    return {\r\n      value: result,\r\n      done: false,\r\n    };\r\n  }\r\n\r\n  [inspect.custom](recurseTimes, ctx) {\r\n    if (!this || typeof this !== 'object' || !(#target in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParamsIterator');\r\n\r\n    if (typeof recurseTimes === 'number' && recurseTimes < 0)\r\n      return ctx.stylize('[Object]', 'special');\r\n\r\n    const innerOpts = { ...ctx };\r\n    if (recurseTimes !== null) {\r\n      innerOpts.depth = recurseTimes - 1;\r\n    }\r\n    const index = this.#index;\r\n    const values = getURLSearchParamsList(this.#target);\r\n    const output = ArrayPrototypeReduce(\r\n      ArrayPrototypeSlice(values, index),\r\n      (prev, cur, i) => {\r\n        const key = i % 2 === 0;\r\n        if (this.#kind === 'key' && key) {\r\n          ArrayPrototypePush(prev, cur);\r\n        } else if (this.#kind === 'value' && !key) {\r\n          ArrayPrototypePush(prev, cur);\r\n        } else if (this.#kind === 'key+value' && !key) {\r\n          ArrayPrototypePush(prev, [values[index + i - 1], cur]);\r\n        }\r\n        return prev;\r\n      },\r\n      [],\r\n    );\r\n    const breakLn = StringPrototypeIncludes(inspect(output, innerOpts), '\\n');\r\n    const outputStrs = ArrayPrototypeMap(output, (p) => inspect(p, innerOpts));\r\n    let outputStr;\r\n    if (breakLn) {\r\n      outputStr = `\\n  ${ArrayPrototypeJoin(outputStrs, ',\\n  ')}`;\r\n    } else {\r\n      outputStr = ` ${ArrayPrototypeJoin(outputStrs, ', ')}`;\r\n    }\r\n    return `${this[SymbolToStringTag]} {${outputStr} }`;\r\n  }\r\n}\r\n\r\n// https://heycam.github.io/webidl/#dfn-iterator-prototype-object\r\ndelete URLSearchParamsIterator.prototype.constructor;\r\nObjectSetPrototypeOf(URLSearchParamsIterator.prototype, IteratorPrototype);\r\n\r\nObjectDefineProperties(URLSearchParamsIterator.prototype, {\r\n  [SymbolToStringTag]: { __proto__: null, configurable: true, value: 'URLSearchParams Iterator' },\r\n  next: kEnumerableProperty,\r\n});\r\n\r\n\r\nclass URLSearchParams {\r\n  #searchParams = [];\r\n\r\n  // \"associated url object\"\r\n  #context;\r\n\r\n  static {\r\n    setURLSearchParamsContext = (obj, ctx) => {\r\n      obj.#context = ctx;\r\n    };\r\n    getURLSearchParamsList = (obj) => obj.#searchParams;\r\n    setURLSearchParams = (obj, query) => {\r\n      if (query === undefined) {\r\n        obj.#searchParams = [];\r\n      } else {\r\n        obj.#searchParams = parseParams(query);\r\n      }\r\n    };\r\n  }\r\n\r\n  // URL Standard says the default value is '', but as undefined and '' have\r\n  // the same result, undefined is used to prevent unnecessary parsing.\r\n  // Default parameter is necessary to keep URLSearchParams.length === 0 in\r\n  // accordance with Web IDL spec.\r\n  constructor(init = undefined) {\r\n    markTransferMode(this, false, false);\r\n\r\n    if (init == null) {\r\n      // Do nothing\r\n    } else if (typeof init === 'object' || typeof init === 'function') {\r\n      const method = init[SymbolIterator];\r\n      if (method === this[SymbolIterator] && #searchParams in init) {\r\n        // While the spec does not have this branch, we can use it as a\r\n        // shortcut to avoid having to go through the costly generic iterator.\r\n        const childParams = init.#searchParams;\r\n        this.#searchParams = childParams.slice();\r\n      } else if (method != null) {\r\n        // Sequence<sequence<USVString>>\r\n        if (typeof method !== 'function') {\r\n          throw new ERR_ARG_NOT_ITERABLE('Query pairs');\r\n        }\r\n\r\n        // The following implementationd differs from the URL specification:\r\n        // Sequences must first be converted from ECMAScript objects before\r\n        // and operations are done on them, and the operation of converting\r\n        // the sequences would first exhaust the iterators. If the iterator\r\n        // returns something invalid in the middle, whether it would be called\r\n        // after that would be an observable change to the users.\r\n        // Exhausting the iterator and later converting them to USVString comes\r\n        // with a significant cost (~40-80%). In order optimize URLSearchParams\r\n        // creation duration, Node.js merges the iteration and converting\r\n        // iterations into a single iteration.\r\n        for (const pair of init) {\r\n          if (pair == null) {\r\n            throw new ERR_INVALID_TUPLE('Each query pair', '[name, value]');\r\n          } else if (ArrayIsArray(pair)) {\r\n            // If innerSequence's size is not 2, then throw a TypeError.\r\n            if (pair.length !== 2) {\r\n              throw new ERR_INVALID_TUPLE('Each query pair', '[name, value]');\r\n            }\r\n            // Append (innerSequence[0], innerSequence[1]) to querys list.\r\n            ArrayPrototypePush(\r\n              this.#searchParams,\r\n              StringPrototypeToWellFormed(`${pair[0]}`),\r\n              StringPrototypeToWellFormed(`${pair[1]}`),\r\n            );\r\n          } else {\r\n            if (((typeof pair !== 'object' && typeof pair !== 'function') ||\r\n                typeof pair[SymbolIterator] !== 'function')) {\r\n              throw new ERR_INVALID_TUPLE('Each query pair', '[name, value]');\r\n            }\r\n\r\n            let length = 0;\r\n\r\n            for (const element of pair) {\r\n              length++;\r\n              ArrayPrototypePush(this.#searchParams, StringPrototypeToWellFormed(`${element}`));\r\n            }\r\n\r\n            // If innerSequence's size is not 2, then throw a TypeError.\r\n            if (length !== 2) {\r\n              throw new ERR_INVALID_TUPLE('Each query pair', '[name, value]');\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // Record<USVString, USVString>\r\n        // Need to use reflection APIs for full spec compliance.\r\n        const visited = new SafeMap();\r\n        const keys = ReflectOwnKeys(init);\r\n        for (let i = 0; i < keys.length; i++) {\r\n          const key = keys[i];\r\n          const desc = ReflectGetOwnPropertyDescriptor(init, key);\r\n          if (desc !== undefined && desc.enumerable) {\r\n            const typedKey = StringPrototypeToWellFormed(key);\r\n            const typedValue = StringPrototypeToWellFormed(`${init[key]}`);\r\n\r\n            // Two different keys may become the same USVString after normalization.\r\n            // In that case, we retain the later one. Refer to WPT.\r\n            const keyIdx = visited.get(typedKey);\r\n            if (keyIdx !== undefined) {\r\n              this.#searchParams[keyIdx] = typedValue;\r\n            } else {\r\n              visited.set(typedKey, ArrayPrototypePush(this.#searchParams,\r\n                                                       typedKey,\r\n                                                       typedValue) - 1);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // https://url.spec.whatwg.org/#dom-urlsearchparams-urlsearchparams\r\n      init = StringPrototypeToWellFormed(`${init}`);\r\n      this.#searchParams = init ? parseParams(init) : [];\r\n    }\r\n  }\r\n\r\n  [inspect.custom](recurseTimes, ctx) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (typeof recurseTimes === 'number' && recurseTimes < 0)\r\n      return ctx.stylize('[Object]', 'special');\r\n\r\n    const separator = ', ';\r\n    const innerOpts = { ...ctx };\r\n    if (recurseTimes !== null) {\r\n      innerOpts.depth = recurseTimes - 1;\r\n    }\r\n    const innerInspect = (v) => inspect(v, innerOpts);\r\n\r\n    const list = this.#searchParams;\r\n    const output = [];\r\n    for (let i = 0; i < list.length; i += 2)\r\n      ArrayPrototypePush(\r\n        output,\r\n        `${innerInspect(list[i])} => ${innerInspect(list[i + 1])}`);\r\n\r\n    const length = ArrayPrototypeReduce(\r\n      output,\r\n      (prev, cur) => prev + removeColors(cur).length + separator.length,\r\n      -separator.length,\r\n    );\r\n    if (length > ctx.breakLength) {\r\n      return `${this.constructor.name} {\\n` +\r\n      `  ${ArrayPrototypeJoin(output, ',\\n  ')} }`;\r\n    } else if (output.length) {\r\n      return `${this.constructor.name} { ` +\r\n      `${ArrayPrototypeJoin(output, separator)} }`;\r\n    }\r\n    return `${this.constructor.name} {}`;\r\n  }\r\n\r\n  get size() {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    return this.#searchParams.length / 2;\r\n  }\r\n\r\n  append(name, value) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (arguments.length < 2) {\r\n      throw new ERR_MISSING_ARGS('name', 'value');\r\n    }\r\n\r\n    name = StringPrototypeToWellFormed(`${name}`);\r\n    value = StringPrototypeToWellFormed(`${value}`);\r\n    ArrayPrototypePush(this.#searchParams, name, value);\r\n\r\n    if (this.#context) {\r\n      setURLSearchParamsModified(this.#context);\r\n    }\r\n  }\r\n\r\n  delete(name, value = undefined) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (arguments.length < 1) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n\r\n    const list = this.#searchParams;\r\n    name = StringPrototypeToWellFormed(`${name}`);\r\n\r\n    if (value !== undefined) {\r\n      value = StringPrototypeToWellFormed(`${value}`);\r\n      for (let i = 0; i < list.length;) {\r\n        if (list[i] === name && list[i + 1] === value) {\r\n          list.splice(i, 2);\r\n        } else {\r\n          i += 2;\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < list.length;) {\r\n        if (list[i] === name) {\r\n          list.splice(i, 2);\r\n        } else {\r\n          i += 2;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.#context) {\r\n      setURLSearchParamsModified(this.#context);\r\n    }\r\n  }\r\n\r\n  get(name) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (arguments.length < 1) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n\r\n    const list = this.#searchParams;\r\n    name = StringPrototypeToWellFormed(`${name}`);\r\n    for (let i = 0; i < list.length; i += 2) {\r\n      if (list[i] === name) {\r\n        return list[i + 1];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getAll(name) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (arguments.length < 1) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n\r\n    const list = this.#searchParams;\r\n    const values = [];\r\n    name = StringPrototypeToWellFormed(`${name}`);\r\n    for (let i = 0; i < list.length; i += 2) {\r\n      if (list[i] === name) {\r\n        values.push(list[i + 1]);\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  has(name, value = undefined) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (arguments.length < 1) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n\r\n    const list = this.#searchParams;\r\n    name = StringPrototypeToWellFormed(`${name}`);\r\n\r\n    if (value !== undefined) {\r\n      value = StringPrototypeToWellFormed(`${value}`);\r\n    }\r\n\r\n    for (let i = 0; i < list.length; i += 2) {\r\n      if (list[i] === name) {\r\n        if (value === undefined || list[i + 1] === value) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  set(name, value) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (arguments.length < 2) {\r\n      throw new ERR_MISSING_ARGS('name', 'value');\r\n    }\r\n\r\n    const list = this.#searchParams;\r\n    name = StringPrototypeToWellFormed(`${name}`);\r\n    value = StringPrototypeToWellFormed(`${value}`);\r\n\r\n    // If there are any name-value pairs whose name is `name`, in `list`, set\r\n    // the value of the first such name-value pair to `value` and remove the\r\n    // others.\r\n    let found = false;\r\n    for (let i = 0; i < list.length;) {\r\n      const cur = list[i];\r\n      if (cur === name) {\r\n        if (!found) {\r\n          list[i + 1] = value;\r\n          found = true;\r\n          i += 2;\r\n        } else {\r\n          list.splice(i, 2);\r\n        }\r\n      } else {\r\n        i += 2;\r\n      }\r\n    }\r\n\r\n    // Otherwise, append a new name-value pair whose name is `name` and value\r\n    // is `value`, to `list`.\r\n    if (!found) {\r\n      ArrayPrototypePush(list, name, value);\r\n    }\r\n\r\n    if (this.#context) {\r\n      setURLSearchParamsModified(this.#context);\r\n    }\r\n  }\r\n\r\n  sort() {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    const a = this.#searchParams;\r\n    const len = a.length;\r\n\r\n    if (len <= 2) {\r\n      // Nothing needs to be done.\r\n    } else if (len < 100) {\r\n      // 100 is found through testing.\r\n      // Simple stable in-place insertion sort\r\n      // Derived from v8/src/js/array.js\r\n      for (let i = 2; i < len; i += 2) {\r\n        const curKey = a[i];\r\n        const curVal = a[i + 1];\r\n        let j;\r\n        for (j = i - 2; j >= 0; j -= 2) {\r\n          if (a[j] > curKey) {\r\n            a[j + 2] = a[j];\r\n            a[j + 3] = a[j + 1];\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n        a[j + 2] = curKey;\r\n        a[j + 3] = curVal;\r\n      }\r\n    } else {\r\n      // Bottom-up iterative stable merge sort\r\n      const lBuffer = new Array(len);\r\n      const rBuffer = new Array(len);\r\n      for (let step = 2; step < len; step *= 2) {\r\n        for (let start = 0; start < len - 2; start += 2 * step) {\r\n          const mid = start + step;\r\n          let end = mid + step;\r\n          end = end < len ? end : len;\r\n          if (mid > end)\r\n            continue;\r\n          merge(a, start, mid, end, lBuffer, rBuffer);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.#context) {\r\n      setURLSearchParamsModified(this.#context);\r\n    }\r\n  }\r\n\r\n  // https://heycam.github.io/webidl/#es-iterators\r\n  // Define entries here rather than [Symbol.iterator] as the function name\r\n  // must be set to `entries`.\r\n  entries() {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    return new URLSearchParamsIterator(this, 'key+value');\r\n  }\r\n\r\n  forEach(callback, thisArg = undefined) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    validateFunction(callback, 'callback');\r\n\r\n    let list = this.#searchParams;\r\n\r\n    let i = 0;\r\n    while (i < list.length) {\r\n      const key = list[i];\r\n      const value = list[i + 1];\r\n      callback.call(thisArg, value, key, this);\r\n      // In case the URL object's `search` is updated\r\n      list = this.#searchParams;\r\n      i += 2;\r\n    }\r\n  }\r\n\r\n  // https://heycam.github.io/webidl/#es-iterable\r\n  keys() {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    return new URLSearchParamsIterator(this, 'key');\r\n  }\r\n\r\n  values() {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    return new URLSearchParamsIterator(this, 'value');\r\n  }\r\n\r\n  // https://heycam.github.io/webidl/#es-stringifier\r\n  // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior\r\n  toString() {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    return serializeParams(this.#searchParams);\r\n  }\r\n}\r\n\r\nObjectDefineProperties(URLSearchParams.prototype, {\r\n  append: kEnumerableProperty,\r\n  delete: kEnumerableProperty,\r\n  get: kEnumerableProperty,\r\n  getAll: kEnumerableProperty,\r\n  has: kEnumerableProperty,\r\n  set: kEnumerableProperty,\r\n  size: kEnumerableProperty,\r\n  sort: kEnumerableProperty,\r\n  entries: kEnumerableProperty,\r\n  forEach: kEnumerableProperty,\r\n  keys: kEnumerableProperty,\r\n  values: kEnumerableProperty,\r\n  toString: kEnumerableProperty,\r\n  [SymbolToStringTag]: { __proto__: null, configurable: true, value: 'URLSearchParams' },\r\n\r\n  // https://heycam.github.io/webidl/#es-iterable-entries\r\n  [SymbolIterator]: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    writable: true,\r\n    value: URLSearchParams.prototype.entries,\r\n  },\r\n});\r\n\r\n/**\r\n * Checks if a value has the shape of a WHATWG URL object.\r\n *\r\n * Using a symbol or instanceof would not be able to recognize URL objects\r\n * coming from other implementations (e.g. in Electron), so instead we are\r\n * checking some well known properties for a lack of a better test.\r\n *\r\n * We use `href` and `protocol` as they are the only properties that are\r\n * easy to retrieve and calculate due to the lazy nature of the getters.\r\n *\r\n * We check for `auth` and `path` attribute to distinguish legacy url instance with\r\n * WHATWG URL instance.\r\n * @param {*} self\r\n * @returns {self is URL}\r\n */\r\nfunction isURL(self) {\r\n  return Boolean(self?.href && self.protocol && self.auth === undefined && self.path === undefined);\r\n}\r\n\r\n/**\r\n * A unique symbol used as a private identifier to safely invoke the URL constructor\r\n * with a special parsing behavior. When passed as the third argument to the URL\r\n * constructor, it signals that the constructor should not throw an exception\r\n * for invalid URL inputs.\r\n */\r\nconst kParseURLSymbol = Symbol('kParseURL');\r\n\r\nclass URL {\r\n  #context = new URLContext();\r\n  #searchParams;\r\n  #searchParamsModified;\r\n\r\n  static {\r\n    setURLSearchParamsModified = (obj) => {\r\n      // When URLSearchParams changes, we lazily update URL on the next read/write for performance.\r\n      obj.#searchParamsModified = true;\r\n\r\n      // If URL has an existing search, remove it without cascading back to URLSearchParams.\r\n      // Do this to avoid any internal confusion about whether URLSearchParams or URL is up-to-date.\r\n      if (obj.#context.hasSearch) {\r\n        obj.#updateContext(bindingUrl.update(obj.#context.href, updateActions.kSearch, ''));\r\n      }\r\n    };\r\n  }\r\n\r\n  constructor(input, base = undefined, parseSymbol = undefined) {\r\n    markTransferMode(this, false, false);\r\n\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('url');\r\n    }\r\n\r\n    // StringPrototypeToWellFormed is not needed.\r\n    input = `${input}`;\r\n\r\n    if (base !== undefined) {\r\n      base = `${base}`;\r\n    }\r\n\r\n    const raiseException = parseSymbol !== kParseURLSymbol;\r\n    const href = bindingUrl.parse(input, base, raiseException);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  static parse(input, base = undefined) {\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('url');\r\n    }\r\n    const parsedURLObject = new URL(input, base, kParseURLSymbol);\r\n    return parsedURLObject.href ? parsedURLObject : null;\r\n  }\r\n\r\n  [inspect.custom](depth, opts) {\r\n    if (typeof depth === 'number' && depth < 0)\r\n      return this;\r\n\r\n    const constructor = getConstructorOf(this) || URL;\r\n    const obj = { __proto__: { constructor } };\r\n\r\n    obj.href = this.href;\r\n    obj.origin = this.origin;\r\n    obj.protocol = this.protocol;\r\n    obj.username = this.username;\r\n    obj.password = this.password;\r\n    obj.host = this.host;\r\n    obj.hostname = this.hostname;\r\n    obj.port = this.port;\r\n    obj.pathname = this.pathname;\r\n    obj.search = this.search;\r\n    obj.searchParams = this.searchParams;\r\n    obj.hash = this.hash;\r\n\r\n    if (opts.showHidden) {\r\n      obj[contextForInspect] = this.#context;\r\n    }\r\n\r\n    return `${constructor.name} ${inspect(obj, opts)}`;\r\n  }\r\n\r\n  #getSearchFromContext() {\r\n    if (!this.#context.hasSearch) return '';\r\n    let endsAt = this.#context.href.length;\r\n    if (this.#context.hasHash) endsAt = this.#context.hash_start;\r\n    if (endsAt - this.#context.search_start <= 1) return '';\r\n    return StringPrototypeSlice(this.#context.href, this.#context.search_start, endsAt);\r\n  }\r\n\r\n  #getSearchFromParams() {\r\n    if (!this.#searchParams?.size) return '';\r\n    return `?${this.#searchParams}`;\r\n  }\r\n\r\n  #ensureSearchParamsUpdated() {\r\n    // URL is updated lazily to greatly improve performance when URLSearchParams is updated repeatedly.\r\n    // If URLSearchParams has been modified, reflect that back into URL, without cascading back.\r\n    if (this.#searchParamsModified) {\r\n      this.#searchParamsModified = false;\r\n      this.#updateContext(bindingUrl.update(this.#context.href, updateActions.kSearch, this.#getSearchFromParams()));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the internal context state for URL.\r\n   * @param {string} href New href string from `bindingUrl.update`.\r\n   * @param {boolean} [shouldUpdateSearchParams] If the update has potential to update search params (href/search).\r\n   */\r\n  #updateContext(href, shouldUpdateSearchParams = false) {\r\n    const previousSearch = shouldUpdateSearchParams && this.#searchParams &&\r\n      (this.#searchParamsModified ? this.#getSearchFromParams() : this.#getSearchFromContext());\r\n\r\n    this.#context.href = href;\r\n\r\n    const {\r\n      0: protocol_end,\r\n      1: username_end,\r\n      2: host_start,\r\n      3: host_end,\r\n      4: port,\r\n      5: pathname_start,\r\n      6: search_start,\r\n      7: hash_start,\r\n      8: scheme_type,\r\n    } = bindingUrl.urlComponents;\r\n\r\n    this.#context.protocol_end = protocol_end;\r\n    this.#context.username_end = username_end;\r\n    this.#context.host_start = host_start;\r\n    this.#context.host_end = host_end;\r\n    this.#context.port = port;\r\n    this.#context.pathname_start = pathname_start;\r\n    this.#context.search_start = search_start;\r\n    this.#context.hash_start = hash_start;\r\n    this.#context.scheme_type = scheme_type;\r\n\r\n    if (this.#searchParams) {\r\n      // If the search string has updated, URL becomes the source of truth, and we update URLSearchParams.\r\n      // Only do this when we're expecting it to have changed, otherwise a change to hash etc.\r\n      // would incorrectly compare the URLSearchParams state to the empty URL search state.\r\n      if (shouldUpdateSearchParams) {\r\n        const currentSearch = this.#getSearchFromContext();\r\n        if (previousSearch !== currentSearch) {\r\n          setURLSearchParams(this.#searchParams, currentSearch);\r\n          this.#searchParamsModified = false;\r\n        }\r\n      }\r\n\r\n      // If we have a URLSearchParams, ensure that URL is up-to-date with any modification to it.\r\n      this.#ensureSearchParamsUpdated();\r\n    }\r\n  }\r\n\r\n  toString() {\r\n    // Updates to URLSearchParams are lazily propagated to URL, so we need to check we're in sync.\r\n    this.#ensureSearchParamsUpdated();\r\n    return this.#context.href;\r\n  }\r\n\r\n  get href() {\r\n    // Updates to URLSearchParams are lazily propagated to URL, so we need to check we're in sync.\r\n    this.#ensureSearchParamsUpdated();\r\n    return this.#context.href;\r\n  }\r\n\r\n  set href(value) {\r\n    value = `${value}`;\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kHref, value);\r\n    if (!href) { throw new ERR_INVALID_URL(value); }\r\n    this.#updateContext(href, true);\r\n  }\r\n\r\n  // readonly\r\n  get origin() {\r\n    const protocol = StringPrototypeSlice(this.#context.href, 0, this.#context.protocol_end);\r\n\r\n    // Check if scheme_type is not `NOT_SPECIAL`\r\n    if (this.#context.scheme_type !== 1) {\r\n      // Check if scheme_type is `FILE`\r\n      if (this.#context.scheme_type === 6) {\r\n        return 'null';\r\n      }\r\n      return `${protocol}//${this.host}`;\r\n    }\r\n\r\n    if (protocol === 'blob:') {\r\n      const path = this.pathname;\r\n      if (path.length > 0) {\r\n        try {\r\n          const out = new URL(path);\r\n          // Only return origin of scheme is `http` or `https`\r\n          // Otherwise return a new opaque origin (null).\r\n          if (out.#context.scheme_type === 0 || out.#context.scheme_type === 2) {\r\n            return `${out.protocol}//${out.host}`;\r\n          }\r\n        } catch {\r\n          // Do nothing.\r\n        }\r\n      }\r\n    }\r\n\r\n    return 'null';\r\n  }\r\n\r\n  get protocol() {\r\n    return StringPrototypeSlice(this.#context.href, 0, this.#context.protocol_end);\r\n  }\r\n\r\n  set protocol(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kProtocol, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get username() {\r\n    if (this.#context.protocol_end + 2 < this.#context.username_end) {\r\n      return StringPrototypeSlice(this.#context.href, this.#context.protocol_end + 2, this.#context.username_end);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  set username(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kUsername, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get password() {\r\n    if (this.#context.host_start - this.#context.username_end > 0) {\r\n      return StringPrototypeSlice(this.#context.href, this.#context.username_end + 1, this.#context.host_start);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  set password(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kPassword, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get host() {\r\n    let startsAt = this.#context.host_start;\r\n    if (this.#context.href[startsAt] === '@') {\r\n      startsAt++;\r\n    }\r\n    // If we have an empty host, then the space between components.host_end and\r\n    // components.pathname_start may be occupied by /.\r\n    if (startsAt === this.#context.host_end) {\r\n      return '';\r\n    }\r\n    return StringPrototypeSlice(this.#context.href, startsAt, this.#context.pathname_start);\r\n  }\r\n\r\n  set host(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kHost, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get hostname() {\r\n    let startsAt = this.#context.host_start;\r\n    // host_start might be \"@\" if the URL has credentials\r\n    if (this.#context.href[startsAt] === '@') {\r\n      startsAt++;\r\n    }\r\n    return StringPrototypeSlice(this.#context.href, startsAt, this.#context.host_end);\r\n  }\r\n\r\n  set hostname(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kHostname, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get port() {\r\n    if (this.#context.hasPort) {\r\n      return `${this.#context.port}`;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  set port(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kPort, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get pathname() {\r\n    let endsAt;\r\n    if (this.#context.hasSearch) {\r\n      endsAt = this.#context.search_start;\r\n    } else if (this.#context.hasHash) {\r\n      endsAt = this.#context.hash_start;\r\n    }\r\n    return StringPrototypeSlice(this.#context.href, this.#context.pathname_start, endsAt);\r\n  }\r\n\r\n  set pathname(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kPathname, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get search() {\r\n    // Updates to URLSearchParams are lazily propagated to URL, so we need to check we're in sync.\r\n    this.#ensureSearchParamsUpdated();\r\n    return this.#getSearchFromContext();\r\n  }\r\n\r\n  set search(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kSearch, StringPrototypeToWellFormed(`${value}`));\r\n    if (href) {\r\n      this.#updateContext(href, true);\r\n    }\r\n  }\r\n\r\n  // readonly\r\n  get searchParams() {\r\n    // Create URLSearchParams on demand to greatly improve the URL performance.\r\n    if (this.#searchParams == null) {\r\n      this.#searchParams = new URLSearchParams(this.#getSearchFromContext());\r\n      setURLSearchParamsContext(this.#searchParams, this);\r\n      this.#searchParamsModified = false;\r\n    }\r\n    return this.#searchParams;\r\n  }\r\n\r\n  get hash() {\r\n    if (!this.#context.hasHash || (this.#context.href.length - this.#context.hash_start <= 1)) {\r\n      return '';\r\n    }\r\n    return StringPrototypeSlice(this.#context.href, this.#context.hash_start);\r\n  }\r\n\r\n  set hash(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kHash, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  toJSON() {\r\n    // Updates to URLSearchParams are lazily propagated to URL, so we need to check we're in sync.\r\n    this.#ensureSearchParamsUpdated();\r\n    return this.#context.href;\r\n  }\r\n\r\n  static canParse(url, base = undefined) {\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('url');\r\n    }\r\n\r\n    url = `${url}`;\r\n\r\n    if (base !== undefined) {\r\n      return bindingUrl.canParse(url, `${base}`);\r\n    }\r\n\r\n    // It is important to differentiate the canParse call statements\r\n    // since they resolve into different v8 fast api overloads.\r\n    return bindingUrl.canParse(url);\r\n  }\r\n}\r\n\r\nObjectDefineProperties(URL.prototype, {\r\n  [SymbolToStringTag]: { __proto__: null, configurable: true, value: 'URL' },\r\n  toString: kEnumerableProperty,\r\n  href: kEnumerableProperty,\r\n  origin: kEnumerableProperty,\r\n  protocol: kEnumerableProperty,\r\n  username: kEnumerableProperty,\r\n  password: kEnumerableProperty,\r\n  host: kEnumerableProperty,\r\n  hostname: kEnumerableProperty,\r\n  port: kEnumerableProperty,\r\n  pathname: kEnumerableProperty,\r\n  search: kEnumerableProperty,\r\n  searchParams: kEnumerableProperty,\r\n  hash: kEnumerableProperty,\r\n  toJSON: kEnumerableProperty,\r\n});\r\n\r\nObjectDefineProperties(URL, {\r\n  canParse: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    writable: true,\r\n    enumerable: true,\r\n  },\r\n});\r\n\r\nfunction installObjectURLMethods() {\r\n  const bindingBlob = internalBinding('blob');\r\n\r\n  function createObjectURL(obj) {\r\n    const cryptoRandom = lazyCryptoRandom();\r\n    if (cryptoRandom === undefined)\r\n      throw new ERR_NO_CRYPTO();\r\n\r\n    const blob = lazyBlob();\r\n    if (!blob.isBlob(obj))\r\n      throw new ERR_INVALID_ARG_TYPE('obj', 'Blob', obj);\r\n\r\n    const id = cryptoRandom.randomUUID();\r\n\r\n    bindingBlob.storeDataObject(id, obj[blob.kHandle], obj.size, obj.type);\r\n\r\n    return `blob:nodedata:${id}`;\r\n  }\r\n\r\n  function revokeObjectURL(url) {\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('url');\r\n    }\r\n\r\n    bindingBlob.revokeObjectURL(`${url}`);\r\n  }\r\n\r\n  ObjectDefineProperties(URL, {\r\n    createObjectURL: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      writable: true,\r\n      enumerable: true,\r\n      value: createObjectURL,\r\n    },\r\n    revokeObjectURL: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      writable: true,\r\n      enumerable: true,\r\n      value: revokeObjectURL,\r\n    },\r\n  });\r\n}\r\n\r\n// application/x-www-form-urlencoded parser\r\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-parser\r\nfunction parseParams(qs) {\r\n  const out = [];\r\n  let seenSep = false;\r\n  let buf = '';\r\n  let encoded = false;\r\n  let encodeCheck = 0;\r\n  let i = qs[0] === '?' ? 1 : 0;\r\n  let pairStart = i;\r\n  let lastPos = i;\r\n  for (; i < qs.length; ++i) {\r\n    const code = StringPrototypeCharCodeAt(qs, i);\r\n\r\n    // Try matching key/value pair separator\r\n    if (code === CHAR_AMPERSAND) {\r\n      if (pairStart === i) {\r\n        // We saw an empty substring between pair separators\r\n        lastPos = pairStart = i + 1;\r\n        continue;\r\n      }\r\n\r\n      if (lastPos < i)\r\n        buf += qs.slice(lastPos, i);\r\n      if (encoded)\r\n        buf = querystring.unescape(buf);\r\n      out.push(buf);\r\n\r\n      // If `buf` is the key, add an empty value.\r\n      if (!seenSep)\r\n        out.push('');\r\n\r\n      seenSep = false;\r\n      buf = '';\r\n      encoded = false;\r\n      encodeCheck = 0;\r\n      lastPos = pairStart = i + 1;\r\n      continue;\r\n    }\r\n\r\n    // Try matching key/value separator (e.g. '=') if we haven't already\r\n    if (!seenSep && code === CHAR_EQUAL) {\r\n      // Key/value separator match!\r\n      if (lastPos < i)\r\n        buf += qs.slice(lastPos, i);\r\n      if (encoded)\r\n        buf = querystring.unescape(buf);\r\n      out.push(buf);\r\n\r\n      seenSep = true;\r\n      buf = '';\r\n      encoded = false;\r\n      encodeCheck = 0;\r\n      lastPos = i + 1;\r\n      continue;\r\n    }\r\n\r\n    // Handle + and percent decoding.\r\n    if (code === CHAR_PLUS) {\r\n      if (lastPos < i)\r\n        buf += StringPrototypeSlice(qs, lastPos, i);\r\n      buf += ' ';\r\n      lastPos = i + 1;\r\n    } else if (!encoded) {\r\n      // Try to match an (valid) encoded byte (once) to minimize unnecessary\r\n      // calls to string decoding functions\r\n      if (code === CHAR_PERCENT) {\r\n        encodeCheck = 1;\r\n      } else if (encodeCheck > 0) {\r\n        if (isHexTable[code] === 1) {\r\n          if (++encodeCheck === 3) {\r\n            encoded = true;\r\n          }\r\n        } else {\r\n          encodeCheck = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Deal with any leftover key or value data\r\n\r\n  // There is a trailing &. No more processing is needed.\r\n  if (pairStart === i)\r\n    return out;\r\n\r\n  if (lastPos < i)\r\n    buf += StringPrototypeSlice(qs, lastPos, i);\r\n  if (encoded)\r\n    buf = querystring.unescape(buf);\r\n  ArrayPrototypePush(out, buf);\r\n\r\n  // If `buf` is the key, add an empty value.\r\n  if (!seenSep)\r\n    ArrayPrototypePush(out, '');\r\n\r\n  return out;\r\n}\r\n\r\n// Adapted from querystring's implementation.\r\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-byte-serializer\r\nconst noEscape = new Int8Array([\r\n/*\r\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\r\n*/\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x00 - 0x0F\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x10 - 0x1F\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, // 0x20 - 0x2F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 0x30 - 0x3F\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x40 - 0x4F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 0x50 - 0x5F\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x60 - 0x6F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,  // 0x70 - 0x7F\r\n]);\r\n\r\n// Special version of hexTable that uses `+` for U+0020 SPACE.\r\nconst paramHexTable = hexTable.slice();\r\nparamHexTable[0x20] = '+';\r\n\r\n// application/x-www-form-urlencoded serializer\r\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-serializer\r\nfunction serializeParams(array) {\r\n  const len = array.length;\r\n  if (len === 0)\r\n    return '';\r\n\r\n  const firstEncodedParam = encodeStr(array[0], noEscape, paramHexTable);\r\n  const firstEncodedValue = encodeStr(array[1], noEscape, paramHexTable);\r\n  let output = `${firstEncodedParam}=${firstEncodedValue}`;\r\n\r\n  for (let i = 2; i < len; i += 2) {\r\n    const encodedParam = encodeStr(array[i], noEscape, paramHexTable);\r\n    const encodedValue = encodeStr(array[i + 1], noEscape, paramHexTable);\r\n    output += `&${encodedParam}=${encodedValue}`;\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\n// for merge sort\r\nfunction merge(out, start, mid, end, lBuffer, rBuffer) {\r\n  const sizeLeft = mid - start;\r\n  const sizeRight = end - mid;\r\n  let l, r, o;\r\n\r\n  for (l = 0; l < sizeLeft; l++)\r\n    lBuffer[l] = out[start + l];\r\n  for (r = 0; r < sizeRight; r++)\r\n    rBuffer[r] = out[mid + r];\r\n\r\n  l = 0;\r\n  r = 0;\r\n  o = start;\r\n  while (l < sizeLeft && r < sizeRight) {\r\n    if (lBuffer[l] <= rBuffer[r]) {\r\n      out[o++] = lBuffer[l++];\r\n      out[o++] = lBuffer[l++];\r\n    } else {\r\n      out[o++] = rBuffer[r++];\r\n      out[o++] = rBuffer[r++];\r\n    }\r\n  }\r\n  while (l < sizeLeft)\r\n    out[o++] = lBuffer[l++];\r\n  while (r < sizeRight)\r\n    out[o++] = rBuffer[r++];\r\n}\r\n\r\nfunction domainToASCII(domain) {\r\n  if (arguments.length < 1)\r\n    throw new ERR_MISSING_ARGS('domain');\r\n\r\n  // StringPrototypeToWellFormed is not needed.\r\n  return bindingUrl.domainToASCII(`${domain}`);\r\n}\r\n\r\nfunction domainToUnicode(domain) {\r\n  if (arguments.length < 1)\r\n    throw new ERR_MISSING_ARGS('domain');\r\n\r\n  // StringPrototypeToWellFormed is not needed.\r\n  return bindingUrl.domainToUnicode(`${domain}`);\r\n}\r\n\r\n/**\r\n * Utility function that converts a URL object into an ordinary options object\r\n * as expected by the `http.request` and `https.request` APIs.\r\n * @param {URL} url\r\n * @returns {Record<string, unknown>}\r\n */\r\nfunction urlToHttpOptions(url) {\r\n  const { hostname, pathname, port, username, password, search } = url;\r\n  const options = {\r\n    __proto__: null,\r\n    ...url, // In case the url object was extended by the user.\r\n    protocol: url.protocol,\r\n    hostname: hostname && StringPrototypeStartsWith(hostname, '[') ?\r\n      StringPrototypeSlice(hostname, 1, -1) :\r\n      hostname,\r\n    hash: url.hash,\r\n    search: search,\r\n    pathname: pathname,\r\n    path: `${pathname || ''}${search || ''}`,\r\n    href: url.href,\r\n  };\r\n  if (port !== '') {\r\n    options.port = Number(port);\r\n  }\r\n  if (username || password) {\r\n    options.auth = `${decodeURIComponent(username)}:${decodeURIComponent(password)}`;\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction getPathFromURLWin32(url) {\r\n  const hostname = url.hostname;\r\n  let pathname = url.pathname;\r\n  for (let n = 0; n < pathname.length; n++) {\r\n    if (pathname[n] === '%') {\r\n      const third = StringPrototypeCodePointAt(pathname, n + 2) | 0x20;\r\n      if ((pathname[n + 1] === '2' && third === 102) || // 2f 2F /\r\n          (pathname[n + 1] === '5' && third === 99)) {  // 5c 5C \\\r\n        throw new ERR_INVALID_FILE_URL_PATH(\r\n          'must not include encoded \\\\ or / characters',\r\n        );\r\n      }\r\n    }\r\n  }\r\n  pathname = SideEffectFreeRegExpPrototypeSymbolReplace(FORWARD_SLASH, pathname, '\\\\');\r\n  pathname = decodeURIComponent(pathname);\r\n  if (hostname !== '') {\r\n    // If hostname is set, then we have a UNC path\r\n    // Pass the hostname through domainToUnicode just in case\r\n    // it is an IDN using punycode encoding. We do not need to worry\r\n    // about percent encoding because the URL parser will have\r\n    // already taken care of that for us. Note that this only\r\n    // causes IDNs with an appropriate `xn--` prefix to be decoded.\r\n    return `\\\\\\\\${domainToUnicode(hostname)}${pathname}`;\r\n  }\r\n  // Otherwise, it's a local path that requires a drive letter\r\n  const letter = StringPrototypeCodePointAt(pathname, 1) | 0x20;\r\n  const sep = StringPrototypeCharAt(pathname, 2);\r\n  if (letter < CHAR_LOWERCASE_A || letter > CHAR_LOWERCASE_Z ||   // a..z A..Z\r\n      (sep !== ':')) {\r\n    throw new ERR_INVALID_FILE_URL_PATH('must be absolute');\r\n  }\r\n  return StringPrototypeSlice(pathname, 1);\r\n}\r\n\r\nfunction getPathFromURLPosix(url) {\r\n  if (url.hostname !== '') {\r\n    throw new ERR_INVALID_FILE_URL_HOST(platform);\r\n  }\r\n  const pathname = url.pathname;\r\n  for (let n = 0; n < pathname.length; n++) {\r\n    if (pathname[n] === '%') {\r\n      const third = StringPrototypeCodePointAt(pathname, n + 2) | 0x20;\r\n      if (pathname[n + 1] === '2' && third === 102) {\r\n        throw new ERR_INVALID_FILE_URL_PATH(\r\n          'must not include encoded / characters',\r\n        );\r\n      }\r\n    }\r\n  }\r\n  return decodeURIComponent(pathname);\r\n}\r\n\r\nfunction fileURLToPath(path, options = kEmptyObject) {\r\n  const windows = options?.windows;\r\n  if (typeof path === 'string')\r\n    path = new URL(path);\r\n  else if (!isURL(path))\r\n    throw new ERR_INVALID_ARG_TYPE('path', ['string', 'URL'], path);\r\n  if (path.protocol !== 'file:')\r\n    throw new ERR_INVALID_URL_SCHEME('file');\r\n  return (windows ?? isWindows) ? getPathFromURLWin32(path) : getPathFromURLPosix(path);\r\n}\r\n\r\n// The following characters are percent-encoded when converting from file path\r\n// to URL:\r\n// - %: The percent character is the only character not encoded by the\r\n//        `pathname` setter.\r\n// - \\: Backslash is encoded on non-windows platforms since it's a valid\r\n//      character but the `pathname` setters replaces it by a forward slash.\r\n// - LF: The newline character is stripped out by the `pathname` setter.\r\n//       (See whatwg/url#419)\r\n// - CR: The carriage return character is also stripped out by the `pathname`\r\n//       setter.\r\n// - TAB: The tab character is also stripped out by the `pathname` setter.\r\nconst percentRegEx = /%/g;\r\nconst backslashRegEx = /\\\\/g;\r\nconst newlineRegEx = /\\n/g;\r\nconst carriageReturnRegEx = /\\r/g;\r\nconst tabRegEx = /\\t/g;\r\nconst questionRegex = /\\?/g;\r\nconst hashRegex = /#/g;\r\n\r\nfunction encodePathChars(filepath, options = kEmptyObject) {\r\n  const windows = options?.windows;\r\n  if (StringPrototypeIndexOf(filepath, '%') !== -1)\r\n    filepath = RegExpPrototypeSymbolReplace(percentRegEx, filepath, '%25');\r\n  // In posix, backslash is a valid character in paths:\r\n  if (!(windows ?? isWindows) && StringPrototypeIndexOf(filepath, '\\\\') !== -1)\r\n    filepath = RegExpPrototypeSymbolReplace(backslashRegEx, filepath, '%5C');\r\n  if (StringPrototypeIndexOf(filepath, '\\n') !== -1)\r\n    filepath = RegExpPrototypeSymbolReplace(newlineRegEx, filepath, '%0A');\r\n  if (StringPrototypeIndexOf(filepath, '\\r') !== -1)\r\n    filepath = RegExpPrototypeSymbolReplace(carriageReturnRegEx, filepath, '%0D');\r\n  if (StringPrototypeIndexOf(filepath, '\\t') !== -1)\r\n    filepath = RegExpPrototypeSymbolReplace(tabRegEx, filepath, '%09');\r\n  return filepath;\r\n}\r\n\r\nfunction pathToFileURL(filepath, options = kEmptyObject) {\r\n  const windows = options?.windows;\r\n  if ((windows ?? isWindows) && StringPrototypeStartsWith(filepath, '\\\\\\\\')) {\r\n    const outURL = new URL('file://');\r\n    // UNC path format: \\\\server\\share\\resource\r\n    const hostnameEndIndex = StringPrototypeIndexOf(filepath, '\\\\', 2);\r\n    if (hostnameEndIndex === -1) {\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        'path',\r\n        filepath,\r\n        'Missing UNC resource path',\r\n      );\r\n    }\r\n    if (hostnameEndIndex === 2) {\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        'path',\r\n        filepath,\r\n        'Empty UNC servername',\r\n      );\r\n    }\r\n    const hostname = StringPrototypeSlice(filepath, 2, hostnameEndIndex);\r\n    outURL.hostname = domainToASCII(hostname);\r\n    outURL.pathname = encodePathChars(\r\n      RegExpPrototypeSymbolReplace(backslashRegEx, StringPrototypeSlice(filepath, hostnameEndIndex), '/'),\r\n      { windows },\r\n    );\r\n    return outURL;\r\n  }\r\n  let resolved = (windows ?? isWindows) ? path.win32.resolve(filepath) : path.posix.resolve(filepath);\r\n  // path.resolve strips trailing slashes so we must add them back\r\n  const filePathLast = StringPrototypeCharCodeAt(filepath,\r\n                                                 filepath.length - 1);\r\n  if ((filePathLast === CHAR_FORWARD_SLASH ||\r\n       ((windows ?? isWindows) && filePathLast === CHAR_BACKWARD_SLASH)) &&\r\n      resolved[resolved.length - 1] !== path.sep)\r\n    resolved += '/';\r\n\r\n  // Call encodePathChars first to avoid encoding % again for ? and #.\r\n  resolved = encodePathChars(resolved, { windows });\r\n\r\n  // Question and hash character should be included in pathname.\r\n  // Therefore, encoding is required to eliminate parsing them in different states.\r\n  // This is done as an optimization to not creating a URL instance and\r\n  // later triggering pathname setter, which impacts performance\r\n  if (StringPrototypeIndexOf(resolved, '?') !== -1)\r\n    resolved = RegExpPrototypeSymbolReplace(questionRegex, resolved, '%3F');\r\n  if (StringPrototypeIndexOf(resolved, '#') !== -1)\r\n    resolved = RegExpPrototypeSymbolReplace(hashRegex, resolved, '%23');\r\n  return new URL(`file://${resolved}`);\r\n}\r\n\r\nfunction toPathIfFileURL(fileURLOrPath) {\r\n  if (!isURL(fileURLOrPath))\r\n    return fileURLOrPath;\r\n  return fileURLToPath(fileURLOrPath);\r\n}\r\n\r\n/**\r\n * This util takes a string containing a URL and return the URL origin,\r\n * its meant to avoid calls to `new URL` constructor.\r\n * @param {string} url\r\n * @returns {URL['origin']}\r\n */\r\nfunction getURLOrigin(url) {\r\n  return bindingUrl.getOrigin(url);\r\n}\r\n\r\nmodule.exports = {\r\n  fileURLToPath,\r\n  pathToFileURL,\r\n  toPathIfFileURL,\r\n  installObjectURLMethods,\r\n  URL,\r\n  URLSearchParams,\r\n  domainToASCII,\r\n  domainToUnicode,\r\n  urlToHttpOptions,\r\n  encodeStr,\r\n  isURL,\r\n\r\n  urlUpdateActions: updateActions,\r\n  getURLOrigin,\r\n  unsafeProtocol,\r\n  hostlessProtocol,\r\n  slashedProtocol,\r\n};\r\n"
  },
  "29": {
    "metadata": {
      "scriptId": "29",
      "url": "node:internal/querystring",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 119,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "232d099da0545a596f975f2a041998a9543fb009c33cf257492e055a49a42d21",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3435,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/querystring"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n  Int8Array,\r\n  NumberPrototypeToString,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeSlice,\r\n  StringPrototypeToUpperCase,\r\n} = primordials;\r\n\r\nconst { ERR_INVALID_URI } = require('internal/errors').codes;\r\n\r\nconst hexTable = new Array(256);\r\nfor (let i = 0; i < 256; ++i)\r\n  hexTable[i] = '%' +\r\n                StringPrototypeToUpperCase((i < 16 ? '0' : '') +\r\n                                           NumberPrototypeToString(i, 16));\r\n\r\nconst isHexTable = new Int8Array([\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 32 - 47\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\r\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 64 - 79\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 80 - 95\r\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 96 - 111\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 112 - 127\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 128 ...\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // ... 256\r\n]);\r\n\r\n/**\r\n * @param {string} str\r\n * @param {Int8Array} noEscapeTable\r\n * @param {string[]} hexTable\r\n * @returns {string}\r\n */\r\nfunction encodeStr(str, noEscapeTable, hexTable) {\r\n  const len = str.length;\r\n  if (len === 0)\r\n    return '';\r\n\r\n  let out = '';\r\n  let lastPos = 0;\r\n  let i = 0;\r\n\r\n  outer:\r\n  for (; i < len; i++) {\r\n    let c = StringPrototypeCharCodeAt(str, i);\r\n\r\n    // ASCII\r\n    while (c < 0x80) {\r\n      if (noEscapeTable[c] !== 1) {\r\n        if (lastPos < i)\r\n          out += StringPrototypeSlice(str, lastPos, i);\r\n        lastPos = i + 1;\r\n        out += hexTable[c];\r\n      }\r\n\r\n      if (++i === len)\r\n        break outer;\r\n\r\n      c = StringPrototypeCharCodeAt(str, i);\r\n    }\r\n\r\n    if (lastPos < i)\r\n      out += StringPrototypeSlice(str, lastPos, i);\r\n\r\n    // Multi-byte characters ...\r\n    if (c < 0x800) {\r\n      lastPos = i + 1;\r\n      out += hexTable[0xC0 | (c >> 6)] +\r\n             hexTable[0x80 | (c & 0x3F)];\r\n      continue;\r\n    }\r\n    if (c < 0xD800 || c >= 0xE000) {\r\n      lastPos = i + 1;\r\n      out += hexTable[0xE0 | (c >> 12)] +\r\n             hexTable[0x80 | ((c >> 6) & 0x3F)] +\r\n             hexTable[0x80 | (c & 0x3F)];\r\n      continue;\r\n    }\r\n    // Surrogate pair\r\n    ++i;\r\n\r\n    // This branch should never happen because all URLSearchParams entries\r\n    // should already be converted to USVString. But, included for\r\n    // completion's sake anyway.\r\n    if (i >= len)\r\n      throw new ERR_INVALID_URI();\r\n\r\n    const c2 = StringPrototypeCharCodeAt(str, i) & 0x3FF;\r\n\r\n    lastPos = i + 1;\r\n    c = 0x10000 + (((c & 0x3FF) << 10) | c2);\r\n    out += hexTable[0xF0 | (c >> 18)] +\r\n           hexTable[0x80 | ((c >> 12) & 0x3F)] +\r\n           hexTable[0x80 | ((c >> 6) & 0x3F)] +\r\n           hexTable[0x80 | (c & 0x3F)];\r\n  }\r\n  if (lastPos === 0)\r\n    return str;\r\n  if (lastPos < len)\r\n    return out + StringPrototypeSlice(str, lastPos);\r\n  return out;\r\n}\r\n\r\nmodule.exports = {\r\n  encodeStr,\r\n  hexTable,\r\n  isHexTable,\r\n};\r\n"
  },
  "30": {
    "metadata": {
      "scriptId": "30",
      "url": "node:path",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1546,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "5fbac795a5cf1b110739d3512a8b5ec1e7dabdd8be012dbfba84de511f3cbc7c",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 48405,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:path"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeBind,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeLastIndexOf,\r\n  StringPrototypeReplace,\r\n  StringPrototypeSlice,\r\n  StringPrototypeToLowerCase,\r\n} = primordials;\r\n\r\nconst {\r\n  CHAR_UPPERCASE_A,\r\n  CHAR_LOWERCASE_A,\r\n  CHAR_UPPERCASE_Z,\r\n  CHAR_LOWERCASE_Z,\r\n  CHAR_DOT,\r\n  CHAR_FORWARD_SLASH,\r\n  CHAR_BACKWARD_SLASH,\r\n  CHAR_COLON,\r\n  CHAR_QUESTION_MARK,\r\n} = require('internal/constants');\r\nconst {\r\n  validateObject,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst platformIsWin32 = (process.platform === 'win32');\r\n\r\nfunction isPathSeparator(code) {\r\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\r\n}\r\n\r\nfunction isPosixPathSeparator(code) {\r\n  return code === CHAR_FORWARD_SLASH;\r\n}\r\n\r\nfunction isWindowsDeviceRoot(code) {\r\n  return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\r\n         (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z);\r\n}\r\n\r\n// Resolves . and .. elements in a path with directory names\r\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\r\n  let res = '';\r\n  let lastSegmentLength = 0;\r\n  let lastSlash = -1;\r\n  let dots = 0;\r\n  let code = 0;\r\n  for (let i = 0; i <= path.length; ++i) {\r\n    if (i < path.length)\r\n      code = StringPrototypeCharCodeAt(path, i);\r\n    else if (isPathSeparator(code))\r\n      break;\r\n    else\r\n      code = CHAR_FORWARD_SLASH;\r\n\r\n    if (isPathSeparator(code)) {\r\n      if (lastSlash === i - 1 || dots === 1) {\r\n        // NOOP\r\n      } else if (dots === 2) {\r\n        if (res.length < 2 || lastSegmentLength !== 2 ||\r\n            StringPrototypeCharCodeAt(res, res.length - 1) !== CHAR_DOT ||\r\n            StringPrototypeCharCodeAt(res, res.length - 2) !== CHAR_DOT) {\r\n          if (res.length > 2) {\r\n            const lastSlashIndex = StringPrototypeLastIndexOf(res, separator);\r\n            if (lastSlashIndex === -1) {\r\n              res = '';\r\n              lastSegmentLength = 0;\r\n            } else {\r\n              res = StringPrototypeSlice(res, 0, lastSlashIndex);\r\n              lastSegmentLength =\r\n                res.length - 1 - StringPrototypeLastIndexOf(res, separator);\r\n            }\r\n            lastSlash = i;\r\n            dots = 0;\r\n            continue;\r\n          } else if (res.length !== 0) {\r\n            res = '';\r\n            lastSegmentLength = 0;\r\n            lastSlash = i;\r\n            dots = 0;\r\n            continue;\r\n          }\r\n        }\r\n        if (allowAboveRoot) {\r\n          res += res.length > 0 ? `${separator}..` : '..';\r\n          lastSegmentLength = 2;\r\n        }\r\n      } else {\r\n        if (res.length > 0)\r\n          res += `${separator}${StringPrototypeSlice(path, lastSlash + 1, i)}`;\r\n        else\r\n          res = StringPrototypeSlice(path, lastSlash + 1, i);\r\n        lastSegmentLength = i - lastSlash - 1;\r\n      }\r\n      lastSlash = i;\r\n      dots = 0;\r\n    } else if (code === CHAR_DOT && dots !== -1) {\r\n      ++dots;\r\n    } else {\r\n      dots = -1;\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction formatExt(ext) {\r\n  return ext ? `${ext[0] === '.' ? '' : '.'}${ext}` : '';\r\n}\r\n\r\n/**\r\n * @param {string} sep\r\n * @param {{\r\n *  dir?: string;\r\n *  root?: string;\r\n *  base?: string;\r\n *  name?: string;\r\n *  ext?: string;\r\n *  }} pathObject\r\n * @returns {string}\r\n */\r\nfunction _format(sep, pathObject) {\r\n  validateObject(pathObject, 'pathObject');\r\n  const dir = pathObject.dir || pathObject.root;\r\n  const base = pathObject.base ||\r\n    `${pathObject.name || ''}${formatExt(pathObject.ext)}`;\r\n  if (!dir) {\r\n    return base;\r\n  }\r\n  return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;\r\n}\r\n\r\nconst win32 = {\r\n  /**\r\n   * path.resolve([from ...], to)\r\n   * @param {...string} args\r\n   * @returns {string}\r\n   */\r\n  resolve(...args) {\r\n    let resolvedDevice = '';\r\n    let resolvedTail = '';\r\n    let resolvedAbsolute = false;\r\n\r\n    for (let i = args.length - 1; i >= -1; i--) {\r\n      let path;\r\n      if (i >= 0) {\r\n        path = args[i];\r\n        validateString(path, `paths[${i}]`);\r\n\r\n        // Skip empty entries\r\n        if (path.length === 0) {\r\n          continue;\r\n        }\r\n      } else if (resolvedDevice.length === 0) {\r\n        path = process.cwd();\r\n      } else {\r\n        // Windows has the concept of drive-specific current working\r\n        // directories. If we've resolved a drive letter but not yet an\r\n        // absolute path, get cwd for that drive, or the process cwd if\r\n        // the drive cwd is not available. We're sure the device is not\r\n        // a UNC path at this points, because UNC paths are always absolute.\r\n        path = process.env[`=${resolvedDevice}`] || process.cwd();\r\n\r\n        // Verify that a cwd was found and that it actually points\r\n        // to our drive. If not, default to the drive's root.\r\n        if (path === undefined ||\r\n            (StringPrototypeToLowerCase(StringPrototypeSlice(path, 0, 2)) !==\r\n            StringPrototypeToLowerCase(resolvedDevice) &&\r\n            StringPrototypeCharCodeAt(path, 2) === CHAR_BACKWARD_SLASH)) {\r\n          path = `${resolvedDevice}\\\\`;\r\n        }\r\n      }\r\n\r\n      const len = path.length;\r\n      let rootEnd = 0;\r\n      let device = '';\r\n      let isAbsolute = false;\r\n      const code = StringPrototypeCharCodeAt(path, 0);\r\n\r\n      // Try to match a root\r\n      if (len === 1) {\r\n        if (isPathSeparator(code)) {\r\n          // `path` contains just a path separator\r\n          rootEnd = 1;\r\n          isAbsolute = true;\r\n        }\r\n      } else if (isPathSeparator(code)) {\r\n        // Possible UNC root\r\n\r\n        // If we started with a separator, we know we at least have an\r\n        // absolute path of some kind (UNC or otherwise)\r\n        isAbsolute = true;\r\n\r\n        if (isPathSeparator(StringPrototypeCharCodeAt(path, 1))) {\r\n          // Matched double path separator at beginning\r\n          let j = 2;\r\n          let last = j;\r\n          // Match 1 or more non-path separators\r\n          while (j < len &&\r\n                 !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n            j++;\r\n          }\r\n          if (j < len && j !== last) {\r\n            const firstPart = StringPrototypeSlice(path, last, j);\r\n            // Matched!\r\n            last = j;\r\n            // Match 1 or more path separators\r\n            while (j < len &&\r\n                   isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n              j++;\r\n            }\r\n            if (j < len && j !== last) {\r\n              // Matched!\r\n              last = j;\r\n              // Match 1 or more non-path separators\r\n              while (j < len &&\r\n                     !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n                j++;\r\n              }\r\n              if (j === len || j !== last) {\r\n                // We matched a UNC root\r\n                device =\r\n                  `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path, last, j)}`;\r\n                rootEnd = j;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          rootEnd = 1;\r\n        }\r\n      } else if (isWindowsDeviceRoot(code) &&\r\n                  StringPrototypeCharCodeAt(path, 1) === CHAR_COLON) {\r\n        // Possible device root\r\n        device = StringPrototypeSlice(path, 0, 2);\r\n        rootEnd = 2;\r\n        if (len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path, 2))) {\r\n          // Treat separator following drive name as an absolute path\r\n          // indicator\r\n          isAbsolute = true;\r\n          rootEnd = 3;\r\n        }\r\n      }\r\n\r\n      if (device.length > 0) {\r\n        if (resolvedDevice.length > 0) {\r\n          if (StringPrototypeToLowerCase(device) !==\r\n              StringPrototypeToLowerCase(resolvedDevice))\r\n            // This path points to another device so it is not applicable\r\n            continue;\r\n        } else {\r\n          resolvedDevice = device;\r\n        }\r\n      }\r\n\r\n      if (resolvedAbsolute) {\r\n        if (resolvedDevice.length > 0)\r\n          break;\r\n      } else {\r\n        resolvedTail =\r\n          `${StringPrototypeSlice(path, rootEnd)}\\\\${resolvedTail}`;\r\n        resolvedAbsolute = isAbsolute;\r\n        if (isAbsolute && resolvedDevice.length > 0) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // At this point the path should be resolved to a full absolute path,\r\n    // but handle relative paths to be safe (might happen when process.cwd()\r\n    // fails)\r\n\r\n    // Normalize the tail path\r\n    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\',\r\n                                   isPathSeparator);\r\n\r\n    return resolvedAbsolute ?\r\n      `${resolvedDevice}\\\\${resolvedTail}` :\r\n      `${resolvedDevice}${resolvedTail}` || '.';\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  normalize(path) {\r\n    validateString(path, 'path');\r\n    const len = path.length;\r\n    if (len === 0)\r\n      return '.';\r\n    let rootEnd = 0;\r\n    let device;\r\n    let isAbsolute = false;\r\n    const code = StringPrototypeCharCodeAt(path, 0);\r\n\r\n    // Try to match a root\r\n    if (len === 1) {\r\n      // `path` contains just a single char, exit early to avoid\r\n      // unnecessary work\r\n      return isPosixPathSeparator(code) ? '\\\\' : path;\r\n    }\r\n    if (isPathSeparator(code)) {\r\n      // Possible UNC root\r\n\r\n      // If we started with a separator, we know we at least have an absolute\r\n      // path of some kind (UNC or otherwise)\r\n      isAbsolute = true;\r\n\r\n      if (isPathSeparator(StringPrototypeCharCodeAt(path, 1))) {\r\n        // Matched double path separator at beginning\r\n        let j = 2;\r\n        let last = j;\r\n        // Match 1 or more non-path separators\r\n        while (j < len &&\r\n               !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n          j++;\r\n        }\r\n        if (j < len && j !== last) {\r\n          const firstPart = StringPrototypeSlice(path, last, j);\r\n          // Matched!\r\n          last = j;\r\n          // Match 1 or more path separators\r\n          while (j < len &&\r\n                 isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n            j++;\r\n          }\r\n          if (j < len && j !== last) {\r\n            // Matched!\r\n            last = j;\r\n            // Match 1 or more non-path separators\r\n            while (j < len &&\r\n                   !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n              j++;\r\n            }\r\n            if (j === len) {\r\n              // We matched a UNC root only\r\n              // Return the normalized version of the UNC root since there\r\n              // is nothing left to process\r\n              return `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path, last)}\\\\`;\r\n            }\r\n            if (j !== last) {\r\n              // We matched a UNC root with leftovers\r\n              device =\r\n                `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path, last, j)}`;\r\n              rootEnd = j;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        rootEnd = 1;\r\n      }\r\n    } else if (isWindowsDeviceRoot(code) &&\r\n               StringPrototypeCharCodeAt(path, 1) === CHAR_COLON) {\r\n      // Possible device root\r\n      device = StringPrototypeSlice(path, 0, 2);\r\n      rootEnd = 2;\r\n      if (len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path, 2))) {\r\n        // Treat separator following drive name as an absolute path\r\n        // indicator\r\n        isAbsolute = true;\r\n        rootEnd = 3;\r\n      }\r\n    }\r\n\r\n    let tail = rootEnd < len ?\r\n      normalizeString(StringPrototypeSlice(path, rootEnd),\r\n                      !isAbsolute, '\\\\', isPathSeparator) :\r\n      '';\r\n    if (tail.length === 0 && !isAbsolute)\r\n      tail = '.';\r\n    if (tail.length > 0 &&\r\n        isPathSeparator(StringPrototypeCharCodeAt(path, len - 1)))\r\n      tail += '\\\\';\r\n    if (device === undefined) {\r\n      return isAbsolute ? `\\\\${tail}` : tail;\r\n    }\r\n    return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`;\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {boolean}\r\n   */\r\n  isAbsolute(path) {\r\n    validateString(path, 'path');\r\n    const len = path.length;\r\n    if (len === 0)\r\n      return false;\r\n\r\n    const code = StringPrototypeCharCodeAt(path, 0);\r\n    return isPathSeparator(code) ||\r\n      // Possible device root\r\n      (len > 2 &&\r\n      isWindowsDeviceRoot(code) &&\r\n      StringPrototypeCharCodeAt(path, 1) === CHAR_COLON &&\r\n      isPathSeparator(StringPrototypeCharCodeAt(path, 2)));\r\n  },\r\n\r\n  /**\r\n   * @param {...string} args\r\n   * @returns {string}\r\n   */\r\n  join(...args) {\r\n    if (args.length === 0)\r\n      return '.';\r\n\r\n    let joined;\r\n    let firstPart;\r\n    for (let i = 0; i < args.length; ++i) {\r\n      const arg = args[i];\r\n      validateString(arg, 'path');\r\n      if (arg.length > 0) {\r\n        if (joined === undefined)\r\n          joined = firstPart = arg;\r\n        else\r\n          joined += `\\\\${arg}`;\r\n      }\r\n    }\r\n\r\n    if (joined === undefined)\r\n      return '.';\r\n\r\n    // Make sure that the joined path doesn't start with two slashes, because\r\n    // normalize() will mistake it for a UNC path then.\r\n    //\r\n    // This step is skipped when it is very clear that the user actually\r\n    // intended to point at a UNC path. This is assumed when the first\r\n    // non-empty string arguments starts with exactly two slashes followed by\r\n    // at least one more non-slash character.\r\n    //\r\n    // Note that for normalize() to treat a path as a UNC path it needs to\r\n    // have at least 2 components, so we don't filter for that here.\r\n    // This means that the user can use join to construct UNC paths from\r\n    // a server name and a share name; for example:\r\n    //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\r\n    let needsReplace = true;\r\n    let slashCount = 0;\r\n    if (isPathSeparator(StringPrototypeCharCodeAt(firstPart, 0))) {\r\n      ++slashCount;\r\n      const firstLen = firstPart.length;\r\n      if (firstLen > 1 &&\r\n          isPathSeparator(StringPrototypeCharCodeAt(firstPart, 1))) {\r\n        ++slashCount;\r\n        if (firstLen > 2) {\r\n          if (isPathSeparator(StringPrototypeCharCodeAt(firstPart, 2)))\r\n            ++slashCount;\r\n          else {\r\n            // We matched a UNC path in the first part\r\n            needsReplace = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (needsReplace) {\r\n      // Find any more consecutive slashes we need to replace\r\n      while (slashCount < joined.length &&\r\n             isPathSeparator(StringPrototypeCharCodeAt(joined, slashCount))) {\r\n        slashCount++;\r\n      }\r\n\r\n      // Replace the slashes if needed\r\n      if (slashCount >= 2)\r\n        joined = `\\\\${StringPrototypeSlice(joined, slashCount)}`;\r\n    }\r\n\r\n    return win32.normalize(joined);\r\n  },\r\n\r\n  /**\r\n   * It will solve the relative path from `from` to `to`, for instance\r\n   * from = 'C:\\\\orandea\\\\test\\\\aaa'\r\n   * to = 'C:\\\\orandea\\\\impl\\\\bbb'\r\n   * The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\r\n   * @param {string} from\r\n   * @param {string} to\r\n   * @returns {string}\r\n   */\r\n  relative(from, to) {\r\n    validateString(from, 'from');\r\n    validateString(to, 'to');\r\n\r\n    if (from === to)\r\n      return '';\r\n\r\n    const fromOrig = win32.resolve(from);\r\n    const toOrig = win32.resolve(to);\r\n\r\n    if (fromOrig === toOrig)\r\n      return '';\r\n\r\n    from = StringPrototypeToLowerCase(fromOrig);\r\n    to = StringPrototypeToLowerCase(toOrig);\r\n\r\n    if (from === to)\r\n      return '';\r\n\r\n    // Trim any leading backslashes\r\n    let fromStart = 0;\r\n    while (fromStart < from.length &&\r\n           StringPrototypeCharCodeAt(from, fromStart) === CHAR_BACKWARD_SLASH) {\r\n      fromStart++;\r\n    }\r\n    // Trim trailing backslashes (applicable to UNC paths only)\r\n    let fromEnd = from.length;\r\n    while (\r\n      fromEnd - 1 > fromStart &&\r\n      StringPrototypeCharCodeAt(from, fromEnd - 1) === CHAR_BACKWARD_SLASH\r\n    ) {\r\n      fromEnd--;\r\n    }\r\n    const fromLen = fromEnd - fromStart;\r\n\r\n    // Trim any leading backslashes\r\n    let toStart = 0;\r\n    while (toStart < to.length &&\r\n           StringPrototypeCharCodeAt(to, toStart) === CHAR_BACKWARD_SLASH) {\r\n      toStart++;\r\n    }\r\n    // Trim trailing backslashes (applicable to UNC paths only)\r\n    let toEnd = to.length;\r\n    while (toEnd - 1 > toStart &&\r\n           StringPrototypeCharCodeAt(to, toEnd - 1) === CHAR_BACKWARD_SLASH) {\r\n      toEnd--;\r\n    }\r\n    const toLen = toEnd - toStart;\r\n\r\n    // Compare paths to find the longest common path from root\r\n    const length = fromLen < toLen ? fromLen : toLen;\r\n    let lastCommonSep = -1;\r\n    let i = 0;\r\n    for (; i < length; i++) {\r\n      const fromCode = StringPrototypeCharCodeAt(from, fromStart + i);\r\n      if (fromCode !== StringPrototypeCharCodeAt(to, toStart + i))\r\n        break;\r\n      else if (fromCode === CHAR_BACKWARD_SLASH)\r\n        lastCommonSep = i;\r\n    }\r\n\r\n    // We found a mismatch before the first common path separator was seen, so\r\n    // return the original `to`.\r\n    if (i !== length) {\r\n      if (lastCommonSep === -1)\r\n        return toOrig;\r\n    } else {\r\n      if (toLen > length) {\r\n        if (StringPrototypeCharCodeAt(to, toStart + i) ===\r\n            CHAR_BACKWARD_SLASH) {\r\n          // We get here if `from` is the exact base path for `to`.\r\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\r\n          return StringPrototypeSlice(toOrig, toStart + i + 1);\r\n        }\r\n        if (i === 2) {\r\n          // We get here if `from` is the device root.\r\n          // For example: from='C:\\\\'; to='C:\\\\foo'\r\n          return StringPrototypeSlice(toOrig, toStart + i);\r\n        }\r\n      }\r\n      if (fromLen > length) {\r\n        if (StringPrototypeCharCodeAt(from, fromStart + i) ===\r\n            CHAR_BACKWARD_SLASH) {\r\n          // We get here if `to` is the exact base path for `from`.\r\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\r\n          lastCommonSep = i;\r\n        } else if (i === 2) {\r\n          // We get here if `to` is the device root.\r\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\r\n          lastCommonSep = 3;\r\n        }\r\n      }\r\n      if (lastCommonSep === -1)\r\n        lastCommonSep = 0;\r\n    }\r\n\r\n    let out = '';\r\n    // Generate the relative path based on the path difference between `to` and\r\n    // `from`\r\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\r\n      if (i === fromEnd ||\r\n          StringPrototypeCharCodeAt(from, i) === CHAR_BACKWARD_SLASH) {\r\n        out += out.length === 0 ? '..' : '\\\\..';\r\n      }\r\n    }\r\n\r\n    toStart += lastCommonSep;\r\n\r\n    // Lastly, append the rest of the destination (`to`) path that comes after\r\n    // the common path parts\r\n    if (out.length > 0)\r\n      return `${out}${StringPrototypeSlice(toOrig, toStart, toEnd)}`;\r\n\r\n    if (StringPrototypeCharCodeAt(toOrig, toStart) === CHAR_BACKWARD_SLASH)\r\n      ++toStart;\r\n    return StringPrototypeSlice(toOrig, toStart, toEnd);\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  toNamespacedPath(path) {\r\n    // Note: this will *probably* throw somewhere.\r\n    if (typeof path !== 'string' || path.length === 0)\r\n      return path;\r\n\r\n    const resolvedPath = win32.resolve(path);\r\n\r\n    if (resolvedPath.length <= 2)\r\n      return path;\r\n\r\n    if (StringPrototypeCharCodeAt(resolvedPath, 0) === CHAR_BACKWARD_SLASH) {\r\n      // Possible UNC root\r\n      if (StringPrototypeCharCodeAt(resolvedPath, 1) === CHAR_BACKWARD_SLASH) {\r\n        const code = StringPrototypeCharCodeAt(resolvedPath, 2);\r\n        if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\r\n          // Matched non-long UNC root, convert the path to a long UNC path\r\n          return `\\\\\\\\?\\\\UNC\\\\${StringPrototypeSlice(resolvedPath, 2)}`;\r\n        }\r\n      }\r\n    } else if (\r\n      isWindowsDeviceRoot(StringPrototypeCharCodeAt(resolvedPath, 0)) &&\r\n      StringPrototypeCharCodeAt(resolvedPath, 1) === CHAR_COLON &&\r\n      StringPrototypeCharCodeAt(resolvedPath, 2) === CHAR_BACKWARD_SLASH\r\n    ) {\r\n      // Matched device root, convert the path to a long UNC path\r\n      return `\\\\\\\\?\\\\${resolvedPath}`;\r\n    }\r\n\r\n    return resolvedPath;\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  dirname(path) {\r\n    validateString(path, 'path');\r\n    const len = path.length;\r\n    if (len === 0)\r\n      return '.';\r\n    let rootEnd = -1;\r\n    let offset = 0;\r\n    const code = StringPrototypeCharCodeAt(path, 0);\r\n\r\n    if (len === 1) {\r\n      // `path` contains just a path separator, exit early to avoid\r\n      // unnecessary work or a dot.\r\n      return isPathSeparator(code) ? path : '.';\r\n    }\r\n\r\n    // Try to match a root\r\n    if (isPathSeparator(code)) {\r\n      // Possible UNC root\r\n\r\n      rootEnd = offset = 1;\r\n\r\n      if (isPathSeparator(StringPrototypeCharCodeAt(path, 1))) {\r\n        // Matched double path separator at beginning\r\n        let j = 2;\r\n        let last = j;\r\n        // Match 1 or more non-path separators\r\n        while (j < len &&\r\n               !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n          j++;\r\n        }\r\n        if (j < len && j !== last) {\r\n          // Matched!\r\n          last = j;\r\n          // Match 1 or more path separators\r\n          while (j < len &&\r\n                 isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n            j++;\r\n          }\r\n          if (j < len && j !== last) {\r\n            // Matched!\r\n            last = j;\r\n            // Match 1 or more non-path separators\r\n            while (j < len &&\r\n                   !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n              j++;\r\n            }\r\n            if (j === len) {\r\n              // We matched a UNC root only\r\n              return path;\r\n            }\r\n            if (j !== last) {\r\n              // We matched a UNC root with leftovers\r\n\r\n              // Offset by 1 to include the separator after the UNC root to\r\n              // treat it as a \"normal root\" on top of a (UNC) root\r\n              rootEnd = offset = j + 1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    // Possible device root\r\n    } else if (isWindowsDeviceRoot(code) &&\r\n               StringPrototypeCharCodeAt(path, 1) === CHAR_COLON) {\r\n      rootEnd =\r\n        len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path, 2)) ? 3 : 2;\r\n      offset = rootEnd;\r\n    }\r\n\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n    for (let i = len - 1; i >= offset; --i) {\r\n      if (isPathSeparator(StringPrototypeCharCodeAt(path, i))) {\r\n        if (!matchedSlash) {\r\n          end = i;\r\n          break;\r\n        }\r\n      } else {\r\n        // We saw the first non-path separator\r\n        matchedSlash = false;\r\n      }\r\n    }\r\n\r\n    if (end === -1) {\r\n      if (rootEnd === -1)\r\n        return '.';\r\n\r\n      end = rootEnd;\r\n    }\r\n    return StringPrototypeSlice(path, 0, end);\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @param {string} [suffix]\r\n   * @returns {string}\r\n   */\r\n  basename(path, suffix) {\r\n    if (suffix !== undefined)\r\n      validateString(suffix, 'ext');\r\n    validateString(path, 'path');\r\n    let start = 0;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n\r\n    // Check for a drive letter prefix so as not to mistake the following\r\n    // path separator as an extra separator at the end of the path that can be\r\n    // disregarded\r\n    if (path.length >= 2 &&\r\n        isWindowsDeviceRoot(StringPrototypeCharCodeAt(path, 0)) &&\r\n        StringPrototypeCharCodeAt(path, 1) === CHAR_COLON) {\r\n      start = 2;\r\n    }\r\n\r\n    if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\r\n      if (suffix === path)\r\n        return '';\r\n      let extIdx = suffix.length - 1;\r\n      let firstNonSlashEnd = -1;\r\n      for (let i = path.length - 1; i >= start; --i) {\r\n        const code = StringPrototypeCharCodeAt(path, i);\r\n        if (isPathSeparator(code)) {\r\n          // If we reached a path separator that was not part of a set of path\r\n          // separators at the end of the string, stop now\r\n          if (!matchedSlash) {\r\n            start = i + 1;\r\n            break;\r\n          }\r\n        } else {\r\n          if (firstNonSlashEnd === -1) {\r\n            // We saw the first non-path separator, remember this index in case\r\n            // we need it if the extension ends up not matching\r\n            matchedSlash = false;\r\n            firstNonSlashEnd = i + 1;\r\n          }\r\n          if (extIdx >= 0) {\r\n            // Try to match the explicit extension\r\n            if (code === StringPrototypeCharCodeAt(suffix, extIdx)) {\r\n              if (--extIdx === -1) {\r\n                // We matched the extension, so mark this as the end of our path\r\n                // component\r\n                end = i;\r\n              }\r\n            } else {\r\n              // Extension does not match, so our result is the entire path\r\n              // component\r\n              extIdx = -1;\r\n              end = firstNonSlashEnd;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (start === end)\r\n        end = firstNonSlashEnd;\r\n      else if (end === -1)\r\n        end = path.length;\r\n      return StringPrototypeSlice(path, start, end);\r\n    }\r\n    for (let i = path.length - 1; i >= start; --i) {\r\n      if (isPathSeparator(StringPrototypeCharCodeAt(path, i))) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          start = i + 1;\r\n          break;\r\n        }\r\n      } else if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // path component\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n    }\r\n\r\n    if (end === -1)\r\n      return '';\r\n    return StringPrototypeSlice(path, start, end);\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  extname(path) {\r\n    validateString(path, 'path');\r\n    let start = 0;\r\n    let startDot = -1;\r\n    let startPart = 0;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n    // Track the state of characters (if any) we see before our first dot and\r\n    // after any path separator we find\r\n    let preDotState = 0;\r\n\r\n    // Check for a drive letter prefix so as not to mistake the following\r\n    // path separator as an extra separator at the end of the path that can be\r\n    // disregarded\r\n\r\n    if (path.length >= 2 &&\r\n        StringPrototypeCharCodeAt(path, 1) === CHAR_COLON &&\r\n        isWindowsDeviceRoot(StringPrototypeCharCodeAt(path, 0))) {\r\n      start = startPart = 2;\r\n    }\r\n\r\n    for (let i = path.length - 1; i >= start; --i) {\r\n      const code = StringPrototypeCharCodeAt(path, i);\r\n      if (isPathSeparator(code)) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          startPart = i + 1;\r\n          break;\r\n        }\r\n        continue;\r\n      }\r\n      if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // extension\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n      if (code === CHAR_DOT) {\r\n        // If this is our first dot, mark it as the start of our extension\r\n        if (startDot === -1)\r\n          startDot = i;\r\n        else if (preDotState !== 1)\r\n          preDotState = 1;\r\n      } else if (startDot !== -1) {\r\n        // We saw a non-dot and non-path separator before our dot, so we should\r\n        // have a good chance at having a non-empty extension\r\n        preDotState = -1;\r\n      }\r\n    }\r\n\r\n    if (startDot === -1 ||\r\n        end === -1 ||\r\n        // We saw a non-dot character immediately before the dot\r\n        preDotState === 0 ||\r\n        // The (right-most) trimmed path component is exactly '..'\r\n        (preDotState === 1 &&\r\n         startDot === end - 1 &&\r\n         startDot === startPart + 1)) {\r\n      return '';\r\n    }\r\n    return StringPrototypeSlice(path, startDot, end);\r\n  },\r\n\r\n  format: FunctionPrototypeBind(_format, null, '\\\\'),\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {{\r\n   *  dir: string;\r\n   *  root: string;\r\n   *  base: string;\r\n   *  name: string;\r\n   *  ext: string;\r\n   *  }}\r\n   */\r\n  parse(path) {\r\n    validateString(path, 'path');\r\n\r\n    const ret = { root: '', dir: '', base: '', ext: '', name: '' };\r\n    if (path.length === 0)\r\n      return ret;\r\n\r\n    const len = path.length;\r\n    let rootEnd = 0;\r\n    let code = StringPrototypeCharCodeAt(path, 0);\r\n\r\n    if (len === 1) {\r\n      if (isPathSeparator(code)) {\r\n        // `path` contains just a path separator, exit early to avoid\r\n        // unnecessary work\r\n        ret.root = ret.dir = path;\r\n        return ret;\r\n      }\r\n      ret.base = ret.name = path;\r\n      return ret;\r\n    }\r\n    // Try to match a root\r\n    if (isPathSeparator(code)) {\r\n      // Possible UNC root\r\n\r\n      rootEnd = 1;\r\n      if (isPathSeparator(StringPrototypeCharCodeAt(path, 1))) {\r\n        // Matched double path separator at beginning\r\n        let j = 2;\r\n        let last = j;\r\n        // Match 1 or more non-path separators\r\n        while (j < len &&\r\n               !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n          j++;\r\n        }\r\n        if (j < len && j !== last) {\r\n          // Matched!\r\n          last = j;\r\n          // Match 1 or more path separators\r\n          while (j < len &&\r\n                 isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n            j++;\r\n          }\r\n          if (j < len && j !== last) {\r\n            // Matched!\r\n            last = j;\r\n            // Match 1 or more non-path separators\r\n            while (j < len &&\r\n                   !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n              j++;\r\n            }\r\n            if (j === len) {\r\n              // We matched a UNC root only\r\n              rootEnd = j;\r\n            } else if (j !== last) {\r\n              // We matched a UNC root with leftovers\r\n              rootEnd = j + 1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (isWindowsDeviceRoot(code) &&\r\n               StringPrototypeCharCodeAt(path, 1) === CHAR_COLON) {\r\n      // Possible device root\r\n      if (len <= 2) {\r\n        // `path` contains just a drive root, exit early to avoid\r\n        // unnecessary work\r\n        ret.root = ret.dir = path;\r\n        return ret;\r\n      }\r\n      rootEnd = 2;\r\n      if (isPathSeparator(StringPrototypeCharCodeAt(path, 2))) {\r\n        if (len === 3) {\r\n          // `path` contains just a drive root, exit early to avoid\r\n          // unnecessary work\r\n          ret.root = ret.dir = path;\r\n          return ret;\r\n        }\r\n        rootEnd = 3;\r\n      }\r\n    }\r\n    if (rootEnd > 0)\r\n      ret.root = StringPrototypeSlice(path, 0, rootEnd);\r\n\r\n    let startDot = -1;\r\n    let startPart = rootEnd;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n    let i = path.length - 1;\r\n\r\n    // Track the state of characters (if any) we see before our first dot and\r\n    // after any path separator we find\r\n    let preDotState = 0;\r\n\r\n    // Get non-dir info\r\n    for (; i >= rootEnd; --i) {\r\n      code = StringPrototypeCharCodeAt(path, i);\r\n      if (isPathSeparator(code)) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          startPart = i + 1;\r\n          break;\r\n        }\r\n        continue;\r\n      }\r\n      if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // extension\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n      if (code === CHAR_DOT) {\r\n        // If this is our first dot, mark it as the start of our extension\r\n        if (startDot === -1)\r\n          startDot = i;\r\n        else if (preDotState !== 1)\r\n          preDotState = 1;\r\n      } else if (startDot !== -1) {\r\n        // We saw a non-dot and non-path separator before our dot, so we should\r\n        // have a good chance at having a non-empty extension\r\n        preDotState = -1;\r\n      }\r\n    }\r\n\r\n    if (end !== -1) {\r\n      if (startDot === -1 ||\r\n          // We saw a non-dot character immediately before the dot\r\n          preDotState === 0 ||\r\n          // The (right-most) trimmed path component is exactly '..'\r\n          (preDotState === 1 &&\r\n           startDot === end - 1 &&\r\n           startDot === startPart + 1)) {\r\n        ret.base = ret.name = StringPrototypeSlice(path, startPart, end);\r\n      } else {\r\n        ret.name = StringPrototypeSlice(path, startPart, startDot);\r\n        ret.base = StringPrototypeSlice(path, startPart, end);\r\n        ret.ext = StringPrototypeSlice(path, startDot, end);\r\n      }\r\n    }\r\n\r\n    // If the directory is the root, use the entire root as the `dir` including\r\n    // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\r\n    // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\r\n    if (startPart > 0 && startPart !== rootEnd)\r\n      ret.dir = StringPrototypeSlice(path, 0, startPart - 1);\r\n    else\r\n      ret.dir = ret.root;\r\n\r\n    return ret;\r\n  },\r\n\r\n  sep: '\\\\',\r\n  delimiter: ';',\r\n  win32: null,\r\n  posix: null,\r\n};\r\n\r\nconst posixCwd = (() => {\r\n  if (platformIsWin32) {\r\n    // Converts Windows' backslash path separators to POSIX forward slashes\r\n    // and truncates any drive indicator\r\n    const regexp = /\\\\/g;\r\n    return () => {\r\n      const cwd = StringPrototypeReplace(process.cwd(), regexp, '/');\r\n      return StringPrototypeSlice(cwd, StringPrototypeIndexOf(cwd, '/'));\r\n    };\r\n  }\r\n\r\n  // We're already on POSIX, no need for any transformations\r\n  return () => process.cwd();\r\n})();\r\n\r\nconst posix = {\r\n  /**\r\n   * path.resolve([from ...], to)\r\n   * @param {...string} args\r\n   * @returns {string}\r\n   */\r\n  resolve(...args) {\r\n    let resolvedPath = '';\r\n    let resolvedAbsolute = false;\r\n\r\n    for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\r\n      const path = i >= 0 ? args[i] : posixCwd();\r\n      validateString(path, `paths[${i}]`);\r\n\r\n      // Skip empty entries\r\n      if (path.length === 0) {\r\n        continue;\r\n      }\r\n\r\n      resolvedPath = `${path}/${resolvedPath}`;\r\n      resolvedAbsolute =\r\n        StringPrototypeCharCodeAt(path, 0) === CHAR_FORWARD_SLASH;\r\n    }\r\n\r\n    // At this point the path should be resolved to a full absolute path, but\r\n    // handle relative paths to be safe (might happen when process.cwd() fails)\r\n\r\n    // Normalize the path\r\n    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/',\r\n                                   isPosixPathSeparator);\r\n\r\n    if (resolvedAbsolute) {\r\n      return `/${resolvedPath}`;\r\n    }\r\n    return resolvedPath.length > 0 ? resolvedPath : '.';\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  normalize(path) {\r\n    validateString(path, 'path');\r\n\r\n    if (path.length === 0)\r\n      return '.';\r\n\r\n    const isAbsolute =\r\n      StringPrototypeCharCodeAt(path, 0) === CHAR_FORWARD_SLASH;\r\n    const trailingSeparator =\r\n      StringPrototypeCharCodeAt(path, path.length - 1) === CHAR_FORWARD_SLASH;\r\n\r\n    // Normalize the path\r\n    path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\r\n\r\n    if (path.length === 0) {\r\n      if (isAbsolute)\r\n        return '/';\r\n      return trailingSeparator ? './' : '.';\r\n    }\r\n    if (trailingSeparator)\r\n      path += '/';\r\n\r\n    return isAbsolute ? `/${path}` : path;\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {boolean}\r\n   */\r\n  isAbsolute(path) {\r\n    validateString(path, 'path');\r\n    return path.length > 0 &&\r\n           StringPrototypeCharCodeAt(path, 0) === CHAR_FORWARD_SLASH;\r\n  },\r\n\r\n  /**\r\n   * @param {...string} args\r\n   * @returns {string}\r\n   */\r\n  join(...args) {\r\n    if (args.length === 0)\r\n      return '.';\r\n    let joined;\r\n    for (let i = 0; i < args.length; ++i) {\r\n      const arg = args[i];\r\n      validateString(arg, 'path');\r\n      if (arg.length > 0) {\r\n        if (joined === undefined)\r\n          joined = arg;\r\n        else\r\n          joined += `/${arg}`;\r\n      }\r\n    }\r\n    if (joined === undefined)\r\n      return '.';\r\n    return posix.normalize(joined);\r\n  },\r\n\r\n  /**\r\n   * @param {string} from\r\n   * @param {string} to\r\n   * @returns {string}\r\n   */\r\n  relative(from, to) {\r\n    validateString(from, 'from');\r\n    validateString(to, 'to');\r\n\r\n    if (from === to)\r\n      return '';\r\n\r\n    // Trim leading forward slashes.\r\n    from = posix.resolve(from);\r\n    to = posix.resolve(to);\r\n\r\n    if (from === to)\r\n      return '';\r\n\r\n    const fromStart = 1;\r\n    const fromEnd = from.length;\r\n    const fromLen = fromEnd - fromStart;\r\n    const toStart = 1;\r\n    const toLen = to.length - toStart;\r\n\r\n    // Compare paths to find the longest common path from root\r\n    const length = (fromLen < toLen ? fromLen : toLen);\r\n    let lastCommonSep = -1;\r\n    let i = 0;\r\n    for (; i < length; i++) {\r\n      const fromCode = StringPrototypeCharCodeAt(from, fromStart + i);\r\n      if (fromCode !== StringPrototypeCharCodeAt(to, toStart + i))\r\n        break;\r\n      else if (fromCode === CHAR_FORWARD_SLASH)\r\n        lastCommonSep = i;\r\n    }\r\n    if (i === length) {\r\n      if (toLen > length) {\r\n        if (StringPrototypeCharCodeAt(to, toStart + i) === CHAR_FORWARD_SLASH) {\r\n          // We get here if `from` is the exact base path for `to`.\r\n          // For example: from='/foo/bar'; to='/foo/bar/baz'\r\n          return StringPrototypeSlice(to, toStart + i + 1);\r\n        }\r\n        if (i === 0) {\r\n          // We get here if `from` is the root\r\n          // For example: from='/'; to='/foo'\r\n          return StringPrototypeSlice(to, toStart + i);\r\n        }\r\n      } else if (fromLen > length) {\r\n        if (StringPrototypeCharCodeAt(from, fromStart + i) ===\r\n            CHAR_FORWARD_SLASH) {\r\n          // We get here if `to` is the exact base path for `from`.\r\n          // For example: from='/foo/bar/baz'; to='/foo/bar'\r\n          lastCommonSep = i;\r\n        } else if (i === 0) {\r\n          // We get here if `to` is the root.\r\n          // For example: from='/foo/bar'; to='/'\r\n          lastCommonSep = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    let out = '';\r\n    // Generate the relative path based on the path difference between `to`\r\n    // and `from`.\r\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\r\n      if (i === fromEnd ||\r\n          StringPrototypeCharCodeAt(from, i) === CHAR_FORWARD_SLASH) {\r\n        out += out.length === 0 ? '..' : '/..';\r\n      }\r\n    }\r\n\r\n    // Lastly, append the rest of the destination (`to`) path that comes after\r\n    // the common path parts.\r\n    return `${out}${StringPrototypeSlice(to, toStart + lastCommonSep)}`;\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  toNamespacedPath(path) {\r\n    // Non-op on posix systems\r\n    return path;\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  dirname(path) {\r\n    validateString(path, 'path');\r\n    if (path.length === 0)\r\n      return '.';\r\n    const hasRoot = StringPrototypeCharCodeAt(path, 0) === CHAR_FORWARD_SLASH;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n    for (let i = path.length - 1; i >= 1; --i) {\r\n      if (StringPrototypeCharCodeAt(path, i) === CHAR_FORWARD_SLASH) {\r\n        if (!matchedSlash) {\r\n          end = i;\r\n          break;\r\n        }\r\n      } else {\r\n        // We saw the first non-path separator\r\n        matchedSlash = false;\r\n      }\r\n    }\r\n\r\n    if (end === -1)\r\n      return hasRoot ? '/' : '.';\r\n    if (hasRoot && end === 1)\r\n      return '//';\r\n    return StringPrototypeSlice(path, 0, end);\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @param {string} [suffix]\r\n   * @returns {string}\r\n   */\r\n  basename(path, suffix) {\r\n    if (suffix !== undefined)\r\n      validateString(suffix, 'ext');\r\n    validateString(path, 'path');\r\n\r\n    let start = 0;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n\r\n    if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\r\n      if (suffix === path)\r\n        return '';\r\n      let extIdx = suffix.length - 1;\r\n      let firstNonSlashEnd = -1;\r\n      for (let i = path.length - 1; i >= 0; --i) {\r\n        const code = StringPrototypeCharCodeAt(path, i);\r\n        if (code === CHAR_FORWARD_SLASH) {\r\n          // If we reached a path separator that was not part of a set of path\r\n          // separators at the end of the string, stop now\r\n          if (!matchedSlash) {\r\n            start = i + 1;\r\n            break;\r\n          }\r\n        } else {\r\n          if (firstNonSlashEnd === -1) {\r\n            // We saw the first non-path separator, remember this index in case\r\n            // we need it if the extension ends up not matching\r\n            matchedSlash = false;\r\n            firstNonSlashEnd = i + 1;\r\n          }\r\n          if (extIdx >= 0) {\r\n            // Try to match the explicit extension\r\n            if (code === StringPrototypeCharCodeAt(suffix, extIdx)) {\r\n              if (--extIdx === -1) {\r\n                // We matched the extension, so mark this as the end of our path\r\n                // component\r\n                end = i;\r\n              }\r\n            } else {\r\n              // Extension does not match, so our result is the entire path\r\n              // component\r\n              extIdx = -1;\r\n              end = firstNonSlashEnd;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (start === end)\r\n        end = firstNonSlashEnd;\r\n      else if (end === -1)\r\n        end = path.length;\r\n      return StringPrototypeSlice(path, start, end);\r\n    }\r\n    for (let i = path.length - 1; i >= 0; --i) {\r\n      if (StringPrototypeCharCodeAt(path, i) === CHAR_FORWARD_SLASH) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          start = i + 1;\r\n          break;\r\n        }\r\n      } else if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // path component\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n    }\r\n\r\n    if (end === -1)\r\n      return '';\r\n    return StringPrototypeSlice(path, start, end);\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  extname(path) {\r\n    validateString(path, 'path');\r\n    let startDot = -1;\r\n    let startPart = 0;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n    // Track the state of characters (if any) we see before our first dot and\r\n    // after any path separator we find\r\n    let preDotState = 0;\r\n    for (let i = path.length - 1; i >= 0; --i) {\r\n      const code = StringPrototypeCharCodeAt(path, i);\r\n      if (code === CHAR_FORWARD_SLASH) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          startPart = i + 1;\r\n          break;\r\n        }\r\n        continue;\r\n      }\r\n      if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // extension\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n      if (code === CHAR_DOT) {\r\n        // If this is our first dot, mark it as the start of our extension\r\n        if (startDot === -1)\r\n          startDot = i;\r\n        else if (preDotState !== 1)\r\n          preDotState = 1;\r\n      } else if (startDot !== -1) {\r\n        // We saw a non-dot and non-path separator before our dot, so we should\r\n        // have a good chance at having a non-empty extension\r\n        preDotState = -1;\r\n      }\r\n    }\r\n\r\n    if (startDot === -1 ||\r\n        end === -1 ||\r\n        // We saw a non-dot character immediately before the dot\r\n        preDotState === 0 ||\r\n        // The (right-most) trimmed path component is exactly '..'\r\n        (preDotState === 1 &&\r\n         startDot === end - 1 &&\r\n         startDot === startPart + 1)) {\r\n      return '';\r\n    }\r\n    return StringPrototypeSlice(path, startDot, end);\r\n  },\r\n\r\n  format: FunctionPrototypeBind(_format, null, '/'),\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {{\r\n   *   dir: string;\r\n   *   root: string;\r\n   *   base: string;\r\n   *   name: string;\r\n   *   ext: string;\r\n   *   }}\r\n   */\r\n  parse(path) {\r\n    validateString(path, 'path');\r\n\r\n    const ret = { root: '', dir: '', base: '', ext: '', name: '' };\r\n    if (path.length === 0)\r\n      return ret;\r\n    const isAbsolute =\r\n      StringPrototypeCharCodeAt(path, 0) === CHAR_FORWARD_SLASH;\r\n    let start;\r\n    if (isAbsolute) {\r\n      ret.root = '/';\r\n      start = 1;\r\n    } else {\r\n      start = 0;\r\n    }\r\n    let startDot = -1;\r\n    let startPart = 0;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n    let i = path.length - 1;\r\n\r\n    // Track the state of characters (if any) we see before our first dot and\r\n    // after any path separator we find\r\n    let preDotState = 0;\r\n\r\n    // Get non-dir info\r\n    for (; i >= start; --i) {\r\n      const code = StringPrototypeCharCodeAt(path, i);\r\n      if (code === CHAR_FORWARD_SLASH) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          startPart = i + 1;\r\n          break;\r\n        }\r\n        continue;\r\n      }\r\n      if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // extension\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n      if (code === CHAR_DOT) {\r\n        // If this is our first dot, mark it as the start of our extension\r\n        if (startDot === -1)\r\n          startDot = i;\r\n        else if (preDotState !== 1)\r\n          preDotState = 1;\r\n      } else if (startDot !== -1) {\r\n        // We saw a non-dot and non-path separator before our dot, so we should\r\n        // have a good chance at having a non-empty extension\r\n        preDotState = -1;\r\n      }\r\n    }\r\n\r\n    if (end !== -1) {\r\n      const start = startPart === 0 && isAbsolute ? 1 : startPart;\r\n      if (startDot === -1 ||\r\n          // We saw a non-dot character immediately before the dot\r\n          preDotState === 0 ||\r\n          // The (right-most) trimmed path component is exactly '..'\r\n          (preDotState === 1 &&\r\n          startDot === end - 1 &&\r\n          startDot === startPart + 1)) {\r\n        ret.base = ret.name = StringPrototypeSlice(path, start, end);\r\n      } else {\r\n        ret.name = StringPrototypeSlice(path, start, startDot);\r\n        ret.base = StringPrototypeSlice(path, start, end);\r\n        ret.ext = StringPrototypeSlice(path, startDot, end);\r\n      }\r\n    }\r\n\r\n    if (startPart > 0)\r\n      ret.dir = StringPrototypeSlice(path, 0, startPart - 1);\r\n    else if (isAbsolute)\r\n      ret.dir = '/';\r\n\r\n    return ret;\r\n  },\r\n\r\n  sep: '/',\r\n  delimiter: ':',\r\n  win32: null,\r\n  posix: null,\r\n};\r\n\r\nposix.win32 = win32.win32 = win32;\r\nposix.posix = win32.posix = posix;\r\n\r\n// Legacy internal API, docs-only deprecated: DEP0080\r\nwin32._makeLong = win32.toNamespacedPath;\r\nposix._makeLong = posix.toNamespacedPath;\r\n\r\nmodule.exports = platformIsWin32 ? win32 : posix;\r\n"
  },
  "31": {
    "metadata": {
      "scriptId": "31",
      "url": "node:querystring",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 484,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "577391ab3f70ba30bde6c0a37a934d7feb60120d795cbe4c60dc84dbf9a74814",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 15067,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:querystring"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// Query String Utilities\r\n\r\n'use strict';\r\n\r\nconst {\r\n  Array,\r\n  ArrayIsArray,\r\n  Int8Array,\r\n  MathAbs,\r\n  NumberIsFinite,\r\n  ObjectKeys,\r\n  String,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeSlice,\r\n  decodeURIComponent,\r\n} = primordials;\r\n\r\nconst { Buffer } = require('buffer');\r\nconst {\r\n  encodeStr,\r\n  hexTable,\r\n  isHexTable,\r\n} = require('internal/querystring');\r\nconst QueryString = module.exports = {\r\n  unescapeBuffer,\r\n  // `unescape()` is a JS global, so we need to use a different local name\r\n  unescape: qsUnescape,\r\n\r\n  // `escape()` is a JS global, so we need to use a different local name\r\n  escape: qsEscape,\r\n\r\n  stringify,\r\n  encode: stringify,\r\n\r\n  parse,\r\n  decode: parse,\r\n};\r\n\r\nconst unhexTable = new Int8Array([\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 0 - 15\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 16 - 31\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 32 - 47\r\n  +0, +1, +2, +3, +4, +5, +6, +7, +8, +9, -1, -1, -1, -1, -1, -1, // 48 - 63\r\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 64 - 79\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 80 - 95\r\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 96 - 111\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 112 - 127\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 128 ...\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  // ... 255\r\n]);\r\n/**\r\n * A safe fast alternative to decodeURIComponent\r\n * @param {string} s\r\n * @param {boolean} decodeSpaces\r\n * @returns {string}\r\n */\r\nfunction unescapeBuffer(s, decodeSpaces) {\r\n  const out = Buffer.allocUnsafe(s.length);\r\n  let index = 0;\r\n  let outIndex = 0;\r\n  let currentChar;\r\n  let nextChar;\r\n  let hexHigh;\r\n  let hexLow;\r\n  const maxLength = s.length - 2;\r\n  // Flag to know if some hex chars have been decoded\r\n  let hasHex = false;\r\n  while (index < s.length) {\r\n    currentChar = StringPrototypeCharCodeAt(s, index);\r\n    if (currentChar === 43 /* '+' */ && decodeSpaces) {\r\n      out[outIndex++] = 32; // ' '\r\n      index++;\r\n      continue;\r\n    }\r\n    if (currentChar === 37 /* '%' */ && index < maxLength) {\r\n      currentChar = StringPrototypeCharCodeAt(s, ++index);\r\n      hexHigh = unhexTable[currentChar];\r\n      if (!(hexHigh >= 0)) {\r\n        out[outIndex++] = 37; // '%'\r\n        continue;\r\n      } else {\r\n        nextChar = StringPrototypeCharCodeAt(s, ++index);\r\n        hexLow = unhexTable[nextChar];\r\n        if (!(hexLow >= 0)) {\r\n          out[outIndex++] = 37; // '%'\r\n          index--;\r\n        } else {\r\n          hasHex = true;\r\n          currentChar = hexHigh * 16 + hexLow;\r\n        }\r\n      }\r\n    }\r\n    out[outIndex++] = currentChar;\r\n    index++;\r\n  }\r\n  return hasHex ? out.slice(0, outIndex) : out;\r\n}\r\n\r\n/**\r\n * @param {string} s\r\n * @param {boolean} decodeSpaces\r\n * @returns {string}\r\n */\r\nfunction qsUnescape(s, decodeSpaces) {\r\n  try {\r\n    return decodeURIComponent(s);\r\n  } catch {\r\n    return QueryString.unescapeBuffer(s, decodeSpaces).toString();\r\n  }\r\n}\r\n\r\n\r\n// These characters do not need escaping when generating query strings:\r\n// ! - . _ ~\r\n// ' ( ) *\r\n// digits\r\n// alpha (uppercase)\r\n// alpha (lowercase)\r\nconst noEscape = new Int8Array([\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\r\n  0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 32 - 47\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 80 - 95\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0,  // 112 - 127\r\n]);\r\n\r\n/**\r\n * QueryString.escape() replaces encodeURIComponent()\r\n * @see https://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.4\r\n * @param {any} str\r\n * @returns {string}\r\n */\r\nfunction qsEscape(str) {\r\n  if (typeof str !== 'string') {\r\n    if (typeof str === 'object')\r\n      str = String(str);\r\n    else\r\n      str += '';\r\n  }\r\n\r\n  return encodeStr(str, noEscape, hexTable);\r\n}\r\n\r\n/**\r\n * @param {string | number | bigint | boolean | symbol | undefined | null} v\r\n * @returns {string}\r\n */\r\nfunction stringifyPrimitive(v) {\r\n  if (typeof v === 'string')\r\n    return v;\r\n  if (typeof v === 'number' && NumberIsFinite(v))\r\n    return '' + v;\r\n  if (typeof v === 'bigint')\r\n    return '' + v;\r\n  if (typeof v === 'boolean')\r\n    return v ? 'true' : 'false';\r\n  return '';\r\n}\r\n\r\n/**\r\n * @param {string | number | bigint | boolean} v\r\n * @param {(v: string) => string} encode\r\n * @returns {string}\r\n */\r\nfunction encodeStringified(v, encode) {\r\n  if (typeof v === 'string')\r\n    return (v.length ? encode(v) : '');\r\n  if (typeof v === 'number' && NumberIsFinite(v)) {\r\n    // Values >= 1e21 automatically switch to scientific notation which requires\r\n    // escaping due to the inclusion of a '+' in the output\r\n    return (MathAbs(v) < 1e21 ? '' + v : encode('' + v));\r\n  }\r\n  if (typeof v === 'bigint')\r\n    return '' + v;\r\n  if (typeof v === 'boolean')\r\n    return v ? 'true' : 'false';\r\n  return '';\r\n}\r\n\r\n/**\r\n * @param {string | number | boolean | null} v\r\n * @param {(v: string) => string} encode\r\n * @returns {string}\r\n */\r\nfunction encodeStringifiedCustom(v, encode) {\r\n  return encode(stringifyPrimitive(v));\r\n}\r\n\r\n/**\r\n * @param {Record<string, string | number | boolean\r\n * | ReadonlyArray<string | number | boolean> | null>} obj\r\n * @param {string} [sep]\r\n * @param {string} [eq]\r\n * @param {{ encodeURIComponent?: (v: string) => string }} [options]\r\n * @returns {string}\r\n */\r\nfunction stringify(obj, sep, eq, options) {\r\n  sep = sep || '&';\r\n  eq = eq || '=';\r\n\r\n  let encode = QueryString.escape;\r\n  if (options && typeof options.encodeURIComponent === 'function') {\r\n    encode = options.encodeURIComponent;\r\n  }\r\n  const convert =\r\n    (encode === qsEscape ? encodeStringified : encodeStringifiedCustom);\r\n\r\n  if (obj !== null && typeof obj === 'object') {\r\n    const keys = ObjectKeys(obj);\r\n    const len = keys.length;\r\n    let fields = '';\r\n    for (let i = 0; i < len; ++i) {\r\n      const k = keys[i];\r\n      const v = obj[k];\r\n      let ks = convert(k, encode);\r\n      ks += eq;\r\n\r\n      if (ArrayIsArray(v)) {\r\n        const vlen = v.length;\r\n        if (vlen === 0) continue;\r\n        if (fields)\r\n          fields += sep;\r\n        for (let j = 0; j < vlen; ++j) {\r\n          if (j)\r\n            fields += sep;\r\n          fields += ks;\r\n          fields += convert(v[j], encode);\r\n        }\r\n      } else {\r\n        if (fields)\r\n          fields += sep;\r\n        fields += ks;\r\n        fields += convert(v, encode);\r\n      }\r\n    }\r\n    return fields;\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * @param {string} str\r\n * @returns {number[]}\r\n */\r\nfunction charCodes(str) {\r\n  if (str.length === 0) return [];\r\n  if (str.length === 1) return [StringPrototypeCharCodeAt(str, 0)];\r\n  const ret = new Array(str.length);\r\n  for (let i = 0; i < str.length; ++i)\r\n    ret[i] = StringPrototypeCharCodeAt(str, i);\r\n  return ret;\r\n}\r\nconst defSepCodes = [38]; // &\r\nconst defEqCodes = [61]; // =\r\n\r\nfunction addKeyVal(obj, key, value, keyEncoded, valEncoded, decode) {\r\n  if (key.length > 0 && keyEncoded)\r\n    key = decodeStr(key, decode);\r\n  if (value.length > 0 && valEncoded)\r\n    value = decodeStr(value, decode);\r\n\r\n  if (obj[key] === undefined) {\r\n    obj[key] = value;\r\n  } else {\r\n    const curValue = obj[key];\r\n    // A simple Array-specific property check is enough here to\r\n    // distinguish from a string value and is faster and still safe\r\n    // since we are generating all of the values being assigned.\r\n    if (curValue.pop)\r\n      curValue[curValue.length] = value;\r\n    else\r\n      obj[key] = [curValue, value];\r\n  }\r\n}\r\n\r\n/**\r\n * Parse a key/val string.\r\n * @param {string} qs\r\n * @param {string} sep\r\n * @param {string} eq\r\n * @param {{\r\n *   maxKeys?: number;\r\n *   decodeURIComponent?(v: string): string;\r\n *   }} [options]\r\n * @returns {Record<string, string | string[]>}\r\n */\r\nfunction parse(qs, sep, eq, options) {\r\n  const obj = { __proto__: null };\r\n\r\n  if (typeof qs !== 'string' || qs.length === 0) {\r\n    return obj;\r\n  }\r\n\r\n  const sepCodes = (!sep ? defSepCodes : charCodes(String(sep)));\r\n  const eqCodes = (!eq ? defEqCodes : charCodes(String(eq)));\r\n  const sepLen = sepCodes.length;\r\n  const eqLen = eqCodes.length;\r\n\r\n  let pairs = 1000;\r\n  if (options && typeof options.maxKeys === 'number') {\r\n    // -1 is used in place of a value like Infinity for meaning\r\n    // \"unlimited pairs\" because of additional checks V8 (at least as of v5.4)\r\n    // has to do when using variables that contain values like Infinity. Since\r\n    // `pairs` is always decremented and checked explicitly for 0, -1 works\r\n    // effectively the same as Infinity, while providing a significant\r\n    // performance boost.\r\n    pairs = (options.maxKeys > 0 ? options.maxKeys : -1);\r\n  }\r\n\r\n  let decode = QueryString.unescape;\r\n  if (options && typeof options.decodeURIComponent === 'function') {\r\n    decode = options.decodeURIComponent;\r\n  }\r\n  const customDecode = (decode !== qsUnescape);\r\n\r\n  let lastPos = 0;\r\n  let sepIdx = 0;\r\n  let eqIdx = 0;\r\n  let key = '';\r\n  let value = '';\r\n  let keyEncoded = customDecode;\r\n  let valEncoded = customDecode;\r\n  const plusChar = (customDecode ? '%20' : ' ');\r\n  let encodeCheck = 0;\r\n  for (let i = 0; i < qs.length; ++i) {\r\n    const code = StringPrototypeCharCodeAt(qs, i);\r\n\r\n    // Try matching key/value pair separator (e.g. '&')\r\n    if (code === sepCodes[sepIdx]) {\r\n      if (++sepIdx === sepLen) {\r\n        // Key/value pair separator match!\r\n        const end = i - sepIdx + 1;\r\n        if (eqIdx < eqLen) {\r\n          // We didn't find the (entire) key/value separator\r\n          if (lastPos < end) {\r\n            // Treat the substring as part of the key instead of the value\r\n            key += StringPrototypeSlice(qs, lastPos, end);\r\n          } else if (key.length === 0) {\r\n            // We saw an empty substring between separators\r\n            if (--pairs === 0)\r\n              return obj;\r\n            lastPos = i + 1;\r\n            sepIdx = eqIdx = 0;\r\n            continue;\r\n          }\r\n        } else if (lastPos < end) {\r\n          value += StringPrototypeSlice(qs, lastPos, end);\r\n        }\r\n\r\n        addKeyVal(obj, key, value, keyEncoded, valEncoded, decode);\r\n\r\n        if (--pairs === 0)\r\n          return obj;\r\n        keyEncoded = valEncoded = customDecode;\r\n        key = value = '';\r\n        encodeCheck = 0;\r\n        lastPos = i + 1;\r\n        sepIdx = eqIdx = 0;\r\n      }\r\n    } else {\r\n      sepIdx = 0;\r\n      // Try matching key/value separator (e.g. '=') if we haven't already\r\n      if (eqIdx < eqLen) {\r\n        if (code === eqCodes[eqIdx]) {\r\n          if (++eqIdx === eqLen) {\r\n            // Key/value separator match!\r\n            const end = i - eqIdx + 1;\r\n            if (lastPos < end)\r\n              key += StringPrototypeSlice(qs, lastPos, end);\r\n            encodeCheck = 0;\r\n            lastPos = i + 1;\r\n          }\r\n          continue;\r\n        } else {\r\n          eqIdx = 0;\r\n          if (!keyEncoded) {\r\n            // Try to match an (valid) encoded byte once to minimize unnecessary\r\n            // calls to string decoding functions\r\n            if (code === 37/* % */) {\r\n              encodeCheck = 1;\r\n              continue;\r\n            } else if (encodeCheck > 0) {\r\n              if (isHexTable[code] === 1) {\r\n                if (++encodeCheck === 3)\r\n                  keyEncoded = true;\r\n                continue;\r\n              } else {\r\n                encodeCheck = 0;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (code === 43/* + */) {\r\n          if (lastPos < i)\r\n            key += StringPrototypeSlice(qs, lastPos, i);\r\n          key += plusChar;\r\n          lastPos = i + 1;\r\n          continue;\r\n        }\r\n      }\r\n      if (code === 43/* + */) {\r\n        if (lastPos < i)\r\n          value += StringPrototypeSlice(qs, lastPos, i);\r\n        value += plusChar;\r\n        lastPos = i + 1;\r\n      } else if (!valEncoded) {\r\n        // Try to match an (valid) encoded byte (once) to minimize unnecessary\r\n        // calls to string decoding functions\r\n        if (code === 37/* % */) {\r\n          encodeCheck = 1;\r\n        } else if (encodeCheck > 0) {\r\n          if (isHexTable[code] === 1) {\r\n            if (++encodeCheck === 3)\r\n              valEncoded = true;\r\n          } else {\r\n            encodeCheck = 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Deal with any leftover key or value data\r\n  if (lastPos < qs.length) {\r\n    if (eqIdx < eqLen)\r\n      key += StringPrototypeSlice(qs, lastPos);\r\n    else if (sepIdx < sepLen)\r\n      value += StringPrototypeSlice(qs, lastPos);\r\n  } else if (eqIdx === 0 && key.length === 0) {\r\n    // We ended on an empty substring\r\n    return obj;\r\n  }\r\n\r\n  addKeyVal(obj, key, value, keyEncoded, valEncoded, decode);\r\n\r\n  return obj;\r\n}\r\n\r\n\r\n/**\r\n * V8 does not optimize functions with try-catch blocks, so we isolate them here\r\n * to minimize the damage (Note: no longer true as of V8 5.4 -- but still will\r\n * not be inlined).\r\n * @param {string} s\r\n * @param {(v: string) => string} decoder\r\n * @returns {string}\r\n */\r\nfunction decodeStr(s, decoder) {\r\n  try {\r\n    return decoder(s);\r\n  } catch {\r\n    return QueryString.unescape(s, true);\r\n  }\r\n}\r\n"
  },
  "32": {
    "metadata": {
      "scriptId": "32",
      "url": "node:internal/process/task_queues",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 173,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "c7fdefcb4ea307b3a57830a80a6851717d37210c92f50b1bd6b5a46a5ca293b6",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4458,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/task_queues"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n  FunctionPrototypeBind,\r\n} = primordials;\r\n\r\nconst {\r\n  // For easy access to the nextTick state in the C++ land,\r\n  // and to avoid unnecessary calls into JS land.\r\n  tickInfo,\r\n  // Used to run V8's micro task queue.\r\n  runMicrotasks,\r\n  setTickCallback,\r\n  enqueueMicrotask,\r\n} = internalBinding('task_queue');\r\n\r\nconst {\r\n  setHasRejectionToWarn,\r\n  hasRejectionToWarn,\r\n  listenForRejections,\r\n  processPromiseRejections,\r\n} = require('internal/process/promises');\r\n\r\nconst {\r\n  getDefaultTriggerAsyncId,\r\n  newAsyncId,\r\n  initHooksExist,\r\n  destroyHooksExist,\r\n  emitInit,\r\n  emitBefore,\r\n  emitAfter,\r\n  emitDestroy,\r\n  symbols: { async_id_symbol, trigger_async_id_symbol },\r\n} = require('internal/async_hooks');\r\nconst FixedQueue = require('internal/fixed_queue');\r\n\r\nconst {\r\n  validateFunction,\r\n} = require('internal/validators');\r\n\r\nconst { AsyncResource } = require('async_hooks');\r\n\r\n// *Must* match Environment::TickInfo::Fields in src/env.h.\r\nconst kHasTickScheduled = 0;\r\n\r\nfunction hasTickScheduled() {\r\n  return tickInfo[kHasTickScheduled] === 1;\r\n}\r\n\r\nfunction setHasTickScheduled(value) {\r\n  tickInfo[kHasTickScheduled] = value ? 1 : 0;\r\n}\r\n\r\nconst queue = new FixedQueue();\r\n\r\n// Should be in sync with RunNextTicksNative in node_task_queue.cc\r\nfunction runNextTicks() {\r\n  if (!hasTickScheduled() && !hasRejectionToWarn())\r\n    runMicrotasks();\r\n  if (!hasTickScheduled() && !hasRejectionToWarn())\r\n    return;\r\n\r\n  processTicksAndRejections();\r\n}\r\n\r\nfunction processTicksAndRejections() {\r\n  let tock;\r\n  do {\r\n    while ((tock = queue.shift()) !== null) {\r\n      const asyncId = tock[async_id_symbol];\r\n      emitBefore(asyncId, tock[trigger_async_id_symbol], tock);\r\n\r\n      try {\r\n        const callback = tock.callback;\r\n        if (tock.args === undefined) {\r\n          callback();\r\n        } else {\r\n          const args = tock.args;\r\n          switch (args.length) {\r\n            case 1: callback(args[0]); break;\r\n            case 2: callback(args[0], args[1]); break;\r\n            case 3: callback(args[0], args[1], args[2]); break;\r\n            case 4: callback(args[0], args[1], args[2], args[3]); break;\r\n            default: callback(...args);\r\n          }\r\n        }\r\n      } finally {\r\n        if (destroyHooksExist())\r\n          emitDestroy(asyncId);\r\n      }\r\n\r\n      emitAfter(asyncId);\r\n    }\r\n    runMicrotasks();\r\n  } while (!queue.isEmpty() || processPromiseRejections());\r\n  setHasTickScheduled(false);\r\n  setHasRejectionToWarn(false);\r\n}\r\n\r\n// `nextTick()` will not enqueue any callback when the process is about to\r\n// exit since the callback would not have a chance to be executed.\r\nfunction nextTick(callback) {\r\n  validateFunction(callback, 'callback');\r\n\r\n  if (process._exiting)\r\n    return;\r\n\r\n  let args;\r\n  switch (arguments.length) {\r\n    case 1: break;\r\n    case 2: args = [arguments[1]]; break;\r\n    case 3: args = [arguments[1], arguments[2]]; break;\r\n    case 4: args = [arguments[1], arguments[2], arguments[3]]; break;\r\n    default:\r\n      args = new Array(arguments.length - 1);\r\n      for (let i = 1; i < arguments.length; i++)\r\n        args[i - 1] = arguments[i];\r\n  }\r\n\r\n  if (queue.isEmpty())\r\n    setHasTickScheduled(true);\r\n  const asyncId = newAsyncId();\r\n  const triggerAsyncId = getDefaultTriggerAsyncId();\r\n  const tickObject = {\r\n    [async_id_symbol]: asyncId,\r\n    [trigger_async_id_symbol]: triggerAsyncId,\r\n    callback,\r\n    args,\r\n  };\r\n  if (initHooksExist())\r\n    emitInit(asyncId, 'TickObject', triggerAsyncId, tickObject);\r\n  queue.push(tickObject);\r\n}\r\n\r\nfunction runMicrotask() {\r\n  this.runInAsyncScope(() => {\r\n    const callback = this.callback;\r\n    try {\r\n      callback();\r\n    } finally {\r\n      this.emitDestroy();\r\n    }\r\n  });\r\n}\r\n\r\nconst defaultMicrotaskResourceOpts = { requireManualDestroy: true };\r\n\r\nfunction queueMicrotask(callback) {\r\n  validateFunction(callback, 'callback');\r\n\r\n  const asyncResource = new AsyncResource(\r\n    'Microtask',\r\n    defaultMicrotaskResourceOpts,\r\n  );\r\n  asyncResource.callback = callback;\r\n\r\n  enqueueMicrotask(FunctionPrototypeBind(runMicrotask, asyncResource));\r\n}\r\n\r\nmodule.exports = {\r\n  setupTaskQueue() {\r\n    // Sets the per-isolate promise rejection callback\r\n    listenForRejections();\r\n    // Sets the callback to be run in every tick.\r\n    setTickCallback(processTicksAndRejections);\r\n    return {\r\n      nextTick,\r\n      runNextTicks,\r\n    };\r\n  },\r\n  queueMicrotask,\r\n};\r\n"
  },
  "33": {
    "metadata": {
      "scriptId": "33",
      "url": "node:internal/process/promises",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 491,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "32d3eb8ccd8b91b3780b90ca6b4fa043d8b0705073e0ef525deb8d578bd8f18b",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 14085,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/promises"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeShift,\r\n  Error,\r\n  ObjectPrototypeHasOwnProperty,\r\n  SafeMap,\r\n  SafeWeakMap,\r\n} = primordials;\r\n\r\nconst {\r\n  tickInfo,\r\n  promiseRejectEvents: {\r\n    kPromiseRejectWithNoHandler,\r\n    kPromiseHandlerAddedAfterReject,\r\n    kPromiseRejectAfterResolved,\r\n    kPromiseResolveAfterResolved,\r\n  },\r\n  setPromiseRejectCallback,\r\n} = internalBinding('task_queue');\r\n\r\nconst { deprecate } = require('internal/util');\r\n\r\nconst {\r\n  noSideEffectsToString,\r\n  triggerUncaughtException,\r\n  exitCodes: { kGenericUserError },\r\n} = internalBinding('errors');\r\n\r\nconst {\r\n  pushAsyncContext,\r\n  popAsyncContext,\r\n  symbols: {\r\n    async_id_symbol: kAsyncIdSymbol,\r\n    trigger_async_id_symbol: kTriggerAsyncIdSymbol,\r\n  },\r\n} = require('internal/async_hooks');\r\nconst { isErrorStackTraceLimitWritable } = require('internal/errors');\r\n\r\n// *Must* match Environment::TickInfo::Fields in src/env.h.\r\nconst kHasRejectionToWarn = 1;\r\n\r\n// By default true because in cases where process is not a global\r\n// it is not possible to determine if the user has added a listener\r\n// to the process object.\r\nlet hasMultipleResolvesListener = true;\r\n\r\nif (process.on) {\r\n  hasMultipleResolvesListener = process.listenerCount('multipleResolves') !== 0;\r\n\r\n  process.on('newListener', (eventName) => {\r\n    if (eventName === 'multipleResolves') {\r\n      hasMultipleResolvesListener = true;\r\n    }\r\n  });\r\n\r\n  process.on('removeListener', (eventName) => {\r\n    if (eventName === 'multipleResolves') {\r\n      hasMultipleResolvesListener = process.listenerCount('multipleResolves') !== 0;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Errors & Warnings\r\n */\r\n\r\nclass UnhandledPromiseRejection extends Error {\r\n  code = 'ERR_UNHANDLED_REJECTION';\r\n  name = 'UnhandledPromiseRejection';\r\n  /**\r\n   * @param {Error} reason\r\n   */\r\n  constructor(reason) {\r\n    super('This error originated either by throwing inside of an ' +\r\n    'async function without a catch block, or by rejecting a promise which ' +\r\n    'was not handled with .catch(). The promise rejected with the reason \"' +\r\n    noSideEffectsToString(reason) + '\".');\r\n  }\r\n}\r\n\r\nclass UnhandledPromiseRejectionWarning extends Error {\r\n  name = 'UnhandledPromiseRejectionWarning';\r\n  /**\r\n   * @param {number} uid\r\n   */\r\n  constructor(uid) {\r\n    const message = 'Unhandled promise rejection. This error originated either by ' +\r\n    'throwing inside of an async function without a catch block, ' +\r\n    'or by rejecting a promise which was not handled with .catch(). ' +\r\n    'To terminate the node process on unhandled promise ' +\r\n    'rejection, use the CLI flag `--unhandled-rejections=strict` (see ' +\r\n    'https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). ' +\r\n    `(rejection id: ${uid})`;\r\n\r\n    // UnhandledPromiseRejectionWarning will get the stack trace from the\r\n    // reason, so we can disable the stack trace limit temporarily for better\r\n    // performance.\r\n    if (isErrorStackTraceLimitWritable()) {\r\n      const stackTraceLimit = Error.stackTraceLimit;\r\n      Error.stackTraceLimit = 0;\r\n      super(message);\r\n      Error.stackTraceLimit = stackTraceLimit;\r\n    } else {\r\n      super(message);\r\n    }\r\n  }\r\n}\r\n\r\nclass PromiseRejectionHandledWarning extends Error {\r\n  name = 'PromiseRejectionHandledWarning';\r\n\r\n  /**\r\n   * @param {number} uid\r\n   */\r\n  constructor(uid) {\r\n    super(`Promise rejection was handled asynchronously (rejection id: ${uid})`);\r\n    this.id = uid;\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef PromiseInfo\r\n * @property {*} reason the reason for the rejection\r\n * @property {number} uid the unique id of the promise\r\n * @property {boolean} warned whether the rejection has been warned\r\n * @property {object} [domain] the domain the promise was created in\r\n */\r\n\r\n/**\r\n * @type {WeakMap<Promise, PromiseInfo>}\r\n */\r\nconst maybeUnhandledPromises = new SafeWeakMap();\r\n\r\n/**\r\n * Using a Mp causes the promise to be referenced at least for one tick.\r\n * @type {Map<Promise, PromiseInfo>}\r\n */\r\nlet pendingUnhandledRejections = new SafeMap();\r\n\r\n/**\r\n * @type {Array<{promise: Promise, warning: Error}>}\r\n */\r\nconst asyncHandledRejections = [];\r\n\r\n/**\r\n * @type {number}\r\n */\r\nlet lastPromiseId = 0;\r\n\r\n/**\r\n * @param {boolean} value\r\n */\r\nfunction setHasRejectionToWarn(value) {\r\n  tickInfo[kHasRejectionToWarn] = value ? 1 : 0;\r\n}\r\n\r\n/**\r\n * @returns {boolean}\r\n */\r\nfunction hasRejectionToWarn() {\r\n  return tickInfo[kHasRejectionToWarn] === 1;\r\n}\r\n\r\n/**\r\n * @param {string|Error} obj\r\n * @returns {obj is Error}\r\n */\r\nfunction isErrorLike(obj) {\r\n  return typeof obj === 'object' &&\r\n         obj !== null &&\r\n         ObjectPrototypeHasOwnProperty(obj, 'stack');\r\n}\r\n\r\n/**\r\n * @param {0|1|2|3} type\r\n * @param {Promise} promise\r\n * @param {Error} reason\r\n */\r\nfunction promiseRejectHandler(type, promise, reason) {\r\n  if (unhandledRejectionsMode === undefined) {\r\n    unhandledRejectionsMode = getUnhandledRejectionsMode();\r\n  }\r\n  switch (type) {\r\n    case kPromiseRejectWithNoHandler: // 0\r\n      unhandledRejection(promise, reason);\r\n      break;\r\n    case kPromiseHandlerAddedAfterReject: // 1\r\n      handledRejection(promise);\r\n      break;\r\n    case kPromiseRejectAfterResolved: // 2\r\n      if (hasMultipleResolvesListener) {\r\n        resolveErrorReject(promise, reason);\r\n      }\r\n      break;\r\n    case kPromiseResolveAfterResolved: // 3\r\n      if (hasMultipleResolvesListener) {\r\n        resolveErrorResolve(promise, reason);\r\n      }\r\n      break;\r\n  }\r\n}\r\n\r\nconst multipleResolvesDeprecate = deprecate(\r\n  () => {},\r\n  'The multipleResolves event has been deprecated.',\r\n  'DEP0160',\r\n);\r\n\r\n/**\r\n * @param {Promise} promise\r\n * @param {Error} reason\r\n */\r\nfunction resolveErrorResolve(promise, reason) {\r\n  // We have to wrap this in a next tick. Otherwise the error could be caught by\r\n  // the executed promise.\r\n  process.nextTick(() => {\r\n    // Emit the multipleResolves event.\r\n    // This is a deprecated event, so we have to check if it's being listened to.\r\n    if (process.emit('multipleResolves', 'resolve', promise, reason)) {\r\n      // If the event is being listened to, emit a deprecation warning.\r\n      multipleResolvesDeprecate();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {Promise} promise\r\n * @param {Error} reason\r\n */\r\nfunction resolveErrorReject(promise, reason) {\r\n  // We have to wrap this in a next tick. Otherwise the error could be caught by\r\n  // the executed promise.\r\n  process.nextTick(() => {\r\n    if (process.emit('multipleResolves', 'reject', promise, reason)) {\r\n      multipleResolvesDeprecate();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {Promise} promise\r\n * @param {PromiseInfo} promiseInfo\r\n * @returns {boolean}\r\n */\r\nconst emitUnhandledRejection = (promise, promiseInfo) => {\r\n  return promiseInfo.domain ?\r\n    promiseInfo.domain.emit('error', promiseInfo.reason) :\r\n    process.emit('unhandledRejection', promiseInfo.reason, promise);\r\n};\r\n\r\n/**\r\n * @param {Promise} promise\r\n * @param {Error} reason\r\n */\r\nfunction unhandledRejection(promise, reason) {\r\n  pendingUnhandledRejections.set(promise, {\r\n    reason,\r\n    uid: ++lastPromiseId,\r\n    warned: false,\r\n    domain: process.domain,\r\n  });\r\n  setHasRejectionToWarn(true);\r\n}\r\n\r\n/**\r\n * @param {Promise} promise\r\n */\r\nfunction handledRejection(promise) {\r\n  if (pendingUnhandledRejections.has(promise)) {\r\n    pendingUnhandledRejections.delete(promise);\r\n    return;\r\n  }\r\n  const promiseInfo = maybeUnhandledPromises.get(promise);\r\n  if (promiseInfo !== undefined) {\r\n    maybeUnhandledPromises.delete(promise);\r\n    if (promiseInfo.warned) {\r\n      // Generate the warning object early to get a good stack trace.\r\n      const warning = new PromiseRejectionHandledWarning(promiseInfo.uid);\r\n      ArrayPrototypePush(asyncHandledRejections, { promise, warning });\r\n      setHasRejectionToWarn(true);\r\n    }\r\n  }\r\n}\r\n\r\nconst unhandledRejectionErrName = UnhandledPromiseRejectionWarning.name;\r\n\r\n/**\r\n * @param {PromiseInfo} promiseInfo\r\n */\r\nfunction emitUnhandledRejectionWarning(promiseInfo) {\r\n  const warning = new UnhandledPromiseRejectionWarning(promiseInfo.uid);\r\n  const reason = promiseInfo.reason;\r\n  try {\r\n    if (isErrorLike(reason)) {\r\n      warning.stack = reason.stack;\r\n      process.emitWarning(reason.stack, unhandledRejectionErrName);\r\n    } else {\r\n      process.emitWarning(\r\n        noSideEffectsToString(reason), unhandledRejectionErrName);\r\n    }\r\n  } catch {\r\n    try {\r\n      process.emitWarning(\r\n        noSideEffectsToString(reason), unhandledRejectionErrName);\r\n    } catch {\r\n      // Ignore.\r\n    }\r\n  }\r\n\r\n  process.emitWarning(warning);\r\n}\r\n\r\n/**\r\n * @callback UnhandledRejectionsModeHandler\r\n * @param {Promise} promise\r\n * @param {PromiseInfo} promiseInfo\r\n * @param {number} [promiseAsyncId]\r\n * @returns {boolean}\r\n */\r\n\r\n/**\r\n * The mode of unhandled rejections.\r\n * @type {UnhandledRejectionsModeHandler}\r\n */\r\nlet unhandledRejectionsMode;\r\n\r\n/**\r\n * --unhandled-rejections=strict:\r\n * Emit 'uncaughtException'. If it's not handled, print the error to stderr\r\n * and exit the process.\r\n * Otherwise, emit 'unhandledRejection'. If 'unhandledRejection' is not\r\n * handled, emit 'UnhandledPromiseRejectionWarning'.\r\n * @type {UnhandledRejectionsModeHandler}\r\n */\r\nfunction strictUnhandledRejectionsMode(promise, promiseInfo, promiseAsyncId) {\r\n  const reason = promiseInfo.reason;\r\n  const err = isErrorLike(reason) ?\r\n    reason : new UnhandledPromiseRejection(reason);\r\n  // This destroys the async stack, don't clear it after\r\n  triggerUncaughtException(err, true /* fromPromise */);\r\n  if (promiseAsyncId === undefined) {\r\n    pushAsyncContext(\r\n      promise[kAsyncIdSymbol],\r\n      promise[kTriggerAsyncIdSymbol],\r\n      promise,\r\n    );\r\n  }\r\n  const handled = emitUnhandledRejection(promise, promiseInfo);\r\n  if (!handled) emitUnhandledRejectionWarning(promiseInfo);\r\n  return true;\r\n}\r\n\r\n/**\r\n * --unhandled-rejections=none:\r\n * Emit 'unhandledRejection', but do not emit any warning.\r\n * @type {UnhandledRejectionsModeHandler}\r\n */\r\nfunction ignoreUnhandledRejectionsMode(promise, promiseInfo) {\r\n  emitUnhandledRejection(promise, promiseInfo);\r\n  return true;\r\n}\r\n\r\n/**\r\n * --unhandled-rejections=warn:\r\n * Emit 'unhandledRejection', then emit 'UnhandledPromiseRejectionWarning'.\r\n * @type {UnhandledRejectionsModeHandler}\r\n */\r\nfunction alwaysWarnUnhandledRejectionsMode(promise, promiseInfo) {\r\n  emitUnhandledRejection(promise, promiseInfo);\r\n  emitUnhandledRejectionWarning(promiseInfo);\r\n  return true;\r\n}\r\n\r\n/**\r\n * --unhandled-rejections=throw:\r\n * Emit 'unhandledRejection', if it's unhandled, emit\r\n * 'uncaughtException'. If it's not handled, print the error to stderr\r\n * and exit the process.\r\n * @type {UnhandledRejectionsModeHandler}\r\n */\r\nfunction throwUnhandledRejectionsMode(promise, promiseInfo) {\r\n  const reason = promiseInfo.reason;\r\n  const handled = emitUnhandledRejection(promise, promiseInfo);\r\n  if (!handled) {\r\n    const err = isErrorLike(reason) ?\r\n      reason :\r\n      new UnhandledPromiseRejection(reason);\r\n    // This destroys the async stack, don't clear it after\r\n    triggerUncaughtException(err, true /* fromPromise */);\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * --unhandled-rejections=warn-with-error-code:\r\n * Emit 'unhandledRejection', if it's unhandled, emit\r\n * 'UnhandledPromiseRejectionWarning', then set process exit code to 1.\r\n * @type {UnhandledRejectionsModeHandler}\r\n */\r\nfunction warnWithErrorCodeUnhandledRejectionsMode(promise, promiseInfo) {\r\n  const handled = emitUnhandledRejection(promise, promiseInfo);\r\n  if (!handled) {\r\n    emitUnhandledRejectionWarning(promiseInfo);\r\n    process.exitCode = kGenericUserError;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * @returns {UnhandledRejectionsModeHandler}\r\n */\r\nfunction getUnhandledRejectionsMode() {\r\n  const { getOptionValue } = require('internal/options');\r\n  switch (getOptionValue('--unhandled-rejections')) {\r\n    case 'none':\r\n      return ignoreUnhandledRejectionsMode;\r\n    case 'warn':\r\n      return alwaysWarnUnhandledRejectionsMode;\r\n    case 'strict':\r\n      return strictUnhandledRejectionsMode;\r\n    case 'throw':\r\n      return throwUnhandledRejectionsMode;\r\n    case 'warn-with-error-code':\r\n      return warnWithErrorCodeUnhandledRejectionsMode;\r\n    default:\r\n      return throwUnhandledRejectionsMode;\r\n  }\r\n}\r\n\r\n// If this method returns true, we've executed user code or triggered\r\n// a warning to be emitted which requires the microtask and next tick\r\n// queues to be drained again.\r\nfunction processPromiseRejections() {\r\n  let maybeScheduledTicksOrMicrotasks = asyncHandledRejections.length > 0;\r\n\r\n  while (asyncHandledRejections.length !== 0) {\r\n    const { promise, warning } = ArrayPrototypeShift(asyncHandledRejections);\r\n    if (!process.emit('rejectionHandled', promise)) {\r\n      process.emitWarning(warning);\r\n    }\r\n  }\r\n\r\n  let needPop = true;\r\n  let promiseAsyncId;\r\n\r\n  const pending = pendingUnhandledRejections;\r\n  pendingUnhandledRejections = new SafeMap();\r\n\r\n  for (const { 0: promise, 1: promiseInfo } of pending.entries()) {\r\n    maybeUnhandledPromises.set(promise, promiseInfo);\r\n\r\n    promiseInfo.warned = true;\r\n\r\n    // We need to check if async_hooks are enabled\r\n    // don't use enabledHooksExist as a Promise could\r\n    // come from a vm.* context and not have an async id\r\n    promiseAsyncId = promise[kAsyncIdSymbol];\r\n    if (promiseAsyncId !== undefined) {\r\n      pushAsyncContext(\r\n        promiseAsyncId,\r\n        promise[kTriggerAsyncIdSymbol],\r\n        promise,\r\n      );\r\n    }\r\n\r\n    try {\r\n      needPop = unhandledRejectionsMode(promise, promiseInfo, promiseAsyncId);\r\n    } finally {\r\n      needPop &&\r\n      promiseAsyncId !== undefined &&\r\n      popAsyncContext(promiseAsyncId);\r\n    }\r\n    maybeScheduledTicksOrMicrotasks = true;\r\n  }\r\n  return maybeScheduledTicksOrMicrotasks ||\r\n         pendingUnhandledRejections.size !== 0;\r\n}\r\n\r\nfunction listenForRejections() {\r\n  setPromiseRejectCallback(promiseRejectHandler);\r\n}\r\n\r\nmodule.exports = {\r\n  hasRejectionToWarn,\r\n  setHasRejectionToWarn,\r\n  listenForRejections,\r\n  processPromiseRejections,\r\n};\r\n"
  },
  "34": {
    "metadata": {
      "scriptId": "34",
      "url": "node:internal/fixed_queue",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 118,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "c5a69bb9ab52fc28f80521fd1414890a5f3a7a8a51bfc335695506e1b3de4707",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4326,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/fixed_queue"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n} = primordials;\r\n\r\n// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.\r\nconst kSize = 2048;\r\nconst kMask = kSize - 1;\r\n\r\n// The FixedQueue is implemented as a singly-linked list of fixed-size\r\n// circular buffers. It looks something like this:\r\n//\r\n//  head                                                       tail\r\n//    |                                                          |\r\n//    v                                                          v\r\n// +-----------+ <-----\\       +-----------+ <------\\         +-----------+\r\n// |  [null]   |        \\----- |   next    |         \\------- |   next    |\r\n// +-----------+               +-----------+                  +-----------+\r\n// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |\r\n// |   item    |               |   item    |                  |  [empty]  |\r\n// |   item    |               |   item    |                  |  [empty]  |\r\n// |   item    |               |   item    |                  |  [empty]  |\r\n// |   item    |               |   item    |       bottom --> |   item    |\r\n// |   item    |               |   item    |                  |   item    |\r\n// |    ...    |               |    ...    |                  |    ...    |\r\n// |   item    |               |   item    |                  |   item    |\r\n// |   item    |               |   item    |                  |   item    |\r\n// |  [empty]  | <-- top       |   item    |                  |   item    |\r\n// |  [empty]  |               |   item    |                  |   item    |\r\n// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |\r\n// +-----------+               +-----------+                  +-----------+\r\n//\r\n// Or, if there is only one circular buffer, it looks something\r\n// like either of these:\r\n//\r\n//  head   tail                                 head   tail\r\n//    |     |                                     |     |\r\n//    v     v                                     v     v\r\n// +-----------+                               +-----------+\r\n// |  [null]   |                               |  [null]   |\r\n// +-----------+                               +-----------+\r\n// |  [empty]  |                               |   item    |\r\n// |  [empty]  |                               |   item    |\r\n// |   item    | <-- bottom            top --> |  [empty]  |\r\n// |   item    |                               |  [empty]  |\r\n// |  [empty]  | <-- top            bottom --> |   item    |\r\n// |  [empty]  |                               |   item    |\r\n// +-----------+                               +-----------+\r\n//\r\n// Adding a value means moving `top` forward by one, removing means\r\n// moving `bottom` forward by one. After reaching the end, the queue\r\n// wraps around.\r\n//\r\n// When `top === bottom` the current queue is empty and when\r\n// `top + 1 === bottom` it's full. This wastes a single space of storage\r\n// but allows much quicker checks.\r\n\r\nclass FixedCircularBuffer {\r\n  constructor() {\r\n    this.bottom = 0;\r\n    this.top = 0;\r\n    this.list = new Array(kSize);\r\n    this.next = null;\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.top === this.bottom;\r\n  }\r\n\r\n  isFull() {\r\n    return ((this.top + 1) & kMask) === this.bottom;\r\n  }\r\n\r\n  push(data) {\r\n    this.list[this.top] = data;\r\n    this.top = (this.top + 1) & kMask;\r\n  }\r\n\r\n  shift() {\r\n    const nextItem = this.list[this.bottom];\r\n    if (nextItem === undefined)\r\n      return null;\r\n    this.list[this.bottom] = undefined;\r\n    this.bottom = (this.bottom + 1) & kMask;\r\n    return nextItem;\r\n  }\r\n}\r\n\r\nmodule.exports = class FixedQueue {\r\n  constructor() {\r\n    this.head = this.tail = new FixedCircularBuffer();\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.head.isEmpty();\r\n  }\r\n\r\n  push(data) {\r\n    if (this.head.isFull()) {\r\n      // Head is full: Creates a new queue, sets the old queue's `.next` to it,\r\n      // and sets it as the new main queue.\r\n      this.head = this.head.next = new FixedCircularBuffer();\r\n    }\r\n    this.head.push(data);\r\n  }\r\n\r\n  shift() {\r\n    const tail = this.tail;\r\n    const next = tail.shift();\r\n    if (tail.isEmpty() && tail.next !== null) {\r\n      // If there is another queue, it forms the new tail.\r\n      this.tail = tail.next;\r\n      tail.next = null;\r\n    }\r\n    return next;\r\n  }\r\n};\r\n"
  },
  "35": {
    "metadata": {
      "scriptId": "35",
      "url": "node:async_hooks",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 384,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "c9c963f1b853b4bc8801a1491e797ea2422dd655fb787dd3fc94aae53887c716",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10679,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:async_hooks"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSplice,\r\n  ArrayPrototypeUnshift,\r\n  FunctionPrototypeBind,\r\n  NumberIsSafeInteger,\r\n  ObjectDefineProperties,\r\n  ObjectFreeze,\r\n  ObjectIs,\r\n  ReflectApply,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  ERR_ASYNC_CALLBACK,\r\n  ERR_ASYNC_TYPE,\r\n  ERR_INVALID_ASYNC_ID,\r\n} = require('internal/errors').codes;\r\nconst {\r\n  deprecate,\r\n  kEmptyObject,\r\n} = require('internal/util');\r\nconst {\r\n  validateFunction,\r\n  validateString,\r\n} = require('internal/validators');\r\nconst internal_async_hooks = require('internal/async_hooks');\r\n\r\n// Get functions\r\n// For userland AsyncResources, make sure to emit a destroy event when the\r\n// resource gets gced.\r\nconst { registerDestroyHook } = internal_async_hooks;\r\nconst {\r\n  asyncWrap,\r\n  executionAsyncId,\r\n  triggerAsyncId,\r\n  // Private API\r\n  hasAsyncIdStack,\r\n  getHookArrays,\r\n  enableHooks,\r\n  disableHooks,\r\n  updatePromiseHookMode,\r\n  executionAsyncResource,\r\n  // Internal Embedder API\r\n  newAsyncId,\r\n  getDefaultTriggerAsyncId,\r\n  emitInit,\r\n  emitBefore,\r\n  emitAfter,\r\n  emitDestroy,\r\n  enabledHooksExist,\r\n  initHooksExist,\r\n  destroyHooksExist,\r\n} = internal_async_hooks;\r\n\r\n// Get symbols\r\nconst {\r\n  async_id_symbol, trigger_async_id_symbol,\r\n  init_symbol, before_symbol, after_symbol, destroy_symbol,\r\n  promise_resolve_symbol,\r\n} = internal_async_hooks.symbols;\r\n\r\n// Get constants\r\nconst {\r\n  kInit, kBefore, kAfter, kDestroy, kTotals, kPromiseResolve,\r\n} = internal_async_hooks.constants;\r\n\r\n// Listener API //\r\n\r\nclass AsyncHook {\r\n  constructor({ init, before, after, destroy, promiseResolve }) {\r\n    if (init !== undefined && typeof init !== 'function')\r\n      throw new ERR_ASYNC_CALLBACK('hook.init');\r\n    if (before !== undefined && typeof before !== 'function')\r\n      throw new ERR_ASYNC_CALLBACK('hook.before');\r\n    if (after !== undefined && typeof after !== 'function')\r\n      throw new ERR_ASYNC_CALLBACK('hook.after');\r\n    if (destroy !== undefined && typeof destroy !== 'function')\r\n      throw new ERR_ASYNC_CALLBACK('hook.destroy');\r\n    if (promiseResolve !== undefined && typeof promiseResolve !== 'function')\r\n      throw new ERR_ASYNC_CALLBACK('hook.promiseResolve');\r\n\r\n    this[init_symbol] = init;\r\n    this[before_symbol] = before;\r\n    this[after_symbol] = after;\r\n    this[destroy_symbol] = destroy;\r\n    this[promise_resolve_symbol] = promiseResolve;\r\n  }\r\n\r\n  enable() {\r\n    // The set of callbacks for a hook should be the same regardless of whether\r\n    // enable()/disable() are run during their execution. The following\r\n    // references are reassigned to the tmp arrays if a hook is currently being\r\n    // processed.\r\n    const { 0: hooks_array, 1: hook_fields } = getHookArrays();\r\n\r\n    // Each hook is only allowed to be added once.\r\n    if (ArrayPrototypeIncludes(hooks_array, this))\r\n      return this;\r\n\r\n    const prev_kTotals = hook_fields[kTotals];\r\n\r\n    // createHook() has already enforced that the callbacks are all functions,\r\n    // so here simply increment the count of whether each callbacks exists or\r\n    // not.\r\n    hook_fields[kTotals] = hook_fields[kInit] += +!!this[init_symbol];\r\n    hook_fields[kTotals] += hook_fields[kBefore] += +!!this[before_symbol];\r\n    hook_fields[kTotals] += hook_fields[kAfter] += +!!this[after_symbol];\r\n    hook_fields[kTotals] += hook_fields[kDestroy] += +!!this[destroy_symbol];\r\n    hook_fields[kTotals] +=\r\n        hook_fields[kPromiseResolve] += +!!this[promise_resolve_symbol];\r\n    ArrayPrototypePush(hooks_array, this);\r\n\r\n    if (prev_kTotals === 0 && hook_fields[kTotals] > 0) {\r\n      enableHooks();\r\n    }\r\n\r\n    updatePromiseHookMode();\r\n\r\n    return this;\r\n  }\r\n\r\n  disable() {\r\n    const { 0: hooks_array, 1: hook_fields } = getHookArrays();\r\n\r\n    const index = ArrayPrototypeIndexOf(hooks_array, this);\r\n    if (index === -1)\r\n      return this;\r\n\r\n    const prev_kTotals = hook_fields[kTotals];\r\n\r\n    hook_fields[kTotals] = hook_fields[kInit] -= +!!this[init_symbol];\r\n    hook_fields[kTotals] += hook_fields[kBefore] -= +!!this[before_symbol];\r\n    hook_fields[kTotals] += hook_fields[kAfter] -= +!!this[after_symbol];\r\n    hook_fields[kTotals] += hook_fields[kDestroy] -= +!!this[destroy_symbol];\r\n    hook_fields[kTotals] +=\r\n        hook_fields[kPromiseResolve] -= +!!this[promise_resolve_symbol];\r\n    ArrayPrototypeSplice(hooks_array, index, 1);\r\n\r\n    if (prev_kTotals > 0 && hook_fields[kTotals] === 0) {\r\n      disableHooks();\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nfunction createHook(fns) {\r\n  return new AsyncHook(fns);\r\n}\r\n\r\n\r\n// Embedder API //\r\n\r\nconst destroyedSymbol = Symbol('destroyed');\r\n\r\nclass AsyncResource {\r\n  constructor(type, opts = kEmptyObject) {\r\n    validateString(type, 'type');\r\n\r\n    let triggerAsyncId = opts;\r\n    let requireManualDestroy = false;\r\n    if (typeof opts !== 'number') {\r\n      triggerAsyncId = opts.triggerAsyncId === undefined ?\r\n        getDefaultTriggerAsyncId() : opts.triggerAsyncId;\r\n      requireManualDestroy = !!opts.requireManualDestroy;\r\n    }\r\n\r\n    // Unlike emitInitScript, AsyncResource doesn't supports null as the\r\n    // triggerAsyncId.\r\n    if (!NumberIsSafeInteger(triggerAsyncId) || triggerAsyncId < -1) {\r\n      throw new ERR_INVALID_ASYNC_ID('triggerAsyncId', triggerAsyncId);\r\n    }\r\n\r\n    const asyncId = newAsyncId();\r\n    this[async_id_symbol] = asyncId;\r\n    this[trigger_async_id_symbol] = triggerAsyncId;\r\n\r\n    if (initHooksExist()) {\r\n      if (enabledHooksExist() && type.length === 0) {\r\n        throw new ERR_ASYNC_TYPE(type);\r\n      }\r\n\r\n      emitInit(asyncId, type, triggerAsyncId, this);\r\n    }\r\n\r\n    if (!requireManualDestroy && destroyHooksExist()) {\r\n      // This prop name (destroyed) has to be synchronized with C++\r\n      const destroyed = { destroyed: false };\r\n      this[destroyedSymbol] = destroyed;\r\n      registerDestroyHook(this, asyncId, destroyed);\r\n    }\r\n  }\r\n\r\n  runInAsyncScope(fn, thisArg, ...args) {\r\n    const asyncId = this[async_id_symbol];\r\n    emitBefore(asyncId, this[trigger_async_id_symbol], this);\r\n\r\n    try {\r\n      const ret =\r\n        ReflectApply(fn, thisArg, args);\r\n\r\n      return ret;\r\n    } finally {\r\n      if (hasAsyncIdStack())\r\n        emitAfter(asyncId);\r\n    }\r\n  }\r\n\r\n  emitDestroy() {\r\n    if (this[destroyedSymbol] !== undefined) {\r\n      this[destroyedSymbol].destroyed = true;\r\n    }\r\n    emitDestroy(this[async_id_symbol]);\r\n    return this;\r\n  }\r\n\r\n  asyncId() {\r\n    return this[async_id_symbol];\r\n  }\r\n\r\n  triggerAsyncId() {\r\n    return this[trigger_async_id_symbol];\r\n  }\r\n\r\n  bind(fn, thisArg) {\r\n    validateFunction(fn, 'fn');\r\n    let bound;\r\n    if (thisArg === undefined) {\r\n      const resource = this;\r\n      bound = function(...args) {\r\n        ArrayPrototypeUnshift(args, fn, this);\r\n        return ReflectApply(resource.runInAsyncScope, resource, args);\r\n      };\r\n    } else {\r\n      bound = FunctionPrototypeBind(this.runInAsyncScope, this, fn, thisArg);\r\n    }\r\n    let self = this;\r\n    ObjectDefineProperties(bound, {\r\n      'length': {\r\n        __proto__: null,\r\n        configurable: true,\r\n        enumerable: false,\r\n        value: fn.length,\r\n        writable: false,\r\n      },\r\n      'asyncResource': {\r\n        __proto__: null,\r\n        configurable: true,\r\n        enumerable: true,\r\n        get: deprecate(function() {\r\n          return self;\r\n        }, 'The asyncResource property on bound functions is deprecated', 'DEP0172'),\r\n        set: deprecate(function(val) {\r\n          self = val;\r\n        }, 'The asyncResource property on bound functions is deprecated', 'DEP0172'),\r\n      },\r\n    });\r\n    return bound;\r\n  }\r\n\r\n  static bind(fn, type, thisArg) {\r\n    type = type || fn.name;\r\n    return (new AsyncResource(type || 'bound-anonymous-fn')).bind(fn, thisArg);\r\n  }\r\n}\r\n\r\nconst storageList = [];\r\nconst storageHook = createHook({\r\n  init(asyncId, type, triggerAsyncId, resource) {\r\n    const currentResource = executionAsyncResource();\r\n    // Value of currentResource is always a non null object\r\n    for (let i = 0; i < storageList.length; ++i) {\r\n      storageList[i]._propagate(resource, currentResource, type);\r\n    }\r\n  },\r\n});\r\n\r\nclass AsyncLocalStorage {\r\n  constructor() {\r\n    this.kResourceStore = Symbol('kResourceStore');\r\n    this.enabled = false;\r\n  }\r\n\r\n  static bind(fn) {\r\n    return AsyncResource.bind(fn);\r\n  }\r\n\r\n  static snapshot() {\r\n    return AsyncLocalStorage.bind((cb, ...args) => cb(...args));\r\n  }\r\n\r\n  disable() {\r\n    if (this.enabled) {\r\n      this.enabled = false;\r\n      // If this.enabled, the instance must be in storageList\r\n      ArrayPrototypeSplice(storageList,\r\n                           ArrayPrototypeIndexOf(storageList, this), 1);\r\n      if (storageList.length === 0) {\r\n        storageHook.disable();\r\n      }\r\n    }\r\n  }\r\n\r\n  _enable() {\r\n    if (!this.enabled) {\r\n      this.enabled = true;\r\n      ArrayPrototypePush(storageList, this);\r\n      storageHook.enable();\r\n    }\r\n  }\r\n\r\n  // Propagate the context from a parent resource to a child one\r\n  _propagate(resource, triggerResource, type) {\r\n    const store = triggerResource[this.kResourceStore];\r\n    if (this.enabled) {\r\n      resource[this.kResourceStore] = store;\r\n    }\r\n  }\r\n\r\n  enterWith(store) {\r\n    this._enable();\r\n    const resource = executionAsyncResource();\r\n    resource[this.kResourceStore] = store;\r\n  }\r\n\r\n  run(store, callback, ...args) {\r\n    // Avoid creation of an AsyncResource if store is already active\r\n    if (ObjectIs(store, this.getStore())) {\r\n      return ReflectApply(callback, null, args);\r\n    }\r\n\r\n    this._enable();\r\n\r\n    const resource = executionAsyncResource();\r\n    const oldStore = resource[this.kResourceStore];\r\n\r\n    resource[this.kResourceStore] = store;\r\n\r\n    try {\r\n      return ReflectApply(callback, null, args);\r\n    } finally {\r\n      resource[this.kResourceStore] = oldStore;\r\n    }\r\n  }\r\n\r\n  exit(callback, ...args) {\r\n    if (!this.enabled) {\r\n      return ReflectApply(callback, null, args);\r\n    }\r\n    this.disable();\r\n    try {\r\n      return ReflectApply(callback, null, args);\r\n    } finally {\r\n      this._enable();\r\n    }\r\n  }\r\n\r\n  getStore() {\r\n    if (this.enabled) {\r\n      const resource = executionAsyncResource();\r\n      return resource[this.kResourceStore];\r\n    }\r\n  }\r\n}\r\n\r\n// Placing all exports down here because the exported classes won't export\r\n// otherwise.\r\nmodule.exports = {\r\n  // Public API\r\n  AsyncLocalStorage,\r\n  createHook,\r\n  executionAsyncId,\r\n  triggerAsyncId,\r\n  executionAsyncResource,\r\n  asyncWrapProviders: ObjectFreeze({ __proto__: null, ...asyncWrap.Providers }),\r\n  // Embedder API\r\n  AsyncResource,\r\n};\r\n"
  },
  "36": {
    "metadata": {
      "scriptId": "36",
      "url": "node:timers",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 388,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "7debfdff12bc120ea60b6e8f4e77b43d45e8d06c5a917ff6cc9bdd43cef832e0",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10300,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:timers"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  MathTrunc,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  SymbolDispose,\r\n  SymbolToPrimitive,\r\n} = primordials;\r\n\r\nconst binding = internalBinding('timers');\r\nconst {\r\n  immediateInfo,\r\n} = binding;\r\nconst L = require('internal/linkedlist');\r\nconst {\r\n  async_id_symbol,\r\n  Timeout,\r\n  Immediate,\r\n  decRefCount,\r\n  immediateInfoFields: {\r\n    kCount,\r\n    kRefCount,\r\n  },\r\n  kRefed,\r\n  kHasPrimitive,\r\n  getTimerDuration,\r\n  timerListMap,\r\n  timerListQueue,\r\n  immediateQueue,\r\n  active,\r\n  unrefActive,\r\n  insert,\r\n} = require('internal/timers');\r\nconst {\r\n  promisify: { custom: customPromisify },\r\n  deprecate,\r\n} = require('internal/util');\r\nlet debug = require('internal/util/debuglog').debuglog('timer', (fn) => {\r\n  debug = fn;\r\n});\r\nconst { validateFunction } = require('internal/validators');\r\n\r\nlet timersPromises;\r\nlet timers;\r\n\r\nconst {\r\n  destroyHooksExist,\r\n  // The needed emit*() functions.\r\n  emitDestroy,\r\n} = require('internal/async_hooks');\r\n\r\n// This stores all the known timer async ids to allow users to clearTimeout and\r\n// clearInterval using those ids, to match the spec and the rest of the web\r\n// platform.\r\nconst knownTimersById = { __proto__: null };\r\n\r\n// Remove a timer. Cancels the timeout and resets the relevant timer properties.\r\nfunction unenroll(item) {\r\n  if (item._destroyed)\r\n    return;\r\n\r\n  item._destroyed = true;\r\n\r\n  if (item[kHasPrimitive])\r\n    delete knownTimersById[item[async_id_symbol]];\r\n\r\n  // Fewer checks may be possible, but these cover everything.\r\n  if (destroyHooksExist() && item[async_id_symbol] !== undefined)\r\n    emitDestroy(item[async_id_symbol]);\r\n\r\n  L.remove(item);\r\n\r\n  // We only delete refed lists because unrefed ones are incredibly likely\r\n  // to come from http and be recreated shortly after.\r\n  // TODO: Long-term this could instead be handled by creating an internal\r\n  // clearTimeout that makes it clear that the list should not be deleted.\r\n  // That function could then be used by http and other similar modules.\r\n  if (item[kRefed]) {\r\n    // Compliment truncation during insert().\r\n    const msecs = MathTrunc(item._idleTimeout);\r\n    const list = timerListMap[msecs];\r\n    if (list !== undefined && L.isEmpty(list)) {\r\n      debug('unenroll: list empty');\r\n      timerListQueue.removeAt(list.priorityQueuePosition);\r\n      delete timerListMap[list.msecs];\r\n    }\r\n\r\n    decRefCount();\r\n  }\r\n\r\n  // If active is called later, then we want to make sure not to insert again\r\n  item._idleTimeout = -1;\r\n}\r\n\r\n// Make a regular object able to act as a timer by setting some properties.\r\n// This function does not start the timer, see `active()`.\r\n// Using existing objects as timers slightly reduces object overhead.\r\nfunction enroll(item, msecs) {\r\n  msecs = getTimerDuration(msecs, 'msecs');\r\n\r\n  // If this item was already in a list somewhere\r\n  // then we should unenroll it from that\r\n  if (item._idleNext) unenroll(item);\r\n\r\n  L.init(item);\r\n  item._idleTimeout = msecs;\r\n}\r\n\r\n\r\n/**\r\n * Schedules the execution of a one-time `callback`\r\n * after `after` milliseconds.\r\n * @param {Function} callback\r\n * @param {number} [after]\r\n * @param {any} [arg1]\r\n * @param {any} [arg2]\r\n * @param {any} [arg3]\r\n * @returns {Timeout}\r\n */\r\nfunction setTimeout(callback, after, arg1, arg2, arg3) {\r\n  validateFunction(callback, 'callback');\r\n\r\n  let i, args;\r\n  switch (arguments.length) {\r\n    // fast cases\r\n    case 1:\r\n    case 2:\r\n      break;\r\n    case 3:\r\n      args = [arg1];\r\n      break;\r\n    case 4:\r\n      args = [arg1, arg2];\r\n      break;\r\n    default:\r\n      args = [arg1, arg2, arg3];\r\n      for (i = 5; i < arguments.length; i++) {\r\n        // Extend array dynamically, makes .apply run much faster in v6.0.0\r\n        args[i - 2] = arguments[i];\r\n      }\r\n      break;\r\n  }\r\n\r\n  const timeout = new Timeout(callback, after, args, false, true);\r\n  insert(timeout, timeout._idleTimeout);\r\n\r\n  return timeout;\r\n}\r\n\r\nObjectDefineProperty(setTimeout, customPromisify, {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get() {\r\n    if (!timersPromises)\r\n      timersPromises = require('timers/promises');\r\n    return timersPromises.setTimeout;\r\n  },\r\n});\r\n\r\n/**\r\n * Cancels a timeout.\r\n * @param {Timeout | string | number} timer\r\n * @returns {void}\r\n */\r\nfunction clearTimeout(timer) {\r\n  if (timer && timer._onTimeout) {\r\n    timer._onTimeout = null;\r\n    unenroll(timer);\r\n    return;\r\n  }\r\n  if (typeof timer === 'number' || typeof timer === 'string') {\r\n    const timerInstance = knownTimersById[timer];\r\n    if (timerInstance !== undefined) {\r\n      timerInstance._onTimeout = null;\r\n      unenroll(timerInstance);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Schedules repeated execution of `callback`\r\n * every `repeat` milliseconds.\r\n * @param {Function} callback\r\n * @param {number} [repeat]\r\n * @param {any} [arg1]\r\n * @param {any} [arg2]\r\n * @param {any} [arg3]\r\n * @returns {Timeout}\r\n */\r\nfunction setInterval(callback, repeat, arg1, arg2, arg3) {\r\n  validateFunction(callback, 'callback');\r\n\r\n  let i, args;\r\n  switch (arguments.length) {\r\n    // fast cases\r\n    case 1:\r\n    case 2:\r\n      break;\r\n    case 3:\r\n      args = [arg1];\r\n      break;\r\n    case 4:\r\n      args = [arg1, arg2];\r\n      break;\r\n    default:\r\n      args = [arg1, arg2, arg3];\r\n      for (i = 5; i < arguments.length; i++) {\r\n        // Extend array dynamically, makes .apply run much faster in v6.0.0\r\n        args[i - 2] = arguments[i];\r\n      }\r\n      break;\r\n  }\r\n\r\n  const timeout = new Timeout(callback, repeat, args, true, true);\r\n  insert(timeout, timeout._idleTimeout);\r\n\r\n  return timeout;\r\n}\r\n\r\n/**\r\n * Cancels an interval.\r\n * @param {Timeout | string | number} timer\r\n * @returns {void}\r\n */\r\nfunction clearInterval(timer) {\r\n  // clearTimeout and clearInterval can be used to clear timers created from\r\n  // both setTimeout and setInterval, as specified by HTML Living Standard:\r\n  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval\r\n  clearTimeout(timer);\r\n}\r\n\r\nTimeout.prototype.close = function() {\r\n  clearTimeout(this);\r\n  return this;\r\n};\r\n\r\nTimeout.prototype[SymbolDispose] = function() {\r\n  clearTimeout(this);\r\n};\r\n\r\n/**\r\n * Coerces a `Timeout` to a primitive.\r\n * @returns {number}\r\n */\r\nTimeout.prototype[SymbolToPrimitive] = function() {\r\n  const id = this[async_id_symbol];\r\n  if (!this[kHasPrimitive]) {\r\n    this[kHasPrimitive] = true;\r\n    knownTimersById[id] = this;\r\n  }\r\n  return id;\r\n};\r\n\r\n/**\r\n * Schedules the immediate execution of `callback`\r\n * after I/O events' callbacks.\r\n * @param {Function} callback\r\n * @param {any} [arg1]\r\n * @param {any} [arg2]\r\n * @param {any} [arg3]\r\n * @returns {Immediate}\r\n */\r\nfunction setImmediate(callback, arg1, arg2, arg3) {\r\n  validateFunction(callback, 'callback');\r\n\r\n  let i, args;\r\n  switch (arguments.length) {\r\n    // fast cases\r\n    case 1:\r\n      break;\r\n    case 2:\r\n      args = [arg1];\r\n      break;\r\n    case 3:\r\n      args = [arg1, arg2];\r\n      break;\r\n    default:\r\n      args = [arg1, arg2, arg3];\r\n      for (i = 4; i < arguments.length; i++) {\r\n        // Extend array dynamically, makes .apply run much faster in v6.0.0\r\n        args[i - 1] = arguments[i];\r\n      }\r\n      break;\r\n  }\r\n\r\n  return new Immediate(callback, args);\r\n}\r\n\r\nObjectDefineProperty(setImmediate, customPromisify, {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get() {\r\n    if (!timersPromises)\r\n      timersPromises = require('timers/promises');\r\n    return timersPromises.setImmediate;\r\n  },\r\n});\r\n\r\n/**\r\n * Cancels an immediate.\r\n * @param {Immediate} immediate\r\n * @returns {void}\r\n */\r\nfunction clearImmediate(immediate) {\r\n  if (!immediate || immediate._destroyed)\r\n    return;\r\n\r\n  immediateInfo[kCount]--;\r\n  immediate._destroyed = true;\r\n\r\n  if (immediate[kRefed] && --immediateInfo[kRefCount] === 0) {\r\n    // We need to use the binding as the receiver for fast API calls.\r\n    binding.toggleImmediateRef(false);\r\n  }\r\n  immediate[kRefed] = null;\r\n\r\n  if (destroyHooksExist() && immediate[async_id_symbol] !== undefined) {\r\n    emitDestroy(immediate[async_id_symbol]);\r\n  }\r\n\r\n  immediate._onImmediate = null;\r\n\r\n  immediateQueue.remove(immediate);\r\n}\r\n\r\nImmediate.prototype[SymbolDispose] = function() {\r\n  clearImmediate(this);\r\n};\r\n\r\nmodule.exports = timers = {\r\n  setTimeout,\r\n  clearTimeout,\r\n  setImmediate,\r\n  clearImmediate,\r\n  setInterval,\r\n  clearInterval,\r\n  _unrefActive: deprecate(\r\n    unrefActive,\r\n    'timers._unrefActive() is deprecated.' +\r\n    ' Please use timeout.refresh() instead.',\r\n    'DEP0127'),\r\n  active: deprecate(\r\n    active,\r\n    'timers.active() is deprecated. Please use timeout.refresh() instead.',\r\n    'DEP0126'),\r\n  unenroll: deprecate(\r\n    unenroll,\r\n    'timers.unenroll() is deprecated. Please use clearTimeout instead.',\r\n    'DEP0096'),\r\n  enroll: deprecate(\r\n    enroll,\r\n    'timers.enroll() is deprecated. Please use setTimeout instead.',\r\n    'DEP0095'),\r\n};\r\n\r\nObjectDefineProperties(timers, {\r\n  promises: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      timersPromises ??= require('timers/promises');\r\n      return timersPromises;\r\n    },\r\n  },\r\n});\r\n"
  },
  "37": {
    "metadata": {
      "scriptId": "37",
      "url": "node:internal/process/execution",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 249,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "633b2e2ae32441723d8e82cd1ab0bf963908634d0a6a67d15449c985d0bb2fa1",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 8380,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/execution"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  RegExpPrototypeExec,\r\n  Symbol,\r\n  globalThis,\r\n} = primordials;\r\n\r\nconst path = require('path');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_EVAL_ESM_CANNOT_PRINT,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET,\r\n  },\r\n} = require('internal/errors');\r\nconst { pathToFileURL } = require('internal/url');\r\nconst { exitCodes: { kGenericUserError } } = internalBinding('errors');\r\n\r\nconst {\r\n  executionAsyncId,\r\n  clearDefaultTriggerAsyncId,\r\n  clearAsyncIdStack,\r\n  hasAsyncIdStack,\r\n  afterHooksExist,\r\n  emitAfter,\r\n  popAsyncContext,\r\n} = require('internal/async_hooks');\r\nconst { containsModuleSyntax } = internalBinding('contextify');\r\nconst { getOptionValue } = require('internal/options');\r\nconst {\r\n  makeContextifyScript, runScriptInThisContext,\r\n} = require('internal/vm');\r\n// shouldAbortOnUncaughtToggle is a typed array for faster\r\n// communication with JS.\r\nconst { shouldAbortOnUncaughtToggle } = internalBinding('util');\r\n\r\nfunction tryGetCwd() {\r\n  try {\r\n    return process.cwd();\r\n  } catch {\r\n    // getcwd(3) can fail if the current working directory has been deleted.\r\n    // Fall back to the directory name of the (absolute) executable path.\r\n    // It's not really correct but what are the alternatives?\r\n    return path.dirname(process.execPath);\r\n  }\r\n}\r\n\r\nlet evalIndex = 0;\r\nfunction getEvalModuleUrl() {\r\n  return pathToFileURL(`${process.cwd()}/[eval${++evalIndex}]`).href;\r\n}\r\n\r\n/**\r\n * Evaluate an ESM entry point and return the promise that gets fulfilled after\r\n * it finishes evaluation.\r\n * @param {string} source Source code the ESM\r\n * @param {boolean} print Whether the result should be printed.\r\n * @returns {Promise}\r\n */\r\nfunction evalModuleEntryPoint(source, print) {\r\n  if (print) {\r\n    throw new ERR_EVAL_ESM_CANNOT_PRINT();\r\n  }\r\n  RegExpPrototypeExec(/^/, ''); // Necessary to reset RegExp statics before user code runs.\r\n  return require('internal/modules/run_main').runEntryPointWithESMLoader(\r\n    (loader) => loader.eval(source, getEvalModuleUrl(), true),\r\n  );\r\n}\r\n\r\nfunction evalScript(name, body, breakFirstLine, print, shouldLoadESM = false) {\r\n  const CJSModule = require('internal/modules/cjs/loader').Module;\r\n\r\n  const cwd = tryGetCwd();\r\n  const origModule = globalThis.module;  // Set e.g. when called from the REPL.\r\n\r\n  const module = new CJSModule(name);\r\n  module.filename = path.join(cwd, name);\r\n  module.paths = CJSModule._nodeModulePaths(cwd);\r\n\r\n  const baseUrl = pathToFileURL(module.filename).href;\r\n\r\n  if (getOptionValue('--experimental-detect-module') &&\r\n    getOptionValue('--input-type') === '' && getOptionValue('--experimental-default-type') === '' &&\r\n    containsModuleSyntax(body, name, null, 'no CJS variables')) {\r\n    return evalModuleEntryPoint(body, print);\r\n  }\r\n\r\n  const runScript = () => {\r\n    // Create wrapper for cache entry\r\n    const script = `\r\n      globalThis.module = module;\r\n      globalThis.exports = exports;\r\n      globalThis.__dirname = __dirname;\r\n      globalThis.require = require;\r\n      return (main) => main();\r\n    `;\r\n    globalThis.__filename = name;\r\n    RegExpPrototypeExec(/^/, ''); // Necessary to reset RegExp statics before user code runs.\r\n    const result = module._compile(script, `${name}-wrapper`)(() => {\r\n      const hostDefinedOptionId = Symbol(name);\r\n      async function importModuleDynamically(specifier, _, importAttributes) {\r\n        const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n        return cascadedLoader.import(specifier, baseUrl, importAttributes);\r\n      }\r\n      const script = makeContextifyScript(\r\n        body,                    // code\r\n        name,                    // filename,\r\n        0,                       // lineOffset\r\n        0,                       // columnOffset,\r\n        undefined,               // cachedData\r\n        false,                   // produceCachedData\r\n        undefined,               // parsingContext\r\n        hostDefinedOptionId,     // hostDefinedOptionId\r\n        importModuleDynamically, // importModuleDynamically\r\n      );\r\n      return runScriptInThisContext(script, true, !!breakFirstLine);\r\n    });\r\n    if (print) {\r\n      const { log } = require('internal/console/global');\r\n\r\n      process.on('exit', () => {\r\n        log(result);\r\n      });\r\n    }\r\n\r\n    if (origModule !== undefined)\r\n      globalThis.module = origModule;\r\n  };\r\n\r\n  if (shouldLoadESM) {\r\n    require('internal/modules/run_main').runEntryPointWithESMLoader(runScript);\r\n    return;\r\n  }\r\n  runScript();\r\n}\r\n\r\nconst exceptionHandlerState = {\r\n  captureFn: null,\r\n  reportFlag: false,\r\n};\r\n\r\nfunction setUncaughtExceptionCaptureCallback(fn) {\r\n  if (fn === null) {\r\n    exceptionHandlerState.captureFn = fn;\r\n    shouldAbortOnUncaughtToggle[0] = 1;\r\n    process.report.reportOnUncaughtException = exceptionHandlerState.reportFlag;\r\n    return;\r\n  }\r\n  if (typeof fn !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'null'], fn);\r\n  }\r\n  if (exceptionHandlerState.captureFn !== null) {\r\n    throw new ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET();\r\n  }\r\n  exceptionHandlerState.captureFn = fn;\r\n  shouldAbortOnUncaughtToggle[0] = 0;\r\n  exceptionHandlerState.reportFlag =\r\n    process.report.reportOnUncaughtException === true;\r\n  process.report.reportOnUncaughtException = false;\r\n}\r\n\r\nfunction hasUncaughtExceptionCaptureCallback() {\r\n  return exceptionHandlerState.captureFn !== null;\r\n}\r\n\r\nfunction noop() {}\r\n\r\n// XXX(joyeecheung): for some reason this cannot be defined at the top-level\r\n// and exported to be written to process._fatalException, it has to be\r\n// returned as an *anonymous function* wrapped inside a factory function,\r\n// otherwise it breaks the test-timers.setInterval async hooks test -\r\n// this may indicate that node::errors::TriggerUncaughtException() should\r\n// fix up the callback scope before calling into process._fatalException,\r\n// or this function should take extra care of the async hooks before it\r\n// schedules a setImmediate.\r\nfunction createOnGlobalUncaughtException() {\r\n  // The C++ land node::errors::TriggerUncaughtException() will\r\n  // exit the process if it returns false, and continue execution if it\r\n  // returns true (which indicates that the exception is handled by the user).\r\n  return (er, fromPromise) => {\r\n    // It's possible that defaultTriggerAsyncId was set for a constructor\r\n    // call that threw and was never cleared. So clear it now.\r\n    clearDefaultTriggerAsyncId();\r\n\r\n    const type = fromPromise ? 'unhandledRejection' : 'uncaughtException';\r\n    process.emit('uncaughtExceptionMonitor', er, type);\r\n    if (exceptionHandlerState.captureFn !== null) {\r\n      exceptionHandlerState.captureFn(er);\r\n    } else if (!process.emit('uncaughtException', er, type)) {\r\n      // If someone handled it, then great. Otherwise, die in C++ land\r\n      // since that means that we'll exit the process, emit the 'exit' event.\r\n      try {\r\n        if (!process._exiting) {\r\n          process._exiting = true;\r\n          process.exitCode = kGenericUserError;\r\n          process.emit('exit', kGenericUserError);\r\n        }\r\n      } catch {\r\n        // Nothing to be done about it at this point.\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // If we handled an error, then make sure any ticks get processed\r\n    // by ensuring that the next Immediate cycle isn't empty.\r\n    require('timers').setImmediate(noop);\r\n\r\n    // Emit the after() hooks now that the exception has been handled.\r\n    if (afterHooksExist()) {\r\n      do {\r\n        const asyncId = executionAsyncId();\r\n        if (asyncId === 0)\r\n          popAsyncContext(0);\r\n        else\r\n          emitAfter(asyncId);\r\n      } while (hasAsyncIdStack());\r\n    }\r\n    // And completely empty the id stack, including anything that may be\r\n    // cached on the native side.\r\n    clearAsyncIdStack();\r\n\r\n    return true;\r\n  };\r\n}\r\n\r\nfunction readStdin(callback) {\r\n  process.stdin.setEncoding('utf8');\r\n\r\n  let code = '';\r\n  process.stdin.on('data', (d) => {\r\n    code += d;\r\n  });\r\n\r\n  process.stdin.on('end', () => {\r\n    callback(code);\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  readStdin,\r\n  tryGetCwd,\r\n  evalModuleEntryPoint,\r\n  evalScript,\r\n  onGlobalUncaughtException: createOnGlobalUncaughtException(),\r\n  setUncaughtExceptionCaptureCallback,\r\n  hasUncaughtExceptionCaptureCallback,\r\n};\r\n"
  },
  "38": {
    "metadata": {
      "scriptId": "38",
      "url": "node:internal/vm",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 229,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "0ce16b2f53eb86deb82cd5925207bceaa98b988f9ac1ebb20ad1c2fbbb61e92a",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 8961,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/vm"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ReflectApply,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  ContextifyScript,\r\n  compileFunction,\r\n} = internalBinding('contextify');\r\nconst {\r\n  runInContext,\r\n} = ContextifyScript.prototype;\r\nconst {\r\n  vm_dynamic_import_default_internal,\r\n  vm_dynamic_import_main_context_default,\r\n  vm_dynamic_import_no_callback,\r\n  vm_dynamic_import_missing_flag,\r\n} = internalBinding('symbols');\r\nconst {\r\n  validateFunction,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  getOptionValue,\r\n} = require('internal/options');\r\nconst {\r\n  privateSymbols: {\r\n    contextify_context_private_symbol,\r\n  },\r\n} = internalBinding('util');\r\n\r\n/**\r\n * Checks if the given object is a context object.\r\n * @param {object} object - The object to check.\r\n * @returns {boolean} - Returns true if the object is a context object, else false.\r\n */\r\nfunction isContext(object) {\r\n  return object[contextify_context_private_symbol] !== undefined;\r\n}\r\n\r\n/**\r\n * Retrieves the host-defined option ID based on the provided importModuleDynamically and hint.\r\n * @param {import('internal/modules/esm/utils').ImportModuleDynamicallyCallback | undefined} importModuleDynamically -\r\n * The importModuleDynamically function or undefined.\r\n * @param {string} hint - The hint for the option ID.\r\n * @returns {symbol | import('internal/modules/esm/utils').ImportModuleDynamicallyCallback} - The host-defined option\r\n * ID.\r\n */\r\nfunction getHostDefinedOptionId(importModuleDynamically, hint) {\r\n  if (importModuleDynamically === vm_dynamic_import_main_context_default ||\r\n      importModuleDynamically === vm_dynamic_import_default_internal) {\r\n    return importModuleDynamically;\r\n  }\r\n\r\n  if (importModuleDynamically !== undefined) {\r\n    // Check that it's either undefined or a function before we pass\r\n    // it into the native constructor.\r\n    validateFunction(importModuleDynamically,\r\n                     'options.importModuleDynamically');\r\n  }\r\n  if (importModuleDynamically === undefined) {\r\n    // We need a default host defined options that are the same for all\r\n    // scripts not needing custom module callbacks so that the isolate\r\n    // compilation cache can be hit.\r\n    return vm_dynamic_import_no_callback;\r\n  }\r\n  // We should've thrown here immediately when we introduced\r\n  // --experimental-vm-modules and importModuleDynamically, but since\r\n  // users are already using this callback to throw a similar error,\r\n  // we also defer the error to the time when an actual import() is called\r\n  // to avoid breaking them. To ensure that the isolate compilation\r\n  // cache can still be hit, use a constant sentinel symbol here.\r\n  if (!getOptionValue('--experimental-vm-modules')) {\r\n    return vm_dynamic_import_missing_flag;\r\n  }\r\n\r\n  return Symbol(hint);\r\n}\r\n\r\n/**\r\n * Registers a dynamically imported module for customization.\r\n * @param {string} referrer - The path of the referrer module.\r\n * @param {import('internal/modules/esm/utils').ImportModuleDynamicallyCallback} importModuleDynamically - The\r\n * dynamically imported module function to be registered.\r\n */\r\nfunction registerImportModuleDynamically(referrer, importModuleDynamically) {\r\n  // If it's undefined or certain known symbol, there's no customization so\r\n  // no need to register anything.\r\n  if (importModuleDynamically === undefined ||\r\n      importModuleDynamically === vm_dynamic_import_main_context_default ||\r\n      importModuleDynamically === vm_dynamic_import_default_internal) {\r\n    return;\r\n  }\r\n  const { importModuleDynamicallyWrap } = require('internal/vm/module');\r\n  const { registerModule } = require('internal/modules/esm/utils');\r\n  registerModule(referrer, {\r\n    __proto__: null,\r\n    importModuleDynamically:\r\n      importModuleDynamicallyWrap(importModuleDynamically),\r\n  });\r\n}\r\n\r\n/**\r\n * Compiles a function from the given code string.\r\n * @param {string} code - The code string to compile.\r\n * @param {string} filename - The filename to use for the compiled function.\r\n * @param {number} lineOffset - The line offset to use for the compiled function.\r\n * @param {number} columnOffset - The column offset to use for the compiled function.\r\n * @param {Buffer} [cachedData=undefined] - The cached data to use for the compiled function.\r\n * @param {boolean} produceCachedData - Whether to produce cached data for the compiled function.\r\n * @param {ReturnType<import('vm').createContext} [parsingContext=undefined] - The parsing context to use for the\r\n * compiled function.\r\n * @param {object[]} [contextExtensions=[]] - An array of context extensions to use for the compiled function.\r\n * @param {string[]} [params] - An optional array of parameter names for the compiled function.\r\n * @param {symbol} hostDefinedOptionId - A symbol referenced by the field `host_defined_option_symbol`.\r\n * @param {import('internal/modules/esm/utils').ImportModuleDynamicallyCallback} [importModuleDynamically] -\r\n * A function to use for dynamically importing modules.\r\n * @returns {object} An object containing the compiled function and any associated data.\r\n * @throws {TypeError} If any of the arguments are of the wrong type.\r\n * @throws {ERR_INVALID_ARG_TYPE} If the parsing context is not a valid context object.\r\n */\r\nfunction internalCompileFunction(\r\n  code, filename, lineOffset, columnOffset,\r\n  cachedData, produceCachedData, parsingContext, contextExtensions,\r\n  params, hostDefinedOptionId, importModuleDynamically) {\r\n  const result = compileFunction(\r\n    code,\r\n    filename,\r\n    lineOffset,\r\n    columnOffset,\r\n    cachedData,\r\n    produceCachedData,\r\n    parsingContext,\r\n    contextExtensions,\r\n    params,\r\n    hostDefinedOptionId,\r\n  );\r\n\r\n  if (produceCachedData) {\r\n    result.function.cachedDataProduced = result.cachedDataProduced;\r\n  }\r\n\r\n  if (result.cachedData) {\r\n    result.function.cachedData = result.cachedData;\r\n  }\r\n\r\n  if (typeof result.cachedDataRejected === 'boolean') {\r\n    result.function.cachedDataRejected = result.cachedDataRejected;\r\n  }\r\n\r\n  registerImportModuleDynamically(result.function, importModuleDynamically);\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a contextify script.\r\n * @param {string} code - The code of the script.\r\n * @param {string} filename - The filename of the script.\r\n * @param {number} lineOffset - The line offset of the script.\r\n * @param {number} columnOffset - The column offset of the script.\r\n * @param {Buffer} cachedData - The cached data of the script.\r\n * @param {boolean} produceCachedData - Indicates whether to produce cached data.\r\n * @param {object} parsingContext - The parsing context of the script.\r\n * @param {number} hostDefinedOptionId - The host-defined option ID.\r\n * @param {boolean} importModuleDynamically - Indicates whether to import modules dynamically.\r\n * @returns {ContextifyScript} The created contextify script.\r\n */\r\nfunction makeContextifyScript(code,\r\n                              filename,\r\n                              lineOffset,\r\n                              columnOffset,\r\n                              cachedData,\r\n                              produceCachedData,\r\n                              parsingContext,\r\n                              hostDefinedOptionId,\r\n                              importModuleDynamically) {\r\n  let script;\r\n  // Calling `ReThrow()` on a native TryCatch does not generate a new\r\n  // abort-on-uncaught-exception check. A dummy try/catch in JS land\r\n  // protects against that.\r\n  try { // eslint-disable-line no-useless-catch\r\n    script = new ContextifyScript(code,\r\n                                  filename,\r\n                                  lineOffset,\r\n                                  columnOffset,\r\n                                  cachedData,\r\n                                  produceCachedData,\r\n                                  parsingContext,\r\n                                  hostDefinedOptionId);\r\n  } catch (e) {\r\n    throw e; /* node-do-not-add-exception-line */\r\n  }\r\n\r\n  registerImportModuleDynamically(script, importModuleDynamically);\r\n  return script;\r\n}\r\n\r\n/**\r\n * Runs a script in the current context.\r\n * Internal version of `vm.Script.prototype.runInThisContext()` which skips argument validation.\r\n * @param {ReturnType<makeContextifyScript>} script - The script to run.\r\n * @param {boolean} displayErrors - Whether to display errors.\r\n * @param {boolean} breakOnFirstLine - Whether to break on the first line.\r\n */\r\nfunction runScriptInThisContext(script, displayErrors, breakOnFirstLine) {\r\n  return ReflectApply(\r\n    runInContext,\r\n    script,\r\n    [\r\n      null,                // sandbox - use current context\r\n      -1,                  // timeout\r\n      displayErrors,       // displayErrors\r\n      false,               // breakOnSigint\r\n      breakOnFirstLine,    // breakOnFirstLine\r\n    ],\r\n  );\r\n}\r\n\r\nmodule.exports = {\r\n  getHostDefinedOptionId,\r\n  internalCompileFunction,\r\n  isContext,\r\n  makeContextifyScript,\r\n  registerImportModuleDynamically,\r\n  runScriptInThisContext,\r\n};\r\n"
  },
  "39": {
    "metadata": {
      "scriptId": "39",
      "url": "node:internal/process/warning",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 217,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "8da6d076045f4b160c3195e13076206b865cb13aa14a10828eaeb7f85d450a54",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 6270,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/warning"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  Error,\r\n  ErrorCaptureStackTrace,\r\n  ErrorPrototypeToString,\r\n  SafeSet,\r\n  String,\r\n} = primordials;\r\n\r\nconst {\r\n  getOptionValue,\r\n} = require('internal/options');\r\n\r\nconst assert = require('internal/assert');\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n  },\r\n  isErrorStackTraceLimitWritable,\r\n} = require('internal/errors');\r\nconst { validateString } = require('internal/validators');\r\n\r\n// Lazily loaded\r\nlet fs;\r\nlet fd;\r\nlet warningFile;\r\nlet options;\r\nlet traceWarningHelperShown = false;\r\n\r\nfunction resetForSerialization() {\r\n  if (fd !== undefined) {\r\n    process.removeListener('exit', closeFdOnExit);\r\n  }\r\n  fd = undefined;\r\n  warningFile = undefined;\r\n  traceWarningHelperShown = false;\r\n}\r\n\r\nfunction lazyOption() {\r\n  // This will load `warningFile` only once. If the flag is not set,\r\n  // `warningFile` will be set to an empty string.\r\n  if (warningFile === undefined) {\r\n    options = require('internal/options');\r\n    if (options.getOptionValue('--diagnostic-dir') !== '') {\r\n      warningFile = options.getOptionValue('--diagnostic-dir');\r\n    }\r\n    if (options.getOptionValue('--redirect-warnings') !== '') {\r\n      warningFile = options.getOptionValue('--redirect-warnings');\r\n    } else {\r\n      warningFile = '';\r\n    }\r\n  }\r\n  return warningFile;\r\n}\r\n\r\n// If we can't write to stderr, we'd like to make this a noop,\r\n// so use console.error.\r\nlet error;\r\nfunction writeOut(message) {\r\n  if (!error) {\r\n    error = require('internal/console/global').error;\r\n  }\r\n  error(message);\r\n}\r\n\r\nfunction closeFdOnExit() {\r\n  try {\r\n    fs.closeSync(fd);\r\n  } catch {\r\n    // Continue regardless of error.\r\n  }\r\n}\r\n\r\nfunction writeToFile(message) {\r\n  if (fd === undefined) {\r\n    fs = require('fs');\r\n    try {\r\n      fd = fs.openSync(warningFile, 'a');\r\n    } catch {\r\n      return writeOut(message);\r\n    }\r\n    process.on('exit', closeFdOnExit);\r\n  }\r\n  fs.appendFile(fd, `${message}\\n`, (err) => {\r\n    if (err) {\r\n      writeOut(message);\r\n    }\r\n  });\r\n}\r\n\r\nfunction doEmitWarning(warning) {\r\n  process.emit('warning', warning);\r\n}\r\n\r\nlet disableWarningSet;\r\n\r\nfunction onWarning(warning) {\r\n  if (!disableWarningSet) {\r\n    disableWarningSet = new SafeSet();\r\n    const disableWarningValues = getOptionValue('--disable-warning');\r\n    for (let i = 0; i < disableWarningValues.length; i++) {\r\n      disableWarningSet.add(disableWarningValues[i]);\r\n    }\r\n  }\r\n  if ((warning?.code && disableWarningSet.has(warning.code)) ||\r\n      (warning?.name && disableWarningSet.has(warning.name))) return;\r\n\r\n  if (!(warning instanceof Error)) return;\r\n\r\n  const isDeprecation = warning.name === 'DeprecationWarning';\r\n  if (isDeprecation && process.noDeprecation) return;\r\n  const trace = process.traceProcessWarnings ||\r\n                (isDeprecation && process.traceDeprecation);\r\n  let msg = `(${process.release.name}:${process.pid}) `;\r\n  if (warning.code)\r\n    msg += `[${warning.code}] `;\r\n  if (trace && warning.stack) {\r\n    msg += `${warning.stack}`;\r\n  } else {\r\n    msg +=\r\n      typeof warning.toString === 'function' ?\r\n        `${warning.toString()}` :\r\n        ErrorPrototypeToString(warning);\r\n  }\r\n  if (typeof warning.detail === 'string') {\r\n    msg += `\\n${warning.detail}`;\r\n  }\r\n  if (!trace && !traceWarningHelperShown) {\r\n    const flag = isDeprecation ? '--trace-deprecation' : '--trace-warnings';\r\n    const argv0 = require('path').basename(process.argv0 || 'node', '.exe');\r\n    msg += `\\n(Use \\`${argv0} ${flag} ...\\` to show where the warning ` +\r\n           'was created)';\r\n    traceWarningHelperShown = true;\r\n  }\r\n  const warningFile = lazyOption();\r\n  if (warningFile) {\r\n    return writeToFile(msg);\r\n  }\r\n  writeOut(msg);\r\n}\r\n\r\n// process.emitWarning(error)\r\n// process.emitWarning(str[, type[, code]][, ctor])\r\n// process.emitWarning(str[, options])\r\nfunction emitWarning(warning, type, code, ctor) {\r\n  // Fast path to avoid memory allocation,\r\n  // this doesn't eliminate the other if a few lines below\r\n  if (process.noDeprecation && type === 'DeprecationWarning') {\r\n    return;\r\n  }\r\n  let detail;\r\n  if (type !== null && typeof type === 'object' && !ArrayIsArray(type)) {\r\n    ctor = type.ctor;\r\n    code = type.code;\r\n    if (typeof type.detail === 'string')\r\n      detail = type.detail;\r\n    type = type.type || 'Warning';\r\n  } else if (typeof type === 'function') {\r\n    ctor = type;\r\n    code = undefined;\r\n    type = 'Warning';\r\n  }\r\n  if (type !== undefined)\r\n    validateString(type, 'type');\r\n  if (typeof code === 'function') {\r\n    ctor = code;\r\n    code = undefined;\r\n  } else if (code !== undefined) {\r\n    validateString(code, 'code');\r\n  }\r\n  if (typeof warning === 'string') {\r\n    warning = createWarningObject(warning, type, code, ctor, detail);\r\n  } else if (!(warning instanceof Error)) {\r\n    throw new ERR_INVALID_ARG_TYPE('warning', ['Error', 'string'], warning);\r\n  }\r\n  if (warning.name === 'DeprecationWarning') {\r\n    if (process.noDeprecation)\r\n      return;\r\n    if (process.throwDeprecation) {\r\n      // Delay throwing the error to guarantee that all former warnings were\r\n      // properly logged.\r\n      return process.nextTick(() => {\r\n        throw warning;\r\n      });\r\n    }\r\n  }\r\n  process.nextTick(doEmitWarning, warning);\r\n}\r\n\r\nfunction emitWarningSync(warning, type, code, ctor) {\r\n  process.emit('warning', createWarningObject(warning, type, code, ctor));\r\n}\r\n\r\nfunction createWarningObject(warning, type, code, ctor, detail) {\r\n  assert(typeof warning === 'string');\r\n  // Improve error creation performance by skipping the error frames.\r\n  // They are added in the `captureStackTrace()` function below.\r\n  const tmpStackLimit = Error.stackTraceLimit;\r\n  if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  warning = new Error(warning);\r\n  if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = tmpStackLimit;\r\n  warning.name = String(type || 'Warning');\r\n  if (code !== undefined) warning.code = code;\r\n  if (detail !== undefined) warning.detail = detail;\r\n  ErrorCaptureStackTrace(warning, ctor || process.emitWarning);\r\n  return warning;\r\n}\r\n\r\nmodule.exports = {\r\n  emitWarning,\r\n  emitWarningSync,\r\n  onWarning,\r\n  resetForSerialization,\r\n};\r\n"
  },
  "40": {
    "metadata": {
      "scriptId": "40",
      "url": "node:internal/source_map/source_map_cache",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 366,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "4665e31584858e87a22b39b5b9724aefb406b4bcdd85620632b614ce176e4dae",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 12828,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/source_map/source_map_cache"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePush,\r\n  JSONParse,\r\n  RegExpPrototypeExec,\r\n  SafeMap,\r\n  StringPrototypeCodePointAt,\r\n  StringPrototypeSplit,\r\n} = primordials;\r\n\r\n// See https://sourcemaps.info/spec.html for SourceMap V3 specification.\r\nconst { Buffer } = require('buffer');\r\nlet debug = require('internal/util/debuglog').debuglog('source_map', (fn) => {\r\n  debug = fn;\r\n});\r\n\r\nconst { validateBoolean } = require('internal/validators');\r\nconst {\r\n  setSourceMapsEnabled: setSourceMapsNative,\r\n} = internalBinding('errors');\r\nconst {\r\n  setInternalPrepareStackTrace,\r\n} = require('internal/errors');\r\nconst { getLazy } = require('internal/util');\r\n\r\nconst getModuleSourceMapCache = getLazy(() => {\r\n  const { SourceMapCacheMap } = require('internal/source_map/source_map_cache_map');\r\n  return new SourceMapCacheMap();\r\n});\r\n\r\n// The generated source module/script instance is not accessible, so we can use\r\n// a Map without memory concerns. Separate generated source entries with the module\r\n// source entries to avoid overriding the module source entries with arbitrary\r\n// source url magic comments.\r\nconst generatedSourceMapCache = new SafeMap();\r\nconst kLeadingProtocol = /^\\w+:\\/\\//;\r\nconst kSourceMappingURLMagicComment = /\\/[*/]#\\s+sourceMappingURL=(?<sourceMappingURL>[^\\s]+)/g;\r\nconst kSourceURLMagicComment = /\\/[*/]#\\s+sourceURL=(?<sourceURL>[^\\s]+)/g;\r\n\r\nconst { isAbsolute } = require('path');\r\nconst { fileURLToPath, pathToFileURL, URL } = require('internal/url');\r\n\r\nlet SourceMap;\r\n\r\n// This is configured with --enable-source-maps during pre-execution.\r\nlet sourceMapsEnabled = false;\r\nfunction getSourceMapsEnabled() {\r\n  return sourceMapsEnabled;\r\n}\r\n\r\n/**\r\n * Enables or disables source maps programmatically.\r\n * @param {boolean} val\r\n */\r\nfunction setSourceMapsEnabled(val) {\r\n  validateBoolean(val, 'val');\r\n\r\n  setSourceMapsNative(val);\r\n  if (val) {\r\n    const {\r\n      prepareStackTraceWithSourceMaps,\r\n    } = require('internal/source_map/prepare_stack_trace');\r\n    setInternalPrepareStackTrace(prepareStackTraceWithSourceMaps);\r\n  } else if (sourceMapsEnabled !== undefined) {\r\n    // Reset prepare stack trace callback only when disabling source maps.\r\n    const {\r\n      defaultPrepareStackTrace,\r\n    } = require('internal/errors');\r\n    setInternalPrepareStackTrace(defaultPrepareStackTrace);\r\n  }\r\n\r\n  sourceMapsEnabled = val;\r\n}\r\n\r\n/**\r\n * Extracts the source url from the content if present. For example\r\n * //# sourceURL=file:///path/to/file\r\n *\r\n * Read more at: https://tc39.es/source-map-spec/#linking-evald-code-to-named-generated-code\r\n * @param {string} content - source content\r\n * @returns {string | null} source url or null if not present\r\n */\r\nfunction extractSourceURLMagicComment(content) {\r\n  let match;\r\n  let matchSourceURL;\r\n  // A while loop is used here to get the last occurrence of sourceURL.\r\n  // This is needed so that we don't match sourceURL in string literals.\r\n  while ((match = RegExpPrototypeExec(kSourceURLMagicComment, content))) {\r\n    matchSourceURL = match;\r\n  }\r\n  if (matchSourceURL == null) {\r\n    return null;\r\n  }\r\n  let sourceURL = matchSourceURL.groups.sourceURL;\r\n  if (sourceURL != null && RegExpPrototypeExec(kLeadingProtocol, sourceURL) === null) {\r\n    sourceURL = pathToFileURL(sourceURL).href;\r\n  }\r\n  return sourceURL;\r\n}\r\n\r\n/**\r\n * Extracts the source map url from the content if present. For example\r\n * //# sourceMappingURL=file:///path/to/file\r\n *\r\n * Read more at: https://tc39.es/source-map-spec/#linking-generated-code\r\n * @param {string} content - source content\r\n * @returns {string | null} source map url or null if not present\r\n */\r\nfunction extractSourceMapURLMagicComment(content) {\r\n  let match;\r\n  let lastMatch;\r\n  // A while loop is used here to get the last occurrence of sourceMappingURL.\r\n  // This is needed so that we don't match sourceMappingURL in string literals.\r\n  while ((match = RegExpPrototypeExec(kSourceMappingURLMagicComment, content))) {\r\n    lastMatch = match;\r\n  }\r\n  if (lastMatch == null) {\r\n    return null;\r\n  }\r\n  return lastMatch.groups.sourceMappingURL;\r\n}\r\n\r\n/**\r\n * Caches the source map if it is present in the content, with the given filename, moduleInstance, and sourceURL.\r\n * @param {string} filename - the actual filename\r\n * @param {string} content - the actual source content\r\n * @param {import('internal/modules/cjs/loader').Module | ModuleWrap} moduleInstance - a module instance that\r\n * associated with the source, once this is reclaimed, the source map entry will be removed from the cache\r\n * @param {boolean} isGeneratedSource - if the source was generated and evaluated with the global eval\r\n * @param {string | undefined} sourceURL - the source url\r\n * @param {string | undefined} sourceMapURL - the source map url\r\n */\r\nfunction maybeCacheSourceMap(filename, content, moduleInstance, isGeneratedSource, sourceURL, sourceMapURL) {\r\n  const sourceMapsEnabled = getSourceMapsEnabled();\r\n  if (!(process.env.NODE_V8_COVERAGE || sourceMapsEnabled)) return;\r\n  const { normalizeReferrerURL } = require('internal/modules/helpers');\r\n  filename = normalizeReferrerURL(filename);\r\n  if (filename === undefined) {\r\n    // This is most likely an invalid filename in sourceURL of [eval]-wrapper.\r\n    return;\r\n  }\r\n\r\n  if (sourceMapURL === undefined) {\r\n    sourceMapURL = extractSourceMapURLMagicComment(content);\r\n  }\r\n\r\n  // Bail out when there is no source map url.\r\n  if (typeof sourceMapURL !== 'string') {\r\n    return;\r\n  }\r\n\r\n  // FIXME: callers should obtain sourceURL from v8 and pass it\r\n  // rather than leaving it undefined and extract by regex.\r\n  if (sourceURL === undefined) {\r\n    sourceURL = extractSourceURLMagicComment(content);\r\n  }\r\n\r\n  const data = dataFromUrl(filename, sourceMapURL);\r\n  const entry = {\r\n    __proto__: null,\r\n    lineLengths: lineLengths(content),\r\n    data,\r\n    // Save the source map url if it is not a data url.\r\n    sourceMapURL: data ? null : sourceMapURL,\r\n    sourceURL,\r\n  };\r\n\r\n  if (isGeneratedSource) {\r\n    generatedSourceMapCache.set(filename, entry);\r\n    if (sourceURL) {\r\n      generatedSourceMapCache.set(sourceURL, entry);\r\n    }\r\n    return;\r\n  }\r\n  // If it is not a generated source, we assume we are in a \"cjs/esm\"\r\n  // context.\r\n  const keys = sourceURL ? [filename, sourceURL] : [filename];\r\n  getModuleSourceMapCache().set(keys, entry, moduleInstance);\r\n}\r\n\r\n/**\r\n * Caches the source map if it is present in the eval'd source.\r\n * @param {string} content - the eval'd source code\r\n */\r\nfunction maybeCacheGeneratedSourceMap(content) {\r\n  const sourceMapsEnabled = getSourceMapsEnabled();\r\n  if (!(process.env.NODE_V8_COVERAGE || sourceMapsEnabled)) return;\r\n\r\n  const sourceURL = extractSourceURLMagicComment(content);\r\n  if (sourceURL === null) {\r\n    return;\r\n  }\r\n  try {\r\n    maybeCacheSourceMap(sourceURL, content, null, true, sourceURL);\r\n  } catch (err) {\r\n    // This can happen if the filename is not a valid URL.\r\n    // If we fail to cache the source map, we should not fail the whole process.\r\n    debug(err);\r\n  }\r\n}\r\n\r\n/**\r\n * Resolves source map payload data from the source url and source map url.\r\n * If the source map url is a data url, the data is returned.\r\n * Otherwise the source map url is resolved to a file path and the file is read.\r\n * @param {string} sourceURL - url of the source file\r\n * @param {string} sourceMappingURL - url of the source map\r\n * @returns {object} deserialized source map JSON object\r\n */\r\nfunction dataFromUrl(sourceURL, sourceMappingURL) {\r\n  try {\r\n    const url = new URL(sourceMappingURL);\r\n    switch (url.protocol) {\r\n      case 'data:':\r\n        return sourceMapFromDataUrl(sourceURL, url.pathname);\r\n      default:\r\n        debug(`unknown protocol ${url.protocol}`);\r\n        return null;\r\n    }\r\n  } catch (err) {\r\n    debug(err);\r\n    // If no scheme is present, we assume we are dealing with a file path.\r\n    const mapURL = new URL(sourceMappingURL, sourceURL).href;\r\n    return sourceMapFromFile(mapURL);\r\n  }\r\n}\r\n\r\n// Cache the length of each line in the file that a source map was extracted\r\n// from. This allows translation from byte offset V8 coverage reports,\r\n// to line/column offset Source Map V3.\r\nfunction lineLengths(content) {\r\n  const contentLength = content.length;\r\n  const output = [];\r\n  let lineLength = 0;\r\n  for (let i = 0; i < contentLength; i++, lineLength++) {\r\n    const codePoint = StringPrototypeCodePointAt(content, i);\r\n\r\n    // We purposefully keep \\r as part of the line-length calculation, in\r\n    // cases where there is a \\r\\n separator, so that this can be taken into\r\n    // account in coverage calculations.\r\n    // codepoints for \\n (new line), \\u2028 (line separator) and \\u2029 (paragraph separator)\r\n    if (codePoint === 10 || codePoint === 0x2028 || codePoint === 0x2029) {\r\n      ArrayPrototypePush(output, lineLength);\r\n      lineLength = -1; // To not count the matched codePoint such as \\n character\r\n    }\r\n  }\r\n  ArrayPrototypePush(output, lineLength);\r\n  return output;\r\n}\r\n\r\n/**\r\n * Read source map from file.\r\n * @param {string} mapURL - file url of the source map\r\n * @returns {object} deserialized source map JSON object\r\n */\r\nfunction sourceMapFromFile(mapURL) {\r\n  try {\r\n    const fs = require('fs');\r\n    const content = fs.readFileSync(fileURLToPath(mapURL), 'utf8');\r\n    const data = JSONParse(content);\r\n    return sourcesToAbsolute(mapURL, data);\r\n  } catch (err) {\r\n    debug(err);\r\n    return null;\r\n  }\r\n}\r\n\r\n// data:[<mediatype>][;base64],<data> see:\r\n// https://tools.ietf.org/html/rfc2397#section-2\r\nfunction sourceMapFromDataUrl(sourceURL, url) {\r\n  const { 0: format, 1: data } = StringPrototypeSplit(url, ',');\r\n  const splitFormat = StringPrototypeSplit(format, ';');\r\n  const contentType = splitFormat[0];\r\n  const base64 = splitFormat[splitFormat.length - 1] === 'base64';\r\n  if (contentType === 'application/json') {\r\n    const decodedData = base64 ?\r\n      Buffer.from(data, 'base64').toString('utf8') : data;\r\n    try {\r\n      const parsedData = JSONParse(decodedData);\r\n      return sourcesToAbsolute(sourceURL, parsedData);\r\n    } catch (err) {\r\n      debug(err);\r\n      return null;\r\n    }\r\n  } else {\r\n    debug(`unknown content-type ${contentType}`);\r\n    return null;\r\n  }\r\n}\r\n\r\n// If the sources are not absolute URLs after prepending of the \"sourceRoot\",\r\n// the sources are resolved relative to the SourceMap (like resolving script\r\n// src in a html document).\r\n// If the sources are absolute paths, the sources are converted to absolute file URLs.\r\nfunction sourcesToAbsolute(baseURL, data) {\r\n  data.sources = data.sources.map((source) => {\r\n    source = (data.sourceRoot || '') + source;\r\n    if (isAbsolute(source)) {\r\n      return pathToFileURL(source).href;\r\n    }\r\n    return new URL(source, baseURL).href;\r\n  });\r\n  // The sources array is now resolved to absolute URLs, sourceRoot should\r\n  // be updated to noop.\r\n  data.sourceRoot = '';\r\n  return data;\r\n}\r\n\r\n// WARNING: The `sourceMapCacheToObject` runs during shutdown. In particular,\r\n// it also runs when Workers are terminated, making it important that it does\r\n// not call out to any user-provided code, including built-in prototypes that\r\n// might have been tampered with.\r\n\r\n// Get serialized representation of source-map cache, this is used\r\n// to persist a cache of source-maps to disk when NODE_V8_COVERAGE is enabled.\r\nfunction sourceMapCacheToObject() {\r\n  const moduleSourceMapCache = getModuleSourceMapCache();\r\n  if (moduleSourceMapCache.size === 0) {\r\n    return undefined;\r\n  }\r\n\r\n  const obj = { __proto__: null };\r\n  for (const { 0: k, 1: v } of moduleSourceMapCache) {\r\n    obj[k] = {\r\n      __proto__: null,\r\n      lineLengths: v.lineLengths,\r\n      data: v.data,\r\n      url: v.sourceMapURL,\r\n    };\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Find a source map for a given actual source URL or path.\r\n * @param {string} sourceURL - actual source URL or path\r\n * @returns {import('internal/source_map/source_map').SourceMap | undefined} a source map or undefined if not found\r\n */\r\nfunction findSourceMap(sourceURL) {\r\n  if (RegExpPrototypeExec(kLeadingProtocol, sourceURL) === null) {\r\n    sourceURL = pathToFileURL(sourceURL).href;\r\n  }\r\n  if (!SourceMap) {\r\n    SourceMap = require('internal/source_map/source_map').SourceMap;\r\n  }\r\n  const entry = getModuleSourceMapCache().get(sourceURL) ?? generatedSourceMapCache.get(sourceURL);\r\n  if (entry === undefined) {\r\n    return undefined;\r\n  }\r\n  let sourceMap = entry.sourceMap;\r\n  if (sourceMap === undefined) {\r\n    sourceMap = new SourceMap(entry.data, { lineLengths: entry.lineLengths });\r\n    entry.sourceMap = sourceMap;\r\n  }\r\n  return sourceMap;\r\n}\r\n\r\nmodule.exports = {\r\n  findSourceMap,\r\n  getSourceMapsEnabled,\r\n  setSourceMapsEnabled,\r\n  maybeCacheSourceMap,\r\n  maybeCacheGeneratedSourceMap,\r\n  sourceMapCacheToObject,\r\n};\r\n"
  },
  "41": {
    "metadata": {
      "scriptId": "41",
      "url": "node:internal/modules/helpers",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 324,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "8eba85f01dec9d2ccca043ca4c15e098abfad452525ffebee91a09e8322a3bfb",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10023,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/modules/helpers"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeForEach,\r\n  ObjectDefineProperty,\r\n  ObjectPrototypeHasOwnProperty,\r\n  SafeMap,\r\n  SafeSet,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeSlice,\r\n  StringPrototypeStartsWith,\r\n} = primordials;\r\nconst {\r\n  ERR_INVALID_ARG_TYPE,\r\n} = require('internal/errors').codes;\r\nconst { BuiltinModule } = require('internal/bootstrap/realm');\r\n\r\nconst { validateString } = require('internal/validators');\r\nconst fs = require('fs'); // Import all of `fs` so that it can be monkey-patched.\r\nconst internalFS = require('internal/fs/utils');\r\nconst path = require('path');\r\nconst { pathToFileURL, fileURLToPath } = require('internal/url');\r\nconst assert = require('internal/assert');\r\n\r\nconst { getOptionValue } = require('internal/options');\r\nconst { setOwnProperty } = require('internal/util');\r\nconst { inspect } = require('internal/util/inspect');\r\n\r\nconst { canParse: URLCanParse } = internalBinding('url');\r\n\r\nlet debug = require('internal/util/debuglog').debuglog('module', (fn) => {\r\n  debug = fn;\r\n});\r\n\r\n/** @typedef {import('internal/modules/cjs/loader.js').Module} Module */\r\n\r\n/**\r\n * Cache for storing resolved real paths of modules.\r\n * In order to minimize unnecessary lstat() calls, this cache is a list of known-real paths.\r\n * Set to an empty Map to reset.\r\n * @type {Map<string, string>}\r\n */\r\nconst realpathCache = new SafeMap();\r\n/**\r\n * Resolves the path of a given `require` specifier, following symlinks.\r\n * @param {string} requestPath The `require` specifier\r\n */\r\nfunction toRealPath(requestPath) {\r\n  return fs.realpathSync(requestPath, {\r\n    [internalFS.realpathCacheKey]: realpathCache,\r\n  });\r\n}\r\n\r\n/** @type {Set<string>} */\r\nlet cjsConditions;\r\n/**\r\n * Define the conditions that apply to the CommonJS loader.\r\n */\r\nfunction initializeCjsConditions() {\r\n  const userConditions = getOptionValue('--conditions');\r\n  const noAddons = getOptionValue('--no-addons');\r\n  const addonConditions = noAddons ? [] : ['node-addons'];\r\n  // TODO: Use this set when resolving pkg#exports conditions in loader.js.\r\n  cjsConditions = new SafeSet([\r\n    'require',\r\n    'node',\r\n    ...addonConditions,\r\n    ...userConditions,\r\n  ]);\r\n}\r\n\r\n/**\r\n * Get the conditions that apply to the CommonJS loader.\r\n */\r\nfunction getCjsConditions() {\r\n  if (cjsConditions === undefined) {\r\n    initializeCjsConditions();\r\n  }\r\n  return cjsConditions;\r\n}\r\n\r\n/**\r\n * Provide one of Node.js' public modules to user code.\r\n * @param {string} id - The identifier/specifier of the builtin module to load\r\n * @param {string} request - The module requiring or importing the builtin module\r\n */\r\nfunction loadBuiltinModule(id, request) {\r\n  if (!BuiltinModule.canBeRequiredByUsers(id)) {\r\n    return;\r\n  }\r\n  /** @type {import('internal/bootstrap/realm.js').BuiltinModule} */\r\n  const mod = BuiltinModule.map.get(id);\r\n  debug('load built-in module %s', request);\r\n  // compileForPublicLoader() throws if canBeRequiredByUsers is false:\r\n  mod.compileForPublicLoader();\r\n  return mod;\r\n}\r\n\r\n/** @type {Module} */\r\nlet $Module = null;\r\n/**\r\n * Import the Module class on first use.\r\n */\r\nfunction lazyModule() {\r\n  $Module = $Module || require('internal/modules/cjs/loader').Module;\r\n  return $Module;\r\n}\r\n\r\n/**\r\n * Create the module-scoped `require` function to pass into CommonJS modules.\r\n * @param {Module} mod - The module to create the `require` function for.\r\n * @typedef {(specifier: string) => unknown} RequireFunction\r\n */\r\nfunction makeRequireFunction(mod) {\r\n  // lazy due to cycle\r\n  const Module = lazyModule();\r\n  if (mod instanceof Module !== true) {\r\n    throw new ERR_INVALID_ARG_TYPE('mod', 'Module', mod);\r\n  }\r\n\r\n  function require(path) {\r\n    return mod.require(path);\r\n  }\r\n\r\n  /**\r\n   * The `resolve` method that gets attached to module-scope `require`.\r\n   * @param {string} request\r\n   * @param {Parameters<Module['_resolveFilename']>[3]} options\r\n   */\r\n  function resolve(request, options) {\r\n    validateString(request, 'request');\r\n    return Module._resolveFilename(request, mod, false, options);\r\n  }\r\n\r\n  require.resolve = resolve;\r\n\r\n  /**\r\n   * The `paths` method that gets attached to module-scope `require`.\r\n   * @param {string} request\r\n   */\r\n  function paths(request) {\r\n    validateString(request, 'request');\r\n    return Module._resolveLookupPaths(request, mod);\r\n  }\r\n\r\n  resolve.paths = paths;\r\n\r\n  setOwnProperty(require, 'main', process.mainModule);\r\n\r\n  // Enable support to add extra extension types.\r\n  require.extensions = Module._extensions;\r\n\r\n  require.cache = Module._cache;\r\n\r\n  return require;\r\n}\r\n\r\n/**\r\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\r\n * because the buffer-to-string conversion in `fs.readFileSync()`\r\n * translates it to FEFF, the UTF-16 BOM.\r\n * @param {string} content\r\n */\r\nfunction stripBOM(content) {\r\n  if (StringPrototypeCharCodeAt(content) === 0xFEFF) {\r\n    content = StringPrototypeSlice(content, 1);\r\n  }\r\n  return content;\r\n}\r\n\r\n/**\r\n * Add built-in modules to a global or REPL scope object.\r\n * @param {Record<string, unknown>} object - The object such as `globalThis` to add the built-in modules to.\r\n * @param {string} dummyModuleName - The label representing the set of built-in modules to add.\r\n */\r\nfunction addBuiltinLibsToObject(object, dummyModuleName) {\r\n  // Make built-in modules available directly (loaded lazily).\r\n  const Module = require('internal/modules/cjs/loader').Module;\r\n  const { builtinModules } = Module;\r\n\r\n  // To require built-in modules in user-land and ignore modules whose\r\n  // `canBeRequiredByUsers` is false. So we create a dummy module object and not\r\n  // use `require()` directly.\r\n  const dummyModule = new Module(dummyModuleName);\r\n\r\n  ArrayPrototypeForEach(builtinModules, (name) => {\r\n    // Neither add underscored modules, nor ones that contain slashes (e.g.,\r\n    // 'fs/promises') or ones that are already defined.\r\n    if (StringPrototypeStartsWith(name, '_') ||\r\n        StringPrototypeIncludes(name, '/') ||\r\n        ObjectPrototypeHasOwnProperty(object, name)) {\r\n      return;\r\n    }\r\n    // Goals of this mechanism are:\r\n    // - Lazy loading of built-in modules\r\n    // - Having all built-in modules available as non-enumerable properties\r\n    // - Allowing the user to re-assign these variables as if there were no\r\n    //   pre-existing globals with the same name.\r\n\r\n    const setReal = (val) => {\r\n      // Deleting the property before re-assigning it disables the\r\n      // getter/setter mechanism.\r\n      delete object[name];\r\n      object[name] = val;\r\n    };\r\n\r\n    ObjectDefineProperty(object, name, {\r\n      __proto__: null,\r\n      get: () => {\r\n        const lib = dummyModule.require(name);\r\n\r\n        try {\r\n          // Override the current getter/setter and set up a new\r\n          // non-enumerable property.\r\n          ObjectDefineProperty(object, name, {\r\n            __proto__: null,\r\n            get: () => lib,\r\n            set: setReal,\r\n            configurable: true,\r\n            enumerable: false,\r\n          });\r\n        } catch {\r\n          // If the property is no longer configurable, ignore the error.\r\n        }\r\n\r\n        return lib;\r\n      },\r\n      set: setReal,\r\n      configurable: true,\r\n      enumerable: false,\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Normalize the referrer name as a URL.\r\n * If it's a string containing an absolute path or a URL it's normalized as\r\n * a URL string.\r\n * Otherwise it's returned as undefined.\r\n * @param {string | null | undefined} referrerName\r\n * @returns {string | undefined}\r\n */\r\nfunction normalizeReferrerURL(referrerName) {\r\n  if (referrerName === null || referrerName === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  if (typeof referrerName === 'string') {\r\n    if (path.isAbsolute(referrerName)) {\r\n      return pathToFileURL(referrerName).href;\r\n    }\r\n\r\n    if (StringPrototypeStartsWith(referrerName, 'file://') ||\r\n        URLCanParse(referrerName)) {\r\n      return referrerName;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  assert.fail('Unreachable code reached by ' + inspect(referrerName));\r\n}\r\n\r\n\r\n/**\r\n * @param {string|undefined} url URL to convert to filename\r\n */\r\nfunction urlToFilename(url) {\r\n  if (url && StringPrototypeStartsWith(url, 'file://')) {\r\n    return fileURLToPath(url);\r\n  }\r\n  return url;\r\n}\r\n\r\n// Whether we have started executing any user-provided CJS code.\r\n// This is set right before we call the wrapped CJS code (not after,\r\n// in case we are half-way in the execution when internals check this).\r\n// Used for internal assertions.\r\nlet _hasStartedUserCJSExecution = false;\r\n// Similar to _hasStartedUserCJSExecution but for ESM. This is set\r\n// right before ESM evaluation in the default ESM loader. We do not\r\n// update this during vm SourceTextModule execution because at that point\r\n// some user code must already have been run to execute code via vm\r\n// there is little value checking whether any user JS code is run anyway.\r\nlet _hasStartedUserESMExecution = false;\r\n\r\n/**\r\n * Load a public built-in module. ID may or may not be prefixed by `node:` and\r\n * will be normalized.\r\n * @param {string} id ID of the built-in to be loaded.\r\n * @returns {object|undefined} exports of the built-in. Undefined if the built-in\r\n * does not exist.\r\n */\r\nfunction getBuiltinModule(id) {\r\n  validateString(id, 'id');\r\n  const normalizedId = BuiltinModule.normalizeRequirableId(id);\r\n  return normalizedId ? require(normalizedId) : undefined;\r\n}\r\n\r\nmodule.exports = {\r\n  addBuiltinLibsToObject,\r\n  getBuiltinModule,\r\n  getCjsConditions,\r\n  initializeCjsConditions,\r\n  loadBuiltinModule,\r\n  makeRequireFunction,\r\n  normalizeReferrerURL,\r\n  stripBOM,\r\n  toRealPath,\r\n  hasStartedUserCJSExecution() {\r\n    return _hasStartedUserCJSExecution;\r\n  },\r\n  setHasStartedUserCJSExecution() {\r\n    _hasStartedUserCJSExecution = true;\r\n  },\r\n  hasStartedUserESMExecution() {\r\n    return _hasStartedUserESMExecution;\r\n  },\r\n  setHasStartedUserESMExecution() {\r\n    _hasStartedUserESMExecution = true;\r\n  },\r\n  urlToFilename,\r\n};\r\n"
  },
  "42": {
    "metadata": {
      "scriptId": "42",
      "url": "node:fs",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 3309,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "5691e2a88a8ef3546e1a1954be6920cf5d9692de2fdd801ad2bd7ae05a7f902f",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 89757,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:fs"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// Maintainers, keep in mind that ES1-style octal literals (`0666`) are not\r\n// allowed in strict mode. Use ES6-style octal literals instead (`0o666`).\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePush,\r\n  BigIntPrototypeToString,\r\n  Boolean,\r\n  MathMax,\r\n  Number,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  Promise,\r\n  PromiseResolve,\r\n  ReflectApply,\r\n  SafeMap,\r\n  SafeSet,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeSlice,\r\n  uncurryThis,\r\n} = primordials;\r\n\r\nconst { fs: constants } = internalBinding('constants');\r\nconst {\r\n  S_IFIFO,\r\n  S_IFLNK,\r\n  S_IFMT,\r\n  S_IFREG,\r\n  S_IFSOCK,\r\n  F_OK,\r\n  R_OK,\r\n  W_OK,\r\n  X_OK,\r\n  O_WRONLY,\r\n  O_SYMLINK,\r\n} = constants;\r\n\r\nconst pathModule = require('path');\r\nconst { isAbsolute } = pathModule;\r\nconst { isArrayBufferView } = require('internal/util/types');\r\n\r\nconst binding = internalBinding('fs');\r\n\r\nconst { createBlobFromFilePath } = require('internal/blob');\r\n\r\nconst { Buffer } = require('buffer');\r\nconst { isBuffer: BufferIsBuffer } = Buffer;\r\nconst BufferToString = uncurryThis(Buffer.prototype.toString);\r\nconst {\r\n  AbortError,\r\n  aggregateTwoErrors,\r\n  codes: {\r\n    ERR_ACCESS_DENIED,\r\n    ERR_FS_FILE_TOO_LARGE,\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  FSReqCallback,\r\n  statValues,\r\n} = binding;\r\nconst { toPathIfFileURL } = require('internal/url');\r\nconst {\r\n  customPromisifyArgs: kCustomPromisifyArgsSymbol,\r\n  emitExperimentalWarning,\r\n  getLazy,\r\n  kEmptyObject,\r\n  promisify: {\r\n    custom: kCustomPromisifiedSymbol,\r\n  },\r\n  SideEffectFreeRegExpPrototypeExec,\r\n  defineLazyProperties,\r\n} = require('internal/util');\r\nconst {\r\n  constants: {\r\n    kIoMaxLength,\r\n    kMaxUserId,\r\n  },\r\n  copyObject,\r\n  Dirent,\r\n  emitRecursiveRmdirWarning,\r\n  getDirent,\r\n  getDirents,\r\n  getOptions,\r\n  getValidatedFd,\r\n  getValidatedPath,\r\n  handleErrorFromBinding,\r\n  preprocessSymlinkDestination,\r\n  Stats,\r\n  getStatFsFromBinding,\r\n  getStatsFromBinding,\r\n  realpathCacheKey,\r\n  stringToFlags,\r\n  stringToSymlinkType,\r\n  toUnixTimestamp,\r\n  validateBufferArray,\r\n  validateCpOptions,\r\n  validateOffsetLengthRead,\r\n  validateOffsetLengthWrite,\r\n  validatePath,\r\n  validatePosition,\r\n  validateRmOptions,\r\n  validateRmOptionsSync,\r\n  validateRmdirOptions,\r\n  validateStringAfterArrayBufferView,\r\n  warnOnNonPortableTemplate,\r\n} = require('internal/fs/utils');\r\nconst {\r\n  CHAR_FORWARD_SLASH,\r\n  CHAR_BACKWARD_SLASH,\r\n} = require('internal/constants');\r\nconst {\r\n  isInt32,\r\n  parseFileMode,\r\n  validateBoolean,\r\n  validateBuffer,\r\n  validateEncoding,\r\n  validateFunction,\r\n  validateInteger,\r\n  validateObject,\r\n  validateString,\r\n  kValidateObjectAllowNullable,\r\n} = require('internal/validators');\r\n\r\nconst permission = require('internal/process/permission');\r\n\r\nlet truncateWarn = true;\r\nlet fs;\r\n\r\n// Lazy loaded\r\nlet cpFn;\r\nlet cpSyncFn;\r\nlet promises = null;\r\nlet ReadStream;\r\nlet WriteStream;\r\nlet rimraf;\r\nlet rimrafSync;\r\nlet kResistStopPropagation;\r\n\r\n// These have to be separate because of how graceful-fs happens to do it's\r\n// monkeypatching.\r\nlet FileReadStream;\r\nlet FileWriteStream;\r\n\r\nconst isWindows = process.platform === 'win32';\r\nconst isOSX = process.platform === 'darwin';\r\n\r\nfunction showTruncateDeprecation() {\r\n  if (truncateWarn) {\r\n    process.emitWarning(\r\n      'Using fs.truncate with a file descriptor is deprecated. Please use ' +\r\n      'fs.ftruncate with a file descriptor instead.',\r\n      'DeprecationWarning', 'DEP0081');\r\n    truncateWarn = false;\r\n  }\r\n}\r\n\r\n// Ensure that callbacks run in the global context. Only use this function\r\n// for callbacks that are passed to the binding layer, callbacks that are\r\n// invoked from JS already run in the proper scope.\r\nfunction makeCallback(cb) {\r\n  validateFunction(cb, 'cb');\r\n\r\n  return (...args) => ReflectApply(cb, this, args);\r\n}\r\n\r\n// Special case of `makeCallback()` that is specific to async `*stat()` calls as\r\n// an optimization, since the data passed back to the callback needs to be\r\n// transformed anyway.\r\nfunction makeStatsCallback(cb) {\r\n  validateFunction(cb, 'cb');\r\n\r\n  return (err, stats) => {\r\n    if (err) return cb(err);\r\n    cb(err, getStatsFromBinding(stats));\r\n  };\r\n}\r\n\r\nconst isFd = isInt32;\r\n\r\nfunction isFileType(stats, fileType) {\r\n  // Use stats array directly to avoid creating an fs.Stats instance just for\r\n  // our internal use.\r\n  let mode = stats[1];\r\n  if (typeof mode === 'bigint')\r\n    mode = Number(mode);\r\n  return (mode & S_IFMT) === fileType;\r\n}\r\n\r\n/**\r\n * Tests a user's permissions for the file or directory\r\n * specified by `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} [mode]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction access(path, mode, callback) {\r\n  if (typeof mode === 'function') {\r\n    callback = mode;\r\n    mode = F_OK;\r\n  }\r\n\r\n  path = getValidatedPath(path);\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.access(pathModule.toNamespacedPath(path), mode, req);\r\n}\r\n\r\n/**\r\n * Synchronously tests a user's permissions for the file or\r\n * directory specified by `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} [mode]\r\n * @returns {void}\r\n */\r\nfunction accessSync(path, mode) {\r\n  path = getValidatedPath(path);\r\n  binding.access(pathModule.toNamespacedPath(path), mode);\r\n}\r\n\r\n/**\r\n * Tests whether or not the given path exists.\r\n * @param {string | Buffer | URL} path\r\n * @param {(exists?: boolean) => any} callback\r\n * @returns {void}\r\n */\r\nfunction exists(path, callback) {\r\n  validateFunction(callback, 'cb');\r\n\r\n  function suppressedCallback(err) {\r\n    callback(err ? false : true);\r\n  }\r\n\r\n  try {\r\n    fs.access(path, F_OK, suppressedCallback);\r\n  } catch {\r\n    return callback(false);\r\n  }\r\n}\r\n\r\nObjectDefineProperty(exists, kCustomPromisifiedSymbol, {\r\n  __proto__: null,\r\n  value: function exists(path) { // eslint-disable-line func-name-matching\r\n    return new Promise((resolve) => fs.exists(path, resolve));\r\n  },\r\n});\r\n\r\n// fs.existsSync never throws, it only returns true or false.\r\n// Since fs.existsSync never throws, users have established\r\n// the expectation that passing invalid arguments to it, even like\r\n// fs.existsSync(), would only get a false in return, so we cannot signal\r\n// validation errors to users properly out of compatibility concerns.\r\n// TODO(joyeecheung): deprecate the never-throw-on-invalid-arguments behavior\r\n/**\r\n * Synchronously tests whether or not the given path exists.\r\n * @param {string | Buffer | URL} path\r\n * @returns {boolean}\r\n */\r\nfunction existsSync(path) {\r\n  try {\r\n    path = getValidatedPath(path);\r\n  } catch {\r\n    return false;\r\n  }\r\n\r\n  return binding.existsSync(pathModule.toNamespacedPath(path));\r\n}\r\n\r\nfunction readFileAfterOpen(err, fd) {\r\n  const context = this.context;\r\n\r\n  if (err) {\r\n    context.callback(err);\r\n    return;\r\n  }\r\n\r\n  context.fd = fd;\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = readFileAfterStat;\r\n  req.context = context;\r\n  binding.fstat(fd, false, req);\r\n}\r\n\r\nfunction readFileAfterStat(err, stats) {\r\n  const context = this.context;\r\n\r\n  if (err)\r\n    return context.close(err);\r\n\r\n  // TODO(BridgeAR): Check if allocating a smaller chunk is better performance\r\n  // wise, similar to the promise based version (less peak memory and chunked\r\n  // stringify operations vs multiple C++/JS boundary crossings).\r\n  const size = context.size = isFileType(stats, S_IFREG) ? stats[8] : 0;\r\n\r\n  if (size > kIoMaxLength) {\r\n    err = new ERR_FS_FILE_TOO_LARGE(size);\r\n    return context.close(err);\r\n  }\r\n\r\n  try {\r\n    if (size === 0) {\r\n      // TODO(BridgeAR): If an encoding is set, use the StringDecoder to concat\r\n      // the result and reuse the buffer instead of allocating a new one.\r\n      context.buffers = [];\r\n    } else {\r\n      context.buffer = Buffer.allocUnsafeSlow(size);\r\n    }\r\n  } catch (err) {\r\n    return context.close(err);\r\n  }\r\n  context.read();\r\n}\r\n\r\nfunction checkAborted(signal, callback) {\r\n  if (signal?.aborted) {\r\n    callback(new AbortError(undefined, { cause: signal?.reason }));\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Asynchronously reads the entire contents of a file.\r\n * @param {string | Buffer | URL | number} path\r\n * @param {{\r\n *   encoding?: string | null;\r\n *   flag?: string;\r\n *   signal?: AbortSignal;\r\n *   } | string} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   data?: string | Buffer\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction readFile(path, options, callback) {\r\n  callback ||= options;\r\n  validateFunction(callback, 'cb');\r\n  options = getOptions(options, { flag: 'r' });\r\n  const ReadFileContext = require('internal/fs/read/context');\r\n  const context = new ReadFileContext(callback, options.encoding);\r\n  context.isUserFd = isFd(path); // File descriptor ownership\r\n\r\n  if (options.signal) {\r\n    context.signal = options.signal;\r\n  }\r\n  if (context.isUserFd) {\r\n    process.nextTick(function tick(context) {\r\n      ReflectApply(readFileAfterOpen, { context }, [null, path]);\r\n    }, context);\r\n    return;\r\n  }\r\n\r\n  if (checkAborted(options.signal, callback))\r\n    return;\r\n\r\n  const flagsNumber = stringToFlags(options.flag, 'options.flag');\r\n  path = getValidatedPath(path);\r\n\r\n  const req = new FSReqCallback();\r\n  req.context = context;\r\n  req.oncomplete = readFileAfterOpen;\r\n  binding.open(pathModule.toNamespacedPath(path),\r\n               flagsNumber,\r\n               0o666,\r\n               req);\r\n}\r\n\r\nfunction tryStatSync(fd, isUserFd) {\r\n  const stats = binding.fstat(fd, false, undefined, true /* shouldNotThrow */);\r\n  if (stats === undefined && !isUserFd) {\r\n    fs.closeSync(fd);\r\n  }\r\n  return stats;\r\n}\r\n\r\nfunction tryCreateBuffer(size, fd, isUserFd) {\r\n  let threw = true;\r\n  let buffer;\r\n  try {\r\n    if (size > kIoMaxLength) {\r\n      throw new ERR_FS_FILE_TOO_LARGE(size);\r\n    }\r\n    buffer = Buffer.allocUnsafe(size);\r\n    threw = false;\r\n  } finally {\r\n    if (threw && !isUserFd) fs.closeSync(fd);\r\n  }\r\n  return buffer;\r\n}\r\n\r\nfunction tryReadSync(fd, isUserFd, buffer, pos, len) {\r\n  let threw = true;\r\n  let bytesRead;\r\n  try {\r\n    bytesRead = fs.readSync(fd, buffer, pos, len);\r\n    threw = false;\r\n  } finally {\r\n    if (threw && !isUserFd) fs.closeSync(fd);\r\n  }\r\n  return bytesRead;\r\n}\r\n\r\n/**\r\n * Synchronously reads the entire contents of a file.\r\n * @param {string | Buffer | URL | number} path\r\n * @param {{\r\n *   encoding?: string | null;\r\n *   flag?: string;\r\n *   }} [options]\r\n * @returns {string | Buffer}\r\n */\r\nfunction readFileSync(path, options) {\r\n  options = getOptions(options, { flag: 'r' });\r\n\r\n  if (options.encoding === 'utf8' || options.encoding === 'utf-8') {\r\n    if (!isInt32(path)) {\r\n      path = pathModule.toNamespacedPath(getValidatedPath(path));\r\n    }\r\n    return binding.readFileUtf8(path, stringToFlags(options.flag));\r\n  }\r\n\r\n  const isUserFd = isFd(path); // File descriptor ownership\r\n  const fd = isUserFd ? path : fs.openSync(path, options.flag, 0o666);\r\n\r\n  const stats = tryStatSync(fd, isUserFd);\r\n  const size = isFileType(stats, S_IFREG) ? stats[8] : 0;\r\n  let pos = 0;\r\n  let buffer; // Single buffer with file data\r\n  let buffers; // List for when size is unknown\r\n\r\n  if (size === 0) {\r\n    buffers = [];\r\n  } else {\r\n    buffer = tryCreateBuffer(size, fd, isUserFd);\r\n  }\r\n\r\n  let bytesRead;\r\n\r\n  if (size !== 0) {\r\n    do {\r\n      bytesRead = tryReadSync(fd, isUserFd, buffer, pos, size - pos);\r\n      pos += bytesRead;\r\n    } while (bytesRead !== 0 && pos < size);\r\n  } else {\r\n    do {\r\n      // The kernel lies about many files.\r\n      // Go ahead and try to read some bytes.\r\n      buffer = Buffer.allocUnsafe(8192);\r\n      bytesRead = tryReadSync(fd, isUserFd, buffer, 0, 8192);\r\n      if (bytesRead !== 0) {\r\n        ArrayPrototypePush(buffers, buffer.slice(0, bytesRead));\r\n      }\r\n      pos += bytesRead;\r\n    } while (bytesRead !== 0);\r\n  }\r\n\r\n  if (!isUserFd)\r\n    fs.closeSync(fd);\r\n\r\n  if (size === 0) {\r\n    // Data was collected into the buffers list.\r\n    buffer = Buffer.concat(buffers, pos);\r\n  } else if (pos < size) {\r\n    buffer = buffer.slice(0, pos);\r\n  }\r\n\r\n  if (options.encoding) buffer = buffer.toString(options.encoding);\r\n  return buffer;\r\n}\r\n\r\nfunction defaultCloseCallback(err) {\r\n  if (err != null) throw err;\r\n}\r\n\r\n/**\r\n * Closes the file descriptor.\r\n * @param {number} fd\r\n * @param {(err?: Error) => any} [callback]\r\n * @returns {void}\r\n */\r\nfunction close(fd, callback = defaultCloseCallback) {\r\n  if (callback !== defaultCloseCallback)\r\n    callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.close(fd, req);\r\n}\r\n\r\n/**\r\n * Synchronously closes the file descriptor.\r\n * @param {number} fd\r\n * @returns {void}\r\n */\r\nfunction closeSync(fd) {\r\n  binding.close(fd);\r\n}\r\n\r\n/**\r\n * Asynchronously opens a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | number} [flags]\r\n * @param {string | number} [mode]\r\n * @param {(\r\n *   err?: Error,\r\n *   fd?: number\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction open(path, flags, mode, callback) {\r\n  path = getValidatedPath(path);\r\n  if (arguments.length < 3) {\r\n    callback = flags;\r\n    flags = 'r';\r\n    mode = 0o666;\r\n  } else if (typeof mode === 'function') {\r\n    callback = mode;\r\n    mode = 0o666;\r\n  } else {\r\n    mode = parseFileMode(mode, 'mode', 0o666);\r\n  }\r\n  const flagsNumber = stringToFlags(flags);\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n\r\n  binding.open(pathModule.toNamespacedPath(path),\r\n               flagsNumber,\r\n               mode,\r\n               req);\r\n}\r\n\r\n/**\r\n * Synchronously opens a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | number} [flags]\r\n * @param {string | number} [mode]\r\n * @returns {number}\r\n */\r\nfunction openSync(path, flags, mode) {\r\n  path = getValidatedPath(path);\r\n\r\n  return binding.open(\r\n    pathModule.toNamespacedPath(path),\r\n    stringToFlags(flags),\r\n    parseFileMode(mode, 'mode', 0o666),\r\n  );\r\n}\r\n\r\n/**\r\n * @param {string | Buffer | URL } path\r\n * @param {{\r\n *   type?: string;\r\n *   }} [options]\r\n * @returns {Promise<Blob>}\r\n */\r\nfunction openAsBlob(path, options = kEmptyObject) {\r\n  validateObject(options, 'options');\r\n  const type = options.type || '';\r\n  validateString(type, 'options.type');\r\n  // The underlying implementation here returns the Blob synchronously for now.\r\n  // To give ourselves flexibility to maybe return the Blob asynchronously,\r\n  // this API returns a Promise.\r\n  path = getValidatedPath(path);\r\n  return PromiseResolve(createBlobFromFilePath(pathModule.toNamespacedPath(path), { type }));\r\n}\r\n\r\n/**\r\n * Reads file from the specified `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {Buffer | TypedArray | DataView} buffer\r\n * @param {number | {\r\n *   offset?: number;\r\n *   length?: number;\r\n *   position?: number | bigint | null;\r\n *   }} [offsetOrOptions]\r\n * @param {number} length\r\n * @param {number | bigint | null} position\r\n * @param {(\r\n *   err?: Error,\r\n *   bytesRead?: number,\r\n *   buffer?: Buffer\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction read(fd, buffer, offsetOrOptions, length, position, callback) {\r\n  fd = getValidatedFd(fd);\r\n\r\n  let offset = offsetOrOptions;\r\n  let params = null;\r\n  if (arguments.length <= 4) {\r\n    if (arguments.length === 4) {\r\n      // This is fs.read(fd, buffer, options, callback)\r\n      validateObject(offsetOrOptions, 'options', kValidateObjectAllowNullable);\r\n      callback = length;\r\n      params = offsetOrOptions;\r\n    } else if (arguments.length === 3) {\r\n      // This is fs.read(fd, bufferOrParams, callback)\r\n      if (!isArrayBufferView(buffer)) {\r\n        // This is fs.read(fd, params, callback)\r\n        params = buffer;\r\n        ({ buffer = Buffer.alloc(16384) } = params ?? kEmptyObject);\r\n      }\r\n      callback = offsetOrOptions;\r\n    } else {\r\n      // This is fs.read(fd, callback)\r\n      callback = buffer;\r\n      buffer = Buffer.alloc(16384);\r\n    }\r\n\r\n    if (params !== undefined) {\r\n      validateObject(params, 'options', kValidateObjectAllowNullable);\r\n    }\r\n    ({\r\n      offset = 0,\r\n      length = buffer?.byteLength - offset,\r\n      position = null,\r\n    } = params ?? kEmptyObject);\r\n  }\r\n\r\n  validateBuffer(buffer);\r\n  validateFunction(callback, 'cb');\r\n\r\n  if (offset == null) {\r\n    offset = 0;\r\n  } else {\r\n    validateInteger(offset, 'offset', 0);\r\n  }\r\n\r\n  length |= 0;\r\n\r\n  if (length === 0) {\r\n    return process.nextTick(function tick() {\r\n      callback(null, 0, buffer);\r\n    });\r\n  }\r\n\r\n  if (buffer.byteLength === 0) {\r\n    throw new ERR_INVALID_ARG_VALUE('buffer', buffer,\r\n                                    'is empty and cannot be written');\r\n  }\r\n\r\n  validateOffsetLengthRead(offset, length, buffer.byteLength);\r\n\r\n  if (position == null) {\r\n    position = -1;\r\n  } else {\r\n    validatePosition(position, 'position', length);\r\n  }\r\n\r\n  function wrapper(err, bytesRead) {\r\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\r\n    callback(err, bytesRead || 0, buffer);\r\n  }\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = wrapper;\r\n\r\n  binding.read(fd, buffer, offset, length, position, req);\r\n}\r\n\r\nObjectDefineProperty(read, kCustomPromisifyArgsSymbol,\r\n                     { __proto__: null, value: ['bytesRead', 'buffer'], enumerable: false });\r\n\r\n/**\r\n * Synchronously reads the file from the\r\n * specified `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {Buffer | TypedArray | DataView} buffer\r\n * @param {number | {\r\n *   offset?: number;\r\n *   length?: number;\r\n *   position?: number | bigint | null;\r\n *   }} [offsetOrOptions]\r\n * @param {number} [length]\r\n * @param {number} [position]\r\n * @returns {number}\r\n */\r\nfunction readSync(fd, buffer, offsetOrOptions, length, position) {\r\n  fd = getValidatedFd(fd);\r\n\r\n  validateBuffer(buffer);\r\n\r\n  let offset = offsetOrOptions;\r\n  if (arguments.length <= 3 || typeof offsetOrOptions === 'object') {\r\n    if (offsetOrOptions !== undefined) {\r\n      validateObject(offsetOrOptions, 'options', kValidateObjectAllowNullable);\r\n    }\r\n\r\n    ({\r\n      offset = 0,\r\n      length = buffer.byteLength - offset,\r\n      position = null,\r\n    } = offsetOrOptions ?? kEmptyObject);\r\n  }\r\n\r\n  if (offset === undefined) {\r\n    offset = 0;\r\n  } else {\r\n    validateInteger(offset, 'offset', 0);\r\n  }\r\n\r\n  length |= 0;\r\n\r\n  if (length === 0) {\r\n    return 0;\r\n  }\r\n\r\n  if (buffer.byteLength === 0) {\r\n    throw new ERR_INVALID_ARG_VALUE('buffer', buffer,\r\n                                    'is empty and cannot be written');\r\n  }\r\n\r\n  validateOffsetLengthRead(offset, length, buffer.byteLength);\r\n\r\n  if (position == null) {\r\n    position = -1;\r\n  } else {\r\n    validatePosition(position, 'position', length);\r\n  }\r\n\r\n  return binding.read(fd, buffer, offset, length, position);\r\n}\r\n\r\n/**\r\n * Reads file from the specified `fd` (file descriptor)\r\n * and writes to an array of `ArrayBufferView`s.\r\n * @param {number} fd\r\n * @param {ArrayBufferView[]} buffers\r\n * @param {number | null} [position]\r\n * @param {(\r\n *   err?: Error,\r\n *   bytesRead?: number,\r\n *   buffers?: ArrayBufferView[];\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction readv(fd, buffers, position, callback) {\r\n  function wrapper(err, read) {\r\n    callback(err, read || 0, buffers);\r\n  }\r\n\r\n  fd = getValidatedFd(fd);\r\n  validateBufferArray(buffers);\r\n  callback ||= position;\r\n  validateFunction(callback, 'cb');\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = wrapper;\r\n\r\n  if (typeof position !== 'number')\r\n    position = null;\r\n\r\n  binding.readBuffers(fd, buffers, position, req);\r\n}\r\n\r\nObjectDefineProperty(readv, kCustomPromisifyArgsSymbol,\r\n                     { __proto__: null, value: ['bytesRead', 'buffers'], enumerable: false });\r\n\r\n/**\r\n * Synchronously reads file from the\r\n * specified `fd` (file descriptor) and writes to an array\r\n * of `ArrayBufferView`s.\r\n * @param {number} fd\r\n * @param {ArrayBufferView[]} buffers\r\n * @param {number | null} [position]\r\n * @returns {number}\r\n */\r\nfunction readvSync(fd, buffers, position) {\r\n  fd = getValidatedFd(fd);\r\n  validateBufferArray(buffers);\r\n\r\n  if (typeof position !== 'number')\r\n    position = null;\r\n\r\n  return binding.readBuffers(fd, buffers, position);\r\n}\r\n\r\n/**\r\n * Writes `buffer` to the specified `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {Buffer | TypedArray | DataView | string} buffer\r\n * @param {number | object} [offsetOrOptions]\r\n * @param {number} [length]\r\n * @param {number | null} [position]\r\n * @param {(\r\n *   err?: Error,\r\n *   bytesWritten?: number;\r\n *   buffer?: Buffer | TypedArray | DataView\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction write(fd, buffer, offsetOrOptions, length, position, callback) {\r\n  function wrapper(err, written) {\r\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\r\n    callback(err, written || 0, buffer);\r\n  }\r\n\r\n  fd = getValidatedFd(fd);\r\n\r\n  let offset = offsetOrOptions;\r\n  if (isArrayBufferView(buffer)) {\r\n    callback ||= position || length || offset;\r\n    validateFunction(callback, 'cb');\r\n\r\n    if (typeof offset === 'object') {\r\n      ({\r\n        offset = 0,\r\n        length = buffer.byteLength - offset,\r\n        position = null,\r\n      } = offsetOrOptions ?? kEmptyObject);\r\n    }\r\n\r\n    if (offset == null || typeof offset === 'function') {\r\n      offset = 0;\r\n    } else {\r\n      validateInteger(offset, 'offset', 0);\r\n    }\r\n    if (typeof length !== 'number')\r\n      length = buffer.byteLength - offset;\r\n    if (typeof position !== 'number')\r\n      position = null;\r\n    validateOffsetLengthWrite(offset, length, buffer.byteLength);\r\n\r\n    const req = new FSReqCallback();\r\n    req.oncomplete = wrapper;\r\n    binding.writeBuffer(fd, buffer, offset, length, position, req);\r\n    return;\r\n  }\r\n\r\n  validateStringAfterArrayBufferView(buffer, 'buffer');\r\n\r\n  if (typeof position !== 'function') {\r\n    if (typeof offset === 'function') {\r\n      position = offset;\r\n      offset = null;\r\n    } else {\r\n      position = length;\r\n    }\r\n    length = 'utf8';\r\n  }\r\n\r\n  const str = buffer;\r\n  validateEncoding(str, length);\r\n  callback = position;\r\n  validateFunction(callback, 'cb');\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = wrapper;\r\n  binding.writeString(fd, str, offset, length, req);\r\n}\r\n\r\nObjectDefineProperty(write, kCustomPromisifyArgsSymbol,\r\n                     { __proto__: null, value: ['bytesWritten', 'buffer'], enumerable: false });\r\n\r\n/**\r\n * Synchronously writes `buffer` to the\r\n * specified `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {Buffer | TypedArray | DataView | string} buffer\r\n * @param {{\r\n *   offset?: number;\r\n *   length?: number;\r\n *   position?: number | null;\r\n *   }} [offsetOrOptions]\r\n * @returns {number}\r\n */\r\nfunction writeSync(fd, buffer, offsetOrOptions, length, position) {\r\n  fd = getValidatedFd(fd);\r\n  const ctx = {};\r\n  let result;\r\n\r\n  let offset = offsetOrOptions;\r\n  if (isArrayBufferView(buffer)) {\r\n    if (typeof offset === 'object') {\r\n      ({\r\n        offset = 0,\r\n        length = buffer.byteLength - offset,\r\n        position = null,\r\n      } = offsetOrOptions ?? kEmptyObject);\r\n    }\r\n    if (position === undefined)\r\n      position = null;\r\n    if (offset == null) {\r\n      offset = 0;\r\n    } else {\r\n      validateInteger(offset, 'offset', 0);\r\n    }\r\n    if (typeof length !== 'number')\r\n      length = buffer.byteLength - offset;\r\n    validateOffsetLengthWrite(offset, length, buffer.byteLength);\r\n    result = binding.writeBuffer(fd, buffer, offset, length, position,\r\n                                 undefined, ctx);\r\n  } else {\r\n    validateStringAfterArrayBufferView(buffer, 'buffer');\r\n    validateEncoding(buffer, length);\r\n\r\n    if (offset === undefined)\r\n      offset = null;\r\n    result = binding.writeString(fd, buffer, offset, length,\r\n                                 undefined, ctx);\r\n  }\r\n  handleErrorFromBinding(ctx);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Writes an array of `ArrayBufferView`s to the\r\n * specified `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {ArrayBufferView[]} buffers\r\n * @param {number | null} [position]\r\n * @param {(\r\n *   err?: Error,\r\n *   bytesWritten?: number,\r\n *   buffers?: ArrayBufferView[]\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction writev(fd, buffers, position, callback) {\r\n  function wrapper(err, written) {\r\n    callback(err, written || 0, buffers);\r\n  }\r\n\r\n  fd = getValidatedFd(fd);\r\n  validateBufferArray(buffers);\r\n  callback ||= position;\r\n  validateFunction(callback, 'cb');\r\n\r\n  if (buffers.length === 0) {\r\n    process.nextTick(callback, null, 0, buffers);\r\n    return;\r\n  }\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = wrapper;\r\n\r\n  if (typeof position !== 'number')\r\n    position = null;\r\n\r\n  binding.writeBuffers(fd, buffers, position, req);\r\n}\r\n\r\nObjectDefineProperty(writev, kCustomPromisifyArgsSymbol, {\r\n  __proto__: null,\r\n  value: ['bytesWritten', 'buffer'],\r\n  enumerable: false,\r\n});\r\n\r\n/**\r\n * Synchronously writes an array of `ArrayBufferView`s\r\n * to the specified `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {ArrayBufferView[]} buffers\r\n * @param {number | null} [position]\r\n * @returns {number}\r\n */\r\nfunction writevSync(fd, buffers, position) {\r\n  fd = getValidatedFd(fd);\r\n  validateBufferArray(buffers);\r\n\r\n  if (buffers.length === 0) {\r\n    return 0;\r\n  }\r\n\r\n  if (typeof position !== 'number')\r\n    position = null;\r\n\r\n  return binding.writeBuffers(fd, buffers, position);\r\n}\r\n\r\n/**\r\n * Asynchronously renames file at `oldPath` to\r\n * the pathname provided as `newPath`.\r\n * @param {string | Buffer | URL} oldPath\r\n * @param {string | Buffer | URL} newPath\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction rename(oldPath, newPath, callback) {\r\n  callback = makeCallback(callback);\r\n  oldPath = getValidatedPath(oldPath, 'oldPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.rename(pathModule.toNamespacedPath(oldPath),\r\n                 pathModule.toNamespacedPath(newPath),\r\n                 req);\r\n}\r\n\r\n\r\n/**\r\n * Synchronously renames file at `oldPath` to\r\n * the pathname provided as `newPath`.\r\n * @param {string | Buffer | URL} oldPath\r\n * @param {string | Buffer | URL} newPath\r\n * @returns {void}\r\n */\r\nfunction renameSync(oldPath, newPath) {\r\n  oldPath = getValidatedPath(oldPath, 'oldPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n  binding.rename(\r\n    pathModule.toNamespacedPath(oldPath),\r\n    pathModule.toNamespacedPath(newPath),\r\n  );\r\n}\r\n\r\n/**\r\n * Truncates the file.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} [len]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction truncate(path, len, callback) {\r\n  if (typeof path === 'number') {\r\n    showTruncateDeprecation();\r\n    return fs.ftruncate(path, len, callback);\r\n  }\r\n  if (typeof len === 'function') {\r\n    callback = len;\r\n    len = 0;\r\n  } else if (len === undefined) {\r\n    len = 0;\r\n  }\r\n\r\n  validateInteger(len, 'len');\r\n  len = MathMax(0, len);\r\n  validateFunction(callback, 'cb');\r\n  fs.open(path, 'r+', (er, fd) => {\r\n    if (er) return callback(er);\r\n    const req = new FSReqCallback();\r\n    req.oncomplete = function oncomplete(er) {\r\n      fs.close(fd, (er2) => {\r\n        callback(aggregateTwoErrors(er2, er));\r\n      });\r\n    };\r\n    binding.ftruncate(fd, len, req);\r\n  });\r\n}\r\n\r\n/**\r\n * Synchronously truncates the file.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} [len]\r\n * @returns {void}\r\n */\r\nfunction truncateSync(path, len) {\r\n  if (typeof path === 'number') {\r\n    // legacy\r\n    showTruncateDeprecation();\r\n    return fs.ftruncateSync(path, len);\r\n  }\r\n  if (len === undefined) {\r\n    len = 0;\r\n  }\r\n  // Allow error to be thrown, but still close fd.\r\n  const fd = fs.openSync(path, 'r+');\r\n  let ret;\r\n\r\n  try {\r\n    ret = fs.ftruncateSync(fd, len);\r\n  } finally {\r\n    fs.closeSync(fd);\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Truncates the file descriptor.\r\n * @param {number} fd\r\n * @param {number} [len]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction ftruncate(fd, len = 0, callback) {\r\n  if (typeof len === 'function') {\r\n    callback = len;\r\n    len = 0;\r\n  }\r\n  validateInteger(len, 'len');\r\n  len = MathMax(0, len);\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.ftruncate(fd, len, req);\r\n}\r\n\r\n/**\r\n * Synchronously truncates the file descriptor.\r\n * @param {number} fd\r\n * @param {number} [len]\r\n * @returns {void}\r\n */\r\nfunction ftruncateSync(fd, len = 0) {\r\n  validateInteger(len, 'len');\r\n  len = MathMax(0, len);\r\n  binding.ftruncate(fd, len);\r\n}\r\n\r\nfunction lazyLoadCp() {\r\n  if (cpFn === undefined) {\r\n    ({ cpFn } = require('internal/fs/cp/cp'));\r\n    cpFn = require('util').callbackify(cpFn);\r\n    ({ cpSyncFn } = require('internal/fs/cp/cp-sync'));\r\n  }\r\n}\r\n\r\nfunction lazyLoadRimraf() {\r\n  if (rimraf === undefined)\r\n    ({ rimraf, rimrafSync } = require('internal/fs/rimraf'));\r\n}\r\n\r\n/**\r\n * Asynchronously removes a directory.\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   maxRetries?: number;\r\n *   recursive?: boolean;\r\n *   retryDelay?: number;\r\n *   }} [options]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction rmdir(path, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n\r\n  callback = makeCallback(callback);\r\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\r\n\r\n  if (options?.recursive) {\r\n    emitRecursiveRmdirWarning();\r\n    validateRmOptions(\r\n      path,\r\n      { ...options, force: false },\r\n      true,\r\n      (err, options) => {\r\n        if (err === false) {\r\n          const req = new FSReqCallback();\r\n          req.oncomplete = callback;\r\n          binding.rmdir(path, req);\r\n          return;\r\n        }\r\n        if (err) {\r\n          return callback(err);\r\n        }\r\n\r\n        lazyLoadRimraf();\r\n        rimraf(path, options, callback);\r\n      });\r\n  } else {\r\n    validateRmdirOptions(options);\r\n    const req = new FSReqCallback();\r\n    req.oncomplete = callback;\r\n    binding.rmdir(path, req);\r\n  }\r\n}\r\n\r\n/**\r\n * Synchronously removes a directory.\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   maxRetries?: number;\r\n *   recursive?: boolean;\r\n *   retryDelay?: number;\r\n *   }} [options]\r\n * @returns {void}\r\n */\r\nfunction rmdirSync(path, options) {\r\n  path = getValidatedPath(path);\r\n\r\n  if (options?.recursive) {\r\n    emitRecursiveRmdirWarning();\r\n    options = validateRmOptionsSync(path, { ...options, force: false }, true);\r\n    if (options !== false) {\r\n      lazyLoadRimraf();\r\n      return rimrafSync(pathModule.toNamespacedPath(path), options);\r\n    }\r\n  } else {\r\n    validateRmdirOptions(options);\r\n  }\r\n\r\n  binding.rmdir(pathModule.toNamespacedPath(path));\r\n}\r\n\r\n/**\r\n * Asynchronously removes files and\r\n * directories (modeled on the standard POSIX `rm` utility).\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   force?: boolean;\r\n *   maxRetries?: number;\r\n *   recursive?: boolean;\r\n *   retryDelay?: number;\r\n *   }} [options]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction rm(path, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  path = getValidatedPath(path);\r\n\r\n  validateRmOptions(path, options, false, (err, options) => {\r\n    if (err) {\r\n      return callback(err);\r\n    }\r\n    lazyLoadRimraf();\r\n    return rimraf(pathModule.toNamespacedPath(path), options, callback);\r\n  });\r\n}\r\n\r\n/**\r\n * Synchronously removes files and\r\n * directories (modeled on the standard POSIX `rm` utility).\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   force?: boolean;\r\n *   maxRetries?: number;\r\n *   recursive?: boolean;\r\n *   retryDelay?: number;\r\n *   }} [options]\r\n * @returns {void}\r\n */\r\nfunction rmSync(path, options) {\r\n  path = getValidatedPath(path);\r\n  options = validateRmOptionsSync(path, options, false);\r\n\r\n  lazyLoadRimraf();\r\n  return rimrafSync(pathModule.toNamespacedPath(path), options);\r\n}\r\n\r\n/**\r\n * Forces all currently queued I/O operations associated\r\n * with the file to the operating system's synchronized\r\n * I/O completion state.\r\n * @param {number} fd\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction fdatasync(fd, callback) {\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = makeCallback(callback);\r\n  binding.fdatasync(fd, req);\r\n}\r\n\r\n/**\r\n * Synchronously forces all currently queued I/O operations\r\n * associated with the file to the operating\r\n * system's synchronized I/O completion state.\r\n * @param {number} fd\r\n * @returns {void}\r\n */\r\nfunction fdatasyncSync(fd) {\r\n  binding.fdatasync(fd);\r\n}\r\n\r\n/**\r\n * Requests for all data for the open file descriptor\r\n * to be flushed to the storage device.\r\n * @param {number} fd\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction fsync(fd, callback) {\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = makeCallback(callback);\r\n  binding.fsync(fd, req);\r\n}\r\n\r\n/**\r\n * Synchronously requests for all data for the open\r\n * file descriptor to be flushed to the storage device.\r\n * @param {number} fd\r\n * @returns {void}\r\n */\r\nfunction fsyncSync(fd) {\r\n  binding.fsync(fd);\r\n}\r\n\r\n/**\r\n * Asynchronously creates a directory.\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   recursive?: boolean;\r\n *   mode?: string | number;\r\n *   } | number} [options]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction mkdir(path, options, callback) {\r\n  let mode = 0o777;\r\n  let recursive = false;\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n  } else if (typeof options === 'number' || typeof options === 'string') {\r\n    mode = options;\r\n  } else if (options) {\r\n    if (options.recursive !== undefined)\r\n      recursive = options.recursive;\r\n    if (options.mode !== undefined)\r\n      mode = options.mode;\r\n  }\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n\r\n  validateBoolean(recursive, 'options.recursive');\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.mkdir(pathModule.toNamespacedPath(path),\r\n                parseFileMode(mode, 'mode'), recursive, req);\r\n}\r\n\r\n/**\r\n * Synchronously creates a directory.\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   recursive?: boolean;\r\n *   mode?: string | number;\r\n *   } | number} [options]\r\n * @returns {string | void}\r\n */\r\nfunction mkdirSync(path, options) {\r\n  let mode = 0o777;\r\n  let recursive = false;\r\n  if (typeof options === 'number' || typeof options === 'string') {\r\n    mode = options;\r\n  } else if (options) {\r\n    if (options.recursive !== undefined)\r\n      recursive = options.recursive;\r\n    if (options.mode !== undefined)\r\n      mode = options.mode;\r\n  }\r\n  path = getValidatedPath(path);\r\n  validateBoolean(recursive, 'options.recursive');\r\n\r\n  const result = binding.mkdir(\r\n    pathModule.toNamespacedPath(path),\r\n    parseFileMode(mode, 'mode'),\r\n    recursive,\r\n  );\r\n\r\n  if (recursive) {\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * An iterative algorithm for reading the entire contents of the `basePath` directory.\r\n * This function does not validate `basePath` as a directory. It is passed directly to\r\n * `binding.readdir`.\r\n * @param {string} basePath\r\n * @param {{ encoding: string, withFileTypes: boolean }} options\r\n * @returns {string[] | Dirent[]}\r\n */\r\nfunction readdirSyncRecursive(basePath, options) {\r\n  const withFileTypes = Boolean(options.withFileTypes);\r\n  const encoding = options.encoding;\r\n\r\n  const readdirResults = [];\r\n  const pathsQueue = [basePath];\r\n\r\n  function read(path) {\r\n    const readdirResult = binding.readdir(\r\n      pathModule.toNamespacedPath(path),\r\n      encoding,\r\n      withFileTypes,\r\n    );\r\n\r\n    if (readdirResult === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (withFileTypes) {\r\n      // Calling `readdir` with `withFileTypes=true`, the result is an array of arrays.\r\n      // The first array is the names, and the second array is the types.\r\n      // They are guaranteed to be the same length; hence, setting `length` to the length\r\n      // of the first array within the result.\r\n      const length = readdirResult[0].length;\r\n      for (let i = 0; i < length; i++) {\r\n        const dirent = getDirent(path, readdirResult[0][i], readdirResult[1][i]);\r\n        ArrayPrototypePush(readdirResults, dirent);\r\n        if (dirent.isDirectory()) {\r\n          ArrayPrototypePush(pathsQueue, pathModule.join(dirent.parentPath, dirent.name));\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < readdirResult.length; i++) {\r\n        const resultPath = pathModule.join(path, readdirResult[i]);\r\n        const relativeResultPath = pathModule.relative(basePath, resultPath);\r\n        const stat = binding.internalModuleStat(resultPath);\r\n        ArrayPrototypePush(readdirResults, relativeResultPath);\r\n        // 1 indicates directory\r\n        if (stat === 1) {\r\n          ArrayPrototypePush(pathsQueue, resultPath);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < pathsQueue.length; i++) {\r\n    read(pathsQueue[i]);\r\n  }\r\n\r\n  return readdirResults;\r\n}\r\n\r\n/**\r\n * Reads the contents of a directory.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | {\r\n *   encoding?: string;\r\n *   withFileTypes?: boolean;\r\n *   recursive?: boolean;\r\n *   }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   files?: string[] | Buffer[] | Dirent[];\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction readdir(path, options, callback) {\r\n  callback = makeCallback(typeof options === 'function' ? options : callback);\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path);\r\n  if (options.recursive != null) {\r\n    validateBoolean(options.recursive, 'options.recursive');\r\n  }\r\n\r\n  if (options.recursive) {\r\n    callback(null, readdirSyncRecursive(path, options));\r\n    return;\r\n  }\r\n\r\n  const req = new FSReqCallback();\r\n  if (!options.withFileTypes) {\r\n    req.oncomplete = callback;\r\n  } else {\r\n    req.oncomplete = (err, result) => {\r\n      if (err) {\r\n        callback(err);\r\n        return;\r\n      }\r\n      getDirents(path, result, callback);\r\n    };\r\n  }\r\n  binding.readdir(pathModule.toNamespacedPath(path), options.encoding,\r\n                  !!options.withFileTypes, req);\r\n}\r\n\r\n/**\r\n * Synchronously reads the contents of a directory.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | {\r\n *   encoding?: string;\r\n *   withFileTypes?: boolean;\r\n *   recursive?: boolean;\r\n *   }} [options]\r\n * @returns {string | Buffer[] | Dirent[]}\r\n */\r\nfunction readdirSync(path, options) {\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path);\r\n  if (options.recursive != null) {\r\n    validateBoolean(options.recursive, 'options.recursive');\r\n  }\r\n\r\n  if (options.recursive) {\r\n    return readdirSyncRecursive(path, options);\r\n  }\r\n\r\n  const result = binding.readdir(\r\n    pathModule.toNamespacedPath(path),\r\n    options.encoding,\r\n    !!options.withFileTypes,\r\n  );\r\n\r\n  return result !== undefined && options.withFileTypes ? getDirents(path, result) : result;\r\n}\r\n\r\n/**\r\n * Invokes the callback with the `fs.Stats`\r\n * for the file descriptor.\r\n * @param {number} fd\r\n * @param {{ bigint?: boolean; }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   stats?: Stats\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction fstat(fd, options = { bigint: false }, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = kEmptyObject;\r\n  }\r\n  callback = makeStatsCallback(callback);\r\n\r\n  const req = new FSReqCallback(options.bigint);\r\n  req.oncomplete = callback;\r\n  binding.fstat(fd, options.bigint, req);\r\n}\r\n\r\n/**\r\n * Retrieves the `fs.Stats` for the symbolic link\r\n * referred to by the `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {{ bigint?: boolean; }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   stats?: Stats\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction lstat(path, options = { bigint: false }, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = kEmptyObject;\r\n  }\r\n  callback = makeStatsCallback(callback);\r\n  path = getValidatedPath(path);\r\n\r\n  const req = new FSReqCallback(options.bigint);\r\n  req.oncomplete = callback;\r\n  binding.lstat(pathModule.toNamespacedPath(path), options.bigint, req);\r\n}\r\n\r\n/**\r\n * Asynchronously gets the stats of a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {{ bigint?: boolean; }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   stats?: Stats\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction stat(path, options = { bigint: false }, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = kEmptyObject;\r\n  }\r\n  callback = makeStatsCallback(callback);\r\n  path = getValidatedPath(path);\r\n\r\n  const req = new FSReqCallback(options.bigint);\r\n  req.oncomplete = callback;\r\n  binding.stat(pathModule.toNamespacedPath(path), options.bigint, req);\r\n}\r\n\r\nfunction statfs(path, options = { bigint: false }, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = kEmptyObject;\r\n  }\r\n  validateFunction(callback, 'cb');\r\n  path = getValidatedPath(path);\r\n  const req = new FSReqCallback(options.bigint);\r\n  req.oncomplete = (err, stats) => {\r\n    if (err) {\r\n      return callback(err);\r\n    }\r\n\r\n    callback(err, getStatFsFromBinding(stats));\r\n  };\r\n  binding.statfs(pathModule.toNamespacedPath(path), options.bigint, req);\r\n}\r\n\r\n/**\r\n * Synchronously retrieves the `fs.Stats` for\r\n * the file descriptor.\r\n * @param {number} fd\r\n * @param {{\r\n *   bigint?: boolean;\r\n *   }} [options]\r\n * @returns {Stats | undefined}\r\n */\r\nfunction fstatSync(fd, options = { bigint: false }) {\r\n  const stats = binding.fstat(fd, options.bigint, undefined, false);\r\n  if (stats === undefined) {\r\n    return;\r\n  }\r\n  return getStatsFromBinding(stats);\r\n}\r\n\r\n/**\r\n * Synchronously retrieves the `fs.Stats` for\r\n * the symbolic link referred to by the `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   bigint?: boolean;\r\n *   throwIfNoEntry?: boolean;\r\n *   }} [options]\r\n * @returns {Stats | undefined}\r\n */\r\nfunction lstatSync(path, options = { bigint: false, throwIfNoEntry: true }) {\r\n  path = getValidatedPath(path);\r\n  const stats = binding.lstat(\r\n    pathModule.toNamespacedPath(path),\r\n    options.bigint,\r\n    undefined,\r\n    options.throwIfNoEntry,\r\n  );\r\n\r\n  if (stats === undefined) {\r\n    return;\r\n  }\r\n  return getStatsFromBinding(stats);\r\n}\r\n\r\n/**\r\n * Synchronously retrieves the `fs.Stats`\r\n * for the `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   bigint?: boolean;\r\n *   throwIfNoEntry?: boolean;\r\n *   }} [options]\r\n * @returns {Stats}\r\n */\r\nfunction statSync(path, options = { bigint: false, throwIfNoEntry: true }) {\r\n  path = getValidatedPath(path);\r\n  const stats = binding.stat(\r\n    pathModule.toNamespacedPath(path),\r\n    options.bigint,\r\n    undefined,\r\n    options.throwIfNoEntry,\r\n  );\r\n  if (stats === undefined) {\r\n    return undefined;\r\n  }\r\n  return getStatsFromBinding(stats);\r\n}\r\n\r\nfunction statfsSync(path, options = { bigint: false }) {\r\n  path = getValidatedPath(path);\r\n  const stats = binding.statfs(pathModule.toNamespacedPath(path), options.bigint);\r\n  return getStatFsFromBinding(stats);\r\n}\r\n\r\n/**\r\n * Reads the contents of a symbolic link\r\n * referred to by `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {{ encoding?: string; } | string} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   linkString?: string | Buffer\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction readlink(path, options, callback) {\r\n  callback = makeCallback(typeof options === 'function' ? options : callback);\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path, 'oldPath');\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.readlink(pathModule.toNamespacedPath(path), options.encoding, req);\r\n}\r\n\r\n/**\r\n * Synchronously reads the contents of a symbolic link\r\n * referred to by `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {{ encoding?: string; } | string} [options]\r\n * @returns {string | Buffer}\r\n */\r\nfunction readlinkSync(path, options) {\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path, 'oldPath');\r\n  return binding.readlink(\r\n    pathModule.toNamespacedPath(path),\r\n    options.encoding,\r\n  );\r\n}\r\n\r\n/**\r\n * Creates the link called `path` pointing to `target`.\r\n * @param {string | Buffer | URL} target\r\n * @param {string | Buffer | URL} path\r\n * @param {string | null} [type_]\r\n * @param {(err?: Error) => any} callback_\r\n * @returns {void}\r\n */\r\nfunction symlink(target, path, type_, callback_) {\r\n  const type = (typeof type_ === 'string' ? type_ : null);\r\n  const callback = makeCallback(arguments[arguments.length - 1]);\r\n\r\n  if (permission.isEnabled()) {\r\n    // The permission model's security guarantees fall apart in the presence of\r\n    // relative symbolic links. Thus, we have to prevent their creation.\r\n    if (BufferIsBuffer(target)) {\r\n      if (!isAbsolute(BufferToString(target))) {\r\n        callback(new ERR_ACCESS_DENIED('relative symbolic link target'));\r\n        return;\r\n      }\r\n    } else if (typeof target !== 'string' || !isAbsolute(toPathIfFileURL(target))) {\r\n      callback(new ERR_ACCESS_DENIED('relative symbolic link target'));\r\n      return;\r\n    }\r\n  }\r\n\r\n  target = getValidatedPath(target, 'target');\r\n  path = getValidatedPath(path);\r\n\r\n  if (isWindows && type === null) {\r\n    let absoluteTarget;\r\n    try {\r\n      // Symlinks targets can be relative to the newly created path.\r\n      // Calculate absolute file name of the symlink target, and check\r\n      // if it is a directory. Ignore resolve error to keep symlink\r\n      // errors consistent between platforms if invalid path is\r\n      // provided.\r\n      absoluteTarget = pathModule.resolve(path, '..', target);\r\n    } catch {\r\n      // Continue regardless of error.\r\n    }\r\n    if (absoluteTarget !== undefined) {\r\n      stat(absoluteTarget, (err, stat) => {\r\n        const resolvedType = !err && stat.isDirectory() ? 'dir' : 'file';\r\n        const resolvedFlags = stringToSymlinkType(resolvedType);\r\n        const destination = preprocessSymlinkDestination(target,\r\n                                                         resolvedType,\r\n                                                         path);\r\n\r\n        const req = new FSReqCallback();\r\n        req.oncomplete = callback;\r\n        binding.symlink(destination,\r\n                        pathModule.toNamespacedPath(path), resolvedFlags, req);\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  const destination = preprocessSymlinkDestination(target, type, path);\r\n\r\n  const flags = stringToSymlinkType(type);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.symlink(destination, pathModule.toNamespacedPath(path), flags, req);\r\n}\r\n\r\n/**\r\n * Synchronously creates the link called `path`\r\n * pointing to `target`.\r\n * @param {string | Buffer | URL} target\r\n * @param {string | Buffer | URL} path\r\n * @param {string | null} [type]\r\n * @returns {void}\r\n */\r\nfunction symlinkSync(target, path, type) {\r\n  type = (typeof type === 'string' ? type : null);\r\n  if (isWindows && type === null) {\r\n    const absoluteTarget = pathModule.resolve(`${path}`, '..', `${target}`);\r\n    if (statSync(absoluteTarget, { throwIfNoEntry: false })?.isDirectory()) {\r\n      type = 'dir';\r\n    }\r\n  }\r\n\r\n  if (permission.isEnabled()) {\r\n    // The permission model's security guarantees fall apart in the presence of\r\n    // relative symbolic links. Thus, we have to prevent their creation.\r\n    if (BufferIsBuffer(target)) {\r\n      if (!isAbsolute(BufferToString(target))) {\r\n        throw new ERR_ACCESS_DENIED('relative symbolic link target');\r\n      }\r\n    } else if (typeof target !== 'string' || !isAbsolute(toPathIfFileURL(target))) {\r\n      throw new ERR_ACCESS_DENIED('relative symbolic link target');\r\n    }\r\n  }\r\n\r\n  target = getValidatedPath(target, 'target');\r\n  path = getValidatedPath(path);\r\n\r\n  binding.symlink(\r\n    preprocessSymlinkDestination(target, type, path),\r\n    pathModule.toNamespacedPath(path),\r\n    stringToSymlinkType(type),\r\n  );\r\n}\r\n\r\n/**\r\n * Creates a new link from the `existingPath`\r\n * to the `newPath`.\r\n * @param {string | Buffer | URL} existingPath\r\n * @param {string | Buffer | URL} newPath\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction link(existingPath, newPath, callback) {\r\n  callback = makeCallback(callback);\r\n\r\n  existingPath = getValidatedPath(existingPath, 'existingPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n\r\n  binding.link(pathModule.toNamespacedPath(existingPath),\r\n               pathModule.toNamespacedPath(newPath),\r\n               req);\r\n}\r\n\r\n/**\r\n * Synchronously creates a new link from the `existingPath`\r\n * to the `newPath`.\r\n * @param {string | Buffer | URL} existingPath\r\n * @param {string | Buffer | URL} newPath\r\n * @returns {void}\r\n */\r\nfunction linkSync(existingPath, newPath) {\r\n  existingPath = getValidatedPath(existingPath, 'existingPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n\r\n  binding.link(\r\n    pathModule.toNamespacedPath(existingPath),\r\n    pathModule.toNamespacedPath(newPath),\r\n  );\r\n}\r\n\r\n/**\r\n * Asynchronously removes a file or symbolic link.\r\n * @param {string | Buffer | URL} path\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction unlink(path, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.unlink(pathModule.toNamespacedPath(path), req);\r\n}\r\n\r\n/**\r\n * Synchronously removes a file or symbolic link.\r\n * @param {string | Buffer | URL} path\r\n * @returns {void}\r\n */\r\nfunction unlinkSync(path) {\r\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\r\n  binding.unlink(path);\r\n}\r\n\r\n/**\r\n * Sets the permissions on the file.\r\n * @param {number} fd\r\n * @param {string | number} mode\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction fchmod(fd, mode, callback) {\r\n  mode = parseFileMode(mode, 'mode');\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.fchmod(fd, mode, req);\r\n}\r\n\r\n/**\r\n * Synchronously sets the permissions on the file.\r\n * @param {number} fd\r\n * @param {string | number} mode\r\n * @returns {void}\r\n */\r\nfunction fchmodSync(fd, mode) {\r\n  binding.fchmod(\r\n    fd,\r\n    parseFileMode(mode, 'mode'),\r\n  );\r\n}\r\n\r\n/**\r\n * Changes the permissions on a symbolic link.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} mode\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction lchmod(path, mode, callback) {\r\n  validateFunction(callback, 'cb');\r\n  mode = parseFileMode(mode, 'mode');\r\n  fs.open(path, O_WRONLY | O_SYMLINK, (err, fd) => {\r\n    if (err) {\r\n      callback(err);\r\n      return;\r\n    }\r\n    // Prefer to return the chmod error, if one occurs,\r\n    // but still try to close, and report closing errors if they occur.\r\n    fs.fchmod(fd, mode, (err) => {\r\n      fs.close(fd, (err2) => {\r\n        callback(aggregateTwoErrors(err2, err));\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Synchronously changes the permissions on a symbolic link.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} mode\r\n * @returns {void}\r\n */\r\nfunction lchmodSync(path, mode) {\r\n  const fd = fs.openSync(path, O_WRONLY | O_SYMLINK);\r\n\r\n  // Prefer to return the chmod error, if one occurs,\r\n  // but still try to close, and report closing errors if they occur.\r\n  let ret;\r\n  try {\r\n    ret = fs.fchmodSync(fd, mode);\r\n  } finally {\r\n    fs.closeSync(fd);\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Asynchronously changes the permissions of a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | number} mode\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction chmod(path, mode, callback) {\r\n  path = getValidatedPath(path);\r\n  mode = parseFileMode(mode, 'mode');\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.chmod(pathModule.toNamespacedPath(path), mode, req);\r\n}\r\n\r\n/**\r\n * Synchronously changes the permissions of a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | number} mode\r\n * @returns {void}\r\n */\r\nfunction chmodSync(path, mode) {\r\n  path = getValidatedPath(path);\r\n  mode = parseFileMode(mode, 'mode');\r\n\r\n  binding.chmod(\r\n    pathModule.toNamespacedPath(path),\r\n    mode,\r\n  );\r\n}\r\n\r\n/**\r\n * Sets the owner of the symbolic link.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction lchown(path, uid, gid, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.lchown(pathModule.toNamespacedPath(path), uid, gid, req);\r\n}\r\n\r\n/**\r\n * Synchronously sets the owner of the symbolic link.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @returns {void}\r\n */\r\nfunction lchownSync(path, uid, gid) {\r\n  path = getValidatedPath(path);\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n  binding.lchown(\r\n    pathModule.toNamespacedPath(path),\r\n    uid,\r\n    gid,\r\n  );\r\n}\r\n\r\n/**\r\n * Sets the owner of the file.\r\n * @param {number} fd\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction fchown(fd, uid, gid, callback) {\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.fchown(fd, uid, gid, req);\r\n}\r\n\r\n/**\r\n * Synchronously sets the owner of the file.\r\n * @param {number} fd\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @returns {void}\r\n */\r\nfunction fchownSync(fd, uid, gid) {\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n\r\n  binding.fchown(fd, uid, gid);\r\n}\r\n\r\n/**\r\n * Asynchronously changes the owner and group\r\n * of a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction chown(path, uid, gid, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.chown(pathModule.toNamespacedPath(path), uid, gid, req);\r\n}\r\n\r\n/**\r\n * Synchronously changes the owner and group\r\n * of a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @returns {void}\r\n */\r\nfunction chownSync(path, uid, gid) {\r\n  path = getValidatedPath(path);\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n  binding.chown(\r\n    pathModule.toNamespacedPath(path),\r\n    uid,\r\n    gid,\r\n  );\r\n}\r\n\r\n/**\r\n * Changes the file system timestamps of the object\r\n * referenced by `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {number | string | Date} atime\r\n * @param {number | string | Date} mtime\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction utimes(path, atime, mtime, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.utimes(pathModule.toNamespacedPath(path),\r\n                 toUnixTimestamp(atime),\r\n                 toUnixTimestamp(mtime),\r\n                 req);\r\n}\r\n\r\n/**\r\n * Synchronously changes the file system timestamps\r\n * of the object referenced by `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {number | string | Date} atime\r\n * @param {number | string | Date} mtime\r\n * @returns {void}\r\n */\r\nfunction utimesSync(path, atime, mtime) {\r\n  path = getValidatedPath(path);\r\n  binding.utimes(\r\n    pathModule.toNamespacedPath(path),\r\n    toUnixTimestamp(atime),\r\n    toUnixTimestamp(mtime),\r\n  );\r\n}\r\n\r\n/**\r\n * Changes the file system timestamps of the object\r\n * referenced by the supplied `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {number | string | Date} atime\r\n * @param {number | string | Date} mtime\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction futimes(fd, atime, mtime, callback) {\r\n  atime = toUnixTimestamp(atime, 'atime');\r\n  mtime = toUnixTimestamp(mtime, 'mtime');\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.futimes(fd, atime, mtime, req);\r\n}\r\n\r\n/**\r\n * Synchronously changes the file system timestamps\r\n * of the object referenced by the\r\n * supplied `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {number | string | Date} atime\r\n * @param {number | string | Date} mtime\r\n * @returns {void}\r\n */\r\nfunction futimesSync(fd, atime, mtime) {\r\n  binding.futimes(\r\n    fd,\r\n    toUnixTimestamp(atime, 'atime'),\r\n    toUnixTimestamp(mtime, 'mtime'),\r\n  );\r\n}\r\n\r\n/**\r\n * Changes the access and modification times of\r\n * a file in the same way as `fs.utimes()`.\r\n * @param {string | Buffer | URL} path\r\n * @param {number | string | Date} atime\r\n * @param {number | string | Date} mtime\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction lutimes(path, atime, mtime, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.lutimes(pathModule.toNamespacedPath(path),\r\n                  toUnixTimestamp(atime),\r\n                  toUnixTimestamp(mtime),\r\n                  req);\r\n}\r\n\r\n/**\r\n * Synchronously changes the access and modification\r\n * times of a file in the same way as `fs.utimesSync()`.\r\n * @param {string | Buffer | URL} path\r\n * @param {number | string | Date} atime\r\n * @param {number | string | Date} mtime\r\n * @returns {void}\r\n */\r\nfunction lutimesSync(path, atime, mtime) {\r\n  path = getValidatedPath(path);\r\n  binding.lutimes(\r\n    pathModule.toNamespacedPath(path),\r\n    toUnixTimestamp(atime),\r\n    toUnixTimestamp(mtime),\r\n  );\r\n}\r\n\r\nfunction writeAll(fd, isUserFd, buffer, offset, length, signal, flush, callback) {\r\n  if (signal?.aborted) {\r\n    const abortError = new AbortError(undefined, { cause: signal?.reason });\r\n    if (isUserFd) {\r\n      callback(abortError);\r\n    } else {\r\n      fs.close(fd, (err) => {\r\n        callback(aggregateTwoErrors(err, abortError));\r\n      });\r\n    }\r\n    return;\r\n  }\r\n  // write(fd, buffer, offset, length, position, callback)\r\n  fs.write(fd, buffer, offset, length, null, (writeErr, written) => {\r\n    if (writeErr) {\r\n      if (isUserFd) {\r\n        callback(writeErr);\r\n      } else {\r\n        fs.close(fd, (err) => {\r\n          callback(aggregateTwoErrors(err, writeErr));\r\n        });\r\n      }\r\n    } else if (written === length) {\r\n      if (!flush) {\r\n        if (isUserFd) {\r\n          callback(null);\r\n        } else {\r\n          fs.close(fd, callback);\r\n        }\r\n      } else {\r\n        fs.fsync(fd, (syncErr) => {\r\n          if (syncErr) {\r\n            if (isUserFd) {\r\n              callback(syncErr);\r\n            } else {\r\n              fs.close(fd, (err) => {\r\n                callback(aggregateTwoErrors(err, syncErr));\r\n              });\r\n            }\r\n          } else if (isUserFd) {\r\n            callback(null);\r\n          } else {\r\n            fs.close(fd, callback);\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      offset += written;\r\n      length -= written;\r\n      writeAll(fd, isUserFd, buffer, offset, length, signal, flush, callback);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Asynchronously writes data to the file.\r\n * @param {string | Buffer | URL | number} path\r\n * @param {string | Buffer | TypedArray | DataView} data\r\n * @param {{\r\n *   encoding?: string | null;\r\n *   mode?: number;\r\n *   flag?: string;\r\n *   signal?: AbortSignal;\r\n *   flush?: boolean;\r\n *   } | string} [options]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction writeFile(path, data, options, callback) {\r\n  callback ||= options;\r\n  validateFunction(callback, 'cb');\r\n  options = getOptions(options, {\r\n    encoding: 'utf8',\r\n    mode: 0o666,\r\n    flag: 'w',\r\n    flush: false,\r\n  });\r\n  const flag = options.flag || 'w';\r\n  const flush = options.flush ?? false;\r\n\r\n  validateBoolean(flush, 'options.flush');\r\n\r\n  if (!isArrayBufferView(data)) {\r\n    validateStringAfterArrayBufferView(data, 'data');\r\n    data = Buffer.from(data, options.encoding || 'utf8');\r\n  }\r\n\r\n  if (isFd(path)) {\r\n    const isUserFd = true;\r\n    const signal = options.signal;\r\n    writeAll(path, isUserFd, data, 0, data.byteLength, signal, flush, callback);\r\n    return;\r\n  }\r\n\r\n  if (checkAborted(options.signal, callback))\r\n    return;\r\n\r\n  fs.open(path, flag, options.mode, (openErr, fd) => {\r\n    if (openErr) {\r\n      callback(openErr);\r\n    } else {\r\n      const isUserFd = false;\r\n      const signal = options.signal;\r\n      writeAll(fd, isUserFd, data, 0, data.byteLength, signal, flush, callback);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Synchronously writes data to the file.\r\n * @param {string | Buffer | URL | number} path\r\n * @param {string | Buffer | TypedArray | DataView} data\r\n * @param {{\r\n *   encoding?: string | null;\r\n *   mode?: number;\r\n *   flag?: string;\r\n *   flush?: boolean;\r\n *   } | string} [options]\r\n * @returns {void}\r\n */\r\nfunction writeFileSync(path, data, options) {\r\n  options = getOptions(options, {\r\n    encoding: 'utf8',\r\n    mode: 0o666,\r\n    flag: 'w',\r\n    flush: false,\r\n  });\r\n\r\n  const flush = options.flush ?? false;\r\n\r\n  validateBoolean(flush, 'options.flush');\r\n\r\n  const flag = options.flag || 'w';\r\n\r\n  // C++ fast path for string data and UTF8 encoding\r\n  if (typeof data === 'string' && (options.encoding === 'utf8' || options.encoding === 'utf-8')) {\r\n    if (!isInt32(path)) {\r\n      path = pathModule.toNamespacedPath(getValidatedPath(path));\r\n    }\r\n\r\n    return binding.writeFileUtf8(\r\n      path, data,\r\n      stringToFlags(flag),\r\n      parseFileMode(options.mode, 'mode', 0o666),\r\n    );\r\n  }\r\n\r\n  if (!isArrayBufferView(data)) {\r\n    validateStringAfterArrayBufferView(data, 'data');\r\n    data = Buffer.from(data, options.encoding || 'utf8');\r\n  }\r\n\r\n  const isUserFd = isFd(path); // File descriptor ownership\r\n  const fd = isUserFd ? path : fs.openSync(path, flag, options.mode);\r\n\r\n  let offset = 0;\r\n  let length = data.byteLength;\r\n  try {\r\n    while (length > 0) {\r\n      const written = fs.writeSync(fd, data, offset, length);\r\n      offset += written;\r\n      length -= written;\r\n    }\r\n\r\n    if (flush) {\r\n      fs.fsyncSync(fd);\r\n    }\r\n  } finally {\r\n    if (!isUserFd) fs.closeSync(fd);\r\n  }\r\n}\r\n\r\n/**\r\n * Asynchronously appends data to a file.\r\n * @param {string | Buffer | URL | number} path\r\n * @param {string | Buffer} data\r\n * @param {{\r\n *   encoding?: string | null;\r\n *   mode?: number;\r\n *   flag?: string;\r\n *   flush?: boolean;\r\n *   } | string} [options]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction appendFile(path, data, options, callback) {\r\n  callback ||= options;\r\n  validateFunction(callback, 'cb');\r\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' });\r\n\r\n  // Don't make changes directly on options object\r\n  options = copyObject(options);\r\n\r\n  // Force append behavior when using a supplied file descriptor\r\n  if (!options.flag || isFd(path))\r\n    options.flag = 'a';\r\n\r\n  fs.writeFile(path, data, options, callback);\r\n}\r\n\r\n/**\r\n * Synchronously appends data to a file.\r\n * @param {string | Buffer | URL | number} path\r\n * @param {string | Buffer} data\r\n * @param {{\r\n *   encoding?: string | null;\r\n *   mode?: number;\r\n *   flag?: string;\r\n *   } | string} [options]\r\n * @returns {void}\r\n */\r\nfunction appendFileSync(path, data, options) {\r\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' });\r\n\r\n  // Don't make changes directly on options object\r\n  options = copyObject(options);\r\n\r\n  // Force append behavior when using a supplied file descriptor\r\n  if (!options.flag || isFd(path))\r\n    options.flag = 'a';\r\n\r\n  fs.writeFileSync(path, data, options);\r\n}\r\n\r\n/**\r\n * Watches for the changes on `filename`.\r\n * @param {string | Buffer | URL} filename\r\n * @param {string | {\r\n *   persistent?: boolean;\r\n *   recursive?: boolean;\r\n *   encoding?: string;\r\n *   signal?: AbortSignal;\r\n *   }} [options]\r\n * @param {(\r\n *   eventType?: string,\r\n *   filename?: string | Buffer\r\n *   ) => any} [listener]\r\n * @returns {watchers.FSWatcher}\r\n */\r\nfunction watch(filename, options, listener) {\r\n  if (typeof options === 'function') {\r\n    listener = options;\r\n  }\r\n  options = getOptions(options);\r\n\r\n  // Don't make changes directly on options object\r\n  options = copyObject(options);\r\n\r\n  if (options.persistent === undefined) options.persistent = true;\r\n  if (options.recursive === undefined) options.recursive = false;\r\n\r\n  let watcher;\r\n  const watchers = require('internal/fs/watchers');\r\n  const path = getValidatedPath(filename);\r\n  // TODO(anonrig): Remove non-native watcher when/if libuv supports recursive.\r\n  // As of November 2022, libuv does not support recursive file watch on all platforms,\r\n  // e.g. Linux due to the limitations of inotify.\r\n  if (options.recursive && !isOSX && !isWindows) {\r\n    const nonNativeWatcher = require('internal/fs/recursive_watch');\r\n    watcher = new nonNativeWatcher.FSWatcher(options);\r\n    watcher[watchers.kFSWatchStart](path);\r\n  } else {\r\n    watcher = new watchers.FSWatcher();\r\n    watcher[watchers.kFSWatchStart](path,\r\n                                    options.persistent,\r\n                                    options.recursive,\r\n                                    options.encoding);\r\n  }\r\n\r\n  if (listener) {\r\n    watcher.addListener('change', listener);\r\n  }\r\n  if (options.signal) {\r\n    if (options.signal.aborted) {\r\n      process.nextTick(() => watcher.close());\r\n    } else {\r\n      const listener = () => watcher.close();\r\n      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;\r\n      options.signal.addEventListener('abort', listener, { __proto__: null, [kResistStopPropagation]: true });\r\n      watcher.once('close', () => {\r\n        options.signal.removeEventListener('abort', listener);\r\n      });\r\n    }\r\n  }\r\n\r\n  return watcher;\r\n}\r\n\r\n\r\nconst statWatchers = new SafeMap();\r\n\r\n/**\r\n * Watches for changes on `filename`.\r\n * @param {string | Buffer | URL} filename\r\n * @param {{\r\n *   bigint?: boolean;\r\n *   persistent?: boolean;\r\n *   interval?: number;\r\n *   }} [options]\r\n * @param {(\r\n *   current?: Stats,\r\n *   previous?: Stats\r\n *   ) => any} listener\r\n * @returns {watchers.StatWatcher}\r\n */\r\nfunction watchFile(filename, options, listener) {\r\n  filename = getValidatedPath(filename);\r\n  filename = pathModule.resolve(filename);\r\n  let stat;\r\n\r\n  if (options === null || typeof options !== 'object') {\r\n    listener = options;\r\n    options = null;\r\n  }\r\n\r\n  options = {\r\n    // Poll interval in milliseconds. 5007 is what libev used to use. It's\r\n    // a little on the slow side but let's stick with it for now to keep\r\n    // behavioral changes to a minimum.\r\n    interval: 5007,\r\n    persistent: true,\r\n    ...options,\r\n  };\r\n\r\n  validateFunction(listener, 'listener');\r\n\r\n  stat = statWatchers.get(filename);\r\n  const watchers = require('internal/fs/watchers');\r\n  if (stat === undefined) {\r\n    stat = new watchers.StatWatcher(options.bigint);\r\n    stat[watchers.kFSStatWatcherStart](filename,\r\n                                       options.persistent, options.interval);\r\n    statWatchers.set(filename, stat);\r\n  } else {\r\n    stat[watchers.kFSStatWatcherAddOrCleanRef]('add');\r\n  }\r\n\r\n  stat.addListener('change', listener);\r\n  return stat;\r\n}\r\n\r\n/**\r\n * Stops watching for changes on `filename`.\r\n * @param {string | Buffer | URL} filename\r\n * @param {() => any} [listener]\r\n * @returns {void}\r\n */\r\nfunction unwatchFile(filename, listener) {\r\n  filename = getValidatedPath(filename);\r\n  filename = pathModule.resolve(filename);\r\n  const stat = statWatchers.get(filename);\r\n\r\n  if (stat === undefined) return;\r\n  const watchers = require('internal/fs/watchers');\r\n  if (typeof listener === 'function') {\r\n    const beforeListenerCount = stat.listenerCount('change');\r\n    stat.removeListener('change', listener);\r\n    if (stat.listenerCount('change') < beforeListenerCount)\r\n      stat[watchers.kFSStatWatcherAddOrCleanRef]('clean');\r\n  } else {\r\n    stat.removeAllListeners('change');\r\n    stat[watchers.kFSStatWatcherAddOrCleanRef]('cleanAll');\r\n  }\r\n\r\n  if (stat.listenerCount('change') === 0) {\r\n    stat.stop();\r\n    statWatchers.delete(filename);\r\n  }\r\n}\r\n\r\n\r\nlet splitRoot;\r\nif (isWindows) {\r\n  // Regex to find the device root on Windows (e.g. 'c:\\\\'), including trailing\r\n  // slash.\r\n  const splitRootRe = /^(?:[a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/][^\\\\/]+)?[\\\\/]*/;\r\n  splitRoot = function splitRoot(str) {\r\n    return SideEffectFreeRegExpPrototypeExec(splitRootRe, str)[0];\r\n  };\r\n} else {\r\n  splitRoot = function splitRoot(str) {\r\n    for (let i = 0; i < str.length; ++i) {\r\n      if (StringPrototypeCharCodeAt(str, i) !== CHAR_FORWARD_SLASH)\r\n        return StringPrototypeSlice(str, 0, i);\r\n    }\r\n    return str;\r\n  };\r\n}\r\n\r\nfunction encodeRealpathResult(result, options) {\r\n  if (!options || !options.encoding || options.encoding === 'utf8')\r\n    return result;\r\n  const asBuffer = Buffer.from(result);\r\n  if (options.encoding === 'buffer') {\r\n    return asBuffer;\r\n  }\r\n  return asBuffer.toString(options.encoding);\r\n}\r\n\r\n// Finds the next portion of a (partial) path, up to the next path delimiter\r\nlet nextPart;\r\nif (isWindows) {\r\n  nextPart = function nextPart(p, i) {\r\n    for (; i < p.length; ++i) {\r\n      const ch = StringPrototypeCharCodeAt(p, i);\r\n\r\n      // Check for a separator character\r\n      if (ch === CHAR_BACKWARD_SLASH || ch === CHAR_FORWARD_SLASH)\r\n        return i;\r\n    }\r\n    return -1;\r\n  };\r\n} else {\r\n  nextPart = function nextPart(p, i) {\r\n    return StringPrototypeIndexOf(p, '/', i);\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the resolved pathname.\r\n * @param {string | Buffer | URL} p\r\n * @param {string | { encoding?: string | null; }} [options]\r\n * @returns {string | Buffer}\r\n */\r\nfunction realpathSync(p, options) {\r\n  options = getOptions(options);\r\n  p = toPathIfFileURL(p);\r\n  if (typeof p !== 'string') {\r\n    p += '';\r\n  }\r\n  validatePath(p);\r\n  p = pathModule.resolve(p);\r\n\r\n  const cache = options[realpathCacheKey];\r\n  const maybeCachedResult = cache?.get(p);\r\n  if (maybeCachedResult) {\r\n    return maybeCachedResult;\r\n  }\r\n\r\n  const seenLinks = new SafeMap();\r\n  const knownHard = new SafeSet();\r\n  const original = p;\r\n\r\n  // Current character position in p\r\n  let pos;\r\n  // The partial path so far, including a trailing slash if any\r\n  let current;\r\n  // The partial path without a trailing slash (except when pointing at a root)\r\n  let base;\r\n  // The partial path scanned in the previous round, with slash\r\n  let previous;\r\n\r\n  // Skip over roots\r\n  current = base = splitRoot(p);\r\n  pos = current.length;\r\n\r\n  // On windows, check that the root exists. On unix there is no need.\r\n  if (isWindows) {\r\n    const out = binding.lstat(pathModule.toNamespacedPath(base), false, undefined, true /* throwIfNoEntry */);\r\n    if (out === undefined) {\r\n      return;\r\n    }\r\n    knownHard.add(base);\r\n  }\r\n\r\n  // Walk down the path, swapping out linked path parts for their real\r\n  // values\r\n  // NB: p.length changes.\r\n  while (pos < p.length) {\r\n    // find the next part\r\n    const result = nextPart(p, pos);\r\n    previous = current;\r\n    if (result === -1) {\r\n      const last = StringPrototypeSlice(p, pos);\r\n      current += last;\r\n      base = previous + last;\r\n      pos = p.length;\r\n    } else {\r\n      current += StringPrototypeSlice(p, pos, result + 1);\r\n      base = previous + StringPrototypeSlice(p, pos, result);\r\n      pos = result + 1;\r\n    }\r\n\r\n    // Continue if not a symlink, break if a pipe/socket\r\n    if (knownHard.has(base) || cache?.get(base) === base) {\r\n      if (isFileType(statValues, S_IFIFO) ||\r\n          isFileType(statValues, S_IFSOCK)) {\r\n        break;\r\n      }\r\n      continue;\r\n    }\r\n\r\n    let resolvedLink;\r\n    const maybeCachedResolved = cache?.get(base);\r\n    if (maybeCachedResolved) {\r\n      resolvedLink = maybeCachedResolved;\r\n    } else {\r\n      // Use stats array directly to avoid creating an fs.Stats instance just\r\n      // for our internal use.\r\n\r\n      const baseLong = pathModule.toNamespacedPath(base);\r\n      const stats = binding.lstat(baseLong, true, undefined, true /* throwIfNoEntry */);\r\n      if (stats === undefined) {\r\n        return;\r\n      }\r\n\r\n      if (!isFileType(stats, S_IFLNK)) {\r\n        knownHard.add(base);\r\n        cache?.set(base, base);\r\n        continue;\r\n      }\r\n\r\n      // Read the link if it wasn't read before\r\n      // dev/ino always return 0 on windows, so skip the check.\r\n      let linkTarget = null;\r\n      let id;\r\n      if (!isWindows) {\r\n        const dev = BigIntPrototypeToString(stats[0], 32);\r\n        const ino = BigIntPrototypeToString(stats[7], 32);\r\n        id = `${dev}:${ino}`;\r\n        if (seenLinks.has(id)) {\r\n          linkTarget = seenLinks.get(id);\r\n        }\r\n      }\r\n      if (linkTarget === null) {\r\n        binding.stat(baseLong, false, undefined, true);\r\n        linkTarget = binding.readlink(baseLong, undefined);\r\n      }\r\n      resolvedLink = pathModule.resolve(previous, linkTarget);\r\n\r\n      cache?.set(base, resolvedLink);\r\n      if (!isWindows) seenLinks.set(id, linkTarget);\r\n    }\r\n\r\n    // Resolve the link, then start over\r\n    p = pathModule.resolve(resolvedLink, StringPrototypeSlice(p, pos));\r\n\r\n    // Skip over roots\r\n    current = base = splitRoot(p);\r\n    pos = current.length;\r\n\r\n    // On windows, check that the root exists. On unix there is no need.\r\n    if (isWindows && !knownHard.has(base)) {\r\n      const out = binding.lstat(pathModule.toNamespacedPath(base), false, undefined, true /* throwIfNoEntry */);\r\n      if (out === undefined) {\r\n        return;\r\n      }\r\n      knownHard.add(base);\r\n    }\r\n  }\r\n\r\n  cache?.set(original, p);\r\n  return encodeRealpathResult(p, options);\r\n}\r\n\r\n/**\r\n * Returns the resolved pathname.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | { encoding?: string; }} [options]\r\n * @returns {string | Buffer}\r\n */\r\nrealpathSync.native = (path, options) => {\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path);\r\n  return binding.realpath(\r\n    pathModule.toNamespacedPath(path),\r\n    options.encoding,\r\n  );\r\n};\r\n\r\n/**\r\n * Asynchronously computes the canonical pathname by\r\n * resolving `.`, `..` and symbolic links.\r\n * @param {string | Buffer | URL} p\r\n * @param {string | { encoding?: string; }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   resolvedPath?: string | Buffer\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction realpath(p, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n  } else {\r\n    validateFunction(callback, 'cb');\r\n  }\r\n  options = getOptions(options);\r\n  p = toPathIfFileURL(p);\r\n\r\n  if (typeof p !== 'string') {\r\n    p += '';\r\n  }\r\n  validatePath(p);\r\n  p = pathModule.resolve(p);\r\n\r\n  const seenLinks = new SafeMap();\r\n  const knownHard = new SafeSet();\r\n\r\n  // Current character position in p\r\n  let pos;\r\n  // The partial path so far, including a trailing slash if any\r\n  let current;\r\n  // The partial path without a trailing slash (except when pointing at a root)\r\n  let base;\r\n  // The partial path scanned in the previous round, with slash\r\n  let previous;\r\n\r\n  current = base = splitRoot(p);\r\n  pos = current.length;\r\n\r\n  // On windows, check that the root exists. On unix there is no need.\r\n  if (isWindows && !knownHard.has(base)) {\r\n    fs.lstat(base, (err, stats) => {\r\n      if (err) return callback(err);\r\n      knownHard.add(base);\r\n      LOOP();\r\n    });\r\n  } else {\r\n    process.nextTick(LOOP);\r\n  }\r\n\r\n  // Walk down the path, swapping out linked path parts for their real\r\n  // values\r\n  function LOOP() {\r\n    // Stop if scanned past end of path\r\n    if (pos >= p.length) {\r\n      return callback(null, encodeRealpathResult(p, options));\r\n    }\r\n\r\n    // find the next part\r\n    const result = nextPart(p, pos);\r\n    previous = current;\r\n    if (result === -1) {\r\n      const last = StringPrototypeSlice(p, pos);\r\n      current += last;\r\n      base = previous + last;\r\n      pos = p.length;\r\n    } else {\r\n      current += StringPrototypeSlice(p, pos, result + 1);\r\n      base = previous + StringPrototypeSlice(p, pos, result);\r\n      pos = result + 1;\r\n    }\r\n\r\n    // Continue if not a symlink, break if a pipe/socket\r\n    if (knownHard.has(base)) {\r\n      if (isFileType(statValues, S_IFIFO) ||\r\n          isFileType(statValues, S_IFSOCK)) {\r\n        return callback(null, encodeRealpathResult(p, options));\r\n      }\r\n      return process.nextTick(LOOP);\r\n    }\r\n\r\n    return fs.lstat(base, { bigint: true }, gotStat);\r\n  }\r\n\r\n  function gotStat(err, stats) {\r\n    if (err) return callback(err);\r\n\r\n    // If not a symlink, skip to the next path part\r\n    if (!stats.isSymbolicLink()) {\r\n      knownHard.add(base);\r\n      return process.nextTick(LOOP);\r\n    }\r\n\r\n    // Stat & read the link if not read before.\r\n    // Call `gotTarget()` as soon as the link target is known.\r\n    // `dev`/`ino` always return 0 on windows, so skip the check.\r\n    let id;\r\n    if (!isWindows) {\r\n      const dev = BigIntPrototypeToString(stats.dev, 32);\r\n      const ino = BigIntPrototypeToString(stats.ino, 32);\r\n      id = `${dev}:${ino}`;\r\n      if (seenLinks.has(id)) {\r\n        return gotTarget(null, seenLinks.get(id));\r\n      }\r\n    }\r\n    fs.stat(base, (err) => {\r\n      if (err) return callback(err);\r\n\r\n      fs.readlink(base, (err, target) => {\r\n        if (!isWindows) seenLinks.set(id, target);\r\n        gotTarget(err, target);\r\n      });\r\n    });\r\n  }\r\n\r\n  function gotTarget(err, target) {\r\n    if (err) return callback(err);\r\n\r\n    gotResolvedLink(pathModule.resolve(previous, target));\r\n  }\r\n\r\n  function gotResolvedLink(resolvedLink) {\r\n    // Resolve the link, then start over\r\n    p = pathModule.resolve(resolvedLink, StringPrototypeSlice(p, pos));\r\n    current = base = splitRoot(p);\r\n    pos = current.length;\r\n\r\n    // On windows, check that the root exists. On unix there is no need.\r\n    if (isWindows && !knownHard.has(base)) {\r\n      fs.lstat(base, (err) => {\r\n        if (err) return callback(err);\r\n        knownHard.add(base);\r\n        LOOP();\r\n      });\r\n    } else {\r\n      process.nextTick(LOOP);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Asynchronously computes the canonical pathname by\r\n * resolving `.`, `..` and symbolic links.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | { encoding?: string; }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   resolvedPath?: string | Buffer\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nrealpath.native = (path, options, callback) => {\r\n  callback = makeCallback(callback || options);\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.realpath(pathModule.toNamespacedPath(path), options.encoding, req);\r\n};\r\n\r\n/**\r\n * Creates a unique temporary directory.\r\n * @param {string | Buffer | URL} prefix\r\n * @param {string | { encoding?: string; }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   directory?: string\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction mkdtemp(prefix, options, callback) {\r\n  callback = makeCallback(typeof options === 'function' ? options : callback);\r\n  options = getOptions(options);\r\n\r\n  prefix = getValidatedPath(prefix, 'prefix');\r\n  warnOnNonPortableTemplate(prefix);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.mkdtemp(prefix, options.encoding, req);\r\n}\r\n\r\n/**\r\n * Synchronously creates a unique temporary directory.\r\n * @param {string | Buffer | URL} prefix\r\n * @param {string | { encoding?: string; }} [options]\r\n * @returns {string}\r\n */\r\nfunction mkdtempSync(prefix, options) {\r\n  options = getOptions(options);\r\n\r\n  prefix = getValidatedPath(prefix, 'prefix');\r\n  warnOnNonPortableTemplate(prefix);\r\n  return binding.mkdtemp(prefix, options.encoding);\r\n}\r\n\r\n/**\r\n * Asynchronously copies `src` to `dest`. By\r\n * default, `dest` is overwritten if it already exists.\r\n * @param {string | Buffer | URL} src\r\n * @param {string | Buffer | URL} dest\r\n * @param {number} [mode]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction copyFile(src, dest, mode, callback) {\r\n  if (typeof mode === 'function') {\r\n    callback = mode;\r\n    mode = 0;\r\n  }\r\n\r\n  src = getValidatedPath(src, 'src');\r\n  dest = getValidatedPath(dest, 'dest');\r\n\r\n  src = pathModule.toNamespacedPath(src);\r\n  dest = pathModule.toNamespacedPath(dest);\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.copyFile(src, dest, mode, req);\r\n}\r\n\r\n/**\r\n * Synchronously copies `src` to `dest`. By\r\n * default, `dest` is overwritten if it already exists.\r\n * @param {string | Buffer | URL} src\r\n * @param {string | Buffer | URL} dest\r\n * @param {number} [mode]\r\n * @returns {void}\r\n */\r\nfunction copyFileSync(src, dest, mode) {\r\n  src = getValidatedPath(src, 'src');\r\n  dest = getValidatedPath(dest, 'dest');\r\n\r\n  binding.copyFile(\r\n    pathModule.toNamespacedPath(src),\r\n    pathModule.toNamespacedPath(dest),\r\n    mode,\r\n  );\r\n}\r\n\r\n/**\r\n * Asynchronously copies `src` to `dest`. `src` can be a file, directory, or\r\n * symlink. The contents of directories will be copied recursively.\r\n * @param {string | URL} src\r\n * @param {string | URL} dest\r\n * @param {object} [options]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction cp(src, dest, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  callback = makeCallback(callback);\r\n  options = validateCpOptions(options);\r\n  src = pathModule.toNamespacedPath(getValidatedPath(src, 'src'));\r\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest, 'dest'));\r\n  lazyLoadCp();\r\n  cpFn(src, dest, options, callback);\r\n}\r\n\r\n/**\r\n * Synchronously copies `src` to `dest`. `src` can be a file, directory, or\r\n * symlink. The contents of directories will be copied recursively.\r\n * @param {string | URL} src\r\n * @param {string | URL} dest\r\n * @param {object} [options]\r\n * @returns {void}\r\n */\r\nfunction cpSync(src, dest, options) {\r\n  options = validateCpOptions(options);\r\n  src = pathModule.toNamespacedPath(getValidatedPath(src, 'src'));\r\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest, 'dest'));\r\n  lazyLoadCp();\r\n  cpSyncFn(src, dest, options);\r\n}\r\n\r\nfunction lazyLoadStreams() {\r\n  if (!ReadStream) {\r\n    ({ ReadStream, WriteStream } = require('internal/fs/streams'));\r\n    FileReadStream = ReadStream;\r\n    FileWriteStream = WriteStream;\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a readable stream with a default `highWaterMark`\r\n * of 64 KiB.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | {\r\n *   flags?: string;\r\n *   encoding?: string;\r\n *   fd?: number | FileHandle;\r\n *   mode?: number;\r\n *   autoClose?: boolean;\r\n *   emitClose?: boolean;\r\n *   start: number;\r\n *   end?: number;\r\n *   highWaterMark?: number;\r\n *   fs?: object | null;\r\n *   signal?: AbortSignal | null;\r\n *   }} [options]\r\n * @returns {ReadStream}\r\n */\r\nfunction createReadStream(path, options) {\r\n  lazyLoadStreams();\r\n  return new ReadStream(path, options);\r\n}\r\n\r\n/**\r\n * Creates a write stream.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | {\r\n *   flags?: string;\r\n *   encoding?: string;\r\n *   fd?: number | FileHandle;\r\n *   mode?: number;\r\n *   autoClose?: boolean;\r\n *   emitClose?: boolean;\r\n *   start: number;\r\n *   fs?: object | null;\r\n *   signal?: AbortSignal | null;\r\n *   highWaterMark?: number;\r\n *   flush?: boolean;\r\n *   }} [options]\r\n * @returns {WriteStream}\r\n */\r\nfunction createWriteStream(path, options) {\r\n  lazyLoadStreams();\r\n  return new WriteStream(path, options);\r\n}\r\n\r\nconst lazyGlob = getLazy(() => require('internal/fs/glob').Glob);\r\n\r\nfunction glob(pattern, options, callback) {\r\n  emitExperimentalWarning('glob');\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  callback = makeCallback(callback);\r\n\r\n  const Glob = lazyGlob();\r\n  // TODO: Use iterator helpers when available\r\n  (async () => {\r\n    try {\r\n      const res = [];\r\n      for await (const entry of new Glob(pattern, options).glob()) {\r\n        ArrayPrototypePush(res, entry);\r\n      }\r\n      callback(null, res);\r\n    } catch (err) {\r\n      callback(err);\r\n    }\r\n  })();\r\n}\r\n\r\nfunction globSync(pattern, options) {\r\n  emitExperimentalWarning('globSync');\r\n  const Glob = lazyGlob();\r\n  return new Glob(pattern, options).globSync();\r\n}\r\n\r\n\r\nmodule.exports = fs = {\r\n  appendFile,\r\n  appendFileSync,\r\n  access,\r\n  accessSync,\r\n  chown,\r\n  chownSync,\r\n  chmod,\r\n  chmodSync,\r\n  close,\r\n  closeSync,\r\n  copyFile,\r\n  copyFileSync,\r\n  cp,\r\n  cpSync,\r\n  createReadStream,\r\n  createWriteStream,\r\n  exists,\r\n  existsSync,\r\n  fchown,\r\n  fchownSync,\r\n  fchmod,\r\n  fchmodSync,\r\n  fdatasync,\r\n  fdatasyncSync,\r\n  fstat,\r\n  fstatSync,\r\n  fsync,\r\n  fsyncSync,\r\n  ftruncate,\r\n  ftruncateSync,\r\n  futimes,\r\n  futimesSync,\r\n  glob,\r\n  globSync,\r\n  lchown,\r\n  lchownSync,\r\n  lchmod: constants.O_SYMLINK !== undefined ? lchmod : undefined,\r\n  lchmodSync: constants.O_SYMLINK !== undefined ? lchmodSync : undefined,\r\n  link,\r\n  linkSync,\r\n  lstat,\r\n  lstatSync,\r\n  lutimes,\r\n  lutimesSync,\r\n  mkdir,\r\n  mkdirSync,\r\n  mkdtemp,\r\n  mkdtempSync,\r\n  open,\r\n  openSync,\r\n  openAsBlob,\r\n  readdir,\r\n  readdirSync,\r\n  read,\r\n  readSync,\r\n  readv,\r\n  readvSync,\r\n  readFile,\r\n  readFileSync,\r\n  readlink,\r\n  readlinkSync,\r\n  realpath,\r\n  realpathSync,\r\n  rename,\r\n  renameSync,\r\n  rm,\r\n  rmSync,\r\n  rmdir,\r\n  rmdirSync,\r\n  stat,\r\n  statfs,\r\n  statSync,\r\n  statfsSync,\r\n  symlink,\r\n  symlinkSync,\r\n  truncate,\r\n  truncateSync,\r\n  unwatchFile,\r\n  unlink,\r\n  unlinkSync,\r\n  utimes,\r\n  utimesSync,\r\n  watch,\r\n  watchFile,\r\n  writeFile,\r\n  writeFileSync,\r\n  write,\r\n  writeSync,\r\n  writev,\r\n  writevSync,\r\n  Dirent,\r\n  Stats,\r\n\r\n  get ReadStream() {\r\n    lazyLoadStreams();\r\n    return ReadStream;\r\n  },\r\n\r\n  set ReadStream(val) {\r\n    ReadStream = val;\r\n  },\r\n\r\n  get WriteStream() {\r\n    lazyLoadStreams();\r\n    return WriteStream;\r\n  },\r\n\r\n  set WriteStream(val) {\r\n    WriteStream = val;\r\n  },\r\n\r\n  // Legacy names... these have to be separate because of how graceful-fs\r\n  // (and possibly other) modules monkey patch the values.\r\n  get FileReadStream() {\r\n    lazyLoadStreams();\r\n    return FileReadStream;\r\n  },\r\n\r\n  set FileReadStream(val) {\r\n    FileReadStream = val;\r\n  },\r\n\r\n  get FileWriteStream() {\r\n    lazyLoadStreams();\r\n    return FileWriteStream;\r\n  },\r\n\r\n  set FileWriteStream(val) {\r\n    FileWriteStream = val;\r\n  },\r\n\r\n  // For tests\r\n  _toUnixTimestamp: toUnixTimestamp,\r\n};\r\n\r\ndefineLazyProperties(\r\n  fs,\r\n  'internal/fs/dir',\r\n  ['Dir', 'opendir', 'opendirSync'],\r\n);\r\n\r\nObjectDefineProperties(fs, {\r\n  F_OK: { __proto__: null, enumerable: true, value: F_OK || 0 },\r\n  R_OK: { __proto__: null, enumerable: true, value: R_OK || 0 },\r\n  W_OK: { __proto__: null, enumerable: true, value: W_OK || 0 },\r\n  X_OK: { __proto__: null, enumerable: true, value: X_OK || 0 },\r\n  constants: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    value: constants,\r\n  },\r\n  promises: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      promises ??= require('internal/fs/promises').exports;\r\n      return promises;\r\n    },\r\n  },\r\n});\r\n"
  },
  "43": {
    "metadata": {
      "scriptId": "43",
      "url": "node:internal/blob",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 497,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "72e1b92394eba97983a21a62a7b85b4254dad004036e391ea333555bad5ee0be",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 13493,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/blob"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayFrom,\r\n  MathMax,\r\n  MathMin,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  PromisePrototypeThen,\r\n  PromiseReject,\r\n  RegExpPrototypeExec,\r\n  RegExpPrototypeSymbolReplace,\r\n  StringPrototypeSplit,\r\n  StringPrototypeToLowerCase,\r\n  Symbol,\r\n  SymbolIterator,\r\n  SymbolToStringTag,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  createBlob: _createBlob,\r\n  createBlobFromFilePath: _createBlobFromFilePath,\r\n  concat,\r\n  getDataObject,\r\n} = internalBinding('blob');\r\nconst {\r\n  kMaxLength,\r\n} = internalBinding('buffer');\r\n\r\nconst {\r\n  TextDecoder,\r\n  TextEncoder,\r\n} = require('internal/encoding');\r\nconst { URL } = require('internal/url');\r\n\r\nconst {\r\n  markTransferMode,\r\n  kClone,\r\n  kDeserialize,\r\n} = require('internal/worker/js_transferable');\r\n\r\nconst {\r\n  isAnyArrayBuffer,\r\n  isArrayBufferView,\r\n} = require('internal/util/types');\r\n\r\nconst {\r\n  createDeferredPromise,\r\n  customInspectSymbol: kInspect,\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n  lazyDOMException,\r\n} = require('internal/util');\r\nconst { inspect } = require('internal/util/inspect');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_BUFFER_TOO_LARGE,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_STATE,\r\n    ERR_INVALID_THIS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateDictionary,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  CountQueuingStrategy,\r\n} = require('internal/webstreams/queuingstrategies');\r\n\r\nconst { queueMicrotask } = require('internal/process/task_queues');\r\n\r\nconst kHandle = Symbol('kHandle');\r\nconst kType = Symbol('kType');\r\nconst kLength = Symbol('kLength');\r\nconst kNotCloneable = Symbol('kNotCloneable');\r\n\r\nconst disallowedTypeCharacters = /[^\\u{0020}-\\u{007E}]/u;\r\n\r\nlet ReadableStream;\r\n\r\nconst enc = new TextEncoder();\r\nlet dec;\r\n\r\n// Yes, lazy loading is annoying but because of circular\r\n// references between the url, internal/blob, and buffer\r\n// modules, lazy loading here makes sure that things work.\r\n\r\nfunction lazyReadableStream(options) {\r\n  // eslint-disable-next-line no-global-assign\r\n  ReadableStream ??=\r\n    require('internal/webstreams/readablestream').ReadableStream;\r\n  return new ReadableStream(options);\r\n}\r\n\r\nconst { EOL } = require('internal/constants');\r\n\r\nfunction isBlob(object) {\r\n  return object?.[kHandle] !== undefined;\r\n}\r\n\r\nfunction getSource(source, endings) {\r\n  if (isBlob(source))\r\n    return [source.size, source[kHandle]];\r\n\r\n  if (isAnyArrayBuffer(source)) {\r\n    source = new Uint8Array(source);\r\n  } else if (!isArrayBufferView(source)) {\r\n    source = `${source}`;\r\n    if (endings === 'native')\r\n      source = RegExpPrototypeSymbolReplace(/\\n|\\r\\n/g, source, EOL);\r\n    source = enc.encode(source);\r\n  }\r\n\r\n  // We copy into a new Uint8Array because the underlying\r\n  // BackingStores are going to be detached and owned by\r\n  // the Blob.\r\n  const { buffer, byteOffset, byteLength } = source;\r\n  const slice = buffer.slice(byteOffset, byteOffset + byteLength);\r\n  return [byteLength, new Uint8Array(slice)];\r\n}\r\n\r\nclass Blob {\r\n  /**\r\n   * @typedef {string|ArrayBuffer|ArrayBufferView|Blob} SourcePart\r\n   */\r\n\r\n  /**\r\n   * @param {SourcePart[]} [sources]\r\n   * @param {{\r\n   *   endings? : string,\r\n   *   type? : string,\r\n   * }} [options]\r\n   * @constructs {Blob}\r\n   */\r\n  constructor(sources = [], options) {\r\n    markTransferMode(this, true, false);\r\n\r\n    if (sources === null ||\r\n        typeof sources[SymbolIterator] !== 'function' ||\r\n        typeof sources === 'string') {\r\n      throw new ERR_INVALID_ARG_TYPE('sources', 'a sequence', sources);\r\n    }\r\n    validateDictionary(options, 'options');\r\n    let {\r\n      type = '',\r\n      endings = 'transparent',\r\n    } = options ?? kEmptyObject;\r\n\r\n    endings = `${endings}`;\r\n    if (endings !== 'transparent' && endings !== 'native')\r\n      throw new ERR_INVALID_ARG_VALUE('options.endings', endings);\r\n\r\n    let length = 0;\r\n    const sources_ = ArrayFrom(sources, (source) => {\r\n      const { 0: len, 1: src } = getSource(source, endings);\r\n      length += len;\r\n      return src;\r\n    });\r\n\r\n    if (length > kMaxLength)\r\n      throw new ERR_BUFFER_TOO_LARGE(kMaxLength);\r\n\r\n    this[kHandle] = _createBlob(sources_, length);\r\n    this[kLength] = length;\r\n\r\n    type = `${type}`;\r\n    this[kType] = RegExpPrototypeExec(disallowedTypeCharacters, type) !== null ?\r\n      '' : StringPrototypeToLowerCase(type);\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (depth < 0)\r\n      return this;\r\n\r\n    const opts = {\r\n      ...options,\r\n      depth: options.depth == null ? null : options.depth - 1,\r\n    };\r\n\r\n    return `Blob ${inspect({\r\n      size: this.size,\r\n      type: this.type,\r\n    }, opts)}`;\r\n  }\r\n\r\n  [kClone]() {\r\n    if (this[kNotCloneable]) {\r\n      // We do not currently allow file-backed Blobs to be cloned or passed across\r\n      // worker threads.\r\n      throw new ERR_INVALID_STATE.TypeError('File-backed Blobs are not cloneable');\r\n    }\r\n    const handle = this[kHandle];\r\n    const type = this[kType];\r\n    const length = this[kLength];\r\n    return {\r\n      data: { handle, type, length },\r\n      deserializeInfo: 'internal/blob:Blob',\r\n    };\r\n  }\r\n\r\n  [kDeserialize]({ handle, type, length }) {\r\n    this[kHandle] = handle;\r\n    this[kType] = type;\r\n    this[kLength] = length;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {string}\r\n   */\r\n  get type() {\r\n    if (!isBlob(this))\r\n      throw new ERR_INVALID_THIS('Blob');\r\n    return this[kType];\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get size() {\r\n    if (!isBlob(this))\r\n      throw new ERR_INVALID_THIS('Blob');\r\n    return this[kLength];\r\n  }\r\n\r\n  /**\r\n   * @param {number} [start]\r\n   * @param {number} [end]\r\n   * @param {string} [contentType]\r\n   * @returns {Blob}\r\n   */\r\n  slice(start = 0, end = this[kLength], contentType = '') {\r\n    if (!isBlob(this))\r\n      throw new ERR_INVALID_THIS('Blob');\r\n    if (start < 0) {\r\n      start = MathMax(this[kLength] + start, 0);\r\n    } else {\r\n      start = MathMin(start, this[kLength]);\r\n    }\r\n\r\n    if (end < 0) {\r\n      end = MathMax(this[kLength] + end, 0);\r\n    } else {\r\n      end = MathMin(end, this[kLength]);\r\n    }\r\n\r\n    contentType = `${contentType}`;\r\n    if (RegExpPrototypeExec(disallowedTypeCharacters, contentType) !== null) {\r\n      contentType = '';\r\n    } else {\r\n      contentType = StringPrototypeToLowerCase(contentType);\r\n    }\r\n\r\n    const span = MathMax(end - start, 0);\r\n\r\n    return createBlob(\r\n      this[kHandle].slice(start, start + span),\r\n      span,\r\n      contentType);\r\n  }\r\n\r\n  /**\r\n   * @returns {Promise<ArrayBuffer>}\r\n   */\r\n  arrayBuffer() {\r\n    if (!isBlob(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('Blob'));\r\n\r\n    const { promise, resolve, reject } = createDeferredPromise();\r\n    const reader = this[kHandle].getReader();\r\n    const buffers = [];\r\n    const readNext = () => {\r\n      reader.pull((status, buffer) => {\r\n        if (status === 0) {\r\n          // EOS, concat & resolve\r\n          // buffer should be undefined here\r\n          resolve(concat(buffers));\r\n          return;\r\n        } else if (status < 0) {\r\n          // The read could fail for many different reasons when reading\r\n          // from a non-memory resident blob part (e.g. file-backed blob).\r\n          // The error details the system error code.\r\n          const error = lazyDOMException('The blob could not be read', 'NotReadableError');\r\n          reject(error);\r\n          return;\r\n        }\r\n        if (buffer !== undefined)\r\n          buffers.push(buffer);\r\n        queueMicrotask(() => readNext());\r\n      });\r\n    };\r\n    readNext();\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * @returns {Promise<string>}\r\n   */\r\n  async text() {\r\n    if (!isBlob(this))\r\n      throw new ERR_INVALID_THIS('Blob');\r\n\r\n    dec ??= new TextDecoder();\r\n\r\n    return dec.decode(await this.arrayBuffer());\r\n  }\r\n\r\n  bytes() {\r\n    if (!isBlob(this))\r\n      throw new ERR_INVALID_THIS('Blob');\r\n\r\n    return PromisePrototypeThen(\r\n      this.arrayBuffer(),\r\n      (buffer) => new Uint8Array(buffer));\r\n  }\r\n\r\n  /**\r\n   * @returns {ReadableStream}\r\n   */\r\n  stream() {\r\n    if (!isBlob(this))\r\n      throw new ERR_INVALID_THIS('Blob');\r\n\r\n    const reader = this[kHandle].getReader();\r\n    return new lazyReadableStream({\r\n      type: 'bytes',\r\n      start(c) {\r\n        // There really should only be one read at a time so using an\r\n        // array here is purely defensive.\r\n        this.pendingPulls = [];\r\n      },\r\n      pull(c) {\r\n        const { promise, resolve, reject } = createDeferredPromise();\r\n        this.pendingPulls.push({ resolve, reject });\r\n        const readNext = () => {\r\n          reader.pull((status, buffer) => {\r\n            // If pendingPulls is empty here, the stream had to have\r\n            // been canceled, and we don't really care about the result.\r\n            // We can simply exit.\r\n            if (this.pendingPulls.length === 0) {\r\n              return;\r\n            }\r\n            if (status === 0) {\r\n              // EOS\r\n              c.close();\r\n              // This is to signal the end for byob readers\r\n              // see https://streams.spec.whatwg.org/#example-rbs-pull\r\n              c.byobRequest?.respond(0);\r\n              const pending = this.pendingPulls.shift();\r\n              pending.resolve();\r\n              return;\r\n            } else if (status < 0) {\r\n              // The read could fail for many different reasons when reading\r\n              // from a non-memory resident blob part (e.g. file-backed blob).\r\n              // The error details the system error code.\r\n              const error = lazyDOMException('The blob could not be read', 'NotReadableError');\r\n              const pending = this.pendingPulls.shift();\r\n              c.error(error);\r\n              pending.reject(error);\r\n              return;\r\n            }\r\n            // ReadableByteStreamController.enqueue errors if we submit a 0-length\r\n            // buffer. We need to check for that here.\r\n            if (buffer !== undefined && buffer.byteLength !== 0) {\r\n              c.enqueue(new Uint8Array(buffer));\r\n            }\r\n            // We keep reading until we either reach EOS, some error, or we\r\n            // hit the flow rate of the stream (c.desiredSize).\r\n            queueMicrotask(() => {\r\n              if (c.desiredSize < 0) {\r\n                // A manual backpressure check.\r\n                if (this.pendingPulls.length !== 0) {\r\n                  // A case of waiting pull finished (= not yet canceled)\r\n                  const pending = this.pendingPulls.shift();\r\n                  pending.resolve();\r\n                }\r\n                return;\r\n              }\r\n              readNext();\r\n            });\r\n          });\r\n        };\r\n        readNext();\r\n        return promise;\r\n      },\r\n      cancel(reason) {\r\n        // Reject any currently pending pulls here.\r\n        for (const pending of this.pendingPulls) {\r\n          pending.reject(reason);\r\n        }\r\n        this.pendingPulls = [];\r\n      },\r\n    // We set the highWaterMark to 0 because we do not want the stream to\r\n    // start reading immediately on creation. We want it to wait until read\r\n    // is called.\r\n    }, new CountQueuingStrategy({ highWaterMark: 0 }));\r\n  }\r\n}\r\n\r\nfunction TransferableBlob(handle, length, type = '') {\r\n  markTransferMode(this, true, false);\r\n  this[kHandle] = handle;\r\n  this[kType] = type;\r\n  this[kLength] = length;\r\n}\r\n\r\nObjectSetPrototypeOf(TransferableBlob.prototype, Blob.prototype);\r\nObjectSetPrototypeOf(TransferableBlob, Blob);\r\n\r\nfunction createBlob(handle, length, type = '') {\r\n  const transferredBlob = new TransferableBlob(handle, length, type);\r\n\r\n  // Fix issues like: https://github.com/nodejs/node/pull/49730#discussion_r1331720053\r\n  transferredBlob.constructor = Blob;\r\n\r\n  return transferredBlob;\r\n}\r\n\r\nObjectDefineProperty(Blob.prototype, SymbolToStringTag, {\r\n  __proto__: null,\r\n  configurable: true,\r\n  value: 'Blob',\r\n});\r\n\r\nObjectDefineProperties(Blob.prototype, {\r\n  size: kEnumerableProperty,\r\n  type: kEnumerableProperty,\r\n  slice: kEnumerableProperty,\r\n  stream: kEnumerableProperty,\r\n  text: kEnumerableProperty,\r\n  arrayBuffer: kEnumerableProperty,\r\n});\r\n\r\nfunction resolveObjectURL(url) {\r\n  url = `${url}`;\r\n  try {\r\n    const parsed = new URL(url);\r\n\r\n    const split = StringPrototypeSplit(parsed.pathname, ':');\r\n\r\n    if (split.length !== 2)\r\n      return;\r\n\r\n    const {\r\n      0: base,\r\n      1: id,\r\n    } = split;\r\n\r\n    if (base !== 'nodedata')\r\n      return;\r\n\r\n    const ret = getDataObject(id);\r\n\r\n    if (ret === undefined)\r\n      return;\r\n\r\n    const {\r\n      0: handle,\r\n      1: length,\r\n      2: type,\r\n    } = ret;\r\n\r\n    if (handle !== undefined)\r\n      return createBlob(handle, length, type);\r\n  } catch {\r\n    // If there's an error, it's ignored and nothing is returned\r\n  }\r\n}\r\n\r\n// TODO(@jasnell): Now that the File class exists, we might consider having\r\n// this return a `File` instead of a `Blob`.\r\nfunction createBlobFromFilePath(path, options) {\r\n  const maybeBlob = _createBlobFromFilePath(path);\r\n  if (maybeBlob === undefined) {\r\n    return lazyDOMException('The blob could not be read', 'NotReadableError');\r\n  }\r\n  const { 0: blob, 1: length } = maybeBlob;\r\n  const res = createBlob(blob, length, options?.type);\r\n  res[kNotCloneable] = true;\r\n  return res;\r\n}\r\n\r\nmodule.exports = {\r\n  Blob,\r\n  createBlob,\r\n  createBlobFromFilePath,\r\n  isBlob,\r\n  kHandle,\r\n  resolveObjectURL,\r\n};\r\n"
  },
  "44": {
    "metadata": {
      "scriptId": "44",
      "url": "node:internal/encoding",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 612,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "8f17a0c97288e7c82118d73cc45536df032c92ef215fea96cda066b95f8442dd",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 17774,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/encoding"
    },
    "source": "'use strict';\r\n\r\n// An implementation of the WHATWG Encoding Standard\r\n// https://encoding.spec.whatwg.org\r\n\r\nconst {\r\n  Boolean,\r\n  ObjectDefineProperties,\r\n  ObjectGetOwnPropertyDescriptors,\r\n  ObjectSetPrototypeOf,\r\n  ObjectValues,\r\n  SafeMap,\r\n  StringPrototypeSlice,\r\n  Symbol,\r\n  SymbolToStringTag,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  ERR_ENCODING_NOT_SUPPORTED,\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_INVALID_THIS,\r\n  ERR_NO_ICU,\r\n} = require('internal/errors').codes;\r\nconst kHandle = Symbol('handle');\r\nconst kFlags = Symbol('flags');\r\nconst kEncoding = Symbol('encoding');\r\nconst kDecoder = Symbol('decoder');\r\nconst kEncoder = Symbol('encoder');\r\nconst kFatal = Symbol('kFatal');\r\nconst kUTF8FastPath = Symbol('kUTF8FastPath');\r\nconst kIgnoreBOM = Symbol('kIgnoreBOM');\r\n\r\nconst {\r\n  getConstructorOf,\r\n  customInspectSymbol: inspect,\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  isAnyArrayBuffer,\r\n  isArrayBufferView,\r\n  isUint8Array,\r\n} = require('internal/util/types');\r\n\r\nconst {\r\n  validateString,\r\n  validateObject,\r\n  kValidateObjectAllowObjectsAndNull,\r\n} = require('internal/validators');\r\nconst binding = internalBinding('encoding_binding');\r\nconst {\r\n  encodeInto,\r\n  encodeIntoResults,\r\n  encodeUtf8String,\r\n  decodeUTF8,\r\n} = binding;\r\n\r\nconst { Buffer } = require('buffer');\r\n\r\nfunction validateEncoder(obj) {\r\n  if (obj == null || obj[kEncoder] !== true)\r\n    throw new ERR_INVALID_THIS('TextEncoder');\r\n}\r\n\r\nfunction validateDecoder(obj) {\r\n  if (obj == null || obj[kDecoder] !== true)\r\n    throw new ERR_INVALID_THIS('TextDecoder');\r\n}\r\n\r\nconst CONVERTER_FLAGS_FLUSH = 0x1;\r\nconst CONVERTER_FLAGS_FATAL = 0x2;\r\nconst CONVERTER_FLAGS_IGNORE_BOM = 0x4;\r\n\r\nconst empty = new Uint8Array(0);\r\n\r\nconst encodings = new SafeMap([\r\n  ['unicode-1-1-utf-8', 'utf-8'],\r\n  ['unicode11utf8', 'utf-8'],\r\n  ['unicode20utf8', 'utf-8'],\r\n  ['utf8', 'utf-8'],\r\n  ['utf-8', 'utf-8'],\r\n  ['x-unicode20utf8', 'utf-8'],\r\n  ['866', 'ibm866'],\r\n  ['cp866', 'ibm866'],\r\n  ['csibm866', 'ibm866'],\r\n  ['ibm866', 'ibm866'],\r\n  ['csisolatin2', 'iso-8859-2'],\r\n  ['iso-8859-2', 'iso-8859-2'],\r\n  ['iso-ir-101', 'iso-8859-2'],\r\n  ['iso8859-2', 'iso-8859-2'],\r\n  ['iso88592', 'iso-8859-2'],\r\n  ['iso_8859-2', 'iso-8859-2'],\r\n  ['iso_8859-2:1987', 'iso-8859-2'],\r\n  ['l2', 'iso-8859-2'],\r\n  ['latin2', 'iso-8859-2'],\r\n  ['csisolatin3', 'iso-8859-3'],\r\n  ['iso-8859-3', 'iso-8859-3'],\r\n  ['iso-ir-109', 'iso-8859-3'],\r\n  ['iso8859-3', 'iso-8859-3'],\r\n  ['iso88593', 'iso-8859-3'],\r\n  ['iso_8859-3', 'iso-8859-3'],\r\n  ['iso_8859-3:1988', 'iso-8859-3'],\r\n  ['l3', 'iso-8859-3'],\r\n  ['latin3', 'iso-8859-3'],\r\n  ['csisolatin4', 'iso-8859-4'],\r\n  ['iso-8859-4', 'iso-8859-4'],\r\n  ['iso-ir-110', 'iso-8859-4'],\r\n  ['iso8859-4', 'iso-8859-4'],\r\n  ['iso88594', 'iso-8859-4'],\r\n  ['iso_8859-4', 'iso-8859-4'],\r\n  ['iso_8859-4:1988', 'iso-8859-4'],\r\n  ['l4', 'iso-8859-4'],\r\n  ['latin4', 'iso-8859-4'],\r\n  ['csisolatincyrillic', 'iso-8859-5'],\r\n  ['cyrillic', 'iso-8859-5'],\r\n  ['iso-8859-5', 'iso-8859-5'],\r\n  ['iso-ir-144', 'iso-8859-5'],\r\n  ['iso8859-5', 'iso-8859-5'],\r\n  ['iso88595', 'iso-8859-5'],\r\n  ['iso_8859-5', 'iso-8859-5'],\r\n  ['iso_8859-5:1988', 'iso-8859-5'],\r\n  ['arabic', 'iso-8859-6'],\r\n  ['asmo-708', 'iso-8859-6'],\r\n  ['csiso88596e', 'iso-8859-6'],\r\n  ['csiso88596i', 'iso-8859-6'],\r\n  ['csisolatinarabic', 'iso-8859-6'],\r\n  ['ecma-114', 'iso-8859-6'],\r\n  ['iso-8859-6', 'iso-8859-6'],\r\n  ['iso-8859-6-e', 'iso-8859-6'],\r\n  ['iso-8859-6-i', 'iso-8859-6'],\r\n  ['iso-ir-127', 'iso-8859-6'],\r\n  ['iso8859-6', 'iso-8859-6'],\r\n  ['iso88596', 'iso-8859-6'],\r\n  ['iso_8859-6', 'iso-8859-6'],\r\n  ['iso_8859-6:1987', 'iso-8859-6'],\r\n  ['csisolatingreek', 'iso-8859-7'],\r\n  ['ecma-118', 'iso-8859-7'],\r\n  ['elot_928', 'iso-8859-7'],\r\n  ['greek', 'iso-8859-7'],\r\n  ['greek8', 'iso-8859-7'],\r\n  ['iso-8859-7', 'iso-8859-7'],\r\n  ['iso-ir-126', 'iso-8859-7'],\r\n  ['iso8859-7', 'iso-8859-7'],\r\n  ['iso88597', 'iso-8859-7'],\r\n  ['iso_8859-7', 'iso-8859-7'],\r\n  ['iso_8859-7:1987', 'iso-8859-7'],\r\n  ['sun_eu_greek', 'iso-8859-7'],\r\n  ['csiso88598e', 'iso-8859-8'],\r\n  ['csisolatinhebrew', 'iso-8859-8'],\r\n  ['hebrew', 'iso-8859-8'],\r\n  ['iso-8859-8', 'iso-8859-8'],\r\n  ['iso-8859-8-e', 'iso-8859-8'],\r\n  ['iso-ir-138', 'iso-8859-8'],\r\n  ['iso8859-8', 'iso-8859-8'],\r\n  ['iso88598', 'iso-8859-8'],\r\n  ['iso_8859-8', 'iso-8859-8'],\r\n  ['iso_8859-8:1988', 'iso-8859-8'],\r\n  ['visual', 'iso-8859-8'],\r\n  ['csiso88598i', 'iso-8859-8-i'],\r\n  ['iso-8859-8-i', 'iso-8859-8-i'],\r\n  ['logical', 'iso-8859-8-i'],\r\n  ['csisolatin6', 'iso-8859-10'],\r\n  ['iso-8859-10', 'iso-8859-10'],\r\n  ['iso-ir-157', 'iso-8859-10'],\r\n  ['iso8859-10', 'iso-8859-10'],\r\n  ['iso885910', 'iso-8859-10'],\r\n  ['l6', 'iso-8859-10'],\r\n  ['latin6', 'iso-8859-10'],\r\n  ['iso-8859-13', 'iso-8859-13'],\r\n  ['iso8859-13', 'iso-8859-13'],\r\n  ['iso885913', 'iso-8859-13'],\r\n  ['iso-8859-14', 'iso-8859-14'],\r\n  ['iso8859-14', 'iso-8859-14'],\r\n  ['iso885914', 'iso-8859-14'],\r\n  ['csisolatin9', 'iso-8859-15'],\r\n  ['iso-8859-15', 'iso-8859-15'],\r\n  ['iso8859-15', 'iso-8859-15'],\r\n  ['iso885915', 'iso-8859-15'],\r\n  ['iso_8859-15', 'iso-8859-15'],\r\n  ['l9', 'iso-8859-15'],\r\n  ['iso-8859-16', 'iso-8859-16'],\r\n  ['cskoi8r', 'koi8-r'],\r\n  ['koi', 'koi8-r'],\r\n  ['koi8', 'koi8-r'],\r\n  ['koi8-r', 'koi8-r'],\r\n  ['koi8_r', 'koi8-r'],\r\n  ['koi8-ru', 'koi8-u'],\r\n  ['koi8-u', 'koi8-u'],\r\n  ['csmacintosh', 'macintosh'],\r\n  ['mac', 'macintosh'],\r\n  ['macintosh', 'macintosh'],\r\n  ['x-mac-roman', 'macintosh'],\r\n  ['dos-874', 'windows-874'],\r\n  ['iso-8859-11', 'windows-874'],\r\n  ['iso8859-11', 'windows-874'],\r\n  ['iso885911', 'windows-874'],\r\n  ['tis-620', 'windows-874'],\r\n  ['windows-874', 'windows-874'],\r\n  ['cp1250', 'windows-1250'],\r\n  ['windows-1250', 'windows-1250'],\r\n  ['x-cp1250', 'windows-1250'],\r\n  ['cp1251', 'windows-1251'],\r\n  ['windows-1251', 'windows-1251'],\r\n  ['x-cp1251', 'windows-1251'],\r\n  ['ansi_x3.4-1968', 'windows-1252'],\r\n  ['ascii', 'windows-1252'],\r\n  ['cp1252', 'windows-1252'],\r\n  ['cp819', 'windows-1252'],\r\n  ['csisolatin1', 'windows-1252'],\r\n  ['ibm819', 'windows-1252'],\r\n  ['iso-8859-1', 'windows-1252'],\r\n  ['iso-ir-100', 'windows-1252'],\r\n  ['iso8859-1', 'windows-1252'],\r\n  ['iso88591', 'windows-1252'],\r\n  ['iso_8859-1', 'windows-1252'],\r\n  ['iso_8859-1:1987', 'windows-1252'],\r\n  ['l1', 'windows-1252'],\r\n  ['latin1', 'windows-1252'],\r\n  ['us-ascii', 'windows-1252'],\r\n  ['windows-1252', 'windows-1252'],\r\n  ['x-cp1252', 'windows-1252'],\r\n  ['cp1253', 'windows-1253'],\r\n  ['windows-1253', 'windows-1253'],\r\n  ['x-cp1253', 'windows-1253'],\r\n  ['cp1254', 'windows-1254'],\r\n  ['csisolatin5', 'windows-1254'],\r\n  ['iso-8859-9', 'windows-1254'],\r\n  ['iso-ir-148', 'windows-1254'],\r\n  ['iso8859-9', 'windows-1254'],\r\n  ['iso88599', 'windows-1254'],\r\n  ['iso_8859-9', 'windows-1254'],\r\n  ['iso_8859-9:1989', 'windows-1254'],\r\n  ['l5', 'windows-1254'],\r\n  ['latin5', 'windows-1254'],\r\n  ['windows-1254', 'windows-1254'],\r\n  ['x-cp1254', 'windows-1254'],\r\n  ['cp1255', 'windows-1255'],\r\n  ['windows-1255', 'windows-1255'],\r\n  ['x-cp1255', 'windows-1255'],\r\n  ['cp1256', 'windows-1256'],\r\n  ['windows-1256', 'windows-1256'],\r\n  ['x-cp1256', 'windows-1256'],\r\n  ['cp1257', 'windows-1257'],\r\n  ['windows-1257', 'windows-1257'],\r\n  ['x-cp1257', 'windows-1257'],\r\n  ['cp1258', 'windows-1258'],\r\n  ['windows-1258', 'windows-1258'],\r\n  ['x-cp1258', 'windows-1258'],\r\n  ['x-mac-cyrillic', 'x-mac-cyrillic'],\r\n  ['x-mac-ukrainian', 'x-mac-cyrillic'],\r\n  ['chinese', 'gbk'],\r\n  ['csgb2312', 'gbk'],\r\n  ['csiso58gb231280', 'gbk'],\r\n  ['gb2312', 'gbk'],\r\n  ['gb_2312', 'gbk'],\r\n  ['gb_2312-80', 'gbk'],\r\n  ['gbk', 'gbk'],\r\n  ['iso-ir-58', 'gbk'],\r\n  ['x-gbk', 'gbk'],\r\n  ['gb18030', 'gb18030'],\r\n  ['big5', 'big5'],\r\n  ['big5-hkscs', 'big5'],\r\n  ['cn-big5', 'big5'],\r\n  ['csbig5', 'big5'],\r\n  ['x-x-big5', 'big5'],\r\n  ['cseucpkdfmtjapanese', 'euc-jp'],\r\n  ['euc-jp', 'euc-jp'],\r\n  ['x-euc-jp', 'euc-jp'],\r\n  ['csiso2022jp', 'iso-2022-jp'],\r\n  ['iso-2022-jp', 'iso-2022-jp'],\r\n  ['csshiftjis', 'shift_jis'],\r\n  ['ms932', 'shift_jis'],\r\n  ['ms_kanji', 'shift_jis'],\r\n  ['shift-jis', 'shift_jis'],\r\n  ['shift_jis', 'shift_jis'],\r\n  ['sjis', 'shift_jis'],\r\n  ['windows-31j', 'shift_jis'],\r\n  ['x-sjis', 'shift_jis'],\r\n  ['cseuckr', 'euc-kr'],\r\n  ['csksc56011987', 'euc-kr'],\r\n  ['euc-kr', 'euc-kr'],\r\n  ['iso-ir-149', 'euc-kr'],\r\n  ['korean', 'euc-kr'],\r\n  ['ks_c_5601-1987', 'euc-kr'],\r\n  ['ks_c_5601-1989', 'euc-kr'],\r\n  ['ksc5601', 'euc-kr'],\r\n  ['ksc_5601', 'euc-kr'],\r\n  ['windows-949', 'euc-kr'],\r\n  ['csiso2022kr', 'replacement'],\r\n  ['hz-gb-2312', 'replacement'],\r\n  ['iso-2022-cn', 'replacement'],\r\n  ['iso-2022-cn-ext', 'replacement'],\r\n  ['iso-2022-kr', 'replacement'],\r\n  ['replacement', 'replacement'],\r\n  ['unicodefffe', 'utf-16be'],\r\n  ['utf-16be', 'utf-16be'],\r\n  ['csunicode', 'utf-16le'],\r\n  ['iso-10646-ucs-2', 'utf-16le'],\r\n  ['ucs-2', 'utf-16le'],\r\n  ['unicode', 'utf-16le'],\r\n  ['unicodefeff', 'utf-16le'],\r\n  ['utf-16le', 'utf-16le'],\r\n  ['utf-16', 'utf-16le'],\r\n  ['x-user-defined', 'x-user-defined'],\r\n]);\r\n\r\n// Unfortunately, String.prototype.trim also removes non-ascii whitespace,\r\n// so we have to do this manually\r\nfunction trimAsciiWhitespace(label) {\r\n  let s = 0;\r\n  let e = label.length;\r\n  while (s < e && (\r\n    label[s] === '\\u0009' ||\r\n    label[s] === '\\u000a' ||\r\n    label[s] === '\\u000c' ||\r\n    label[s] === '\\u000d' ||\r\n    label[s] === '\\u0020')) {\r\n    s++;\r\n  }\r\n  while (e > s && (\r\n    label[e - 1] === '\\u0009' ||\r\n    label[e - 1] === '\\u000a' ||\r\n    label[e - 1] === '\\u000c' ||\r\n    label[e - 1] === '\\u000d' ||\r\n    label[e - 1] === '\\u0020')) {\r\n    e--;\r\n  }\r\n  return StringPrototypeSlice(label, s, e);\r\n}\r\n\r\nfunction getEncodingFromLabel(label) {\r\n  const enc = encodings.get(label);\r\n  if (enc !== undefined) return enc;\r\n  return encodings.get(trimAsciiWhitespace(label.toLowerCase()));\r\n}\r\n\r\nclass TextEncoder {\r\n  constructor() {\r\n    this[kEncoder] = true;\r\n  }\r\n\r\n  get encoding() {\r\n    validateEncoder(this);\r\n    return 'utf-8';\r\n  }\r\n\r\n  encode(input = '') {\r\n    validateEncoder(this);\r\n    return encodeUtf8String(`${input}`);\r\n  }\r\n\r\n  encodeInto(src, dest) {\r\n    validateEncoder(this);\r\n    validateString(src, 'src');\r\n    if (!dest || !isUint8Array(dest))\r\n      throw new ERR_INVALID_ARG_TYPE('dest', 'Uint8Array', dest);\r\n\r\n    encodeInto(src, dest);\r\n    // We need to read from the binding here since the buffer gets refreshed\r\n    // from the snapshot.\r\n    const { 0: read, 1: written } = encodeIntoResults;\r\n    return { read, written };\r\n  }\r\n\r\n  [inspect](depth, opts) {\r\n    validateEncoder(this);\r\n    if (typeof depth === 'number' && depth < 0)\r\n      return this;\r\n    const ctor = getConstructorOf(this);\r\n    const obj = { __proto__: {\r\n      constructor: ctor === null ? TextEncoder : ctor,\r\n    } };\r\n    obj.encoding = this.encoding;\r\n    // Lazy to avoid circular dependency\r\n    return require('internal/util/inspect').inspect(obj, opts);\r\n  }\r\n}\r\n\r\nObjectDefineProperties(\r\n  TextEncoder.prototype, {\r\n    'encode': kEnumerableProperty,\r\n    'encodeInto': kEnumerableProperty,\r\n    'encoding': kEnumerableProperty,\r\n    [SymbolToStringTag]: { __proto__: null, configurable: true, value: 'TextEncoder' },\r\n  });\r\n\r\nconst TextDecoder =\r\n  internalBinding('config').hasIntl ?\r\n    makeTextDecoderICU() :\r\n    makeTextDecoderJS();\r\n\r\nfunction makeTextDecoderICU() {\r\n  const {\r\n    decode: _decode,\r\n    getConverter,\r\n  } = internalBinding('icu');\r\n\r\n  class TextDecoder {\r\n    constructor(encoding = 'utf-8', options = kEmptyObject) {\r\n      encoding = `${encoding}`;\r\n      validateObject(options, 'options', kValidateObjectAllowObjectsAndNull);\r\n\r\n      const enc = getEncodingFromLabel(encoding);\r\n      if (enc === undefined)\r\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\r\n\r\n      let flags = 0;\r\n      if (options !== null) {\r\n        flags |= options.fatal ? CONVERTER_FLAGS_FATAL : 0;\r\n        flags |= options.ignoreBOM ? CONVERTER_FLAGS_IGNORE_BOM : 0;\r\n      }\r\n\r\n      this[kDecoder] = true;\r\n      this[kFlags] = flags;\r\n      this[kEncoding] = enc;\r\n      this[kIgnoreBOM] = Boolean(options?.ignoreBOM);\r\n      this[kFatal] = Boolean(options?.fatal);\r\n      // Only support fast path for UTF-8.\r\n      this[kUTF8FastPath] = enc === 'utf-8';\r\n      this[kHandle] = undefined;\r\n\r\n      if (!this[kUTF8FastPath]) {\r\n        this.#prepareConverter();\r\n      }\r\n    }\r\n\r\n    #prepareConverter() {\r\n      if (this[kHandle] !== undefined) return;\r\n      const handle = getConverter(this[kEncoding], this[kFlags]);\r\n      if (handle === undefined)\r\n        throw new ERR_ENCODING_NOT_SUPPORTED(this[kEncoding]);\r\n      this[kHandle] = handle;\r\n    }\r\n\r\n    decode(input = empty, options = kEmptyObject) {\r\n      validateDecoder(this);\r\n\r\n      this[kUTF8FastPath] &&= !(options?.stream);\r\n\r\n      if (this[kUTF8FastPath]) {\r\n        return decodeUTF8(input, this[kIgnoreBOM], this[kFatal]);\r\n      }\r\n\r\n      this.#prepareConverter();\r\n\r\n      validateObject(options, 'options', kValidateObjectAllowObjectsAndNull);\r\n\r\n      let flags = 0;\r\n      if (options !== null)\r\n        flags |= options.stream ? 0 : CONVERTER_FLAGS_FLUSH;\r\n\r\n      return _decode(this[kHandle], input, flags, this.encoding);\r\n    }\r\n  }\r\n\r\n  return TextDecoder;\r\n}\r\n\r\nfunction makeTextDecoderJS() {\r\n  let StringDecoder;\r\n  function lazyStringDecoder() {\r\n    if (StringDecoder === undefined)\r\n      ({ StringDecoder } = require('string_decoder'));\r\n    return StringDecoder;\r\n  }\r\n\r\n  const kBOMSeen = Symbol('BOM seen');\r\n\r\n  function hasConverter(encoding) {\r\n    return encoding === 'utf-8' || encoding === 'utf-16le';\r\n  }\r\n\r\n  class TextDecoder {\r\n    constructor(encoding = 'utf-8', options = kEmptyObject) {\r\n      encoding = `${encoding}`;\r\n      validateObject(options, 'options', kValidateObjectAllowObjectsAndNull);\r\n\r\n      const enc = getEncodingFromLabel(encoding);\r\n      if (enc === undefined || !hasConverter(enc))\r\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\r\n\r\n      let flags = 0;\r\n      if (options !== null) {\r\n        if (options.fatal) {\r\n          throw new ERR_NO_ICU('\"fatal\" option');\r\n        }\r\n        flags |= options.ignoreBOM ? CONVERTER_FLAGS_IGNORE_BOM : 0;\r\n      }\r\n\r\n      this[kDecoder] = true;\r\n      // StringDecoder will normalize WHATWG encoding to Node.js encoding.\r\n      this[kHandle] = new (lazyStringDecoder())(enc);\r\n      this[kFlags] = flags;\r\n      this[kEncoding] = enc;\r\n      this[kBOMSeen] = false;\r\n    }\r\n\r\n    decode(input = empty, options = kEmptyObject) {\r\n      validateDecoder(this);\r\n      if (isAnyArrayBuffer(input)) {\r\n        try {\r\n          input = Buffer.from(input);\r\n        } catch {\r\n          input = empty;\r\n        }\r\n      } else if (isArrayBufferView(input)) {\r\n        try {\r\n          input = Buffer.from(input.buffer, input.byteOffset,\r\n                              input.byteLength);\r\n        } catch {\r\n          input = empty;\r\n        }\r\n      } else {\r\n        throw new ERR_INVALID_ARG_TYPE('input',\r\n                                       ['ArrayBuffer', 'ArrayBufferView'],\r\n                                       input);\r\n      }\r\n      validateObject(options, 'options', kValidateObjectAllowObjectsAndNull);\r\n\r\n      if (this[kFlags] & CONVERTER_FLAGS_FLUSH) {\r\n        this[kBOMSeen] = false;\r\n      }\r\n\r\n      if (options !== null && options.stream) {\r\n        this[kFlags] &= ~CONVERTER_FLAGS_FLUSH;\r\n      } else {\r\n        this[kFlags] |= CONVERTER_FLAGS_FLUSH;\r\n      }\r\n\r\n      let result = this[kFlags] & CONVERTER_FLAGS_FLUSH ?\r\n        this[kHandle].end(input) :\r\n        this[kHandle].write(input);\r\n\r\n      if (result.length > 0 &&\r\n          !this[kBOMSeen] &&\r\n          !(this[kFlags] & CONVERTER_FLAGS_IGNORE_BOM)) {\r\n        // If the very first result in the stream is a BOM, and we are not\r\n        // explicitly told to ignore it, then we discard it.\r\n        if (result[0] === '\\ufeff') {\r\n          result = StringPrototypeSlice(result, 1);\r\n        }\r\n        this[kBOMSeen] = true;\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  return TextDecoder;\r\n}\r\n\r\n// Mix in some shared properties.\r\nconst sharedProperties = ObjectGetOwnPropertyDescriptors({\r\n  get encoding() {\r\n    validateDecoder(this);\r\n    return this[kEncoding];\r\n  },\r\n\r\n  get fatal() {\r\n    validateDecoder(this);\r\n    return (this[kFlags] & CONVERTER_FLAGS_FATAL) === CONVERTER_FLAGS_FATAL;\r\n  },\r\n\r\n  get ignoreBOM() {\r\n    validateDecoder(this);\r\n    return (this[kFlags] & CONVERTER_FLAGS_IGNORE_BOM) ===\r\n              CONVERTER_FLAGS_IGNORE_BOM;\r\n  },\r\n\r\n  [inspect](depth, opts) {\r\n    validateDecoder(this);\r\n    if (typeof depth === 'number' && depth < 0)\r\n      return this;\r\n    const constructor = getConstructorOf(this) || TextDecoder;\r\n    const obj = { __proto__: { constructor } };\r\n    obj.encoding = this.encoding;\r\n    obj.fatal = this.fatal;\r\n    obj.ignoreBOM = this.ignoreBOM;\r\n    if (opts.showHidden) {\r\n      obj[kFlags] = this[kFlags];\r\n      obj[kHandle] = this[kHandle];\r\n    }\r\n    // Lazy to avoid circular dependency\r\n    const { inspect } = require('internal/util/inspect');\r\n    return `${constructor.name} ${inspect(obj)}`;\r\n  },\r\n});\r\nconst propertiesValues = ObjectValues(sharedProperties);\r\nfor (let i = 0; i < propertiesValues.length; i++) {\r\n  // We want to use null-prototype objects to not rely on globally mutable\r\n  // %Object.prototype%.\r\n  ObjectSetPrototypeOf(propertiesValues[i], null);\r\n}\r\nsharedProperties[inspect].enumerable = false;\r\n\r\nObjectDefineProperties(TextDecoder.prototype, {\r\n  decode: kEnumerableProperty,\r\n  ...sharedProperties,\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value: 'TextDecoder',\r\n  },\r\n});\r\n\r\nmodule.exports = {\r\n  getEncodingFromLabel,\r\n  TextDecoder,\r\n  TextEncoder,\r\n};\r\n"
  },
  "45": {
    "metadata": {
      "scriptId": "45",
      "url": "node:internal/webstreams/queuingstrategies",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 164,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "59213bdaafd432931bed191e6f80b9e1419f161148eeecd5b7fc3386bf6d5962",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3456,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/webstreams/queuingstrategies"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  SymbolToStringTag,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_MISSING_OPTION,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  customInspectSymbol: kInspect,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  customInspect,\r\n} = require('internal/webstreams/util');\r\n\r\nconst {\r\n  validateObject,\r\n} = require('internal/validators');\r\n\r\n/**\r\n * @callback QueuingStrategySize\r\n * @param {any} chunk\r\n * @returns {number}\r\n */\r\n\r\n/**\r\n * @typedef {{\r\n *   highWaterMark : number,\r\n *   size? : QueuingStrategySize,\r\n * }} QueuingStrategy\r\n */\r\n\r\nconst nameDescriptor = { __proto__: null, value: 'size' };\r\nconst byteSizeFunction = ObjectDefineProperty(\r\n  (chunk) => chunk.byteLength,\r\n  'name',\r\n  nameDescriptor,\r\n);\r\nconst countSizeFunction = ObjectDefineProperty(() => 1, 'name', nameDescriptor);\r\n\r\nconst getNonWritablePropertyDescriptor = (value) => {\r\n  return {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value,\r\n  };\r\n};\r\n\r\n/**\r\n * @type {QueuingStrategy}\r\n */\r\nclass ByteLengthQueuingStrategy {\r\n  #state;\r\n  #byteSizeFunction = byteSizeFunction;\r\n\r\n  /**\r\n   * @param {{\r\n   *   highWaterMark : number\r\n   * }} init\r\n   */\r\n  constructor(init) {\r\n    validateObject(init, 'init');\r\n    if (init.highWaterMark === undefined)\r\n      throw new ERR_MISSING_OPTION('init.highWaterMark');\r\n\r\n    // The highWaterMark value is not checked until the strategy\r\n    // is actually used, per the spec.\r\n    this.#state = {\r\n      highWaterMark: +init.highWaterMark,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get highWaterMark() {\r\n    return this.#state.highWaterMark;\r\n  }\r\n\r\n  /**\r\n   * @type {QueuingStrategySize}\r\n   */\r\n  get size() {\r\n    return this.#byteSizeFunction;\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, 'ByteLengthQueuingStrategy', {\r\n      highWaterMark: this.highWaterMark,\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(ByteLengthQueuingStrategy.prototype, {\r\n  highWaterMark: kEnumerableProperty,\r\n  size: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(ByteLengthQueuingStrategy.name),\r\n});\r\n\r\n/**\r\n * @type {QueuingStrategy}\r\n */\r\nclass CountQueuingStrategy {\r\n  #state;\r\n  #countSizeFunction = countSizeFunction;\r\n\r\n  /**\r\n   * @param {{\r\n   *   highWaterMark : number\r\n   * }} init\r\n   */\r\n  constructor(init) {\r\n    validateObject(init, 'init');\r\n    if (init.highWaterMark === undefined)\r\n      throw new ERR_MISSING_OPTION('init.highWaterMark');\r\n\r\n    // The highWaterMark value is not checked until the strategy\r\n    // is actually used, per the spec.\r\n    this.#state = {\r\n      highWaterMark: +init.highWaterMark,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get highWaterMark() {\r\n    return this.#state.highWaterMark;\r\n  }\r\n\r\n  /**\r\n   * @type {QueuingStrategySize}\r\n   */\r\n  get size() {\r\n    return this.#countSizeFunction;\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, 'CountQueuingStrategy', {\r\n      highWaterMark: this.highWaterMark,\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(CountQueuingStrategy.prototype, {\r\n  highWaterMark: kEnumerableProperty,\r\n  size: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(CountQueuingStrategy.name),\r\n});\r\n\r\nmodule.exports = {\r\n  ByteLengthQueuingStrategy,\r\n  CountQueuingStrategy,\r\n};\r\n"
  },
  "46": {
    "metadata": {
      "scriptId": "46",
      "url": "node:internal/webstreams/util",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 298,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "6373f54c70037c2c2ee38e820c7bf0d8f5a561ae16e1cbd01e57d8e89fb28c74",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 7983,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/webstreams/util"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayBufferPrototypeSlice,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeShift,\r\n  AsyncIteratorPrototype,\r\n  FunctionPrototypeCall,\r\n  MathMax,\r\n  NumberIsNaN,\r\n  PromisePrototypeThen,\r\n  ReflectGet,\r\n  Symbol,\r\n  SymbolAsyncIterator,\r\n  SymbolIterator,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_STATE,\r\n    ERR_OPERATION_FAILED,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  copyArrayBuffer,\r\n  detachArrayBuffer,\r\n} = internalBinding('buffer');\r\n\r\nconst {\r\n  inspect,\r\n} = require('util');\r\n\r\nconst {\r\n  constants: {\r\n    kPending,\r\n  },\r\n  getPromiseDetails,\r\n} = internalBinding('util');\r\n\r\nconst assert = require('internal/assert');\r\nconst { isArrayBufferDetached } = require('internal/util');\r\n\r\nconst {\r\n  validateFunction,\r\n} = require('internal/validators');\r\n\r\nconst kState = Symbol('kState');\r\nconst kType = Symbol('kType');\r\n\r\nconst AsyncIterator = {\r\n  __proto__: AsyncIteratorPrototype,\r\n  next: undefined,\r\n  return: undefined,\r\n};\r\n\r\nfunction extractHighWaterMark(value, defaultHWM) {\r\n  if (value === undefined) return defaultHWM;\r\n  value = +value;\r\n  if (typeof value !== 'number' ||\r\n      NumberIsNaN(value) ||\r\n      value < 0)\r\n    throw new ERR_INVALID_ARG_VALUE.RangeError('strategy.highWaterMark', value);\r\n  return value;\r\n}\r\n\r\nfunction extractSizeAlgorithm(size) {\r\n  if (size === undefined) return () => 1;\r\n  validateFunction(size, 'strategy.size');\r\n  return size;\r\n}\r\n\r\nfunction customInspect(depth, options, name, data) {\r\n  if (depth < 0)\r\n    return this;\r\n\r\n  const opts = {\r\n    ...options,\r\n    depth: options.depth == null ? null : options.depth - 1,\r\n  };\r\n\r\n  return `${name} ${inspect(data, opts)}`;\r\n}\r\n\r\n// These are defensive to work around the possibility that\r\n// the buffer, byteLength, and byteOffset properties on\r\n// ArrayBuffer and ArrayBufferView's may have been tampered with.\r\n\r\nfunction ArrayBufferViewGetBuffer(view) {\r\n  return ReflectGet(view.constructor.prototype, 'buffer', view);\r\n}\r\n\r\nfunction ArrayBufferViewGetByteLength(view) {\r\n  return ReflectGet(view.constructor.prototype, 'byteLength', view);\r\n}\r\n\r\nfunction ArrayBufferViewGetByteOffset(view) {\r\n  return ReflectGet(view.constructor.prototype, 'byteOffset', view);\r\n}\r\n\r\nfunction cloneAsUint8Array(view) {\r\n  const buffer = ArrayBufferViewGetBuffer(view);\r\n  const byteOffset = ArrayBufferViewGetByteOffset(view);\r\n  const byteLength = ArrayBufferViewGetByteLength(view);\r\n  return new Uint8Array(\r\n    ArrayBufferPrototypeSlice(buffer, byteOffset, byteOffset + byteLength),\r\n  );\r\n}\r\n\r\nfunction isBrandCheck(brand) {\r\n  return (value) => {\r\n    return value != null &&\r\n           value[kState] !== undefined &&\r\n           value[kType] === brand;\r\n  };\r\n}\r\n\r\nfunction transferArrayBuffer(buffer) {\r\n  const res = detachArrayBuffer(buffer);\r\n  if (res === undefined) {\r\n    throw new ERR_OPERATION_FAILED.TypeError(\r\n      'The ArrayBuffer could not be transferred');\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction isViewedArrayBufferDetached(view) {\r\n  return (\r\n    ArrayBufferViewGetByteLength(view) === 0 &&\r\n    isArrayBufferDetached(ArrayBufferViewGetBuffer(view))\r\n  );\r\n}\r\n\r\nfunction dequeueValue(controller) {\r\n  assert(controller[kState].queue !== undefined);\r\n  assert(controller[kState].queueTotalSize !== undefined);\r\n  assert(controller[kState].queue.length);\r\n  const {\r\n    value,\r\n    size,\r\n  } = ArrayPrototypeShift(controller[kState].queue);\r\n  controller[kState].queueTotalSize =\r\n    MathMax(0, controller[kState].queueTotalSize - size);\r\n  return value;\r\n}\r\n\r\nfunction resetQueue(controller) {\r\n  assert(controller[kState].queue !== undefined);\r\n  assert(controller[kState].queueTotalSize !== undefined);\r\n  controller[kState].queue = [];\r\n  controller[kState].queueTotalSize = 0;\r\n}\r\n\r\nfunction peekQueueValue(controller) {\r\n  assert(controller[kState].queue !== undefined);\r\n  assert(controller[kState].queueTotalSize !== undefined);\r\n  assert(controller[kState].queue.length);\r\n  return controller[kState].queue[0].value;\r\n}\r\n\r\nfunction enqueueValueWithSize(controller, value, size) {\r\n  assert(controller[kState].queue !== undefined);\r\n  assert(controller[kState].queueTotalSize !== undefined);\r\n  size = +size;\r\n  if (typeof size !== 'number' ||\r\n      size < 0 ||\r\n      NumberIsNaN(size) ||\r\n      size === Infinity) {\r\n    throw new ERR_INVALID_ARG_VALUE.RangeError('size', size);\r\n  }\r\n  ArrayPrototypePush(controller[kState].queue, { value, size });\r\n  controller[kState].queueTotalSize += size;\r\n}\r\n\r\n// This implements \"invoke a callback function type\" for callback functions that return a promise.\r\n// See https://webidl.spec.whatwg.org/#es-invoking-callback-functions\r\nasync function invokePromiseCallback(fn, thisArg, ...args) {\r\n  return FunctionPrototypeCall(fn, thisArg, ...args);\r\n}\r\n\r\nfunction createPromiseCallback(name, fn, thisArg) {\r\n  validateFunction(fn, name);\r\n  return (...args) => invokePromiseCallback(fn, thisArg, ...args);\r\n}\r\n\r\nfunction isPromisePending(promise) {\r\n  if (promise === undefined) return false;\r\n  const details = getPromiseDetails(promise);\r\n  return details?.[0] === kPending;\r\n}\r\n\r\nfunction setPromiseHandled(promise) {\r\n  // Alternatively, we could use the native API\r\n  // MarkAsHandled, but this avoids the extra boundary cross\r\n  // and is hopefully faster at the cost of an extra Promise\r\n  // allocation.\r\n  PromisePrototypeThen(promise, () => {}, () => {});\r\n}\r\n\r\nasync function nonOpFlush() {}\r\n\r\nfunction nonOpStart() {}\r\n\r\nasync function nonOpPull() {}\r\n\r\nasync function nonOpCancel() {}\r\n\r\nasync function nonOpWrite() {}\r\n\r\nlet transfer;\r\nfunction lazyTransfer() {\r\n  if (transfer === undefined)\r\n    transfer = require('internal/webstreams/transfer');\r\n  return transfer;\r\n}\r\n\r\nfunction createAsyncFromSyncIterator(syncIteratorRecord) {\r\n  const syncIterable = {\r\n    [SymbolIterator]: () => syncIteratorRecord.iterator,\r\n  };\r\n\r\n  const asyncIterator = (async function* () {\r\n    return yield* syncIterable;\r\n  }());\r\n\r\n  const nextMethod = asyncIterator.next;\r\n  return { iterator: asyncIterator, nextMethod, done: false };\r\n}\r\n\r\nfunction getIterator(obj, kind = 'sync', method) {\r\n  if (method === undefined) {\r\n    if (kind === 'async') {\r\n      method = obj[SymbolAsyncIterator];\r\n      if (method === undefined) {\r\n        const syncMethod = obj[SymbolIterator];\r\n        const syncIteratorRecord = getIterator(obj, 'sync', syncMethod);\r\n        return createAsyncFromSyncIterator(syncIteratorRecord);\r\n      }\r\n    } else {\r\n      method = obj[SymbolIterator];\r\n    }\r\n  }\r\n\r\n  const iterator = FunctionPrototypeCall(method, obj);\r\n  if (typeof iterator !== 'object' || iterator === null) {\r\n    throw new ERR_INVALID_STATE.TypeError('The iterator method must return an object');\r\n  }\r\n  const nextMethod = iterator.next;\r\n  return { iterator, nextMethod, done: false };\r\n}\r\n\r\nfunction iteratorNext(iteratorRecord, value) {\r\n  let result;\r\n  if (value === undefined) {\r\n    result = FunctionPrototypeCall(iteratorRecord.nextMethod, iteratorRecord.iterator);\r\n  } else {\r\n    result = FunctionPrototypeCall(iteratorRecord.nextMethod, iteratorRecord.iterator, [value]);\r\n  }\r\n  if (typeof result !== 'object' || result === null) {\r\n    throw new ERR_INVALID_STATE.TypeError('The iterator.next() method must return an object');\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = {\r\n  ArrayBufferViewGetBuffer,\r\n  ArrayBufferViewGetByteLength,\r\n  ArrayBufferViewGetByteOffset,\r\n  AsyncIterator,\r\n  createPromiseCallback,\r\n  cloneAsUint8Array,\r\n  copyArrayBuffer,\r\n  customInspect,\r\n  dequeueValue,\r\n  enqueueValueWithSize,\r\n  extractHighWaterMark,\r\n  extractSizeAlgorithm,\r\n  lazyTransfer,\r\n  invokePromiseCallback,\r\n  isBrandCheck,\r\n  isPromisePending,\r\n  isViewedArrayBufferDetached,\r\n  peekQueueValue,\r\n  resetQueue,\r\n  setPromiseHandled,\r\n  transferArrayBuffer,\r\n  nonOpCancel,\r\n  nonOpFlush,\r\n  nonOpPull,\r\n  nonOpStart,\r\n  nonOpWrite,\r\n  getIterator,\r\n  iteratorNext,\r\n  kType,\r\n  kState,\r\n};\r\n"
  },
  "47": {
    "metadata": {
      "scriptId": "47",
      "url": "node:util",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 538,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "2f089bddb108b49b18e398519a4ca47e602ea1738f7a87bf88ca295c9cb144e4",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 16631,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:util"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypePop,\r\n  Date,\r\n  DatePrototypeGetDate,\r\n  DatePrototypeGetHours,\r\n  DatePrototypeGetMinutes,\r\n  DatePrototypeGetMonth,\r\n  DatePrototypeGetSeconds,\r\n  Error,\r\n  ErrorCaptureStackTrace,\r\n  FunctionPrototypeBind,\r\n  NumberIsSafeInteger,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectGetOwnPropertyDescriptors,\r\n  ObjectKeys,\r\n  ObjectPrototypeToString,\r\n  ObjectSetPrototypeOf,\r\n  ObjectValues,\r\n  ReflectApply,\r\n  StringPrototypePadStart,\r\n  StringPrototypeToWellFormed,\r\n} = primordials;\r\n\r\nconst {\r\n  ErrnoException,\r\n  ExceptionWithHostPort,\r\n  codes: {\r\n    ERR_FALSY_VALUE_REJECTION,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_OUT_OF_RANGE,\r\n  },\r\n  isErrorStackTraceLimitWritable,\r\n} = require('internal/errors');\r\nconst {\r\n  format,\r\n  formatWithOptions,\r\n  inspect,\r\n  stripVTControlCharacters,\r\n} = require('internal/util/inspect');\r\nconst { debuglog } = require('internal/util/debuglog');\r\nconst {\r\n  validateFunction,\r\n  validateNumber,\r\n  validateString,\r\n  validateOneOf,\r\n} = require('internal/validators');\r\nconst { isBuffer } = require('buffer').Buffer;\r\nconst types = require('internal/util/types');\r\nconst binding = internalBinding('util');\r\n\r\nconst {\r\n  deprecate,\r\n  getSystemErrorMap,\r\n  getSystemErrorName: internalErrorName,\r\n  promisify,\r\n  defineLazyProperties,\r\n} = require('internal/util');\r\n\r\nlet abortController;\r\n\r\nfunction lazyAbortController() {\r\n  abortController ??= require('internal/abort_controller');\r\n  return abortController;\r\n}\r\n\r\nlet internalDeepEqual;\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is boolean}\r\n */\r\nfunction isBoolean(arg) {\r\n  return typeof arg === 'boolean';\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is null}\r\n */\r\nfunction isNull(arg) {\r\n  return arg === null;\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is (null | undefined)}\r\n */\r\nfunction isNullOrUndefined(arg) {\r\n  return arg === null || arg === undefined;\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is number}\r\n */\r\nfunction isNumber(arg) {\r\n  return typeof arg === 'number';\r\n}\r\n\r\n/**\r\n * @param {any} arg\r\n * @returns {arg is string}\r\n */\r\nfunction isString(arg) {\r\n  return typeof arg === 'string';\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is symbol}\r\n */\r\nfunction isSymbol(arg) {\r\n  return typeof arg === 'symbol';\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is undefined}\r\n */\r\nfunction isUndefined(arg) {\r\n  return arg === undefined;\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {a is NonNullable<object>}\r\n */\r\nfunction isObject(arg) {\r\n  return arg !== null && typeof arg === 'object';\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} e\r\n * @returns {arg is Error}\r\n */\r\nfunction isError(e) {\r\n  return ObjectPrototypeToString(e) === '[object Error]' || e instanceof Error;\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is Function}\r\n */\r\nfunction isFunction(arg) {\r\n  return typeof arg === 'function';\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is (boolean | null | number | string | symbol | undefined)}\r\n */\r\nfunction isPrimitive(arg) {\r\n  return arg === null ||\r\n         (typeof arg !== 'object' && typeof arg !== 'function');\r\n}\r\n\r\n/**\r\n * @param {number} n\r\n * @returns {string}\r\n */\r\nfunction pad(n) {\r\n  return StringPrototypePadStart(n.toString(), 2, '0');\r\n}\r\n\r\n/**\r\n * @param {string} code\r\n * @returns {string}\r\n */\r\nfunction escapeStyleCode(code) {\r\n  return `\\u001b[${code}m`;\r\n}\r\n\r\n/**\r\n * @param {string | string[]} format\r\n * @param {string} text\r\n * @returns {string}\r\n */\r\nfunction styleText(format, text) {\r\n  validateString(text, 'text');\r\n  if (ArrayIsArray(format)) {\r\n    let left = '';\r\n    let right = '';\r\n    for (const key of format) {\r\n      const formatCodes = inspect.colors[key];\r\n      if (formatCodes == null) {\r\n        validateOneOf(key, 'format', ObjectKeys(inspect.colors));\r\n      }\r\n      left += escapeStyleCode(formatCodes[0]);\r\n      right = `${escapeStyleCode(formatCodes[1])}${right}`;\r\n    }\r\n\r\n    return `${left}${text}${right}`;\r\n  }\r\n\r\n  const formatCodes = inspect.colors[format];\r\n  if (formatCodes == null) {\r\n    validateOneOf(format, 'format', ObjectKeys(inspect.colors));\r\n  }\r\n  return `${escapeStyleCode(formatCodes[0])}${text}${escapeStyleCode(formatCodes[1])}`;\r\n}\r\n\r\nconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\r\n                'Oct', 'Nov', 'Dec'];\r\n\r\n/**\r\n * @returns {string}  26 Feb 16:19:34\r\n */\r\nfunction timestamp() {\r\n  const d = new Date();\r\n  const t = ArrayPrototypeJoin([\r\n    pad(DatePrototypeGetHours(d)),\r\n    pad(DatePrototypeGetMinutes(d)),\r\n    pad(DatePrototypeGetSeconds(d)),\r\n  ], ':');\r\n  return `${DatePrototypeGetDate(d)} ${months[DatePrototypeGetMonth(d)]} ${t}`;\r\n}\r\n\r\nlet console;\r\n/**\r\n * Log is just a thin wrapper to console.log that prepends a timestamp\r\n * @deprecated since v6.0.0\r\n * @type {(...args: any[]) => void}\r\n */\r\nfunction log(...args) {\r\n  if (!console) {\r\n    console = require('internal/console/global');\r\n  }\r\n  console.log('%s - %s', timestamp(), format(...args));\r\n}\r\n\r\n/**\r\n * Inherit the prototype methods from one constructor into another.\r\n *\r\n * The Function.prototype.inherits from lang.js rewritten as a standalone\r\n * function (not on Function.prototype). NOTE: If this file is to be loaded\r\n * during bootstrapping this function needs to be rewritten using some native\r\n * functions as prototype setup using normal JavaScript does not work as\r\n * expected during bootstrapping (see mirror.js in r114903).\r\n * @param {Function} ctor Constructor function which needs to inherit the\r\n *     prototype.\r\n * @param {Function} superCtor Constructor function to inherit prototype from.\r\n * @throws {TypeError} Will error if either constructor is null, or if\r\n *     the super constructor lacks a prototype.\r\n */\r\nfunction inherits(ctor, superCtor) {\r\n\r\n  if (ctor === undefined || ctor === null)\r\n    throw new ERR_INVALID_ARG_TYPE('ctor', 'Function', ctor);\r\n\r\n  if (superCtor === undefined || superCtor === null)\r\n    throw new ERR_INVALID_ARG_TYPE('superCtor', 'Function', superCtor);\r\n\r\n  if (superCtor.prototype === undefined) {\r\n    throw new ERR_INVALID_ARG_TYPE('superCtor.prototype',\r\n                                   'Object', superCtor.prototype);\r\n  }\r\n  ObjectDefineProperty(ctor, 'super_', {\r\n    __proto__: null,\r\n    value: superCtor,\r\n    writable: true,\r\n    configurable: true,\r\n  });\r\n  ObjectSetPrototypeOf(ctor.prototype, superCtor.prototype);\r\n}\r\n\r\n/**\r\n * @deprecated since v6.0.0\r\n * @template T\r\n * @template S\r\n * @param {T} target\r\n * @param {S} source\r\n * @returns {S extends null ? T : (T & S)}\r\n */\r\nfunction _extend(target, source) {\r\n  // Don't do anything if source isn't an object\r\n  if (source === null || typeof source !== 'object') return target;\r\n\r\n  const keys = ObjectKeys(source);\r\n  let i = keys.length;\r\n  while (i--) {\r\n    target[keys[i]] = source[keys[i]];\r\n  }\r\n  return target;\r\n}\r\n\r\nconst callbackifyOnRejected = (reason, cb) => {\r\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\r\n  // Because `null` is a special error value in callbacks which means \"no error\r\n  // occurred\", we error-wrap so the callback consumer can distinguish between\r\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\r\n  if (!reason) {\r\n    reason = new ERR_FALSY_VALUE_REJECTION.HideStackFramesError(reason);\r\n    ErrorCaptureStackTrace(reason, callbackifyOnRejected);\r\n  }\r\n  return cb(reason);\r\n};\r\n\r\n/**\r\n * @template {(...args: any[]) => Promise<any>} T\r\n * @param {T} original\r\n * @returns {T extends (...args: infer TArgs) => Promise<infer TReturn> ?\r\n *   ((...params: [...TArgs, ((err: Error, ret: TReturn) => any)]) => void) :\r\n *   never\r\n * }\r\n */\r\nfunction callbackify(original) {\r\n  validateFunction(original, 'original');\r\n\r\n  // We DO NOT return the promise as it gives the user a false sense that\r\n  // the promise is actually somehow related to the callback's execution\r\n  // and that the callback throwing will reject the promise.\r\n  function callbackified(...args) {\r\n    const maybeCb = ArrayPrototypePop(args);\r\n    validateFunction(maybeCb, 'last argument');\r\n    const cb = FunctionPrototypeBind(maybeCb, this);\r\n    // In true node style we process the callback on `nextTick` with all the\r\n    // implications (stack, `uncaughtException`, `async_hooks`)\r\n    ReflectApply(original, this, args)\r\n      .then((ret) => process.nextTick(cb, null, ret),\r\n            (rej) => process.nextTick(callbackifyOnRejected, rej, cb));\r\n  }\r\n\r\n  const descriptors = ObjectGetOwnPropertyDescriptors(original);\r\n  // It is possible to manipulate a functions `length` or `name` property. This\r\n  // guards against the manipulation.\r\n  if (typeof descriptors.length.value === 'number') {\r\n    descriptors.length.value++;\r\n  }\r\n  if (typeof descriptors.name.value === 'string') {\r\n    descriptors.name.value += 'Callbackified';\r\n  }\r\n  const propertiesValues = ObjectValues(descriptors);\r\n  for (let i = 0; i < propertiesValues.length; i++) {\r\n  // We want to use null-prototype objects to not rely on globally mutable\r\n  // %Object.prototype%.\r\n    ObjectSetPrototypeOf(propertiesValues[i], null);\r\n  }\r\n  ObjectDefineProperties(callbackified, descriptors);\r\n  return callbackified;\r\n}\r\n\r\n/**\r\n * @param {number} err\r\n * @returns {string}\r\n */\r\nfunction getSystemErrorName(err) {\r\n  validateNumber(err, 'err');\r\n  if (err >= 0 || !NumberIsSafeInteger(err)) {\r\n    throw new ERR_OUT_OF_RANGE('err', 'a negative integer', err);\r\n  }\r\n  return internalErrorName(err);\r\n}\r\n\r\nfunction _errnoException(...args) {\r\n  if (isErrorStackTraceLimitWritable()) {\r\n    const limit = Error.stackTraceLimit;\r\n    Error.stackTraceLimit = 0;\r\n    const e = new ErrnoException(...args);\r\n    Error.stackTraceLimit = limit;\r\n    ErrorCaptureStackTrace(e, _exceptionWithHostPort);\r\n    return e;\r\n  }\r\n  return new ErrnoException(...args);\r\n}\r\n\r\nfunction _exceptionWithHostPort(...args) {\r\n  if (isErrorStackTraceLimitWritable()) {\r\n    const limit = Error.stackTraceLimit;\r\n    Error.stackTraceLimit = 0;\r\n    const e = new ExceptionWithHostPort(...args);\r\n    Error.stackTraceLimit = limit;\r\n    ErrorCaptureStackTrace(e, _exceptionWithHostPort);\r\n    return e;\r\n  }\r\n  return new ExceptionWithHostPort(...args);\r\n}\r\n\r\n/**\r\n * Parses the content of a `.env` file.\r\n * @param {string} content\r\n * @returns {Record<string, string>}\r\n */\r\nfunction parseEnv(content) {\r\n  validateString(content, 'content');\r\n  return binding.parseEnv(content);\r\n}\r\n\r\n// Keep the `exports =` so that various functions can still be monkeypatched\r\nmodule.exports = {\r\n  _errnoException,\r\n  _exceptionWithHostPort,\r\n  _extend: deprecate(_extend,\r\n                     'The `util._extend` API is deprecated. Please use Object.assign() instead.',\r\n                     'DEP0060'),\r\n  callbackify,\r\n  debug: debuglog,\r\n  debuglog,\r\n  deprecate,\r\n  format,\r\n  styleText,\r\n  formatWithOptions,\r\n  getSystemErrorMap,\r\n  getSystemErrorName,\r\n  inherits,\r\n  inspect,\r\n  isArray: deprecate(ArrayIsArray,\r\n                     'The `util.isArray` API is deprecated. Please use `Array.isArray()` instead.',\r\n                     'DEP0044'),\r\n  isBoolean: deprecate(isBoolean,\r\n                       'The `util.isBoolean` API is deprecated.  Please use `typeof arg === \"boolean\"` instead.',\r\n                       'DEP0045'),\r\n  isBuffer: deprecate(isBuffer,\r\n                      'The `util.isBuffer` API is deprecated. Please use `Buffer.isBuffer()` instead.',\r\n                      'DEP0046'),\r\n  isDeepStrictEqual(a, b) {\r\n    if (internalDeepEqual === undefined) {\r\n      internalDeepEqual = require('internal/util/comparisons')\r\n        .isDeepStrictEqual;\r\n    }\r\n    return internalDeepEqual(a, b);\r\n  },\r\n  isNull: deprecate(isNull,\r\n                    'The `util.isNull` API is deprecated. Please use `arg === null` instead.',\r\n                    'DEP0050'),\r\n  isNullOrUndefined: deprecate(isNullOrUndefined,\r\n                               'The `util.isNullOrUndefined` API is deprecated. ' +\r\n                               'Please use `arg === null || arg === undefined` instead.',\r\n                               'DEP0051'),\r\n  isNumber: deprecate(isNumber,\r\n                      'The `util.isNumber` API is deprecated. Please use `typeof arg === \"number\"` instead.',\r\n                      'DEP0052'),\r\n  isString: deprecate(isString,\r\n                      'The `util.isString` API is deprecated.  Please use `typeof arg === \"string\"` instead.',\r\n                      'DEP0056'),\r\n  isSymbol: deprecate(isSymbol,\r\n                      'The `util.isSymbol` API is deprecated.  Please use `arg === \"symbol\"` instead.',\r\n                      'DEP0057'),\r\n  isUndefined: deprecate(isUndefined,\r\n                         'The `util.isUndefined` API is deprecated. Please use `arg === undefined` instead.',\r\n                         'DEP0058'),\r\n  isRegExp: deprecate(types.isRegExp,\r\n                      'The `util.isRegExp` API is deprecated. Please use `arg instanceof RegExp` instead.',\r\n                      'DEP0055'),\r\n  isObject: deprecate(isObject,\r\n                      'The `util.isObject` API is deprecated. ' +\r\n                      'Please use `arg !== null && typeof arg === \"object\"` instead.',\r\n                      'DEP0053'),\r\n  isDate: deprecate(types.isDate,\r\n                    'The `util.isDate` API is deprecated.  Please use `arg instanceof Date` instead.',\r\n                    'DEP0047'),\r\n  isError: deprecate(isError,\r\n                     'The `util.isError` API is deprecated. ' +\r\n                     'Please use `ObjectPrototypeToString(e) === \"[object Error]\" ' +\r\n                     '|| e instanceof Error` instead.',\r\n                     'DEP0048'),\r\n  isFunction: deprecate(isFunction,\r\n                        'The `util.isFunction` API is deprecated.  Please use `typeof arg === \"function\"` instead.',\r\n                        'DEP0049'),\r\n  isPrimitive: deprecate(isPrimitive,\r\n                         'The `util.isPrimitive` API is deprecated. ' +\r\n                         'Please use `arg === null || ' +\r\n                         '(typeof arg !== \"object\" && typeof arg !== \"function\")` instead.',\r\n                         'DEP0054'),\r\n  log: deprecate(log,\r\n                 'The `util.log API is deprecated. ' +\r\n                 'Please use console.log() with a custom formatter or a third-party logger instead.',\r\n                 'DEP0059'),\r\n  promisify,\r\n  stripVTControlCharacters,\r\n  toUSVString(input) {\r\n    return StringPrototypeToWellFormed(`${input}`);\r\n  },\r\n  get transferableAbortSignal() {\r\n    return lazyAbortController().transferableAbortSignal;\r\n  },\r\n  get transferableAbortController() {\r\n    return lazyAbortController().transferableAbortController;\r\n  },\r\n  get aborted() {\r\n    return lazyAbortController().aborted;\r\n  },\r\n  types,\r\n  parseEnv,\r\n};\r\n\r\ndefineLazyProperties(\r\n  module.exports,\r\n  'internal/util/parse_args/parse_args',\r\n  ['parseArgs'],\r\n);\r\n\r\ndefineLazyProperties(\r\n  module.exports,\r\n  'internal/encoding',\r\n  ['TextDecoder', 'TextEncoder'],\r\n);\r\n\r\ndefineLazyProperties(\r\n  module.exports,\r\n  'internal/mime',\r\n  ['MIMEType', 'MIMEParams'],\r\n);\r\n"
  },
  "48": {
    "metadata": {
      "scriptId": "48",
      "url": "node:internal/process/permission",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 35,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "da3fefd2aa7b347c4527fd2c755fb66c798b67a4feae188f7cfed3ee40a01bf4",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 954,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/permission"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectFreeze,\r\n  StringPrototypeStartsWith,\r\n} = primordials;\r\n\r\nconst permission = internalBinding('permission');\r\nconst { validateString } = require('internal/validators');\r\nconst { resolve } = require('path');\r\n\r\nlet experimentalPermission;\r\n\r\nmodule.exports = ObjectFreeze({\r\n  __proto__: null,\r\n  isEnabled() {\r\n    if (experimentalPermission === undefined) {\r\n      const { getOptionValue } = require('internal/options');\r\n      experimentalPermission = getOptionValue('--experimental-permission');\r\n    }\r\n    return experimentalPermission;\r\n  },\r\n  has(scope, reference) {\r\n    validateString(scope, 'scope');\r\n    if (reference != null) {\r\n      // TODO: add support for WHATWG URLs and Uint8Arrays.\r\n      validateString(reference, 'reference');\r\n      if (StringPrototypeStartsWith(scope, 'fs')) {\r\n        reference = resolve(reference);\r\n      }\r\n    }\r\n\r\n    return permission.has(scope, reference);\r\n  },\r\n});\r\n"
  },
  "49": {
    "metadata": {
      "scriptId": "49",
      "url": "node:internal/bootstrap/web/exposed-wildcard",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 114,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "f636496d97c0cd12ce4da846a18df235b855cc42f6ee3d4205bd86b59f7aeb6a",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3553,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/bootstrap/web/exposed-wildcard"
    },
    "source": "'use strict';\r\n\r\n/**\r\n * This file exposes web interfaces that is defined with the WebIDL\r\n * [Exposed=*] extended attribute.\r\n * See more details at https://webidl.spec.whatwg.org/#Exposed.\r\n */\r\n\r\nconst {\r\n  globalThis,\r\n} = primordials;\r\n\r\nconst {\r\n  exposeInterface,\r\n  lazyDOMExceptionClass,\r\n  exposeLazyInterfaces,\r\n  exposeGetterAndSetter,\r\n  exposeNamespace,\r\n} = require('internal/util');\r\nconst config = internalBinding('config');\r\n\r\n// https://console.spec.whatwg.org/#console-namespace\r\nexposeNamespace(globalThis, 'console',\r\n                createGlobalConsole());\r\n\r\nconst { URL, URLSearchParams } = require('internal/url');\r\n// https://url.spec.whatwg.org/#url\r\nexposeInterface(globalThis, 'URL', URL);\r\n// https://url.spec.whatwg.org/#urlsearchparams\r\nexposeInterface(globalThis, 'URLSearchParams', URLSearchParams);\r\nexposeGetterAndSetter(globalThis,\r\n                      'DOMException',\r\n                      () => {\r\n                        const DOMException = lazyDOMExceptionClass();\r\n                        exposeInterface(globalThis, 'DOMException', DOMException);\r\n                        return DOMException;\r\n                      },\r\n                      (value) => {\r\n                        exposeInterface(globalThis, 'DOMException', value);\r\n                      });\r\n\r\n// https://dom.spec.whatwg.org/#interface-abortcontroller\r\n// Lazy ones.\r\nexposeLazyInterfaces(globalThis, 'internal/abort_controller', [\r\n  'AbortController', 'AbortSignal',\r\n]);\r\n// https://dom.spec.whatwg.org/#interface-eventtarget\r\nconst {\r\n  EventTarget, Event,\r\n} = require('internal/event_target');\r\nexposeInterface(globalThis, 'Event', Event);\r\nexposeInterface(globalThis, 'EventTarget', EventTarget);\r\n\r\n// https://encoding.spec.whatwg.org/#textencoder\r\n// https://encoding.spec.whatwg.org/#textdecoder\r\nexposeLazyInterfaces(globalThis,\r\n                     'internal/encoding',\r\n                     ['TextEncoder', 'TextDecoder']);\r\n\r\nfunction createGlobalConsole() {\r\n  const consoleFromNode =\r\n    require('internal/console/global');\r\n  if (config.hasInspector) {\r\n    const inspector = require('internal/util/inspector');\r\n    // TODO(joyeecheung): postpone this until the first time inspector\r\n    // is activated.\r\n    inspector.wrapConsole(consoleFromNode);\r\n    const { setConsoleExtensionInstaller } = internalBinding('inspector');\r\n    // Setup inspector command line API.\r\n    setConsoleExtensionInstaller(inspector.installConsoleExtensions);\r\n  }\r\n  return consoleFromNode;\r\n}\r\n\r\n// Web Streams API\r\nexposeLazyInterfaces(\r\n  globalThis,\r\n  'internal/webstreams/transformstream',\r\n  ['TransformStream', 'TransformStreamDefaultController']);\r\n\r\nexposeLazyInterfaces(\r\n  globalThis,\r\n  'internal/webstreams/writablestream',\r\n  ['WritableStream', 'WritableStreamDefaultController', 'WritableStreamDefaultWriter']);\r\n\r\nexposeLazyInterfaces(\r\n  globalThis,\r\n  'internal/webstreams/readablestream',\r\n  [\r\n    'ReadableStream', 'ReadableStreamDefaultReader',\r\n    'ReadableStreamBYOBReader', 'ReadableStreamBYOBRequest',\r\n    'ReadableByteStreamController', 'ReadableStreamDefaultController',\r\n  ]);\r\n\r\nexposeLazyInterfaces(\r\n  globalThis,\r\n  'internal/webstreams/queuingstrategies',\r\n  [\r\n    'ByteLengthQueuingStrategy', 'CountQueuingStrategy',\r\n  ]);\r\n\r\nexposeLazyInterfaces(\r\n  globalThis,\r\n  'internal/webstreams/encoding',\r\n  [\r\n    'TextEncoderStream', 'TextDecoderStream',\r\n  ]);\r\n\r\nexposeLazyInterfaces(\r\n  globalThis,\r\n  'internal/webstreams/compression',\r\n  [\r\n    'CompressionStream', 'DecompressionStream',\r\n  ]);\r\n"
  },
  "51": {
    "metadata": {
      "scriptId": "51",
      "url": "node:internal/console/constructor",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 678,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "3bde16512260f5f51bcf28f5eb7310c95336750380a8ac4f6cb3865541e86260",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 21421,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/console/constructor"
    },
    "source": "'use strict';\r\n\r\n// The Console constructor is not actually used to construct the global\r\n// console. It's exported for backwards compatibility.\r\n\r\nconst {\r\n  ArrayFrom,\r\n  ArrayIsArray,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSome,\r\n  ArrayPrototypeUnshift,\r\n  Boolean,\r\n  ErrorCaptureStackTrace,\r\n  FunctionPrototypeBind,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  ObjectValues,\r\n  ReflectApply,\r\n  ReflectConstruct,\r\n  ReflectOwnKeys,\r\n  RegExpPrototypeSymbolReplace,\r\n  SafeArrayIterator,\r\n  SafeMap,\r\n  SafeSet,\r\n  SafeWeakMap,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeRepeat,\r\n  StringPrototypeSlice,\r\n  Symbol,\r\n  SymbolHasInstance,\r\n  SymbolToStringTag,\r\n} = primordials;\r\n\r\nconst { trace } = internalBinding('trace_events');\r\nconst {\r\n  codes: {\r\n    ERR_CONSOLE_WRITABLE_STREAM,\r\n    ERR_INCOMPATIBLE_OPTION_PAIR,\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n  isStackOverflowError,\r\n} = require('internal/errors');\r\nconst {\r\n  validateArray,\r\n  validateInteger,\r\n  validateObject,\r\n} = require('internal/validators');\r\nconst { previewEntries } = internalBinding('util');\r\nconst { Buffer: { isBuffer } } = require('buffer');\r\nconst {\r\n  inspect,\r\n  formatWithOptions,\r\n} = require('internal/util/inspect');\r\nconst {\r\n  isTypedArray, isSet, isMap, isSetIterator, isMapIterator,\r\n} = require('internal/util/types');\r\nconst {\r\n  CHAR_UPPERCASE_C: kTraceCount,\r\n} = require('internal/constants');\r\nconst { styleText } = require('util');\r\nconst kCounts = Symbol('counts');\r\nconst { time, timeLog, timeEnd, kNone } = require('internal/util/debuglog');\r\n\r\nconst kTraceConsoleCategory = 'node,node.console';\r\n\r\nconst kMaxGroupIndentation = 1000;\r\n\r\n// Lazy loaded for startup performance.\r\nlet cliTable;\r\n\r\nlet utilColors;\r\nfunction lazyUtilColors() {\r\n  utilColors ??= require('internal/util/colors');\r\n  return utilColors;\r\n}\r\n\r\n// Track amount of indentation required via `console.group()`.\r\nconst kGroupIndent = Symbol('kGroupIndent');\r\nconst kGroupIndentationWidth = Symbol('kGroupIndentWidth');\r\nconst kFormatForStderr = Symbol('kFormatForStderr');\r\nconst kFormatForStdout = Symbol('kFormatForStdout');\r\nconst kGetInspectOptions = Symbol('kGetInspectOptions');\r\nconst kColorMode = Symbol('kColorMode');\r\nconst kIsConsole = Symbol('kIsConsole');\r\nconst kWriteToConsole = Symbol('kWriteToConsole');\r\nconst kBindProperties = Symbol('kBindProperties');\r\nconst kBindStreamsEager = Symbol('kBindStreamsEager');\r\nconst kBindStreamsLazy = Symbol('kBindStreamsLazy');\r\nconst kUseStdout = Symbol('kUseStdout');\r\nconst kUseStderr = Symbol('kUseStderr');\r\nconst kInternalTimeLogImpl = Symbol('kInternalTimeLogImpl');\r\n\r\nconst optionsMap = new SafeWeakMap();\r\nfunction Console(options /* or: stdout, stderr, ignoreErrors = true */) {\r\n  // We have to test new.target here to see if this function is called\r\n  // with new, because we need to define a custom instanceof to accommodate\r\n  // the global console.\r\n  if (new.target === undefined) {\r\n    return ReflectConstruct(Console, arguments);\r\n  }\r\n\r\n  if (!options || typeof options.write === 'function') {\r\n    options = {\r\n      stdout: options,\r\n      stderr: arguments[1],\r\n      ignoreErrors: arguments[2],\r\n    };\r\n  }\r\n\r\n  const {\r\n    stdout,\r\n    stderr = stdout,\r\n    ignoreErrors = true,\r\n    colorMode = 'auto',\r\n    inspectOptions,\r\n    groupIndentation,\r\n  } = options;\r\n\r\n  if (!stdout || typeof stdout.write !== 'function') {\r\n    throw new ERR_CONSOLE_WRITABLE_STREAM('stdout');\r\n  }\r\n  if (!stderr || typeof stderr.write !== 'function') {\r\n    throw new ERR_CONSOLE_WRITABLE_STREAM('stderr');\r\n  }\r\n\r\n  if (typeof colorMode !== 'boolean' && colorMode !== 'auto')\r\n    throw new ERR_INVALID_ARG_VALUE('colorMode', colorMode);\r\n\r\n  if (groupIndentation !== undefined) {\r\n    validateInteger(groupIndentation, 'groupIndentation',\r\n                    0, kMaxGroupIndentation);\r\n  }\r\n\r\n  if (inspectOptions !== undefined) {\r\n    validateObject(inspectOptions, 'options.inspectOptions');\r\n\r\n    if (inspectOptions.colors !== undefined &&\r\n        options.colorMode !== undefined) {\r\n      throw new ERR_INCOMPATIBLE_OPTION_PAIR(\r\n        'options.inspectOptions.color', 'colorMode');\r\n    }\r\n    optionsMap.set(this, inspectOptions);\r\n  }\r\n\r\n  // Bind the prototype functions to this Console instance\r\n  ArrayPrototypeForEach(ObjectKeys(Console.prototype), (key) => {\r\n    // We have to bind the methods grabbed from the instance instead of from\r\n    // the prototype so that users extending the Console can override them\r\n    // from the prototype chain of the subclass.\r\n    this[key] = FunctionPrototypeBind(this[key], this);\r\n    ObjectDefineProperty(this[key], 'name', {\r\n      __proto__: null,\r\n      value: key,\r\n    });\r\n  });\r\n\r\n  this[kBindStreamsEager](stdout, stderr);\r\n  this[kBindProperties](ignoreErrors, colorMode, groupIndentation);\r\n}\r\n\r\nconst consolePropAttributes = {\r\n  writable: true,\r\n  enumerable: false,\r\n  configurable: true,\r\n};\r\n\r\n// Fixup global.console instanceof global.console.Console\r\nObjectDefineProperty(Console, SymbolHasInstance, {\r\n  __proto__: null,\r\n  value(instance) {\r\n    return instance[kIsConsole];\r\n  },\r\n});\r\n\r\nconst kColorInspectOptions = { colors: true };\r\nconst kNoColorInspectOptions = {};\r\n\r\nObjectDefineProperties(Console.prototype, {\r\n  [kBindStreamsEager]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    // Eager version for the Console constructor\r\n    value: function(stdout, stderr) {\r\n      ObjectDefineProperties(this, {\r\n        '_stdout': { __proto__: null, ...consolePropAttributes, value: stdout },\r\n        '_stderr': { __proto__: null, ...consolePropAttributes, value: stderr },\r\n      });\r\n    },\r\n  },\r\n  [kBindStreamsLazy]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    // Lazily load the stdout and stderr from an object so we don't\r\n    // create the stdio streams when they are not even accessed\r\n    value: function(object) {\r\n      let stdout;\r\n      let stderr;\r\n      ObjectDefineProperties(this, {\r\n        '_stdout': {\r\n          __proto__: null,\r\n          enumerable: false,\r\n          configurable: true,\r\n          get() {\r\n            if (!stdout) stdout = object.stdout;\r\n            return stdout;\r\n          },\r\n          set(value) { stdout = value; },\r\n        },\r\n        '_stderr': {\r\n          __proto__: null,\r\n          enumerable: false,\r\n          configurable: true,\r\n          get() {\r\n            if (!stderr) { stderr = object.stderr; }\r\n            return stderr;\r\n          },\r\n          set(value) { stderr = value; },\r\n        },\r\n      });\r\n    },\r\n  },\r\n  [kBindProperties]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    value: function(ignoreErrors, colorMode, groupIndentation = 2) {\r\n      ObjectDefineProperties(this, {\r\n        '_stdoutErrorHandler': {\r\n          __proto__: null,\r\n          ...consolePropAttributes,\r\n          value: createWriteErrorHandler(this, kUseStdout),\r\n        },\r\n        '_stderrErrorHandler': {\r\n          ...consolePropAttributes,\r\n          __proto__: null,\r\n          value: createWriteErrorHandler(this, kUseStderr),\r\n        },\r\n        '_ignoreErrors': {\r\n          __proto__: null,\r\n          ...consolePropAttributes,\r\n          value: Boolean(ignoreErrors),\r\n        },\r\n        '_times': { __proto__: null, ...consolePropAttributes, value: new SafeMap() },\r\n        // Corresponds to https://console.spec.whatwg.org/#count-map\r\n        [kCounts]: { __proto__: null, ...consolePropAttributes, value: new SafeMap() },\r\n        [kColorMode]: { __proto__: null, ...consolePropAttributes, value: colorMode },\r\n        [kIsConsole]: { __proto__: null, ...consolePropAttributes, value: true },\r\n        [kGroupIndent]: { __proto__: null, ...consolePropAttributes, value: '' },\r\n        [kGroupIndentationWidth]: {\r\n          __proto__: null,\r\n          ...consolePropAttributes,\r\n          value: groupIndentation,\r\n        },\r\n        [SymbolToStringTag]: {\r\n          __proto__: null,\r\n          writable: false,\r\n          enumerable: false,\r\n          configurable: true,\r\n          value: 'console',\r\n        },\r\n      });\r\n    },\r\n  },\r\n  [kWriteToConsole]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    value: function(streamSymbol, string, color = '') {\r\n      const ignoreErrors = this._ignoreErrors;\r\n      const groupIndent = this[kGroupIndent];\r\n\r\n      const useStdout = streamSymbol === kUseStdout;\r\n      const stream = useStdout ? this._stdout : this._stderr;\r\n      const errorHandler = useStdout ?\r\n        this._stdoutErrorHandler : this._stderrErrorHandler;\r\n\r\n      if (groupIndent.length !== 0) {\r\n        if (StringPrototypeIncludes(string, '\\n')) {\r\n          string = RegExpPrototypeSymbolReplace(/\\n/g, string, `\\n${groupIndent}`);\r\n        }\r\n        string = groupIndent + string;\r\n      }\r\n\r\n      if (color) {\r\n        string = styleText(color, string);\r\n      }\r\n\r\n      string += '\\n';\r\n\r\n      if (ignoreErrors === false) return stream.write(string);\r\n\r\n      // There may be an error occurring synchronously (e.g. for files or TTYs\r\n      // on POSIX systems) or asynchronously (e.g. pipes on POSIX systems), so\r\n      // handle both situations.\r\n      try {\r\n        // Add and later remove a noop error handler to catch synchronous\r\n        // errors.\r\n        if (stream.listenerCount('error') === 0)\r\n          stream.once('error', noop);\r\n\r\n        stream.write(string, errorHandler);\r\n      } catch (e) {\r\n        // Console is a debugging utility, so it swallowing errors is not\r\n        // desirable even in edge cases such as low stack space.\r\n        if (isStackOverflowError(e))\r\n          throw e;\r\n        // Sorry, there's no proper way to pass along the error here.\r\n      } finally {\r\n        stream.removeListener('error', noop);\r\n      }\r\n    },\r\n  },\r\n  [kGetInspectOptions]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    value: function(stream) {\r\n      let color = this[kColorMode];\r\n      if (color === 'auto') {\r\n        color = lazyUtilColors().shouldColorize(stream);\r\n      }\r\n\r\n      const options = optionsMap.get(this);\r\n      if (options) {\r\n        if (options.colors === undefined) {\r\n          options.colors = color;\r\n        }\r\n        return options;\r\n      }\r\n\r\n      return color ? kColorInspectOptions : kNoColorInspectOptions;\r\n    },\r\n  },\r\n  [kFormatForStdout]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    value: function(args) {\r\n      const opts = this[kGetInspectOptions](this._stdout);\r\n      ArrayPrototypeUnshift(args, opts);\r\n      return ReflectApply(formatWithOptions, null, args);\r\n    },\r\n  },\r\n  [kFormatForStderr]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    value: function(args) {\r\n      const opts = this[kGetInspectOptions](this._stderr);\r\n      ArrayPrototypeUnshift(args, opts);\r\n      return ReflectApply(formatWithOptions, null, args);\r\n    },\r\n  },\r\n});\r\n\r\n// Make a function that can serve as the callback passed to `stream.write()`.\r\nfunction createWriteErrorHandler(instance, streamSymbol) {\r\n  return (err) => {\r\n    // This conditional evaluates to true if and only if there was an error\r\n    // that was not already emitted (which happens when the _write callback\r\n    // is invoked asynchronously).\r\n    const stream = streamSymbol === kUseStdout ?\r\n      instance._stdout : instance._stderr;\r\n    if (err !== null && !stream._writableState.errorEmitted) {\r\n      // If there was an error, it will be emitted on `stream` as\r\n      // an `error` event. Adding a `once` listener will keep that error\r\n      // from becoming an uncaught exception, but since the handler is\r\n      // removed after the event, non-console.* writes won't be affected.\r\n      // we are only adding noop if there is no one else listening for 'error'\r\n      if (stream.listenerCount('error') === 0) {\r\n        stream.once('error', noop);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction timeLogImpl(label, formatted, args) {\r\n  if (args === undefined) {\r\n    this.log('%s: %s', label, formatted);\r\n  } else {\r\n    this.log('%s: %s', label, formatted, ...new SafeArrayIterator(args));\r\n  }\r\n}\r\n\r\nconst consoleMethods = {\r\n  log(...args) {\r\n    this[kWriteToConsole](kUseStdout, this[kFormatForStdout](args));\r\n  },\r\n  warn(...args) {\r\n    const color = (shouldColorize(args) && 'yellow') || '';\r\n    this[kWriteToConsole](kUseStderr, this[kFormatForStderr](args), color);\r\n  },\r\n\r\n  error(...args) {\r\n    const color = (shouldColorize(args) && 'red') || '';\r\n    this[kWriteToConsole](kUseStderr, this[kFormatForStderr](args), color);\r\n  },\r\n\r\n  dir(object, options) {\r\n    this[kWriteToConsole](kUseStdout, inspect(object, {\r\n      customInspect: false,\r\n      ...this[kGetInspectOptions](this._stdout),\r\n      ...options,\r\n    }));\r\n  },\r\n\r\n  time(label = 'default') {\r\n    time(this._times, kTraceConsoleCategory, 'console.time()', kNone, label, `time::${label}`);\r\n  },\r\n\r\n  timeEnd(label = 'default') {\r\n    if (this[kInternalTimeLogImpl] === undefined)\r\n      this[kInternalTimeLogImpl] = FunctionPrototypeBind(timeLogImpl, this);\r\n\r\n    timeEnd(this._times, kTraceConsoleCategory, 'console.timeEnd()', kNone, this[kInternalTimeLogImpl], label, `time::${label}`);\r\n  },\r\n\r\n  timeLog(label = 'default', ...data) {\r\n    if (this[kInternalTimeLogImpl] === undefined)\r\n      this[kInternalTimeLogImpl] = FunctionPrototypeBind(timeLogImpl, this);\r\n\r\n    timeLog(this._times, kTraceConsoleCategory, 'console.timeLog()', kNone, this[kInternalTimeLogImpl], label, `time::${label}`, data);\r\n  },\r\n\r\n  trace: function trace(...args) {\r\n    const err = {\r\n      name: 'Trace',\r\n      message: this[kFormatForStderr](args),\r\n    };\r\n    ErrorCaptureStackTrace(err, trace);\r\n    this.error(err.stack);\r\n  },\r\n\r\n  // Defined by: https://console.spec.whatwg.org/#assert\r\n  assert(expression, ...args) {\r\n    if (!expression) {\r\n      if (args.length && typeof args[0] === 'string') {\r\n        args[0] = `Assertion failed: ${args[0]}`;\r\n      } else {\r\n        ArrayPrototypeUnshift(args, 'Assertion failed');\r\n      }\r\n      // The arguments will be formatted in warn() again\r\n      ReflectApply(this.warn, this, args);\r\n    }\r\n  },\r\n\r\n  // Defined by: https://console.spec.whatwg.org/#clear\r\n  clear() {\r\n    // It only makes sense to clear if _stdout is a TTY.\r\n    // Otherwise, do nothing.\r\n    if (this._stdout.isTTY && process.env.TERM !== 'dumb') {\r\n      // The require is here intentionally to avoid readline being\r\n      // required too early when console is first loaded.\r\n      const {\r\n        cursorTo,\r\n        clearScreenDown,\r\n      } = require('internal/readline/callbacks');\r\n      cursorTo(this._stdout, 0, 0);\r\n      clearScreenDown(this._stdout);\r\n    }\r\n  },\r\n\r\n  // Defined by: https://console.spec.whatwg.org/#count\r\n  count(label = 'default') {\r\n    // Ensures that label is a string, and only things that can be\r\n    // coerced to strings. e.g. Symbol is not allowed\r\n    label = `${label}`;\r\n    const counts = this[kCounts];\r\n    let count = counts.get(label);\r\n    if (count === undefined)\r\n      count = 1;\r\n    else\r\n      count++;\r\n    counts.set(label, count);\r\n    trace(kTraceCount, kTraceConsoleCategory, `count::${label}`, 0, count);\r\n    this.log(`${label}: ${count}`);\r\n  },\r\n\r\n  // Defined by: https://console.spec.whatwg.org/#countreset\r\n  countReset(label = 'default') {\r\n    const counts = this[kCounts];\r\n    if (!counts.has(label)) {\r\n      process.emitWarning(`Count for '${label}' does not exist`);\r\n      return;\r\n    }\r\n    trace(kTraceCount, kTraceConsoleCategory, `count::${label}`, 0, 0);\r\n    counts.delete(`${label}`);\r\n  },\r\n\r\n  group(...data) {\r\n    if (data.length > 0) {\r\n      ReflectApply(this.log, this, data);\r\n    }\r\n    this[kGroupIndent] +=\r\n      StringPrototypeRepeat(' ', this[kGroupIndentationWidth]);\r\n  },\r\n\r\n  groupEnd() {\r\n    this[kGroupIndent] = StringPrototypeSlice(\r\n      this[kGroupIndent],\r\n      0,\r\n      this[kGroupIndent].length - this[kGroupIndentationWidth],\r\n    );\r\n  },\r\n\r\n  // https://console.spec.whatwg.org/#table\r\n  table(tabularData, properties) {\r\n    if (properties !== undefined)\r\n      validateArray(properties, 'properties');\r\n\r\n    if (tabularData === null || typeof tabularData !== 'object')\r\n      return this.log(tabularData);\r\n\r\n    cliTable ??= require('internal/cli_table');\r\n    const final = (k, v) => this.log(cliTable(k, v));\r\n\r\n    const _inspect = (v) => {\r\n      const depth = v !== null &&\r\n                    typeof v === 'object' &&\r\n                    !isArray(v) &&\r\n                    ObjectKeys(v).length > 2 ? -1 : 0;\r\n      const opt = {\r\n        depth,\r\n        maxArrayLength: 3,\r\n        breakLength: Infinity,\r\n        ...this[kGetInspectOptions](this._stdout),\r\n      };\r\n      return inspect(v, opt);\r\n    };\r\n    const getIndexArray = (length) => ArrayFrom(\r\n      { length }, (_, i) => _inspect(i));\r\n\r\n    const mapIter = isMapIterator(tabularData);\r\n    let isKeyValue = false;\r\n    let i = 0;\r\n    if (mapIter) {\r\n      const res = previewEntries(tabularData, true);\r\n      tabularData = res[0];\r\n      isKeyValue = res[1];\r\n    }\r\n\r\n    if (isKeyValue || isMap(tabularData)) {\r\n      const keys = [];\r\n      const values = [];\r\n      let length = 0;\r\n      if (mapIter) {\r\n        for (; i < tabularData.length / 2; ++i) {\r\n          ArrayPrototypePush(keys, _inspect(tabularData[i * 2]));\r\n          ArrayPrototypePush(values, _inspect(tabularData[i * 2 + 1]));\r\n          length++;\r\n        }\r\n      } else {\r\n        for (const { 0: k, 1: v } of tabularData) {\r\n          ArrayPrototypePush(keys, _inspect(k));\r\n          ArrayPrototypePush(values, _inspect(v));\r\n          length++;\r\n        }\r\n      }\r\n      return final([\r\n        iterKey, keyKey, valuesKey,\r\n      ], [\r\n        getIndexArray(length),\r\n        keys,\r\n        values,\r\n      ]);\r\n    }\r\n\r\n    const setIter = isSetIterator(tabularData);\r\n    if (setIter)\r\n      tabularData = previewEntries(tabularData);\r\n\r\n    const setlike = setIter || mapIter || isSet(tabularData);\r\n    if (setlike) {\r\n      const values = [];\r\n      let length = 0;\r\n      for (const v of tabularData) {\r\n        ArrayPrototypePush(values, _inspect(v));\r\n        length++;\r\n      }\r\n      return final([iterKey, valuesKey], [getIndexArray(length), values]);\r\n    }\r\n\r\n    const map = { __proto__: null };\r\n    let hasPrimitives = false;\r\n    const valuesKeyArray = [];\r\n    const indexKeyArray = ObjectKeys(tabularData);\r\n\r\n    for (; i < indexKeyArray.length; i++) {\r\n      const item = tabularData[indexKeyArray[i]];\r\n      const primitive = item === null ||\r\n          (typeof item !== 'function' && typeof item !== 'object');\r\n      if (properties === undefined && primitive) {\r\n        hasPrimitives = true;\r\n        valuesKeyArray[i] = _inspect(item);\r\n      } else {\r\n        const keys = properties || ObjectKeys(item);\r\n        for (const key of keys) {\r\n          map[key] ??= [];\r\n          if ((primitive && properties) ||\r\n               !ObjectPrototypeHasOwnProperty(item, key))\r\n            map[key][i] = '';\r\n          else\r\n            map[key][i] = _inspect(item[key]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const keys = ObjectKeys(map);\r\n    const values = ObjectValues(map);\r\n    if (hasPrimitives) {\r\n      ArrayPrototypePush(keys, valuesKey);\r\n      ArrayPrototypePush(values, valuesKeyArray);\r\n    }\r\n    ArrayPrototypeUnshift(keys, indexKey);\r\n    ArrayPrototypeUnshift(values, indexKeyArray);\r\n\r\n    return final(keys, values);\r\n  },\r\n};\r\n\r\nconst keyKey = 'Key';\r\nconst valuesKey = 'Values';\r\nconst indexKey = '(index)';\r\nconst iterKey = '(iteration index)';\r\n\r\nconst isArray = (v) => ArrayIsArray(v) || isTypedArray(v) || isBuffer(v);\r\n\r\n// TODO: remove string type check once the styleText supports objects\r\n// Return true if all args are type string\r\nconst shouldColorize = (args) => {\r\n  return lazyUtilColors().hasColors && !ArrayPrototypeSome(args, (arg) => typeof arg !== 'string');\r\n};\r\n\r\nfunction noop() {}\r\n\r\nfor (const method of ReflectOwnKeys(consoleMethods))\r\n  Console.prototype[method] = consoleMethods[method];\r\n\r\nConsole.prototype.debug = Console.prototype.log;\r\nConsole.prototype.info = Console.prototype.log;\r\nConsole.prototype.dirxml = Console.prototype.log;\r\nConsole.prototype.groupCollapsed = Console.prototype.group;\r\n\r\nfunction initializeGlobalConsole(globalConsole) {\r\n  globalConsole[kBindStreamsLazy](process);\r\n  const {\r\n    namespace: {\r\n      addSerializeCallback,\r\n      isBuildingSnapshot,\r\n    },\r\n  } = require('internal/v8/startup_snapshot');\r\n\r\n  if (!internalBinding('config').hasInspector || !isBuildingSnapshot()) {\r\n    return;\r\n  }\r\n  const { console: consoleFromVM } = internalBinding('inspector');\r\n  const nodeConsoleKeys = ObjectKeys(Console.prototype);\r\n  const vmConsoleKeys = ObjectKeys(consoleFromVM);\r\n  const originalKeys = new SafeSet(vmConsoleKeys.concat(nodeConsoleKeys));\r\n  const inspectorConsoleKeys = new SafeSet();\r\n  for (const key of ObjectKeys(globalConsole)) {\r\n    if (!originalKeys.has(key)) {\r\n      inspectorConsoleKeys.add(key);\r\n    }\r\n  }\r\n  // During deserialization these should be reinstalled to console by\r\n  // V8 when the inspector client is created.\r\n  addSerializeCallback(() => {\r\n    for (const key of inspectorConsoleKeys) {\r\n      globalConsole[key] = undefined;\r\n    }\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  Console,\r\n  kBindStreamsLazy,\r\n  kBindProperties,\r\n  initializeGlobalConsole,\r\n};\r\n"
  },
  "52": {
    "metadata": {
      "scriptId": "52",
      "url": "node:internal/util/inspector",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 115,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "20d6a316df4ed702004eb8bd3c2cc761b2fdb702ee44efcf907c38c668e3939c",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4044,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/util/inspector"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePushApply,\r\n  ArrayPrototypeSome,\r\n  FunctionPrototypeBind,\r\n  ObjectDefineProperty,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  RegExpPrototypeExec,\r\n  SafeWeakMap,\r\n} = primordials;\r\n\r\nconst { validatePort } = require('internal/validators');\r\nconst permission = require('internal/process/permission');\r\n\r\nconst kMinPort = 1024;\r\nconst kMaxPort = 65535;\r\nconst kInspectArgRegex = /--inspect(?:-brk|-port)?|--debug-port/;\r\nconst kInspectMsgRegex = /Debugger listening on ws:\\/\\/\\[?(.+?)\\]?:(\\d+)\\/|For help, see: https:\\/\\/nodejs\\.org\\/en\\/docs\\/inspector|Debugger attached|Waiting for the debugger to disconnect\\.\\.\\./;\r\n\r\nconst _isUsingInspector = new SafeWeakMap();\r\nfunction isUsingInspector(execArgv = process.execArgv) {\r\n  if (!_isUsingInspector.has(execArgv)) {\r\n    _isUsingInspector.set(execArgv,\r\n                          ArrayPrototypeSome(execArgv, (arg) => RegExpPrototypeExec(kInspectArgRegex, arg) !== null) ||\r\n      RegExpPrototypeExec(kInspectArgRegex, process.env.NODE_OPTIONS) !== null);\r\n  }\r\n  return _isUsingInspector.get(execArgv);\r\n}\r\n\r\nlet debugPortOffset = 1;\r\nfunction getInspectPort(inspectPort) {\r\n  if (typeof inspectPort === 'function') {\r\n    inspectPort = inspectPort();\r\n  } else if (inspectPort == null) {\r\n    inspectPort = process.debugPort + debugPortOffset;\r\n    if (inspectPort > kMaxPort)\r\n      inspectPort = inspectPort - kMaxPort + kMinPort - 1;\r\n    debugPortOffset++;\r\n  }\r\n  validatePort(inspectPort);\r\n\r\n  return inspectPort;\r\n}\r\n\r\nlet session;\r\nfunction sendInspectorCommand(cb, onError) {\r\n  const { hasInspector } = internalBinding('config');\r\n  if (!hasInspector) return onError();\r\n  // Do not preview when the permission model is enabled\r\n  // because this feature require access to the inspector,\r\n  // which is unavailable in this case.\r\n  if (permission.isEnabled()) return onError();\r\n  const inspector = require('inspector');\r\n  if (session === undefined) session = new inspector.Session();\r\n  session.connect();\r\n  try {\r\n    return cb(session);\r\n  } finally {\r\n    session.disconnect();\r\n  }\r\n}\r\n\r\nfunction isInspectorMessage(string) {\r\n  return isUsingInspector() && RegExpPrototypeExec(kInspectMsgRegex, string) !== null;\r\n}\r\n\r\n// Create a special require function for the inspector command line API\r\nfunction installConsoleExtensions(commandLineApi) {\r\n  if (commandLineApi.require) { return; }\r\n  const { tryGetCwd } = require('internal/process/execution');\r\n  const CJSModule = require('internal/modules/cjs/loader').Module;\r\n  const { makeRequireFunction } = require('internal/modules/helpers');\r\n  const consoleAPIModule = new CJSModule('<inspector console>');\r\n  const cwd = tryGetCwd();\r\n  consoleAPIModule.paths = [];\r\n  ArrayPrototypePushApply(consoleAPIModule.paths, CJSModule._nodeModulePaths(cwd));\r\n  ArrayPrototypePushApply(consoleAPIModule.paths, CJSModule.globalPaths);\r\n  commandLineApi.require = makeRequireFunction(consoleAPIModule);\r\n}\r\n\r\n// Wrap a console implemented by Node.js with features from the VM inspector\r\nfunction wrapConsole(consoleFromNode) {\r\n  const { consoleCall, console: consoleFromVM } = internalBinding('inspector');\r\n  for (const key of ObjectKeys(consoleFromVM)) {\r\n    // If global console has the same method as inspector console,\r\n    // then wrap these two methods into one. Native wrapper will preserve\r\n    // the original stack.\r\n    if (ObjectPrototypeHasOwnProperty(consoleFromNode, key)) {\r\n      consoleFromNode[key] = FunctionPrototypeBind(\r\n        consoleCall,\r\n        consoleFromNode,\r\n        consoleFromVM[key],\r\n        consoleFromNode[key],\r\n      );\r\n      ObjectDefineProperty(consoleFromNode[key], 'name', {\r\n        __proto__: null,\r\n        value: key,\r\n      });\r\n    } else {\r\n      // Add additional console APIs from the inspector\r\n      consoleFromNode[key] = consoleFromVM[key];\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  getInspectPort,\r\n  installConsoleExtensions,\r\n  isInspectorMessage,\r\n  isUsingInspector,\r\n  sendInspectorCommand,\r\n  wrapConsole,\r\n};\r\n"
  },
  "53": {
    "metadata": {
      "scriptId": "53",
      "url": "node:internal/event_target",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1169,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "92bc2a06e8776b13e0939940a4c90addf7a8218ac7351990a70e6857ad114489",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 32310,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/event_target"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayFrom,\r\n  ArrayPrototypeReduce,\r\n  Boolean,\r\n  Error,\r\n  FunctionPrototypeCall,\r\n  NumberIsInteger,\r\n  ObjectAssign,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ReflectApply,\r\n  SafeFinalizationRegistry,\r\n  SafeMap,\r\n  SafeWeakMap,\r\n  SafeWeakRef,\r\n  SafeWeakSet,\r\n  String,\r\n  Symbol,\r\n  SymbolFor,\r\n  SymbolToStringTag,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_EVENT_RECURSION,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_THIS,\r\n    ERR_MISSING_ARGS,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  validateAbortSignal,\r\n  validateObject,\r\n  validateString,\r\n  validateInternalField,\r\n  kValidateObjectAllowObjects,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  customInspectSymbol,\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\nconst { inspect } = require('util');\r\nconst webidl = require('internal/webidl');\r\n\r\nconst kIsEventTarget = SymbolFor('nodejs.event_target');\r\nconst kIsNodeEventTarget = Symbol('kIsNodeEventTarget');\r\n\r\nconst EventEmitter = require('events');\r\nconst {\r\n  kMaxEventTargetListeners,\r\n  kMaxEventTargetListenersWarned,\r\n} = EventEmitter;\r\n\r\nconst kEvents = Symbol('kEvents');\r\nconst kIsBeingDispatched = Symbol('kIsBeingDispatched');\r\nconst kStop = Symbol('kStop');\r\nconst kTarget = Symbol('kTarget');\r\nconst kHandlers = Symbol('kHandlers');\r\nconst kWeakHandler = Symbol('kWeak');\r\nconst kResistStopPropagation = Symbol('kResistStopPropagation');\r\n\r\nconst kHybridDispatch = SymbolFor('nodejs.internal.kHybridDispatch');\r\nconst kRemoveWeakListenerHelper = Symbol('nodejs.internal.removeWeakListenerHelper');\r\nconst kCreateEvent = Symbol('kCreateEvent');\r\nconst kNewListener = Symbol('kNewListener');\r\nconst kRemoveListener = Symbol('kRemoveListener');\r\nconst kIsNodeStyleListener = Symbol('kIsNodeStyleListener');\r\nconst kTrustEvent = Symbol('kTrustEvent');\r\n\r\nconst { now } = require('internal/perf/utils');\r\n\r\nconst kType = Symbol('type');\r\nconst kDetail = Symbol('detail');\r\n\r\nconst isTrustedSet = new SafeWeakSet();\r\nconst isTrusted = ObjectGetOwnPropertyDescriptor({\r\n  get isTrusted() {\r\n    return isTrustedSet.has(this);\r\n  },\r\n}, 'isTrusted').get;\r\n\r\nconst isTrustedDescriptor = {\r\n  __proto__: null,\r\n  configurable: false,\r\n  enumerable: true,\r\n  get: isTrusted,\r\n};\r\n\r\nfunction isEvent(value) {\r\n  return typeof value?.[kType] === 'string';\r\n}\r\n\r\nclass Event {\r\n  #cancelable = false;\r\n  #bubbles = false;\r\n  #composed = false;\r\n  #defaultPrevented = false;\r\n  #timestamp = now();\r\n  #propagationStopped = false;\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {{\r\n   *   bubbles?: boolean,\r\n   *   cancelable?: boolean,\r\n   *   composed?: boolean,\r\n   * }} [options]\r\n   */\r\n  constructor(type, options = kEmptyObject) {\r\n    if (arguments.length === 0)\r\n      throw new ERR_MISSING_ARGS('type');\r\n    validateObject(options, 'options');\r\n    const { bubbles, cancelable, composed } = options;\r\n    this.#cancelable = !!cancelable;\r\n    this.#bubbles = !!bubbles;\r\n    this.#composed = !!composed;\r\n\r\n    this[kType] = `${type}`;\r\n    if (options?.[kTrustEvent]) {\r\n      isTrustedSet.add(this);\r\n    }\r\n\r\n    this[kTarget] = null;\r\n    this[kIsBeingDispatched] = false;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {boolean} [bubbles]\r\n   * @param {boolean} [cancelable]\r\n   */\r\n  initEvent(type, bubbles = false, cancelable = false) {\r\n    if (arguments.length === 0)\r\n      throw new ERR_MISSING_ARGS('type');\r\n\r\n    if (this[kIsBeingDispatched]) {\r\n      return;\r\n    }\r\n    this[kType] = `${type}`;\r\n    this.#bubbles = !!bubbles;\r\n    this.#cancelable = !!cancelable;\r\n  }\r\n\r\n  [customInspectSymbol](depth, options) {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    const name = this.constructor.name;\r\n    if (depth < 0)\r\n      return name;\r\n\r\n    const opts = ObjectAssign({}, options, {\r\n      depth: NumberIsInteger(options.depth) ? options.depth - 1 : options.depth,\r\n    });\r\n\r\n    return `${name} ${inspect({\r\n      type: this[kType],\r\n      defaultPrevented: this.#defaultPrevented,\r\n      cancelable: this.#cancelable,\r\n      timeStamp: this.#timestamp,\r\n    }, opts)}`;\r\n  }\r\n\r\n  stopImmediatePropagation() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    // Spec mention \"stopImmediatePropagation should set both \"stop propagation\"\r\n    // and \"stop immediate propagation\" flags\"\r\n    // cf: from https://dom.spec.whatwg.org/#dom-event-stopimmediatepropagation\r\n    this.stopPropagation();\r\n    this[kStop] = true;\r\n  }\r\n\r\n  preventDefault() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    this.#defaultPrevented = true;\r\n  }\r\n\r\n  /**\r\n   * @type {EventTarget}\r\n   */\r\n  get target() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this[kTarget];\r\n  }\r\n\r\n  /**\r\n   * @type {EventTarget}\r\n   */\r\n  get currentTarget() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this[kTarget];\r\n  }\r\n\r\n  /**\r\n   * @type {EventTarget}\r\n   */\r\n  get srcElement() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this[kTarget];\r\n  }\r\n\r\n  /**\r\n   * @type {string}\r\n   */\r\n  get type() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this[kType];\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  get cancelable() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this.#cancelable;\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  get defaultPrevented() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this.#cancelable && this.#defaultPrevented;\r\n  }\r\n\r\n  /**\r\n   * @type {number}\r\n   */\r\n  get timeStamp() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this.#timestamp;\r\n  }\r\n\r\n\r\n  // The following are non-op and unused properties/methods from Web API Event.\r\n  // These are not supported in Node.js and are provided purely for\r\n  // API completeness.\r\n  /**\r\n   * @returns {EventTarget[]}\r\n   */\r\n  composedPath() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this[kIsBeingDispatched] ? [this[kTarget]] : [];\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  get returnValue() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return !this.#cancelable || !this.#defaultPrevented;\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  get bubbles() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this.#bubbles;\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  get composed() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this.#composed;\r\n  }\r\n\r\n  /**\r\n   * @type {number}\r\n   */\r\n  get eventPhase() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this[kIsBeingDispatched] ? Event.AT_TARGET : Event.NONE;\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  get cancelBubble() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this.#propagationStopped;\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  set cancelBubble(value) {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    if (value) {\r\n      this.#propagationStopped = true;\r\n    }\r\n  }\r\n\r\n  stopPropagation() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    this.#propagationStopped = true;\r\n  }\r\n}\r\n\r\nObjectDefineProperties(\r\n  Event.prototype, {\r\n    [SymbolToStringTag]: {\r\n      __proto__: null,\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: true,\r\n      value: 'Event',\r\n    },\r\n    initEvent: kEnumerableProperty,\r\n    stopImmediatePropagation: kEnumerableProperty,\r\n    preventDefault: kEnumerableProperty,\r\n    target: kEnumerableProperty,\r\n    currentTarget: kEnumerableProperty,\r\n    srcElement: kEnumerableProperty,\r\n    type: kEnumerableProperty,\r\n    cancelable: kEnumerableProperty,\r\n    defaultPrevented: kEnumerableProperty,\r\n    timeStamp: kEnumerableProperty,\r\n    composedPath: kEnumerableProperty,\r\n    returnValue: kEnumerableProperty,\r\n    bubbles: kEnumerableProperty,\r\n    composed: kEnumerableProperty,\r\n    eventPhase: kEnumerableProperty,\r\n    cancelBubble: kEnumerableProperty,\r\n    stopPropagation: kEnumerableProperty,\r\n    // Don't conform to the spec with isTrusted. The spec defines it as\r\n    // LegacyUnforgeable but defining it in the constructor has a big\r\n    // performance impact and the property doesn't seem to be useful outside of\r\n    // browsers.\r\n    isTrusted: isTrustedDescriptor,\r\n  });\r\n\r\nconst staticProps = ['NONE', 'CAPTURING_PHASE', 'AT_TARGET', 'BUBBLING_PHASE'];\r\n\r\nObjectDefineProperties(\r\n  Event,\r\n  ArrayPrototypeReduce(staticProps, (result, staticProp, index = 0) => {\r\n    result[staticProp] = {\r\n      __proto__: null,\r\n      writable: false,\r\n      configurable: false,\r\n      enumerable: true,\r\n      value: index,\r\n    };\r\n    return result;\r\n  }, {}),\r\n);\r\n\r\nfunction isCustomEvent(value) {\r\n  return isEvent(value) && (value?.[kDetail] !== undefined);\r\n}\r\n\r\nclass CustomEvent extends Event {\r\n  /**\r\n   * @constructor\r\n   * @param {string} type\r\n   * @param {{\r\n   *   bubbles?: boolean,\r\n   *   cancelable?: boolean,\r\n   *   composed?: boolean,\r\n   *   detail?: any,\r\n   * }} [options]\r\n   */\r\n  constructor(type, options = kEmptyObject) {\r\n    if (arguments.length === 0)\r\n      throw new ERR_MISSING_ARGS('type');\r\n    super(type, options);\r\n    this[kDetail] = options?.detail ?? null;\r\n  }\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  get detail() {\r\n    if (!isCustomEvent(this))\r\n      throw new ERR_INVALID_THIS('CustomEvent');\r\n    return this[kDetail];\r\n  }\r\n}\r\n\r\nObjectDefineProperties(CustomEvent.prototype, {\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    writable: false,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: 'CustomEvent',\r\n  },\r\n  detail: kEnumerableProperty,\r\n});\r\n\r\n// Weak listener cleanup\r\n// This has to be lazy for snapshots to work\r\nlet weakListenersState = null;\r\n// The resource needs to retain the callback so that it doesn't\r\n// get garbage collected now that it's weak.\r\nlet objectToWeakListenerMap = null;\r\nfunction weakListeners() {\r\n  weakListenersState ??= new SafeFinalizationRegistry(\r\n    ({ eventTarget, listener, eventType }) => eventTarget.deref()?.[kRemoveWeakListenerHelper](eventType, listener),\r\n  );\r\n  objectToWeakListenerMap ??= new SafeWeakMap();\r\n  return { registry: weakListenersState, map: objectToWeakListenerMap };\r\n}\r\n\r\nconst kFlagOnce = 1 << 0;\r\nconst kFlagCapture = 1 << 1;\r\nconst kFlagPassive = 1 << 2;\r\nconst kFlagNodeStyle = 1 << 3;\r\nconst kFlagWeak = 1 << 4;\r\nconst kFlagRemoved = 1 << 5;\r\nconst kFlagResistStopPropagation = 1 << 6;\r\n\r\n// The listeners for an EventTarget are maintained as a linked list.\r\n// Unfortunately, the way EventTarget is defined, listeners are accounted\r\n// using the tuple [handler,capture], and even if we don't actually make\r\n// use of capture or bubbling, in order to be spec compliant we have to\r\n// take on the additional complexity of supporting it. Fortunately, using\r\n// the linked list makes dispatching faster, even if adding/removing is\r\n// slower.\r\nclass Listener {\r\n  constructor(eventTarget, eventType, previous, listener, once, capture, passive,\r\n              isNodeStyleListener, weak, resistStopPropagation) {\r\n    this.next = undefined;\r\n    if (previous !== undefined)\r\n      previous.next = this;\r\n    this.previous = previous;\r\n    this.listener = listener;\r\n\r\n    let flags = 0b0;\r\n    if (once)\r\n      flags |= kFlagOnce;\r\n    if (capture)\r\n      flags |= kFlagCapture;\r\n    if (passive)\r\n      flags |= kFlagPassive;\r\n    if (isNodeStyleListener)\r\n      flags |= kFlagNodeStyle;\r\n    if (weak)\r\n      flags |= kFlagWeak;\r\n    if (resistStopPropagation)\r\n      flags |= kFlagResistStopPropagation;\r\n    this.flags = flags;\r\n\r\n    this.removed = false;\r\n\r\n    if (this.weak) {\r\n      this.callback = new SafeWeakRef(listener);\r\n      weakListeners().registry.register(listener, {\r\n        __proto__: null,\r\n        // Weak ref so the listener won't hold the eventTarget alive\r\n        eventTarget: new SafeWeakRef(eventTarget),\r\n        listener: this,\r\n        eventType,\r\n      }, this);\r\n      // Make the retainer retain the listener in a WeakMap\r\n      weakListeners().map.set(weak, listener);\r\n      this.listener = this.callback;\r\n    } else if (typeof listener === 'function') {\r\n      this.callback = listener;\r\n      this.listener = listener;\r\n    } else {\r\n      this.callback = async (...args) => {\r\n        if (listener.handleEvent)\r\n          await ReflectApply(listener.handleEvent, listener, args);\r\n      };\r\n      this.listener = listener;\r\n    }\r\n  }\r\n\r\n  get once() {\r\n    return Boolean(this.flags & kFlagOnce);\r\n  }\r\n  get capture() {\r\n    return Boolean(this.flags & kFlagCapture);\r\n  }\r\n  get passive() {\r\n    return Boolean(this.flags & kFlagPassive);\r\n  }\r\n  get isNodeStyleListener() {\r\n    return Boolean(this.flags & kFlagNodeStyle);\r\n  }\r\n  get weak() {\r\n    return Boolean(this.flags & kFlagWeak);\r\n  }\r\n  get resistStopPropagation() {\r\n    return Boolean(this.flags & kFlagResistStopPropagation);\r\n  }\r\n  get removed() {\r\n    return Boolean(this.flags & kFlagRemoved);\r\n  }\r\n  set removed(value) {\r\n    if (value)\r\n      this.flags |= kFlagRemoved;\r\n    else\r\n      this.flags &= ~kFlagRemoved;\r\n  }\r\n\r\n  same(listener, capture) {\r\n    const myListener = this.weak ? this.listener.deref() : this.listener;\r\n    return myListener === listener && this.capture === capture;\r\n  }\r\n\r\n  remove() {\r\n    if (this.previous !== undefined)\r\n      this.previous.next = this.next;\r\n    if (this.next !== undefined)\r\n      this.next.previous = this.previous;\r\n    this.removed = true;\r\n    if (this.weak)\r\n      weakListeners().registry.unregister(this);\r\n  }\r\n}\r\n\r\nfunction initEventTarget(self) {\r\n  self[kEvents] = new SafeMap();\r\n  self[kMaxEventTargetListeners] = EventEmitter.defaultMaxListeners;\r\n  self[kMaxEventTargetListenersWarned] = false;\r\n  self[kHandlers] = new SafeMap();\r\n}\r\n\r\nclass EventTarget {\r\n  // Used in checking whether an object is an EventTarget. This is a well-known\r\n  // symbol as EventTarget may be used cross-realm.\r\n  // Ref: https://github.com/nodejs/node/pull/33661\r\n  static [kIsEventTarget] = true;\r\n\r\n  constructor() {\r\n    initEventTarget(this);\r\n  }\r\n\r\n  [kNewListener](size, type, listener, once, capture, passive, weak) {\r\n    if (this[kMaxEventTargetListeners] > 0 &&\r\n        size > this[kMaxEventTargetListeners] &&\r\n        !this[kMaxEventTargetListenersWarned]) {\r\n      this[kMaxEventTargetListenersWarned] = true;\r\n      // No error code for this since it is a Warning\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      const w = new Error('Possible EventTarget memory leak detected. ' +\r\n                          `${size} ${type} listeners ` +\r\n                          `added to ${inspect(this, { depth: -1 })}. MaxListeners is ${this[kMaxEventTargetListeners]}. Use ` +\r\n                          'events.setMaxListeners() to increase limit');\r\n      w.name = 'MaxListenersExceededWarning';\r\n      w.target = this;\r\n      w.type = type;\r\n      w.count = size;\r\n      process.emitWarning(w);\r\n    }\r\n  }\r\n  [kRemoveListener](size, type, listener, capture) {}\r\n\r\n  /**\r\n   * @callback EventTargetCallback\r\n   * @param {Event} event\r\n   */\r\n\r\n  /**\r\n   * @typedef {{ handleEvent: EventTargetCallback }} EventListener\r\n   */\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @param {{\r\n   *   capture?: boolean,\r\n   *   once?: boolean,\r\n   *   passive?: boolean,\r\n   *   signal?: AbortSignal\r\n   * }} [options]\r\n   */\r\n  addEventListener(type, listener, options = kEmptyObject) {\r\n    if (!isEventTarget(this))\r\n      throw new ERR_INVALID_THIS('EventTarget');\r\n    if (arguments.length < 2)\r\n      throw new ERR_MISSING_ARGS('type', 'listener');\r\n\r\n    // We validateOptions before the validateListener check because the spec\r\n    // requires us to hit getters.\r\n    const {\r\n      once,\r\n      capture,\r\n      passive,\r\n      signal,\r\n      isNodeStyleListener,\r\n      weak,\r\n      resistStopPropagation,\r\n    } = validateEventListenerOptions(options);\r\n\r\n    validateAbortSignal(signal, 'options.signal');\r\n\r\n    if (!validateEventListener(listener)) {\r\n      // The DOM silently allows passing undefined as a second argument\r\n      // No error code for this since it is a Warning\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      const w = new Error(`addEventListener called with ${listener}` +\r\n                          ' which has no effect.');\r\n      w.name = 'AddEventListenerArgumentTypeWarning';\r\n      w.target = this;\r\n      w.type = type;\r\n      process.emitWarning(w);\r\n      return;\r\n    }\r\n    type = webidl.converters.DOMString(type);\r\n\r\n    if (signal) {\r\n      if (signal.aborted) {\r\n        return;\r\n      }\r\n      // TODO(benjamingr) make this weak somehow? ideally the signal would\r\n      // not prevent the event target from GC.\r\n      signal.addEventListener('abort', () => {\r\n        this.removeEventListener(type, listener, options);\r\n      }, { __proto__: null, once: true, [kWeakHandler]: this, [kResistStopPropagation]: true });\r\n    }\r\n\r\n    let root = this[kEvents].get(type);\r\n\r\n    if (root === undefined) {\r\n      root = { size: 1, next: undefined, resistStopPropagation: Boolean(resistStopPropagation) };\r\n      // This is the first handler in our linked list.\r\n      new Listener(this, type, root, listener, once, capture, passive,\r\n                   isNodeStyleListener, weak, resistStopPropagation);\r\n      this[kNewListener](\r\n        root.size,\r\n        type,\r\n        listener,\r\n        once,\r\n        capture,\r\n        passive,\r\n        weak);\r\n      this[kEvents].set(type, root);\r\n      return;\r\n    }\r\n\r\n    let handler = root.next;\r\n    let previous = root;\r\n\r\n    // We have to walk the linked list to see if we have a match\r\n    while (handler !== undefined && !handler.same(listener, capture)) {\r\n      previous = handler;\r\n      handler = handler.next;\r\n    }\r\n\r\n    if (handler !== undefined) { // Duplicate! Ignore\r\n      return;\r\n    }\r\n\r\n    new Listener(this, type, previous, listener, once, capture, passive,\r\n                 isNodeStyleListener, weak, resistStopPropagation);\r\n    root.size++;\r\n    root.resistStopPropagation ||= Boolean(resistStopPropagation);\r\n    this[kNewListener](root.size, type, listener, once, capture, passive, weak);\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @param {{\r\n   *   capture?: boolean,\r\n   * }} [options]\r\n   */\r\n  removeEventListener(type, listener, options = kEmptyObject) {\r\n    if (!isEventTarget(this))\r\n      throw new ERR_INVALID_THIS('EventTarget');\r\n    if (arguments.length < 2)\r\n      throw new ERR_MISSING_ARGS('type', 'listener');\r\n    if (!validateEventListener(listener))\r\n      return;\r\n\r\n    type = webidl.converters.DOMString(type);\r\n    const capture = options?.capture === true;\r\n\r\n    const root = this[kEvents].get(type);\r\n    if (root === undefined || root.next === undefined)\r\n      return;\r\n\r\n    let handler = root.next;\r\n    while (handler !== undefined) {\r\n      if (handler.same(listener, capture)) {\r\n        handler.remove();\r\n        root.size--;\r\n        if (root.size === 0)\r\n          this[kEvents].delete(type);\r\n        this[kRemoveListener](root.size, type, listener, capture);\r\n        break;\r\n      }\r\n      handler = handler.next;\r\n    }\r\n  }\r\n\r\n  [kRemoveWeakListenerHelper](type, listener) {\r\n    const root = this[kEvents].get(type);\r\n    if (root === undefined || root.next === undefined)\r\n      return;\r\n\r\n    const capture = listener.capture === true;\r\n\r\n    let handler = root.next;\r\n    while (handler !== undefined) {\r\n      if (handler === listener) {\r\n        handler.remove();\r\n        root.size--;\r\n        if (root.size === 0)\r\n          this[kEvents].delete(type);\r\n        // Undefined is passed as the listener as the listener was GCed\r\n        this[kRemoveListener](root.size, type, undefined, capture);\r\n        break;\r\n      }\r\n      handler = handler.next;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Event} event\r\n   */\r\n  dispatchEvent(event) {\r\n    if (!isEventTarget(this))\r\n      throw new ERR_INVALID_THIS('EventTarget');\r\n    if (arguments.length < 1)\r\n      throw new ERR_MISSING_ARGS('event');\r\n\r\n    if (!(event instanceof Event))\r\n      throw new ERR_INVALID_ARG_TYPE('event', 'Event', event);\r\n\r\n    if (event[kIsBeingDispatched])\r\n      throw new ERR_EVENT_RECURSION(event.type);\r\n\r\n    this[kHybridDispatch](event, event.type, event);\r\n\r\n    return event.defaultPrevented !== true;\r\n  }\r\n\r\n  [kHybridDispatch](nodeValue, type, event) {\r\n    const createEvent = () => {\r\n      if (event === undefined) {\r\n        event = this[kCreateEvent](nodeValue, type);\r\n        event[kTarget] = this;\r\n        event[kIsBeingDispatched] = true;\r\n      }\r\n      return event;\r\n    };\r\n    if (event !== undefined) {\r\n      event[kTarget] = this;\r\n      event[kIsBeingDispatched] = true;\r\n    }\r\n\r\n    const root = this[kEvents].get(type);\r\n    if (root === undefined || root.next === undefined) {\r\n      if (event !== undefined)\r\n        event[kIsBeingDispatched] = false;\r\n      return true;\r\n    }\r\n\r\n    let handler = root.next;\r\n    let next;\r\n\r\n    const iterationCondition = () => {\r\n      if (handler === undefined) {\r\n        return false;\r\n      }\r\n      return root.resistStopPropagation || handler.passive || event?.[kStop] !== true;\r\n    };\r\n    while (iterationCondition()) {\r\n      // Cache the next item in case this iteration removes the current one\r\n      next = handler.next;\r\n\r\n      if (handler.removed || (event?.[kStop] === true && !handler.resistStopPropagation)) {\r\n        // Deal with the case an event is removed while event handlers are\r\n        // Being processed (removeEventListener called from a listener)\r\n        // And the case of event.stopImmediatePropagation() being called\r\n        // For events not flagged as resistStopPropagation\r\n        handler = next;\r\n        continue;\r\n      }\r\n      if (handler.once) {\r\n        handler.remove();\r\n        root.size--;\r\n        const { listener, capture } = handler;\r\n        this[kRemoveListener](root.size, type, listener, capture);\r\n      }\r\n\r\n      try {\r\n        let arg;\r\n        if (handler.isNodeStyleListener) {\r\n          arg = nodeValue;\r\n        } else {\r\n          arg = createEvent();\r\n        }\r\n        const callback = handler.weak ?\r\n          handler.callback.deref() : handler.callback;\r\n        let result;\r\n        if (callback) {\r\n          result = FunctionPrototypeCall(callback, this, arg);\r\n          if (!handler.isNodeStyleListener) {\r\n            arg[kIsBeingDispatched] = false;\r\n          }\r\n        }\r\n        if (result !== undefined && result !== null)\r\n          addCatch(result);\r\n      } catch (err) {\r\n        emitUncaughtException(err);\r\n      }\r\n\r\n      handler = next;\r\n    }\r\n\r\n    if (event !== undefined)\r\n      event[kIsBeingDispatched] = false;\r\n  }\r\n\r\n  [kCreateEvent](nodeValue, type) {\r\n    return new CustomEvent(type, { detail: nodeValue });\r\n  }\r\n  [customInspectSymbol](depth, options) {\r\n    if (!isEventTarget(this))\r\n      throw new ERR_INVALID_THIS('EventTarget');\r\n    const name = this.constructor.name;\r\n    if (depth < 0)\r\n      return name;\r\n\r\n    const opts = ObjectAssign({}, options, {\r\n      depth: NumberIsInteger(options.depth) ? options.depth - 1 : options.depth,\r\n    });\r\n\r\n    return `${name} ${inspect({}, opts)}`;\r\n  }\r\n}\r\n\r\nObjectDefineProperties(EventTarget.prototype, {\r\n  addEventListener: kEnumerableProperty,\r\n  removeEventListener: kEnumerableProperty,\r\n  dispatchEvent: kEnumerableProperty,\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    writable: false,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: 'EventTarget',\r\n  },\r\n});\r\n\r\nfunction initNodeEventTarget(self) {\r\n  initEventTarget(self);\r\n}\r\n\r\nclass NodeEventTarget extends EventTarget {\r\n  static [kIsNodeEventTarget] = true;\r\n  static defaultMaxListeners = 10;\r\n\r\n  constructor() {\r\n    super();\r\n    initNodeEventTarget(this);\r\n  }\r\n\r\n  /**\r\n   * @param {number} n\r\n   */\r\n  setMaxListeners(n) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    EventEmitter.setMaxListeners(n, this);\r\n  }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  getMaxListeners() {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    return this[kMaxEventTargetListeners];\r\n  }\r\n\r\n  /**\r\n   * @returns {string[]}\r\n   */\r\n  eventNames() {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    return ArrayFrom(this[kEvents].keys());\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @returns {number}\r\n   */\r\n  listenerCount(type) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    const root = this[kEvents].get(String(type));\r\n    return root !== undefined ? root.size : 0;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @param {{\r\n   *   capture?: boolean,\r\n   * }} [options]\r\n   * @returns {NodeEventTarget}\r\n   */\r\n  off(type, listener, options) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    this.removeEventListener(type, listener, options);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @param {{\r\n   *   capture?: boolean,\r\n   * }} [options]\r\n   * @returns {NodeEventTarget}\r\n   */\r\n  removeListener(type, listener, options) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    this.removeEventListener(type, listener, options);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @returns {NodeEventTarget}\r\n   */\r\n  on(type, listener) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    this.addEventListener(type, listener, { [kIsNodeStyleListener]: true });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @returns {NodeEventTarget}\r\n   */\r\n  addListener(type, listener) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    this.addEventListener(type, listener, { [kIsNodeStyleListener]: true });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {any} arg\r\n   * @returns {boolean}\r\n   */\r\n  emit(type, arg) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    validateString(type, 'type');\r\n    const hadListeners = this.listenerCount(type) > 0;\r\n    this[kHybridDispatch](arg, type);\r\n    return hadListeners;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @returns {NodeEventTarget}\r\n   */\r\n  once(type, listener) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    this.addEventListener(type, listener,\r\n                          { once: true, [kIsNodeStyleListener]: true });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} [type]\r\n   * @returns {NodeEventTarget}\r\n   */\r\n  removeAllListeners(type) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    if (type !== undefined) {\r\n      this[kEvents].delete(String(type));\r\n    } else {\r\n      this[kEvents].clear();\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nObjectDefineProperties(NodeEventTarget.prototype, {\r\n  setMaxListeners: kEnumerableProperty,\r\n  getMaxListeners: kEnumerableProperty,\r\n  eventNames: kEnumerableProperty,\r\n  listenerCount: kEnumerableProperty,\r\n  off: kEnumerableProperty,\r\n  removeListener: kEnumerableProperty,\r\n  on: kEnumerableProperty,\r\n  addListener: kEnumerableProperty,\r\n  once: kEnumerableProperty,\r\n  emit: kEnumerableProperty,\r\n  removeAllListeners: kEnumerableProperty,\r\n});\r\n\r\n// EventTarget API\r\n\r\nfunction validateEventListener(listener) {\r\n  if (typeof listener === 'function' ||\r\n      typeof listener?.handleEvent === 'function') {\r\n    return true;\r\n  }\r\n\r\n  if (listener == null)\r\n    return false;\r\n\r\n  if (typeof listener === 'object') {\r\n    // Require `handleEvent` lazily.\r\n    return true;\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE('listener', 'EventListener', listener);\r\n}\r\n\r\nfunction validateEventListenerOptions(options) {\r\n  if (typeof options === 'boolean')\r\n    return { capture: options };\r\n\r\n  if (options === null)\r\n    return kEmptyObject;\r\n  validateObject(options, 'options', kValidateObjectAllowObjects);\r\n  return {\r\n    once: Boolean(options.once),\r\n    capture: Boolean(options.capture),\r\n    passive: Boolean(options.passive),\r\n    signal: options.signal,\r\n    weak: options[kWeakHandler],\r\n    resistStopPropagation: options[kResistStopPropagation] ?? false,\r\n    isNodeStyleListener: Boolean(options[kIsNodeStyleListener]),\r\n  };\r\n}\r\n\r\n// Test whether the argument is an event object. This is far from a fool-proof\r\n// test, for example this input will result in a false positive:\r\n// > isEventTarget({ constructor: EventTarget })\r\n// It stands in its current implementation as a compromise.\r\n// Ref: https://github.com/nodejs/node/pull/33661\r\nfunction isEventTarget(obj) {\r\n  return obj?.constructor?.[kIsEventTarget];\r\n}\r\n\r\nfunction isNodeEventTarget(obj) {\r\n  return obj?.constructor?.[kIsNodeEventTarget];\r\n}\r\n\r\nfunction addCatch(promise) {\r\n  const then = promise.then;\r\n  if (typeof then === 'function') {\r\n    FunctionPrototypeCall(then, promise, undefined, function(err) {\r\n      // The callback is called with nextTick to avoid a follow-up\r\n      // rejection from this promise.\r\n      emitUncaughtException(err);\r\n    });\r\n  }\r\n}\r\n\r\nfunction emitUncaughtException(err) {\r\n  process.nextTick(() => { throw err; });\r\n}\r\n\r\nfunction makeEventHandler(handler) {\r\n  // Event handlers are dispatched in the order they were first set\r\n  // See https://github.com/nodejs/node/pull/35949#issuecomment-722496598\r\n  function eventHandler(...args) {\r\n    if (typeof eventHandler.handler !== 'function') {\r\n      return;\r\n    }\r\n    return ReflectApply(eventHandler.handler, this, args);\r\n  }\r\n  eventHandler.handler = handler;\r\n  return eventHandler;\r\n}\r\n\r\nfunction defineEventHandler(emitter, name, event = name) {\r\n  // 8.1.5.1 Event handlers - basically `on[eventName]` attributes\r\n  const propName = `on${name}`;\r\n  function get() {\r\n    validateInternalField(this, kHandlers, 'EventTarget');\r\n    return this[kHandlers]?.get(event)?.handler ?? null;\r\n  }\r\n  ObjectDefineProperty(get, 'name', {\r\n    __proto__: null,\r\n    value: `get ${propName}`,\r\n  });\r\n\r\n  function set(value) {\r\n    validateInternalField(this, kHandlers, 'EventTarget');\r\n    let wrappedHandler = this[kHandlers]?.get(event);\r\n    if (wrappedHandler) {\r\n      if (typeof wrappedHandler.handler === 'function') {\r\n        this[kEvents].get(event).size--;\r\n        const size = this[kEvents].get(event).size;\r\n        this[kRemoveListener](size, event, wrappedHandler.handler, false);\r\n      }\r\n      wrappedHandler.handler = value;\r\n      if (typeof wrappedHandler.handler === 'function') {\r\n        this[kEvents].get(event).size++;\r\n        const size = this[kEvents].get(event).size;\r\n        this[kNewListener](size, event, value, false, false, false, false);\r\n      }\r\n    } else {\r\n      wrappedHandler = makeEventHandler(value);\r\n      this.addEventListener(event, wrappedHandler);\r\n    }\r\n    this[kHandlers].set(event, wrappedHandler);\r\n  }\r\n  ObjectDefineProperty(set, 'name', {\r\n    __proto__: null,\r\n    value: `set ${propName}`,\r\n  });\r\n\r\n  ObjectDefineProperty(emitter, propName, {\r\n    __proto__: null,\r\n    get,\r\n    set,\r\n    configurable: true,\r\n    enumerable: true,\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  Event,\r\n  CustomEvent,\r\n  EventTarget,\r\n  NodeEventTarget,\r\n  defineEventHandler,\r\n  initEventTarget,\r\n  initNodeEventTarget,\r\n  kCreateEvent,\r\n  kNewListener,\r\n  kTrustEvent,\r\n  kRemoveListener,\r\n  kEvents,\r\n  kWeakHandler,\r\n  kResistStopPropagation,\r\n  isEventTarget,\r\n};\r\n"
  },
  "54": {
    "metadata": {
      "scriptId": "54",
      "url": "node:internal/webidl",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 218,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "3f94e44cc1730b9cc5f58fd7a9145349f7fa75d52f1d5e8809560e8b2c4b8cfe",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 5829,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/webidl"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  MathAbs,\r\n  MathMax,\r\n  MathMin,\r\n  MathPow,\r\n  MathSign,\r\n  MathTrunc,\r\n  NumberIsNaN,\r\n  NumberMAX_SAFE_INTEGER,\r\n  NumberMIN_SAFE_INTEGER,\r\n  ObjectAssign,\r\n  SafeSet,\r\n  String,\r\n  TypeError,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\nconst { kEmptyObject } = require('internal/util');\r\n\r\nconst converters = { __proto__: null };\r\n\r\n// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart\r\nconst integerPart = MathTrunc;\r\n\r\n/* eslint-disable node-core/non-ascii-character */\r\n// Round x to the nearest integer, choosing the even integer if it lies halfway\r\n// between two, and choosing +0 rather than -0.\r\n// This is different from Math.round, which rounds to the next integer in the\r\n// direction of +∞ when the fraction portion is exactly 0.5.\r\n/* eslint-enable node-core/non-ascii-character */\r\nfunction evenRound(x) {\r\n  // Convert -0 to +0.\r\n  const i = integerPart(x) + 0;\r\n  const reminder = MathAbs(x % 1);\r\n  const sign = MathSign(i);\r\n  if (reminder === 0.5) {\r\n    return i % 2 === 0 ? i : i + sign;\r\n  }\r\n  const r = reminder < 0.5 ? i : i + sign;\r\n  // Convert -0 to +0.\r\n  if (r === 0) {\r\n    return 0;\r\n  }\r\n  return r;\r\n}\r\n\r\nfunction pow2(exponent) {\r\n  // << operates on 32 bit signed integers.\r\n  if (exponent < 31) {\r\n    return 1 << exponent;\r\n  }\r\n  if (exponent === 31) {\r\n    return 0x8000_0000;\r\n  }\r\n  if (exponent === 32) {\r\n    return 0x1_0000_0000;\r\n  }\r\n  return MathPow(2, exponent);\r\n}\r\n\r\n// https://tc39.es/ecma262/#eqn-modulo\r\n// The notation “x modulo y” computes a value k of the same sign as y.\r\nfunction modulo(x, y) {\r\n  const r = x % y;\r\n  // Convert -0 to +0.\r\n  if (r === 0) {\r\n    return 0;\r\n  }\r\n  return r;\r\n}\r\n\r\n// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint\r\nfunction convertToInt(name, value, bitLength, options = kEmptyObject) {\r\n  const { signed = false, enforceRange = false, clamp = false } = options;\r\n\r\n  let upperBound;\r\n  let lowerBound;\r\n  // 1. If bitLength is 64, then:\r\n  if (bitLength === 64) {\r\n    // 1.1. Let upperBound be 2^53 − 1.\r\n    upperBound = NumberMAX_SAFE_INTEGER;\r\n    // 1.2. If signedness is \"unsigned\", then let lowerBound be 0.\r\n    // 1.3. Otherwise let lowerBound be −2^53 + 1.\r\n    lowerBound = !signed ? 0 : NumberMIN_SAFE_INTEGER;\r\n  } else if (!signed) {\r\n    // 2. Otherwise, if signedness is \"unsigned\", then:\r\n    // 2.1. Let lowerBound be 0.\r\n    // 2.2. Let upperBound be 2^bitLength − 1.\r\n    lowerBound = 0;\r\n    upperBound = pow2(bitLength) - 1;\r\n  } else {\r\n    // 3. Otherwise:\r\n    // 3.1. Let lowerBound be -2^(bitLength − 1).\r\n    // 3.2. Let upperBound be 2^(bitLength − 1) − 1.\r\n    lowerBound = -pow2(bitLength - 1);\r\n    upperBound = pow2(bitLength - 1) - 1;\r\n  }\r\n\r\n  // 4. Let x be ? ToNumber(V).\r\n  let x = +value;\r\n  // 5. If x is −0, then set x to +0.\r\n  if (x === 0) {\r\n    x = 0;\r\n  }\r\n\r\n  // 6. If the conversion is to an IDL type associated with the [EnforceRange]\r\n  // extended attribute, then:\r\n  if (enforceRange) {\r\n    // 6.1. If x is NaN, +∞, or −∞, then throw a TypeError.\r\n    if (NumberIsNaN(x) || x === Infinity || x === -Infinity) {\r\n      throw new ERR_INVALID_ARG_VALUE(name, x);\r\n    }\r\n    // 6.2. Set x to IntegerPart(x).\r\n    x = integerPart(x);\r\n\r\n    // 6.3. If x < lowerBound or x > upperBound, then throw a TypeError.\r\n    if (x < lowerBound || x > upperBound) {\r\n      throw new ERR_INVALID_ARG_VALUE(name, x);\r\n    }\r\n\r\n    // 6.4. Return x.\r\n    return x;\r\n  }\r\n\r\n  // 7. If x is not NaN and the conversion is to an IDL type associated with\r\n  // the [Clamp] extended attribute, then:\r\n  if (clamp && !NumberIsNaN(x)) {\r\n    // 7.1. Set x to min(max(x, lowerBound), upperBound).\r\n    x = MathMin(MathMax(x, lowerBound), upperBound);\r\n\r\n    // 7.2. Round x to the nearest integer, choosing the even integer if it\r\n    // lies halfway between two, and choosing +0 rather than −0.\r\n    x = evenRound(x);\r\n\r\n    // 7.3. Return x.\r\n    return x;\r\n  }\r\n\r\n  // 8. If x is NaN, +0, +∞, or −∞, then return +0.\r\n  if (NumberIsNaN(x) || x === 0 || x === Infinity || x === -Infinity) {\r\n    return 0;\r\n  }\r\n\r\n  // 9. Set x to IntegerPart(x).\r\n  x = integerPart(x);\r\n\r\n  // 10. Set x to x modulo 2^bitLength.\r\n  x = modulo(x, pow2(bitLength));\r\n\r\n  // 11. If signedness is \"signed\" and x ≥ 2^(bitLength − 1), then return x −\r\n  // 2^bitLength.\r\n  if (signed && x >= pow2(bitLength - 1)) {\r\n    return x - pow2(bitLength);\r\n  }\r\n\r\n  // 12. Otherwise, return x.\r\n  return x;\r\n}\r\n\r\n/**\r\n * @see https://webidl.spec.whatwg.org/#es-DOMString\r\n * @param {any} V\r\n * @returns {string}\r\n */\r\nconverters.DOMString = function DOMString(V) {\r\n  if (typeof V === 'symbol') {\r\n    throw new ERR_INVALID_ARG_VALUE('value', V);\r\n  }\r\n\r\n  return String(V);\r\n};\r\n\r\nfunction codedTypeError(message, errorProperties = kEmptyObject) {\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const err = new TypeError(message);\r\n  ObjectAssign(err, errorProperties);\r\n  return err;\r\n}\r\n\r\nfunction makeException(message, opts = kEmptyObject) {\r\n  const prefix = opts.prefix ? opts.prefix + ': ' : '';\r\n  const context = opts.context?.length === 0 ?\r\n    '' : (opts.context ?? 'Value') + ' ';\r\n  return codedTypeError(\r\n    `${prefix}${context}${message}`,\r\n    { code: opts.code || 'ERR_INVALID_ARG_TYPE' },\r\n  );\r\n}\r\n\r\nfunction createEnumConverter(name, values) {\r\n  const E = new SafeSet(values);\r\n\r\n  return function(V, opts = kEmptyObject) {\r\n    const S = String(V);\r\n\r\n    if (!E.has(S)) {\r\n      throw makeException(\r\n        `value '${S}' is not a valid enum value of type ${name}.`,\r\n        { __proto__: null, ...opts, code: 'ERR_INVALID_ARG_VALUE' });\r\n    }\r\n\r\n    return S;\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  converters,\r\n  convertToInt,\r\n  createEnumConverter,\r\n  evenRound,\r\n  makeException,\r\n};\r\n"
  },
  "55": {
    "metadata": {
      "scriptId": "55",
      "url": "node:internal/perf/utils",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 34,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "6571844d3738cd47bc364fddfce8e055d1eb9c61426c1dd0c1a864acc9463a2e",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 844,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/perf/utils"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  constants: {\r\n    NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN,\r\n    NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN_TIMESTAMP,\r\n  },\r\n  milestones,\r\n  now,\r\n} = internalBinding('performance');\r\n\r\nfunction getTimeOrigin() {\r\n  // Do not cache this to prevent it from being serialized into the\r\n  // snapshot.\r\n  return milestones[NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN] / 1e6;\r\n}\r\n\r\n// Returns the milestone relative to the process start time in milliseconds.\r\nfunction getMilestoneTimestamp(milestoneIdx) {\r\n  const ns = milestones[milestoneIdx];\r\n  if (ns === -1)\r\n    return ns;\r\n  return ns / 1e6 - getTimeOrigin();\r\n}\r\n\r\nfunction getTimeOriginTimestamp() {\r\n  return milestones[NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN_TIMESTAMP] / 1e3;\r\n}\r\n\r\nmodule.exports = {\r\n  now,\r\n  getMilestoneTimestamp,\r\n  getTimeOriginTimestamp,\r\n};\r\n"
  },
  "56": {
    "metadata": {
      "scriptId": "56",
      "url": "node:internal/bootstrap/web/exposed-window-or-worker",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 92,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "3dac1db713ef173cf784aaa9c5c93627a0ec3ef51963b9bfae61a535b4431f89",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3686,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/bootstrap/web/exposed-window-or-worker"
    },
    "source": "'use strict';\r\n\r\n/**\r\n * This file exposes web interfaces that is defined with the WebIDL\r\n * Exposed=Window + Exposed=(Window,Worker) extended attribute or exposed in\r\n * WindowOrWorkerGlobalScope mixin.\r\n * See more details at https://webidl.spec.whatwg.org/#Exposed and\r\n * https://html.spec.whatwg.org/multipage/webappapis.html#windoworworkerglobalscope.\r\n */\r\n\r\nconst {\r\n  ObjectDefineProperty,\r\n  globalThis,\r\n} = primordials;\r\n\r\nconst {\r\n  defineOperation,\r\n  defineLazyProperties,\r\n  defineReplaceableLazyAttribute,\r\n  exposeLazyInterfaces,\r\n} = require('internal/util');\r\n\r\n// https://html.spec.whatwg.org/multipage/webappapis.html#windoworworkerglobalscope\r\nconst timers = require('timers');\r\ndefineOperation(globalThis, 'clearInterval', timers.clearInterval);\r\ndefineOperation(globalThis, 'clearTimeout', timers.clearTimeout);\r\ndefineOperation(globalThis, 'setInterval', timers.setInterval);\r\ndefineOperation(globalThis, 'setTimeout', timers.setTimeout);\r\n\r\nconst {\r\n  queueMicrotask,\r\n} = require('internal/process/task_queues');\r\ndefineOperation(globalThis, 'queueMicrotask', queueMicrotask);\r\n\r\nconst { structuredClone } = internalBinding('messaging');\r\ndefineOperation(globalThis, 'structuredClone', structuredClone);\r\ndefineLazyProperties(globalThis, 'buffer', ['atob', 'btoa']);\r\n\r\n// https://html.spec.whatwg.org/multipage/web-messaging.html#broadcasting-to-other-browsing-contexts\r\nexposeLazyInterfaces(globalThis, 'internal/worker/io', ['BroadcastChannel']);\r\nexposeLazyInterfaces(globalThis, 'internal/worker/io', [\r\n  'MessageChannel', 'MessagePort',\r\n]);\r\n// https://www.w3.org/TR/FileAPI/#dfn-Blob\r\nexposeLazyInterfaces(globalThis, 'internal/blob', ['Blob']);\r\n// https://www.w3.org/TR/FileAPI/#dfn-file\r\nexposeLazyInterfaces(globalThis, 'internal/file', ['File']);\r\n// https://www.w3.org/TR/hr-time-2/#the-performance-attribute\r\nexposeLazyInterfaces(globalThis, 'perf_hooks', [\r\n  'Performance', 'PerformanceEntry', 'PerformanceMark', 'PerformanceMeasure',\r\n  'PerformanceObserver', 'PerformanceObserverEntryList', 'PerformanceResourceTiming',\r\n]);\r\n\r\ndefineReplaceableLazyAttribute(globalThis, 'perf_hooks', ['performance']);\r\n\r\n// https://w3c.github.io/FileAPI/#creating-revoking\r\nconst { installObjectURLMethods } = require('internal/url');\r\ninstallObjectURLMethods();\r\n\r\nlet fetchImpl;\r\n// https://fetch.spec.whatwg.org/#fetch-method\r\nObjectDefineProperty(globalThis, 'fetch', {\r\n  __proto__: null,\r\n  configurable: true,\r\n  enumerable: true,\r\n  writable: true,\r\n  value: function fetch(input, init = undefined) { // eslint-disable-line func-name-matching\r\n    if (!fetchImpl) { // Implement lazy loading of undici module for fetch function\r\n      const undiciModule = require('internal/deps/undici/undici');\r\n      fetchImpl = undiciModule.fetch;\r\n    }\r\n    return fetchImpl(input, init);\r\n  },\r\n});\r\n\r\n// https://xhr.spec.whatwg.org/#interface-formdata\r\n// https://fetch.spec.whatwg.org/#headers-class\r\n// https://fetch.spec.whatwg.org/#request-class\r\n// https://fetch.spec.whatwg.org/#response-class\r\nexposeLazyInterfaces(globalThis, 'internal/deps/undici/undici', [\r\n  'FormData', 'Headers', 'Request', 'Response', 'MessageEvent',\r\n]);\r\n\r\n// https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events.org/\r\n// https://websockets.spec.whatwg.org/\r\nexposeLazyInterfaces(globalThis, 'internal/deps/undici/undici', ['EventSource', 'WebSocket']);\r\n\r\n// The WebAssembly Web API which relies on Response.\r\n// https:// webassembly.github.io/spec/web-api/#streaming-modules\r\ninternalBinding('wasm_web_api').setImplementation((streamState, source) => {\r\n  require('internal/wasm_web_api').wasmStreamingCallback(streamState, source);\r\n});\r\n"
  },
  "57": {
    "metadata": {
      "scriptId": "57",
      "url": "node:internal/bootstrap/switches/is_main_thread",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 318,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "e1f7e76944b2b842cc0a880145e207d6e7b47e70b752d0e335abf16cf3ef6177",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 9028,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/bootstrap/switches/is_main_thread"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperty,\r\n} = primordials;\r\n\r\nconst rawMethods = internalBinding('process_methods');\r\nconst {\r\n  namespace: {\r\n    addSerializeCallback,\r\n    isBuildingSnapshot,\r\n  },\r\n} = require('internal/v8/startup_snapshot');\r\n// TODO(joyeecheung): deprecate and remove these underscore methods\r\nprocess._debugProcess = rawMethods._debugProcess;\r\nprocess._debugEnd = rawMethods._debugEnd;\r\n\r\n// See the discussion in https://github.com/nodejs/node/issues/19009 and\r\n// https://github.com/nodejs/node/pull/34010 for why these are no-ops.\r\n// Five word summary: they were broken beyond repair.\r\nprocess._startProfilerIdleNotifier = () => {};\r\nprocess._stopProfilerIdleNotifier = () => {};\r\n\r\nfunction defineStream(name, getter) {\r\n  ObjectDefineProperty(process, name, {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: getter,\r\n  });\r\n}\r\n\r\ndefineStream('stdout', getStdout);\r\ndefineStream('stdin', getStdin);\r\ndefineStream('stderr', getStderr);\r\n\r\n// Worker threads don't receive signals.\r\nconst {\r\n  startListeningIfSignal,\r\n  stopListeningIfSignal,\r\n} = require('internal/process/signal');\r\nprocess.on('newListener', startListeningIfSignal);\r\nprocess.on('removeListener', stopListeningIfSignal);\r\n\r\n// ---- keep the attachment of the wrappers above so that it's easier to ----\r\n// ----              compare the setups side-by-side                    -----\r\n\r\nconst { guessHandleType } = require('internal/util');\r\n\r\nfunction createWritableStdioStream(fd) {\r\n  let stream;\r\n  // Note stream._type is used for test-module-load-list.js\r\n  switch (guessHandleType(fd)) {\r\n    case 'TTY': {\r\n      const tty = require('tty');\r\n      stream = new tty.WriteStream(fd);\r\n      stream._type = 'tty';\r\n      break;\r\n    }\r\n\r\n    case 'FILE': {\r\n      const SyncWriteStream = require('internal/fs/sync_write_stream');\r\n      stream = new SyncWriteStream(fd, { autoClose: false });\r\n      stream._type = 'fs';\r\n      break;\r\n    }\r\n\r\n    case 'PIPE':\r\n    case 'TCP': {\r\n      const net = require('net');\r\n\r\n      // If fd is already being used for the IPC channel, libuv will return\r\n      // an error when trying to use it again. In that case, create the socket\r\n      // using the existing handle instead of the fd.\r\n      if (process.channel && process.channel.fd === fd) {\r\n        const { kChannelHandle } = require('internal/child_process');\r\n        stream = new net.Socket({\r\n          handle: process[kChannelHandle],\r\n          readable: false,\r\n          writable: true,\r\n        });\r\n      } else {\r\n        stream = new net.Socket({\r\n          fd,\r\n          readable: false,\r\n          writable: true,\r\n        });\r\n      }\r\n\r\n      stream._type = 'pipe';\r\n      break;\r\n    }\r\n\r\n    default: {\r\n      // Provide a dummy black-hole output for e.g. non-console\r\n      // Windows applications.\r\n      const { Writable } = require('stream');\r\n      stream = new Writable({\r\n        write(buf, enc, cb) {\r\n          cb();\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  // For supporting legacy API we put the FD here.\r\n  stream.fd = fd;\r\n\r\n  stream._isStdio = true;\r\n\r\n  return stream;\r\n}\r\n\r\nfunction dummyDestroy(err, cb) {\r\n  cb(err);\r\n  this._undestroy();\r\n\r\n  // We need to emit 'close' anyway so that the closing\r\n  // of the stream is observable. We just make sure we\r\n  // are not going to do it twice.\r\n  // The 'close' event is needed so that finished and\r\n  // pipeline work correctly.\r\n  if (!this._writableState.emitClose) {\r\n    process.nextTick(() => {\r\n      this.emit('close');\r\n    });\r\n  }\r\n}\r\n\r\nlet stdin;\r\nlet stdout;\r\nlet stderr;\r\n\r\nlet stdoutDestroy;\r\nlet stderrDestroy;\r\n\r\nfunction refreshStdoutOnSigWinch() {\r\n  stdout._refreshSize();\r\n}\r\n\r\nfunction refreshStderrOnSigWinch() {\r\n  stderr._refreshSize();\r\n}\r\n\r\nfunction addCleanup(fn) {\r\n  if (isBuildingSnapshot()) {\r\n    addSerializeCallback(fn);\r\n  }\r\n}\r\n\r\nfunction getStdout() {\r\n  if (stdout) return stdout;\r\n  stdout = createWritableStdioStream(1);\r\n  stdout.destroySoon = stdout.destroy;\r\n  // Override _destroy so that the fd is never actually closed.\r\n  stdoutDestroy = stdout._destroy;\r\n  stdout._destroy = dummyDestroy;\r\n  if (stdout.isTTY) {\r\n    process.on('SIGWINCH', refreshStdoutOnSigWinch);\r\n  }\r\n\r\n  addCleanup(function cleanupStdout() {\r\n    stdout._destroy = stdoutDestroy;\r\n    stdout.destroy();\r\n    process.removeListener('SIGWINCH', refreshStdoutOnSigWinch);\r\n    stdout = undefined;\r\n  });\r\n  // No need to add deserialize callback because stdout = undefined above\r\n  // causes the stream to be lazily initialized again later.\r\n  return stdout;\r\n}\r\n\r\nfunction getStderr() {\r\n  if (stderr) return stderr;\r\n  stderr = createWritableStdioStream(2);\r\n  stderr.destroySoon = stderr.destroy;\r\n  stderrDestroy = stderr._destroy;\r\n  // Override _destroy so that the fd is never actually closed.\r\n  stderr._destroy = dummyDestroy;\r\n  if (stderr.isTTY) {\r\n    process.on('SIGWINCH', refreshStderrOnSigWinch);\r\n  }\r\n  addCleanup(function cleanupStderr() {\r\n    stderr._destroy = stderrDestroy;\r\n    stderr.destroy();\r\n    process.removeListener('SIGWINCH', refreshStderrOnSigWinch);\r\n    stderr = undefined;\r\n  });\r\n  // No need to add deserialize callback because stderr = undefined above\r\n  // causes the stream to be lazily initialized again later.\r\n  return stderr;\r\n}\r\n\r\nfunction getStdin() {\r\n  if (stdin) return stdin;\r\n  const fd = 0;\r\n\r\n  switch (guessHandleType(fd)) {\r\n    case 'TTY': {\r\n      const tty = require('tty');\r\n      stdin = new tty.ReadStream(fd);\r\n      break;\r\n    }\r\n\r\n    case 'FILE': {\r\n      const fs = require('fs');\r\n      stdin = new fs.ReadStream(null, { fd: fd, autoClose: false });\r\n      break;\r\n    }\r\n\r\n    case 'PIPE':\r\n    case 'TCP': {\r\n      const net = require('net');\r\n\r\n      // It could be that process has been started with an IPC channel\r\n      // sitting on fd=0, in such case the pipe for this fd is already\r\n      // present and creating a new one will lead to the assertion failure\r\n      // in libuv.\r\n      if (process.channel && process.channel.fd === fd) {\r\n        stdin = new net.Socket({\r\n          handle: process.channel,\r\n          readable: true,\r\n          writable: false,\r\n          manualStart: true,\r\n        });\r\n      } else {\r\n        stdin = new net.Socket({\r\n          fd: fd,\r\n          readable: true,\r\n          writable: false,\r\n          manualStart: true,\r\n        });\r\n      }\r\n      // Make sure the stdin can't be `.end()`-ed\r\n      stdin._writableState.ended = true;\r\n      break;\r\n    }\r\n\r\n    default: {\r\n      // Provide a dummy contentless input for e.g. non-console\r\n      // Windows applications.\r\n      const { Readable } = require('stream');\r\n      stdin = new Readable({ read() {} });\r\n      stdin.push(null);\r\n    }\r\n  }\r\n\r\n  // For supporting legacy API we put the FD here.\r\n  stdin.fd = fd;\r\n\r\n  // `stdin` starts out life in a paused state, but node doesn't\r\n  // know yet. Explicitly to readStop() it to put it in the\r\n  // not-reading state.\r\n  if (stdin._handle && stdin._handle.readStop) {\r\n    stdin._handle.reading = false;\r\n    stdin._readableState.reading = false;\r\n    stdin._handle.readStop();\r\n  }\r\n\r\n  // If the user calls stdin.pause(), then we need to stop reading\r\n  // once the stream implementation does so (one nextTick later),\r\n  // so that the process can close down.\r\n  stdin.on('pause', () => {\r\n    process.nextTick(onpause);\r\n  });\r\n\r\n  function onpause() {\r\n    if (!stdin._handle)\r\n      return;\r\n    if (stdin._handle.reading && !stdin.readableFlowing) {\r\n      stdin._readableState.reading = false;\r\n      stdin._handle.reading = false;\r\n      stdin._handle.readStop();\r\n    }\r\n  }\r\n\r\n  addCleanup(function cleanupStdin() {\r\n    stdin.destroy();\r\n    stdin = undefined;\r\n  });\r\n  // No need to add deserialize callback because stdin = undefined above\r\n  // causes the stream to be lazily initialized again later.\r\n  return stdin;\r\n}\r\n\r\n// Used by internal tests.\r\nrawMethods.resetStdioForTesting = function() {\r\n  stdin = undefined;\r\n  stdout = undefined;\r\n  stderr = undefined;\r\n};\r\n\r\n// Needed by the module loader and generally needed everywhere.\r\nrequire('fs');\r\nrequire('util');\r\nrequire('url'); // eslint-disable-line no-restricted-modules\r\ninternalBinding('module_wrap');\r\nrequire('internal/modules/cjs/loader');\r\nrequire('internal/modules/esm/utils');\r\n\r\n// Needed to refresh the time origin.\r\nrequire('internal/perf/utils');\r\n// Needed to register the async hooks.\r\nif (internalBinding('config').hasInspector) {\r\n  require('internal/inspector_async_hook');\r\n}\r\n// Needed to set the wasm web API callbacks.\r\ninternalBinding('wasm_web_api');\r\n// Needed to detect whether it's on main thread.\r\ninternalBinding('worker');\r\n// Needed by most execution modes.\r\nrequire('internal/modules/run_main');\r\n// Needed to refresh DNS configurations.\r\nrequire('internal/dns/utils');\r\n// Needed by almost all execution modes. It's fine to\r\n// load them into the snapshot as long as we don't run\r\n// any of the initialization.\r\nrequire('internal/process/pre_execution');\r\n"
  },
  "58": {
    "metadata": {
      "scriptId": "58",
      "url": "node:internal/v8/startup_snapshot",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 120,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "842ae8e7b851d97e32b7261b07e7625f68d9dfddd0ec5b6c1551dda3f9e821c1",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3502,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/v8/startup_snapshot"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  validateFunction,\r\n} = require('internal/validators');\r\nconst {\r\n  codes: {\r\n    ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION,\r\n    ERR_NOT_BUILDING_SNAPSHOT,\r\n    ERR_NOT_SUPPORTED_IN_SNAPSHOT,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  setSerializeCallback,\r\n  setDeserializeCallback,\r\n  setDeserializeMainFunction: _setDeserializeMainFunction,\r\n  isBuildingSnapshotBuffer,\r\n} = internalBinding('mksnapshot');\r\n\r\nfunction isBuildingSnapshot() {\r\n  return isBuildingSnapshotBuffer[0];\r\n}\r\n\r\nfunction throwIfNotBuildingSnapshot() {\r\n  if (!isBuildingSnapshot()) {\r\n    throw new ERR_NOT_BUILDING_SNAPSHOT();\r\n  }\r\n}\r\n\r\nfunction throwIfBuildingSnapshot(reason) {\r\n  if (isBuildingSnapshot()) {\r\n    throw new ERR_NOT_SUPPORTED_IN_SNAPSHOT(reason);\r\n  }\r\n}\r\n\r\nconst deserializeCallbacks = [];\r\nlet deserializeCallbackIsSet = false;\r\nfunction runDeserializeCallbacks() {\r\n  while (deserializeCallbacks.length > 0) {\r\n    const { 0: callback, 1: data } = deserializeCallbacks.shift();\r\n    callback(data);\r\n  }\r\n}\r\n\r\nfunction addDeserializeCallback(callback, data) {\r\n  throwIfNotBuildingSnapshot();\r\n  validateFunction(callback, 'callback');\r\n  if (!deserializeCallbackIsSet) {\r\n    // TODO(joyeecheung): when the main function handling is done in JS,\r\n    // the deserialize callbacks can always be invoked. For now only\r\n    // store it in C++ when it's actually used to avoid unnecessary\r\n    // C++ -> JS costs.\r\n    setDeserializeCallback(runDeserializeCallbacks);\r\n    deserializeCallbackIsSet = true;\r\n  }\r\n  deserializeCallbacks.push([callback, data]);\r\n}\r\n\r\nconst serializeCallbacks = [];\r\nfunction runSerializeCallbacks() {\r\n  while (serializeCallbacks.length > 0) {\r\n    const { 0: callback, 1: data } = serializeCallbacks.shift();\r\n    callback(data);\r\n  }\r\n}\r\n\r\nfunction addSerializeCallback(callback, data) {\r\n  throwIfNotBuildingSnapshot();\r\n  validateFunction(callback, 'callback');\r\n  serializeCallbacks.push([callback, data]);\r\n}\r\n\r\nfunction initializeCallbacks() {\r\n  // Only run the serialize callbacks in snapshot building mode, otherwise\r\n  // they throw.\r\n  if (isBuildingSnapshot()) {\r\n    setSerializeCallback(runSerializeCallbacks);\r\n  }\r\n}\r\n\r\nlet deserializeMainIsSet = false;\r\nfunction setDeserializeMainFunction(callback, data) {\r\n  throwIfNotBuildingSnapshot();\r\n  // TODO(joyeecheung): In lib/internal/bootstrap/node.js, create a default\r\n  // main function to run the lib/internal/main scripts and make sure that\r\n  // the main function set in the snapshot building process takes precedence.\r\n  validateFunction(callback, 'callback');\r\n  if (deserializeMainIsSet) {\r\n    throw new ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION();\r\n  }\r\n  deserializeMainIsSet = true;\r\n\r\n  _setDeserializeMainFunction(function deserializeMain() {\r\n    const {\r\n      prepareMainThreadExecution,\r\n      markBootstrapComplete,\r\n    } = require('internal/process/pre_execution');\r\n\r\n    // This should be in sync with run_main_module.js until we make that\r\n    // a built-in main function.\r\n    // TODO(joyeecheung): make a copy of argv[0] and insert it as argv[1].\r\n    prepareMainThreadExecution(false);\r\n    markBootstrapComplete();\r\n    callback(data);\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  initializeCallbacks,\r\n  runDeserializeCallbacks,\r\n  throwIfBuildingSnapshot,\r\n  // Exposed to require('v8').startupSnapshot\r\n  namespace: {\r\n    addDeserializeCallback,\r\n    addSerializeCallback,\r\n    setDeserializeMainFunction,\r\n    isBuildingSnapshot,\r\n  },\r\n};\r\n"
  },
  "59": {
    "metadata": {
      "scriptId": "59",
      "url": "node:internal/process/signal",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 54,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "d5ecbf2a21047842402a4ff884381e9d4c2f0fc87c9c08d8d7ab6915241a5cb3",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1234,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/signal"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeBind,\r\n  SafeMap,\r\n} = primordials;\r\n\r\nconst {\r\n  ErrnoException,\r\n} = require('internal/errors');\r\n\r\nconst { signals } = internalBinding('constants').os;\r\n\r\nlet Signal;\r\nconst signalWraps = new SafeMap();\r\n\r\nfunction isSignal(event) {\r\n  return typeof event === 'string' && signals[event] !== undefined;\r\n}\r\n\r\n// Detect presence of a listener for the special signal types\r\nfunction startListeningIfSignal(type) {\r\n  if (isSignal(type) && !signalWraps.has(type)) {\r\n    if (Signal === undefined)\r\n      Signal = internalBinding('signal_wrap').Signal;\r\n    const wrap = new Signal();\r\n\r\n    wrap.unref();\r\n\r\n    wrap.onsignal = FunctionPrototypeBind(process.emit, process, type, type);\r\n\r\n    const signum = signals[type];\r\n    const err = wrap.start(signum);\r\n    if (err) {\r\n      wrap.close();\r\n      throw new ErrnoException(err, 'uv_signal_start');\r\n    }\r\n\r\n    signalWraps.set(type, wrap);\r\n  }\r\n}\r\n\r\nfunction stopListeningIfSignal(type) {\r\n  const wrap = signalWraps.get(type);\r\n  if (wrap !== undefined && process.listenerCount(type) === 0) {\r\n    wrap.close();\r\n    signalWraps.delete(type);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  startListeningIfSignal,\r\n  stopListeningIfSignal,\r\n};\r\n"
  },
  "60": {
    "metadata": {
      "scriptId": "60",
      "url": "node:url",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1047,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "3e6a91d8aea1c658fa5d11d0028b956ac762b8bc83477d37bfdb6d8370bdc649",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 33704,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:url"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  Boolean,\r\n  Int8Array,\r\n  ObjectKeys,\r\n  StringPrototypeCharCodeAt,\r\n  decodeURIComponent,\r\n} = primordials;\r\n\r\nconst { toASCII } = require('internal/idna');\r\nconst { encodeStr, hexTable } = require('internal/querystring');\r\nconst querystring = require('querystring');\r\n\r\nconst {\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_INVALID_URL,\r\n} = require('internal/errors').codes;\r\nconst {\r\n  validateString,\r\n  validateObject,\r\n} = require('internal/validators');\r\n\r\n// This ensures setURLConstructor() is called before the native\r\n// URL::ToObject() method is used.\r\nconst { spliceOne } = require('internal/util');\r\n\r\n// WHATWG URL implementation provided by internal/url\r\nconst {\r\n  URL,\r\n  URLSearchParams,\r\n  domainToASCII,\r\n  domainToUnicode,\r\n  fileURLToPath,\r\n  pathToFileURL: _pathToFileURL,\r\n  urlToHttpOptions,\r\n  unsafeProtocol,\r\n  hostlessProtocol,\r\n  slashedProtocol,\r\n} = require('internal/url');\r\n\r\nconst bindingUrl = internalBinding('url');\r\n\r\nconst { getOptionValue } = require('internal/options');\r\n\r\n// Original url.parse() API\r\n\r\nfunction Url() {\r\n  this.protocol = null;\r\n  this.slashes = null;\r\n  this.auth = null;\r\n  this.host = null;\r\n  this.port = null;\r\n  this.hostname = null;\r\n  this.hash = null;\r\n  this.search = null;\r\n  this.query = null;\r\n  this.pathname = null;\r\n  this.path = null;\r\n  this.href = null;\r\n}\r\n\r\n// Reference: RFC 3986, RFC 1808, RFC 2396\r\n\r\n// define these here so at least they only have to be\r\n// compiled once on the first module load.\r\nconst protocolPattern = /^[a-z0-9.+-]+:/i;\r\nconst portPattern = /:[0-9]*$/;\r\nconst hostPattern = /^\\/\\/[^@/]+@[^@/]+/;\r\n\r\n// Special case for a simple path URL\r\nconst simplePathPattern = /^(\\/\\/?(?!\\/)[^?\\s]*)(\\?[^\\s]*)?$/;\r\n\r\nconst hostnameMaxLen = 255;\r\nconst {\r\n  CHAR_SPACE,\r\n  CHAR_TAB,\r\n  CHAR_CARRIAGE_RETURN,\r\n  CHAR_LINE_FEED,\r\n  CHAR_NO_BREAK_SPACE,\r\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE,\r\n  CHAR_HASH,\r\n  CHAR_FORWARD_SLASH,\r\n  CHAR_LEFT_SQUARE_BRACKET,\r\n  CHAR_RIGHT_SQUARE_BRACKET,\r\n  CHAR_LEFT_ANGLE_BRACKET,\r\n  CHAR_RIGHT_ANGLE_BRACKET,\r\n  CHAR_LEFT_CURLY_BRACKET,\r\n  CHAR_RIGHT_CURLY_BRACKET,\r\n  CHAR_QUESTION_MARK,\r\n  CHAR_DOUBLE_QUOTE,\r\n  CHAR_SINGLE_QUOTE,\r\n  CHAR_PERCENT,\r\n  CHAR_SEMICOLON,\r\n  CHAR_BACKWARD_SLASH,\r\n  CHAR_CIRCUMFLEX_ACCENT,\r\n  CHAR_GRAVE_ACCENT,\r\n  CHAR_VERTICAL_LINE,\r\n  CHAR_AT,\r\n  CHAR_COLON,\r\n} = require('internal/constants');\r\n\r\nlet urlParseWarned = false;\r\n\r\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\r\n  if (!urlParseWarned && getOptionValue('--pending-deprecation')) {\r\n    urlParseWarned = true;\r\n    process.emitWarning(\r\n      '`url.parse()` behavior is not standardized and prone to ' +\r\n      'errors that have security implications. Use the WHATWG URL API ' +\r\n      'instead. CVEs are not issued for `url.parse()` vulnerabilities.',\r\n      'DeprecationWarning',\r\n      'DEP0169',\r\n    );\r\n  }\r\n\r\n  if (url instanceof Url) return url;\r\n\r\n  const urlObject = new Url();\r\n  urlObject.parse(url, parseQueryString, slashesDenoteHost);\r\n  return urlObject;\r\n}\r\n\r\nfunction isIpv6Hostname(hostname) {\r\n  return (\r\n    StringPrototypeCharCodeAt(hostname, 0) === CHAR_LEFT_SQUARE_BRACKET &&\r\n    StringPrototypeCharCodeAt(hostname, hostname.length - 1) ===\r\n    CHAR_RIGHT_SQUARE_BRACKET\r\n  );\r\n}\r\n\r\n// This prevents some common spoofing bugs due to our use of IDNA toASCII. For\r\n// compatibility, the set of characters we use here is the *intersection* of\r\n// \"forbidden host code point\" in the WHATWG URL Standard [1] and the\r\n// characters in the host parsing loop in Url.prototype.parse, with the\r\n// following additions:\r\n//\r\n// - ':' since this could cause a \"protocol spoofing\" bug\r\n// - '@' since this could cause parts of the hostname to be confused with auth\r\n// - '[' and ']' since this could cause a non-IPv6 hostname to be interpreted\r\n//   as IPv6 by isIpv6Hostname above\r\n//\r\n// [1]: https://url.spec.whatwg.org/#forbidden-host-code-point\r\nconst forbiddenHostChars = /[\\0\\t\\n\\r #%/:<>?@[\\\\\\]^|]/;\r\n// For IPv6, permit '[', ']', and ':'.\r\nconst forbiddenHostCharsIpv6 = /[\\0\\t\\n\\r #%/<>?@\\\\^|]/;\r\n\r\nUrl.prototype.parse = function parse(url, parseQueryString, slashesDenoteHost) {\r\n  validateString(url, 'url');\r\n\r\n  // Copy chrome, IE, opera backslash-handling behavior.\r\n  // Back slashes before the query string get converted to forward slashes\r\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\r\n  let hasHash = false;\r\n  let hasAt = false;\r\n  let start = -1;\r\n  let end = -1;\r\n  let rest = '';\r\n  let lastPos = 0;\r\n  for (let i = 0, inWs = false, split = false; i < url.length; ++i) {\r\n    const code = url.charCodeAt(i);\r\n\r\n    // Find first and last non-whitespace characters for trimming\r\n    const isWs = code < 33 ||\r\n                 code === CHAR_NO_BREAK_SPACE ||\r\n                 code === CHAR_ZERO_WIDTH_NOBREAK_SPACE;\r\n    if (start === -1) {\r\n      if (isWs)\r\n        continue;\r\n      lastPos = start = i;\r\n    } else if (inWs) {\r\n      if (!isWs) {\r\n        end = -1;\r\n        inWs = false;\r\n      }\r\n    } else if (isWs) {\r\n      end = i;\r\n      inWs = true;\r\n    }\r\n\r\n    // Only convert backslashes while we haven't seen a split character\r\n    if (!split) {\r\n      switch (code) {\r\n        case CHAR_AT:\r\n          hasAt = true;\r\n          break;\r\n        case CHAR_HASH:\r\n          hasHash = true;\r\n        // Fall through\r\n        case CHAR_QUESTION_MARK:\r\n          split = true;\r\n          break;\r\n        case CHAR_BACKWARD_SLASH:\r\n          if (i - lastPos > 0)\r\n            rest += url.slice(lastPos, i);\r\n          rest += '/';\r\n          lastPos = i + 1;\r\n          break;\r\n      }\r\n    } else if (!hasHash && code === CHAR_HASH) {\r\n      hasHash = true;\r\n    }\r\n  }\r\n\r\n  // Check if string was non-empty (including strings with only whitespace)\r\n  if (start !== -1) {\r\n    if (lastPos === start) {\r\n      // We didn't convert any backslashes\r\n\r\n      if (end === -1) {\r\n        if (start === 0)\r\n          rest = url;\r\n        else\r\n          rest = url.slice(start);\r\n      } else {\r\n        rest = url.slice(start, end);\r\n      }\r\n    } else if (end === -1 && lastPos < url.length) {\r\n      // We converted some backslashes and have only part of the entire string\r\n      rest += url.slice(lastPos);\r\n    } else if (end !== -1 && lastPos < end) {\r\n      // We converted some backslashes and have only part of the entire string\r\n      rest += url.slice(lastPos, end);\r\n    }\r\n  }\r\n\r\n  if (!slashesDenoteHost && !hasHash && !hasAt) {\r\n    // Try fast path regexp\r\n    const simplePath = simplePathPattern.exec(rest);\r\n    if (simplePath) {\r\n      this.path = rest;\r\n      this.href = rest;\r\n      this.pathname = simplePath[1];\r\n      if (simplePath[2]) {\r\n        this.search = simplePath[2];\r\n        if (parseQueryString) {\r\n          this.query = querystring.parse(this.search.slice(1));\r\n        } else {\r\n          this.query = this.search.slice(1);\r\n        }\r\n      } else if (parseQueryString) {\r\n        this.search = null;\r\n        this.query = { __proto__: null };\r\n      }\r\n      return this;\r\n    }\r\n  }\r\n\r\n  let proto = protocolPattern.exec(rest);\r\n  let lowerProto;\r\n  if (proto) {\r\n    proto = proto[0];\r\n    lowerProto = proto.toLowerCase();\r\n    this.protocol = lowerProto;\r\n    rest = rest.slice(proto.length);\r\n  }\r\n\r\n  // Figure out if it's got a host\r\n  // user@server is *always* interpreted as a hostname, and url\r\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\r\n  // how the browser resolves relative URLs.\r\n  let slashes;\r\n  if (slashesDenoteHost || proto || hostPattern.test(rest)) {\r\n    slashes = rest.charCodeAt(0) === CHAR_FORWARD_SLASH &&\r\n              rest.charCodeAt(1) === CHAR_FORWARD_SLASH;\r\n    if (slashes && !(proto && hostlessProtocol.has(lowerProto))) {\r\n      rest = rest.slice(2);\r\n      this.slashes = true;\r\n    }\r\n  }\r\n\r\n  if (!hostlessProtocol.has(lowerProto) &&\r\n      (slashes || (proto && !slashedProtocol.has(proto)))) {\r\n\r\n    // there's a hostname.\r\n    // the first instance of /, ?, ;, or # ends the host.\r\n    //\r\n    // If there is an @ in the hostname, then non-host chars *are* allowed\r\n    // to the left of the last @ sign, unless some host-ending character\r\n    // comes *before* the @-sign.\r\n    // URLs are obnoxious.\r\n    //\r\n    // ex:\r\n    // http://a@b@c/ => user:a@b host:c\r\n    // http://a@b?@c => user:a host:b path:/?@c\r\n\r\n    let hostEnd = -1;\r\n    let atSign = -1;\r\n    let nonHost = -1;\r\n    for (let i = 0; i < rest.length; ++i) {\r\n      switch (rest.charCodeAt(i)) {\r\n        case CHAR_TAB:\r\n        case CHAR_LINE_FEED:\r\n        case CHAR_CARRIAGE_RETURN:\r\n          // WHATWG URL removes tabs, newlines, and carriage returns. Let's do that too.\r\n          rest = rest.slice(0, i) + rest.slice(i + 1);\r\n          i -= 1;\r\n          break;\r\n        case CHAR_SPACE:\r\n        case CHAR_DOUBLE_QUOTE:\r\n        case CHAR_PERCENT:\r\n        case CHAR_SINGLE_QUOTE:\r\n        case CHAR_SEMICOLON:\r\n        case CHAR_LEFT_ANGLE_BRACKET:\r\n        case CHAR_RIGHT_ANGLE_BRACKET:\r\n        case CHAR_BACKWARD_SLASH:\r\n        case CHAR_CIRCUMFLEX_ACCENT:\r\n        case CHAR_GRAVE_ACCENT:\r\n        case CHAR_LEFT_CURLY_BRACKET:\r\n        case CHAR_VERTICAL_LINE:\r\n        case CHAR_RIGHT_CURLY_BRACKET:\r\n          // Characters that are never ever allowed in a hostname from RFC 2396\r\n          if (nonHost === -1)\r\n            nonHost = i;\r\n          break;\r\n        case CHAR_HASH:\r\n        case CHAR_FORWARD_SLASH:\r\n        case CHAR_QUESTION_MARK:\r\n          // Find the first instance of any host-ending characters\r\n          if (nonHost === -1)\r\n            nonHost = i;\r\n          hostEnd = i;\r\n          break;\r\n        case CHAR_AT:\r\n          // At this point, either we have an explicit point where the\r\n          // auth portion cannot go past, or the last @ char is the decider.\r\n          atSign = i;\r\n          nonHost = -1;\r\n          break;\r\n      }\r\n      if (hostEnd !== -1)\r\n        break;\r\n    }\r\n    start = 0;\r\n    if (atSign !== -1) {\r\n      this.auth = decodeURIComponent(rest.slice(0, atSign));\r\n      start = atSign + 1;\r\n    }\r\n    if (nonHost === -1) {\r\n      this.host = rest.slice(start);\r\n      rest = '';\r\n    } else {\r\n      this.host = rest.slice(start, nonHost);\r\n      rest = rest.slice(nonHost);\r\n    }\r\n\r\n    // pull out port.\r\n    this.parseHost();\r\n\r\n    // We've indicated that there is a hostname,\r\n    // so even if it's empty, it has to be present.\r\n    if (typeof this.hostname !== 'string')\r\n      this.hostname = '';\r\n\r\n    const hostname = this.hostname;\r\n\r\n    // If hostname begins with [ and ends with ]\r\n    // assume that it's an IPv6 address.\r\n    const ipv6Hostname = isIpv6Hostname(hostname);\r\n\r\n    // validate a little.\r\n    if (!ipv6Hostname) {\r\n      rest = getHostname(this, rest, hostname, url);\r\n    }\r\n\r\n    if (this.hostname.length > hostnameMaxLen) {\r\n      this.hostname = '';\r\n    } else {\r\n      // Hostnames are always lower case.\r\n      this.hostname = this.hostname.toLowerCase();\r\n    }\r\n\r\n    if (this.hostname !== '') {\r\n      if (ipv6Hostname) {\r\n        if (forbiddenHostCharsIpv6.test(this.hostname)) {\r\n          throw new ERR_INVALID_URL(url);\r\n        }\r\n      } else {\r\n        // IDNA Support: Returns a punycoded representation of \"domain\".\r\n        // It only converts parts of the domain name that\r\n        // have non-ASCII characters, i.e. it doesn't matter if\r\n        // you call it with a domain that already is ASCII-only.\r\n        this.hostname = toASCII(this.hostname);\r\n\r\n        // Prevent two potential routes of hostname spoofing.\r\n        // 1. If this.hostname is empty, it must have become empty due to toASCII\r\n        //    since we checked this.hostname above.\r\n        // 2. If any of forbiddenHostChars appears in this.hostname, it must have\r\n        //    also gotten in due to toASCII. This is since getHostname would have\r\n        //    filtered them out otherwise.\r\n        // Rather than trying to correct this by moving the non-host part into\r\n        // the pathname as we've done in getHostname, throw an exception to\r\n        // convey the severity of this issue.\r\n        if (this.hostname === '' || forbiddenHostChars.test(this.hostname)) {\r\n          throw new ERR_INVALID_URL(url);\r\n        }\r\n      }\r\n    }\r\n\r\n    const p = this.port ? ':' + this.port : '';\r\n    const h = this.hostname || '';\r\n    this.host = h + p;\r\n\r\n    // strip [ and ] from the hostname\r\n    // the host field still retains them, though\r\n    if (ipv6Hostname) {\r\n      this.hostname = this.hostname.slice(1, -1);\r\n      if (rest[0] !== '/') {\r\n        rest = '/' + rest;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Now rest is set to the post-host stuff.\r\n  // Chop off any delim chars.\r\n  if (!unsafeProtocol.has(lowerProto)) {\r\n    // First, make 100% sure that any \"autoEscape\" chars get\r\n    // escaped, even if encodeURIComponent doesn't think they\r\n    // need to be.\r\n    rest = autoEscapeStr(rest);\r\n  }\r\n\r\n  let questionIdx = -1;\r\n  let hashIdx = -1;\r\n  for (let i = 0; i < rest.length; ++i) {\r\n    const code = rest.charCodeAt(i);\r\n    if (code === CHAR_HASH) {\r\n      this.hash = rest.slice(i);\r\n      hashIdx = i;\r\n      break;\r\n    } else if (code === CHAR_QUESTION_MARK && questionIdx === -1) {\r\n      questionIdx = i;\r\n    }\r\n  }\r\n\r\n  if (questionIdx !== -1) {\r\n    if (hashIdx === -1) {\r\n      this.search = rest.slice(questionIdx);\r\n      this.query = rest.slice(questionIdx + 1);\r\n    } else {\r\n      this.search = rest.slice(questionIdx, hashIdx);\r\n      this.query = rest.slice(questionIdx + 1, hashIdx);\r\n    }\r\n    if (parseQueryString) {\r\n      this.query = querystring.parse(this.query);\r\n    }\r\n  } else if (parseQueryString) {\r\n    // No query string, but parseQueryString still requested\r\n    this.search = null;\r\n    this.query = { __proto__: null };\r\n  }\r\n\r\n  const useQuestionIdx =\r\n    questionIdx !== -1 && (hashIdx === -1 || questionIdx < hashIdx);\r\n  const firstIdx = useQuestionIdx ? questionIdx : hashIdx;\r\n  if (firstIdx === -1) {\r\n    if (rest.length > 0)\r\n      this.pathname = rest;\r\n  } else if (firstIdx > 0) {\r\n    this.pathname = rest.slice(0, firstIdx);\r\n  }\r\n  if (slashedProtocol.has(lowerProto) &&\r\n      this.hostname && !this.pathname) {\r\n    this.pathname = '/';\r\n  }\r\n\r\n  // To support http.request\r\n  if (this.pathname || this.search) {\r\n    const p = this.pathname || '';\r\n    const s = this.search || '';\r\n    this.path = p + s;\r\n  }\r\n\r\n  // Finally, reconstruct the href based on what has been validated.\r\n  this.href = this.format();\r\n  return this;\r\n};\r\n\r\nlet warnInvalidPort = true;\r\nfunction getHostname(self, rest, hostname, url) {\r\n  for (let i = 0; i < hostname.length; ++i) {\r\n    const code = hostname.charCodeAt(i);\r\n    const isValid = (code !== CHAR_FORWARD_SLASH &&\r\n                     code !== CHAR_BACKWARD_SLASH &&\r\n                     code !== CHAR_HASH &&\r\n                     code !== CHAR_QUESTION_MARK &&\r\n                     code !== CHAR_COLON);\r\n\r\n    if (!isValid) {\r\n      // If leftover starts with :, then it represents an invalid port.\r\n      // But url.parse() is lenient about it for now.\r\n      // Issue a warning and continue.\r\n      if (warnInvalidPort && code === CHAR_COLON) {\r\n        const detail = `The URL ${url} is invalid. Future versions of Node.js will throw an error.`;\r\n        process.emitWarning(detail, 'DeprecationWarning', 'DEP0170');\r\n        warnInvalidPort = false;\r\n      }\r\n      self.hostname = hostname.slice(0, i);\r\n      return `/${hostname.slice(i)}${rest}`;\r\n    }\r\n  }\r\n  return rest;\r\n}\r\n\r\n// Escaped characters. Use empty strings to fill up unused entries.\r\n// Using Array is faster than Object/Map\r\nconst escapedCodes = [\r\n  /* 0 - 9 */ '', '', '', '', '', '', '', '', '', '%09',\r\n  /* 10 - 19 */ '%0A', '', '', '%0D', '', '', '', '', '', '',\r\n  /* 20 - 29 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 30 - 39 */ '', '', '%20', '', '%22', '', '', '', '', '%27',\r\n  /* 40 - 49 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 50 - 59 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 60 - 69 */ '%3C', '', '%3E', '', '', '', '', '', '', '',\r\n  /* 70 - 79 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 80 - 89 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 90 - 99 */ '', '', '%5C', '', '%5E', '', '%60', '', '', '',\r\n  /* 100 - 109 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 110 - 119 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 120 - 125 */ '', '', '', '%7B', '%7C', '%7D',\r\n];\r\n\r\n// Automatically escape all delimiters and unwise characters from RFC 2396.\r\n// Also escape single quotes in case of an XSS attack.\r\n// Return the escaped string.\r\nfunction autoEscapeStr(rest) {\r\n  let escaped = '';\r\n  let lastEscapedPos = 0;\r\n  for (let i = 0; i < rest.length; ++i) {\r\n    // `escaped` contains substring up to the last escaped character.\r\n    const escapedChar = escapedCodes[rest.charCodeAt(i)];\r\n    if (escapedChar) {\r\n      // Concat if there are ordinary characters in the middle.\r\n      if (i > lastEscapedPos)\r\n        escaped += rest.slice(lastEscapedPos, i);\r\n      escaped += escapedChar;\r\n      lastEscapedPos = i + 1;\r\n    }\r\n  }\r\n  if (lastEscapedPos === 0)  // Nothing has been escaped.\r\n    return rest;\r\n\r\n  // There are ordinary characters at the end.\r\n  if (lastEscapedPos < rest.length)\r\n    escaped += rest.slice(lastEscapedPos);\r\n\r\n  return escaped;\r\n}\r\n\r\n// Format a parsed object into a url string\r\nfunction urlFormat(urlObject, options) {\r\n  // Ensure it's an object, and not a string url.\r\n  // If it's an object, this is a no-op.\r\n  // this way, you can call urlParse() on strings\r\n  // to clean up potentially wonky urls.\r\n  if (typeof urlObject === 'string') {\r\n    urlObject = urlParse(urlObject);\r\n  } else if (typeof urlObject !== 'object' || urlObject === null) {\r\n    throw new ERR_INVALID_ARG_TYPE('urlObject',\r\n                                   ['Object', 'string'], urlObject);\r\n  } else if (urlObject instanceof URL) {\r\n    let fragment = true;\r\n    let unicode = false;\r\n    let search = true;\r\n    let auth = true;\r\n\r\n    if (options) {\r\n      validateObject(options, 'options');\r\n\r\n      if (options.fragment != null) {\r\n        fragment = Boolean(options.fragment);\r\n      }\r\n\r\n      if (options.unicode != null) {\r\n        unicode = Boolean(options.unicode);\r\n      }\r\n\r\n      if (options.search != null) {\r\n        search = Boolean(options.search);\r\n      }\r\n\r\n      if (options.auth != null) {\r\n        auth = Boolean(options.auth);\r\n      }\r\n    }\r\n\r\n    return bindingUrl.format(urlObject.href, fragment, unicode, search, auth);\r\n  }\r\n\r\n  return Url.prototype.format.call(urlObject);\r\n}\r\n\r\n// These characters do not need escaping:\r\n// ! - . _ ~\r\n// ' ( ) * :\r\n// digits\r\n// alpha (uppercase)\r\n// alpha (lowercase)\r\nconst noEscapeAuth = new Int8Array([\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x00 - 0x0F\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x10 - 0x1F\r\n  0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 0x20 - 0x2F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 0x30 - 0x3F\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x40 - 0x4F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 0x50 - 0x5F\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x60 - 0x6F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, // 0x70 - 0x7F\r\n]);\r\n\r\nUrl.prototype.format = function format() {\r\n  let auth = this.auth || '';\r\n  if (auth) {\r\n    auth = encodeStr(auth, noEscapeAuth, hexTable);\r\n    auth += '@';\r\n  }\r\n\r\n  let protocol = this.protocol || '';\r\n  let pathname = this.pathname || '';\r\n  let hash = this.hash || '';\r\n  let host = '';\r\n  let query = '';\r\n\r\n  if (this.host) {\r\n    host = auth + this.host;\r\n  } else if (this.hostname) {\r\n    host = auth + (\r\n      this.hostname.includes(':') && !isIpv6Hostname(this.hostname) ?\r\n        '[' + this.hostname + ']' :\r\n        this.hostname\r\n    );\r\n    if (this.port) {\r\n      host += ':' + this.port;\r\n    }\r\n  }\r\n\r\n  if (this.query !== null && typeof this.query === 'object') {\r\n    query = querystring.stringify(this.query);\r\n  }\r\n\r\n  let search = this.search || (query && ('?' + query)) || '';\r\n\r\n  if (protocol && protocol.charCodeAt(protocol.length - 1) !== 58/* : */)\r\n    protocol += ':';\r\n\r\n  let newPathname = '';\r\n  let lastPos = 0;\r\n  for (let i = 0; i < pathname.length; ++i) {\r\n    switch (pathname.charCodeAt(i)) {\r\n      case CHAR_HASH:\r\n        if (i - lastPos > 0)\r\n          newPathname += pathname.slice(lastPos, i);\r\n        newPathname += '%23';\r\n        lastPos = i + 1;\r\n        break;\r\n      case CHAR_QUESTION_MARK:\r\n        if (i - lastPos > 0)\r\n          newPathname += pathname.slice(lastPos, i);\r\n        newPathname += '%3F';\r\n        lastPos = i + 1;\r\n        break;\r\n    }\r\n  }\r\n  if (lastPos > 0) {\r\n    if (lastPos !== pathname.length)\r\n      pathname = newPathname + pathname.slice(lastPos);\r\n    else\r\n      pathname = newPathname;\r\n  }\r\n\r\n  // Only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\r\n  // unless they had them to begin with.\r\n  if (this.slashes || slashedProtocol.has(protocol)) {\r\n    if (this.slashes || host) {\r\n      if (pathname && pathname.charCodeAt(0) !== CHAR_FORWARD_SLASH)\r\n        pathname = '/' + pathname;\r\n      host = '//' + host;\r\n    } else if (protocol.length >= 4 &&\r\n               protocol.charCodeAt(0) === 102/* f */ &&\r\n               protocol.charCodeAt(1) === 105/* i */ &&\r\n               protocol.charCodeAt(2) === 108/* l */ &&\r\n               protocol.charCodeAt(3) === 101/* e */) {\r\n      host = '//';\r\n    }\r\n  }\r\n\r\n  search = search.replace(/#/g, '%23');\r\n\r\n  if (hash && hash.charCodeAt(0) !== CHAR_HASH)\r\n    hash = '#' + hash;\r\n  if (search && search.charCodeAt(0) !== CHAR_QUESTION_MARK)\r\n    search = '?' + search;\r\n\r\n  return protocol + host + pathname + search + hash;\r\n};\r\n\r\nfunction urlResolve(source, relative) {\r\n  return urlParse(source, false, true).resolve(relative);\r\n}\r\n\r\nUrl.prototype.resolve = function resolve(relative) {\r\n  return this.resolveObject(urlParse(relative, false, true)).format();\r\n};\r\n\r\nfunction urlResolveObject(source, relative) {\r\n  if (!source) return relative;\r\n  return urlParse(source, false, true).resolveObject(relative);\r\n}\r\n\r\nUrl.prototype.resolveObject = function resolveObject(relative) {\r\n  if (typeof relative === 'string') {\r\n    const rel = new Url();\r\n    rel.parse(relative, false, true);\r\n    relative = rel;\r\n  }\r\n\r\n  const result = new Url();\r\n  const tkeys = ObjectKeys(this);\r\n  for (let tk = 0; tk < tkeys.length; tk++) {\r\n    const tkey = tkeys[tk];\r\n    result[tkey] = this[tkey];\r\n  }\r\n\r\n  // Hash is always overridden, no matter what.\r\n  // even href=\"\" will remove it.\r\n  result.hash = relative.hash;\r\n\r\n  // If the relative url is empty, then there's nothing left to do here.\r\n  if (relative.href === '') {\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  // Hrefs like //foo/bar always cut to the protocol.\r\n  if (relative.slashes && !relative.protocol) {\r\n    // Take everything except the protocol from relative\r\n    const rkeys = ObjectKeys(relative);\r\n    for (let rk = 0; rk < rkeys.length; rk++) {\r\n      const rkey = rkeys[rk];\r\n      if (rkey !== 'protocol')\r\n        result[rkey] = relative[rkey];\r\n    }\r\n\r\n    // urlParse appends trailing / to urls like http://www.example.com\r\n    if (slashedProtocol.has(result.protocol) &&\r\n        result.hostname && !result.pathname) {\r\n      result.path = result.pathname = '/';\r\n    }\r\n\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  if (relative.protocol && relative.protocol !== result.protocol) {\r\n    // If it's a known url protocol, then changing\r\n    // the protocol does weird things\r\n    // first, if it's not file:, then we MUST have a host,\r\n    // and if there was a path\r\n    // to begin with, then we MUST have a path.\r\n    // if it is file:, then the host is dropped,\r\n    // because that's known to be hostless.\r\n    // anything else is assumed to be absolute.\r\n    if (!slashedProtocol.has(relative.protocol)) {\r\n      const keys = ObjectKeys(relative);\r\n      for (let v = 0; v < keys.length; v++) {\r\n        const k = keys[v];\r\n        result[k] = relative[k];\r\n      }\r\n      result.href = result.format();\r\n      return result;\r\n    }\r\n\r\n    result.protocol = relative.protocol;\r\n    if (!relative.host &&\r\n        !/^file:?$/.test(relative.protocol) &&\r\n        !hostlessProtocol.has(relative.protocol)) {\r\n      const relPath = (relative.pathname || '').split('/');\r\n      while (relPath.length && !(relative.host = relPath.shift()));\r\n      if (!relative.host) relative.host = '';\r\n      if (!relative.hostname) relative.hostname = '';\r\n      if (relPath[0] !== '') relPath.unshift('');\r\n      if (relPath.length < 2) relPath.unshift('');\r\n      result.pathname = relPath.join('/');\r\n    } else {\r\n      result.pathname = relative.pathname;\r\n    }\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n    result.host = relative.host || '';\r\n    result.auth = relative.auth;\r\n    result.hostname = relative.hostname || relative.host;\r\n    result.port = relative.port;\r\n    // To support http.request\r\n    if (result.pathname || result.search) {\r\n      const p = result.pathname || '';\r\n      const s = result.search || '';\r\n      result.path = p + s;\r\n    }\r\n    result.slashes = result.slashes || relative.slashes;\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  const isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/');\r\n  const isRelAbs = (\r\n    relative.host || (relative.pathname && relative.pathname.charAt(0) === '/')\r\n  );\r\n  let mustEndAbs = (isRelAbs || isSourceAbs ||\r\n                    (result.host && relative.pathname));\r\n  const removeAllDots = mustEndAbs;\r\n  let srcPath = (result.pathname && result.pathname.split('/')) || [];\r\n  const relPath = (relative.pathname && relative.pathname.split('/')) || [];\r\n  const noLeadingSlashes = result.protocol &&\r\n      !slashedProtocol.has(result.protocol);\r\n\r\n  // If the url is a non-slashed url, then relative\r\n  // links like ../.. should be able\r\n  // to crawl up to the hostname, as well.  This is strange.\r\n  // result.protocol has already been set by now.\r\n  // Later on, put the first path part into the host field.\r\n  if (noLeadingSlashes) {\r\n    result.hostname = '';\r\n    result.port = null;\r\n    if (result.host) {\r\n      if (srcPath[0] === '') srcPath[0] = result.host;\r\n      else srcPath.unshift(result.host);\r\n    }\r\n    result.host = '';\r\n    if (relative.protocol) {\r\n      relative.hostname = null;\r\n      relative.port = null;\r\n      result.auth = null;\r\n      if (relative.host) {\r\n        if (relPath[0] === '') relPath[0] = relative.host;\r\n        else relPath.unshift(relative.host);\r\n      }\r\n      relative.host = null;\r\n    }\r\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\r\n  }\r\n\r\n  if (isRelAbs) {\r\n    // it's absolute.\r\n    if (relative.host || relative.host === '') {\r\n      if (result.host !== relative.host) result.auth = null;\r\n      result.host = relative.host;\r\n      result.port = relative.port;\r\n    }\r\n    if (relative.hostname || relative.hostname === '') {\r\n      if (result.hostname !== relative.hostname) result.auth = null;\r\n      result.hostname = relative.hostname;\r\n    }\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n    srcPath = relPath;\r\n    // Fall through to the dot-handling below.\r\n  } else if (relPath.length) {\r\n    // it's relative\r\n    // throw away the existing file, and take the new path instead.\r\n    if (!srcPath) srcPath = [];\r\n    srcPath.pop();\r\n    srcPath = srcPath.concat(relPath);\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n  } else if (relative.search !== null && relative.search !== undefined) {\r\n    // Just pull out the search.\r\n    // like href='?foo'.\r\n    // Put this after the other two cases because it simplifies the booleans\r\n    if (noLeadingSlashes) {\r\n      result.hostname = result.host = srcPath.shift();\r\n      // Occasionally the auth can get stuck only in host.\r\n      // This especially happens in cases like\r\n      // url.resolveObject('mailto:local1@domain1', 'local2@domain2')\r\n      const authInHost =\r\n        result.host && result.host.indexOf('@') > 0 && result.host.split('@');\r\n      if (authInHost) {\r\n        result.auth = authInHost.shift();\r\n        result.host = result.hostname = authInHost.shift();\r\n      }\r\n    }\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n    // To support http.request\r\n    if (result.pathname !== null || result.search !== null) {\r\n      result.path = (result.pathname ? result.pathname : '') +\r\n                    (result.search ? result.search : '');\r\n    }\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  if (!srcPath.length) {\r\n    // No path at all. All other things were already handled above.\r\n    result.pathname = null;\r\n    // To support http.request\r\n    if (result.search) {\r\n      result.path = '/' + result.search;\r\n    } else {\r\n      result.path = null;\r\n    }\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  // If a url ENDs in . or .., then it must get a trailing slash.\r\n  // however, if it ends in anything else non-slashy,\r\n  // then it must NOT get a trailing slash.\r\n  let last = srcPath.slice(-1)[0];\r\n  const hasTrailingSlash = (\r\n    ((result.host || relative.host || srcPath.length > 1) &&\r\n    (last === '.' || last === '..')) || last === '');\r\n\r\n  // Strip single dots, resolve double dots to parent dir\r\n  // if the path tries to go above the root, `up` ends up > 0\r\n  let up = 0;\r\n  for (let i = srcPath.length - 1; i >= 0; i--) {\r\n    last = srcPath[i];\r\n    if (last === '.') {\r\n      spliceOne(srcPath, i);\r\n    } else if (last === '..') {\r\n      spliceOne(srcPath, i);\r\n      up++;\r\n    } else if (up) {\r\n      spliceOne(srcPath, i);\r\n      up--;\r\n    }\r\n  }\r\n\r\n  // If the path is allowed to go above the root, restore leading ..s\r\n  if (!mustEndAbs && !removeAllDots) {\r\n    while (up--) {\r\n      srcPath.unshift('..');\r\n    }\r\n  }\r\n\r\n  if (mustEndAbs && srcPath[0] !== '' &&\r\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\r\n    srcPath.unshift('');\r\n  }\r\n\r\n  if (hasTrailingSlash && (srcPath.join('/').slice(-1) !== '/')) {\r\n    srcPath.push('');\r\n  }\r\n\r\n  const isAbsolute = srcPath[0] === '' ||\r\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\r\n\r\n  // put the host back\r\n  if (noLeadingSlashes) {\r\n    result.hostname =\r\n      result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';\r\n    // Occasionally the auth can get stuck only in host.\r\n    // This especially happens in cases like\r\n    // url.resolveObject('mailto:local1@domain1', 'local2@domain2')\r\n    const authInHost = result.host && result.host.indexOf('@') > 0 ?\r\n      result.host.split('@') : false;\r\n    if (authInHost) {\r\n      result.auth = authInHost.shift();\r\n      result.host = result.hostname = authInHost.shift();\r\n    }\r\n  }\r\n\r\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\r\n\r\n  if (mustEndAbs && !isAbsolute) {\r\n    srcPath.unshift('');\r\n  }\r\n\r\n  if (!srcPath.length) {\r\n    result.pathname = null;\r\n    result.path = null;\r\n  } else {\r\n    result.pathname = srcPath.join('/');\r\n  }\r\n\r\n  // To support request.http\r\n  if (result.pathname !== null || result.search !== null) {\r\n    result.path = (result.pathname ? result.pathname : '') +\r\n                  (result.search ? result.search : '');\r\n  }\r\n  result.auth = relative.auth || result.auth;\r\n  result.slashes = result.slashes || relative.slashes;\r\n  result.href = result.format();\r\n  return result;\r\n};\r\n\r\nUrl.prototype.parseHost = function parseHost() {\r\n  let host = this.host;\r\n  let port = portPattern.exec(host);\r\n  if (port) {\r\n    port = port[0];\r\n    if (port !== ':') {\r\n      this.port = port.slice(1);\r\n    }\r\n    host = host.slice(0, host.length - port.length);\r\n  }\r\n  if (host) this.hostname = host;\r\n};\r\n\r\n// When used internally, we are not obligated to associate TypeError with\r\n// this function, so non-strings can be rejected by underlying implementation.\r\n// Public API has to validate input and throw appropriate error.\r\nfunction pathToFileURL(path, options) {\r\n  validateString(path, 'path');\r\n\r\n  return _pathToFileURL(path, options);\r\n}\r\n\r\nmodule.exports = {\r\n  // Original API\r\n  Url,\r\n  parse: urlParse,\r\n  resolve: urlResolve,\r\n  resolveObject: urlResolveObject,\r\n  format: urlFormat,\r\n\r\n  // WHATWG API\r\n  URL,\r\n  URLSearchParams,\r\n  domainToASCII,\r\n  domainToUnicode,\r\n\r\n  // Utilities\r\n  pathToFileURL,\r\n  fileURLToPath,\r\n  urlToHttpOptions,\r\n};\r\n"
  },
  "62": {
    "metadata": {
      "scriptId": "62",
      "url": "node:internal/modules/cjs/loader",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1706,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "8e6d5e49e7c1c0410f04d3c87310f28ad8b44c7338f4edafe7ce5b2ab562e592",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 57012,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/modules/cjs/loader"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypePushApply,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSplice,\r\n  ArrayPrototypeUnshift,\r\n  ArrayPrototypeUnshiftApply,\r\n  Boolean,\r\n  Error,\r\n  JSONParse,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ObjectGetPrototypeOf,\r\n  ObjectKeys,\r\n  ObjectPrototype,\r\n  ObjectPrototypeHasOwnProperty,\r\n  ObjectSetPrototypeOf,\r\n  Proxy,\r\n  ReflectApply,\r\n  ReflectSet,\r\n  RegExpPrototypeExec,\r\n  SafeMap,\r\n  String,\r\n  StringPrototypeCharAt,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeRepeat,\r\n  StringPrototypeSlice,\r\n  StringPrototypeSplit,\r\n  StringPrototypeStartsWith,\r\n  Symbol,\r\n} = primordials;\r\nconst {\r\n  privateSymbols: {\r\n    module_source_private_symbol,\r\n    module_export_names_private_symbol,\r\n    module_circular_visited_private_symbol,\r\n    module_export_private_symbol,\r\n    module_parent_private_symbol,\r\n  },\r\n} = internalBinding('util');\r\n\r\nconst { kEvaluated } = internalBinding('module_wrap');\r\n\r\n// Internal properties for Module instances.\r\n/**\r\n * Cached {@link Module} source string.\r\n */\r\nconst kModuleSource = module_source_private_symbol;\r\n/**\r\n * Cached {@link Module} export names for ESM loader.\r\n */\r\nconst kModuleExportNames = module_export_names_private_symbol;\r\n/**\r\n * {@link Module} circular dependency visited flag.\r\n */\r\nconst kModuleCircularVisited = module_circular_visited_private_symbol;\r\n/**\r\n * {@link Module} export object snapshot for ESM loader.\r\n */\r\nconst kModuleExport = module_export_private_symbol;\r\n/**\r\n * {@link Module} parent module.\r\n */\r\nconst kModuleParent = module_parent_private_symbol;\r\n\r\nconst kIsMainSymbol = Symbol('kIsMainSymbol');\r\nconst kIsCachedByESMLoader = Symbol('kIsCachedByESMLoader');\r\nconst kRequiredModuleSymbol = Symbol('kRequiredModuleSymbol');\r\nconst kIsExecuting = Symbol('kIsExecuting');\r\n// Set first due to cycle with ESM loader functions.\r\nmodule.exports = {\r\n  kModuleSource,\r\n  kModuleExport,\r\n  kModuleExportNames,\r\n  kModuleCircularVisited,\r\n  initializeCJS,\r\n  Module,\r\n  wrapSafe,\r\n  wrapModuleLoad,\r\n  kIsMainSymbol,\r\n  kIsCachedByESMLoader,\r\n  kRequiredModuleSymbol,\r\n  kIsExecuting,\r\n};\r\n\r\nconst { BuiltinModule } = require('internal/bootstrap/realm');\r\nconst {\r\n  maybeCacheSourceMap,\r\n} = require('internal/source_map/source_map_cache');\r\nconst { pathToFileURL, fileURLToPath, isURL } = require('internal/url');\r\nconst {\r\n  pendingDeprecate,\r\n  emitExperimentalWarning,\r\n  kEmptyObject,\r\n  setOwnProperty,\r\n  getLazy,\r\n} = require('internal/util');\r\nconst {\r\n  makeContextifyScript,\r\n  runScriptInThisContext,\r\n} = require('internal/vm');\r\nconst {\r\n  containsModuleSyntax,\r\n  compileFunctionForCJSLoader,\r\n} = internalBinding('contextify');\r\n\r\nconst assert = require('internal/assert');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst { internalModuleStat } = internalBinding('fs');\r\nconst { safeGetenv } = internalBinding('credentials');\r\nconst {\r\n  getCjsConditions,\r\n  initializeCjsConditions,\r\n  loadBuiltinModule,\r\n  makeRequireFunction,\r\n  setHasStartedUserCJSExecution,\r\n  stripBOM,\r\n  toRealPath,\r\n} = require('internal/modules/helpers');\r\nconst packageJsonReader = require('internal/modules/package_json_reader');\r\nconst { getOptionValue, getEmbedderOptions } = require('internal/options');\r\nconst shouldReportRequiredModules = getLazy(() => process.env.WATCH_REPORT_DEPENDENCIES);\r\n\r\nconst permission = require('internal/process/permission');\r\nconst {\r\n  vm_dynamic_import_default_internal,\r\n} = internalBinding('symbols');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_MODULE_SPECIFIER,\r\n    ERR_REQUIRE_CYCLE_MODULE,\r\n    ERR_REQUIRE_ESM,\r\n    ERR_UNKNOWN_BUILTIN_MODULE,\r\n  },\r\n  setArrowMessage,\r\n} = require('internal/errors');\r\nconst { validateString } = require('internal/validators');\r\n\r\nconst {\r\n  CHAR_BACKWARD_SLASH,\r\n  CHAR_COLON,\r\n  CHAR_DOT,\r\n  CHAR_FORWARD_SLASH,\r\n} = require('internal/constants');\r\n\r\nconst {\r\n  isProxy,\r\n} = require('internal/util/types');\r\n\r\nconst { debuglog, debugWithTimer } = require('internal/util/debuglog');\r\n\r\nlet { startTimer, endTimer } = debugWithTimer('module_timer', (start, end) => {\r\n  startTimer = start;\r\n  endTimer = end;\r\n});\r\n\r\nconst isWindows = process.platform === 'win32';\r\n\r\nconst relativeResolveCache = { __proto__: null };\r\n\r\nlet requireDepth = 0;\r\nlet isPreloading = false;\r\nlet statCache = null;\r\n\r\n/**\r\n * Internal method to add tracing capabilities for Module._load.\r\n *\r\n * See more {@link Module._load}\r\n */\r\nfunction wrapModuleLoad(request, parent, isMain) {\r\n  const logLabel = `[${parent?.id || ''}] [${request}]`;\r\n  const traceLabel = `require('${request}')`;\r\n\r\n  startTimer(logLabel, traceLabel);\r\n\r\n  try {\r\n    return Module._load(request, parent, isMain);\r\n  } finally {\r\n    endTimer(logLabel, traceLabel);\r\n  }\r\n}\r\n\r\n/**\r\n * Get a path's properties, using an in-memory cache to minimize lookups.\r\n * @param {string} filename Absolute path to the file\r\n */\r\nfunction stat(filename) {\r\n  filename = path.toNamespacedPath(filename);\r\n  if (statCache !== null) {\r\n    const result = statCache.get(filename);\r\n    if (result !== undefined) { return result; }\r\n  }\r\n  const result = internalModuleStat(filename);\r\n  if (statCache !== null && result >= 0) {\r\n    // Only set cache when `internalModuleStat(filename)` succeeds.\r\n    statCache.set(filename, result);\r\n  }\r\n  return result;\r\n}\r\n\r\nlet _stat = stat;\r\nObjectDefineProperty(Module, '_stat', {\r\n  __proto__: null,\r\n  get() { return _stat; },\r\n  set(stat) {\r\n    emitExperimentalWarning('Module._stat');\r\n    _stat = stat;\r\n    return true;\r\n  },\r\n  configurable: true,\r\n});\r\n\r\n/**\r\n * Update the parent's children array with the child module.\r\n * @param {Module} parent Module requiring the children\r\n * @param {Module} child Module being required\r\n * @param {boolean} scan Add the child to the parent's children if not already present\r\n */\r\nfunction updateChildren(parent, child, scan) {\r\n  const children = parent?.children;\r\n  if (children && !(scan && ArrayPrototypeIncludes(children, child))) {\r\n    ArrayPrototypePush(children, child);\r\n  }\r\n}\r\n\r\n/**\r\n * Tell the watch mode that a module was required.\r\n * @param {string} filename Absolute path of the module\r\n */\r\nfunction reportModuleToWatchMode(filename) {\r\n  if (shouldReportRequiredModules() && process.send) {\r\n    process.send({ 'watch:require': [filename] });\r\n  }\r\n}\r\n\r\n/**\r\n * Tell the watch mode that a module was not found.\r\n * @param {string} basePath The absolute path that errored\r\n * @param {string[]} extensions The extensions that were tried\r\n */\r\nfunction reportModuleNotFoundToWatchMode(basePath, extensions) {\r\n  if (shouldReportRequiredModules() && process.send) {\r\n    process.send({ 'watch:require': ArrayPrototypeMap(extensions, (ext) => path.resolve(`${basePath}${ext}`)) });\r\n  }\r\n}\r\n\r\n/**\r\n * Create a new module instance.\r\n * @param {string} id\r\n * @param {Module} parent\r\n */\r\nfunction Module(id = '', parent) {\r\n  this.id = id;\r\n  this.path = path.dirname(id);\r\n  setOwnProperty(this, 'exports', {});\r\n  this[kModuleParent] = parent;\r\n  updateChildren(parent, this, false);\r\n  this.filename = null;\r\n  this.loaded = false;\r\n  this.children = [];\r\n}\r\n\r\n/** @type {Record<string, Module>} */\r\nModule._cache = { __proto__: null };\r\n/** @type {Record<string, string>} */\r\nModule._pathCache = { __proto__: null };\r\n/** @type {Record<string, (module: Module, filename: string) => void>} */\r\nModule._extensions = { __proto__: null };\r\n/** @type {string[]} */\r\nlet modulePaths = [];\r\n/** @type {string[]} */\r\nModule.globalPaths = [];\r\n\r\nlet patched = false;\r\n\r\n/**\r\n * Add the CommonJS wrapper around a module's source code.\r\n * @param {string} script Module source code\r\n */\r\nlet wrap = function(script) { // eslint-disable-line func-style\r\n  return Module.wrapper[0] + script + Module.wrapper[1];\r\n};\r\n\r\nconst wrapper = [\r\n  '(function (exports, require, module, __filename, __dirname) { ',\r\n  '\\n});',\r\n];\r\n\r\nlet wrapperProxy = new Proxy(wrapper, {\r\n  __proto__: null,\r\n\r\n  set(target, property, value, receiver) {\r\n    patched = true;\r\n    return ReflectSet(target, property, value, receiver);\r\n  },\r\n\r\n  defineProperty(target, property, descriptor) {\r\n    patched = true;\r\n    return ObjectDefineProperty(target, property, descriptor);\r\n  },\r\n});\r\n\r\nObjectDefineProperty(Module, 'wrap', {\r\n  __proto__: null,\r\n  get() {\r\n    return wrap;\r\n  },\r\n\r\n  set(value) {\r\n    patched = true;\r\n    wrap = value;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(Module, 'wrapper', {\r\n  __proto__: null,\r\n  get() {\r\n    return wrapperProxy;\r\n  },\r\n\r\n  set(value) {\r\n    patched = true;\r\n    wrapperProxy = value;\r\n  },\r\n});\r\n\r\nconst isPreloadingDesc = { get() { return isPreloading; } };\r\nObjectDefineProperty(Module.prototype, 'isPreloading', isPreloadingDesc);\r\nObjectDefineProperty(BuiltinModule.prototype, 'isPreloading', isPreloadingDesc);\r\n\r\n/**\r\n * Get the parent of the current module from our cache.\r\n * @this {Module}\r\n */\r\nfunction getModuleParent() {\r\n  return this[kModuleParent];\r\n}\r\n\r\n/**\r\n * Set the parent of the current module in our cache.\r\n * @this {Module}\r\n * @param {Module} value\r\n */\r\nfunction setModuleParent(value) {\r\n  this[kModuleParent] = value;\r\n}\r\n\r\nlet debug = debuglog('module', (fn) => {\r\n  debug = fn;\r\n});\r\n\r\nObjectDefineProperty(Module.prototype, 'parent', {\r\n  __proto__: null,\r\n  get: pendingDeprecate(\r\n    getModuleParent,\r\n    'module.parent is deprecated due to accuracy issues. Please use ' +\r\n      'require.main to find program entry point instead.',\r\n    'DEP0144',\r\n  ),\r\n  set: pendingDeprecate(\r\n    setModuleParent,\r\n    'module.parent is deprecated due to accuracy issues. Please use ' +\r\n      'require.main to find program entry point instead.',\r\n    'DEP0144',\r\n  ),\r\n});\r\nModule._debug = pendingDeprecate(debug, 'Module._debug is deprecated.', 'DEP0077');\r\nModule.isBuiltin = BuiltinModule.isBuiltin;\r\n\r\n/**\r\n * Prepare to run CommonJS code.\r\n * This function is called during pre-execution, before any user code is run.\r\n */\r\nfunction initializeCJS() {\r\n  // This need to be done at runtime in case --expose-internals is set.\r\n  const builtinModules = BuiltinModule.getCanBeRequiredByUsersWithoutSchemeList();\r\n  Module.builtinModules = ObjectFreeze(builtinModules);\r\n\r\n  initializeCjsConditions();\r\n\r\n  if (!getEmbedderOptions().noGlobalSearchPaths) {\r\n    Module._initPaths();\r\n  }\r\n\r\n  // TODO(joyeecheung): deprecate this in favor of a proper hook?\r\n  Module.runMain =\r\n    require('internal/modules/run_main').executeUserEntryPoint;\r\n\r\n  if (getOptionValue('--experimental-require-module')) {\r\n    emitExperimentalWarning('Support for loading ES Module in require()');\r\n    Module._extensions['.mjs'] = loadESMFromCJS;\r\n  }\r\n}\r\n\r\n// Given a module name, and a list of paths to test, returns the first\r\n// matching file in the following precedence.\r\n//\r\n// require(\"a.<ext>\")\r\n//   -> a.<ext>\r\n//\r\n// require(\"a\")\r\n//   -> a\r\n//   -> a.<ext>\r\n//   -> a/index.<ext>\r\n\r\nlet _readPackage = packageJsonReader.readPackage;\r\nObjectDefineProperty(Module, '_readPackage', {\r\n  __proto__: null,\r\n  get() { return _readPackage; },\r\n  set(readPackage) {\r\n    emitExperimentalWarning('Module._readPackage');\r\n    _readPackage = readPackage;\r\n    return true;\r\n  },\r\n  configurable: true,\r\n});\r\n\r\n/**\r\n * Try to load a specifier as a package.\r\n * @param {string} requestPath The path to what we are trying to load\r\n * @param {string[]} exts File extensions to try appending in order to resolve the file\r\n * @param {boolean} isMain Whether the file is the main entry point of the app\r\n * @param {string} originalPath The specifier passed to `require`\r\n */\r\nfunction tryPackage(requestPath, exts, isMain, originalPath) {\r\n  const { main: pkg, pjsonPath } = _readPackage(requestPath);\r\n\r\n  if (!pkg) {\r\n    return tryExtensions(path.resolve(requestPath, 'index'), exts, isMain);\r\n  }\r\n\r\n  const filename = path.resolve(requestPath, pkg);\r\n  let actual = tryFile(filename, isMain) ||\r\n    tryExtensions(filename, exts, isMain) ||\r\n    tryExtensions(path.resolve(filename, 'index'), exts, isMain);\r\n  if (actual === false) {\r\n    actual = tryExtensions(path.resolve(requestPath, 'index'), exts, isMain);\r\n    if (!actual) {\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      const err = new Error(\r\n        `Cannot find module '${filename}'. ` +\r\n        'Please verify that the package.json has a valid \"main\" entry',\r\n      );\r\n      err.code = 'MODULE_NOT_FOUND';\r\n      err.path = pjsonPath;\r\n      err.requestPath = originalPath;\r\n      // TODO(BridgeAR): Add the requireStack as well.\r\n      throw err;\r\n    } else {\r\n      process.emitWarning(\r\n        `Invalid 'main' field in '${pjsonPath}' of '${pkg}'. ` +\r\n          'Please either fix that or report it to the module author',\r\n        'DeprecationWarning',\r\n        'DEP0128',\r\n      );\r\n    }\r\n  }\r\n  return actual;\r\n}\r\n\r\n/**\r\n * Check if the file exists and is not a directory if using `--preserve-symlinks` and `isMain` is false or\r\n * `--preserve-symlinks-main` and `isMain` is true , keep symlinks intact, otherwise resolve to the absolute realpath.\r\n * @param {string} requestPath The path to the file to load.\r\n * @param {boolean} isMain Whether the file is the main module.\r\n */\r\nfunction tryFile(requestPath, isMain) {\r\n  const rc = _stat(requestPath);\r\n  if (rc !== 0) { return; }\r\n  if (getOptionValue(isMain ? '--preserve-symlinks-main' : '--preserve-symlinks')) {\r\n    return path.resolve(requestPath);\r\n  }\r\n  return toRealPath(requestPath);\r\n}\r\n\r\n/**\r\n * Given a path, check if the file exists with any of the set extensions.\r\n * @param {string} basePath The path and filename without extension\r\n * @param {string[]} exts The extensions to try\r\n * @param {boolean} isMain Whether the module is the main module\r\n */\r\nfunction tryExtensions(basePath, exts, isMain) {\r\n  for (let i = 0; i < exts.length; i++) {\r\n    const filename = tryFile(basePath + exts[i], isMain);\r\n\r\n    if (filename) {\r\n      return filename;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Find the longest (possibly multi-dot) extension registered in `Module._extensions`.\r\n * @param {string} filename The filename to find the longest registered extension for.\r\n */\r\nfunction findLongestRegisteredExtension(filename) {\r\n  const name = path.basename(filename);\r\n  let currentExtension;\r\n  let index;\r\n  let startIndex = 0;\r\n  while ((index = StringPrototypeIndexOf(name, '.', startIndex)) !== -1) {\r\n    startIndex = index + 1;\r\n    if (index === 0) { continue; } // Skip dotfiles like .gitignore\r\n    currentExtension = StringPrototypeSlice(name, index);\r\n    if (Module._extensions[currentExtension]) { return currentExtension; }\r\n  }\r\n  return '.js';\r\n}\r\n\r\n/**\r\n * Tries to get the absolute file path of the parent module.\r\n * @param {Module} parent The parent module object.\r\n */\r\nfunction trySelfParentPath(parent) {\r\n  if (!parent) { return false; }\r\n\r\n  if (parent.filename) {\r\n    return parent.filename;\r\n  } else if (parent.id === '<repl>' || parent.id === 'internal/preload') {\r\n    try {\r\n      return process.cwd() + path.sep;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Attempt to resolve a module request using the parent module package metadata.\r\n * @param {string} parentPath The path of the parent module\r\n * @param {string} request The module request to resolve\r\n */\r\nfunction trySelf(parentPath, request) {\r\n  if (!parentPath) { return false; }\r\n\r\n  const pkg = packageJsonReader.getNearestParentPackageJSON(parentPath);\r\n  if (pkg?.data.exports === undefined || pkg.data.name === undefined) {\r\n    return false;\r\n  }\r\n\r\n  let expansion;\r\n  if (request === pkg.data.name) {\r\n    expansion = '.';\r\n  } else if (StringPrototypeStartsWith(request, `${pkg.data.name}/`)) {\r\n    expansion = '.' + StringPrototypeSlice(request, pkg.data.name.length);\r\n  } else {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    const { packageExportsResolve } = require('internal/modules/esm/resolve');\r\n    return finalizeEsmResolution(packageExportsResolve(\r\n      pathToFileURL(pkg.path + '/package.json'), expansion, pkg.data,\r\n      pathToFileURL(parentPath), getCjsConditions()), parentPath, pkg.path);\r\n  } catch (e) {\r\n    if (e.code === 'ERR_MODULE_NOT_FOUND') {\r\n      throw createEsmNotFoundErr(request, pkg.path + '/package.json');\r\n    }\r\n    throw e;\r\n  }\r\n}\r\n\r\n/**\r\n * This only applies to requests of a specific form:\r\n * 1. `name/.*`\r\n * 2. `@scope/name/.*`\r\n */\r\nconst EXPORTS_PATTERN = /^((?:@[^/\\\\%]+\\/)?[^./\\\\%][^/\\\\%]*)(\\/.*)?$/;\r\n\r\n/**\r\n * Resolves the exports for a given module path and request.\r\n * @param {string} nmPath The path to the module.\r\n * @param {string} request The request for the module.\r\n */\r\nfunction resolveExports(nmPath, request) {\r\n  // The implementation's behavior is meant to mirror resolution in ESM.\r\n  const { 1: name, 2: expansion = '' } =\r\n    RegExpPrototypeExec(EXPORTS_PATTERN, request) || kEmptyObject;\r\n  if (!name) { return; }\r\n  const pkgPath = path.resolve(nmPath, name);\r\n  const pkg = _readPackage(pkgPath);\r\n  if (pkg.exists && pkg.exports != null) {\r\n    try {\r\n      const { packageExportsResolve } = require('internal/modules/esm/resolve');\r\n      return finalizeEsmResolution(packageExportsResolve(\r\n        pathToFileURL(pkgPath + '/package.json'), '.' + expansion, pkg, null,\r\n        getCjsConditions()), null, pkgPath);\r\n    } catch (e) {\r\n      if (e.code === 'ERR_MODULE_NOT_FOUND') {\r\n        throw createEsmNotFoundErr(request, pkgPath + '/package.json');\r\n      }\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n\r\n// We don't cache this in case user extends the extensions.\r\nfunction getDefaultExtensions() {\r\n  const extensions = ObjectKeys(Module._extensions);\r\n  if (!getOptionValue('--experimental-require-module')) {\r\n    return extensions;\r\n  }\r\n  // If the .mjs extension is added by --experimental-require-module,\r\n  // remove it from the supported default extensions to maintain\r\n  // compatibility.\r\n  // TODO(joyeecheung): allow both .mjs and .cjs?\r\n  return ArrayPrototypeFilter(extensions, (ext) => ext !== '.mjs' || Module._extensions['.mjs'] !== loadESMFromCJS);\r\n}\r\n\r\n/**\r\n * Get the absolute path to a module.\r\n * @param {string} request Relative or absolute file path\r\n * @param {Array<string>} paths Folders to search as file paths\r\n * @param {boolean} isMain Whether the request is the main app entry point\r\n * @returns {string | false}\r\n */\r\nModule._findPath = function(request, paths, isMain) {\r\n  const absoluteRequest = path.isAbsolute(request);\r\n  if (absoluteRequest) {\r\n    paths = [''];\r\n  } else if (!paths || paths.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  const cacheKey = request + '\\x00' + ArrayPrototypeJoin(paths, '\\x00');\r\n  const entry = Module._pathCache[cacheKey];\r\n  if (entry) {\r\n    return entry;\r\n  }\r\n\r\n  let exts;\r\n  const trailingSlash = request.length > 0 &&\r\n    (StringPrototypeCharCodeAt(request, request.length - 1) === CHAR_FORWARD_SLASH || (\r\n      StringPrototypeCharCodeAt(request, request.length - 1) === CHAR_DOT &&\r\n      (\r\n        request.length === 1 ||\r\n        StringPrototypeCharCodeAt(request, request.length - 2) === CHAR_FORWARD_SLASH ||\r\n        (StringPrototypeCharCodeAt(request, request.length - 2) === CHAR_DOT && (\r\n          request.length === 2 ||\r\n          StringPrototypeCharCodeAt(request, request.length - 3) === CHAR_FORWARD_SLASH\r\n        ))\r\n      )\r\n    ));\r\n\r\n  const isRelative = StringPrototypeCharCodeAt(request, 0) === CHAR_DOT &&\r\n    (\r\n      request.length === 1 ||\r\n      StringPrototypeCharCodeAt(request, 1) === CHAR_FORWARD_SLASH ||\r\n      (isWindows && StringPrototypeCharCodeAt(request, 1) === CHAR_BACKWARD_SLASH) ||\r\n      (StringPrototypeCharCodeAt(request, 1) === CHAR_DOT && ((\r\n        request.length === 2 ||\r\n        StringPrototypeCharCodeAt(request, 2) === CHAR_FORWARD_SLASH) ||\r\n        (isWindows && StringPrototypeCharCodeAt(request, 2) === CHAR_BACKWARD_SLASH)))\r\n    );\r\n  let insidePath = true;\r\n  if (isRelative) {\r\n    const normalizedRequest = path.normalize(request);\r\n    if (StringPrototypeStartsWith(normalizedRequest, '..')) {\r\n      insidePath = false;\r\n    }\r\n  }\r\n\r\n  // For each path\r\n  for (let i = 0; i < paths.length; i++) {\r\n    // Don't search further if path doesn't exist\r\n    // or doesn't have permission to it\r\n    const curPath = paths[i];\r\n    if (insidePath && curPath &&\r\n      ((permission.isEnabled() && !permission.has('fs.read', curPath)) || _stat(curPath) < 1)\r\n    ) {\r\n      continue;\r\n    }\r\n\r\n    if (!absoluteRequest) {\r\n      const exportsResolved = resolveExports(curPath, request);\r\n      if (exportsResolved) {\r\n        return exportsResolved;\r\n      }\r\n    }\r\n\r\n    const basePath = path.resolve(curPath, request);\r\n    let filename;\r\n\r\n    const rc = _stat(basePath);\r\n    if (!trailingSlash) {\r\n      if (rc === 0) {  // File.\r\n        if (!isMain) {\r\n          if (getOptionValue('--preserve-symlinks')) {\r\n            filename = path.resolve(basePath);\r\n          } else {\r\n            filename = toRealPath(basePath);\r\n          }\r\n        } else if (getOptionValue('--preserve-symlinks-main')) {\r\n          // For the main module, we use the --preserve-symlinks-main flag instead\r\n          // mainly for backward compatibility, as the preserveSymlinks flag\r\n          // historically has not applied to the main module.  Most likely this\r\n          // was intended to keep .bin/ binaries working, as following those\r\n          // symlinks is usually required for the imports in the corresponding\r\n          // files to resolve; that said, in some use cases following symlinks\r\n          // causes bigger problems which is why the --preserve-symlinks-main option\r\n          // is needed.\r\n          filename = path.resolve(basePath);\r\n        } else {\r\n          filename = toRealPath(basePath);\r\n        }\r\n      }\r\n\r\n      if (!filename) {\r\n        // Try it with each of the extensions\r\n        if (exts === undefined) {\r\n          exts = getDefaultExtensions();\r\n        }\r\n        filename = tryExtensions(basePath, exts, isMain);\r\n      }\r\n    }\r\n\r\n    if (!filename && rc === 1) {  // Directory.\r\n      // try it with each of the extensions at \"index\"\r\n      if (exts === undefined) {\r\n        exts = getDefaultExtensions();\r\n      }\r\n      filename = tryPackage(basePath, exts, isMain, request);\r\n    }\r\n\r\n    if (filename) {\r\n      Module._pathCache[cacheKey] = filename;\r\n      return filename;\r\n    }\r\n\r\n    const extensions = [''];\r\n    if (exts !== undefined) {\r\n      ArrayPrototypePushApply(extensions, exts);\r\n    }\r\n    reportModuleNotFoundToWatchMode(basePath, extensions);\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/** `node_modules` character codes reversed */\r\nconst nmChars = [ 115, 101, 108, 117, 100, 111, 109, 95, 101, 100, 111, 110 ];\r\nconst nmLen = nmChars.length;\r\nif (isWindows) {\r\n  /**\r\n   * Get the paths to the `node_modules` folder for a given path.\r\n   * @param {string} from `__dirname` of the module\r\n   */\r\n  Module._nodeModulePaths = function(from) {\r\n    // Guarantee that 'from' is absolute.\r\n    from = path.resolve(from);\r\n\r\n    // note: this approach *only* works when the path is guaranteed\r\n    // to be absolute.  Doing a fully-edge-case-correct path.split\r\n    // that works on both Windows and Posix is non-trivial.\r\n\r\n    // return root node_modules when path is 'D:\\\\'.\r\n    // path.resolve will make sure from.length >=3 in Windows.\r\n    if (StringPrototypeCharCodeAt(from, from.length - 1) ===\r\n          CHAR_BACKWARD_SLASH &&\r\n        StringPrototypeCharCodeAt(from, from.length - 2) === CHAR_COLON) {\r\n      return [from + 'node_modules'];\r\n    }\r\n\r\n    /** @type {string[]} */\r\n    const paths = [];\r\n    for (let i = from.length - 1, p = 0, last = from.length; i >= 0; --i) {\r\n      const code = StringPrototypeCharCodeAt(from, i);\r\n      // The path segment separator check ('\\' and '/') was used to get\r\n      // node_modules path for every path segment.\r\n      // Use colon as an extra condition since we can get node_modules\r\n      // path for drive root like 'C:\\node_modules' and don't need to\r\n      // parse drive name.\r\n      if (code === CHAR_BACKWARD_SLASH ||\r\n          code === CHAR_FORWARD_SLASH ||\r\n          code === CHAR_COLON) {\r\n        if (p !== nmLen) {\r\n          ArrayPrototypePush(\r\n            paths,\r\n            StringPrototypeSlice(from, 0, last) + '\\\\node_modules',\r\n          );\r\n        }\r\n        last = i;\r\n        p = 0;\r\n      } else if (p !== -1) {\r\n        if (nmChars[p] === code) {\r\n          ++p;\r\n        } else {\r\n          p = -1;\r\n        }\r\n      }\r\n    }\r\n\r\n    return paths;\r\n  };\r\n} else { // posix\r\n  /**\r\n   * Get the paths to the `node_modules` folder for a given path.\r\n   * @param {string} from `__dirname` of the module\r\n   */\r\n  Module._nodeModulePaths = function(from) {\r\n    // Guarantee that 'from' is absolute.\r\n    from = path.resolve(from);\r\n    // Return early not only to avoid unnecessary work, but to *avoid* returning\r\n    // an array of two items for a root: [ '//node_modules', '/node_modules' ]\r\n    if (from === '/') {\r\n      return ['/node_modules'];\r\n    }\r\n\r\n    // note: this approach *only* works when the path is guaranteed\r\n    // to be absolute.  Doing a fully-edge-case-correct path.split\r\n    // that works on both Windows and Posix is non-trivial.\r\n    /** @type {string[]} */\r\n    const paths = [];\r\n    for (let i = from.length - 1, p = 0, last = from.length; i >= 0; --i) {\r\n      const code = StringPrototypeCharCodeAt(from, i);\r\n      if (code === CHAR_FORWARD_SLASH) {\r\n        if (p !== nmLen) {\r\n          ArrayPrototypePush(\r\n            paths,\r\n            StringPrototypeSlice(from, 0, last) + '/node_modules',\r\n          );\r\n        }\r\n        last = i;\r\n        p = 0;\r\n      } else if (p !== -1) {\r\n        if (nmChars[p] === code) {\r\n          ++p;\r\n        } else {\r\n          p = -1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Append /node_modules to handle root paths.\r\n    ArrayPrototypePush(paths, '/node_modules');\r\n\r\n    return paths;\r\n  };\r\n}\r\n\r\n/**\r\n * Get the paths for module resolution.\r\n * @param {string} request\r\n * @param {Module} parent\r\n */\r\nModule._resolveLookupPaths = function(request, parent) {\r\n  if (BuiltinModule.normalizeRequirableId(request)) {\r\n    debug('looking for %j in []', request);\r\n    return null;\r\n  }\r\n\r\n  // Check for node modules paths.\r\n  if (StringPrototypeCharAt(request, 0) !== '.' ||\r\n      (request.length > 1 &&\r\n      StringPrototypeCharAt(request, 1) !== '.' &&\r\n      StringPrototypeCharAt(request, 1) !== '/' &&\r\n      (!isWindows || StringPrototypeCharAt(request, 1) !== '\\\\'))) {\r\n\r\n    /** @type {string[]} */\r\n    let paths;\r\n    if (parent?.paths?.length) {\r\n      paths = ArrayPrototypeSlice(modulePaths);\r\n      ArrayPrototypeUnshiftApply(paths, parent.paths);\r\n    } else {\r\n      paths = modulePaths;\r\n    }\r\n\r\n    debug('looking for %j in %j', request, paths);\r\n    return paths.length > 0 ? paths : null;\r\n  }\r\n\r\n  // In REPL, parent.filename is null.\r\n  if (!parent || !parent.id || !parent.filename) {\r\n    // Make require('./path/to/foo') work - normally the path is taken\r\n    // from realpath(__filename) but in REPL there is no filename\r\n    const mainPaths = ['.'];\r\n\r\n    debug('looking for %j in %j', request, mainPaths);\r\n    return mainPaths;\r\n  }\r\n\r\n  debug('RELATIVE: requested: %s from parent.id %s', request, parent.id);\r\n\r\n  const parentDir = [path.dirname(parent.filename)];\r\n  debug('looking for %j', parentDir);\r\n  return parentDir;\r\n};\r\n\r\n/**\r\n * Emits a warning when a non-existent property of module exports is accessed inside a circular dependency.\r\n * @param {string} prop The name of the non-existent property.\r\n */\r\nfunction emitCircularRequireWarning(prop) {\r\n  process.emitWarning(\r\n    `Accessing non-existent property '${String(prop)}' of module exports ` +\r\n    'inside circular dependency',\r\n  );\r\n}\r\n\r\n// A Proxy that can be used as the prototype of a module.exports object and\r\n// warns when non-existent properties are accessed.\r\nconst CircularRequirePrototypeWarningProxy = new Proxy({}, {\r\n  __proto__: null,\r\n\r\n  get(target, prop) {\r\n    // Allow __esModule access in any case because it is used in the output\r\n    // of transpiled code to determine whether something comes from an\r\n    // ES module, and is not used as a regular key of `module.exports`.\r\n    if (prop in target || prop === '__esModule') { return target[prop]; }\r\n    emitCircularRequireWarning(prop);\r\n    return undefined;\r\n  },\r\n\r\n  getOwnPropertyDescriptor(target, prop) {\r\n    if (ObjectPrototypeHasOwnProperty(target, prop) || prop === '__esModule') {\r\n      return ObjectGetOwnPropertyDescriptor(target, prop);\r\n    }\r\n    emitCircularRequireWarning(prop);\r\n    return undefined;\r\n  },\r\n});\r\n\r\n/**\r\n * Returns the exports object for a module that has a circular `require`.\r\n * If the exports object is a plain object, it is wrapped in a proxy that warns\r\n * about circular dependencies.\r\n * @param {Module} module The module instance\r\n */\r\nfunction getExportsForCircularRequire(module) {\r\n  const requiredESM = module[kRequiredModuleSymbol];\r\n  if (requiredESM && requiredESM.getStatus() !== kEvaluated) {\r\n    let message = `Cannot require() ES Module ${module.id} in a cycle.`;\r\n    const parent = module[kModuleParent];\r\n    if (parent) {\r\n      message += ` (from ${parent.filename})`;\r\n    }\r\n    throw new ERR_REQUIRE_CYCLE_MODULE(message);\r\n  }\r\n\r\n  if (module.exports &&\r\n      !isProxy(module.exports) &&\r\n      ObjectGetPrototypeOf(module.exports) === ObjectPrototype &&\r\n      // Exclude transpiled ES6 modules / TypeScript code because those may\r\n      // employ unusual patterns for accessing 'module.exports'. That should\r\n      // be okay because ES6 modules have a different approach to circular\r\n      // dependencies anyway.\r\n      !module.exports.__esModule) {\r\n    // This is later unset once the module is done loading.\r\n    ObjectSetPrototypeOf(\r\n      module.exports, CircularRequirePrototypeWarningProxy);\r\n  }\r\n\r\n  return module.exports;\r\n}\r\n\r\n/**\r\n * Load a module from cache if it exists, otherwise create a new module instance.\r\n * 1. If a module already exists in the cache: return its exports object.\r\n * 2. If the module is native: call\r\n *    `BuiltinModule.prototype.compileForPublicLoader()` and return the exports.\r\n * 3. Otherwise, create a new module for the file and save it to the cache.\r\n *    Then have it load the file contents before returning its exports object.\r\n * @param {string} request Specifier of module to load via `require`\r\n * @param {Module} parent Absolute path of the module importing the child\r\n * @param {boolean} isMain Whether the module is the main entry point\r\n */\r\nModule._load = function(request, parent, isMain) {\r\n  let relResolveCacheIdentifier;\r\n  if (parent) {\r\n    debug('Module._load REQUEST %s parent: %s', request, parent.id);\r\n    // Fast path for (lazy loaded) modules in the same directory. The indirect\r\n    // caching is required to allow cache invalidation without changing the old\r\n    // cache key names.\r\n    relResolveCacheIdentifier = `${parent.path}\\x00${request}`;\r\n    const filename = relativeResolveCache[relResolveCacheIdentifier];\r\n    reportModuleToWatchMode(filename);\r\n    if (filename !== undefined) {\r\n      const cachedModule = Module._cache[filename];\r\n      if (cachedModule !== undefined) {\r\n        updateChildren(parent, cachedModule, true);\r\n        if (!cachedModule.loaded) {\r\n          return getExportsForCircularRequire(cachedModule);\r\n        }\r\n        return cachedModule.exports;\r\n      }\r\n      delete relativeResolveCache[relResolveCacheIdentifier];\r\n    }\r\n  }\r\n\r\n  if (StringPrototypeStartsWith(request, 'node:')) {\r\n    // Slice 'node:' prefix\r\n    const id = StringPrototypeSlice(request, 5);\r\n\r\n    if (!BuiltinModule.canBeRequiredByUsers(id)) {\r\n      throw new ERR_UNKNOWN_BUILTIN_MODULE(request);\r\n    }\r\n\r\n    const module = loadBuiltinModule(id, request);\r\n    return module.exports;\r\n  }\r\n\r\n  const filename = Module._resolveFilename(request, parent, isMain);\r\n  const cachedModule = Module._cache[filename];\r\n  if (cachedModule !== undefined) {\r\n    updateChildren(parent, cachedModule, true);\r\n    if (cachedModule.loaded) {\r\n      return cachedModule.exports;\r\n    }\r\n    // If it's not cached by the ESM loader, the loading request\r\n    // comes from required CJS, and we can consider it a circular\r\n    // dependency when it's cached.\r\n    if (!cachedModule[kIsCachedByESMLoader]) {\r\n      return getExportsForCircularRequire(cachedModule);\r\n    }\r\n    // If it's cached by the ESM loader as a way to indirectly pass\r\n    // the module in to avoid creating it twice, the loading request\r\n    // came from imported CJS. In that case use the kModuleCircularVisited\r\n    // to determine if it's loading or not.\r\n    if (cachedModule[kModuleCircularVisited]) {\r\n      return getExportsForCircularRequire(cachedModule);\r\n    }\r\n    // This is an ESM loader created cache entry, mark it as visited and fallthrough to loading the module.\r\n    cachedModule[kModuleCircularVisited] = true;\r\n  }\r\n\r\n  if (BuiltinModule.canBeRequiredWithoutScheme(filename)) {\r\n    const mod = loadBuiltinModule(filename, request);\r\n    return mod.exports;\r\n  }\r\n\r\n  // Don't call updateChildren(), Module constructor already does.\r\n  const module = cachedModule || new Module(filename, parent);\r\n\r\n  if (!cachedModule) {\r\n    if (isMain) {\r\n      setOwnProperty(process, 'mainModule', module);\r\n      setOwnProperty(module.require, 'main', process.mainModule);\r\n      module.id = '.';\r\n      module[kIsMainSymbol] = true;\r\n    } else {\r\n      module[kIsMainSymbol] = false;\r\n    }\r\n\r\n    reportModuleToWatchMode(filename);\r\n    Module._cache[filename] = module;\r\n    module[kIsCachedByESMLoader] = false;\r\n  }\r\n\r\n  if (parent !== undefined) {\r\n    relativeResolveCache[relResolveCacheIdentifier] = filename;\r\n  }\r\n\r\n  let threw = true;\r\n  try {\r\n    module.load(filename);\r\n    threw = false;\r\n  } finally {\r\n    if (threw) {\r\n      delete Module._cache[filename];\r\n      if (parent !== undefined) {\r\n        delete relativeResolveCache[relResolveCacheIdentifier];\r\n        const children = parent?.children;\r\n        if (ArrayIsArray(children)) {\r\n          const index = ArrayPrototypeIndexOf(children, module);\r\n          if (index !== -1) {\r\n            ArrayPrototypeSplice(children, index, 1);\r\n          }\r\n        }\r\n      }\r\n    } else if (module.exports &&\r\n               !isProxy(module.exports) &&\r\n               ObjectGetPrototypeOf(module.exports) ===\r\n                 CircularRequirePrototypeWarningProxy) {\r\n      ObjectSetPrototypeOf(module.exports, ObjectPrototype);\r\n    }\r\n  }\r\n\r\n  return module.exports;\r\n};\r\n\r\n/**\r\n * Given a `require` string and its context, get its absolute file path.\r\n * @param {string} request The specifier to resolve\r\n * @param {Module} parent The module containing the `require` call\r\n * @param {boolean} isMain Whether the module is the main entry point\r\n * @param {ResolveFilenameOptions} options Options object\r\n * @typedef {object} ResolveFilenameOptions\r\n * @property {string[]} paths Paths to search for modules in\r\n */\r\nModule._resolveFilename = function(request, parent, isMain, options) {\r\n  if (BuiltinModule.normalizeRequirableId(request)) {\r\n    return request;\r\n  }\r\n\r\n  let paths;\r\n\r\n  if (typeof options === 'object' && options !== null) {\r\n    if (ArrayIsArray(options.paths)) {\r\n      const isRelative = StringPrototypeStartsWith(request, './') ||\r\n          StringPrototypeStartsWith(request, '../') ||\r\n          ((isWindows && StringPrototypeStartsWith(request, '.\\\\')) ||\r\n          StringPrototypeStartsWith(request, '..\\\\'));\r\n\r\n      if (isRelative) {\r\n        paths = options.paths;\r\n      } else {\r\n        const fakeParent = new Module('', null);\r\n\r\n        paths = [];\r\n\r\n        for (let i = 0; i < options.paths.length; i++) {\r\n          const path = options.paths[i];\r\n          fakeParent.paths = Module._nodeModulePaths(path);\r\n          const lookupPaths = Module._resolveLookupPaths(request, fakeParent);\r\n\r\n          for (let j = 0; j < lookupPaths.length; j++) {\r\n            if (!ArrayPrototypeIncludes(paths, lookupPaths[j])) {\r\n              ArrayPrototypePush(paths, lookupPaths[j]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (options.paths === undefined) {\r\n      paths = Module._resolveLookupPaths(request, parent);\r\n    } else {\r\n      throw new ERR_INVALID_ARG_VALUE('options.paths', options.paths);\r\n    }\r\n  } else {\r\n    paths = Module._resolveLookupPaths(request, parent);\r\n  }\r\n\r\n  if (request[0] === '#' && (parent?.filename || parent?.id === '<repl>')) {\r\n    const parentPath = parent?.filename ?? process.cwd() + path.sep;\r\n    const pkg = packageJsonReader.getNearestParentPackageJSON(parentPath) || { __proto__: null };\r\n    if (pkg.data?.imports != null) {\r\n      try {\r\n        const { packageImportsResolve } = require('internal/modules/esm/resolve');\r\n        return finalizeEsmResolution(\r\n          packageImportsResolve(request, pathToFileURL(parentPath),\r\n                                getCjsConditions()), parentPath,\r\n          pkg.path);\r\n      } catch (e) {\r\n        if (e.code === 'ERR_MODULE_NOT_FOUND') {\r\n          throw createEsmNotFoundErr(request);\r\n        }\r\n        throw e;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Try module self resolution first\r\n  const parentPath = trySelfParentPath(parent);\r\n  const selfResolved = trySelf(parentPath, request);\r\n  if (selfResolved) {\r\n    const cacheKey = request + '\\x00' +\r\n         (paths.length === 1 ? paths[0] : ArrayPrototypeJoin(paths, '\\x00'));\r\n    Module._pathCache[cacheKey] = selfResolved;\r\n    return selfResolved;\r\n  }\r\n\r\n  // Look up the filename first, since that's the cache key.\r\n  const filename = Module._findPath(request, paths, isMain);\r\n  if (filename) { return filename; }\r\n  const requireStack = [];\r\n  for (let cursor = parent;\r\n    cursor;\r\n    cursor = cursor[kModuleParent]) {\r\n    ArrayPrototypePush(requireStack, cursor.filename || cursor.id);\r\n  }\r\n  let message = `Cannot find module '${request}'`;\r\n  if (requireStack.length > 0) {\r\n    message = message + '\\nRequire stack:\\n- ' +\r\n              ArrayPrototypeJoin(requireStack, '\\n- ');\r\n  }\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const err = new Error(message);\r\n  err.code = 'MODULE_NOT_FOUND';\r\n  err.requireStack = requireStack;\r\n  throw err;\r\n};\r\n\r\n/**\r\n * Finishes resolving an ES module specifier into an absolute file path.\r\n * @param {string} resolved The resolved module specifier\r\n * @param {string} parentPath The path of the parent module\r\n * @param {string} pkgPath The path of the package.json file\r\n * @throws {ERR_INVALID_MODULE_SPECIFIER} If the resolved module specifier contains encoded `/` or `\\\\` characters\r\n * @throws {Error} If the module cannot be found\r\n */\r\nfunction finalizeEsmResolution(resolved, parentPath, pkgPath) {\r\n  const { encodedSepRegEx } = require('internal/modules/esm/resolve');\r\n  if (RegExpPrototypeExec(encodedSepRegEx, resolved) !== null) {\r\n    throw new ERR_INVALID_MODULE_SPECIFIER(\r\n      resolved, 'must not include encoded \"/\" or \"\\\\\" characters', parentPath);\r\n  }\r\n  const filename = fileURLToPath(resolved);\r\n  const actual = tryFile(filename);\r\n  if (actual) {\r\n    return actual;\r\n  }\r\n  const err = createEsmNotFoundErr(filename,\r\n                                   path.resolve(pkgPath, 'package.json'));\r\n  throw err;\r\n}\r\n\r\n/**\r\n * Creates an error object for when a requested ES module cannot be found.\r\n * @param {string} request The name of the requested module\r\n * @param {string} [path] The path to the requested module\r\n */\r\nfunction createEsmNotFoundErr(request, path) {\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const err = new Error(`Cannot find module '${request}'`);\r\n  err.code = 'MODULE_NOT_FOUND';\r\n  if (path) {\r\n    err.path = path;\r\n  }\r\n  // TODO(BridgeAR): Add the requireStack as well.\r\n  return err;\r\n}\r\n\r\n/**\r\n * Given a file name, pass it to the proper extension handler.\r\n * @param {string} filename The `require` specifier\r\n */\r\nModule.prototype.load = function(filename) {\r\n  debug('load %j for module %j', filename, this.id);\r\n\r\n  assert(!this.loaded);\r\n  this.filename = filename;\r\n  this.paths = Module._nodeModulePaths(path.dirname(filename));\r\n\r\n  const extension = findLongestRegisteredExtension(filename);\r\n  // allow .mjs to be overridden\r\n  if (StringPrototypeEndsWith(filename, '.mjs') && !Module._extensions['.mjs']) {\r\n    throw new ERR_REQUIRE_ESM(filename, true);\r\n  }\r\n\r\n  Module._extensions[extension](this, filename);\r\n  this.loaded = true;\r\n\r\n  // Create module entry at load time to snapshot exports correctly\r\n  const exports = this.exports;\r\n  // Preemptively cache for ESM loader.\r\n  this[kModuleExport] = exports;\r\n};\r\n\r\n/**\r\n * Loads a module at the given file path. Returns that module's `exports` property.\r\n * @param {string} id\r\n * @throws {ERR_INVALID_ARG_TYPE} When `id` is not a string\r\n */\r\nModule.prototype.require = function(id) {\r\n  validateString(id, 'id');\r\n  if (id === '') {\r\n    throw new ERR_INVALID_ARG_VALUE('id', id,\r\n                                    'must be a non-empty string');\r\n  }\r\n  requireDepth++;\r\n  try {\r\n    return wrapModuleLoad(id, this, /* isMain */ false);\r\n  } finally {\r\n    requireDepth--;\r\n  }\r\n};\r\n\r\n/**\r\n * Resolved path to `process.argv[1]` will be lazily placed here\r\n * (needed for setting breakpoint when called with `--inspect-brk`).\r\n * @type {string | undefined}\r\n */\r\nlet resolvedArgv;\r\nlet hasPausedEntry = false;\r\n/** @type {import('vm').Script} */\r\n\r\n/**\r\n * Resolve and evaluate it synchronously as ESM if it's ESM.\r\n * @param {Module} mod CJS module instance\r\n * @param {string} filename Absolute path of the file.\r\n */\r\nfunction loadESMFromCJS(mod, filename) {\r\n  const source = getMaybeCachedSource(mod, filename);\r\n  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n  const isMain = mod[kIsMainSymbol];\r\n  if (isMain) {\r\n    require('internal/modules/run_main').runEntryPointWithESMLoader((cascadedLoader) => {\r\n      const mainURL = pathToFileURL(filename).href;\r\n      cascadedLoader.import(mainURL, undefined, { __proto__: null }, true);\r\n    });\r\n    // ESM won't be accessible via process.mainModule.\r\n    setOwnProperty(process, 'mainModule', undefined);\r\n  } else {\r\n    // TODO(joyeecheung): we may want to invent optional special handling for default exports here.\r\n    // For now, it's good enough to be identical to what `import()` returns.\r\n    mod.exports = cascadedLoader.importSyncForRequire(mod, filename, source, isMain, mod[kModuleParent]);\r\n  }\r\n}\r\n\r\n/**\r\n * Wraps the given content in a script and runs it in a new context.\r\n * @param {string} filename The name of the file being loaded\r\n * @param {string} content The content of the file being loaded\r\n * @param {Module} cjsModuleInstance The CommonJS loader instance\r\n * @param {object} codeCache The SEA code cache\r\n * @param {'commonjs'|undefined} format Intended format of the module.\r\n */\r\nfunction wrapSafe(filename, content, cjsModuleInstance, codeCache, format) {\r\n  assert(format !== 'module');  // ESM should be handled in loadESMFromCJS().\r\n  const hostDefinedOptionId = vm_dynamic_import_default_internal;\r\n  const importModuleDynamically = vm_dynamic_import_default_internal;\r\n  if (patched) {\r\n    const wrapped = Module.wrap(content);\r\n    const script = makeContextifyScript(\r\n      wrapped,                 // code\r\n      filename,                // filename\r\n      0,                       // lineOffset\r\n      0,                       // columnOffset\r\n      undefined,               // cachedData\r\n      false,                   // produceCachedData\r\n      undefined,               // parsingContext\r\n      hostDefinedOptionId,     // hostDefinedOptionId\r\n      importModuleDynamically, // importModuleDynamically\r\n    );\r\n\r\n    // Cache the source map for the module if present.\r\n    const { sourceMapURL } = script;\r\n    if (sourceMapURL) {\r\n      maybeCacheSourceMap(filename, content, cjsModuleInstance, false, undefined, sourceMapURL);\r\n    }\r\n\r\n    return {\r\n      __proto__: null,\r\n      function: runScriptInThisContext(script, true, false),\r\n      sourceMapURL,\r\n    };\r\n  }\r\n\r\n  const isMain = !!(cjsModuleInstance && cjsModuleInstance[kIsMainSymbol]);\r\n  const shouldDetectModule = (format !== 'commonjs' && getOptionValue('--experimental-detect-module'));\r\n  const result = compileFunctionForCJSLoader(content, filename, isMain, shouldDetectModule);\r\n\r\n  // cachedDataRejected is only set for cache coming from SEA.\r\n  if (codeCache &&\r\n      result.cachedDataRejected !== false &&\r\n      internalBinding('sea').isSea()) {\r\n    process.emitWarning('Code cache data rejected.');\r\n  }\r\n\r\n  // Cache the source map for the module if present.\r\n  if (result.sourceMapURL) {\r\n    maybeCacheSourceMap(filename, content, cjsModuleInstance, false, undefined, result.sourceMapURL);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Run the file contents in the correct scope or sandbox. Expose the correct helper variables (`require`, `module`,\r\n * `exports`) to the file. Returns exception, if any.\r\n * @param {string} content The source code of the module\r\n * @param {string} filename The file path of the module\r\n * @param {'module'|'commonjs'|undefined} format Intended format of the module.\r\n */\r\nModule.prototype._compile = function(content, filename, format) {\r\n  let redirects;\r\n\r\n  let compiledWrapper;\r\n  if (format !== 'module') {\r\n    const result = wrapSafe(filename, content, this, undefined, format);\r\n    compiledWrapper = result.function;\r\n    if (result.canParseAsESM) {\r\n      format = 'module';\r\n    }\r\n  }\r\n\r\n  // TODO(joyeecheung): when the module is the entry point, consider allowing TLA.\r\n  // Only modules being require()'d really need to avoid TLA.\r\n  if (format === 'module') {\r\n    // Pass the source into the .mjs extension handler indirectly through the cache.\r\n    this[kModuleSource] = content;\r\n    loadESMFromCJS(this, filename);\r\n    return;\r\n  }\r\n\r\n  // TODO(joyeecheung): the detection below is unnecessarily complex. Using the\r\n  // kIsMainSymbol, or a kBreakOnStartSymbol that gets passed from\r\n  // higher level instead of doing hacky detection here.\r\n  let inspectorWrapper = null;\r\n  if (getOptionValue('--inspect-brk') && process._eval == null) {\r\n    if (!resolvedArgv) {\r\n      // We enter the repl if we're not given a filename argument.\r\n      if (process.argv[1]) {\r\n        try {\r\n          resolvedArgv = Module._resolveFilename(process.argv[1], null, false);\r\n        } catch {\r\n          // We only expect this codepath to be reached in the case of a\r\n          // preloaded module (it will fail earlier with the main entry)\r\n          assert(ArrayIsArray(getOptionValue('--require')));\r\n        }\r\n      } else {\r\n        resolvedArgv = 'repl';\r\n      }\r\n    }\r\n\r\n    // Set breakpoint on module start\r\n    if (resolvedArgv && !hasPausedEntry && filename === resolvedArgv) {\r\n      hasPausedEntry = true;\r\n      inspectorWrapper = internalBinding('inspector').callAndPauseOnStart;\r\n    }\r\n  }\r\n  const dirname = path.dirname(filename);\r\n  const require = makeRequireFunction(this, redirects);\r\n  let result;\r\n  const exports = this.exports;\r\n  const thisValue = exports;\r\n  const module = this;\r\n  if (requireDepth === 0) { statCache = new SafeMap(); }\r\n  setHasStartedUserCJSExecution();\r\n  this[kIsExecuting] = true;\r\n  if (inspectorWrapper) {\r\n    result = inspectorWrapper(compiledWrapper, thisValue, exports,\r\n                              require, module, filename, dirname);\r\n  } else {\r\n    result = ReflectApply(compiledWrapper, thisValue,\r\n                          [exports, require, module, filename, dirname]);\r\n  }\r\n  this[kIsExecuting] = false;\r\n  if (requireDepth === 0) { statCache = null; }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Get the source code of a module, using cached ones if it's cached.\r\n * @param {Module} mod Module instance whose source is potentially already cached.\r\n * @param {string} filename Absolute path to the file of the module.\r\n * @returns {string}\r\n */\r\nfunction getMaybeCachedSource(mod, filename) {\r\n  // If already analyzed the source, then it will be cached.\r\n  let content;\r\n  if (mod[kModuleSource] !== undefined) {\r\n    content = mod[kModuleSource];\r\n    mod[kModuleSource] = undefined;\r\n  } else {\r\n    // TODO(joyeecheung): we can read a buffer instead to speed up\r\n    // compilation.\r\n    content = fs.readFileSync(filename, 'utf8');\r\n  }\r\n  return content;\r\n}\r\n\r\n/**\r\n * Built-in handler for `.js` files.\r\n * @param {Module} module The module to compile\r\n * @param {string} filename The file path of the module\r\n */\r\nModule._extensions['.js'] = function(module, filename) {\r\n  // If already analyzed the source, then it will be cached.\r\n  const content = getMaybeCachedSource(module, filename);\r\n\r\n  let format;\r\n  if (StringPrototypeEndsWith(filename, '.js')) {\r\n    const pkg = packageJsonReader.getNearestParentPackageJSON(filename);\r\n    // Function require shouldn't be used in ES modules.\r\n    if (pkg?.data.type === 'module') {\r\n      if (getOptionValue('--experimental-require-module')) {\r\n        module._compile(content, filename, 'module');\r\n        return;\r\n      }\r\n\r\n      // This is an error path because `require` of a `.js` file in a `\"type\": \"module\"` scope is not allowed.\r\n      const parent = module[kModuleParent];\r\n      const parentPath = parent?.filename;\r\n      const packageJsonPath = path.resolve(pkg.path, 'package.json');\r\n      const usesEsm = containsModuleSyntax(content, filename);\r\n      const err = new ERR_REQUIRE_ESM(filename, usesEsm, parentPath,\r\n                                      packageJsonPath);\r\n      // Attempt to reconstruct the parent require frame.\r\n      if (Module._cache[parentPath]) {\r\n        let parentSource;\r\n        try {\r\n          parentSource = fs.readFileSync(parentPath, 'utf8');\r\n        } catch {\r\n          // Continue regardless of error.\r\n        }\r\n        if (parentSource) {\r\n          const errLine = StringPrototypeSplit(\r\n            StringPrototypeSlice(err.stack, StringPrototypeIndexOf(\r\n              err.stack, '    at ')), '\\n', 1)[0];\r\n          const { 1: line, 2: col } =\r\n              RegExpPrototypeExec(/(\\d+):(\\d+)\\)/, errLine) || [];\r\n          if (line && col) {\r\n            const srcLine = StringPrototypeSplit(parentSource, '\\n')[line - 1];\r\n            const frame = `${parentPath}:${line}\\n${srcLine}\\n${\r\n              StringPrototypeRepeat(' ', col - 1)}^\\n`;\r\n            setArrowMessage(err, frame);\r\n          }\r\n        }\r\n      }\r\n      throw err;\r\n    } else if (pkg?.data.type === 'commonjs') {\r\n      format = 'commonjs';\r\n    }\r\n  } else if (StringPrototypeEndsWith(filename, '.cjs')) {\r\n    format = 'commonjs';\r\n  }\r\n\r\n  module._compile(content, filename, format);\r\n};\r\n\r\n/**\r\n * Native handler for `.json` files.\r\n * @param {Module} module The module to compile\r\n * @param {string} filename The file path of the module\r\n */\r\nModule._extensions['.json'] = function(module, filename) {\r\n  const content = fs.readFileSync(filename, 'utf8');\r\n\r\n  try {\r\n    setOwnProperty(module, 'exports', JSONParse(stripBOM(content)));\r\n  } catch (err) {\r\n    err.message = filename + ': ' + err.message;\r\n    throw err;\r\n  }\r\n};\r\n\r\n/**\r\n * Native handler for `.node` files.\r\n * @param {Module} module The module to compile\r\n * @param {string} filename The file path of the module\r\n */\r\nModule._extensions['.node'] = function(module, filename) {\r\n  // Be aware this doesn't use `content`\r\n  return process.dlopen(module, path.toNamespacedPath(filename));\r\n};\r\n\r\n/**\r\n * Creates a `require` function that can be used to load modules from the specified path.\r\n * @param {string} filename The path to the module\r\n */\r\nfunction createRequireFromPath(filename) {\r\n  // Allow a directory to be passed as the filename\r\n  const trailingSlash =\r\n    StringPrototypeEndsWith(filename, '/') ||\r\n    (isWindows && StringPrototypeEndsWith(filename, '\\\\'));\r\n\r\n  const proxyPath = trailingSlash ?\r\n    path.join(filename, 'noop.js') :\r\n    filename;\r\n\r\n  const m = new Module(proxyPath);\r\n  m.filename = proxyPath;\r\n\r\n  m.paths = Module._nodeModulePaths(m.path);\r\n  return makeRequireFunction(m, null);\r\n}\r\n\r\nconst createRequireError = 'must be a file URL object, file URL string, or ' +\r\n  'absolute path string';\r\n\r\n/**\r\n * Creates a new `require` function that can be used to load modules.\r\n * @param {string | URL} filename The path or URL to the module context for this `require`\r\n * @throws {ERR_INVALID_ARG_VALUE} If `filename` is not a string or URL, or if it is a relative path that cannot be\r\n * resolved to an absolute path.\r\n */\r\nfunction createRequire(filename) {\r\n  let filepath;\r\n\r\n  if (isURL(filename) ||\r\n      (typeof filename === 'string' && !path.isAbsolute(filename))) {\r\n    try {\r\n      filepath = fileURLToPath(filename);\r\n    } catch {\r\n      throw new ERR_INVALID_ARG_VALUE('filename', filename,\r\n                                      createRequireError);\r\n    }\r\n  } else if (typeof filename !== 'string') {\r\n    throw new ERR_INVALID_ARG_VALUE('filename', filename, createRequireError);\r\n  } else {\r\n    filepath = filename;\r\n  }\r\n  return createRequireFromPath(filepath);\r\n}\r\n\r\nModule.createRequire = createRequire;\r\n\r\n/**\r\n * Define the paths to use for resolving a module.\r\n */\r\nModule._initPaths = function() {\r\n  const homeDir = isWindows ? process.env.USERPROFILE : safeGetenv('HOME');\r\n  const nodePath = isWindows ? process.env.NODE_PATH : safeGetenv('NODE_PATH');\r\n\r\n  // process.execPath is $PREFIX/bin/node except on Windows where it is\r\n  // $PREFIX\\node.exe where $PREFIX is the root of the Node.js installation.\r\n  const prefixDir = isWindows ?\r\n    path.resolve(process.execPath, '..') :\r\n    path.resolve(process.execPath, '..', '..');\r\n\r\n  const paths = [path.resolve(prefixDir, 'lib', 'node')];\r\n\r\n  if (homeDir) {\r\n    ArrayPrototypeUnshift(paths, path.resolve(homeDir, '.node_libraries'));\r\n    ArrayPrototypeUnshift(paths, path.resolve(homeDir, '.node_modules'));\r\n  }\r\n\r\n  if (nodePath) {\r\n    ArrayPrototypeUnshiftApply(paths, ArrayPrototypeFilter(\r\n      StringPrototypeSplit(nodePath, path.delimiter),\r\n      Boolean,\r\n    ));\r\n  }\r\n\r\n  modulePaths = paths;\r\n\r\n  // Clone as a shallow copy, for introspection.\r\n  Module.globalPaths = ArrayPrototypeSlice(modulePaths);\r\n};\r\n\r\n/**\r\n * Handle modules loaded via `--require`.\r\n * @param {string[]} requests The values of `--require`\r\n */\r\nModule._preloadModules = function(requests) {\r\n  if (!ArrayIsArray(requests)) { return; }\r\n\r\n  isPreloading = true;\r\n\r\n  // Preloaded modules have a dummy parent module which is deemed to exist\r\n  // in the current working directory. This seeds the search path for\r\n  // preloaded modules.\r\n  const parent = new Module('internal/preload', null);\r\n  try {\r\n    parent.paths = Module._nodeModulePaths(process.cwd());\r\n  } catch (e) {\r\n    if (e.code !== 'ENOENT') {\r\n      isPreloading = false;\r\n      throw e;\r\n    }\r\n  }\r\n  for (let n = 0; n < requests.length; n++) {\r\n    parent.require(requests[n]);\r\n  }\r\n  isPreloading = false;\r\n};\r\n\r\n/**\r\n * If the user has overridden an export from a builtin module, this function can ensure that the override is used in\r\n * both CommonJS and ES module contexts.\r\n */\r\nModule.syncBuiltinESMExports = function syncBuiltinESMExports() {\r\n  for (const mod of BuiltinModule.map.values()) {\r\n    if (BuiltinModule.canBeRequiredWithoutScheme(mod.id)) {\r\n      mod.syncExports();\r\n    }\r\n  }\r\n};\r\n\r\nObjectDefineProperty(Module.prototype, 'constructor', {\r\n  __proto__: null,\r\n  get: function() {\r\n    return Module;\r\n  },\r\n  configurable: false,\r\n  enumerable: false,\r\n});\r\n\r\n// Backwards compatibility\r\nModule.Module = Module;\r\n"
  },
  "63": {
    "metadata": {
      "scriptId": "63",
      "url": "node:internal/modules/package_json_reader",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 163,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "25fac6744b229006c670c098770767b1eafd3d5187ec490d06e840a12c591a3d",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4998,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/modules/package_json_reader"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  JSONParse,\r\n  ObjectDefineProperty,\r\n  StringPrototypeLastIndexOf,\r\n  StringPrototypeSlice,\r\n} = primordials;\r\nconst modulesBinding = internalBinding('modules');\r\nconst { resolve, sep } = require('path');\r\nconst { kEmptyObject } = require('internal/util');\r\n\r\n/**\r\n * @param {string} path\r\n * @param {import('typings/internalBinding/modules').SerializedPackageConfig} contents\r\n * @returns {import('typings/internalBinding/modules').PackageConfig}\r\n */\r\nfunction deserializePackageJSON(path, contents) {\r\n  if (contents === undefined) {\r\n    return {\r\n      __proto__: null,\r\n      exists: false,\r\n      pjsonPath: path,\r\n      type: 'none', // Ignore unknown types for forwards compatibility\r\n    };\r\n  }\r\n\r\n  let pjsonPath = path;\r\n  const {\r\n    0: name,\r\n    1: main,\r\n    2: type,\r\n    3: plainImports,\r\n    4: plainExports,\r\n    5: optionalFilePath,\r\n  } = contents;\r\n\r\n  // This is required to be used in getPackageScopeConfig.\r\n  if (optionalFilePath) {\r\n    pjsonPath = optionalFilePath;\r\n  }\r\n\r\n  // The imports and exports fields can be either undefined or a string.\r\n  // - If it's a string, it's either plain string or a stringified JSON string.\r\n  // - If it's a stringified JSON string, it starts with either '[' or '{'.\r\n  const requiresJSONParse = (value) => (value !== undefined && (value[0] === '[' || value[0] === '{'));\r\n\r\n  return {\r\n    __proto__: null,\r\n    exists: true,\r\n    pjsonPath,\r\n    name,\r\n    main,\r\n    type,\r\n    // This getters are used to lazily parse the imports and exports fields.\r\n    get imports() {\r\n      const value = requiresJSONParse(plainImports) ? JSONParse(plainImports) : plainImports;\r\n      ObjectDefineProperty(this, 'imports', { __proto__: null, value });\r\n      return this.imports;\r\n    },\r\n    get exports() {\r\n      const value = requiresJSONParse(plainExports) ? JSONParse(plainExports) : plainExports;\r\n      ObjectDefineProperty(this, 'exports', { __proto__: null, value });\r\n      return this.exports;\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Reads a package.json file and returns the parsed contents.\r\n * @param {string} jsonPath\r\n * @param {{\r\n *   base?: URL | string,\r\n *   specifier?: URL | string,\r\n *   isESM?: boolean,\r\n * }} options\r\n * @returns {import('typings/internalBinding/modules').PackageConfig}\r\n */\r\nfunction read(jsonPath, { base, specifier, isESM } = kEmptyObject) {\r\n  // This function will be called by both CJS and ESM, so we need to make sure\r\n  // non-null attributes are converted to strings.\r\n  const parsed = modulesBinding.readPackageJSON(\r\n    jsonPath,\r\n    isESM,\r\n    base == null ? undefined : `${base}`,\r\n    specifier == null ? undefined : `${specifier}`,\r\n  );\r\n\r\n  return deserializePackageJSON(jsonPath, parsed);\r\n}\r\n\r\n/**\r\n * @deprecated Expected to be removed in favor of `read` in the future.\r\n * Behaves the same was as `read`, but appends package.json to the path.\r\n * @param {string} requestPath\r\n * @return {PackageConfig}\r\n */\r\nfunction readPackage(requestPath) {\r\n  // TODO(@anonrig): Remove this function.\r\n  return read(resolve(requestPath, 'package.json'));\r\n}\r\n\r\n/**\r\n * Get the nearest parent package.json file from a given path.\r\n * Return the package.json data and the path to the package.json file, or undefined.\r\n * @param {string} checkPath The path to start searching from.\r\n * @returns {undefined | {data: import('typings/internalBinding/modules').PackageConfig, path: string}}\r\n */\r\nfunction getNearestParentPackageJSON(checkPath) {\r\n  const result = modulesBinding.getNearestParentPackageJSON(checkPath);\r\n\r\n  if (result === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  const data = deserializePackageJSON(checkPath, result);\r\n\r\n  // Path should be the root folder of the matched package.json\r\n  // For example for ~/path/package.json, it should be ~/path\r\n  const path = StringPrototypeSlice(data.pjsonPath, 0, StringPrototypeLastIndexOf(data.pjsonPath, sep));\r\n\r\n  return { data, path };\r\n}\r\n\r\n/**\r\n * Returns the package configuration for the given resolved URL.\r\n * @param {URL | string} resolved - The resolved URL.\r\n * @returns {import('typings/internalBinding/modules').PackageConfig} - The package configuration.\r\n */\r\nfunction getPackageScopeConfig(resolved) {\r\n  const result = modulesBinding.getPackageScopeConfig(`${resolved}`);\r\n\r\n  if (ArrayIsArray(result)) {\r\n    return deserializePackageJSON(`${resolved}`, result);\r\n  }\r\n\r\n  // This means that the response is a string\r\n  // and it is the path to the package.json file\r\n  return {\r\n    __proto__: null,\r\n    pjsonPath: result,\r\n    exists: false,\r\n    type: 'none',\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the package type for a given URL.\r\n * @param {URL} url - The URL to get the package type for.\r\n */\r\nfunction getPackageType(url) {\r\n  // TODO(@anonrig): Write a C++ function that returns only \"type\".\r\n  return getPackageScopeConfig(url).type;\r\n}\r\n\r\nmodule.exports = {\r\n  read,\r\n  readPackage,\r\n  getNearestParentPackageJSON,\r\n  getPackageScopeConfig,\r\n  getPackageType,\r\n};\r\n"
  },
  "64": {
    "metadata": {
      "scriptId": "64",
      "url": "node:internal/modules/esm/utils",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 358,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "9937b6a125408bd025de644ffb76e164406139de0c1d18c2ae24461239ef4079",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 13640,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/modules/esm/utils"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ObjectFreeze,\r\n  SafeSet,\r\n  SafeWeakMap,\r\n} = primordials;\r\n\r\nconst {\r\n  privateSymbols: {\r\n    host_defined_option_symbol,\r\n  },\r\n} = internalBinding('util');\r\nconst {\r\n  source_text_module_default_hdo,\r\n  vm_dynamic_import_default_internal,\r\n  vm_dynamic_import_main_context_default,\r\n  vm_dynamic_import_missing_flag,\r\n  vm_dynamic_import_no_callback,\r\n} = internalBinding('symbols');\r\n\r\nconst { ModuleWrap } = internalBinding('module_wrap');\r\nconst {\r\n  maybeCacheSourceMap,\r\n} = require('internal/source_map/source_map_cache');\r\n\r\nconst {\r\n  ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING_FLAG,\r\n  ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING,\r\n  ERR_INVALID_ARG_VALUE,\r\n} = require('internal/errors').codes;\r\nconst { getOptionValue } = require('internal/options');\r\nconst {\r\n  loadPreloadModules,\r\n  initializeFrozenIntrinsics,\r\n} = require('internal/process/pre_execution');\r\nconst {\r\n  emitExperimentalWarning,\r\n  getCWDURL,\r\n} = require('internal/util');\r\nconst {\r\n  setImportModuleDynamicallyCallback,\r\n  setInitializeImportMetaObjectCallback,\r\n} = internalBinding('module_wrap');\r\nconst assert = require('internal/assert');\r\nconst {\r\n  normalizeReferrerURL,\r\n} = require('internal/modules/helpers');\r\n\r\nlet defaultConditions;\r\n/**\r\n * Returns the default conditions for ES module loading.\r\n */\r\nfunction getDefaultConditions() {\r\n  assert(defaultConditions !== undefined);\r\n  return defaultConditions;\r\n}\r\n\r\n/** @type {Set<string>} */\r\nlet defaultConditionsSet;\r\n/**\r\n * Returns the default conditions for ES module loading, as a Set.\r\n */\r\nfunction getDefaultConditionsSet() {\r\n  assert(defaultConditionsSet !== undefined);\r\n  return defaultConditionsSet;\r\n}\r\n\r\n/**\r\n * Initializes the default conditions for ESM module loading.\r\n * This function is called during pre-execution, before any user code is run.\r\n */\r\nfunction initializeDefaultConditions() {\r\n  const userConditions = getOptionValue('--conditions');\r\n  const noAddons = getOptionValue('--no-addons');\r\n  const addonConditions = noAddons ? [] : ['node-addons'];\r\n\r\n  defaultConditions = ObjectFreeze([\r\n    'node',\r\n    'import',\r\n    ...addonConditions,\r\n    ...userConditions,\r\n  ]);\r\n  defaultConditionsSet = new SafeSet(defaultConditions);\r\n}\r\n\r\n/**\r\n * @param {string[]} [conditions]\r\n * @returns {Set<string>}\r\n */\r\nfunction getConditionsSet(conditions) {\r\n  if (conditions !== undefined && conditions !== getDefaultConditions()) {\r\n    if (!ArrayIsArray(conditions)) {\r\n      throw new ERR_INVALID_ARG_VALUE('conditions', conditions,\r\n                                      'expected an array');\r\n    }\r\n    return new SafeSet(conditions);\r\n  }\r\n  return getDefaultConditionsSet();\r\n}\r\n\r\n/**\r\n * @callback ImportModuleDynamicallyCallback\r\n * @param {string} specifier\r\n * @param {ModuleWrap|ContextifyScript|Function|vm.Module} callbackReferrer\r\n * @param {Record<string, string>} attributes\r\n * @returns { Promise<void> }\r\n */\r\n\r\n/**\r\n * @callback InitializeImportMetaCallback\r\n * @param {object} meta\r\n * @param {ModuleWrap|ContextifyScript|Function|vm.Module} callbackReferrer\r\n */\r\n\r\n/**\r\n * @typedef {{\r\n *   callbackReferrer: ModuleWrap|ContextifyScript|Function|vm.Module\r\n *   initializeImportMeta? : InitializeImportMetaCallback,\r\n *   importModuleDynamically? : ImportModuleDynamicallyCallback\r\n * }} ModuleRegistry\r\n */\r\n\r\n/**\r\n * @type {WeakMap<symbol, ModuleRegistry>}\r\n */\r\nconst moduleRegistries = new SafeWeakMap();\r\n\r\n/**\r\n * @typedef {ContextifyScript|Function|ModuleWrap|ContextifiedObject} Referrer\r\n * A referrer can be a Script Record, a Cyclic Module Record, or a Realm Record\r\n * as defined in https://tc39.es/ecma262/#sec-HostLoadImportedModule.\r\n *\r\n * In Node.js, a referrer is represented by a wrapper object of these records.\r\n * A referrer object has a field |host_defined_option_symbol| initialized with\r\n * a symbol.\r\n */\r\n\r\n/**\r\n * V8 would make sure that as long as import() can still be initiated from\r\n * the referrer, the symbol referenced by |host_defined_option_symbol| should\r\n * be alive, which in term would keep the settings object alive through the\r\n * WeakMap, and in turn that keeps the referrer object alive, which would be\r\n * passed into the callbacks.\r\n * The reference goes like this:\r\n * [v8::internal::Script] (via host defined options) ----1--> [idSymbol]\r\n * [callbackReferrer] (via host_defined_option_symbol) ------2------^  |\r\n *                                 ^----------3---- (via WeakMap)------\r\n * 1+3 makes sure that as long as import() can still be initiated, the\r\n * referrer wrap is still around and can be passed into the callbacks.\r\n * 2 is only there so that we can get the id symbol to configure the\r\n * weak map.\r\n * @param {Referrer} referrer The referrer to\r\n *   get the id symbol from. This is different from callbackReferrer which\r\n *   could be set by the caller.\r\n * @param {ModuleRegistry} registry\r\n */\r\nfunction registerModule(referrer, registry) {\r\n  const idSymbol = referrer[host_defined_option_symbol];\r\n  if (idSymbol === vm_dynamic_import_no_callback ||\r\n      idSymbol === vm_dynamic_import_missing_flag ||\r\n      idSymbol === vm_dynamic_import_main_context_default ||\r\n      idSymbol === vm_dynamic_import_default_internal) {\r\n    // The referrer is compiled without custom callbacks, so there is\r\n    // no registry to hold on to. We'll throw\r\n    // ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING when a callback is\r\n    // needed.\r\n    return;\r\n  }\r\n  // To prevent it from being GC'ed.\r\n  registry.callbackReferrer ??= referrer;\r\n  moduleRegistries.set(idSymbol, registry);\r\n}\r\n\r\n/**\r\n * Proxy the import meta handling to the default loader for source text modules.\r\n * @param {Record<string, string | Function>} meta - The import.meta object to initialize.\r\n * @param {ModuleWrap} wrap - The ModuleWrap of the SourceTextModule where `import.meta` is referenced.\r\n */\r\nfunction defaultInitializeImportMetaForModule(meta, wrap) {\r\n  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n  return cascadedLoader.importMetaInitialize(meta, { url: wrap.url });\r\n}\r\n\r\n/**\r\n * Defines the `import.meta` object for a given module.\r\n * @param {symbol} symbol - Reference to the module.\r\n * @param {Record<string, string | Function>} meta - The import.meta object to initialize.\r\n * @param {ModuleWrap} wrap - The ModuleWrap of the SourceTextModule where `import.meta` is referenced.\r\n */\r\nfunction initializeImportMetaObject(symbol, meta, wrap) {\r\n  if (symbol === source_text_module_default_hdo) {\r\n    defaultInitializeImportMetaForModule(meta, wrap);\r\n    return;\r\n  }\r\n  const data = moduleRegistries.get(symbol);\r\n  assert(data, `import.meta registry not found for ${wrap.url}`);\r\n  const { initializeImportMeta, callbackReferrer } = data;\r\n  if (initializeImportMeta !== undefined) {\r\n    meta = initializeImportMeta(meta, callbackReferrer);\r\n  }\r\n}\r\n\r\n/**\r\n * Proxy the dynamic import handling to the default loader for source text modules.\r\n * @param {string} specifier - The module specifier string.\r\n * @param {Record<string, string>} attributes - The import attributes object.\r\n * @param {string|null|undefined} referrerName - name of the referrer.\r\n * @returns {Promise<import('internal/modules/esm/loader.js').ModuleExports>} - The imported module object.\r\n */\r\nfunction defaultImportModuleDynamicallyForModule(specifier, attributes, referrerName) {\r\n  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n  return cascadedLoader.import(specifier, referrerName, attributes);\r\n}\r\n\r\n/**\r\n * Proxy the dynamic import to the default loader for classic scripts.\r\n * @param {string} specifier - The module specifier string.\r\n * @param {Record<string, string>} attributes - The import attributes object.\r\n * @param {string|null|undefined} referrerName - name of the referrer.\r\n * @returns {Promise<import('internal/modules/esm/loader.js').ModuleExports>} - The imported module object.\r\n */\r\nfunction defaultImportModuleDynamicallyForScript(specifier, attributes, referrerName) {\r\n  const parentURL = normalizeReferrerURL(referrerName);\r\n  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n  return cascadedLoader.import(specifier, parentURL, attributes);\r\n}\r\n\r\n/**\r\n * Asynchronously imports a module dynamically using a callback function. The native callback.\r\n * @param {symbol} referrerSymbol - Referrer symbol of the registered script, function, module, or contextified object.\r\n * @param {string} specifier - The module specifier string.\r\n * @param {Record<string, string>} attributes - The import attributes object.\r\n * @param {string|null|undefined} referrerName - name of the referrer.\r\n * @returns {Promise<import('internal/modules/esm/loader.js').ModuleExports>} - The imported module object.\r\n * @throws {ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING} - If the callback function is missing.\r\n */\r\nasync function importModuleDynamicallyCallback(referrerSymbol, specifier, attributes, referrerName) {\r\n  // For user-provided vm.constants.USE_MAIN_CONTEXT_DEFAULT_LOADER, emit the warning\r\n  // and fall back to the default loader.\r\n  if (referrerSymbol === vm_dynamic_import_main_context_default) {\r\n    emitExperimentalWarning('vm.USE_MAIN_CONTEXT_DEFAULT_LOADER');\r\n    return defaultImportModuleDynamicallyForScript(specifier, attributes, referrerName);\r\n  }\r\n  // For script compiled internally that should use the default loader to handle dynamic\r\n  // import, proxy the request to the default loader without the warning.\r\n  if (referrerSymbol === vm_dynamic_import_default_internal) {\r\n    return defaultImportModuleDynamicallyForScript(specifier, attributes, referrerName);\r\n  }\r\n  // For SourceTextModules compiled internally, proxy the request to the default loader.\r\n  if (referrerSymbol === source_text_module_default_hdo) {\r\n    return defaultImportModuleDynamicallyForModule(specifier, attributes, referrerName);\r\n  }\r\n\r\n  if (moduleRegistries.has(referrerSymbol)) {\r\n    const { importModuleDynamically, callbackReferrer } = moduleRegistries.get(referrerSymbol);\r\n    if (importModuleDynamically !== undefined) {\r\n      return importModuleDynamically(specifier, callbackReferrer, attributes);\r\n    }\r\n  }\r\n  if (referrerSymbol === vm_dynamic_import_missing_flag) {\r\n    throw new ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING_FLAG();\r\n  }\r\n  throw new ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING();\r\n}\r\n\r\nlet _forceDefaultLoader = false;\r\n/**\r\n * Initializes handling of ES modules.\r\n * This is configured during pre-execution. Specifically it's set to true for\r\n * the loader worker in internal/main/worker_thread.js.\r\n * @param {boolean} [forceDefaultLoader=false] - A boolean indicating disabling custom loaders.\r\n */\r\nfunction initializeESM(forceDefaultLoader = false) {\r\n  _forceDefaultLoader = forceDefaultLoader;\r\n  initializeDefaultConditions();\r\n  // Setup per-realm callbacks that locate data or callbacks that we keep\r\n  // track of for different ESM modules.\r\n  setInitializeImportMetaObjectCallback(initializeImportMetaObject);\r\n  setImportModuleDynamicallyCallback(importModuleDynamicallyCallback);\r\n}\r\n\r\n/**\r\n * Determine whether custom loaders are disabled and it is forced to use the\r\n * default loader.\r\n * @returns {boolean}\r\n */\r\nfunction forceDefaultLoader() {\r\n  return _forceDefaultLoader;\r\n}\r\n\r\n/**\r\n * Register module customization hooks.\r\n */\r\nasync function initializeHooks() {\r\n  const customLoaderURLs = getOptionValue('--experimental-loader');\r\n\r\n  const { Hooks } = require('internal/modules/esm/hooks');\r\n  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n\r\n  const hooks = new Hooks();\r\n  cascadedLoader.setCustomizations(hooks);\r\n\r\n  // We need the loader customizations to be set _before_ we start invoking\r\n  // `--require`, otherwise loops can happen because a `--require` script\r\n  // might call `register(...)` before we've installed ourselves. These\r\n  // global values are magically set in `setupUserModules` just for us and\r\n  // we call them in the correct order.\r\n  // N.B.  This block appears here specifically in order to ensure that\r\n  // `--require` calls occur before `--loader` ones do.\r\n  loadPreloadModules();\r\n  initializeFrozenIntrinsics();\r\n\r\n  const parentURL = getCWDURL().href;\r\n  for (let i = 0; i < customLoaderURLs.length; i++) {\r\n    await hooks.register(\r\n      customLoaderURLs[i],\r\n      parentURL,\r\n    );\r\n  }\r\n\r\n  return hooks;\r\n}\r\n\r\n/**\r\n * Compile a SourceTextModule for the built-in ESM loader. Register it for default\r\n * source map and import.meta and dynamic import() handling if cascadedLoader is provided.\r\n * @param {string} url URL of the module.\r\n * @param {string} source Source code of the module.\r\n * @param {typeof import('./loader.js').ModuleLoader|undefined} cascadedLoader If provided,\r\n *        register the module for default handling.\r\n * @returns {ModuleWrap}\r\n */\r\nfunction compileSourceTextModule(url, source, cascadedLoader) {\r\n  const hostDefinedOption = cascadedLoader ? source_text_module_default_hdo : undefined;\r\n  const wrap = new ModuleWrap(url, undefined, source, 0, 0, hostDefinedOption);\r\n\r\n  if (!cascadedLoader) {\r\n    return wrap;\r\n  }\r\n  // Cache the source map for the module if present.\r\n  if (wrap.sourceMapURL) {\r\n    maybeCacheSourceMap(url, source, wrap, false, undefined, wrap.sourceMapURL);\r\n  }\r\n  return wrap;\r\n}\r\n\r\nmodule.exports = {\r\n  registerModule,\r\n  initializeESM,\r\n  initializeHooks,\r\n  getDefaultConditions,\r\n  getConditionsSet,\r\n  loaderWorkerId: 'internal/modules/esm/worker',\r\n  forceDefaultLoader,\r\n  compileSourceTextModule,\r\n};\r\n"
  },
  "65": {
    "metadata": {
      "scriptId": "65",
      "url": "node:internal/process/pre_execution",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 738,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "b515bd6f9a22420dd0f5f2714bdb1e006993aec46c4f3d417eeecc409635a89e",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 24005,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/pre_execution"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeForEach,\r\n  Date,\r\n  DatePrototypeGetDate,\r\n  DatePrototypeGetFullYear,\r\n  DatePrototypeGetHours,\r\n  DatePrototypeGetMinutes,\r\n  DatePrototypeGetMonth,\r\n  DatePrototypeGetSeconds,\r\n  NumberParseInt,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  String,\r\n  StringPrototypeStartsWith,\r\n  Symbol,\r\n  SymbolAsyncDispose,\r\n  SymbolDispose,\r\n  globalThis,\r\n} = primordials;\r\n\r\nconst {\r\n  getOptionValue,\r\n  refreshOptions,\r\n  getEmbedderOptions,\r\n} = require('internal/options');\r\nconst { reconnectZeroFillToggle } = require('internal/buffer');\r\nconst {\r\n  exposeInterface,\r\n  exposeLazyInterfaces,\r\n  defineReplaceableLazyAttribute,\r\n  setupCoverageHooks,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  ERR_INVALID_THIS,\r\n  ERR_NO_CRYPTO,\r\n  ERR_MISSING_OPTION,\r\n  ERR_ACCESS_DENIED,\r\n} = require('internal/errors').codes;\r\nconst assert = require('internal/assert');\r\nconst {\r\n  namespace: {\r\n    addSerializeCallback,\r\n    isBuildingSnapshot,\r\n  },\r\n} = require('internal/v8/startup_snapshot');\r\n\r\nfunction prepareMainThreadExecution(expandArgv1 = false, initializeModules = true) {\r\n  return prepareExecution({\r\n    expandArgv1,\r\n    initializeModules,\r\n    isMainThread: true,\r\n  });\r\n}\r\n\r\nfunction prepareWorkerThreadExecution() {\r\n  prepareExecution({\r\n    expandArgv1: false,\r\n    initializeModules: false,\r\n    isMainThread: false,\r\n  });\r\n}\r\n\r\nfunction prepareShadowRealmExecution() {\r\n  // Patch the process object with legacy properties and normalizations.\r\n  // Do not expand argv1 as it is not available in ShadowRealm.\r\n  patchProcessObject(false);\r\n  setupDebugEnv();\r\n\r\n  // Disable custom loaders in ShadowRealm.\r\n  setupUserModules(true);\r\n  const {\r\n    privateSymbols: {\r\n      host_defined_option_symbol,\r\n    },\r\n  } = internalBinding('util');\r\n  const {\r\n    vm_dynamic_import_default_internal,\r\n  } = internalBinding('symbols');\r\n\r\n  // For ShadowRealm.prototype.importValue(), the referrer name is\r\n  // always null, so the native ImportModuleDynamically() callback would\r\n  // always fallback to look up the host-defined option from the\r\n  // global object using host_defined_option_symbol. Using\r\n  // vm_dynamic_import_default_internal as the host-defined option\r\n  // instructs the JS-land importModuleDynamicallyCallback() to\r\n  // proxy the request to defaultImportModuleDynamically().\r\n  globalThis[host_defined_option_symbol] =\r\n    vm_dynamic_import_default_internal;\r\n}\r\n\r\nfunction prepareExecution(options) {\r\n  const { expandArgv1, initializeModules, isMainThread } = options;\r\n\r\n  refreshRuntimeOptions();\r\n  reconnectZeroFillToggle();\r\n\r\n  // Patch the process object and get the resolved main entry point.\r\n  const mainEntry = patchProcessObject(expandArgv1);\r\n  setupTraceCategoryState();\r\n  setupInspectorHooks();\r\n  setupNavigator();\r\n  setupWarningHandler();\r\n  setupUndici();\r\n  setupWebCrypto();\r\n  setupCustomEvent();\r\n  setupEventsource();\r\n  setupCodeCoverage();\r\n  setupDebugEnv();\r\n  // Process initial diagnostic reporting configuration, if present.\r\n  initializeReport();\r\n\r\n  // Load permission system API\r\n  initializePermission();\r\n\r\n  initializeSourceMapsHandlers();\r\n  initializeDeprecations();\r\n\r\n  require('internal/dns/utils').initializeDns();\r\n\r\n  setupSymbolDisposePolyfill();\r\n\r\n  if (isMainThread) {\r\n    assert(internalBinding('worker').isMainThread);\r\n    // Worker threads will get the manifest in the message handler.\r\n\r\n    // Print stack trace on `SIGINT` if option `--trace-sigint` presents.\r\n    setupStacktracePrinterOnSigint();\r\n    initializeReportSignalHandlers();  // Main-thread-only.\r\n    initializeHeapSnapshotSignalHandlers();\r\n    // If the process is spawned with env NODE_CHANNEL_FD, it's probably\r\n    // spawned by our child_process module, then initialize IPC.\r\n    // This attaches some internal event listeners and creates:\r\n    // process.send(), process.channel, process.connected,\r\n    // process.disconnect().\r\n    setupChildProcessIpcChannel();\r\n    // If this is a worker in cluster mode, start up the communication\r\n    // channel. This needs to be done before any user code gets executed\r\n    // (including preload modules).\r\n    initializeClusterIPC();\r\n\r\n    // TODO(joyeecheung): do this for worker threads as well.\r\n    require('internal/v8/startup_snapshot').runDeserializeCallbacks();\r\n  } else {\r\n    assert(!internalBinding('worker').isMainThread);\r\n    // The setup should be called in LOAD_SCRIPT message handler.\r\n    assert(!initializeModules);\r\n  }\r\n\r\n  if (initializeModules) {\r\n    setupUserModules();\r\n  }\r\n\r\n  return mainEntry;\r\n}\r\n\r\nfunction setupSymbolDisposePolyfill() {\r\n  // TODO(MoLow): Remove this polyfill once Symbol.dispose and Symbol.asyncDispose are available in V8.\r\n  // eslint-disable-next-line node-core/prefer-primordials\r\n  if (typeof Symbol.dispose !== 'symbol') {\r\n    ObjectDefineProperty(Symbol, 'dispose', {\r\n      __proto__: null,\r\n      configurable: false,\r\n      enumerable: false,\r\n      value: SymbolDispose,\r\n      writable: false,\r\n    });\r\n  }\r\n\r\n  // eslint-disable-next-line node-core/prefer-primordials\r\n  if (typeof Symbol.asyncDispose !== 'symbol') {\r\n    ObjectDefineProperty(Symbol, 'asyncDispose', {\r\n      __proto__: null,\r\n      configurable: false,\r\n      enumerable: false,\r\n      value: SymbolAsyncDispose,\r\n      writable: false,\r\n    });\r\n  }\r\n}\r\n\r\nfunction setupUserModules(forceDefaultLoader = false) {\r\n  initializeCJSLoader();\r\n  initializeESMLoader(forceDefaultLoader);\r\n  const {\r\n    hasStartedUserCJSExecution,\r\n    hasStartedUserESMExecution,\r\n  } = require('internal/modules/helpers');\r\n  assert(!hasStartedUserCJSExecution());\r\n  assert(!hasStartedUserESMExecution());\r\n  if (getEmbedderOptions().hasEmbedderPreload) {\r\n    runEmbedderPreload();\r\n  }\r\n  // Do not enable preload modules if custom loaders are disabled.\r\n  // For example, loader workers are responsible for doing this themselves.\r\n  // And preload modules are not supported in ShadowRealm as well.\r\n  if (!forceDefaultLoader) {\r\n    loadPreloadModules();\r\n  }\r\n  // Need to be done after --require setup.\r\n  initializeFrozenIntrinsics();\r\n}\r\n\r\nfunction refreshRuntimeOptions() {\r\n  refreshOptions();\r\n}\r\n\r\n/**\r\n * Patch the process object with legacy properties and normalizations.\r\n * Replace `process.argv[0]` with `process.execPath`, preserving the original `argv[0]` value as `process.argv0`.\r\n * Replace `process.argv[1]` with the resolved absolute file path of the entry point, if found.\r\n * @param {boolean} expandArgv1 - Whether to replace `process.argv[1]` with the resolved absolute file path of\r\n * the main entry point.\r\n */\r\nfunction patchProcessObject(expandArgv1) {\r\n  const binding = internalBinding('process_methods');\r\n  binding.patchProcessObject(process);\r\n\r\n  // Since we replace process.argv[0] below, preserve the original value in case the user needs it.\r\n  ObjectDefineProperty(process, 'argv0', {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    // Only set it to true during snapshot building.\r\n    configurable: isBuildingSnapshot(),\r\n    value: process.argv[0],\r\n  });\r\n\r\n  process.exitCode = undefined;\r\n  process._exiting = false;\r\n  process.argv[0] = process.execPath;\r\n\r\n  /** @type {string} */\r\n  let mainEntry;\r\n  // If requested, update process.argv[1] to replace whatever the user provided with the resolved absolute file path of\r\n  // the entry point.\r\n  if (expandArgv1 && process.argv[1] &&\r\n      !StringPrototypeStartsWith(process.argv[1], '-')) {\r\n    // Expand process.argv[1] into a full path.\r\n    const path = require('path');\r\n    try {\r\n      mainEntry = path.resolve(process.argv[1]);\r\n      process.argv[1] = mainEntry;\r\n    } catch {\r\n      // Continue regardless of error.\r\n    }\r\n  }\r\n\r\n  // We need to initialize the global console here again with process.stdout\r\n  // and friends for snapshot deserialization.\r\n  const globalConsole = require('internal/console/global');\r\n  const { initializeGlobalConsole } = require('internal/console/constructor');\r\n  initializeGlobalConsole(globalConsole);\r\n\r\n  // TODO(joyeecheung): most of these should be deprecated and removed,\r\n  // except some that we need to be able to mutate during run time.\r\n  addReadOnlyProcessAlias('_eval', '--eval');\r\n  addReadOnlyProcessAlias('_print_eval', '--print');\r\n  addReadOnlyProcessAlias('_syntax_check_only', '--check');\r\n  addReadOnlyProcessAlias('_forceRepl', '--interactive');\r\n  addReadOnlyProcessAlias('_preload_modules', '--require');\r\n  addReadOnlyProcessAlias('noDeprecation', '--no-deprecation');\r\n  addReadOnlyProcessAlias('noProcessWarnings', '--no-warnings');\r\n  addReadOnlyProcessAlias('traceProcessWarnings', '--trace-warnings');\r\n  addReadOnlyProcessAlias('throwDeprecation', '--throw-deprecation');\r\n  addReadOnlyProcessAlias('profProcess', '--prof-process');\r\n  addReadOnlyProcessAlias('traceDeprecation', '--trace-deprecation');\r\n  addReadOnlyProcessAlias('_breakFirstLine', '--inspect-brk', false);\r\n  addReadOnlyProcessAlias('_breakNodeFirstLine', '--inspect-brk-node', false);\r\n\r\n  return mainEntry;\r\n}\r\n\r\nfunction addReadOnlyProcessAlias(name, option, enumerable = true) {\r\n  const value = getOptionValue(option);\r\n  if (value) {\r\n    ObjectDefineProperty(process, name, {\r\n      __proto__: null,\r\n      writable: false,\r\n      configurable: true,\r\n      enumerable,\r\n      value,\r\n    });\r\n  }\r\n}\r\n\r\nfunction setupWarningHandler() {\r\n  const {\r\n    onWarning,\r\n    resetForSerialization,\r\n  } = require('internal/process/warning');\r\n  if (getOptionValue('--warnings') &&\r\n    process.env.NODE_NO_WARNINGS !== '1') {\r\n    process.on('warning', onWarning);\r\n\r\n    // The code above would add the listener back during deserialization,\r\n    // if applicable.\r\n    if (isBuildingSnapshot()) {\r\n      addSerializeCallback(() => {\r\n        process.removeListener('warning', onWarning);\r\n        resetForSerialization();\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n// https://fetch.spec.whatwg.org/\r\n// https://websockets.spec.whatwg.org/\r\nfunction setupUndici() {\r\n  if (getOptionValue('--no-experimental-fetch')) {\r\n    delete globalThis.fetch;\r\n    delete globalThis.FormData;\r\n    delete globalThis.Headers;\r\n    delete globalThis.Request;\r\n    delete globalThis.Response;\r\n  }\r\n\r\n  if (getOptionValue('--no-experimental-websocket')) {\r\n    delete globalThis.WebSocket;\r\n  }\r\n}\r\n\r\n// https://html.spec.whatwg.org/multipage/server-sent-events.html\r\nfunction setupEventsource() {\r\n  if (!getOptionValue('--experimental-eventsource')) {\r\n    delete globalThis.EventSource;\r\n  }\r\n}\r\n\r\n// TODO(aduh95): move this to internal/bootstrap/web/* when the CLI flag is\r\n//               removed.\r\nfunction setupNavigator() {\r\n  if (getEmbedderOptions().noBrowserGlobals ||\r\n      getOptionValue('--no-experimental-global-navigator')) {\r\n    return;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/system-state.html#the-navigator-object\r\n  exposeLazyInterfaces(globalThis, 'internal/navigator', ['Navigator']);\r\n  defineReplaceableLazyAttribute(globalThis, 'internal/navigator', ['navigator'], false);\r\n}\r\n\r\n// TODO(aduh95): move this to internal/bootstrap/web/* when the CLI flag is\r\n//               removed.\r\nfunction setupWebCrypto() {\r\n  if (getEmbedderOptions().noBrowserGlobals ||\r\n      getOptionValue('--no-experimental-global-webcrypto')) {\r\n    return;\r\n  }\r\n\r\n  if (internalBinding('config').hasOpenSSL) {\r\n    defineReplaceableLazyAttribute(\r\n      globalThis,\r\n      'internal/crypto/webcrypto',\r\n      ['crypto'],\r\n      false,\r\n      function cryptoThisCheck() {\r\n        if (this !== globalThis && this != null)\r\n          throw new ERR_INVALID_THIS(\r\n            'nullish or must be the global object');\r\n      },\r\n    );\r\n    exposeLazyInterfaces(\r\n      globalThis, 'internal/crypto/webcrypto',\r\n      ['Crypto', 'CryptoKey', 'SubtleCrypto'],\r\n    );\r\n  } else {\r\n    ObjectDefineProperty(globalThis, 'crypto',\r\n                         { __proto__: null, ...ObjectGetOwnPropertyDescriptor({\r\n                           get crypto() {\r\n                             throw new ERR_NO_CRYPTO();\r\n                           },\r\n                         }, 'crypto') });\r\n\r\n  }\r\n}\r\n\r\nfunction setupCodeCoverage() {\r\n  // Resolve the coverage directory to an absolute path, and\r\n  // overwrite process.env so that the original path gets passed\r\n  // to child processes even when they switch cwd. Don't do anything if the\r\n  // --experimental-test-coverage flag is present, as the test runner will\r\n  // handle coverage.\r\n  if (process.env.NODE_V8_COVERAGE &&\r\n      !getOptionValue('--experimental-test-coverage')) {\r\n    process.env.NODE_V8_COVERAGE =\r\n      setupCoverageHooks(process.env.NODE_V8_COVERAGE);\r\n  }\r\n}\r\n\r\n// TODO(daeyeon): move this to internal/bootstrap/web/* when the CLI flag is\r\n//                removed.\r\nfunction setupCustomEvent() {\r\n  if (getEmbedderOptions().noBrowserGlobals ||\r\n      getOptionValue('--no-experimental-global-customevent')) {\r\n    return;\r\n  }\r\n  const { CustomEvent } = require('internal/event_target');\r\n  exposeInterface(globalThis, 'CustomEvent', CustomEvent);\r\n}\r\n\r\nfunction setupStacktracePrinterOnSigint() {\r\n  if (!getOptionValue('--trace-sigint')) {\r\n    return;\r\n  }\r\n  const { SigintWatchdog } = require('internal/watchdog');\r\n\r\n  const watchdog = new SigintWatchdog();\r\n  watchdog.start();\r\n}\r\n\r\nfunction initializeReport() {\r\n  ObjectDefineProperty(process, 'report', {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      const { report } = require('internal/process/report');\r\n      return report;\r\n    },\r\n  });\r\n}\r\n\r\nfunction setupDebugEnv() {\r\n  require('internal/util/debuglog').initializeDebugEnv(process.env.NODE_DEBUG);\r\n  if (getOptionValue('--expose-internals')) {\r\n    require('internal/bootstrap/realm').BuiltinModule.exposeInternals();\r\n  }\r\n}\r\n\r\n// This has to be called after initializeReport() is called\r\nfunction initializeReportSignalHandlers() {\r\n  if (getOptionValue('--report-on-signal')) {\r\n    const { addSignalHandler } = require('internal/process/report');\r\n    addSignalHandler();\r\n  }\r\n}\r\n\r\nfunction initializeHeapSnapshotSignalHandlers() {\r\n  const signal = getOptionValue('--heapsnapshot-signal');\r\n  const diagnosticDir = getOptionValue('--diagnostic-dir');\r\n\r\n  if (!signal)\r\n    return;\r\n\r\n  require('internal/validators').validateSignalName(signal);\r\n  const { writeHeapSnapshot } = require('v8');\r\n\r\n  function doWriteHeapSnapshot() {\r\n    const heapSnapshotFilename = getHeapSnapshotFilename(diagnosticDir);\r\n    writeHeapSnapshot(heapSnapshotFilename);\r\n  }\r\n  process.on(signal, doWriteHeapSnapshot);\r\n\r\n  // The code above would add the listener back during deserialization,\r\n  // if applicable.\r\n  if (isBuildingSnapshot()) {\r\n    addSerializeCallback(() => {\r\n      process.removeListener(signal, doWriteHeapSnapshot);\r\n    });\r\n  }\r\n}\r\n\r\nfunction setupTraceCategoryState() {\r\n  const { isTraceCategoryEnabled } = internalBinding('trace_events');\r\n  const { toggleTraceCategoryState } = require('internal/process/per_thread');\r\n  toggleTraceCategoryState(isTraceCategoryEnabled('node.async_hooks'));\r\n}\r\n\r\nfunction setupInspectorHooks() {\r\n  // If Debugger.setAsyncCallStackDepth is sent during bootstrap,\r\n  // we cannot immediately call into JS to enable the hooks, which could\r\n  // interrupt the JS execution of bootstrap. So instead we save the\r\n  // notification in the inspector agent if it's sent in the middle of\r\n  // bootstrap, and process the notification later here.\r\n  if (internalBinding('config').hasInspector) {\r\n    const {\r\n      enable,\r\n      disable,\r\n    } = require('internal/inspector_async_hook');\r\n    internalBinding('inspector').registerAsyncHook(enable, disable);\r\n  }\r\n}\r\n\r\n// In general deprecations are initialized wherever the APIs are implemented,\r\n// this is used to deprecate APIs implemented in C++ where the deprecation\r\n// utilities are not easily accessible.\r\nfunction initializeDeprecations() {\r\n  const { deprecate } = require('internal/util');\r\n  const pendingDeprecation = getOptionValue('--pending-deprecation');\r\n\r\n  // DEP0103: access to `process.binding('util').isX` type checkers\r\n  // TODO(addaleax): Turn into a full runtime deprecation.\r\n  const utilBinding = internalBinding('util');\r\n  const types = require('internal/util/types');\r\n  for (const name of [\r\n    'isArrayBuffer',\r\n    'isArrayBufferView',\r\n    'isAsyncFunction',\r\n    'isDataView',\r\n    'isDate',\r\n    'isExternal',\r\n    'isMap',\r\n    'isMapIterator',\r\n    'isNativeError',\r\n    'isPromise',\r\n    'isRegExp',\r\n    'isSet',\r\n    'isSetIterator',\r\n    'isTypedArray',\r\n    'isUint8Array',\r\n    'isAnyArrayBuffer',\r\n  ]) {\r\n    utilBinding[name] = pendingDeprecation ?\r\n      deprecate(types[name],\r\n                'Accessing native typechecking bindings of Node ' +\r\n                'directly is deprecated. ' +\r\n                `Please use \\`util.types.${name}\\` instead.`,\r\n                'DEP0103') :\r\n      types[name];\r\n  }\r\n\r\n  // TODO(joyeecheung): this is a legacy property exposed to process.\r\n  // Now that we use the config binding to carry this information, remove\r\n  // it from the process. We may consider exposing it properly in\r\n  // process.features.\r\n  const { noBrowserGlobals } = internalBinding('config');\r\n  if (noBrowserGlobals) {\r\n    ObjectDefineProperty(process, '_noBrowserGlobals', {\r\n      __proto__: null,\r\n      writable: false,\r\n      enumerable: true,\r\n      configurable: true,\r\n      value: noBrowserGlobals,\r\n    });\r\n  }\r\n\r\n  if (pendingDeprecation) {\r\n    process.binding = deprecate(process.binding,\r\n                                'process.binding() is deprecated. ' +\r\n                                'Please use public APIs instead.', 'DEP0111');\r\n\r\n    process._tickCallback = deprecate(process._tickCallback,\r\n                                      'process._tickCallback() is deprecated',\r\n                                      'DEP0134');\r\n  }\r\n}\r\n\r\nfunction setupChildProcessIpcChannel() {\r\n  if (process.env.NODE_CHANNEL_FD) {\r\n    const assert = require('internal/assert');\r\n\r\n    const fd = NumberParseInt(process.env.NODE_CHANNEL_FD, 10);\r\n    assert(fd >= 0);\r\n\r\n    // Make sure it's not accidentally inherited by child processes.\r\n    delete process.env.NODE_CHANNEL_FD;\r\n\r\n    const serializationMode =\r\n      process.env.NODE_CHANNEL_SERIALIZATION_MODE || 'json';\r\n    delete process.env.NODE_CHANNEL_SERIALIZATION_MODE;\r\n\r\n    require('child_process')._forkChild(fd, serializationMode);\r\n    assert(process.send);\r\n  }\r\n}\r\n\r\nfunction initializeClusterIPC() {\r\n  if (process.argv[1] && process.env.NODE_UNIQUE_ID) {\r\n    const cluster = require('cluster');\r\n    cluster._setupWorker();\r\n    // Make sure it's not accidentally inherited by child processes.\r\n    delete process.env.NODE_UNIQUE_ID;\r\n  }\r\n}\r\n\r\nfunction initializePermission() {\r\n  const experimentalPermission = getOptionValue('--experimental-permission');\r\n  if (experimentalPermission) {\r\n    process.binding = function binding(_module) {\r\n      throw new ERR_ACCESS_DENIED('process.binding');\r\n    };\r\n    // Guarantee path module isn't monkey-patched to bypass permission model\r\n    ObjectFreeze(require('path'));\r\n    process.emitWarning('Permission is an experimental feature',\r\n                        'ExperimentalWarning');\r\n    const { has, deny } = require('internal/process/permission');\r\n    const warnFlags = [\r\n      '--allow-addons',\r\n      '--allow-child-process',\r\n      '--allow-wasi',\r\n      '--allow-worker',\r\n    ];\r\n    for (const flag of warnFlags) {\r\n      if (getOptionValue(flag)) {\r\n        process.emitWarning(\r\n          `The flag ${flag} must be used with extreme caution. ` +\r\n        'It could invalidate the permission model.', 'SecurityWarning');\r\n      }\r\n    }\r\n    const warnCommaFlags = [\r\n      '--allow-fs-read',\r\n      '--allow-fs-write',\r\n    ];\r\n    for (const flag of warnCommaFlags) {\r\n      const value = getOptionValue(flag);\r\n      if (value.length === 1 && value[0].includes(',')) {\r\n        process.emitWarning(\r\n          `The ${flag} CLI flag has changed. ` +\r\n        'Passing a comma-separated list of paths is no longer valid. ' +\r\n        'Documentation can be found at ' +\r\n        'https://nodejs.org/api/permissions.html#file-system-permissions',\r\n          'Warning',\r\n        );\r\n      }\r\n    }\r\n\r\n    ObjectDefineProperty(process, 'permission', {\r\n      __proto__: null,\r\n      enumerable: true,\r\n      configurable: false,\r\n      value: {\r\n        has,\r\n        deny,\r\n      },\r\n    });\r\n  } else {\r\n    const availablePermissionFlags = [\r\n      '--allow-fs-read',\r\n      '--allow-fs-write',\r\n      '--allow-addons',\r\n      '--allow-child-process',\r\n      '--allow-wasi',\r\n      '--allow-worker',\r\n    ];\r\n    ArrayPrototypeForEach(availablePermissionFlags, (flag) => {\r\n      const value = getOptionValue(flag);\r\n      if (value.length) {\r\n        throw new ERR_MISSING_OPTION('--experimental-permission');\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction initializeCJSLoader() {\r\n  const { initializeCJS } = require('internal/modules/cjs/loader');\r\n  initializeCJS();\r\n}\r\n\r\nfunction initializeESMLoader(forceDefaultLoader) {\r\n  const { initializeESM } = require('internal/modules/esm/utils');\r\n  initializeESM(forceDefaultLoader);\r\n\r\n  // Patch the vm module when --experimental-vm-modules is on.\r\n  // Please update the comments in vm.js when this block changes.\r\n  if (getOptionValue('--experimental-vm-modules')) {\r\n    const {\r\n      Module, SourceTextModule, SyntheticModule,\r\n    } = require('internal/vm/module');\r\n    const vm = require('vm');\r\n    vm.Module = Module;\r\n    vm.SourceTextModule = SourceTextModule;\r\n    vm.SyntheticModule = SyntheticModule;\r\n  }\r\n}\r\n\r\nfunction initializeSourceMapsHandlers() {\r\n  const {\r\n    setSourceMapsEnabled,\r\n  } = require('internal/source_map/source_map_cache');\r\n  setSourceMapsEnabled(getOptionValue('--enable-source-maps'));\r\n}\r\n\r\nfunction initializeFrozenIntrinsics() {\r\n  if (getOptionValue('--frozen-intrinsics')) {\r\n    process.emitWarning('The --frozen-intrinsics flag is experimental',\r\n                        'ExperimentalWarning');\r\n    require('internal/freeze_intrinsics')();\r\n  }\r\n}\r\n\r\nfunction runEmbedderPreload() {\r\n  internalBinding('mksnapshot').runEmbedderPreload(process, require);\r\n}\r\n\r\nfunction loadPreloadModules() {\r\n  // For user code, we preload modules if `-r` is passed\r\n  const preloadModules = getOptionValue('--require');\r\n  if (preloadModules && preloadModules.length > 0) {\r\n    const {\r\n      Module: {\r\n        _preloadModules,\r\n      },\r\n    } = require('internal/modules/cjs/loader');\r\n    _preloadModules(preloadModules);\r\n  }\r\n}\r\n\r\nfunction markBootstrapComplete() {\r\n  internalBinding('performance').markBootstrapComplete();\r\n}\r\n\r\n// Sequence number for diagnostic filenames\r\nlet sequenceNumOfheapSnapshot = 0;\r\n\r\n// To generate the HeapSnapshotFilename while using custom diagnosticDir\r\nfunction getHeapSnapshotFilename(diagnosticDir) {\r\n  if (!diagnosticDir) return undefined;\r\n\r\n  const date = new Date();\r\n\r\n  const year = DatePrototypeGetFullYear(date);\r\n  const month = String(DatePrototypeGetMonth(date) + 1).padStart(2, '0');\r\n  const day = String(DatePrototypeGetDate(date)).padStart(2, '0');\r\n  const hours = String(DatePrototypeGetHours(date)).padStart(2, '0');\r\n  const minutes = String(DatePrototypeGetMinutes(date)).padStart(2, '0');\r\n  const seconds = String(DatePrototypeGetSeconds(date)).padStart(2, '0');\r\n\r\n  const dateString = `${year}${month}${day}`;\r\n  const timeString = `${hours}${minutes}${seconds}`;\r\n  const pid = process.pid;\r\n  const threadId = internalBinding('worker').threadId;\r\n  const fileSequence = (++sequenceNumOfheapSnapshot).toString().padStart(3, '0');\r\n\r\n  return `${diagnosticDir}/Heap.${dateString}.${timeString}.${pid}.${threadId}.${fileSequence}.heapsnapshot`;\r\n}\r\n\r\nmodule.exports = {\r\n  setupUserModules,\r\n  prepareMainThreadExecution,\r\n  prepareWorkerThreadExecution,\r\n  prepareShadowRealmExecution,\r\n  markBootstrapComplete,\r\n  loadPreloadModules,\r\n  initializeFrozenIntrinsics,\r\n};\r\n"
  },
  "66": {
    "metadata": {
      "scriptId": "66",
      "url": "node:internal/inspector_async_hook",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 76,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "e24ff7ea9dbcadf65234672fb72ed17b1a10c3bd840c571774a2f3714c9a3981",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2049,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/inspector_async_hook"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  SafeSet,\r\n} = primordials;\r\n\r\nlet hook;\r\nlet config;\r\n\r\nfunction lazyHookCreation() {\r\n  const inspector = internalBinding('inspector');\r\n  const { createHook } = require('async_hooks');\r\n  config = internalBinding('config');\r\n\r\n  hook = createHook({\r\n    init(asyncId, type, triggerAsyncId, resource) {\r\n    // It's difficult to tell which tasks will be recurring and which won't,\r\n    // therefore we mark all tasks as recurring. Based on the discussion\r\n    // in https://github.com/nodejs/node/pull/13870#discussion_r124515293,\r\n    // this should be fine as long as we call asyncTaskCanceled() too.\r\n      const recurring = true;\r\n      if (type === 'PROMISE')\r\n        this.promiseIds.add(asyncId);\r\n      else\r\n        inspector.asyncTaskScheduled(type, asyncId, recurring);\r\n    },\r\n\r\n    before(asyncId) {\r\n      if (this.promiseIds.has(asyncId))\r\n        return;\r\n      inspector.asyncTaskStarted(asyncId);\r\n    },\r\n\r\n    after(asyncId) {\r\n      if (this.promiseIds.has(asyncId))\r\n        return;\r\n      inspector.asyncTaskFinished(asyncId);\r\n    },\r\n\r\n    destroy(asyncId) {\r\n      if (this.promiseIds.has(asyncId))\r\n        return this.promiseIds.delete(asyncId);\r\n      inspector.asyncTaskCanceled(asyncId);\r\n    },\r\n  });\r\n\r\n  hook.promiseIds = new SafeSet();\r\n}\r\n\r\nfunction enable() {\r\n  if (hook === undefined) lazyHookCreation();\r\n  if (config.bits < 64) {\r\n    // V8 Inspector stores task ids as (void*) pointers.\r\n    // async_hooks store ids as 64bit numbers.\r\n    // As a result, we cannot reliably translate async_hook ids to V8 async_task\r\n    // ids on 32bit platforms.\r\n    process.emitWarning(\r\n      'Warning: Async stack traces in debugger are not available ' +\r\n      `on ${config.bits}bit platforms. The feature is disabled.`,\r\n      {\r\n        code: 'INSPECTOR_ASYNC_STACK_TRACES_NOT_AVAILABLE',\r\n      });\r\n  } else {\r\n    hook.enable();\r\n  }\r\n}\r\n\r\nfunction disable() {\r\n  if (hook === undefined) lazyHookCreation();\r\n  hook.disable();\r\n}\r\n\r\nmodule.exports = {\r\n  enable,\r\n  disable,\r\n};\r\n"
  },
  "67": {
    "metadata": {
      "scriptId": "67",
      "url": "node:internal/modules/run_main",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 176,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "92ee4ad2311bdd12ec331e3a038c793daac87951478914c8cb96eb8d49ec109d",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 6696,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/modules/run_main"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  StringPrototypeEndsWith,\r\n  globalThis,\r\n} = primordials;\r\n\r\nconst { getNearestParentPackageJSONType } = internalBinding('modules');\r\nconst { getOptionValue } = require('internal/options');\r\nconst path = require('path');\r\nconst { pathToFileURL } = require('internal/url');\r\nconst { kEmptyObject, getCWDURL } = require('internal/util');\r\nconst {\r\n  hasUncaughtExceptionCaptureCallback,\r\n} = require('internal/process/execution');\r\nconst {\r\n  triggerUncaughtException,\r\n} = internalBinding('errors');\r\nconst {\r\n  privateSymbols: {\r\n    entry_point_promise_private_symbol,\r\n  },\r\n} = internalBinding('util');\r\n/**\r\n * Get the absolute path to the main entry point.\r\n * @param {string} main - Entry point path\r\n */\r\nfunction resolveMainPath(main) {\r\n  const defaultType = getOptionValue('--experimental-default-type');\r\n  /** @type {string} */\r\n  let mainPath;\r\n  if (defaultType === 'module') {\r\n    if (getOptionValue('--preserve-symlinks-main')) { return; }\r\n    mainPath = path.resolve(main);\r\n  } else {\r\n    // Extension searching for the main entry point is supported only in legacy mode.\r\n    // Module._findPath is monkey-patchable here.\r\n    const { Module } = require('internal/modules/cjs/loader');\r\n    mainPath = Module._findPath(path.resolve(main), null, true);\r\n  }\r\n  if (!mainPath) { return; }\r\n\r\n  const preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\r\n  if (!preserveSymlinksMain) {\r\n    const { toRealPath } = require('internal/modules/helpers');\r\n    try {\r\n      mainPath = toRealPath(mainPath);\r\n    } catch (err) {\r\n      if (defaultType === 'module' && err?.code === 'ENOENT') {\r\n        const { decorateErrorWithCommonJSHints } = require('internal/modules/esm/resolve');\r\n        const { getCWDURL } = require('internal/util');\r\n        decorateErrorWithCommonJSHints(err, mainPath, getCWDURL());\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  return mainPath;\r\n}\r\n\r\n/**\r\n * Determine whether the main entry point should be loaded through the ESM Loader.\r\n * @param {string} mainPath - Absolute path to the main entry point\r\n */\r\nfunction shouldUseESMLoader(mainPath) {\r\n  if (getOptionValue('--experimental-default-type') === 'module') { return true; }\r\n\r\n  /**\r\n   * @type {string[]} userLoaders A list of custom loaders registered by the user\r\n   * (or an empty list when none have been registered).\r\n   */\r\n  const userLoaders = getOptionValue('--experimental-loader');\r\n  /**\r\n   * @type {string[]} userImports A list of preloaded modules registered by the user\r\n   * (or an empty list when none have been registered).\r\n   */\r\n  const userImports = getOptionValue('--import');\r\n  if (userLoaders.length > 0 || userImports.length > 0) { return true; }\r\n\r\n  // Determine the module format of the entry point.\r\n  if (mainPath && StringPrototypeEndsWith(mainPath, '.mjs')) { return true; }\r\n  if (!mainPath || StringPrototypeEndsWith(mainPath, '.cjs')) { return false; }\r\n\r\n  const type = getNearestParentPackageJSONType(mainPath);\r\n\r\n  // No package.json or no `type` field.\r\n  if (type === undefined || type === 'none') {\r\n    return false;\r\n  }\r\n\r\n  return type === 'module';\r\n}\r\n\r\n/**\r\n * @param {function(ModuleLoader):ModuleWrap|undefined} callback\r\n */\r\nasync function asyncRunEntryPointWithESMLoader(callback) {\r\n  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n  try {\r\n    const userImports = getOptionValue('--import');\r\n    if (userImports.length > 0) {\r\n      const parentURL = getCWDURL().href;\r\n      for (let i = 0; i < userImports.length; i++) {\r\n        await cascadedLoader.import(userImports[i], parentURL, kEmptyObject);\r\n      }\r\n    } else {\r\n      cascadedLoader.forceLoadHooks();\r\n    }\r\n    await callback(cascadedLoader);\r\n  } catch (err) {\r\n    if (hasUncaughtExceptionCaptureCallback()) {\r\n      process._fatalException(err);\r\n      return;\r\n    }\r\n    triggerUncaughtException(\r\n      err,\r\n      true, /* fromPromise */\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * This initializes the ESM loader and runs --import (if any) before executing the\r\n * callback to run the entry point.\r\n * If the callback intends to evaluate a ESM module as entry point, it should return\r\n * the corresponding ModuleWrap so that stalled TLA can be checked a process exit.\r\n * @param {function(ModuleLoader):ModuleWrap|undefined} callback\r\n * @returns {Promise}\r\n */\r\nfunction runEntryPointWithESMLoader(callback) {\r\n  const promise = asyncRunEntryPointWithESMLoader(callback);\r\n  // Register the promise - if by the time the event loop finishes running, this is\r\n  // still unsettled, we'll search the graph from the entry point module and print\r\n  // the location of any unsettled top-level await found.\r\n  globalThis[entry_point_promise_private_symbol] = promise;\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Parse the CLI main entry point string and run it.\r\n * For backwards compatibility, we have to run a bunch of monkey-patchable code that belongs to the CJS loader (exposed\r\n * by `require('module')`) even when the entry point is ESM.\r\n * This monkey-patchable code is bypassed under `--experimental-default-type=module`.\r\n * Because of backwards compatibility, this function is exposed publicly via `import { runMain } from 'node:module'`.\r\n * When `--experimental-detect-module` is passed, this function will attempt to run ambiguous (no explicit extension, no\r\n * `package.json` type field) entry points as CommonJS first; under certain conditions, it will retry running as ESM.\r\n * @param {string} main - First positional CLI argument, such as `'entry.js'` from `node entry.js`\r\n */\r\nfunction executeUserEntryPoint(main = process.argv[1]) {\r\n  const resolvedMain = resolveMainPath(main);\r\n  const useESMLoader = shouldUseESMLoader(resolvedMain);\r\n  let mainURL;\r\n  // Unless we know we should use the ESM loader to handle the entry point per the checks in `shouldUseESMLoader`, first\r\n  // try to run the entry point via the CommonJS loader; and if that fails under certain conditions, retry as ESM.\r\n  if (!useESMLoader) {\r\n    const cjsLoader = require('internal/modules/cjs/loader');\r\n    const { wrapModuleLoad } = cjsLoader;\r\n    wrapModuleLoad(main, null, true);\r\n  } else {\r\n    const mainPath = resolvedMain || main;\r\n    if (mainURL === undefined) {\r\n      mainURL = pathToFileURL(mainPath).href;\r\n    }\r\n\r\n    runEntryPointWithESMLoader((cascadedLoader) => {\r\n      // Note that if the graph contains unsettled TLA, this may never resolve\r\n      // even after the event loop stops running.\r\n      return cascadedLoader.import(mainURL, undefined, { __proto__: null }, true);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  executeUserEntryPoint,\r\n  runEntryPointWithESMLoader,\r\n};\r\n"
  },
  "68": {
    "metadata": {
      "scriptId": "68",
      "url": "node:internal/dns/utils",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 357,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "e755db9649347e80549c5066472d4657859c1272d44f591970dcbdfa20e8264c",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 9991,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/dns/utils"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  FunctionPrototypeBind,\r\n  NumberParseInt,\r\n  RegExpPrototypeExec,\r\n  RegExpPrototypeSymbolReplace,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_DNS_SET_SERVERS_FAILED,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_IP_ADDRESS,\r\n  },\r\n} = require('internal/errors');\r\nconst { isIP } = require('internal/net');\r\nconst { getOptionValue } = require('internal/options');\r\nconst {\r\n  validateArray,\r\n  validateInt32,\r\n  validateOneOf,\r\n  validateString,\r\n} = require('internal/validators');\r\nlet binding;\r\nfunction lazyBinding() {\r\n  binding ??= internalBinding('cares_wrap');\r\n  return binding;\r\n}\r\nconst IANA_DNS_PORT = 53;\r\nconst IPv6RE = /^\\[([^[\\]]*)\\]/;\r\nconst addrSplitRE = /(^.+?)(?::(\\d+))?$/;\r\n\r\nconst {\r\n  namespace: {\r\n    addSerializeCallback,\r\n    addDeserializeCallback,\r\n    isBuildingSnapshot,\r\n  },\r\n} = require('internal/v8/startup_snapshot');\r\n\r\nfunction validateTimeout(options) {\r\n  const { timeout = -1 } = { ...options };\r\n  validateInt32(timeout, 'options.timeout', -1);\r\n  return timeout;\r\n}\r\n\r\nfunction validateTries(options) {\r\n  const { tries = 4 } = { ...options };\r\n  validateInt32(tries, 'options.tries', 1);\r\n  return tries;\r\n}\r\n\r\nconst kSerializeResolver = Symbol('dns:resolver:serialize');\r\nconst kDeserializeResolver = Symbol('dns:resolver:deserialize');\r\nconst kSnapshotStates = Symbol('dns:resolver:config');\r\nconst kInitializeHandle = Symbol('dns:resolver:initializeHandle');\r\nconst kSetServersInteral = Symbol('dns:resolver:setServers');\r\n\r\n// Resolver instances correspond 1:1 to c-ares channels.\r\n\r\nclass ResolverBase {\r\n  constructor(options = undefined) {\r\n    const timeout = validateTimeout(options);\r\n    const tries = validateTries(options);\r\n    // If we are building snapshot, save the states of the resolver along\r\n    // the way.\r\n    if (isBuildingSnapshot()) {\r\n      this[kSnapshotStates] = { timeout, tries };\r\n    }\r\n    this[kInitializeHandle](timeout, tries);\r\n  }\r\n\r\n  [kInitializeHandle](timeout, tries) {\r\n    const { ChannelWrap } = lazyBinding();\r\n    this._handle = new ChannelWrap(timeout, tries);\r\n  }\r\n\r\n  cancel() {\r\n    this._handle.cancel();\r\n  }\r\n\r\n  getServers() {\r\n    return ArrayPrototypeMap(this._handle.getServers() || [], (val) => {\r\n      if (!val[1] || val[1] === IANA_DNS_PORT)\r\n        return val[0];\r\n\r\n      const host = isIP(val[0]) === 6 ? `[${val[0]}]` : val[0];\r\n      return `${host}:${val[1]}`;\r\n    });\r\n  }\r\n\r\n  setServers(servers) {\r\n    validateArray(servers, 'servers');\r\n\r\n    // Cache the original servers because in the event of an error while\r\n    // setting the servers, c-ares won't have any servers available for\r\n    // resolution.\r\n    const newSet = [];\r\n    ArrayPrototypeForEach(servers, (serv, index) => {\r\n      validateString(serv, `servers[${index}]`);\r\n      let ipVersion = isIP(serv);\r\n\r\n      if (ipVersion !== 0)\r\n        return ArrayPrototypePush(newSet, [ipVersion, serv, IANA_DNS_PORT]);\r\n\r\n      const match = RegExpPrototypeExec(IPv6RE, serv);\r\n\r\n      // Check for an IPv6 in brackets.\r\n      if (match) {\r\n        ipVersion = isIP(match[1]);\r\n\r\n        if (ipVersion !== 0) {\r\n          const port = NumberParseInt(\r\n            RegExpPrototypeSymbolReplace(addrSplitRE, serv, '$2')) || IANA_DNS_PORT;\r\n          return ArrayPrototypePush(newSet, [ipVersion, match[1], port]);\r\n        }\r\n      }\r\n\r\n      // addr::port\r\n      const addrSplitMatch = RegExpPrototypeExec(addrSplitRE, serv);\r\n\r\n      if (addrSplitMatch) {\r\n        const hostIP = addrSplitMatch[1];\r\n        const port = addrSplitMatch[2] || IANA_DNS_PORT;\r\n\r\n        ipVersion = isIP(hostIP);\r\n\r\n        if (ipVersion !== 0) {\r\n          return ArrayPrototypePush(\r\n            newSet, [ipVersion, hostIP, NumberParseInt(port)]);\r\n        }\r\n      }\r\n\r\n      throw new ERR_INVALID_IP_ADDRESS(serv);\r\n    });\r\n\r\n    this[kSetServersInteral](newSet, servers);\r\n  }\r\n\r\n  [kSetServersInteral](newSet, servers) {\r\n    const orig = ArrayPrototypeMap(this._handle.getServers() || [], (val) => {\r\n      val.unshift(isIP(val[0]));\r\n      return val;\r\n    });\r\n    const errorNumber = this._handle.setServers(newSet);\r\n\r\n    if (errorNumber !== 0) {\r\n      // Reset the servers to the old servers, because ares probably unset them.\r\n      this._handle.setServers(orig);\r\n      const { strerror } = lazyBinding();\r\n      const err = strerror(errorNumber);\r\n      throw new ERR_DNS_SET_SERVERS_FAILED(err, servers);\r\n    }\r\n\r\n    if (isBuildingSnapshot()) {\r\n      this[kSnapshotStates].servers = newSet;\r\n    }\r\n  }\r\n\r\n\r\n  setLocalAddress(ipv4, ipv6) {\r\n    validateString(ipv4, 'ipv4');\r\n\r\n    if (ipv6 !== undefined) {\r\n      validateString(ipv6, 'ipv6');\r\n    }\r\n\r\n    this._handle.setLocalAddress(ipv4, ipv6);\r\n\r\n    if (isBuildingSnapshot()) {\r\n      this[kSnapshotStates].localAddress = { ipv4, ipv6 };\r\n    }\r\n  }\r\n\r\n  // TODO(joyeecheung): consider exposing this if custom DNS resolvers\r\n  // end up being useful for snapshot users.\r\n  [kSerializeResolver]() {\r\n    this._handle = null;  // We'll restore it during deserialization.\r\n    addDeserializeCallback(function deserializeResolver(resolver) {\r\n      resolver[kDeserializeResolver]();\r\n    }, this);\r\n  }\r\n\r\n  [kDeserializeResolver]() {\r\n    const { timeout, tries, localAddress, servers } = this[kSnapshotStates];\r\n    this[kInitializeHandle](timeout, tries);\r\n    if (localAddress) {\r\n      const { ipv4, ipv6 } = localAddress;\r\n      this._handle.setLocalAddress(ipv4, ipv6);\r\n    }\r\n    if (servers) {\r\n      this[kSetServersInteral](servers, servers);\r\n    }\r\n  }\r\n}\r\n\r\nlet defaultResolver;\r\nlet dnsOrder;\r\n\r\nfunction initializeDns() {\r\n  const orderFromCLI = getOptionValue('--dns-result-order');\r\n  if (!orderFromCLI) {\r\n    dnsOrder ??= 'verbatim';\r\n  } else {\r\n    // Allow the deserialized application to override order from CLI.\r\n    validateOneOf(orderFromCLI, '--dns-result-order', ['verbatim', 'ipv4first', 'ipv6first']);\r\n    dnsOrder = orderFromCLI;\r\n  }\r\n\r\n  if (!isBuildingSnapshot()) {\r\n    return;\r\n  }\r\n\r\n  addSerializeCallback(() => {\r\n    defaultResolver?.[kSerializeResolver]();\r\n  });\r\n}\r\n\r\nconst resolverKeys = [\r\n  'getServers',\r\n  'resolve',\r\n  'resolve4',\r\n  'resolve6',\r\n  'resolveAny',\r\n  'resolveCaa',\r\n  'resolveCname',\r\n  'resolveMx',\r\n  'resolveNaptr',\r\n  'resolveNs',\r\n  'resolvePtr',\r\n  'resolveSoa',\r\n  'resolveSrv',\r\n  'resolveTxt',\r\n  'reverse',\r\n];\r\n\r\nfunction getDefaultResolver() {\r\n  // We do this here instead of pre-execution so that the default resolver is\r\n  // only ever created when the user loads any dns module.\r\n  if (defaultResolver === undefined) {\r\n    defaultResolver = new ResolverBase();\r\n  }\r\n  return defaultResolver;\r\n}\r\n\r\nfunction setDefaultResolver(resolver) {\r\n  defaultResolver = resolver;\r\n}\r\n\r\nfunction bindDefaultResolver(target, source) {\r\n  const defaultResolver = getDefaultResolver();\r\n  ArrayPrototypeForEach(resolverKeys, (key) => {\r\n    target[key] = FunctionPrototypeBind(source[key], defaultResolver);\r\n  });\r\n}\r\n\r\nfunction validateHints(hints) {\r\n  const { AI_ADDRCONFIG, AI_ALL, AI_V4MAPPED } = lazyBinding();\r\n  if ((hints & ~(AI_ADDRCONFIG | AI_ALL | AI_V4MAPPED)) !== 0) {\r\n    throw new ERR_INVALID_ARG_VALUE('hints', hints);\r\n  }\r\n}\r\n\r\nlet invalidHostnameWarningEmitted = false;\r\nfunction emitInvalidHostnameWarning(hostname) {\r\n  if (!invalidHostnameWarningEmitted) {\r\n    process.emitWarning(\r\n      `The provided hostname \"${hostname}\" is not a valid ` +\r\n      'hostname, and is supported in the dns module solely for compatibility.',\r\n      'DeprecationWarning',\r\n      'DEP0118',\r\n    );\r\n    invalidHostnameWarningEmitted = true;\r\n  }\r\n}\r\n\r\nfunction setDefaultResultOrder(value) {\r\n  validateOneOf(value, 'dnsOrder', ['verbatim', 'ipv4first', 'ipv6first']);\r\n  dnsOrder = value;\r\n}\r\n\r\nfunction getDefaultResultOrder() {\r\n  return dnsOrder;\r\n}\r\n\r\nfunction createResolverClass(resolver) {\r\n  const resolveMap = { __proto__: null };\r\n\r\n  class Resolver extends ResolverBase {}\r\n\r\n  Resolver.prototype.resolveAny = resolveMap.ANY = resolver('queryAny');\r\n  Resolver.prototype.resolve4 = resolveMap.A = resolver('queryA');\r\n  Resolver.prototype.resolve6 = resolveMap.AAAA = resolver('queryAaaa');\r\n  Resolver.prototype.resolveCaa = resolveMap.CAA = resolver('queryCaa');\r\n  Resolver.prototype.resolveCname = resolveMap.CNAME = resolver('queryCname');\r\n  Resolver.prototype.resolveMx = resolveMap.MX = resolver('queryMx');\r\n  Resolver.prototype.resolveNs = resolveMap.NS = resolver('queryNs');\r\n  Resolver.prototype.resolveTxt = resolveMap.TXT = resolver('queryTxt');\r\n  Resolver.prototype.resolveSrv = resolveMap.SRV = resolver('querySrv');\r\n  Resolver.prototype.resolvePtr = resolveMap.PTR = resolver('queryPtr');\r\n  Resolver.prototype.resolveNaptr = resolveMap.NAPTR = resolver('queryNaptr');\r\n  Resolver.prototype.resolveSoa = resolveMap.SOA = resolver('querySoa');\r\n  Resolver.prototype.reverse = resolver('getHostByAddr');\r\n\r\n  return {\r\n    resolveMap,\r\n    Resolver,\r\n  };\r\n}\r\n\r\n// ERROR CODES\r\nconst errorCodes = {\r\n  NODATA: 'ENODATA',\r\n  FORMERR: 'EFORMERR',\r\n  SERVFAIL: 'ESERVFAIL',\r\n  NOTFOUND: 'ENOTFOUND',\r\n  NOTIMP: 'ENOTIMP',\r\n  REFUSED: 'EREFUSED',\r\n  BADQUERY: 'EBADQUERY',\r\n  BADNAME: 'EBADNAME',\r\n  BADFAMILY: 'EBADFAMILY',\r\n  BADRESP: 'EBADRESP',\r\n  CONNREFUSED: 'ECONNREFUSED',\r\n  TIMEOUT: 'ETIMEOUT',\r\n  EOF: 'EOF',\r\n  FILE: 'EFILE',\r\n  NOMEM: 'ENOMEM',\r\n  DESTRUCTION: 'EDESTRUCTION',\r\n  BADSTR: 'EBADSTR',\r\n  BADFLAGS: 'EBADFLAGS',\r\n  NONAME: 'ENONAME',\r\n  BADHINTS: 'EBADHINTS',\r\n  NOTINITIALIZED: 'ENOTINITIALIZED',\r\n  LOADIPHLPAPI: 'ELOADIPHLPAPI',\r\n  ADDRGETNETWORKPARAMS: 'EADDRGETNETWORKPARAMS',\r\n  CANCELLED: 'ECANCELLED',\r\n};\r\n\r\nmodule.exports = {\r\n  bindDefaultResolver,\r\n  getDefaultResolver,\r\n  setDefaultResolver,\r\n  validateHints,\r\n  validateTimeout,\r\n  validateTries,\r\n  emitInvalidHostnameWarning,\r\n  getDefaultResultOrder,\r\n  setDefaultResultOrder,\r\n  errorCodes,\r\n  createResolverClass,\r\n  initializeDns,\r\n};\r\n"
  },
  "69": {
    "metadata": {
      "scriptId": "69",
      "url": "node:internal/net",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 78,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "b0bf60614809ef05e21a5b15557753dba8202a0a0f2a622233fcbf4e82bf7808",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2335,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/net"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  RegExp,\r\n  RegExpPrototypeTest,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst Buffer = require('buffer').Buffer;\r\nconst { writeBuffer } = internalBinding('fs');\r\nconst {\r\n  UVException,\r\n} = require('internal/errors');\r\n\r\n// IPv4 Segment\r\nconst v4Seg = '(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])';\r\nconst v4Str = `(?:${v4Seg}\\\\.){3}${v4Seg}`;\r\nconst IPv4Reg = new RegExp(`^${v4Str}$`);\r\n\r\n// IPv6 Segment\r\nconst v6Seg = '(?:[0-9a-fA-F]{1,4})';\r\nconst IPv6Reg = new RegExp('^(?:' +\r\n  `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){5}(?::${v4Str}|(?::${v6Seg}){1,2}|:)|` +\r\n  `(?:${v6Seg}:){4}(?:(?::${v6Seg}){0,1}:${v4Str}|(?::${v6Seg}){1,3}|:)|` +\r\n  `(?:${v6Seg}:){3}(?:(?::${v6Seg}){0,2}:${v4Str}|(?::${v6Seg}){1,4}|:)|` +\r\n  `(?:${v6Seg}:){2}(?:(?::${v6Seg}){0,3}:${v4Str}|(?::${v6Seg}){1,5}|:)|` +\r\n  `(?:${v6Seg}:){1}(?:(?::${v6Seg}){0,4}:${v4Str}|(?::${v6Seg}){1,6}|:)|` +\r\n  `(?::(?:(?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:))` +\r\n')(?:%[0-9a-zA-Z-.:]{1,})?$');\r\n\r\nfunction isIPv4(s) {\r\n  // TODO(aduh95): Replace RegExpPrototypeTest with RegExpPrototypeExec when it\r\n  // no longer creates a perf regression in the dns benchmark.\r\n  // eslint-disable-next-line node-core/avoid-prototype-pollution\r\n  return RegExpPrototypeTest(IPv4Reg, s);\r\n}\r\n\r\nfunction isIPv6(s) {\r\n  // TODO(aduh95): Replace RegExpPrototypeTest with RegExpPrototypeExec when it\r\n  // no longer creates a perf regression in the dns benchmark.\r\n  // eslint-disable-next-line node-core/avoid-prototype-pollution\r\n  return RegExpPrototypeTest(IPv6Reg, s);\r\n}\r\n\r\nfunction isIP(s) {\r\n  if (isIPv4(s)) return 4;\r\n  if (isIPv6(s)) return 6;\r\n  return 0;\r\n}\r\n\r\nfunction makeSyncWrite(fd) {\r\n  return function(chunk, enc, cb) {\r\n    if (enc !== 'buffer')\r\n      chunk = Buffer.from(chunk, enc);\r\n\r\n    this._handle.bytesWritten += chunk.length;\r\n\r\n    const ctx = {};\r\n    writeBuffer(fd, chunk, 0, chunk.length, null, undefined, ctx);\r\n    if (ctx.errno !== undefined) {\r\n      const ex = new UVException(ctx);\r\n      ex.errno = ctx.errno;\r\n      return cb(ex);\r\n    }\r\n    cb();\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  kReinitializeHandle: Symbol('kReinitializeHandle'),\r\n  isIP,\r\n  isIPv4,\r\n  isIPv6,\r\n  makeSyncWrite,\r\n  normalizedArgsSymbol: Symbol('normalizedArgs'),\r\n};\r\n"
  },
  "70": {
    "metadata": {
      "scriptId": "70",
      "url": "node:internal/bootstrap/switches/does_own_process_state",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 146,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "ea43e66af69e1aab1abc5102305d841746e1f13b6bef5fa859139c9dd798d379",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4031,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/bootstrap/switches/does_own_process_state"
    },
    "source": "'use strict';\r\n\r\nconst credentials = internalBinding('credentials');\r\nconst rawMethods = internalBinding('process_methods');\r\nconst {\r\n  namespace: {\r\n    addDeserializeCallback,\r\n    addSerializeCallback,\r\n    isBuildingSnapshot,\r\n  },\r\n} = require('internal/v8/startup_snapshot');\r\n\r\nprocess.abort = rawMethods.abort;\r\nprocess.umask = wrappedUmask;\r\nprocess.chdir = wrappedChdir;\r\nprocess.cwd = wrappedCwd;\r\n\r\nif (credentials.implementsPosixCredentials) {\r\n  const wrapped = wrapPosixCredentialSetters(credentials);\r\n\r\n  process.initgroups = wrapped.initgroups;\r\n  process.setgroups = wrapped.setgroups;\r\n  process.setegid = wrapped.setegid;\r\n  process.seteuid = wrapped.seteuid;\r\n  process.setgid = wrapped.setgid;\r\n  process.setuid = wrapped.setuid;\r\n}\r\n\r\n// ---- keep the attachment of the wrappers above so that it's easier to ----\r\n// ----              compare the setups side-by-side                    -----\r\n\r\nconst {\r\n  parseFileMode,\r\n  validateArray,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nfunction wrapPosixCredentialSetters(credentials) {\r\n  const {\r\n    codes: {\r\n      ERR_INVALID_ARG_TYPE,\r\n      ERR_UNKNOWN_CREDENTIAL,\r\n    },\r\n  } = require('internal/errors');\r\n  const {\r\n    validateUint32,\r\n  } = require('internal/validators');\r\n\r\n  const {\r\n    initgroups: _initgroups,\r\n    setgroups: _setgroups,\r\n    setegid: _setegid,\r\n    seteuid: _seteuid,\r\n    setgid: _setgid,\r\n    setuid: _setuid,\r\n  } = credentials;\r\n\r\n  function initgroups(user, extraGroup) {\r\n    validateId(user, 'user');\r\n    validateId(extraGroup, 'extraGroup');\r\n    // Result is 0 on success, 1 if user is unknown, 2 if group is unknown.\r\n    const result = _initgroups(user, extraGroup);\r\n    if (result === 1) {\r\n      throw new ERR_UNKNOWN_CREDENTIAL('User', user);\r\n    } else if (result === 2) {\r\n      throw new ERR_UNKNOWN_CREDENTIAL('Group', extraGroup);\r\n    }\r\n  }\r\n\r\n  function setgroups(groups) {\r\n    validateArray(groups, 'groups');\r\n    for (let i = 0; i < groups.length; i++) {\r\n      validateId(groups[i], `groups[${i}]`);\r\n    }\r\n    // Result is 0 on success. A positive integer indicates that the\r\n    // corresponding group was not found.\r\n    const result = _setgroups(groups);\r\n    if (result > 0) {\r\n      throw new ERR_UNKNOWN_CREDENTIAL('Group', groups[result - 1]);\r\n    }\r\n  }\r\n\r\n  function wrapIdSetter(type, method) {\r\n    return function(id) {\r\n      validateId(id, 'id');\r\n      if (typeof id === 'number') id >>>= 0;\r\n      // Result is 0 on success, 1 if credential is unknown.\r\n      const result = method(id);\r\n      if (result === 1) {\r\n        throw new ERR_UNKNOWN_CREDENTIAL(type, id);\r\n      }\r\n    };\r\n  }\r\n\r\n  function validateId(id, name) {\r\n    if (typeof id === 'number') {\r\n      validateUint32(id, name);\r\n    } else if (typeof id !== 'string') {\r\n      throw new ERR_INVALID_ARG_TYPE(name, ['number', 'string'], id);\r\n    }\r\n  }\r\n\r\n  return {\r\n    initgroups,\r\n    setgroups,\r\n    setegid: wrapIdSetter('Group', _setegid),\r\n    seteuid: wrapIdSetter('User', _seteuid),\r\n    setgid: wrapIdSetter('Group', _setgid),\r\n    setuid: wrapIdSetter('User', _setuid),\r\n  };\r\n}\r\n\r\n// Cache the working directory to prevent lots of lookups. If the working\r\n// directory is changed by `chdir`, it'll be updated.\r\nlet cachedCwd = '';\r\n\r\nif (isBuildingSnapshot()) {\r\n  // Reset the cwd on both serialization and deserialization so it's fine\r\n  // for process.cwd() to be accessed inside of serialization callbacks.\r\n  addSerializeCallback(() => {\r\n    cachedCwd = '';\r\n    addDeserializeCallback(() => {\r\n      cachedCwd = '';\r\n    });\r\n  });\r\n}\r\n\r\nfunction wrappedChdir(directory) {\r\n  validateString(directory, 'directory');\r\n  rawMethods.chdir(directory);\r\n  // Mark cache that it requires an update.\r\n  cachedCwd = '';\r\n}\r\n\r\nfunction wrappedUmask(mask) {\r\n  if (mask !== undefined) {\r\n    mask = parseFileMode(mask, 'mask');\r\n  }\r\n  return rawMethods.umask(mask);\r\n}\r\n\r\nfunction wrappedCwd() {\r\n  if (cachedCwd === '')\r\n    cachedCwd = rawMethods.cwd();\r\n  return cachedCwd;\r\n}\r\n"
  },
  "71": {
    "metadata": {
      "scriptId": "71",
      "url": "node:internal/main/run_main_module",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 31,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "cb4da87ce8b8ee8caeea521790ac8e64a5557dbf707fd0b03f32aacdec25445b",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1216,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/main/run_main_module"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  RegExpPrototypeExec,\r\n} = primordials;\r\n\r\nconst {\r\n  prepareMainThreadExecution,\r\n  markBootstrapComplete,\r\n} = require('internal/process/pre_execution');\r\nconst { getOptionValue } = require('internal/options');\r\n\r\nconst mainEntry = prepareMainThreadExecution(true);\r\n\r\nmarkBootstrapComplete();\r\n\r\n// Necessary to reset RegExp statics before user code runs.\r\nRegExpPrototypeExec(/^/, '');\r\n\r\nif (getOptionValue('--experimental-default-type') === 'module') {\r\n  require('internal/modules/run_main').executeUserEntryPoint(mainEntry);\r\n} else {\r\n  /**\r\n   * To support legacy monkey-patching of `Module.runMain`, we call `runMain` here to have the CommonJS loader begin\r\n   * the execution of the main entry point, even if the ESM loader immediately takes over because the main entry is an\r\n   * ES module or one of the other opt-in conditions (such as the use of `--import`) are met. Users can monkey-patch\r\n   * before the main entry point is loaded by doing so via scripts loaded through `--require`. This monkey-patchability\r\n   * is undesirable and is removed in `--experimental-default-type=module` mode.\r\n   */\r\n  require('internal/modules/cjs/loader').Module.runMain(mainEntry);\r\n}\r\n"
  },
  "72": {
    "metadata": {
      "scriptId": "72",
      "url": "node:vm",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 416,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "ced70660ed734a1cc3464f215d411039ebbe65c4ed7605d7600b3984a4c952e3",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 13228,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:vm"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeForEach,\r\n  ObjectFreeze,\r\n  PromiseReject,\r\n  ReflectApply,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  ContextifyScript,\r\n  makeContext,\r\n  constants,\r\n  measureMemory: _measureMemory,\r\n} = internalBinding('contextify');\r\nconst {\r\n  ERR_CONTEXT_NOT_INITIALIZED,\r\n  ERR_INVALID_ARG_TYPE,\r\n} = require('internal/errors').codes;\r\nconst {\r\n  validateArray,\r\n  validateBoolean,\r\n  validateBuffer,\r\n  validateInt32,\r\n  validateOneOf,\r\n  validateObject,\r\n  validateString,\r\n  validateStringArray,\r\n  validateUint32,\r\n  kValidateObjectAllowArray,\r\n  kValidateObjectAllowNullable,\r\n} = require('internal/validators');\r\nconst {\r\n  emitExperimentalWarning,\r\n  kEmptyObject,\r\n  kVmBreakFirstLineSymbol,\r\n} = require('internal/util');\r\nconst {\r\n  getHostDefinedOptionId,\r\n  internalCompileFunction,\r\n  isContext: _isContext,\r\n  registerImportModuleDynamically,\r\n} = require('internal/vm');\r\nconst {\r\n  vm_dynamic_import_main_context_default,\r\n} = internalBinding('symbols');\r\nconst kParsingContext = Symbol('script parsing context');\r\n\r\n/**\r\n * Check if object is a context object created by vm.createContext().\r\n * @throws {TypeError} If object is not an object in the first place, throws TypeError.\r\n * @param {object} object Object to check.\r\n * @returns {boolean}\r\n */\r\nfunction isContext(object) {\r\n  validateObject(object, 'object', kValidateObjectAllowArray);\r\n\r\n  return _isContext(object);\r\n}\r\n\r\nclass Script extends ContextifyScript {\r\n  constructor(code, options = kEmptyObject) {\r\n    code = `${code}`;\r\n    if (typeof options === 'string') {\r\n      options = { filename: options };\r\n    } else {\r\n      validateObject(options, 'options');\r\n    }\r\n\r\n    const {\r\n      filename = 'evalmachine.<anonymous>',\r\n      lineOffset = 0,\r\n      columnOffset = 0,\r\n      cachedData,\r\n      produceCachedData = false,\r\n      importModuleDynamically,\r\n      [kParsingContext]: parsingContext,\r\n    } = options;\r\n\r\n    validateString(filename, 'options.filename');\r\n    validateInt32(lineOffset, 'options.lineOffset');\r\n    validateInt32(columnOffset, 'options.columnOffset');\r\n    if (cachedData !== undefined) {\r\n      validateBuffer(cachedData, 'options.cachedData');\r\n    }\r\n    validateBoolean(produceCachedData, 'options.produceCachedData');\r\n\r\n    const hostDefinedOptionId =\r\n        getHostDefinedOptionId(importModuleDynamically, filename);\r\n    // Calling `ReThrow()` on a native TryCatch does not generate a new\r\n    // abort-on-uncaught-exception check. A dummy try/catch in JS land\r\n    // protects against that.\r\n    try { // eslint-disable-line no-useless-catch\r\n      super(code,\r\n            filename,\r\n            lineOffset,\r\n            columnOffset,\r\n            cachedData,\r\n            produceCachedData,\r\n            parsingContext,\r\n            hostDefinedOptionId);\r\n    } catch (e) {\r\n      throw e; /* node-do-not-add-exception-line */\r\n    }\r\n\r\n    registerImportModuleDynamically(this, importModuleDynamically);\r\n  }\r\n\r\n  runInThisContext(options) {\r\n    const { breakOnSigint, args } = getRunInContextArgs(null, options);\r\n    if (breakOnSigint && process.listenerCount('SIGINT') > 0) {\r\n      return sigintHandlersWrap(super.runInContext, this, args);\r\n    }\r\n    return ReflectApply(super.runInContext, this, args);\r\n  }\r\n\r\n  runInContext(contextifiedObject, options) {\r\n    validateContext(contextifiedObject);\r\n    const { breakOnSigint, args } = getRunInContextArgs(\r\n      contextifiedObject,\r\n      options,\r\n    );\r\n    if (breakOnSigint && process.listenerCount('SIGINT') > 0) {\r\n      return sigintHandlersWrap(super.runInContext, this, args);\r\n    }\r\n    return ReflectApply(super.runInContext, this, args);\r\n  }\r\n\r\n  runInNewContext(contextObject, options) {\r\n    const context = createContext(contextObject, getContextOptions(options));\r\n    return this.runInContext(context, options);\r\n  }\r\n}\r\n\r\nfunction validateContext(contextifiedObject) {\r\n  if (!isContext(contextifiedObject)) {\r\n    throw new ERR_INVALID_ARG_TYPE('contextifiedObject', 'vm.Context',\r\n                                   contextifiedObject);\r\n  }\r\n}\r\n\r\nfunction getRunInContextArgs(contextifiedObject, options = kEmptyObject) {\r\n  validateObject(options, 'options');\r\n\r\n  let timeout = options.timeout;\r\n  if (timeout === undefined) {\r\n    timeout = -1;\r\n  } else {\r\n    validateUint32(timeout, 'options.timeout', true);\r\n  }\r\n\r\n  const {\r\n    displayErrors = true,\r\n    breakOnSigint = false,\r\n    [kVmBreakFirstLineSymbol]: breakFirstLine = false,\r\n  } = options;\r\n\r\n  validateBoolean(displayErrors, 'options.displayErrors');\r\n  validateBoolean(breakOnSigint, 'options.breakOnSigint');\r\n\r\n  return {\r\n    breakOnSigint,\r\n    args: [\r\n      contextifiedObject,\r\n      timeout,\r\n      displayErrors,\r\n      breakOnSigint,\r\n      breakFirstLine,\r\n    ],\r\n  };\r\n}\r\n\r\nfunction getContextOptions(options) {\r\n  if (!options)\r\n    return {};\r\n  const contextOptions = {\r\n    name: options.contextName,\r\n    origin: options.contextOrigin,\r\n    codeGeneration: undefined,\r\n    microtaskMode: options.microtaskMode,\r\n  };\r\n  if (contextOptions.name !== undefined)\r\n    validateString(contextOptions.name, 'options.contextName');\r\n  if (contextOptions.origin !== undefined)\r\n    validateString(contextOptions.origin, 'options.contextOrigin');\r\n  if (options.contextCodeGeneration !== undefined) {\r\n    validateObject(options.contextCodeGeneration,\r\n                   'options.contextCodeGeneration');\r\n    const { strings, wasm } = options.contextCodeGeneration;\r\n    if (strings !== undefined)\r\n      validateBoolean(strings, 'options.contextCodeGeneration.strings');\r\n    if (wasm !== undefined)\r\n      validateBoolean(wasm, 'options.contextCodeGeneration.wasm');\r\n    contextOptions.codeGeneration = { strings, wasm };\r\n  }\r\n  if (options.microtaskMode !== undefined)\r\n    validateString(options.microtaskMode, 'options.microtaskMode');\r\n  return contextOptions;\r\n}\r\n\r\nlet defaultContextNameIndex = 1;\r\nfunction createContext(contextObject = {}, options = kEmptyObject) {\r\n  if (isContext(contextObject)) {\r\n    return contextObject;\r\n  }\r\n\r\n  validateObject(options, 'options');\r\n\r\n  const {\r\n    name = `VM Context ${defaultContextNameIndex++}`,\r\n    origin,\r\n    codeGeneration,\r\n    microtaskMode,\r\n    importModuleDynamically,\r\n  } = options;\r\n\r\n  validateString(name, 'options.name');\r\n  if (origin !== undefined)\r\n    validateString(origin, 'options.origin');\r\n  if (codeGeneration !== undefined)\r\n    validateObject(codeGeneration, 'options.codeGeneration');\r\n\r\n  let strings = true;\r\n  let wasm = true;\r\n  if (codeGeneration !== undefined) {\r\n    ({ strings = true, wasm = true } = codeGeneration);\r\n    validateBoolean(strings, 'options.codeGeneration.strings');\r\n    validateBoolean(wasm, 'options.codeGeneration.wasm');\r\n  }\r\n\r\n  validateOneOf(microtaskMode,\r\n                'options.microtaskMode',\r\n                ['afterEvaluate', undefined]);\r\n  const microtaskQueue = (microtaskMode === 'afterEvaluate');\r\n\r\n  const hostDefinedOptionId =\r\n    getHostDefinedOptionId(importModuleDynamically, name);\r\n\r\n  makeContext(contextObject, name, origin, strings, wasm, microtaskQueue, hostDefinedOptionId);\r\n  // Register the context scope callback after the context was initialized.\r\n  registerImportModuleDynamically(contextObject, importModuleDynamically);\r\n  return contextObject;\r\n}\r\n\r\nfunction createScript(code, options) {\r\n  return new Script(code, options);\r\n}\r\n\r\n// Remove all SIGINT listeners and re-attach them after the wrapped function\r\n// has executed, so that caught SIGINT are handled by the listeners again.\r\nfunction sigintHandlersWrap(fn, thisArg, argsArray) {\r\n  const sigintListeners = process.rawListeners('SIGINT');\r\n\r\n  process.removeAllListeners('SIGINT');\r\n\r\n  try {\r\n    return ReflectApply(fn, thisArg, argsArray);\r\n  } finally {\r\n    // Add using the public methods so that the `newListener` handler of\r\n    // process can re-attach the listeners.\r\n    ArrayPrototypeForEach(sigintListeners, (listener) => {\r\n      process.addListener('SIGINT', listener);\r\n    });\r\n  }\r\n}\r\n\r\nfunction runInContext(code, contextifiedObject, options) {\r\n  validateContext(contextifiedObject);\r\n  if (typeof options === 'string') {\r\n    options = {\r\n      filename: options,\r\n      [kParsingContext]: contextifiedObject,\r\n    };\r\n  } else {\r\n    options = { ...options, [kParsingContext]: contextifiedObject };\r\n  }\r\n  return createScript(code, options)\r\n    .runInContext(contextifiedObject, options);\r\n}\r\n\r\nfunction runInNewContext(code, contextObject, options) {\r\n  if (typeof options === 'string') {\r\n    options = { filename: options };\r\n  }\r\n  contextObject = createContext(contextObject, getContextOptions(options));\r\n  options = { ...options, [kParsingContext]: contextObject };\r\n  return createScript(code, options).runInNewContext(contextObject, options);\r\n}\r\n\r\nfunction runInThisContext(code, options) {\r\n  if (typeof options === 'string') {\r\n    options = { filename: options };\r\n  }\r\n  return createScript(code, options).runInThisContext(options);\r\n}\r\n\r\nfunction compileFunction(code, params, options = kEmptyObject) {\r\n  validateString(code, 'code');\r\n  if (params !== undefined) {\r\n    validateStringArray(params, 'params');\r\n  }\r\n  const {\r\n    filename = '',\r\n    columnOffset = 0,\r\n    lineOffset = 0,\r\n    cachedData = undefined,\r\n    produceCachedData = false,\r\n    parsingContext = undefined,\r\n    contextExtensions = [],\r\n    importModuleDynamically,\r\n  } = options;\r\n\r\n  validateString(filename, 'options.filename');\r\n  validateInt32(columnOffset, 'options.columnOffset');\r\n  validateInt32(lineOffset, 'options.lineOffset');\r\n  if (cachedData !== undefined)\r\n    validateBuffer(cachedData, 'options.cachedData');\r\n  validateBoolean(produceCachedData, 'options.produceCachedData');\r\n  if (parsingContext !== undefined) {\r\n    if (\r\n      typeof parsingContext !== 'object' ||\r\n      parsingContext === null ||\r\n      !isContext(parsingContext)\r\n    ) {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'options.parsingContext',\r\n        'Context',\r\n        parsingContext,\r\n      );\r\n    }\r\n  }\r\n  validateArray(contextExtensions, 'options.contextExtensions');\r\n  ArrayPrototypeForEach(contextExtensions, (extension, i) => {\r\n    const name = `options.contextExtensions[${i}]`;\r\n    validateObject(extension, name, kValidateObjectAllowNullable);\r\n  });\r\n\r\n  const hostDefinedOptionId =\r\n      getHostDefinedOptionId(importModuleDynamically, filename);\r\n\r\n  return internalCompileFunction(\r\n    code, filename, lineOffset, columnOffset,\r\n    cachedData, produceCachedData, parsingContext, contextExtensions,\r\n    params, hostDefinedOptionId, importModuleDynamically,\r\n  ).function;\r\n}\r\n\r\nconst measureMemoryModes = {\r\n  summary: constants.measureMemory.mode.SUMMARY,\r\n  detailed: constants.measureMemory.mode.DETAILED,\r\n};\r\n\r\nconst measureMemoryExecutions = {\r\n  default: constants.measureMemory.execution.DEFAULT,\r\n  eager: constants.measureMemory.execution.EAGER,\r\n};\r\n\r\nfunction measureMemory(options = kEmptyObject) {\r\n  emitExperimentalWarning('vm.measureMemory');\r\n  validateObject(options, 'options');\r\n  const { mode = 'summary', execution = 'default' } = options;\r\n  validateOneOf(mode, 'options.mode', ['summary', 'detailed']);\r\n  validateOneOf(execution, 'options.execution', ['default', 'eager']);\r\n  const result = _measureMemory(measureMemoryModes[mode],\r\n                                measureMemoryExecutions[execution]);\r\n  if (result === undefined) {\r\n    return PromiseReject(new ERR_CONTEXT_NOT_INITIALIZED());\r\n  }\r\n  return result;\r\n}\r\n\r\nconst vmConstants = {\r\n  __proto__: null,\r\n  USE_MAIN_CONTEXT_DEFAULT_LOADER: vm_dynamic_import_main_context_default,\r\n};\r\n\r\nObjectFreeze(vmConstants);\r\n\r\nmodule.exports = {\r\n  Script,\r\n  createContext,\r\n  createScript,\r\n  runInContext,\r\n  runInNewContext,\r\n  runInThisContext,\r\n  isContext,\r\n  compileFunction,\r\n  measureMemory,\r\n  constants: vmConstants,\r\n};\r\n\r\n// The vm module is patched to include vm.Module, vm.SourceTextModule\r\n// and vm.SyntheticModule in the pre-execution phase when\r\n// --experimental-vm-modules is on.\r\n"
  },
  "73": {
    "metadata": {
      "scriptId": "73",
      "url": "evalmachine.<anonymous>",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 0,
      "endColumn": 4,
      "executionContextId": 2,
      "hash": "1eb79602411ef02cf6fe117897015fff89f80face4eccd50425c45149b148408",
      "executionContextAuxData": {
        "isDefault": false
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "Module._extensions..js",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1497,
            "columnNumber": 6
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "evalmachine.<anonymous>"
    },
    "source": "this"
  },
  "74": {
    "metadata": {
      "scriptId": "74",
      "url": "file:///S:/ClearScript%20Testing/js/dump.js",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 0,
      "endColumn": 81,
      "executionContextId": 1,
      "hash": "4f3cad5573a87f5c16c2cc7bc0753124901c6c62d8e4756f892313af6addc52b",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 81,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "wrapSafe",
            "scriptId": "62",
            "url": "node:internal/modules/cjs/loader",
            "lineNumber": 1375,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "file:///S:/ClearScript%20Testing/js/dump.js"
    },
    "source": "require(\"module\").builtinModules.forEach( mod => globalThis[mod] = require(mod) )"
  },
  "75": {
    "metadata": {
      "scriptId": "75",
      "url": "node:module",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 11,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "6230a8a0bd646740e7e46cde9013f63d38d27dc1bd02faec60f583939d3ddf17",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 408,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:module"
    },
    "source": "'use strict';\r\n\r\nconst { findSourceMap } = require('internal/source_map/source_map_cache');\r\nconst { Module } = require('internal/modules/cjs/loader');\r\nconst { register } = require('internal/modules/esm/loader');\r\nconst { SourceMap } = require('internal/source_map/source_map');\r\n\r\nModule.findSourceMap = findSourceMap;\r\nModule.register = register;\r\nModule.SourceMap = SourceMap;\r\nmodule.exports = Module;\r\n"
  },
  "76": {
    "metadata": {
      "scriptId": "76",
      "url": "node:internal/modules/esm/loader",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 786,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "aefd3090c785d0ee0696b53d3097a67d145b4f8ec5fd6ec1d584494fca31626a",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 29673,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/modules/esm/loader"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypeReduce,\r\n  FunctionPrototypeCall,\r\n  JSONStringify,\r\n  ObjectSetPrototypeOf,\r\n  RegExpPrototypeSymbolReplace,\r\n  encodeURIComponent,\r\n  hardenRegExp,\r\n} = primordials;\r\n\r\n\r\n// This is needed to avoid cycles in esm/resolve <-> cjs/loader\r\nconst {\r\n  kIsExecuting,\r\n  kRequiredModuleSymbol,\r\n} = require('internal/modules/cjs/loader');\r\n\r\nconst { imported_cjs_symbol } = internalBinding('symbols');\r\n\r\nconst assert = require('internal/assert');\r\nconst {\r\n  ERR_REQUIRE_CYCLE_MODULE,\r\n  ERR_REQUIRE_ESM,\r\n  ERR_NETWORK_IMPORT_DISALLOWED,\r\n  ERR_UNKNOWN_MODULE_FORMAT,\r\n} = require('internal/errors').codes;\r\nconst { getOptionValue } = require('internal/options');\r\nconst { isURL, pathToFileURL, URL } = require('internal/url');\r\nconst { emitExperimentalWarning, kEmptyObject } = require('internal/util');\r\nconst {\r\n  compileSourceTextModule,\r\n  getDefaultConditions,\r\n} = require('internal/modules/esm/utils');\r\nconst { kImplicitTypeAttribute } = require('internal/modules/esm/assert');\r\nconst { canParse } = internalBinding('url');\r\nconst { ModuleWrap, kEvaluating, kEvaluated } = internalBinding('module_wrap');\r\nconst {\r\n  urlToFilename,\r\n} = require('internal/modules/helpers');\r\nlet defaultResolve, defaultLoad, defaultLoadSync, importMetaInitializer;\r\n\r\n/**\r\n * @typedef {import('url').URL} URL\r\n */\r\n\r\n/**\r\n * Lazy loads the module_map module and returns a new instance of ResolveCache.\r\n * @returns {import('./module_map.js').ResolveCache}\r\n */\r\nfunction newResolveCache() {\r\n  const { ResolveCache } = require('internal/modules/esm/module_map');\r\n  return new ResolveCache();\r\n}\r\n\r\n/**\r\n * Generate a load cache (to store the final result of a load-chain for a particular module).\r\n * @returns {import('./module_map.js').LoadCache}\r\n */\r\nfunction newLoadCache() {\r\n  const { LoadCache } = require('internal/modules/esm/module_map');\r\n  return new LoadCache();\r\n}\r\n\r\n/**\r\n * Lazy-load translators to avoid potentially unnecessary work at startup (ex if ESM is not used).\r\n * @returns {import('./translators.js').Translators}\r\n */\r\nfunction getTranslators() {\r\n  const { translators } = require('internal/modules/esm/translators');\r\n  return translators;\r\n}\r\n\r\n/**\r\n * @type {HooksProxy}\r\n * Multiple loader instances exist for various, specific reasons (see code comments at site).\r\n * In order to maintain consistency, we use a single worker (sandbox), which must sit apart of an\r\n * individual loader instance.\r\n */\r\nlet hooksProxy;\r\n\r\n/**\r\n * @typedef {import('../cjs/loader.js').Module} CJSModule\r\n */\r\n\r\n/**\r\n * @typedef {Record<string, any>} ModuleExports\r\n */\r\n\r\n/**\r\n * @typedef {'builtin'|'commonjs'|'json'|'module'|'wasm'} ModuleFormat\r\n */\r\n\r\n/**\r\n * @typedef {ArrayBuffer|TypedArray|string} ModuleSource\r\n */\r\n\r\n/**\r\n * This class covers the base machinery of module loading. To add custom\r\n * behavior you can pass a customizations object and this object will be\r\n * used to do the loading/resolving/registration process.\r\n */\r\nclass ModuleLoader {\r\n  /**\r\n   * The conditions for resolving packages if `--conditions` is not used.\r\n   */\r\n  #defaultConditions = getDefaultConditions();\r\n\r\n  /**\r\n   * Registry of resolved specifiers\r\n   */\r\n  #resolveCache = newResolveCache();\r\n\r\n  /**\r\n   * Registry of loaded modules, akin to `require.cache`\r\n   */\r\n  loadCache = newLoadCache();\r\n\r\n  /**\r\n   * Methods which translate input code or other information into ES modules\r\n   */\r\n  translators = getTranslators();\r\n\r\n  /**\r\n   * Truthy to allow the use of `import.meta.resolve`. This is needed\r\n   * currently because the `Hooks` class does not have `resolveSync`\r\n   * implemented and `import.meta.resolve` requires it.\r\n   */\r\n  allowImportMetaResolve;\r\n\r\n  /**\r\n   * Customizations to pass requests to.\r\n   *\r\n   * Note that this value _MUST_ be set with `setCustomizations`\r\n   * because it needs to copy `customizations.allowImportMetaResolve`\r\n   *  to this property and failure to do so will cause undefined\r\n   * behavior when invoking `import.meta.resolve`.\r\n   * @see {ModuleLoader.setCustomizations}\r\n   */\r\n  #customizations;\r\n\r\n  constructor(customizations) {\r\n    if (getOptionValue('--experimental-network-imports')) {\r\n      emitExperimentalWarning('Network Imports');\r\n    }\r\n    this.setCustomizations(customizations);\r\n  }\r\n\r\n  /**\r\n   * Change the currently activate customizations for this module\r\n   * loader to be the provided `customizations`.\r\n   *\r\n   * If present, this class customizes its core functionality to the\r\n   * `customizations` object, including registration, loading, and resolving.\r\n   * There are some responsibilities that this class _always_ takes\r\n   * care of, like validating outputs, so that the customizations object\r\n   * does not have to do so.\r\n   *\r\n   * The customizations object has the shape:\r\n   *\r\n   * ```ts\r\n   * interface LoadResult {\r\n   *   format: ModuleFormat;\r\n   *   source: ModuleSource;\r\n   * }\r\n   *\r\n   * interface ResolveResult {\r\n   *   format: string;\r\n   *   url: URL['href'];\r\n   * }\r\n   *\r\n   * interface Customizations {\r\n   *   allowImportMetaResolve: boolean;\r\n   *   load(url: string, context: object): Promise<LoadResult>\r\n   *   resolve(\r\n   *     originalSpecifier:\r\n   *     string, parentURL: string,\r\n   *     importAttributes: Record<string, string>\r\n   *   ): Promise<ResolveResult>\r\n   *   resolveSync(\r\n   *     originalSpecifier:\r\n   *     string, parentURL: string,\r\n   *     importAttributes: Record<string, string>\r\n   *   ) ResolveResult;\r\n   *   register(specifier: string, parentURL: string): any;\r\n   *   forceLoadHooks(): void;\r\n   * }\r\n   * ```\r\n   *\r\n   * Note that this class _also_ implements the `Customizations`\r\n   * interface, as does `CustomizedModuleLoader` and `Hooks`.\r\n   *\r\n   * Calling this function alters how modules are loaded and should be\r\n   * invoked with care.\r\n   * @param {object} customizations\r\n   */\r\n  setCustomizations(customizations) {\r\n    this.#customizations = customizations;\r\n    if (customizations) {\r\n      this.allowImportMetaResolve = customizations.allowImportMetaResolve;\r\n    } else {\r\n      this.allowImportMetaResolve = true;\r\n    }\r\n  }\r\n\r\n  async eval(source, url, isEntryPoint = false) {\r\n    const evalInstance = (url) => {\r\n      return compileSourceTextModule(url, source, this);\r\n    };\r\n    const { ModuleJob } = require('internal/modules/esm/module_job');\r\n    const job = new ModuleJob(\r\n      this, url, undefined, evalInstance, false, false);\r\n    this.loadCache.set(url, undefined, job);\r\n    const { module } = await job.run(isEntryPoint);\r\n\r\n    return {\r\n      __proto__: null,\r\n      namespace: module.getNamespace(),\r\n      module,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get a (possibly still pending) module job from the cache,\r\n   * or create one and return its Promise.\r\n   * @param {string} specifier The string after `from` in an `import` statement,\r\n   *                           or the first parameter of an `import()`\r\n   *                           expression\r\n   * @param {string | undefined} parentURL The URL of the module importing this\r\n   *                                     one, unless this is the Node.js entry\r\n   *                                     point.\r\n   * @param {Record<string, string>} importAttributes Validations for the\r\n   *                                                  module import.\r\n   * @returns {Promise<ModuleJob>} The (possibly pending) module job\r\n   */\r\n  async getModuleJob(specifier, parentURL, importAttributes) {\r\n    const resolveResult = await this.resolve(specifier, parentURL, importAttributes);\r\n    return this.getJobFromResolveResult(resolveResult, parentURL, importAttributes);\r\n  }\r\n\r\n  getModuleJobSync(specifier, parentURL, importAttributes) {\r\n    const resolveResult = this.resolveSync(specifier, parentURL, importAttributes);\r\n    return this.getJobFromResolveResult(resolveResult, parentURL, importAttributes, true);\r\n  }\r\n\r\n  getJobFromResolveResult(resolveResult, parentURL, importAttributes, sync) {\r\n    const { url, format } = resolveResult;\r\n    const resolvedImportAttributes = resolveResult.importAttributes ?? importAttributes;\r\n    let job = this.loadCache.get(url, resolvedImportAttributes.type);\r\n\r\n    // CommonJS will set functions for lazy job evaluation.\r\n    if (typeof job === 'function') {\r\n      this.loadCache.set(url, undefined, job = job());\r\n    }\r\n\r\n    if (job === undefined) {\r\n      job = this.#createModuleJob(url, resolvedImportAttributes, parentURL, format, sync);\r\n    }\r\n\r\n    return job;\r\n  }\r\n\r\n  /**\r\n   * This constructs (creates, instantiates and evaluates) a module graph that\r\n   * is require()'d.\r\n   * @param {CJSModule} mod CJS module wrapper of the ESM.\r\n   * @param {string} filename Resolved filename of the module being require()'d\r\n   * @param {string} source Source code. TODO(joyeecheung): pass the raw buffer.\r\n   * @param {string} isMain Whether this module is a main module.\r\n   * @param {CJSModule|undefined} parent Parent module, if any.\r\n   * @returns {{ModuleWrap}}\r\n   */\r\n  importSyncForRequire(mod, filename, source, isMain, parent) {\r\n    const url = pathToFileURL(filename).href;\r\n    let job = this.loadCache.get(url, kImplicitTypeAttribute);\r\n    // This module job is already created:\r\n    // 1. If it was loaded by `require()` before, at this point the instantiation\r\n    //    is already completed and we can check the whether it is in a cycle\r\n    //    (in that case the module status is kEvaluaing), and whether the\r\n    //    required graph is synchronous.\r\n    // 2. If it was loaded by `import` before, only allow it if it's already evaluated\r\n    //    to forbid cycles.\r\n    //    TODO(joyeecheung): ensure that imported synchronous graphs are evaluated\r\n    //    synchronously so that any previously imported synchronous graph is already\r\n    //    evaluated at this point.\r\n    if (job !== undefined) {\r\n      mod[kRequiredModuleSymbol] = job.module;\r\n      if (job.module.getStatus() !== kEvaluated) {\r\n        const parentFilename = urlToFilename(parent?.filename);\r\n        let message = `Cannot require() ES Module ${filename} in a cycle.`;\r\n        if (parentFilename) {\r\n          message += ` (from ${parentFilename})`;\r\n        }\r\n        throw new ERR_REQUIRE_CYCLE_MODULE(message);\r\n      }\r\n      return job.module.getNamespaceSync();\r\n    }\r\n    // TODO(joyeecheung): refactor this so that we pre-parse in C++ and hit the\r\n    // cache here, or use a carrier object to carry the compiled module script\r\n    // into the constructor to ensure cache hit.\r\n    const wrap = compileSourceTextModule(url, source, this);\r\n    const inspectBrk = (isMain && getOptionValue('--inspect-brk'));\r\n\r\n    const { ModuleJobSync } = require('internal/modules/esm/module_job');\r\n    job = new ModuleJobSync(this, url, kEmptyObject, wrap, isMain, inspectBrk);\r\n    this.loadCache.set(url, kImplicitTypeAttribute, job);\r\n    mod[kRequiredModuleSymbol] = job.module;\r\n    return job.runSync().namespace;\r\n  }\r\n\r\n  /**\r\n   * Resolve individual module requests and create or get the cached ModuleWraps for\r\n   * each of them. This is only used to create a module graph being require()'d.\r\n   * @param {string} specifier Specifier of the the imported module.\r\n   * @param {string} parentURL Where the import comes from.\r\n   * @param {object} importAttributes import attributes from the import statement.\r\n   * @returns {ModuleJobBase}\r\n   */\r\n  getModuleJobForRequire(specifier, parentURL, importAttributes) {\r\n    assert(getOptionValue('--experimental-require-module'));\r\n\r\n    if (canParse(specifier)) {\r\n      const protocol = new URL(specifier).protocol;\r\n      if (protocol === 'https:' || protocol === 'http:') {\r\n        throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier, parentURL,\r\n                                                'ES modules cannot be loaded by require() from the network');\r\n      }\r\n      assert(protocol === 'file:' || protocol === 'node:' || protocol === 'data:');\r\n    }\r\n\r\n    const requestKey = this.#resolveCache.serializeKey(specifier, importAttributes);\r\n    let resolveResult = this.#resolveCache.get(requestKey, parentURL);\r\n    if (resolveResult == null) {\r\n      resolveResult = this.defaultResolve(specifier, parentURL, importAttributes);\r\n      this.#resolveCache.set(requestKey, parentURL, resolveResult);\r\n    }\r\n\r\n    const { url, format } = resolveResult;\r\n    const resolvedImportAttributes = resolveResult.importAttributes ?? importAttributes;\r\n    let job = this.loadCache.get(url, resolvedImportAttributes.type);\r\n    if (job !== undefined) {\r\n      // This module is being evaluated, which means it's imported in a previous link\r\n      // in a cycle.\r\n      if (job.module.getStatus() === kEvaluating) {\r\n        const parentFilename = urlToFilename(parentURL);\r\n        let message = `Cannot import Module ${specifier} in a cycle.`;\r\n        if (parentFilename) {\r\n          message += ` (from ${parentFilename})`;\r\n        }\r\n        throw new ERR_REQUIRE_CYCLE_MODULE(message);\r\n      }\r\n      // Otherwise the module could be imported before but the evaluation may be already\r\n      // completed (e.g. the require call is lazy) so it's okay. We will return the\r\n      // module now and check asynchronicity of the entire graph later, after the\r\n      // graph is instantiated.\r\n      return job;\r\n    }\r\n\r\n    defaultLoadSync ??= require('internal/modules/esm/load').defaultLoadSync;\r\n    const loadResult = defaultLoadSync(url, { format, importAttributes });\r\n    const {\r\n      format: finalFormat,\r\n      responseURL,\r\n      source,\r\n    } = loadResult;\r\n\r\n    this.validateLoadResult(url, finalFormat);\r\n    if (finalFormat === 'wasm') {\r\n      assert.fail('WASM is currently unsupported by require(esm)');\r\n    }\r\n\r\n    const translator = getTranslators().get(finalFormat);\r\n    if (!translator) {\r\n      throw new ERR_UNKNOWN_MODULE_FORMAT(finalFormat, responseURL);\r\n    }\r\n\r\n    const isMain = (parentURL === undefined);\r\n    const wrap = FunctionPrototypeCall(translator, this, responseURL, source, isMain);\r\n    assert(wrap instanceof ModuleWrap);  // No asynchronous translators should be called.\r\n\r\n    if (process.env.WATCH_REPORT_DEPENDENCIES && process.send) {\r\n      process.send({ 'watch:import': [url] });\r\n    }\r\n\r\n    const cjsModule = wrap[imported_cjs_symbol];\r\n    if (cjsModule) {\r\n      assert(finalFormat === 'commonjs-sync');\r\n      // Check if the ESM initiating import CJS is being required by the same CJS module.\r\n      if (cjsModule && cjsModule[kIsExecuting]) {\r\n        const parentFilename = urlToFilename(parentURL);\r\n        let message = `Cannot import CommonJS Module ${specifier} in a cycle.`;\r\n        if (parentFilename) {\r\n          message += ` (from ${parentFilename})`;\r\n        }\r\n        throw new ERR_REQUIRE_CYCLE_MODULE(message);\r\n      }\r\n    }\r\n\r\n    const inspectBrk = (isMain && getOptionValue('--inspect-brk'));\r\n    const { ModuleJobSync } = require('internal/modules/esm/module_job');\r\n    job = new ModuleJobSync(this, url, importAttributes, wrap, isMain, inspectBrk);\r\n\r\n    this.loadCache.set(url, importAttributes.type, job);\r\n    return job;\r\n  }\r\n\r\n  /**\r\n   * Create and cache an object representing a loaded module.\r\n   * @param {string} url The absolute URL that was resolved for this module\r\n   * @param {Record<string, string>} importAttributes Validations for the\r\n   *                                                  module import.\r\n   * @param {string} [parentURL] The absolute URL of the module importing this\r\n   *                             one, unless this is the Node.js entry point\r\n   * @param {string} [format] The format hint possibly returned by the\r\n   *                          `resolve` hook\r\n   * @returns {Promise<ModuleJob>} The (possibly pending) module job\r\n   */\r\n  #createModuleJob(url, importAttributes, parentURL, format, sync) {\r\n    const callTranslator = ({ format: finalFormat, responseURL, source }, isMain) => {\r\n      const translator = getTranslators().get(finalFormat);\r\n\r\n      if (!translator) {\r\n        throw new ERR_UNKNOWN_MODULE_FORMAT(finalFormat, responseURL);\r\n      }\r\n\r\n      return FunctionPrototypeCall(translator, this, responseURL, source, isMain);\r\n    };\r\n    const context = { format, importAttributes };\r\n\r\n    const moduleProvider = sync ?\r\n      (url, isMain) => callTranslator(this.loadSync(url, context), isMain) :\r\n      async (url, isMain) => callTranslator(await this.load(url, context), isMain);\r\n\r\n    const isMain = parentURL === undefined;\r\n    const inspectBrk = (\r\n      isMain &&\r\n      getOptionValue('--inspect-brk')\r\n    );\r\n\r\n    if (process.env.WATCH_REPORT_DEPENDENCIES && process.send) {\r\n      process.send({ 'watch:import': [url] });\r\n    }\r\n\r\n    const { ModuleJob } = require('internal/modules/esm/module_job');\r\n    const job = new ModuleJob(\r\n      this,\r\n      url,\r\n      importAttributes,\r\n      moduleProvider,\r\n      isMain,\r\n      inspectBrk,\r\n      sync,\r\n    );\r\n\r\n    this.loadCache.set(url, importAttributes.type, job);\r\n\r\n    return job;\r\n  }\r\n\r\n  /**\r\n   * This method is usually called indirectly as part of the loading processes.\r\n   * Use directly with caution.\r\n   * @param {string} specifier The first parameter of an `import()` expression.\r\n   * @param {string} parentURL Path of the parent importing the module.\r\n   * @param {Record<string, string>} importAttributes Validations for the\r\n   *                                                  module import.\r\n   * @returns {Promise<ModuleExports>}\r\n   */\r\n  async import(specifier, parentURL, importAttributes, isEntryPoint = false) {\r\n    const moduleJob = await this.getModuleJob(specifier, parentURL, importAttributes);\r\n    const { module } = await moduleJob.run(isEntryPoint);\r\n    return module.getNamespace();\r\n  }\r\n\r\n  /**\r\n   * @see {@link CustomizedModuleLoader.register}\r\n   */\r\n  register(specifier, parentURL, data, transferList) {\r\n    if (!this.#customizations) {\r\n      // `CustomizedModuleLoader` is defined at the bottom of this file and\r\n      // available well before this line is ever invoked. This is here in\r\n      // order to preserve the git diff instead of moving the class.\r\n      // eslint-disable-next-line no-use-before-define\r\n      this.setCustomizations(new CustomizedModuleLoader());\r\n    }\r\n    return this.#customizations.register(`${specifier}`, `${parentURL}`, data, transferList);\r\n  }\r\n\r\n  /**\r\n   * Resolve the location of the module.\r\n   * @param {string} originalSpecifier The specified URL path of the module to\r\n   *                                   be resolved.\r\n   * @param {string} [parentURL] The URL path of the module's parent.\r\n   * @param {ImportAttributes} importAttributes Attributes from the import\r\n   *                                            statement or expression.\r\n   * @returns {{ format: string, url: URL['href'] }}\r\n   */\r\n  resolve(originalSpecifier, parentURL, importAttributes) {\r\n    if (this.#customizations) {\r\n      return this.#customizations.resolve(originalSpecifier, parentURL, importAttributes);\r\n    }\r\n    const requestKey = this.#resolveCache.serializeKey(originalSpecifier, importAttributes);\r\n    const cachedResult = this.#resolveCache.get(requestKey, parentURL);\r\n    if (cachedResult != null) {\r\n      return cachedResult;\r\n    }\r\n    const result = this.defaultResolve(originalSpecifier, parentURL, importAttributes);\r\n    this.#resolveCache.set(requestKey, parentURL, result);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Just like `resolve` except synchronous. This is here specifically to support\r\n   * `import.meta.resolve` which must happen synchronously.\r\n   */\r\n  resolveSync(originalSpecifier, parentURL, importAttributes) {\r\n    if (this.#customizations) {\r\n      return this.#customizations.resolveSync(originalSpecifier, parentURL, importAttributes);\r\n    }\r\n    return this.defaultResolve(originalSpecifier, parentURL, importAttributes);\r\n  }\r\n\r\n  /**\r\n   * Our `defaultResolve` is synchronous and can be used in both\r\n   * `resolve` and `resolveSync`. This function is here just to avoid\r\n   * repeating the same code block twice in those functions.\r\n   */\r\n  defaultResolve(originalSpecifier, parentURL, importAttributes) {\r\n    defaultResolve ??= require('internal/modules/esm/resolve').defaultResolve;\r\n\r\n    const context = {\r\n      __proto__: null,\r\n      conditions: this.#defaultConditions,\r\n      importAttributes,\r\n      parentURL,\r\n    };\r\n\r\n    return defaultResolve(originalSpecifier, context);\r\n  }\r\n\r\n  /**\r\n   * Provide source that is understood by one of Node's translators.\r\n   * @param {URL['href']} url The URL/path of the module to be loaded\r\n   * @param {object} [context] Metadata about the module\r\n   * @returns {Promise<{ format: ModuleFormat, source: ModuleSource }>}\r\n   */\r\n  async load(url, context) {\r\n    defaultLoad ??= require('internal/modules/esm/load').defaultLoad;\r\n    const result = this.#customizations ?\r\n      await this.#customizations.load(url, context) :\r\n      await defaultLoad(url, context);\r\n    this.validateLoadResult(url, result?.format);\r\n    return result;\r\n  }\r\n\r\n  loadSync(url, context) {\r\n    defaultLoadSync ??= require('internal/modules/esm/load').defaultLoadSync;\r\n\r\n    let result = this.#customizations ?\r\n      this.#customizations.loadSync(url, context) :\r\n      defaultLoadSync(url, context);\r\n    let format = result?.format;\r\n    if (format === 'module') {\r\n      throw new ERR_REQUIRE_ESM(url, true);\r\n    }\r\n    if (format === 'commonjs') {\r\n      format = 'require-commonjs';\r\n      result = { __proto__: result, format };\r\n    }\r\n    this.validateLoadResult(url, format);\r\n    return result;\r\n  }\r\n\r\n  validateLoadResult(url, format) {\r\n    if (format == null) {\r\n      require('internal/modules/esm/load').throwUnknownModuleFormat(url, format);\r\n    }\r\n  }\r\n\r\n  importMetaInitialize(meta, context) {\r\n    if (this.#customizations) {\r\n      return this.#customizations.importMetaInitialize(meta, context, this);\r\n    }\r\n    importMetaInitializer ??= require('internal/modules/esm/initialize_import_meta').initializeImportMeta;\r\n    meta = importMetaInitializer(meta, context, this);\r\n    return meta;\r\n  }\r\n\r\n  /**\r\n   * No-op when no hooks have been supplied.\r\n   */\r\n  forceLoadHooks() {\r\n    this.#customizations?.forceLoadHooks();\r\n  }\r\n}\r\nObjectSetPrototypeOf(ModuleLoader.prototype, null);\r\n\r\nclass CustomizedModuleLoader {\r\n\r\n  allowImportMetaResolve = true;\r\n\r\n  /**\r\n   * Instantiate a module loader that uses user-provided custom loader hooks.\r\n   */\r\n  constructor() {\r\n    getHooksProxy();\r\n  }\r\n\r\n  /**\r\n   * Register some loader specifier.\r\n   * @param {string} originalSpecifier The specified URL path of the loader to\r\n   *                                   be registered.\r\n   * @param {string} parentURL The parent URL from where the loader will be\r\n   *                           registered if using it package name as specifier\r\n   * @param {any} [data] Arbitrary data to be passed from the custom loader\r\n   * (user-land) to the worker.\r\n   * @param {any[]} [transferList] Objects in `data` that are changing ownership\r\n   * @returns {{ format: string, url: URL['href'] }}\r\n   */\r\n  register(originalSpecifier, parentURL, data, transferList) {\r\n    return hooksProxy.makeSyncRequest('register', transferList, originalSpecifier, parentURL, data);\r\n  }\r\n\r\n  /**\r\n   * Resolve the location of the module.\r\n   * @param {string} originalSpecifier The specified URL path of the module to\r\n   *                                   be resolved.\r\n   * @param {string} [parentURL] The URL path of the module's parent.\r\n   * @param {ImportAttributes} importAttributes Attributes from the import\r\n   *                                            statement or expression.\r\n   * @returns {{ format: string, url: URL['href'] }}\r\n   */\r\n  resolve(originalSpecifier, parentURL, importAttributes) {\r\n    return hooksProxy.makeAsyncRequest('resolve', undefined, originalSpecifier, parentURL, importAttributes);\r\n  }\r\n\r\n  resolveSync(originalSpecifier, parentURL, importAttributes) {\r\n    // This happens only as a result of `import.meta.resolve` calls, which must be sync per spec.\r\n    return hooksProxy.makeSyncRequest('resolve', undefined, originalSpecifier, parentURL, importAttributes);\r\n  }\r\n\r\n  /**\r\n   * Provide source that is understood by one of Node's translators.\r\n   * @param {URL['href']} url The URL/path of the module to be loaded\r\n   * @param {object} [context] Metadata about the module\r\n   * @returns {Promise<{ format: ModuleFormat, source: ModuleSource }>}\r\n   */\r\n  load(url, context) {\r\n    return hooksProxy.makeAsyncRequest('load', undefined, url, context);\r\n  }\r\n  loadSync(url, context) {\r\n    return hooksProxy.makeSyncRequest('load', undefined, url, context);\r\n  }\r\n\r\n  importMetaInitialize(meta, context, loader) {\r\n    hooksProxy.importMetaInitialize(meta, context, loader);\r\n  }\r\n\r\n  forceLoadHooks() {\r\n    hooksProxy.waitForWorker();\r\n  }\r\n}\r\n\r\nlet emittedLoaderFlagWarning = false;\r\n/**\r\n * A loader instance is used as the main entry point for loading ES modules. Currently, this is a singleton; there is\r\n * only one used for loading the main module and everything in its dependency graph, though separate instances of this\r\n * class might be instantiated as part of bootstrap for other purposes.\r\n * @returns {ModuleLoader}\r\n */\r\nfunction createModuleLoader() {\r\n  let customizations = null;\r\n  // Don't spawn a new worker if custom loaders are disabled. For instance, if\r\n  // we're already in a worker thread created by instantiating\r\n  // CustomizedModuleLoader; doing so would cause an infinite loop.\r\n  if (!require('internal/modules/esm/utils').forceDefaultLoader()) {\r\n    const userLoaderPaths = getOptionValue('--experimental-loader');\r\n    if (userLoaderPaths.length > 0) {\r\n      if (!emittedLoaderFlagWarning) {\r\n        const readableURIEncode = (string) => ArrayPrototypeReduce(\r\n          [\r\n            [/'/g, '%27'], // We need to URL-encode the single quote as it's the delimiter for the --import flag.\r\n            [/%22/g, '\"'], // We can decode the double quotes to improve readability.\r\n            [/%2F/ig, '/'], // We can decode the slashes to improve readability.\r\n          ],\r\n          (str, { 0: regex, 1: replacement }) => RegExpPrototypeSymbolReplace(hardenRegExp(regex), str, replacement),\r\n          encodeURIComponent(string));\r\n        process.emitWarning(\r\n          '`--experimental-loader` may be removed in the future; instead use `register()`:\\n' +\r\n          `--import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; ${ArrayPrototypeJoin(\r\n            ArrayPrototypeMap(userLoaderPaths, (loader) => `register(${readableURIEncode(JSONStringify(loader))}, pathToFileURL(\"./\"))`),\r\n            '; ',\r\n          )};'`,\r\n          'ExperimentalWarning',\r\n        );\r\n        emittedLoaderFlagWarning = true;\r\n      }\r\n      customizations = new CustomizedModuleLoader();\r\n    }\r\n  }\r\n\r\n  return new ModuleLoader(customizations);\r\n}\r\n\r\n\r\n/**\r\n * Get the HooksProxy instance. If it is not defined, then create a new one.\r\n * @returns {HooksProxy}\r\n */\r\nfunction getHooksProxy() {\r\n  if (!hooksProxy) {\r\n    const { HooksProxy } = require('internal/modules/esm/hooks');\r\n    hooksProxy = new HooksProxy();\r\n  }\r\n\r\n  return hooksProxy;\r\n}\r\n\r\nlet cascadedLoader;\r\n\r\n/**\r\n * This is a singleton ESM loader that integrates the loader hooks, if any.\r\n * It it used by other internal built-ins when they need to load ESM code\r\n * while also respecting hooks.\r\n * When built-ins need access to this loader, they should do\r\n * require('internal/module/esm/loader').getOrInitializeCascadedLoader()\r\n * lazily only right before the loader is actually needed, and don't do it\r\n * in the top-level, to avoid circular dependencies.\r\n * @returns {ModuleLoader}\r\n */\r\nfunction getOrInitializeCascadedLoader() {\r\n  cascadedLoader ??= createModuleLoader();\r\n  return cascadedLoader;\r\n}\r\n\r\n/**\r\n * Register a single loader programmatically.\r\n * @param {string|URL} specifier\r\n * @param {string|URL} [parentURL] Base to use when resolving `specifier`; optional if\r\n * `specifier` is absolute. Same as `options.parentUrl`, just inline\r\n * @param {object} [options] Additional options to apply, described below.\r\n * @param {string|URL} [options.parentURL] Base to use when resolving `specifier`\r\n * @param {any} [options.data] Arbitrary data passed to the loader's `initialize` hook\r\n * @param {any[]} [options.transferList] Objects in `data` that are changing ownership\r\n * @returns {void} We want to reserve the return value for potential future extension of the API.\r\n * @example\r\n * ```js\r\n * register('./myLoader.js');\r\n * register('ts-node/esm', { parentURL: import.meta.url });\r\n * register('./myLoader.js', { parentURL: import.meta.url });\r\n * register('ts-node/esm', import.meta.url);\r\n * register('./myLoader.js', import.meta.url);\r\n * register(new URL('./myLoader.js', import.meta.url));\r\n * register('./myLoader.js', {\r\n *   parentURL: import.meta.url,\r\n *   data: { banana: 'tasty' },\r\n * });\r\n * register('./myLoader.js', {\r\n *   parentURL: import.meta.url,\r\n *   data: someArrayBuffer,\r\n *   transferList: [someArrayBuffer],\r\n * });\r\n * ```\r\n */\r\nfunction register(specifier, parentURL = undefined, options) {\r\n  if (parentURL != null && typeof parentURL === 'object' && !isURL(parentURL)) {\r\n    options = parentURL;\r\n    parentURL = options.parentURL;\r\n  }\r\n  getOrInitializeCascadedLoader().register(\r\n    specifier,\r\n    parentURL ?? 'data:',\r\n    options?.data,\r\n    options?.transferList,\r\n  );\r\n}\r\n\r\nmodule.exports = {\r\n  createModuleLoader,\r\n  getHooksProxy,\r\n  getOrInitializeCascadedLoader,\r\n  register,\r\n};\r\n"
  },
  "77": {
    "metadata": {
      "scriptId": "77",
      "url": "node:internal/modules/esm/assert",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 116,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "f6eba000b943517625006dd69b6e9297eed0a00694ac8e8ae18098864a536a44",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3991,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/modules/esm/assert"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeIncludes,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  ObjectValues,\r\n} = primordials;\r\nconst { validateString } = require('internal/validators');\r\n\r\nconst {\r\n  ERR_IMPORT_ATTRIBUTE_TYPE_INCOMPATIBLE,\r\n  ERR_IMPORT_ATTRIBUTE_MISSING,\r\n  ERR_IMPORT_ATTRIBUTE_UNSUPPORTED,\r\n} = require('internal/errors').codes;\r\n\r\n// The HTML spec has an implied default type of `'javascript'`.\r\nconst kImplicitTypeAttribute = 'javascript';\r\n\r\n/**\r\n * Define a map of module formats to import attributes types (the value of\r\n * `type` in `with { type: 'json' }`).\r\n * @type {Map<string, string>}\r\n */\r\nconst formatTypeMap = {\r\n  '__proto__': null,\r\n  'builtin': kImplicitTypeAttribute,\r\n  'commonjs': kImplicitTypeAttribute,\r\n  'json': 'json',\r\n  'module': kImplicitTypeAttribute,\r\n  'wasm': kImplicitTypeAttribute, // It's unclear whether the HTML spec will require an type attribute or not for Wasm; see https://github.com/WebAssembly/esm-integration/issues/42\r\n};\r\n\r\n/**\r\n * The HTML spec disallows the default type to be explicitly specified\r\n * (for now); so `import './file.js'` is okay but\r\n * `import './file.js' with { type: 'javascript' }` throws.\r\n * @type {Array<string, string>}\r\n */\r\nconst supportedTypeAttributes = ArrayPrototypeFilter(\r\n  ObjectValues(formatTypeMap),\r\n  (type) => type !== kImplicitTypeAttribute);\r\n\r\n\r\n/**\r\n * Test a module's import attributes.\r\n * @param {string} url The URL of the imported module, for error reporting.\r\n * @param {string} format One of Node's supported translators\r\n * @param {Record<string, string>} importAttributes Validations for the\r\n *                                                  module import.\r\n * @returns {true}\r\n * @throws {TypeError} If the format and type attribute are incompatible.\r\n */\r\nfunction validateAttributes(url, format,\r\n                            importAttributes = { __proto__: null }) {\r\n  const keys = ObjectKeys(importAttributes);\r\n  for (let i = 0; i < keys.length; i++) {\r\n    if (keys[i] !== 'type') {\r\n      throw new ERR_IMPORT_ATTRIBUTE_UNSUPPORTED(keys[i], importAttributes[keys[i]]);\r\n    }\r\n  }\r\n  const validType = formatTypeMap[format];\r\n\r\n  switch (validType) {\r\n    case undefined:\r\n      // Ignore attributes for module formats we don't recognize, to allow new\r\n      // formats in the future.\r\n      return true;\r\n\r\n    case kImplicitTypeAttribute:\r\n      // This format doesn't allow an import type attribute, so the property\r\n      // must not be set on the import attributes object.\r\n      if (!ObjectPrototypeHasOwnProperty(importAttributes, 'type')) {\r\n        return true;\r\n      }\r\n      return handleInvalidType(url, importAttributes.type);\r\n\r\n    case importAttributes.type:\r\n      // The type attribute is the valid type for this format.\r\n      return true;\r\n\r\n    default:\r\n      // There is an expected type for this format, but the value of\r\n      // `importAttributes.type` might not have been it.\r\n      if (!ObjectPrototypeHasOwnProperty(importAttributes, 'type')) {\r\n        // `type` wasn't specified at all.\r\n        throw new ERR_IMPORT_ATTRIBUTE_MISSING(url, 'type', validType);\r\n      }\r\n      return handleInvalidType(url, importAttributes.type);\r\n  }\r\n}\r\n\r\n/**\r\n * Throw the correct error depending on what's wrong with the type attribute.\r\n * @param {string} url The resolved URL for the module to be imported\r\n * @param {string} type The value of the import attributes' `type` property\r\n */\r\nfunction handleInvalidType(url, type) {\r\n  // `type` might have not been a string.\r\n  validateString(type, 'type');\r\n\r\n  // `type` might not have been one of the types we understand.\r\n  if (!ArrayPrototypeIncludes(supportedTypeAttributes, type)) {\r\n    throw new ERR_IMPORT_ATTRIBUTE_UNSUPPORTED('type', type);\r\n  }\r\n\r\n  // `type` was the wrong value for this format.\r\n  throw new ERR_IMPORT_ATTRIBUTE_TYPE_INCOMPATIBLE(url, type);\r\n}\r\n\r\n\r\nmodule.exports = {\r\n  kImplicitTypeAttribute,\r\n  validateAttributes,\r\n};\r\n"
  },
  "78": {
    "metadata": {
      "scriptId": "78",
      "url": "node:internal/source_map/source_map",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 394,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "e3d4417e42ca12c5ef2054e5678f0f305a4b6f2ed82101471d4657439aecf29b",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 12578,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/source_map/source_map"
    },
    "source": "// This file is a modified version of:\r\n// https://cs.chromium.org/chromium/src/v8/tools/SourceMap.js?rcl=dd10454c1d\r\n// from the V8 codebase. Logic specific to WebInspector is removed and linting\r\n// is made to match the Node.js style guide.\r\n\r\n// Copyright 2013 the V8 project authors. All rights reserved.\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are\r\n// met:\r\n//\r\n//     * Redistributions of source code must retain the above copyright\r\n//       notice, this list of conditions and the following disclaimer.\r\n//     * Redistributions in binary form must reproduce the above\r\n//       copyright notice, this list of conditions and the following\r\n//       disclaimer in the documentation and/or other materials provided\r\n//       with the distribution.\r\n//     * Neither the name of Google Inc. nor the names of its\r\n//       contributors may be used to endorse or promote products derived\r\n//       from this software without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n// This is a copy from blink dev tools, see:\r\n// http://src.chromium.org/viewvc/blink/trunk/Source/devtools/front_end/SourceMap.js\r\n// revision: 153407\r\n\r\n/*\r\n * Copyright (C) 2012 Google Inc. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are\r\n * met:\r\n *\r\n *     * Redistributions of source code must retain the above copyright\r\n * notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above\r\n * copyright notice, this list of conditions and the following disclaimer\r\n * in the documentation and/or other materials provided with the\r\n * distribution.\r\n *     * Neither the name of Google Inc. nor the names of its\r\n * contributors may be used to endorse or promote products derived from\r\n * this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSort,\r\n  ObjectPrototypeHasOwnProperty,\r\n  StringPrototypeCharAt,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst { validateObject } = require('internal/validators');\r\n\r\nlet base64Map;\r\n\r\nconst VLQ_BASE_SHIFT = 5;\r\nconst VLQ_BASE_MASK = (1 << 5) - 1;\r\nconst VLQ_CONTINUATION_MASK = 1 << 5;\r\n\r\nconst kMappings = Symbol('kMappings');\r\n\r\nclass StringCharIterator {\r\n  /**\r\n   * @constructor\r\n   * @param {string} string\r\n   */\r\n  constructor(string) {\r\n    this._string = string;\r\n    this._position = 0;\r\n  }\r\n\r\n  /**\r\n   * @return {string}\r\n   */\r\n  next() {\r\n    return StringPrototypeCharAt(this._string, this._position++);\r\n  }\r\n\r\n  /**\r\n   * @return {string}\r\n   */\r\n  peek() {\r\n    return StringPrototypeCharAt(this._string, this._position);\r\n  }\r\n\r\n  /**\r\n   * @return {boolean}\r\n   */\r\n  hasNext() {\r\n    return this._position < this._string.length;\r\n  }\r\n}\r\n\r\n/**\r\n * Implements Source Map V3 model.\r\n * See https://github.com/google/closure-compiler/wiki/Source-Maps\r\n * for format description.\r\n */\r\nclass SourceMap {\r\n  #payload;\r\n  #mappings = [];\r\n  #sources = {};\r\n  #sourceContentByURL = {};\r\n  #lineLengths = undefined;\r\n\r\n  /**\r\n   * @constructor\r\n   * @param {SourceMapV3} payload\r\n   */\r\n  constructor(payload, { lineLengths } = { __proto__: null }) {\r\n    if (!base64Map) {\r\n      const base64Digits =\r\n             'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n      base64Map = {};\r\n      for (let i = 0; i < base64Digits.length; ++i)\r\n        base64Map[base64Digits[i]] = i;\r\n    }\r\n    this.#payload = cloneSourceMapV3(payload);\r\n    this.#parseMappingPayload();\r\n    if (ArrayIsArray(lineLengths) && lineLengths.length) {\r\n      this.#lineLengths = lineLengths;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {object} raw source map v3 payload.\r\n   */\r\n  get payload() {\r\n    return cloneSourceMapV3(this.#payload);\r\n  }\r\n\r\n  get [kMappings]() {\r\n    return this.#mappings;\r\n  }\r\n\r\n  /**\r\n   * @return {number[] | undefined} line lengths of generated source code\r\n   */\r\n  get lineLengths() {\r\n    if (this.#lineLengths) {\r\n      return ArrayPrototypeSlice(this.#lineLengths);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  #parseMappingPayload = () => {\r\n    if (this.#payload.sections) {\r\n      this.#parseSections(this.#payload.sections);\r\n    } else {\r\n      this.#parseMap(this.#payload, 0, 0);\r\n    }\r\n    ArrayPrototypeSort(this.#mappings, compareSourceMapEntry);\r\n  };\r\n\r\n  /**\r\n   * @param {Array.<SourceMapV3.Section>} sections\r\n   */\r\n  #parseSections = (sections) => {\r\n    for (let i = 0; i < sections.length; ++i) {\r\n      const section = sections[i];\r\n      this.#parseMap(section.map, section.offset.line, section.offset.column);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @param {number} lineOffset 0-indexed line offset in compiled resource\r\n   * @param {number} columnOffset 0-indexed column offset in compiled resource\r\n   * @return {object} representing start of range if found, or empty object\r\n   */\r\n  findEntry(lineOffset, columnOffset) {\r\n    let first = 0;\r\n    let count = this.#mappings.length;\r\n    while (count > 1) {\r\n      const step = count >> 1;\r\n      const middle = first + step;\r\n      const mapping = this.#mappings[middle];\r\n      if (lineOffset < mapping[0] ||\r\n          (lineOffset === mapping[0] && columnOffset < mapping[1])) {\r\n        count = step;\r\n      } else {\r\n        first = middle;\r\n        count -= step;\r\n      }\r\n    }\r\n    const entry = this.#mappings[first];\r\n    if (!first && entry && (lineOffset < entry[0] ||\r\n        (lineOffset === entry[0] && columnOffset < entry[1]))) {\r\n      return {};\r\n    } else if (!entry) {\r\n      return {};\r\n    }\r\n    return {\r\n      generatedLine: entry[0],\r\n      generatedColumn: entry[1],\r\n      originalSource: entry[2],\r\n      originalLine: entry[3],\r\n      originalColumn: entry[4],\r\n      name: entry[5],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {number} lineNumber 1-indexed line number in compiled resource call site\r\n   * @param {number} columnNumber 1-indexed column number in compiled resource call site\r\n   * @return {object} representing origin call site if found, or empty object\r\n   */\r\n  findOrigin(lineNumber, columnNumber) {\r\n    const range = this.findEntry(lineNumber - 1, columnNumber - 1);\r\n    if (\r\n      range.originalSource === undefined ||\r\n      range.originalLine === undefined ||\r\n      range.originalColumn === undefined ||\r\n      range.generatedLine === undefined ||\r\n      range.generatedColumn === undefined\r\n    ) {\r\n      return {};\r\n    }\r\n    const lineOffset = lineNumber - range.generatedLine;\r\n    const columnOffset = columnNumber - range.generatedColumn;\r\n    return {\r\n      name: range.name,\r\n      fileName: range.originalSource,\r\n      lineNumber: range.originalLine + lineOffset,\r\n      columnNumber: range.originalColumn + columnOffset,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  #parseMap(map, lineNumber, columnNumber) {\r\n    let sourceIndex = 0;\r\n    let sourceLineNumber = 0;\r\n    let sourceColumnNumber = 0;\r\n    let nameIndex = 0;\r\n\r\n    const sources = [];\r\n    const originalToCanonicalURLMap = {};\r\n    for (let i = 0; i < map.sources.length; ++i) {\r\n      const url = map.sources[i];\r\n      originalToCanonicalURLMap[url] = url;\r\n      ArrayPrototypePush(sources, url);\r\n      this.#sources[url] = true;\r\n\r\n      if (map.sourcesContent && map.sourcesContent[i])\r\n        this.#sourceContentByURL[url] = map.sourcesContent[i];\r\n    }\r\n\r\n    const stringCharIterator = new StringCharIterator(map.mappings);\r\n    let sourceURL = sources[sourceIndex];\r\n    while (true) {\r\n      if (stringCharIterator.peek() === ',')\r\n        stringCharIterator.next();\r\n      else {\r\n        while (stringCharIterator.peek() === ';') {\r\n          lineNumber += 1;\r\n          columnNumber = 0;\r\n          stringCharIterator.next();\r\n        }\r\n        if (!stringCharIterator.hasNext())\r\n          break;\r\n      }\r\n\r\n      columnNumber += decodeVLQ(stringCharIterator);\r\n      if (isSeparator(stringCharIterator.peek())) {\r\n        ArrayPrototypePush(this.#mappings, [lineNumber, columnNumber]);\r\n        continue;\r\n      }\r\n\r\n      const sourceIndexDelta = decodeVLQ(stringCharIterator);\r\n      if (sourceIndexDelta) {\r\n        sourceIndex += sourceIndexDelta;\r\n        sourceURL = sources[sourceIndex];\r\n      }\r\n      sourceLineNumber += decodeVLQ(stringCharIterator);\r\n      sourceColumnNumber += decodeVLQ(stringCharIterator);\r\n\r\n      let name;\r\n      if (!isSeparator(stringCharIterator.peek())) {\r\n        nameIndex += decodeVLQ(stringCharIterator);\r\n        name = map.names?.[nameIndex];\r\n      }\r\n\r\n      ArrayPrototypePush(\r\n        this.#mappings,\r\n        [lineNumber, columnNumber, sourceURL, sourceLineNumber,\r\n         sourceColumnNumber, name],\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} char\r\n * @return {boolean}\r\n */\r\nfunction isSeparator(char) {\r\n  return char === ',' || char === ';';\r\n}\r\n\r\n/**\r\n * @param {SourceMap.StringCharIterator} stringCharIterator\r\n * @return {number}\r\n */\r\nfunction decodeVLQ(stringCharIterator) {\r\n  // Read unsigned value.\r\n  let result = 0;\r\n  let shift = 0;\r\n  let digit;\r\n  do {\r\n    digit = base64Map[stringCharIterator.next()];\r\n    result += (digit & VLQ_BASE_MASK) << shift;\r\n    shift += VLQ_BASE_SHIFT;\r\n  } while (digit & VLQ_CONTINUATION_MASK);\r\n\r\n  // Fix the sign.\r\n  const negative = result & 1;\r\n  // Use unsigned right shift, so that the 32nd bit is properly shifted to the\r\n  // 31st, and the 32nd becomes unset.\r\n  result >>>= 1;\r\n  if (!negative) {\r\n    return result;\r\n  }\r\n\r\n  // We need to OR here to ensure the 32nd bit (the sign bit in an Int32) is\r\n  // always set for negative numbers. If `result` were 1, (meaning `negate` is\r\n  // true and all other bits were zeros), `result` would now be 0. But -0\r\n  // doesn't flip the 32nd bit as intended. All other numbers will successfully\r\n  // set the 32nd bit without issue, so doing this is a noop for them.\r\n  return -result | (1 << 31);\r\n}\r\n\r\n/**\r\n * @param {SourceMapV3} payload\r\n * @return {SourceMapV3}\r\n */\r\nfunction cloneSourceMapV3(payload) {\r\n  validateObject(payload, 'payload');\r\n  payload = { ...payload };\r\n  for (const key in payload) {\r\n    if (ObjectPrototypeHasOwnProperty(payload, key) &&\r\n        ArrayIsArray(payload[key])) {\r\n      payload[key] = ArrayPrototypeSlice(payload[key]);\r\n    }\r\n  }\r\n  return payload;\r\n}\r\n\r\n/**\r\n * @param {Array} entry1 source map entry [lineNumber, columnNumber, sourceURL,\r\n *  sourceLineNumber, sourceColumnNumber]\r\n * @param {Array} entry2 source map entry.\r\n * @return {number}\r\n */\r\nfunction compareSourceMapEntry(entry1, entry2) {\r\n  const { 0: lineNumber1, 1: columnNumber1 } = entry1;\r\n  const { 0: lineNumber2, 1: columnNumber2 } = entry2;\r\n  if (lineNumber1 !== lineNumber2) {\r\n    return lineNumber1 - lineNumber2;\r\n  }\r\n  return columnNumber1 - columnNumber2;\r\n}\r\n\r\nmodule.exports = {\r\n  kMappings,\r\n  SourceMap,\r\n};\r\n"
  },
  "79": {
    "metadata": {
      "scriptId": "79",
      "url": "node:_http_agent",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 558,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "d5bc8171703aa21679b632cee1df272fc2c3fd4d6d2c1e1624c68c1544ebdd7c",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 17554,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_http_agent"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypePop,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeShift,\r\n  ArrayPrototypeSome,\r\n  ArrayPrototypeSplice,\r\n  FunctionPrototypeCall,\r\n  NumberParseInt,\r\n  ObjectKeys,\r\n  ObjectSetPrototypeOf,\r\n  ObjectValues,\r\n  RegExpPrototypeExec,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeSplit,\r\n  StringPrototypeStartsWith,\r\n  StringPrototypeSubstring,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst net = require('net');\r\nconst EventEmitter = require('events');\r\nlet debug = require('internal/util/debuglog').debuglog('http', (fn) => {\r\n  debug = fn;\r\n});\r\nconst { AsyncResource } = require('async_hooks');\r\nconst { async_id_symbol } = require('internal/async_hooks').symbols;\r\nconst {\r\n  kEmptyObject,\r\n  once,\r\n} = require('internal/util');\r\nconst {\r\n  validateNumber,\r\n  validateOneOf,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst kOnKeylog = Symbol('onkeylog');\r\nconst kRequestOptions = Symbol('requestOptions');\r\nconst kRequestAsyncResource = Symbol('requestAsyncResource');\r\n// New Agent code.\r\n\r\n// The largest departure from the previous implementation is that\r\n// an Agent instance holds connections for a variable number of host:ports.\r\n// Surprisingly, this is still API compatible as far as third parties are\r\n// concerned. The only code that really notices the difference is the\r\n// request object.\r\n\r\n// Another departure is that all code related to HTTP parsing is in\r\n// ClientRequest.onSocket(). The Agent is now *strictly*\r\n// concerned with managing a connection pool.\r\n\r\nclass ReusedHandle {\r\n  constructor(type, handle) {\r\n    this.type = type;\r\n    this.handle = handle;\r\n  }\r\n}\r\n\r\nfunction freeSocketErrorListener(err) {\r\n  const socket = this;\r\n  debug('SOCKET ERROR on FREE socket:', err.message, err.stack);\r\n  socket.destroy();\r\n  socket.emit('agentRemove');\r\n}\r\n\r\nfunction Agent(options) {\r\n  if (!(this instanceof Agent))\r\n    return new Agent(options);\r\n\r\n  FunctionPrototypeCall(EventEmitter, this);\r\n\r\n  this.defaultPort = 80;\r\n  this.protocol = 'http:';\r\n\r\n  this.options = { __proto__: null, ...options };\r\n\r\n  if (this.options.noDelay === undefined)\r\n    this.options.noDelay = true;\r\n\r\n  // Don't confuse net and make it think that we're connecting to a pipe\r\n  this.options.path = null;\r\n  this.requests = { __proto__: null };\r\n  this.sockets = { __proto__: null };\r\n  this.freeSockets = { __proto__: null };\r\n  this.keepAliveMsecs = this.options.keepAliveMsecs || 1000;\r\n  this.keepAlive = this.options.keepAlive || false;\r\n  this.maxSockets = this.options.maxSockets || Agent.defaultMaxSockets;\r\n  this.maxFreeSockets = this.options.maxFreeSockets || 256;\r\n  this.scheduling = this.options.scheduling || 'lifo';\r\n  this.maxTotalSockets = this.options.maxTotalSockets;\r\n  this.totalSocketCount = 0;\r\n\r\n  validateOneOf(this.scheduling, 'scheduling', ['fifo', 'lifo']);\r\n\r\n  if (this.maxTotalSockets !== undefined) {\r\n    validateNumber(this.maxTotalSockets, 'maxTotalSockets', 1);\r\n  } else {\r\n    this.maxTotalSockets = Infinity;\r\n  }\r\n\r\n  this.on('free', (socket, options) => {\r\n    const name = this.getName(options);\r\n    debug('agent.on(free)', name);\r\n\r\n    // TODO(ronag): socket.destroy(err) might have been called\r\n    // before coming here and have an 'error' scheduled. In the\r\n    // case of socket.destroy() below this 'error' has no handler\r\n    // and could cause unhandled exception.\r\n\r\n    if (!socket.writable) {\r\n      socket.destroy();\r\n      return;\r\n    }\r\n\r\n    const requests = this.requests[name];\r\n    if (requests && requests.length) {\r\n      const req = ArrayPrototypeShift(requests);\r\n      const reqAsyncRes = req[kRequestAsyncResource];\r\n      if (reqAsyncRes) {\r\n        // Run request within the original async context.\r\n        reqAsyncRes.runInAsyncScope(() => {\r\n          asyncResetHandle(socket);\r\n          setRequestSocket(this, req, socket);\r\n        });\r\n        req[kRequestAsyncResource] = null;\r\n      } else {\r\n        setRequestSocket(this, req, socket);\r\n      }\r\n      if (requests.length === 0) {\r\n        delete this.requests[name];\r\n      }\r\n      return;\r\n    }\r\n\r\n    // If there are no pending requests, then put it in\r\n    // the freeSockets pool, but only if we're allowed to do so.\r\n    const req = socket._httpMessage;\r\n    if (!req || !req.shouldKeepAlive || !this.keepAlive) {\r\n      socket.destroy();\r\n      return;\r\n    }\r\n\r\n    const freeSockets = this.freeSockets[name] || [];\r\n    const freeLen = freeSockets.length;\r\n    let count = freeLen;\r\n    if (this.sockets[name])\r\n      count += this.sockets[name].length;\r\n\r\n    if (this.totalSocketCount > this.maxTotalSockets ||\r\n        count > this.maxSockets ||\r\n        freeLen >= this.maxFreeSockets ||\r\n        !this.keepSocketAlive(socket)) {\r\n      socket.destroy();\r\n      return;\r\n    }\r\n\r\n    this.freeSockets[name] = freeSockets;\r\n    socket[async_id_symbol] = -1;\r\n    socket._httpMessage = null;\r\n    this.removeSocket(socket, options);\r\n\r\n    socket.once('error', freeSocketErrorListener);\r\n    ArrayPrototypePush(freeSockets, socket);\r\n  });\r\n\r\n  // Don't emit keylog events unless there is a listener for them.\r\n  this.on('newListener', maybeEnableKeylog);\r\n}\r\nObjectSetPrototypeOf(Agent.prototype, EventEmitter.prototype);\r\nObjectSetPrototypeOf(Agent, EventEmitter);\r\n\r\nfunction maybeEnableKeylog(eventName) {\r\n  if (eventName === 'keylog') {\r\n    this.removeListener('newListener', maybeEnableKeylog);\r\n    // Future sockets will listen on keylog at creation.\r\n    const agent = this;\r\n    this[kOnKeylog] = function onkeylog(keylog) {\r\n      agent.emit('keylog', keylog, this);\r\n    };\r\n    // Existing sockets will start listening on keylog now.\r\n    const sockets = ObjectValues(this.sockets);\r\n    for (let i = 0; i < sockets.length; i++) {\r\n      sockets[i].on('keylog', this[kOnKeylog]);\r\n    }\r\n  }\r\n}\r\n\r\nAgent.defaultMaxSockets = Infinity;\r\n\r\nAgent.prototype.createConnection = net.createConnection;\r\n\r\n// Get the key for a given set of request options\r\nAgent.prototype.getName = function getName(options = kEmptyObject) {\r\n  let name = options.host || 'localhost';\r\n\r\n  name += ':';\r\n  if (options.port)\r\n    name += options.port;\r\n\r\n  name += ':';\r\n  if (options.localAddress)\r\n    name += options.localAddress;\r\n\r\n  // Pacify parallel/test-http-agent-getname by only appending\r\n  // the ':' when options.family is set.\r\n  if (options.family === 4 || options.family === 6)\r\n    name += `:${options.family}`;\r\n\r\n  if (options.socketPath)\r\n    name += `:${options.socketPath}`;\r\n\r\n  return name;\r\n};\r\n\r\nAgent.prototype.addRequest = function addRequest(req, options, port/* legacy */,\r\n                                                 localAddress/* legacy */) {\r\n  // Legacy API: addRequest(req, host, port, localAddress)\r\n  if (typeof options === 'string') {\r\n    options = {\r\n      __proto__: null,\r\n      host: options,\r\n      port,\r\n      localAddress,\r\n    };\r\n  }\r\n\r\n  options = { __proto__: null, ...options, ...this.options };\r\n  if (options.socketPath)\r\n    options.path = options.socketPath;\r\n\r\n  normalizeServerName(options, req);\r\n\r\n  const name = this.getName(options);\r\n  if (!this.sockets[name]) {\r\n    this.sockets[name] = [];\r\n  }\r\n\r\n  const freeSockets = this.freeSockets[name];\r\n  let socket;\r\n  if (freeSockets) {\r\n    while (freeSockets.length && freeSockets[0].destroyed) {\r\n      ArrayPrototypeShift(freeSockets);\r\n    }\r\n    socket = this.scheduling === 'fifo' ?\r\n      ArrayPrototypeShift(freeSockets) :\r\n      ArrayPrototypePop(freeSockets);\r\n    if (!freeSockets.length)\r\n      delete this.freeSockets[name];\r\n  }\r\n\r\n  const freeLen = freeSockets ? freeSockets.length : 0;\r\n  const sockLen = freeLen + this.sockets[name].length;\r\n\r\n  if (socket) {\r\n    asyncResetHandle(socket);\r\n    this.reuseSocket(socket, req);\r\n    setRequestSocket(this, req, socket);\r\n    ArrayPrototypePush(this.sockets[name], socket);\r\n  } else if (sockLen < this.maxSockets &&\r\n             this.totalSocketCount < this.maxTotalSockets) {\r\n    debug('call onSocket', sockLen, freeLen);\r\n    // If we are under maxSockets create a new one.\r\n    this.createSocket(req, options, (err, socket) => {\r\n      if (err)\r\n        req.onSocket(socket, err);\r\n      else\r\n        setRequestSocket(this, req, socket);\r\n    });\r\n  } else {\r\n    debug('wait for socket');\r\n    // We are over limit so we'll add it to the queue.\r\n    if (!this.requests[name]) {\r\n      this.requests[name] = [];\r\n    }\r\n\r\n    // Used to create sockets for pending requests from different origin\r\n    req[kRequestOptions] = options;\r\n    // Used to capture the original async context.\r\n    req[kRequestAsyncResource] = new AsyncResource('QueuedRequest');\r\n\r\n    ArrayPrototypePush(this.requests[name], req);\r\n  }\r\n};\r\n\r\nAgent.prototype.createSocket = function createSocket(req, options, cb) {\r\n  options = { __proto__: null, ...options, ...this.options };\r\n  if (options.socketPath)\r\n    options.path = options.socketPath;\r\n\r\n  normalizeServerName(options, req);\r\n\r\n  const name = this.getName(options);\r\n  options._agentKey = name;\r\n\r\n  debug('createConnection', name, options);\r\n  options.encoding = null;\r\n\r\n  const oncreate = once((err, s) => {\r\n    if (err)\r\n      return cb(err);\r\n    if (!this.sockets[name]) {\r\n      this.sockets[name] = [];\r\n    }\r\n    ArrayPrototypePush(this.sockets[name], s);\r\n    this.totalSocketCount++;\r\n    debug('sockets', name, this.sockets[name].length, this.totalSocketCount);\r\n    installListeners(this, s, options);\r\n    cb(null, s);\r\n  });\r\n  // When keepAlive is true, pass the related options to createConnection\r\n  if (this.keepAlive) {\r\n    options.keepAlive = this.keepAlive;\r\n    options.keepAliveInitialDelay = this.keepAliveMsecs;\r\n  }\r\n  const newSocket = this.createConnection(options, oncreate);\r\n  if (newSocket)\r\n    oncreate(null, newSocket);\r\n};\r\n\r\nfunction normalizeServerName(options, req) {\r\n  if (!options.servername && options.servername !== '')\r\n    options.servername = calculateServerName(options, req);\r\n}\r\n\r\nfunction calculateServerName(options, req) {\r\n  let servername = options.host;\r\n  const hostHeader = req.getHeader('host');\r\n  if (hostHeader) {\r\n    validateString(hostHeader, 'options.headers.host');\r\n\r\n    // abc => abc\r\n    // abc:123 => abc\r\n    // [::1] => ::1\r\n    // [::1]:123 => ::1\r\n    if (StringPrototypeStartsWith(hostHeader, '[')) {\r\n      const index = StringPrototypeIndexOf(hostHeader, ']');\r\n      if (index === -1) {\r\n        // Leading '[', but no ']'. Need to do something...\r\n        servername = hostHeader;\r\n      } else {\r\n        servername = StringPrototypeSubstring(hostHeader, 1, index);\r\n      }\r\n    } else {\r\n      servername = StringPrototypeSplit(hostHeader, ':', 1)[0];\r\n    }\r\n  }\r\n  // Don't implicitly set invalid (IP) servernames.\r\n  if (net.isIP(servername))\r\n    servername = '';\r\n  return servername;\r\n}\r\n\r\nfunction installListeners(agent, s, options) {\r\n  function onFree() {\r\n    debug('CLIENT socket onFree');\r\n    agent.emit('free', s, options);\r\n  }\r\n  s.on('free', onFree);\r\n\r\n  function onClose(err) {\r\n    debug('CLIENT socket onClose');\r\n    // This is the only place where sockets get removed from the Agent.\r\n    // If you want to remove a socket from the pool, just close it.\r\n    // All socket errors end in a close event anyway.\r\n    agent.totalSocketCount--;\r\n    agent.removeSocket(s, options);\r\n  }\r\n  s.on('close', onClose);\r\n\r\n  function onTimeout() {\r\n    debug('CLIENT socket onTimeout');\r\n\r\n    // Destroy if in free list.\r\n    // TODO(ronag): Always destroy, even if not in free list.\r\n    const sockets = agent.freeSockets;\r\n    if (ArrayPrototypeSome(ObjectKeys(sockets), (name) =>\r\n      ArrayPrototypeIncludes(sockets[name], s),\r\n    )) {\r\n      return s.destroy();\r\n    }\r\n  }\r\n  s.on('timeout', onTimeout);\r\n\r\n  function onRemove() {\r\n    // We need this function for cases like HTTP 'upgrade'\r\n    // (defined by WebSockets) where we need to remove a socket from the\r\n    // pool because it'll be locked up indefinitely\r\n    debug('CLIENT socket onRemove');\r\n    agent.totalSocketCount--;\r\n    agent.removeSocket(s, options);\r\n    s.removeListener('close', onClose);\r\n    s.removeListener('free', onFree);\r\n    s.removeListener('timeout', onTimeout);\r\n    s.removeListener('agentRemove', onRemove);\r\n  }\r\n  s.on('agentRemove', onRemove);\r\n\r\n  if (agent[kOnKeylog]) {\r\n    s.on('keylog', agent[kOnKeylog]);\r\n  }\r\n}\r\n\r\nAgent.prototype.removeSocket = function removeSocket(s, options) {\r\n  const name = this.getName(options);\r\n  debug('removeSocket', name, 'writable:', s.writable);\r\n  const sets = [this.sockets];\r\n\r\n  // If the socket was destroyed, remove it from the free buffers too.\r\n  if (!s.writable)\r\n    ArrayPrototypePush(sets, this.freeSockets);\r\n\r\n  for (let sk = 0; sk < sets.length; sk++) {\r\n    const sockets = sets[sk];\r\n\r\n    if (sockets[name]) {\r\n      const index = ArrayPrototypeIndexOf(sockets[name], s);\r\n      if (index !== -1) {\r\n        ArrayPrototypeSplice(sockets[name], index, 1);\r\n        // Don't leak\r\n        if (sockets[name].length === 0)\r\n          delete sockets[name];\r\n      }\r\n    }\r\n  }\r\n\r\n  let req;\r\n  if (this.requests[name] && this.requests[name].length) {\r\n    debug('removeSocket, have a request, make a socket');\r\n    req = this.requests[name][0];\r\n  } else {\r\n    // TODO(rickyes): this logic will not be FIFO across origins.\r\n    // There might be older requests in a different origin, but\r\n    // if the origin which releases the socket has pending requests\r\n    // that will be prioritized.\r\n    const keys = ObjectKeys(this.requests);\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const prop = keys[i];\r\n      // Check whether this specific origin is already at maxSockets\r\n      if (this.sockets[prop] && this.sockets[prop].length) break;\r\n      debug('removeSocket, have a request with different origin,' +\r\n        ' make a socket');\r\n      req = this.requests[prop][0];\r\n      options = req[kRequestOptions];\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (req && options) {\r\n    req[kRequestOptions] = undefined;\r\n    // If we have pending requests and a socket gets closed make a new one\r\n    this.createSocket(req, options, (err, socket) => {\r\n      if (err)\r\n        req.onSocket(socket, err);\r\n      else\r\n        socket.emit('free');\r\n    });\r\n  }\r\n\r\n};\r\n\r\nAgent.prototype.keepSocketAlive = function keepSocketAlive(socket) {\r\n  socket.setKeepAlive(true, this.keepAliveMsecs);\r\n  socket.unref();\r\n\r\n  let agentTimeout = this.options.timeout || 0;\r\n\r\n  if (socket._httpMessage?.res) {\r\n    const keepAliveHint = socket._httpMessage.res.headers['keep-alive'];\r\n\r\n    if (keepAliveHint) {\r\n      const hint = RegExpPrototypeExec(/^timeout=(\\d+)/, keepAliveHint)?.[1];\r\n\r\n      if (hint) {\r\n        const serverHintTimeout = NumberParseInt(hint) * 1000;\r\n\r\n        if (serverHintTimeout < agentTimeout) {\r\n          agentTimeout = serverHintTimeout;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (socket.timeout !== agentTimeout) {\r\n    socket.setTimeout(agentTimeout);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nAgent.prototype.reuseSocket = function reuseSocket(socket, req) {\r\n  debug('have free socket');\r\n  socket.removeListener('error', freeSocketErrorListener);\r\n  req.reusedSocket = true;\r\n  socket.ref();\r\n};\r\n\r\nAgent.prototype.destroy = function destroy() {\r\n  const sets = [this.freeSockets, this.sockets];\r\n  for (let s = 0; s < sets.length; s++) {\r\n    const set = sets[s];\r\n    const keys = ObjectKeys(set);\r\n    for (let v = 0; v < keys.length; v++) {\r\n      const setName = set[keys[v]];\r\n      for (let n = 0; n < setName.length; n++) {\r\n        setName[n].destroy();\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction setRequestSocket(agent, req, socket) {\r\n  req.onSocket(socket);\r\n  const agentTimeout = agent.options.timeout || 0;\r\n  if (req.timeout === undefined || req.timeout === agentTimeout) {\r\n    return;\r\n  }\r\n  socket.setTimeout(req.timeout);\r\n}\r\n\r\nfunction asyncResetHandle(socket) {\r\n  // Guard against an uninitialized or user supplied Socket.\r\n  const handle = socket._handle;\r\n  if (handle && typeof handle.asyncReset === 'function') {\r\n    // Assign the handle a new asyncId and run any destroy()/init() hooks.\r\n    handle.asyncReset(new ReusedHandle(handle.getProviderType(), handle));\r\n    socket[async_id_symbol] = handle.getAsyncId();\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  Agent,\r\n  globalAgent: new Agent({ keepAlive: true, scheduling: 'lifo', timeout: 5000 }),\r\n};\r\n"
  },
  "80": {
    "metadata": {
      "scriptId": "80",
      "url": "node:net",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 2461,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "b8d6c1a7ae0573c374d4e777ae465abe47a437248168dd51ab141700e71f8d34",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 70894,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:net"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypePush,\r\n  Boolean,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeCall,\r\n  MathMax,\r\n  Number,\r\n  NumberIsNaN,\r\n  NumberParseInt,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  Symbol,\r\n  SymbolAsyncDispose,\r\n  SymbolDispose,\r\n} = primordials;\r\n\r\nconst EventEmitter = require('events');\r\nconst { addAbortListener } = require('internal/events/abort_listener');\r\nconst stream = require('stream');\r\nlet debug = require('internal/util/debuglog').debuglog('net', (fn) => {\r\n  debug = fn;\r\n});\r\nconst {\r\n  kReinitializeHandle,\r\n  isIP,\r\n  isIPv4,\r\n  isIPv6,\r\n  normalizedArgsSymbol,\r\n  makeSyncWrite,\r\n} = require('internal/net');\r\nconst assert = require('internal/assert');\r\nconst {\r\n  UV_EADDRINUSE,\r\n  UV_EINVAL,\r\n  UV_ENOTCONN,\r\n  UV_ECANCELED,\r\n  UV_ETIMEDOUT,\r\n} = internalBinding('uv');\r\n\r\nconst { Buffer } = require('buffer');\r\nconst { ShutdownWrap } = internalBinding('stream_wrap');\r\nconst {\r\n  TCP,\r\n  TCPConnectWrap,\r\n  constants: TCPConstants,\r\n} = internalBinding('tcp_wrap');\r\nconst {\r\n  Pipe,\r\n  PipeConnectWrap,\r\n  constants: PipeConstants,\r\n} = internalBinding('pipe_wrap');\r\nconst {\r\n  newAsyncId,\r\n  defaultTriggerAsyncIdScope,\r\n  symbols: { async_id_symbol, owner_symbol },\r\n} = require('internal/async_hooks');\r\nconst {\r\n  writevGeneric,\r\n  writeGeneric,\r\n  onStreamRead,\r\n  kAfterAsyncWrite,\r\n  kHandle,\r\n  kUpdateTimer,\r\n  setStreamTimeout,\r\n  kBuffer,\r\n  kBufferCb,\r\n  kBufferGen,\r\n} = require('internal/stream_base_commons');\r\nconst {\r\n  ErrnoException,\r\n  ExceptionWithHostPort,\r\n  NodeAggregateError,\r\n  UVExceptionWithHostPort,\r\n  codes: {\r\n    ERR_INVALID_ADDRESS_FAMILY,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_FD_TYPE,\r\n    ERR_INVALID_HANDLE_TYPE,\r\n    ERR_INVALID_IP_ADDRESS,\r\n    ERR_MISSING_ARGS,\r\n    ERR_SERVER_ALREADY_LISTEN,\r\n    ERR_SERVER_NOT_RUNNING,\r\n    ERR_SOCKET_CLOSED,\r\n    ERR_SOCKET_CLOSED_BEFORE_CONNECTION,\r\n    ERR_SOCKET_CONNECTION_TIMEOUT,\r\n  },\r\n  genericNodeError,\r\n} = require('internal/errors');\r\nconst { isUint8Array } = require('internal/util/types');\r\nconst { queueMicrotask } = require('internal/process/task_queues');\r\nconst { kEmptyObject, guessHandleType, promisify } = require('internal/util');\r\nconst {\r\n  validateAbortSignal,\r\n  validateBoolean,\r\n  validateFunction,\r\n  validateInt32,\r\n  validateNumber,\r\n  validatePort,\r\n  validateString,\r\n} = require('internal/validators');\r\nconst kLastWriteQueueSize = Symbol('lastWriteQueueSize');\r\nconst { getOptionValue } = require('internal/options');\r\n\r\n// Lazy loaded to improve startup performance.\r\nlet cluster;\r\nlet dns;\r\nlet BlockList;\r\nlet SocketAddress;\r\nlet autoSelectFamilyDefault = getOptionValue('--network-family-autoselection');\r\nlet autoSelectFamilyAttemptTimeoutDefault = getOptionValue('--network-family-autoselection-attempt-timeout');\r\n\r\nconst { clearTimeout, setTimeout } = require('timers');\r\nconst { kTimeout } = require('internal/timers');\r\n\r\nconst DEFAULT_IPV4_ADDR = '0.0.0.0';\r\nconst DEFAULT_IPV6_ADDR = '::';\r\n\r\nconst isWindows = process.platform === 'win32';\r\n\r\nconst noop = () => {};\r\n\r\nconst kPerfHooksNetConnectContext = Symbol('kPerfHooksNetConnectContext');\r\n\r\nconst dc = require('diagnostics_channel');\r\nconst netClientSocketChannel = dc.channel('net.client.socket');\r\nconst netServerSocketChannel = dc.channel('net.server.socket');\r\nconst netServerListen = dc.tracingChannel('net.server.listen');\r\n\r\nconst {\r\n  hasObserver,\r\n  startPerf,\r\n  stopPerf,\r\n} = require('internal/perf/observe');\r\nconst { getDefaultHighWaterMark } = require('internal/streams/state');\r\n\r\nfunction getFlags(ipv6Only) {\r\n  return ipv6Only === true ? TCPConstants.UV_TCP_IPV6ONLY : 0;\r\n}\r\n\r\nfunction createHandle(fd, is_server) {\r\n  validateInt32(fd, 'fd', 0);\r\n  const type = guessHandleType(fd);\r\n  if (type === 'PIPE') {\r\n    return new Pipe(\r\n      is_server ? PipeConstants.SERVER : PipeConstants.SOCKET,\r\n    );\r\n  }\r\n\r\n  if (type === 'TCP') {\r\n    return new TCP(\r\n      is_server ? TCPConstants.SERVER : TCPConstants.SOCKET,\r\n    );\r\n  }\r\n\r\n  throw new ERR_INVALID_FD_TYPE(type);\r\n}\r\n\r\n\r\nfunction getNewAsyncId(handle) {\r\n  return (!handle || typeof handle.getAsyncId !== 'function') ?\r\n    newAsyncId() : handle.getAsyncId();\r\n}\r\n\r\n\r\nfunction isPipeName(s) {\r\n  return typeof s === 'string' && toNumber(s) === false;\r\n}\r\n\r\n/**\r\n * Creates a new TCP or IPC server\r\n * @param {{\r\n *   allowHalfOpen?: boolean;\r\n *   pauseOnConnect?: boolean;\r\n *   }} [options]\r\n * @param {Function} [connectionListener]\r\n * @returns {Server}\r\n */\r\n\r\nfunction createServer(options, connectionListener) {\r\n  return new Server(options, connectionListener);\r\n}\r\n\r\n\r\n// Target API:\r\n//\r\n// let s = net.connect({port: 80, host: 'google.com'}, function() {\r\n//   ...\r\n// });\r\n//\r\n// There are various forms:\r\n//\r\n// connect(options, [cb])\r\n// connect(port, [host], [cb])\r\n// connect(path, [cb]);\r\n//\r\nfunction connect(...args) {\r\n  const normalized = normalizeArgs(args);\r\n  const options = normalized[0];\r\n  debug('createConnection', normalized);\r\n  const socket = new Socket(options);\r\n\r\n  if (netClientSocketChannel.hasSubscribers) {\r\n    netClientSocketChannel.publish({\r\n      socket,\r\n    });\r\n  }\r\n  if (options.timeout) {\r\n    socket.setTimeout(options.timeout);\r\n  }\r\n\r\n  return socket.connect(normalized);\r\n}\r\n\r\nfunction getDefaultAutoSelectFamily() {\r\n  return autoSelectFamilyDefault;\r\n}\r\n\r\nfunction setDefaultAutoSelectFamily(value) {\r\n  validateBoolean(value, 'value');\r\n  autoSelectFamilyDefault = value;\r\n}\r\n\r\nfunction getDefaultAutoSelectFamilyAttemptTimeout() {\r\n  return autoSelectFamilyAttemptTimeoutDefault;\r\n}\r\n\r\nfunction setDefaultAutoSelectFamilyAttemptTimeout(value) {\r\n  validateInt32(value, 'value', 1);\r\n\r\n  if (value < 10) {\r\n    value = 10;\r\n  }\r\n\r\n  autoSelectFamilyAttemptTimeoutDefault = value;\r\n}\r\n\r\n// Returns an array [options, cb], where options is an object,\r\n// cb is either a function or null.\r\n// Used to normalize arguments of Socket.prototype.connect() and\r\n// Server.prototype.listen(). Possible combinations of parameters:\r\n//   (options[...][, cb])\r\n//   (path[...][, cb])\r\n//   ([port][, host][...][, cb])\r\n// For Socket.prototype.connect(), the [...] part is ignored\r\n// For Server.prototype.listen(), the [...] part is [, backlog]\r\n// but will not be handled here (handled in listen())\r\nfunction normalizeArgs(args) {\r\n  let arr;\r\n\r\n  if (args.length === 0) {\r\n    arr = [{}, null];\r\n    arr[normalizedArgsSymbol] = true;\r\n    return arr;\r\n  }\r\n\r\n  const arg0 = args[0];\r\n  let options = {};\r\n  if (typeof arg0 === 'object' && arg0 !== null) {\r\n    // (options[...][, cb])\r\n    options = arg0;\r\n  } else if (isPipeName(arg0)) {\r\n    // (path[...][, cb])\r\n    options.path = arg0;\r\n  } else {\r\n    // ([port][, host][...][, cb])\r\n    options.port = arg0;\r\n    if (args.length > 1 && typeof args[1] === 'string') {\r\n      options.host = args[1];\r\n    }\r\n  }\r\n\r\n  const cb = args[args.length - 1];\r\n  if (typeof cb !== 'function')\r\n    arr = [options, null];\r\n  else\r\n    arr = [options, cb];\r\n\r\n  arr[normalizedArgsSymbol] = true;\r\n  return arr;\r\n}\r\n\r\n\r\n// Called when creating new Socket, or when re-using a closed Socket\r\nfunction initSocketHandle(self) {\r\n  self._undestroy();\r\n  self._sockname = null;\r\n\r\n  // Handle creation may be deferred to bind() or connect() time.\r\n  if (self._handle) {\r\n    self._handle[owner_symbol] = self;\r\n    self._handle.onread = onStreamRead;\r\n    self[async_id_symbol] = getNewAsyncId(self._handle);\r\n\r\n    let userBuf = self[kBuffer];\r\n    if (userBuf) {\r\n      const bufGen = self[kBufferGen];\r\n      if (bufGen !== null) {\r\n        userBuf = bufGen();\r\n        if (!isUint8Array(userBuf))\r\n          return;\r\n        self[kBuffer] = userBuf;\r\n      }\r\n      self._handle.useUserBuffer(userBuf);\r\n    }\r\n  }\r\n}\r\n\r\nfunction closeSocketHandle(self, isException, isCleanupPending = false) {\r\n  if (self._handle) {\r\n    self._handle.close(() => {\r\n      debug('emit close');\r\n      self.emit('close', isException);\r\n      if (isCleanupPending) {\r\n        self._handle.onread = noop;\r\n        self._handle = null;\r\n        self._sockname = null;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nconst kBytesRead = Symbol('kBytesRead');\r\nconst kBytesWritten = Symbol('kBytesWritten');\r\nconst kSetNoDelay = Symbol('kSetNoDelay');\r\nconst kSetKeepAlive = Symbol('kSetKeepAlive');\r\nconst kSetKeepAliveInitialDelay = Symbol('kSetKeepAliveInitialDelay');\r\n\r\nfunction Socket(options) {\r\n  if (!(this instanceof Socket)) return new Socket(options);\r\n  if (options?.objectMode) {\r\n    throw new ERR_INVALID_ARG_VALUE(\r\n      'options.objectMode',\r\n      options.objectMode,\r\n      'is not supported',\r\n    );\r\n  } else if (options?.readableObjectMode || options?.writableObjectMode) {\r\n    throw new ERR_INVALID_ARG_VALUE(\r\n      `options.${\r\n        options.readableObjectMode ? 'readableObjectMode' : 'writableObjectMode'\r\n      }`,\r\n      options.readableObjectMode || options.writableObjectMode,\r\n      'is not supported',\r\n    );\r\n  }\r\n  if (typeof options?.keepAliveInitialDelay !== 'undefined') {\r\n    validateNumber(\r\n      options?.keepAliveInitialDelay, 'options.keepAliveInitialDelay',\r\n    );\r\n\r\n    if (options.keepAliveInitialDelay < 0) {\r\n      options.keepAliveInitialDelay = 0;\r\n    }\r\n  }\r\n\r\n  this.connecting = false;\r\n  // Problem with this is that users can supply their own handle, that may not\r\n  // have _handle.getAsyncId(). In this case an[async_id_symbol] should\r\n  // probably be supplied by async_hooks.\r\n  this[async_id_symbol] = -1;\r\n  this._hadError = false;\r\n  this[kHandle] = null;\r\n  this._parent = null;\r\n  this._host = null;\r\n  this[kLastWriteQueueSize] = 0;\r\n  this[kTimeout] = null;\r\n  this[kBuffer] = null;\r\n  this[kBufferCb] = null;\r\n  this[kBufferGen] = null;\r\n  this._closeAfterHandlingError = false;\r\n\r\n  if (typeof options === 'number')\r\n    options = { fd: options }; // Legacy interface.\r\n  else\r\n    options = { ...options };\r\n\r\n  // Default to *not* allowing half open sockets.\r\n  options.allowHalfOpen = Boolean(options.allowHalfOpen);\r\n  // For backwards compat do not emit close on destroy.\r\n  options.emitClose = false;\r\n  options.autoDestroy = true;\r\n  // Handle strings directly.\r\n  options.decodeStrings = false;\r\n  stream.Duplex.call(this, options);\r\n\r\n  if (options.handle) {\r\n    this._handle = options.handle; // private\r\n    this[async_id_symbol] = getNewAsyncId(this._handle);\r\n  } else if (options.fd !== undefined) {\r\n    const { fd } = options;\r\n    let err;\r\n\r\n    // createHandle will throw ERR_INVALID_FD_TYPE if `fd` is not\r\n    // a valid `PIPE` or `TCP` descriptor\r\n    this._handle = createHandle(fd, false);\r\n\r\n    err = this._handle.open(fd);\r\n\r\n    // While difficult to fabricate, in some architectures\r\n    // `open` may return an error code for valid file descriptors\r\n    // which cannot be opened. This is difficult to test as most\r\n    // un-openable fds will throw on `createHandle`\r\n    if (err)\r\n      throw new ErrnoException(err, 'open');\r\n\r\n    this[async_id_symbol] = this._handle.getAsyncId();\r\n\r\n    if ((fd === 1 || fd === 2) &&\r\n        (this._handle instanceof Pipe) && isWindows) {\r\n      // Make stdout and stderr blocking on Windows\r\n      err = this._handle.setBlocking(true);\r\n      if (err)\r\n        throw new ErrnoException(err, 'setBlocking');\r\n\r\n      this._writev = null;\r\n      this._write = makeSyncWrite(fd);\r\n      // makeSyncWrite adjusts this value like the original handle would, so\r\n      // we need to let it do that by turning it into a writable, own\r\n      // property.\r\n      ObjectDefineProperty(this._handle, 'bytesWritten', {\r\n        __proto__: null,\r\n        value: 0, writable: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  const onread = options.onread;\r\n  if (onread !== null && typeof onread === 'object' &&\r\n      (isUint8Array(onread.buffer) || typeof onread.buffer === 'function') &&\r\n      typeof onread.callback === 'function') {\r\n    if (typeof onread.buffer === 'function') {\r\n      this[kBuffer] = true;\r\n      this[kBufferGen] = onread.buffer;\r\n    } else {\r\n      this[kBuffer] = onread.buffer;\r\n    }\r\n    this[kBufferCb] = onread.callback;\r\n  }\r\n\r\n  this[kSetNoDelay] = Boolean(options.noDelay);\r\n  this[kSetKeepAlive] = Boolean(options.keepAlive);\r\n  this[kSetKeepAliveInitialDelay] = ~~(options.keepAliveInitialDelay / 1000);\r\n\r\n  // Shut down the socket when we're finished with it.\r\n  this.on('end', onReadableStreamEnd);\r\n\r\n  initSocketHandle(this);\r\n\r\n  this._pendingData = null;\r\n  this._pendingEncoding = '';\r\n\r\n  // If we have a handle, then start the flow of data into the\r\n  // buffer.  if not, then this will happen when we connect\r\n  if (this._handle && options.readable !== false) {\r\n    if (options.pauseOnCreate) {\r\n      // Stop the handle from reading and pause the stream\r\n      this._handle.reading = false;\r\n      this._handle.readStop();\r\n      this.readableFlowing = false;\r\n    } else if (!options.manualStart) {\r\n      this.read(0);\r\n    }\r\n  }\r\n\r\n  if (options.signal) {\r\n    addClientAbortSignalOption(this, options);\r\n  }\r\n\r\n  // Reserve properties\r\n  this.server = null;\r\n  this._server = null;\r\n\r\n  // Used after `.destroy()`\r\n  this[kBytesRead] = 0;\r\n  this[kBytesWritten] = 0;\r\n}\r\nObjectSetPrototypeOf(Socket.prototype, stream.Duplex.prototype);\r\nObjectSetPrototypeOf(Socket, stream.Duplex);\r\n\r\n// Refresh existing timeouts.\r\nSocket.prototype._unrefTimer = function _unrefTimer() {\r\n  for (let s = this; s !== null; s = s._parent) {\r\n    if (s[kTimeout])\r\n      s[kTimeout].refresh();\r\n  }\r\n};\r\n\r\n\r\n// The user has called .end(), and all the bytes have been\r\n// sent out to the other side.\r\nSocket.prototype._final = function(cb) {\r\n  // If still connecting - defer handling `_final` until 'connect' will happen\r\n  if (this.connecting) {\r\n    debug('_final: not yet connected');\r\n    return this.once('connect', () => this._final(cb));\r\n  }\r\n\r\n  if (!this._handle)\r\n    return cb();\r\n\r\n  debug('_final: not ended, call shutdown()');\r\n\r\n  const req = new ShutdownWrap();\r\n  req.oncomplete = afterShutdown;\r\n  req.handle = this._handle;\r\n  req.callback = cb;\r\n  const err = this._handle.shutdown(req);\r\n\r\n  if (err === 1 || err === UV_ENOTCONN)  // synchronous finish\r\n    return cb();\r\n  else if (err !== 0)\r\n    return cb(new ErrnoException(err, 'shutdown'));\r\n};\r\n\r\nfunction afterShutdown() {\r\n  const self = this.handle[owner_symbol];\r\n\r\n  debug('afterShutdown destroyed=%j', self.destroyed);\r\n\r\n  this.callback();\r\n}\r\n\r\n// Provide a better error message when we call end() as a result\r\n// of the other side sending a FIN.  The standard 'write after end'\r\n// is overly vague, and makes it seem like the user's code is to blame.\r\nfunction writeAfterFIN(chunk, encoding, cb) {\r\n  if (!this.writableEnded) {\r\n    return stream.Duplex.prototype.write.call(this, chunk, encoding, cb);\r\n  }\r\n\r\n  if (typeof encoding === 'function') {\r\n    cb = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  const er = genericNodeError(\r\n    'This socket has been ended by the other party',\r\n    { code: 'EPIPE' },\r\n  );\r\n  if (typeof cb === 'function') {\r\n    defaultTriggerAsyncIdScope(this[async_id_symbol], process.nextTick, cb, er);\r\n  }\r\n  this.destroy(er);\r\n\r\n  return false;\r\n}\r\n\r\nSocket.prototype.setTimeout = setStreamTimeout;\r\n\r\n\r\nSocket.prototype._onTimeout = function() {\r\n  const handle = this._handle;\r\n  const lastWriteQueueSize = this[kLastWriteQueueSize];\r\n  if (lastWriteQueueSize > 0 && handle) {\r\n    // `lastWriteQueueSize !== writeQueueSize` means there is\r\n    // an active write in progress, so we suppress the timeout.\r\n    const { writeQueueSize } = handle;\r\n    if (lastWriteQueueSize !== writeQueueSize) {\r\n      this[kLastWriteQueueSize] = writeQueueSize;\r\n      this._unrefTimer();\r\n      return;\r\n    }\r\n  }\r\n  debug('_onTimeout');\r\n  this.emit('timeout');\r\n};\r\n\r\n\r\nSocket.prototype.setNoDelay = function(enable) {\r\n  // Backwards compatibility: assume true when `enable` is omitted\r\n  enable = Boolean(enable === undefined ? true : enable);\r\n\r\n  if (!this._handle) {\r\n    this[kSetNoDelay] = enable;\r\n    return this;\r\n  }\r\n\r\n  if (this._handle.setNoDelay && enable !== this[kSetNoDelay]) {\r\n    this[kSetNoDelay] = enable;\r\n    this._handle.setNoDelay(enable);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n\r\nSocket.prototype.setKeepAlive = function(enable, initialDelayMsecs) {\r\n  enable = Boolean(enable);\r\n  const initialDelay = ~~(initialDelayMsecs / 1000);\r\n\r\n  if (!this._handle) {\r\n    this[kSetKeepAlive] = enable;\r\n    this[kSetKeepAliveInitialDelay] = initialDelay;\r\n    return this;\r\n  }\r\n\r\n  if (!this._handle.setKeepAlive) {\r\n    return this;\r\n  }\r\n\r\n  if (enable !== this[kSetKeepAlive] ||\r\n      (\r\n        enable &&\r\n        this[kSetKeepAliveInitialDelay] !== initialDelay\r\n      )\r\n  ) {\r\n    this[kSetKeepAlive] = enable;\r\n    this[kSetKeepAliveInitialDelay] = initialDelay;\r\n    this._handle.setKeepAlive(enable, initialDelay);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n\r\nSocket.prototype.address = function() {\r\n  return this._getsockname();\r\n};\r\n\r\n\r\nObjectDefineProperty(Socket.prototype, '_connecting', {\r\n  __proto__: null,\r\n  get: function() {\r\n    return this.connecting;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(Socket.prototype, 'pending', {\r\n  __proto__: null,\r\n  get() {\r\n    return !this._handle || this.connecting;\r\n  },\r\n  configurable: true,\r\n});\r\n\r\n\r\nObjectDefineProperty(Socket.prototype, 'readyState', {\r\n  __proto__: null,\r\n  get: function() {\r\n    if (this.connecting) {\r\n      return 'opening';\r\n    } else if (this.readable && this.writable) {\r\n      return 'open';\r\n    } else if (this.readable && !this.writable) {\r\n      return 'readOnly';\r\n    } else if (!this.readable && this.writable) {\r\n      return 'writeOnly';\r\n    }\r\n    return 'closed';\r\n  },\r\n});\r\n\r\n\r\nObjectDefineProperty(Socket.prototype, 'bufferSize', {\r\n  __proto__: null,\r\n  get: function() {\r\n    if (this._handle) {\r\n      return this.writableLength;\r\n    }\r\n  },\r\n});\r\n\r\nObjectDefineProperty(Socket.prototype, kUpdateTimer, {\r\n  __proto__: null,\r\n  get: function() {\r\n    return this._unrefTimer;\r\n  },\r\n});\r\n\r\n\r\nfunction tryReadStart(socket) {\r\n  // Not already reading, start the flow\r\n  debug('Socket._handle.readStart');\r\n  socket._handle.reading = true;\r\n  const err = socket._handle.readStart();\r\n  if (err)\r\n    socket.destroy(new ErrnoException(err, 'read'));\r\n}\r\n\r\n// Just call handle.readStart until we have enough in the buffer\r\nSocket.prototype._read = function(n) {\r\n  debug(\r\n    '_read - n', n,\r\n    'isConnecting?', !!this.connecting,\r\n    'hasHandle?', !!this._handle,\r\n  );\r\n\r\n  if (this.connecting || !this._handle) {\r\n    debug('_read wait for connection');\r\n    this.once('connect', () => this._read(n));\r\n  } else if (!this._handle.reading) {\r\n    tryReadStart(this);\r\n  }\r\n};\r\n\r\n\r\nSocket.prototype.end = function(data, encoding, callback) {\r\n  stream.Duplex.prototype.end.call(this,\r\n                                   data, encoding, callback);\r\n  return this;\r\n};\r\n\r\nSocket.prototype.resetAndDestroy = function() {\r\n  if (this._handle) {\r\n    if (!(this._handle instanceof TCP))\r\n      throw new ERR_INVALID_HANDLE_TYPE();\r\n    if (this.connecting) {\r\n      debug('reset wait for connection');\r\n      this.once('connect', () => this._reset());\r\n    } else {\r\n      this._reset();\r\n    }\r\n  } else {\r\n    this.destroy(new ERR_SOCKET_CLOSED());\r\n  }\r\n  return this;\r\n};\r\n\r\nSocket.prototype.pause = function() {\r\n  if (this[kBuffer] && !this.connecting && this._handle &&\r\n      this._handle.reading) {\r\n    this._handle.reading = false;\r\n    if (!this.destroyed) {\r\n      const err = this._handle.readStop();\r\n      if (err)\r\n        this.destroy(new ErrnoException(err, 'read'));\r\n    }\r\n  }\r\n  return stream.Duplex.prototype.pause.call(this);\r\n};\r\n\r\n\r\nSocket.prototype.resume = function() {\r\n  if (this[kBuffer] && !this.connecting && this._handle &&\r\n      !this._handle.reading) {\r\n    tryReadStart(this);\r\n  }\r\n  return stream.Duplex.prototype.resume.call(this);\r\n};\r\n\r\n\r\nSocket.prototype.read = function(n) {\r\n  if (this[kBuffer] && !this.connecting && this._handle &&\r\n      !this._handle.reading) {\r\n    tryReadStart(this);\r\n  }\r\n  return stream.Duplex.prototype.read.call(this, n);\r\n};\r\n\r\n\r\n// Called when the 'end' event is emitted.\r\nfunction onReadableStreamEnd() {\r\n  if (!this.allowHalfOpen) {\r\n    this.write = writeAfterFIN;\r\n  }\r\n}\r\n\r\n\r\nSocket.prototype.destroySoon = function() {\r\n  if (this.writable)\r\n    this.end();\r\n\r\n  if (this.writableFinished)\r\n    this.destroy();\r\n  else\r\n    this.once('finish', this.destroy);\r\n};\r\n\r\n\r\nSocket.prototype._destroy = function(exception, cb) {\r\n  debug('destroy');\r\n\r\n  this.connecting = false;\r\n\r\n  for (let s = this; s !== null; s = s._parent) {\r\n    clearTimeout(s[kTimeout]);\r\n  }\r\n\r\n  debug('close');\r\n  if (this._handle) {\r\n    if (this !== process.stderr)\r\n      debug('close handle');\r\n    const isException = exception ? true : false;\r\n    // `bytesRead` and `kBytesWritten` should be accessible after `.destroy()`\r\n    this[kBytesRead] = this._handle.bytesRead;\r\n    this[kBytesWritten] = this._handle.bytesWritten;\r\n\r\n    if (this.resetAndClosing) {\r\n      this.resetAndClosing = false;\r\n      const err = this._handle.reset(() => {\r\n        debug('emit close');\r\n        this.emit('close', isException);\r\n      });\r\n      if (err)\r\n        this.emit('error', new ErrnoException(err, 'reset'));\r\n    } else if (this._closeAfterHandlingError) {\r\n      // Enqueue closing the socket as a microtask, so that the socket can be\r\n      // accessible when an `error` event is handled in the `next tick queue`.\r\n      queueMicrotask(() => closeSocketHandle(this, isException, true));\r\n    } else {\r\n      closeSocketHandle(this, isException);\r\n    }\r\n\r\n    if (!this._closeAfterHandlingError) {\r\n      this._handle.onread = noop;\r\n      this._handle = null;\r\n      this._sockname = null;\r\n    }\r\n    cb(exception);\r\n  } else {\r\n    cb(exception);\r\n    process.nextTick(emitCloseNT, this);\r\n  }\r\n\r\n  if (this._server) {\r\n    debug('has server');\r\n    this._server._connections--;\r\n    if (this._server._emitCloseIfDrained) {\r\n      this._server._emitCloseIfDrained();\r\n    }\r\n  }\r\n};\r\n\r\nSocket.prototype._reset = function() {\r\n  debug('reset connection');\r\n  this.resetAndClosing = true;\r\n  return this.destroy();\r\n};\r\n\r\nSocket.prototype._getpeername = function() {\r\n  if (!this._handle || !this._handle.getpeername || this.connecting) {\r\n    return this._peername || {};\r\n  } else if (!this._peername) {\r\n    const out = {};\r\n    const err = this._handle.getpeername(out);\r\n    if (err) return out;\r\n    this._peername = out;\r\n  }\r\n  return this._peername;\r\n};\r\n\r\nfunction protoGetter(name, callback) {\r\n  ObjectDefineProperty(Socket.prototype, name, {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    get: callback,\r\n  });\r\n}\r\n\r\nprotoGetter('bytesRead', function bytesRead() {\r\n  return this._handle ? this._handle.bytesRead : this[kBytesRead];\r\n});\r\n\r\nprotoGetter('remoteAddress', function remoteAddress() {\r\n  return this._getpeername().address;\r\n});\r\n\r\nprotoGetter('remoteFamily', function remoteFamily() {\r\n  return this._getpeername().family;\r\n});\r\n\r\nprotoGetter('remotePort', function remotePort() {\r\n  return this._getpeername().port;\r\n});\r\n\r\n\r\nSocket.prototype._getsockname = function() {\r\n  if (!this._handle || !this._handle.getsockname) {\r\n    return {};\r\n  } else if (!this._sockname) {\r\n    this._sockname = {};\r\n    // FIXME(bnoordhuis) Throw when the return value is not 0?\r\n    this._handle.getsockname(this._sockname);\r\n  }\r\n  return this._sockname;\r\n};\r\n\r\n\r\nprotoGetter('localAddress', function localAddress() {\r\n  return this._getsockname().address;\r\n});\r\n\r\n\r\nprotoGetter('localPort', function localPort() {\r\n  return this._getsockname().port;\r\n});\r\n\r\nprotoGetter('localFamily', function localFamily() {\r\n  return this._getsockname().family;\r\n});\r\n\r\nSocket.prototype[kAfterAsyncWrite] = function() {\r\n  this[kLastWriteQueueSize] = 0;\r\n};\r\n\r\nSocket.prototype._writeGeneric = function(writev, data, encoding, cb) {\r\n  // If we are still connecting, then buffer this for later.\r\n  // The Writable logic will buffer up any more writes while\r\n  // waiting for this one to be done.\r\n  if (this.connecting) {\r\n    this._pendingData = data;\r\n    this._pendingEncoding = encoding;\r\n    this.once('connect', function connect() {\r\n      this.off('close', onClose);\r\n      this._writeGeneric(writev, data, encoding, cb);\r\n    });\r\n    function onClose() {\r\n      cb(new ERR_SOCKET_CLOSED_BEFORE_CONNECTION());\r\n    }\r\n    this.once('close', onClose);\r\n    return;\r\n  }\r\n  this._pendingData = null;\r\n  this._pendingEncoding = '';\r\n\r\n  if (!this._handle) {\r\n    cb(new ERR_SOCKET_CLOSED());\r\n    return false;\r\n  }\r\n\r\n  this._unrefTimer();\r\n\r\n  let req;\r\n  if (writev)\r\n    req = writevGeneric(this, data, cb);\r\n  else\r\n    req = writeGeneric(this, data, encoding, cb);\r\n  if (req.async)\r\n    this[kLastWriteQueueSize] = req.bytes;\r\n};\r\n\r\n\r\nSocket.prototype._writev = function(chunks, cb) {\r\n  this._writeGeneric(true, chunks, '', cb);\r\n};\r\n\r\n\r\nSocket.prototype._write = function(data, encoding, cb) {\r\n  this._writeGeneric(false, data, encoding, cb);\r\n};\r\n\r\n\r\n// Legacy alias. Having this is probably being overly cautious, but it doesn't\r\n// really hurt anyone either. This can probably be removed safely if desired.\r\nprotoGetter('_bytesDispatched', function _bytesDispatched() {\r\n  return this._handle ? this._handle.bytesWritten : this[kBytesWritten];\r\n});\r\n\r\nprotoGetter('bytesWritten', function bytesWritten() {\r\n  let bytes = this._bytesDispatched;\r\n  const data = this._pendingData;\r\n  const encoding = this._pendingEncoding;\r\n  const writableBuffer = this.writableBuffer;\r\n\r\n  if (!writableBuffer)\r\n    return undefined;\r\n\r\n  for (const el of writableBuffer) {\r\n    bytes += el.chunk instanceof Buffer ?\r\n      el.chunk.length :\r\n      Buffer.byteLength(el.chunk, el.encoding);\r\n  }\r\n\r\n  if (ArrayIsArray(data)) {\r\n    // Was a writev, iterate over chunks to get total length\r\n    for (let i = 0; i < data.length; i++) {\r\n      const chunk = data[i];\r\n\r\n      if (data.allBuffers || chunk instanceof Buffer)\r\n        bytes += chunk.length;\r\n      else\r\n        bytes += Buffer.byteLength(chunk.chunk, chunk.encoding);\r\n    }\r\n  } else if (data) {\r\n    // Writes are either a string or a Buffer.\r\n    if (typeof data !== 'string')\r\n      bytes += data.length;\r\n    else\r\n      bytes += Buffer.byteLength(data, encoding);\r\n  }\r\n\r\n  return bytes;\r\n});\r\n\r\n\r\nfunction checkBindError(err, port, handle) {\r\n  // EADDRINUSE may not be reported until we call listen() or connect().\r\n  // To complicate matters, a failed bind() followed by listen() or connect()\r\n  // will implicitly bind to a random port. Ergo, check that the socket is\r\n  // bound to the expected port before calling listen() or connect().\r\n  //\r\n  // FIXME(bnoordhuis) Doesn't work for pipe handles, they don't have a\r\n  // getsockname() method. Non-issue for now, the cluster module doesn't\r\n  // really support pipes anyway.\r\n  if (err === 0 && port > 0 && handle.getsockname) {\r\n    const out = {};\r\n    err = handle.getsockname(out);\r\n    if (err === 0 && port !== out.port) {\r\n      debug(`checkBindError, bound to ${out.port} instead of ${port}`);\r\n      err = UV_EADDRINUSE;\r\n    }\r\n  }\r\n  return err;\r\n}\r\n\r\n\r\nfunction internalConnect(\r\n  self, address, port, addressType, localAddress, localPort, flags) {\r\n  // TODO return promise from Socket.prototype.connect which\r\n  // wraps _connectReq.\r\n\r\n  assert(self.connecting);\r\n\r\n  let err;\r\n\r\n  if (localAddress || localPort) {\r\n    if (addressType === 4) {\r\n      localAddress = localAddress || DEFAULT_IPV4_ADDR;\r\n      err = self._handle.bind(localAddress, localPort);\r\n    } else { // addressType === 6\r\n      localAddress = localAddress || DEFAULT_IPV6_ADDR;\r\n      err = self._handle.bind6(localAddress, localPort, flags);\r\n    }\r\n    debug('connect: binding to localAddress: %s and localPort: %d (addressType: %d)',\r\n          localAddress, localPort, addressType);\r\n\r\n    err = checkBindError(err, localPort, self._handle);\r\n    if (err) {\r\n      const ex = new ExceptionWithHostPort(err, 'bind', localAddress, localPort);\r\n      self.destroy(ex);\r\n      return;\r\n    }\r\n  }\r\n\r\n  debug('connect: attempting to connect to %s:%d (addressType: %d)', address, port, addressType);\r\n  self.emit('connectionAttempt', address, port, addressType);\r\n\r\n  if (addressType === 6 || addressType === 4) {\r\n    const req = new TCPConnectWrap();\r\n    req.oncomplete = afterConnect;\r\n    req.address = address;\r\n    req.port = port;\r\n    req.localAddress = localAddress;\r\n    req.localPort = localPort;\r\n    req.addressType = addressType;\r\n\r\n    if (addressType === 4)\r\n      err = self._handle.connect(req, address, port);\r\n    else\r\n      err = self._handle.connect6(req, address, port);\r\n  } else {\r\n    const req = new PipeConnectWrap();\r\n    req.address = address;\r\n    req.oncomplete = afterConnect;\r\n\r\n    err = self._handle.connect(req, address);\r\n  }\r\n\r\n  if (err) {\r\n    const sockname = self._getsockname();\r\n    let details;\r\n\r\n    if (sockname) {\r\n      details = sockname.address + ':' + sockname.port;\r\n    }\r\n\r\n    const ex = new ExceptionWithHostPort(err, 'connect', address, port, details);\r\n    self.destroy(ex);\r\n  } else if ((addressType === 6 || addressType === 4) && hasObserver('net')) {\r\n    startPerf(self, kPerfHooksNetConnectContext, { type: 'net', name: 'connect', detail: { host: address, port } });\r\n  }\r\n}\r\n\r\n\r\nfunction internalConnectMultiple(context, canceled) {\r\n  clearTimeout(context[kTimeout]);\r\n  const self = context.socket;\r\n\r\n  // We were requested to abort. Stop all operations\r\n  if (self._aborted) {\r\n    return;\r\n  }\r\n\r\n  // All connections have been tried without success, destroy with error\r\n  if (canceled || context.current === context.addresses.length) {\r\n    if (context.errors.length === 0) {\r\n      self.destroy(new ERR_SOCKET_CONNECTION_TIMEOUT());\r\n      return;\r\n    }\r\n\r\n    self.destroy(new NodeAggregateError(context.errors));\r\n    return;\r\n  }\r\n\r\n  assert(self.connecting);\r\n\r\n  const current = context.current++;\r\n\r\n  if (current > 0) {\r\n    self[kReinitializeHandle](new TCP(TCPConstants.SOCKET));\r\n  }\r\n\r\n  const { localPort, port, flags } = context;\r\n  const { address, family: addressType } = context.addresses[current];\r\n  let localAddress;\r\n  let err;\r\n\r\n  if (localPort) {\r\n    if (addressType === 4) {\r\n      localAddress = DEFAULT_IPV4_ADDR;\r\n      err = self._handle.bind(localAddress, localPort);\r\n    } else { // addressType === 6\r\n      localAddress = DEFAULT_IPV6_ADDR;\r\n      err = self._handle.bind6(localAddress, localPort, flags);\r\n    }\r\n\r\n    debug('connect/multiple: binding to localAddress: %s and localPort: %d (addressType: %d)',\r\n          localAddress, localPort, addressType);\r\n\r\n    err = checkBindError(err, localPort, self._handle);\r\n    if (err) {\r\n      ArrayPrototypePush(context.errors, new ExceptionWithHostPort(err, 'bind', localAddress, localPort));\r\n      internalConnectMultiple(context);\r\n      return;\r\n    }\r\n  }\r\n\r\n  debug('connect/multiple: attempting to connect to %s:%d (addressType: %d)', address, port, addressType);\r\n  self.emit('connectionAttempt', address, port, addressType);\r\n\r\n  const req = new TCPConnectWrap();\r\n  req.oncomplete = FunctionPrototypeBind(afterConnectMultiple, undefined, context, current);\r\n  req.address = address;\r\n  req.port = port;\r\n  req.localAddress = localAddress;\r\n  req.localPort = localPort;\r\n  req.addressType = addressType;\r\n\r\n  ArrayPrototypePush(self.autoSelectFamilyAttemptedAddresses, `${address}:${port}`);\r\n\r\n  if (addressType === 4) {\r\n    err = self._handle.connect(req, address, port);\r\n  } else {\r\n    err = self._handle.connect6(req, address, port);\r\n  }\r\n\r\n  if (err) {\r\n    const sockname = self._getsockname();\r\n    let details;\r\n\r\n    if (sockname) {\r\n      details = sockname.address + ':' + sockname.port;\r\n    }\r\n\r\n    const ex = new ExceptionWithHostPort(err, 'connect', address, port, details);\r\n    ArrayPrototypePush(context.errors, ex);\r\n\r\n    self.emit('connectionAttemptFailed', address, port, addressType, ex);\r\n    internalConnectMultiple(context);\r\n    return;\r\n  }\r\n\r\n  if (current < context.addresses.length - 1) {\r\n    debug('connect/multiple: setting the attempt timeout to %d ms', context.timeout);\r\n\r\n    // If the attempt has not returned an error, start the connection timer\r\n    context[kTimeout] = setTimeout(internalConnectMultipleTimeout, context.timeout, context, req, self._handle);\r\n  }\r\n}\r\n\r\nSocket.prototype.connect = function(...args) {\r\n  let normalized;\r\n  // If passed an array, it's treated as an array of arguments that have\r\n  // already been normalized (so we don't normalize more than once). This has\r\n  // been solved before in https://github.com/nodejs/node/pull/12342, but was\r\n  // reverted as it had unintended side effects.\r\n  if (ArrayIsArray(args[0]) && args[0][normalizedArgsSymbol]) {\r\n    normalized = args[0];\r\n  } else {\r\n    normalized = normalizeArgs(args);\r\n  }\r\n  const options = normalized[0];\r\n  const cb = normalized[1];\r\n\r\n  if (cb !== null) {\r\n    this.once('connect', cb);\r\n  }\r\n\r\n  // If the parent is already connecting, do not attempt to connect again\r\n  if (this._parent && this._parent.connecting) {\r\n    return this;\r\n  }\r\n\r\n  // options.port === null will be checked later.\r\n  if (options.port === undefined && options.path == null)\r\n    throw new ERR_MISSING_ARGS(['options', 'port', 'path']);\r\n\r\n  if (this.write !== Socket.prototype.write)\r\n    this.write = Socket.prototype.write;\r\n\r\n  if (this.destroyed) {\r\n    this._handle = null;\r\n    this._peername = null;\r\n    this._sockname = null;\r\n  }\r\n\r\n  const { path } = options;\r\n  const pipe = !!path;\r\n  debug('pipe', pipe, path);\r\n\r\n  if (!this._handle) {\r\n    this._handle = pipe ?\r\n      new Pipe(PipeConstants.SOCKET) :\r\n      new TCP(TCPConstants.SOCKET);\r\n    initSocketHandle(this);\r\n  }\r\n\r\n  this._unrefTimer();\r\n\r\n  this.connecting = true;\r\n\r\n  if (pipe) {\r\n    validateString(path, 'options.path');\r\n    defaultTriggerAsyncIdScope(\r\n      this[async_id_symbol], internalConnect, this, path,\r\n    );\r\n  } else {\r\n    lookupAndConnect(this, options);\r\n  }\r\n  return this;\r\n};\r\n\r\nSocket.prototype[kReinitializeHandle] = function reinitializeHandle(handle) {\r\n  this._handle?.close();\r\n\r\n  this._handle = handle;\r\n  this._handle[owner_symbol] = this;\r\n\r\n  initSocketHandle(this);\r\n};\r\n\r\nfunction socketToDnsFamily(family) {\r\n  switch (family) {\r\n    case 'IPv4':\r\n      return 4;\r\n    case 'IPv6':\r\n      return 6;\r\n  }\r\n\r\n  return family;\r\n}\r\n\r\nfunction lookupAndConnect(self, options) {\r\n  const { localAddress, localPort } = options;\r\n  const host = options.host || 'localhost';\r\n  let { port, autoSelectFamilyAttemptTimeout, autoSelectFamily } = options;\r\n\r\n  if (localAddress && !isIP(localAddress)) {\r\n    throw new ERR_INVALID_IP_ADDRESS(localAddress);\r\n  }\r\n\r\n  if (localPort) {\r\n    validateNumber(localPort, 'options.localPort');\r\n  }\r\n\r\n  if (typeof port !== 'undefined') {\r\n    if (typeof port !== 'number' && typeof port !== 'string') {\r\n      throw new ERR_INVALID_ARG_TYPE('options.port',\r\n                                     ['number', 'string'], port);\r\n    }\r\n    validatePort(port);\r\n  }\r\n  port |= 0;\r\n\r\n\r\n  if (autoSelectFamily != null) {\r\n    validateBoolean(autoSelectFamily, 'options.autoSelectFamily');\r\n  } else {\r\n    autoSelectFamily = autoSelectFamilyDefault;\r\n  }\r\n\r\n  if (autoSelectFamilyAttemptTimeout != null) {\r\n    validateInt32(autoSelectFamilyAttemptTimeout, 'options.autoSelectFamilyAttemptTimeout', 1);\r\n\r\n    if (autoSelectFamilyAttemptTimeout < 10) {\r\n      autoSelectFamilyAttemptTimeout = 10;\r\n    }\r\n  } else {\r\n    autoSelectFamilyAttemptTimeout = autoSelectFamilyAttemptTimeoutDefault;\r\n  }\r\n\r\n  // If host is an IP, skip performing a lookup\r\n  const addressType = isIP(host);\r\n  if (addressType) {\r\n    defaultTriggerAsyncIdScope(self[async_id_symbol], process.nextTick, () => {\r\n      if (self.connecting)\r\n        defaultTriggerAsyncIdScope(\r\n          self[async_id_symbol],\r\n          internalConnect,\r\n          self, host, port, addressType, localAddress, localPort,\r\n        );\r\n    });\r\n    return;\r\n  }\r\n\r\n  if (options.lookup != null)\r\n    validateFunction(options.lookup, 'options.lookup');\r\n\r\n  if (dns === undefined) dns = require('dns');\r\n  const dnsopts = {\r\n    family: socketToDnsFamily(options.family),\r\n    hints: options.hints || 0,\r\n  };\r\n\r\n  if (!isWindows &&\r\n      dnsopts.family !== 4 &&\r\n      dnsopts.family !== 6 &&\r\n      dnsopts.hints === 0) {\r\n    dnsopts.hints = dns.ADDRCONFIG;\r\n  }\r\n\r\n  debug('connect: find host', host);\r\n  debug('connect: dns options', dnsopts);\r\n  self._host = host;\r\n  const lookup = options.lookup || dns.lookup;\r\n\r\n  if (dnsopts.family !== 4 && dnsopts.family !== 6 && !localAddress && autoSelectFamily) {\r\n    debug('connect: autodetecting');\r\n\r\n    dnsopts.all = true;\r\n    defaultTriggerAsyncIdScope(self[async_id_symbol], function() {\r\n      lookupAndConnectMultiple(\r\n        self,\r\n        async_id_symbol,\r\n        lookup,\r\n        host,\r\n        options,\r\n        dnsopts,\r\n        port,\r\n        localAddress,\r\n        localPort,\r\n        autoSelectFamilyAttemptTimeout,\r\n      );\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  defaultTriggerAsyncIdScope(self[async_id_symbol], function() {\r\n    lookup(host, dnsopts, function emitLookup(err, ip, addressType) {\r\n      self.emit('lookup', err, ip, addressType, host);\r\n\r\n      // It's possible we were destroyed while looking this up.\r\n      // XXX it would be great if we could cancel the promise returned by\r\n      // the look up.\r\n      if (!self.connecting) return;\r\n\r\n      if (err) {\r\n        // net.createConnection() creates a net.Socket object and immediately\r\n        // calls net.Socket.connect() on it (that's us). There are no event\r\n        // listeners registered yet so defer the error event to the next tick.\r\n        process.nextTick(connectErrorNT, self, err);\r\n      } else if (!isIP(ip)) {\r\n        err = new ERR_INVALID_IP_ADDRESS(ip);\r\n        process.nextTick(connectErrorNT, self, err);\r\n      } else if (addressType !== 4 && addressType !== 6) {\r\n        err = new ERR_INVALID_ADDRESS_FAMILY(addressType,\r\n                                             options.host,\r\n                                             options.port);\r\n        process.nextTick(connectErrorNT, self, err);\r\n      } else {\r\n        self._unrefTimer();\r\n        defaultTriggerAsyncIdScope(\r\n          self[async_id_symbol],\r\n          internalConnect,\r\n          self, ip, port, addressType, localAddress, localPort,\r\n        );\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction lookupAndConnectMultiple(\r\n  self, async_id_symbol, lookup, host, options, dnsopts, port, localAddress, localPort, timeout,\r\n) {\r\n  defaultTriggerAsyncIdScope(self[async_id_symbol], function emitLookup() {\r\n    lookup(host, dnsopts, function emitLookup(err, addresses) {\r\n      // It's possible we were destroyed while looking this up.\r\n      // XXX it would be great if we could cancel the promise returned by\r\n      // the look up.\r\n      if (!self.connecting) {\r\n        return;\r\n      } else if (err) {\r\n        self.emit('lookup', err, undefined, undefined, host);\r\n\r\n        // net.createConnection() creates a net.Socket object and immediately\r\n        // calls net.Socket.connect() on it (that's us). There are no event\r\n        // listeners registered yet so defer the error event to the next tick.\r\n        process.nextTick(connectErrorNT, self, err);\r\n        return;\r\n      }\r\n\r\n      // Filter addresses by only keeping the one which are either IPv4 or IPV6.\r\n      // The first valid address determines which group has preference on the\r\n      // alternate family sorting which happens later.\r\n      const validAddresses = [[], []];\r\n      const validIps = [[], []];\r\n      let destinations;\r\n      for (let i = 0, l = addresses.length; i < l; i++) {\r\n        const address = addresses[i];\r\n        const { address: ip, family: addressType } = address;\r\n        self.emit('lookup', err, ip, addressType, host);\r\n        // It's possible we were destroyed while looking this up.\r\n        if (!self.connecting) {\r\n          return;\r\n        }\r\n        if (isIP(ip) && (addressType === 4 || addressType === 6)) {\r\n          if (!destinations) {\r\n            destinations = addressType === 6 ? { 6: 0, 4: 1 } : { 4: 0, 6: 1 };\r\n          }\r\n\r\n          const destination = destinations[addressType];\r\n\r\n          // Only try an address once\r\n          if (!ArrayPrototypeIncludes(validIps[destination], ip)) {\r\n            ArrayPrototypePush(validAddresses[destination], address);\r\n            ArrayPrototypePush(validIps[destination], ip);\r\n          }\r\n        }\r\n      }\r\n\r\n\r\n      // When no AAAA or A records are available, fail on the first one\r\n      if (!validAddresses[0].length && !validAddresses[1].length) {\r\n        const { address: firstIp, family: firstAddressType } = addresses[0];\r\n\r\n        if (!isIP(firstIp)) {\r\n          err = new ERR_INVALID_IP_ADDRESS(firstIp);\r\n          process.nextTick(connectErrorNT, self, err);\r\n        } else if (firstAddressType !== 4 && firstAddressType !== 6) {\r\n          err = new ERR_INVALID_ADDRESS_FAMILY(firstAddressType,\r\n                                               options.host,\r\n                                               options.port);\r\n          process.nextTick(connectErrorNT, self, err);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      // Sort addresses alternating families\r\n      const toAttempt = [];\r\n      for (let i = 0, l = MathMax(validAddresses[0].length, validAddresses[1].length); i < l; i++) {\r\n        if (i in validAddresses[0]) {\r\n          ArrayPrototypePush(toAttempt, validAddresses[0][i]);\r\n        }\r\n        if (i in validAddresses[1]) {\r\n          ArrayPrototypePush(toAttempt, validAddresses[1][i]);\r\n        }\r\n      }\r\n\r\n      if (toAttempt.length === 1) {\r\n        debug('connect/multiple: only one address found, switching back to single connection');\r\n        const { address: ip, family: addressType } = toAttempt[0];\r\n\r\n        self._unrefTimer();\r\n        defaultTriggerAsyncIdScope(\r\n          self[async_id_symbol],\r\n          internalConnect,\r\n          self,\r\n          ip,\r\n          port,\r\n          addressType,\r\n          localAddress,\r\n          localPort,\r\n        );\r\n\r\n        return;\r\n      }\r\n\r\n      self.autoSelectFamilyAttemptedAddresses = [];\r\n      debug('connect/multiple: will try the following addresses', toAttempt);\r\n\r\n      const context = {\r\n        socket: self,\r\n        addresses: toAttempt,\r\n        current: 0,\r\n        port,\r\n        localPort,\r\n        timeout,\r\n        [kTimeout]: null,\r\n        errors: [],\r\n      };\r\n\r\n      self._unrefTimer();\r\n      defaultTriggerAsyncIdScope(self[async_id_symbol], internalConnectMultiple, context);\r\n    });\r\n  });\r\n}\r\n\r\nfunction connectErrorNT(self, err) {\r\n  self.destroy(err);\r\n}\r\n\r\n\r\nSocket.prototype.ref = function() {\r\n  if (!this._handle) {\r\n    this.once('connect', this.ref);\r\n    return this;\r\n  }\r\n\r\n  if (typeof this._handle.ref === 'function') {\r\n    this._handle.ref();\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n\r\nSocket.prototype.unref = function() {\r\n  if (!this._handle) {\r\n    this.once('connect', this.unref);\r\n    return this;\r\n  }\r\n\r\n  if (typeof this._handle.unref === 'function') {\r\n    this._handle.unref();\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n\r\nfunction afterConnect(status, handle, req, readable, writable) {\r\n  const self = handle[owner_symbol];\r\n\r\n  // Callback may come after call to destroy\r\n  if (self.destroyed) {\r\n    return;\r\n  }\r\n\r\n  debug('afterConnect');\r\n\r\n  assert(self.connecting);\r\n  self.connecting = false;\r\n  self._sockname = null;\r\n\r\n  if (status === 0) {\r\n    if (self.readable && !readable) {\r\n      self.push(null);\r\n      self.read();\r\n    }\r\n    if (self.writable && !writable) {\r\n      self.end();\r\n    }\r\n    self._unrefTimer();\r\n\r\n    if (self[kSetNoDelay] && self._handle.setNoDelay) {\r\n      self._handle.setNoDelay(true);\r\n    }\r\n\r\n    if (self[kSetKeepAlive] && self._handle.setKeepAlive) {\r\n      self._handle.setKeepAlive(true, self[kSetKeepAliveInitialDelay]);\r\n    }\r\n\r\n    self.emit('connect');\r\n    self.emit('ready');\r\n\r\n    // Start the first read, or get an immediate EOF.\r\n    // this doesn't actually consume any bytes, because len=0.\r\n    if (readable && !self.isPaused())\r\n      self.read(0);\r\n    if (self[kPerfHooksNetConnectContext] && hasObserver('net')) {\r\n      stopPerf(self, kPerfHooksNetConnectContext);\r\n    }\r\n  } else {\r\n    let details;\r\n    if (req.localAddress && req.localPort) {\r\n      details = req.localAddress + ':' + req.localPort;\r\n    }\r\n    const ex = new ExceptionWithHostPort(status,\r\n                                         'connect',\r\n                                         req.address,\r\n                                         req.port,\r\n                                         details);\r\n    if (details) {\r\n      ex.localAddress = req.localAddress;\r\n      ex.localPort = req.localPort;\r\n    }\r\n\r\n    self.emit('connectionAttemptFailed', req.address, req.port, req.addressType, ex);\r\n    self.destroy(ex);\r\n  }\r\n}\r\n\r\nfunction addClientAbortSignalOption(self, options) {\r\n  validateAbortSignal(options.signal, 'options.signal');\r\n  const { signal } = options;\r\n  let disposable;\r\n\r\n  function onAbort() {\r\n    disposable?.[SymbolDispose]();\r\n    self._aborted = true;\r\n  }\r\n\r\n  if (signal.aborted) {\r\n    process.nextTick(onAbort);\r\n  } else {\r\n    process.nextTick(() => {\r\n      disposable = addAbortListener(signal, onAbort);\r\n    });\r\n  }\r\n}\r\n\r\nfunction createConnectionError(req, status) {\r\n  let details;\r\n\r\n  if (req.localAddress && req.localPort) {\r\n    details = req.localAddress + ':' + req.localPort;\r\n  }\r\n\r\n  const ex = new ExceptionWithHostPort(status,\r\n                                       'connect',\r\n                                       req.address,\r\n                                       req.port,\r\n                                       details);\r\n  if (details) {\r\n    ex.localAddress = req.localAddress;\r\n    ex.localPort = req.localPort;\r\n  }\r\n\r\n  return ex;\r\n}\r\n\r\nfunction afterConnectMultiple(context, current, status, handle, req, readable, writable) {\r\n  debug('connect/multiple: connection attempt to %s:%s completed with status %s', req.address, req.port, status);\r\n\r\n  // Make sure another connection is not spawned\r\n  clearTimeout(context[kTimeout]);\r\n\r\n  // One of the connection has completed and correctly dispatched but after timeout, ignore this one\r\n  if (status === 0 && current !== context.current - 1) {\r\n    debug('connect/multiple: ignoring successful but timedout connection to %s:%s', req.address, req.port);\r\n    handle.close();\r\n    return;\r\n  }\r\n\r\n  const self = context.socket;\r\n\r\n  // Some error occurred, add to the list of exceptions\r\n  if (status !== 0) {\r\n    const ex = createConnectionError(req, status);\r\n    ArrayPrototypePush(context.errors, ex);\r\n\r\n    self.emit('connectionAttemptFailed', req.address, req.port, req.addressType, ex);\r\n\r\n    // Try the next address, unless we were aborted\r\n    if (context.socket.connecting) {\r\n      internalConnectMultiple(context, status === UV_ECANCELED);\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  if (hasObserver('net')) {\r\n    startPerf(\r\n      self,\r\n      kPerfHooksNetConnectContext,\r\n      { type: 'net', name: 'connect', detail: { host: req.address, port: req.port } },\r\n    );\r\n  }\r\n\r\n  afterConnect(status, self._handle, req, readable, writable);\r\n}\r\n\r\nfunction internalConnectMultipleTimeout(context, req, handle) {\r\n  debug('connect/multiple: connection to %s:%s timed out', req.address, req.port);\r\n  context.socket.emit('connectionAttemptTimeout', req.address, req.port, req.addressType);\r\n\r\n  req.oncomplete = undefined;\r\n  ArrayPrototypePush(context.errors, createConnectionError(req, UV_ETIMEDOUT));\r\n  handle.close();\r\n\r\n  // Try the next address, unless we were aborted\r\n  if (context.socket.connecting) {\r\n    internalConnectMultiple(context);\r\n  }\r\n}\r\n\r\nfunction addServerAbortSignalOption(self, options) {\r\n  if (options?.signal === undefined) {\r\n    return;\r\n  }\r\n  validateAbortSignal(options.signal, 'options.signal');\r\n  const { signal } = options;\r\n  const onAborted = () => {\r\n    self.close();\r\n  };\r\n  if (signal.aborted) {\r\n    process.nextTick(onAborted);\r\n  } else {\r\n    const disposable = addAbortListener(signal, onAborted);\r\n    self.once('close', disposable[SymbolDispose]);\r\n  }\r\n}\r\n\r\nfunction Server(options, connectionListener) {\r\n  if (!(this instanceof Server))\r\n    return new Server(options, connectionListener);\r\n\r\n  EventEmitter.call(this);\r\n\r\n  if (typeof options === 'function') {\r\n    connectionListener = options;\r\n    options = kEmptyObject;\r\n    this.on('connection', connectionListener);\r\n  } else if (options == null || typeof options === 'object') {\r\n    options = { ...options };\r\n\r\n    if (typeof connectionListener === 'function') {\r\n      this.on('connection', connectionListener);\r\n    }\r\n  } else {\r\n    throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);\r\n  }\r\n  if (typeof options.keepAliveInitialDelay !== 'undefined') {\r\n    validateNumber(\r\n      options.keepAliveInitialDelay, 'options.keepAliveInitialDelay',\r\n    );\r\n\r\n    if (options.keepAliveInitialDelay < 0) {\r\n      options.keepAliveInitialDelay = 0;\r\n    }\r\n  }\r\n  if (typeof options.highWaterMark !== 'undefined') {\r\n    validateNumber(\r\n      options.highWaterMark, 'options.highWaterMark',\r\n    );\r\n\r\n    if (options.highWaterMark < 0) {\r\n      options.highWaterMark = getDefaultHighWaterMark();\r\n    }\r\n  }\r\n\r\n  this._connections = 0;\r\n\r\n  this[async_id_symbol] = -1;\r\n  this._handle = null;\r\n  this._usingWorkers = false;\r\n  this._workers = [];\r\n  this._unref = false;\r\n  this._listeningId = 1;\r\n\r\n  this.allowHalfOpen = options.allowHalfOpen || false;\r\n  this.pauseOnConnect = !!options.pauseOnConnect;\r\n  this.noDelay = Boolean(options.noDelay);\r\n  this.keepAlive = Boolean(options.keepAlive);\r\n  this.keepAliveInitialDelay = ~~(options.keepAliveInitialDelay / 1000);\r\n  this.highWaterMark = options.highWaterMark ?? getDefaultHighWaterMark();\r\n}\r\nObjectSetPrototypeOf(Server.prototype, EventEmitter.prototype);\r\nObjectSetPrototypeOf(Server, EventEmitter);\r\n\r\n\r\nfunction toNumber(x) { return (x = Number(x)) >= 0 ? x : false; }\r\n\r\n// Returns handle if it can be created, or error code if it can't\r\nfunction createServerHandle(address, port, addressType, fd, flags) {\r\n  let err = 0;\r\n  // Assign handle in listen, and clean up if bind or listen fails\r\n  let handle;\r\n\r\n  let isTCP = false;\r\n  if (typeof fd === 'number' && fd >= 0) {\r\n    try {\r\n      handle = createHandle(fd, true);\r\n    } catch (e) {\r\n      // Not a fd we can listen on.  This will trigger an error.\r\n      debug('listen invalid fd=%d:', fd, e.message);\r\n      return UV_EINVAL;\r\n    }\r\n\r\n    err = handle.open(fd);\r\n    if (err)\r\n      return err;\r\n\r\n    assert(!address && !port);\r\n  } else if (port === -1 && addressType === -1) {\r\n    handle = new Pipe(PipeConstants.SERVER);\r\n    if (isWindows) {\r\n      const instances = NumberParseInt(process.env.NODE_PENDING_PIPE_INSTANCES);\r\n      if (!NumberIsNaN(instances)) {\r\n        handle.setPendingInstances(instances);\r\n      }\r\n    }\r\n  } else {\r\n    handle = new TCP(TCPConstants.SERVER);\r\n    isTCP = true;\r\n  }\r\n\r\n  if (address || port || isTCP) {\r\n    debug('bind to', address || 'any');\r\n    if (!address) {\r\n      // Try binding to ipv6 first\r\n      err = handle.bind6(DEFAULT_IPV6_ADDR, port, flags);\r\n      if (err) {\r\n        handle.close();\r\n        // Fallback to ipv4\r\n        return createServerHandle(DEFAULT_IPV4_ADDR, port);\r\n      }\r\n    } else if (addressType === 6) {\r\n      err = handle.bind6(address, port, flags);\r\n    } else {\r\n      err = handle.bind(address, port);\r\n    }\r\n  }\r\n\r\n  if (err) {\r\n    handle.close();\r\n    return err;\r\n  }\r\n\r\n  return handle;\r\n}\r\n\r\nfunction setupListenHandle(address, port, addressType, backlog, fd, flags) {\r\n  debug('setupListenHandle', address, port, addressType, backlog, fd);\r\n\r\n  // If there is not yet a handle, we need to create one and bind.\r\n  // In the case of a server sent via IPC, we don't need to do this.\r\n  if (this._handle) {\r\n    debug('setupListenHandle: have a handle already');\r\n  } else {\r\n    debug('setupListenHandle: create a handle');\r\n\r\n    let rval = null;\r\n\r\n    // Try to bind to the unspecified IPv6 address, see if IPv6 is available\r\n    if (!address && typeof fd !== 'number') {\r\n      rval = createServerHandle(DEFAULT_IPV6_ADDR, port, 6, fd, flags);\r\n\r\n      if (typeof rval === 'number') {\r\n        rval = null;\r\n        address = DEFAULT_IPV4_ADDR;\r\n        addressType = 4;\r\n      } else {\r\n        address = DEFAULT_IPV6_ADDR;\r\n        addressType = 6;\r\n      }\r\n    }\r\n\r\n    if (rval === null)\r\n      rval = createServerHandle(address, port, addressType, fd, flags);\r\n\r\n    if (typeof rval === 'number') {\r\n      const error = new UVExceptionWithHostPort(rval, 'listen', address, port);\r\n\r\n      if (netServerListen.hasSubscribers) {\r\n        netServerListen.error.publish({ server: this, error });\r\n      }\r\n\r\n      process.nextTick(emitErrorNT, this, error);\r\n      return;\r\n    }\r\n    this._handle = rval;\r\n  }\r\n\r\n  this[async_id_symbol] = getNewAsyncId(this._handle);\r\n  this._handle.onconnection = onconnection;\r\n  this._handle[owner_symbol] = this;\r\n\r\n  // Use a backlog of 512 entries. We pass 511 to the listen() call because\r\n  // the kernel does: backlogsize = roundup_pow_of_two(backlogsize + 1);\r\n  // which will thus give us a backlog of 512 entries.\r\n  const err = this._handle.listen(backlog || 511);\r\n\r\n  if (err) {\r\n    const ex = new UVExceptionWithHostPort(err, 'listen', address, port);\r\n    this._handle.close();\r\n    this._handle = null;\r\n\r\n    if (netServerListen.hasSubscribers) {\r\n      netServerListen.error.publish({ server: this, error: ex });\r\n    }\r\n\r\n    defaultTriggerAsyncIdScope(this[async_id_symbol],\r\n                               process.nextTick,\r\n                               emitErrorNT,\r\n                               this,\r\n                               ex);\r\n    return;\r\n  }\r\n\r\n  if (netServerListen.hasSubscribers) {\r\n    netServerListen.asyncEnd.publish({ server: this });\r\n  }\r\n\r\n  // Generate connection key, this should be unique to the connection\r\n  this._connectionKey = addressType + ':' + address + ':' + port;\r\n\r\n  // Unref the handle if the server was unref'ed prior to listening\r\n  if (this._unref)\r\n    this.unref();\r\n\r\n  defaultTriggerAsyncIdScope(this[async_id_symbol],\r\n                             process.nextTick,\r\n                             emitListeningNT,\r\n                             this);\r\n}\r\n\r\nServer.prototype._listen2 = setupListenHandle;  // legacy alias\r\n\r\nfunction emitErrorNT(self, err) {\r\n  self.emit('error', err);\r\n}\r\n\r\n\r\nfunction emitListeningNT(self) {\r\n  // Ensure handle hasn't closed\r\n  if (self._handle)\r\n    self.emit('listening');\r\n}\r\n\r\n\r\nfunction listenInCluster(server, address, port, addressType,\r\n                         backlog, fd, exclusive, flags, options) {\r\n  exclusive = !!exclusive;\r\n\r\n  if (cluster === undefined) cluster = require('cluster');\r\n\r\n  if (cluster.isPrimary || exclusive) {\r\n    // Will create a new handle\r\n    // _listen2 sets up the listened handle, it is still named like this\r\n    // to avoid breaking code that wraps this method\r\n    server._listen2(address, port, addressType, backlog, fd, flags);\r\n    return;\r\n  }\r\n\r\n  const serverQuery = {\r\n    address: address,\r\n    port: port,\r\n    addressType: addressType,\r\n    fd: fd,\r\n    flags,\r\n    backlog,\r\n    ...options,\r\n  };\r\n  const listeningId = server._listeningId;\r\n  // Get the primary's server handle, and listen on it\r\n  cluster._getServer(server, serverQuery, listenOnPrimaryHandle);\r\n  function listenOnPrimaryHandle(err, handle) {\r\n    if (listeningId !== server._listeningId) {\r\n      handle.close();\r\n      return;\r\n    }\r\n    err = checkBindError(err, port, handle);\r\n\r\n    if (err) {\r\n      const ex = new ExceptionWithHostPort(err, 'bind', address, port);\r\n      return server.emit('error', ex);\r\n    }\r\n    // If there was a handle, just close it to avoid fd leak\r\n    // but it doesn't look like that's going to happen right now\r\n    if (server._handle) {\r\n      server._handle.close();\r\n    }\r\n    // Reuse primary's server handle\r\n    server._handle = handle;\r\n    // _listen2 sets up the listened handle, it is still named like this\r\n    // to avoid breaking code that wraps this method\r\n    server._listen2(address, port, addressType, backlog, fd, flags);\r\n  }\r\n}\r\n\r\n\r\nServer.prototype.listen = function(...args) {\r\n  const normalized = normalizeArgs(args);\r\n  let options = normalized[0];\r\n  const cb = normalized[1];\r\n\r\n  if (this._handle) {\r\n    throw new ERR_SERVER_ALREADY_LISTEN();\r\n  }\r\n\r\n  if (netServerListen.hasSubscribers) {\r\n    netServerListen.asyncStart.publish({ server: this, options });\r\n  }\r\n\r\n  if (cb !== null) {\r\n    this.once('listening', cb);\r\n  }\r\n  const backlogFromArgs =\r\n    // (handle, backlog) or (path, backlog) or (port, backlog)\r\n    toNumber(args.length > 1 && args[1]) ||\r\n    toNumber(args.length > 2 && args[2]);  // (port, host, backlog)\r\n\r\n  options = options._handle || options.handle || options;\r\n  const flags = getFlags(options.ipv6Only);\r\n  //  Refresh the id to make the previous call invalid\r\n  this._listeningId++;\r\n  // (handle[, backlog][, cb]) where handle is an object with a handle\r\n  if (options instanceof TCP) {\r\n    this._handle = options;\r\n    this[async_id_symbol] = this._handle.getAsyncId();\r\n    listenInCluster(this, null, -1, -1, backlogFromArgs, undefined, true);\r\n    return this;\r\n  }\r\n  addServerAbortSignalOption(this, options);\r\n  // (handle[, backlog][, cb]) where handle is an object with a fd\r\n  if (typeof options.fd === 'number' && options.fd >= 0) {\r\n    listenInCluster(this, null, null, null, backlogFromArgs, options.fd);\r\n    return this;\r\n  }\r\n\r\n  // ([port][, host][, backlog][, cb]) where port is omitted,\r\n  // that is, listen(), listen(null), listen(cb), or listen(null, cb)\r\n  // or (options[, cb]) where options.port is explicitly set as undefined or\r\n  // null, bind to an arbitrary unused port\r\n  if (args.length === 0 || typeof args[0] === 'function' ||\r\n      (typeof options.port === 'undefined' && 'port' in options) ||\r\n      options.port === null) {\r\n    options.port = 0;\r\n  }\r\n  // ([port][, host][, backlog][, cb]) where port is specified\r\n  // or (options[, cb]) where options.port is specified\r\n  // or if options.port is normalized as 0 before\r\n  let backlog;\r\n  if (typeof options.port === 'number' || typeof options.port === 'string') {\r\n    validatePort(options.port, 'options.port');\r\n    backlog = options.backlog || backlogFromArgs;\r\n    // start TCP server listening on host:port\r\n    if (options.host) {\r\n      lookupAndListen(this, options.port | 0, options.host, backlog,\r\n                      options.exclusive, flags);\r\n    } else { // Undefined host, listens on unspecified address\r\n      // Default addressType 4 will be used to search for primary server\r\n      listenInCluster(this, null, options.port | 0, 4,\r\n                      backlog, undefined, options.exclusive);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // (path[, backlog][, cb]) or (options[, cb])\r\n  // where path or options.path is a UNIX domain socket or Windows pipe\r\n  if (options.path && isPipeName(options.path)) {\r\n    // We can not call fchmod on abstract unix socket\r\n    if (options.path[0] === '\\0' &&\r\n        (options.readableAll || options.writableAll)) {\r\n      const msg = 'can not set readableAll or writableAllt to true when path is abstract unix socket';\r\n      throw new ERR_INVALID_ARG_VALUE('options', options, msg);\r\n    }\r\n    const pipeName = this._pipeName = options.path;\r\n    backlog = options.backlog || backlogFromArgs;\r\n    listenInCluster(this,\r\n                    pipeName,\r\n                    -1,\r\n                    -1,\r\n                    backlog,\r\n                    undefined,\r\n                    options.exclusive,\r\n                    undefined,\r\n                    {\r\n                      readableAll: options.readableAll,\r\n                      writableAll: options.writableAll,\r\n                    });\r\n\r\n    if (!this._handle) {\r\n      // Failed and an error shall be emitted in the next tick.\r\n      // Therefore, we directly return.\r\n      return this;\r\n    }\r\n\r\n    let mode = 0;\r\n    if (options.readableAll === true)\r\n      mode |= PipeConstants.UV_READABLE;\r\n    if (options.writableAll === true)\r\n      mode |= PipeConstants.UV_WRITABLE;\r\n    if (mode !== 0) {\r\n      const err = this._handle.fchmod(mode);\r\n      if (err) {\r\n        this._handle.close();\r\n        this._handle = null;\r\n        throw new ErrnoException(err, 'uv_pipe_chmod');\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  if (!(('port' in options) || ('path' in options))) {\r\n    throw new ERR_INVALID_ARG_VALUE('options', options,\r\n                                    'must have the property \"port\" or \"path\"');\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_VALUE('options', options);\r\n};\r\n\r\nfunction lookupAndListen(self, port, address, backlog,\r\n                         exclusive, flags) {\r\n  if (dns === undefined) dns = require('dns');\r\n  const listeningId = self._listeningId;\r\n  dns.lookup(address, function doListen(err, ip, addressType) {\r\n    if (listeningId !== self._listeningId) {\r\n      return;\r\n    }\r\n    if (err) {\r\n      self.emit('error', err);\r\n    } else {\r\n      addressType = ip ? addressType : 4;\r\n      listenInCluster(self, ip, port, addressType,\r\n                      backlog, undefined, exclusive, flags);\r\n    }\r\n  });\r\n}\r\n\r\nObjectDefineProperty(Server.prototype, 'listening', {\r\n  __proto__: null,\r\n  get: function() {\r\n    return !!this._handle;\r\n  },\r\n  configurable: true,\r\n  enumerable: true,\r\n});\r\n\r\nServer.prototype.address = function() {\r\n  if (this._handle && this._handle.getsockname) {\r\n    const out = {};\r\n    const err = this._handle.getsockname(out);\r\n    if (err) {\r\n      throw new ErrnoException(err, 'address');\r\n    }\r\n    return out;\r\n  } else if (this._pipeName) {\r\n    return this._pipeName;\r\n  }\r\n  return null;\r\n};\r\n\r\nfunction onconnection(err, clientHandle) {\r\n  const handle = this;\r\n  const self = handle[owner_symbol];\r\n\r\n  debug('onconnection');\r\n\r\n  if (err) {\r\n    self.emit('error', new ErrnoException(err, 'accept'));\r\n    return;\r\n  }\r\n\r\n  if (self.maxConnections != null && self._connections >= self.maxConnections) {\r\n    if (clientHandle.getsockname || clientHandle.getpeername) {\r\n      const data = { __proto__: null };\r\n      if (clientHandle.getsockname) {\r\n        const localInfo = { __proto__: null };\r\n        clientHandle.getsockname(localInfo);\r\n        data.localAddress = localInfo.address;\r\n        data.localPort = localInfo.port;\r\n        data.localFamily = localInfo.family;\r\n      }\r\n      if (clientHandle.getpeername) {\r\n        const remoteInfo = { __proto__: null };\r\n        clientHandle.getpeername(remoteInfo);\r\n        data.remoteAddress = remoteInfo.address;\r\n        data.remotePort = remoteInfo.port;\r\n        data.remoteFamily = remoteInfo.family;\r\n      }\r\n      self.emit('drop', data);\r\n    } else {\r\n      self.emit('drop');\r\n    }\r\n    clientHandle.close();\r\n    return;\r\n  }\r\n\r\n  const socket = new Socket({\r\n    handle: clientHandle,\r\n    allowHalfOpen: self.allowHalfOpen,\r\n    pauseOnCreate: self.pauseOnConnect,\r\n    readable: true,\r\n    writable: true,\r\n    readableHighWaterMark: self.highWaterMark,\r\n    writableHighWaterMark: self.highWaterMark,\r\n  });\r\n\r\n  if (self.noDelay && clientHandle.setNoDelay) {\r\n    socket[kSetNoDelay] = true;\r\n    clientHandle.setNoDelay(true);\r\n  }\r\n  if (self.keepAlive && clientHandle.setKeepAlive) {\r\n    socket[kSetKeepAlive] = true;\r\n    socket[kSetKeepAliveInitialDelay] = self.keepAliveInitialDelay;\r\n    clientHandle.setKeepAlive(true, self.keepAliveInitialDelay);\r\n  }\r\n\r\n  self._connections++;\r\n  socket.server = self;\r\n  socket._server = self;\r\n  self.emit('connection', socket);\r\n  if (netServerSocketChannel.hasSubscribers) {\r\n    netServerSocketChannel.publish({\r\n      socket,\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the number of concurrent connections on the server\r\n * @param {Function} cb\r\n * @returns {Server}\r\n */\r\n\r\nServer.prototype.getConnections = function(cb) {\r\n  const self = this;\r\n\r\n  function end(err, connections) {\r\n    defaultTriggerAsyncIdScope(self[async_id_symbol],\r\n                               process.nextTick,\r\n                               cb,\r\n                               err,\r\n                               connections);\r\n  }\r\n\r\n  if (!this._usingWorkers) {\r\n    end(null, this._connections);\r\n    return this;\r\n  }\r\n\r\n  // Poll workers\r\n  let left = this._workers.length;\r\n  let total = this._connections;\r\n\r\n  function oncount(err, count) {\r\n    if (err) {\r\n      left = -1;\r\n      return end(err);\r\n    }\r\n\r\n    total += count;\r\n    if (--left === 0) return end(null, total);\r\n  }\r\n\r\n  for (let n = 0; n < this._workers.length; n++) {\r\n    this._workers[n].getConnections(oncount);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n\r\nServer.prototype.close = function(cb) {\r\n  this._listeningId++;\r\n  if (typeof cb === 'function') {\r\n    if (!this._handle) {\r\n      this.once('close', function close() {\r\n        cb(new ERR_SERVER_NOT_RUNNING());\r\n      });\r\n    } else {\r\n      this.once('close', cb);\r\n    }\r\n  }\r\n\r\n  if (this._handle) {\r\n    this._handle.close();\r\n    this._handle = null;\r\n  }\r\n\r\n  if (this._usingWorkers) {\r\n    let left = this._workers.length;\r\n    const onWorkerClose = () => {\r\n      if (--left !== 0) return;\r\n\r\n      this._connections = 0;\r\n      this._emitCloseIfDrained();\r\n    };\r\n\r\n    // Increment connections to be sure that, even if all sockets will be closed\r\n    // during polling of workers, `close` event will be emitted only once.\r\n    this._connections++;\r\n\r\n    // Poll workers\r\n    for (let n = 0; n < this._workers.length; n++)\r\n      this._workers[n].close(onWorkerClose);\r\n  } else {\r\n    this._emitCloseIfDrained();\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nServer.prototype[SymbolAsyncDispose] = async function() {\r\n  if (!this._handle) {\r\n    return;\r\n  }\r\n  return FunctionPrototypeCall(promisify(this.close), this);\r\n};\r\n\r\nServer.prototype._emitCloseIfDrained = function() {\r\n  debug('SERVER _emitCloseIfDrained');\r\n\r\n  if (this._handle || this._connections) {\r\n    debug('SERVER handle? %j   connections? %d',\r\n          !!this._handle, this._connections);\r\n    return;\r\n  }\r\n\r\n  defaultTriggerAsyncIdScope(this[async_id_symbol],\r\n                             process.nextTick,\r\n                             emitCloseNT,\r\n                             this);\r\n};\r\n\r\n\r\nfunction emitCloseNT(self) {\r\n  debug('SERVER: emit close');\r\n  self.emit('close');\r\n}\r\n\r\n\r\nServer.prototype[EventEmitter.captureRejectionSymbol] = function(\r\n  err, event, sock) {\r\n\r\n  switch (event) {\r\n    case 'connection':\r\n      sock.destroy(err);\r\n      break;\r\n    default:\r\n      this.emit('error', err);\r\n  }\r\n};\r\n\r\n\r\n// Legacy alias on the C++ wrapper object. This is not public API, so we may\r\n// want to runtime-deprecate it at some point. There's no hurry, though.\r\nObjectDefineProperty(TCP.prototype, 'owner', {\r\n  __proto__: null,\r\n  get() { return this[owner_symbol]; },\r\n  set(v) { return this[owner_symbol] = v; },\r\n});\r\n\r\nObjectDefineProperty(Socket.prototype, '_handle', {\r\n  __proto__: null,\r\n  get() { return this[kHandle]; },\r\n  set(v) { return this[kHandle] = v; },\r\n});\r\n\r\nServer.prototype._setupWorker = function(socketList) {\r\n  this._usingWorkers = true;\r\n  this._workers.push(socketList);\r\n  socketList.once('exit', (socketList) => {\r\n    const index = ArrayPrototypeIndexOf(this._workers, socketList);\r\n    this._workers.splice(index, 1);\r\n  });\r\n};\r\n\r\nServer.prototype.ref = function() {\r\n  this._unref = false;\r\n\r\n  if (this._handle)\r\n    this._handle.ref();\r\n\r\n  return this;\r\n};\r\n\r\nServer.prototype.unref = function() {\r\n  this._unref = true;\r\n\r\n  if (this._handle)\r\n    this._handle.unref();\r\n\r\n  return this;\r\n};\r\n\r\nlet _setSimultaneousAccepts;\r\nlet warnSimultaneousAccepts = true;\r\n\r\nif (isWindows) {\r\n  let simultaneousAccepts;\r\n\r\n  _setSimultaneousAccepts = function(handle) {\r\n    if (warnSimultaneousAccepts) {\r\n      process.emitWarning(\r\n        'net._setSimultaneousAccepts() is deprecated and will be removed.',\r\n        'DeprecationWarning', 'DEP0121');\r\n      warnSimultaneousAccepts = false;\r\n    }\r\n    if (handle === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (simultaneousAccepts === undefined) {\r\n      simultaneousAccepts = (process.env.NODE_MANY_ACCEPTS &&\r\n                             process.env.NODE_MANY_ACCEPTS !== '0');\r\n    }\r\n\r\n    if (handle._simultaneousAccepts !== simultaneousAccepts) {\r\n      handle.setSimultaneousAccepts(!!simultaneousAccepts);\r\n      handle._simultaneousAccepts = simultaneousAccepts;\r\n    }\r\n  };\r\n} else {\r\n  _setSimultaneousAccepts = function() {\r\n    if (warnSimultaneousAccepts) {\r\n      process.emitWarning(\r\n        'net._setSimultaneousAccepts() is deprecated and will be removed.',\r\n        'DeprecationWarning', 'DEP0121');\r\n      warnSimultaneousAccepts = false;\r\n    }\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  _createServerHandle: createServerHandle,\r\n  _normalizeArgs: normalizeArgs,\r\n  _setSimultaneousAccepts,\r\n  get BlockList() {\r\n    BlockList ??= require('internal/blocklist').BlockList;\r\n    return BlockList;\r\n  },\r\n  get SocketAddress() {\r\n    SocketAddress ??= require('internal/socketaddress').SocketAddress;\r\n    return SocketAddress;\r\n  },\r\n  connect,\r\n  createConnection: connect,\r\n  createServer,\r\n  isIP: isIP,\r\n  isIPv4: isIPv4,\r\n  isIPv6: isIPv6,\r\n  Server,\r\n  Socket,\r\n  Stream: Socket, // Legacy naming\r\n  getDefaultAutoSelectFamily,\r\n  setDefaultAutoSelectFamily,\r\n  getDefaultAutoSelectFamilyAttemptTimeout,\r\n  setDefaultAutoSelectFamilyAttemptTimeout,\r\n};\r\n"
  },
  "81": {
    "metadata": {
      "scriptId": "81",
      "url": "node:stream",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 147,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "f641bb2ccff01b8b63d7f93ba6484ad1446c2e8bdd5d0f94ec1ea99b36a6b68d",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 5031,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:stream"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperty,\r\n  ObjectKeys,\r\n  ReflectApply,\r\n} = primordials;\r\n\r\nconst {\r\n  promisify: { custom: customPromisify },\r\n} = require('internal/util');\r\n\r\nconst {\r\n  streamReturningOperators,\r\n  promiseReturningOperators,\r\n} = require('internal/streams/operators');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n  },\r\n} = require('internal/errors');\r\nconst compose = require('internal/streams/compose');\r\nconst { setDefaultHighWaterMark, getDefaultHighWaterMark } = require('internal/streams/state');\r\nconst { pipeline } = require('internal/streams/pipeline');\r\nconst { destroyer } = require('internal/streams/destroy');\r\nconst eos = require('internal/streams/end-of-stream');\r\nconst internalBuffer = require('internal/buffer');\r\n\r\nconst promises = require('stream/promises');\r\nconst utils = require('internal/streams/utils');\r\nconst { isArrayBufferView, isUint8Array } = require('internal/util/types');\r\n\r\nconst Stream = module.exports = require('internal/streams/legacy').Stream;\r\n\r\nStream.isDestroyed = utils.isDestroyed;\r\nStream.isDisturbed = utils.isDisturbed;\r\nStream.isErrored = utils.isErrored;\r\nStream.isReadable = utils.isReadable;\r\nStream.isWritable = utils.isWritable;\r\n\r\nStream.Readable = require('internal/streams/readable');\r\nfor (const key of ObjectKeys(streamReturningOperators)) {\r\n  const op = streamReturningOperators[key];\r\n  function fn(...args) {\r\n    if (new.target) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n    return Stream.Readable.from(ReflectApply(op, this, args));\r\n  }\r\n  ObjectDefineProperty(fn, 'name', { __proto__: null, value: op.name });\r\n  ObjectDefineProperty(fn, 'length', { __proto__: null, value: op.length });\r\n  ObjectDefineProperty(Stream.Readable.prototype, key, {\r\n    __proto__: null,\r\n    value: fn,\r\n    enumerable: false,\r\n    configurable: true,\r\n    writable: true,\r\n  });\r\n}\r\nfor (const key of ObjectKeys(promiseReturningOperators)) {\r\n  const op = promiseReturningOperators[key];\r\n  function fn(...args) {\r\n    if (new.target) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n    return ReflectApply(op, this, args);\r\n  }\r\n  ObjectDefineProperty(fn, 'name', { __proto__: null, value: op.name });\r\n  ObjectDefineProperty(fn, 'length', { __proto__: null, value: op.length });\r\n  ObjectDefineProperty(Stream.Readable.prototype, key, {\r\n    __proto__: null,\r\n    value: fn,\r\n    enumerable: false,\r\n    configurable: true,\r\n    writable: true,\r\n  });\r\n}\r\nStream.Writable = require('internal/streams/writable');\r\nStream.Duplex = require('internal/streams/duplex');\r\nStream.Transform = require('internal/streams/transform');\r\nStream.PassThrough = require('internal/streams/passthrough');\r\nStream.pipeline = pipeline;\r\nconst { addAbortSignal } = require('internal/streams/add-abort-signal');\r\nStream.addAbortSignal = addAbortSignal;\r\nStream.finished = eos;\r\nStream.destroy = destroyer;\r\nStream.compose = compose;\r\nStream.setDefaultHighWaterMark = setDefaultHighWaterMark;\r\nStream.getDefaultHighWaterMark = getDefaultHighWaterMark;\r\n\r\nObjectDefineProperty(Stream, 'promises', {\r\n  __proto__: null,\r\n  configurable: true,\r\n  enumerable: true,\r\n  get() {\r\n    return promises;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(pipeline, customPromisify, {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get() {\r\n    return promises.pipeline;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(eos, customPromisify, {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get() {\r\n    return promises.finished;\r\n  },\r\n});\r\n\r\n// Backwards-compat with node 0.4.x\r\nStream.Stream = Stream;\r\n\r\nStream._isArrayBufferView = isArrayBufferView;\r\nStream._isUint8Array = isUint8Array;\r\nStream._uint8ArrayToBuffer = function _uint8ArrayToBuffer(chunk) {\r\n  return new internalBuffer.FastBuffer(chunk.buffer,\r\n                                       chunk.byteOffset,\r\n                                       chunk.byteLength);\r\n};\r\n"
  },
  "82": {
    "metadata": {
      "scriptId": "82",
      "url": "node:internal/streams/operators",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 436,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "8a04e28b9e7a1e9bc7abfca8947d5d7237bb5a3319ba06f37b0c5b196f896b01",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10576,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/operators"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePush,\r\n  Boolean,\r\n  MathFloor,\r\n  Number,\r\n  NumberIsNaN,\r\n  Promise,\r\n  PromisePrototypeThen,\r\n  PromiseReject,\r\n  PromiseResolve,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst { AbortController, AbortSignal } = require('internal/abort_controller');\r\n\r\nconst {\r\n  AbortError,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_MISSING_ARGS,\r\n    ERR_OUT_OF_RANGE,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  validateAbortSignal,\r\n  validateInteger,\r\n  validateObject,\r\n} = require('internal/validators');\r\nconst { kWeakHandler, kResistStopPropagation } = require('internal/event_target');\r\nconst { finished } = require('internal/streams/end-of-stream');\r\nconst staticCompose = require('internal/streams/compose');\r\nconst {\r\n  addAbortSignalNoValidate,\r\n} = require('internal/streams/add-abort-signal');\r\nconst { isWritable, isNodeStream } = require('internal/streams/utils');\r\n\r\nconst kEmpty = Symbol('kEmpty');\r\nconst kEof = Symbol('kEof');\r\n\r\nfunction compose(stream, options) {\r\n  if (options != null) {\r\n    validateObject(options, 'options');\r\n  }\r\n  if (options?.signal != null) {\r\n    validateAbortSignal(options.signal, 'options.signal');\r\n  }\r\n\r\n  if (isNodeStream(stream) && !isWritable(stream)) {\r\n    throw new ERR_INVALID_ARG_VALUE('stream', stream, 'must be writable');\r\n  }\r\n\r\n  const composedStream = staticCompose(this, stream);\r\n\r\n  if (options?.signal) {\r\n    // Not validating as we already validated before\r\n    addAbortSignalNoValidate(\r\n      options.signal,\r\n      composedStream,\r\n    );\r\n  }\r\n\r\n  return composedStream;\r\n}\r\n\r\nfunction map(fn, options) {\r\n  if (typeof fn !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'fn', ['Function', 'AsyncFunction'], fn);\r\n  }\r\n  if (options != null) {\r\n    validateObject(options, 'options');\r\n  }\r\n  if (options?.signal != null) {\r\n    validateAbortSignal(options.signal, 'options.signal');\r\n  }\r\n\r\n  let concurrency = 1;\r\n  if (options?.concurrency != null) {\r\n    concurrency = MathFloor(options.concurrency);\r\n  }\r\n\r\n  let highWaterMark = concurrency - 1;\r\n  if (options?.highWaterMark != null) {\r\n    highWaterMark = MathFloor(options.highWaterMark);\r\n  }\r\n\r\n  validateInteger(concurrency, 'options.concurrency', 1);\r\n  validateInteger(highWaterMark, 'options.highWaterMark', 0);\r\n\r\n  highWaterMark += concurrency;\r\n\r\n  return async function* map() {\r\n    const signal = AbortSignal.any([options?.signal].filter(Boolean));\r\n    const stream = this;\r\n    const queue = [];\r\n    const signalOpt = { signal };\r\n\r\n    let next;\r\n    let resume;\r\n    let done = false;\r\n    let cnt = 0;\r\n\r\n    function onCatch() {\r\n      done = true;\r\n      afterItemProcessed();\r\n    }\r\n\r\n    function afterItemProcessed() {\r\n      cnt -= 1;\r\n      maybeResume();\r\n    }\r\n\r\n    function maybeResume() {\r\n      if (\r\n        resume &&\r\n        !done &&\r\n        cnt < concurrency &&\r\n        queue.length < highWaterMark\r\n      ) {\r\n        resume();\r\n        resume = null;\r\n      }\r\n    }\r\n\r\n    async function pump() {\r\n      try {\r\n        for await (let val of stream) {\r\n          if (done) {\r\n            return;\r\n          }\r\n\r\n          if (signal.aborted) {\r\n            throw new AbortError();\r\n          }\r\n\r\n          try {\r\n            val = fn(val, signalOpt);\r\n\r\n            if (val === kEmpty) {\r\n              continue;\r\n            }\r\n\r\n            val = PromiseResolve(val);\r\n          } catch (err) {\r\n            val = PromiseReject(err);\r\n          }\r\n\r\n          cnt += 1;\r\n\r\n          PromisePrototypeThen(val, afterItemProcessed, onCatch);\r\n\r\n          queue.push(val);\r\n          if (next) {\r\n            next();\r\n            next = null;\r\n          }\r\n\r\n          if (!done && (queue.length >= highWaterMark || cnt >= concurrency)) {\r\n            await new Promise((resolve) => {\r\n              resume = resolve;\r\n            });\r\n          }\r\n        }\r\n        queue.push(kEof);\r\n      } catch (err) {\r\n        const val = PromiseReject(err);\r\n        PromisePrototypeThen(val, afterItemProcessed, onCatch);\r\n        queue.push(val);\r\n      } finally {\r\n        done = true;\r\n        if (next) {\r\n          next();\r\n          next = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    pump();\r\n\r\n    try {\r\n      while (true) {\r\n        while (queue.length > 0) {\r\n          const val = await queue[0];\r\n\r\n          if (val === kEof) {\r\n            return;\r\n          }\r\n\r\n          if (signal.aborted) {\r\n            throw new AbortError();\r\n          }\r\n\r\n          if (val !== kEmpty) {\r\n            yield val;\r\n          }\r\n\r\n          queue.shift();\r\n          maybeResume();\r\n        }\r\n\r\n        await new Promise((resolve) => {\r\n          next = resolve;\r\n        });\r\n      }\r\n    } finally {\r\n      done = true;\r\n      if (resume) {\r\n        resume();\r\n        resume = null;\r\n      }\r\n    }\r\n  }.call(this);\r\n}\r\n\r\nasync function some(fn, options = undefined) {\r\n  for await (const unused of filter.call(this, fn, options)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nasync function every(fn, options = undefined) {\r\n  if (typeof fn !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'fn', ['Function', 'AsyncFunction'], fn);\r\n  }\r\n  // https://en.wikipedia.org/wiki/De_Morgan%27s_laws\r\n  return !(await some.call(this, async (...args) => {\r\n    return !(await fn(...args));\r\n  }, options));\r\n}\r\n\r\nasync function find(fn, options) {\r\n  for await (const result of filter.call(this, fn, options)) {\r\n    return result;\r\n  }\r\n  return undefined;\r\n}\r\n\r\nasync function forEach(fn, options) {\r\n  if (typeof fn !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'fn', ['Function', 'AsyncFunction'], fn);\r\n  }\r\n  async function forEachFn(value, options) {\r\n    await fn(value, options);\r\n    return kEmpty;\r\n  }\r\n  // eslint-disable-next-line no-unused-vars\r\n  for await (const unused of map.call(this, forEachFn, options));\r\n}\r\n\r\nfunction filter(fn, options) {\r\n  if (typeof fn !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'fn', ['Function', 'AsyncFunction'], fn);\r\n  }\r\n  async function filterFn(value, options) {\r\n    if (await fn(value, options)) {\r\n      return value;\r\n    }\r\n    return kEmpty;\r\n  }\r\n  return map.call(this, filterFn, options);\r\n}\r\n\r\n// Specific to provide better error to reduce since the argument is only\r\n// missing if the stream has no items in it - but the code is still appropriate\r\nclass ReduceAwareErrMissingArgs extends ERR_MISSING_ARGS {\r\n  constructor() {\r\n    super('reduce');\r\n    this.message = 'Reduce of an empty stream requires an initial value';\r\n  }\r\n}\r\n\r\nasync function reduce(reducer, initialValue, options) {\r\n  if (typeof reducer !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'reducer', ['Function', 'AsyncFunction'], reducer);\r\n  }\r\n  if (options != null) {\r\n    validateObject(options, 'options');\r\n  }\r\n  if (options?.signal != null) {\r\n    validateAbortSignal(options.signal, 'options.signal');\r\n  }\r\n\r\n  let hasInitialValue = arguments.length > 1;\r\n  if (options?.signal?.aborted) {\r\n    const err = new AbortError(undefined, { cause: options.signal.reason });\r\n    this.once('error', () => {}); // The error is already propagated\r\n    await finished(this.destroy(err));\r\n    throw err;\r\n  }\r\n  const ac = new AbortController();\r\n  const signal = ac.signal;\r\n  if (options?.signal) {\r\n    const opts = { once: true, [kWeakHandler]: this, [kResistStopPropagation]: true };\r\n    options.signal.addEventListener('abort', () => ac.abort(), opts);\r\n  }\r\n  let gotAnyItemFromStream = false;\r\n  try {\r\n    for await (const value of this) {\r\n      gotAnyItemFromStream = true;\r\n      if (options?.signal?.aborted) {\r\n        throw new AbortError();\r\n      }\r\n      if (!hasInitialValue) {\r\n        initialValue = value;\r\n        hasInitialValue = true;\r\n      } else {\r\n        initialValue = await reducer(initialValue, value, { signal });\r\n      }\r\n    }\r\n    if (!gotAnyItemFromStream && !hasInitialValue) {\r\n      throw new ReduceAwareErrMissingArgs();\r\n    }\r\n  } finally {\r\n    ac.abort();\r\n  }\r\n  return initialValue;\r\n}\r\n\r\nasync function toArray(options) {\r\n  if (options != null) {\r\n    validateObject(options, 'options');\r\n  }\r\n  if (options?.signal != null) {\r\n    validateAbortSignal(options.signal, 'options.signal');\r\n  }\r\n\r\n  const result = [];\r\n  for await (const val of this) {\r\n    if (options?.signal?.aborted) {\r\n      throw new AbortError(undefined, { cause: options.signal.reason });\r\n    }\r\n    ArrayPrototypePush(result, val);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction flatMap(fn, options) {\r\n  const values = map.call(this, fn, options);\r\n  return async function* flatMap() {\r\n    for await (const val of values) {\r\n      yield* val;\r\n    }\r\n  }.call(this);\r\n}\r\n\r\nfunction toIntegerOrInfinity(number) {\r\n  // We coerce here to align with the spec\r\n  // https://github.com/tc39/proposal-iterator-helpers/issues/169\r\n  number = Number(number);\r\n  if (NumberIsNaN(number)) {\r\n    return 0;\r\n  }\r\n  if (number < 0) {\r\n    throw new ERR_OUT_OF_RANGE('number', '>= 0', number);\r\n  }\r\n  return number;\r\n}\r\n\r\nfunction drop(number, options = undefined) {\r\n  if (options != null) {\r\n    validateObject(options, 'options');\r\n  }\r\n  if (options?.signal != null) {\r\n    validateAbortSignal(options.signal, 'options.signal');\r\n  }\r\n\r\n  number = toIntegerOrInfinity(number);\r\n  return async function* drop() {\r\n    if (options?.signal?.aborted) {\r\n      throw new AbortError();\r\n    }\r\n    for await (const val of this) {\r\n      if (options?.signal?.aborted) {\r\n        throw new AbortError();\r\n      }\r\n      if (number-- <= 0) {\r\n        yield val;\r\n      }\r\n    }\r\n  }.call(this);\r\n}\r\n\r\nfunction take(number, options = undefined) {\r\n  if (options != null) {\r\n    validateObject(options, 'options');\r\n  }\r\n  if (options?.signal != null) {\r\n    validateAbortSignal(options.signal, 'options.signal');\r\n  }\r\n\r\n  number = toIntegerOrInfinity(number);\r\n  return async function* take() {\r\n    if (options?.signal?.aborted) {\r\n      throw new AbortError();\r\n    }\r\n    for await (const val of this) {\r\n      if (options?.signal?.aborted) {\r\n        throw new AbortError();\r\n      }\r\n      if (number-- > 0) {\r\n        yield val;\r\n      }\r\n\r\n      // Don't get another item from iterator in case we reached the end\r\n      if (number <= 0) {\r\n        return;\r\n      }\r\n    }\r\n  }.call(this);\r\n}\r\n\r\nmodule.exports.streamReturningOperators = {\r\n  drop,\r\n  filter,\r\n  flatMap,\r\n  map,\r\n  take,\r\n  compose,\r\n};\r\n\r\nmodule.exports.promiseReturningOperators = {\r\n  every,\r\n  forEach,\r\n  reduce,\r\n  toArray,\r\n  some,\r\n  find,\r\n};\r\n"
  },
  "83": {
    "metadata": {
      "scriptId": "83",
      "url": "node:internal/abort_controller",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 470,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "92dbd3aa5e348f5212958f0d3168f42c0ca37d2d356b325fc0d1dc68ec341173",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 13066,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/abort_controller"
    },
    "source": "'use strict';\r\n\r\n// Modeled very closely on the AbortController implementation\r\n// in https://github.com/mysticatea/abort-controller (MIT license)\r\n\r\nconst {\r\n  ObjectAssign,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  PromiseResolve,\r\n  SafeFinalizationRegistry,\r\n  SafeSet,\r\n  Symbol,\r\n  SymbolToStringTag,\r\n  WeakRef,\r\n} = primordials;\r\n\r\nconst {\r\n  defineEventHandler,\r\n  EventTarget,\r\n  Event,\r\n  kTrustEvent,\r\n  kNewListener,\r\n  kRemoveListener,\r\n  kResistStopPropagation,\r\n  kWeakHandler,\r\n} = require('internal/event_target');\r\nconst {\r\n  createDeferredPromise,\r\n  customInspectSymbol,\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\nconst { inspect } = require('internal/util/inspect');\r\nconst {\r\n  codes: {\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_THIS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateAbortSignal,\r\n  validateAbortSignalArray,\r\n  validateObject,\r\n  validateUint32,\r\n  kValidateObjectAllowObjects,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  DOMException,\r\n} = internalBinding('messaging');\r\n\r\nconst {\r\n  clearTimeout,\r\n  setTimeout,\r\n} = require('timers');\r\nconst assert = require('internal/assert');\r\n\r\nconst {\r\n  kDeserialize,\r\n  kTransfer,\r\n  kTransferList,\r\n} = require('internal/worker/js_transferable');\r\n\r\nlet _MessageChannel;\r\nlet markTransferMode;\r\n\r\nconst kDontThrowSymbol = Symbol('kDontThrowSymbol');\r\n\r\n// Loading the MessageChannel and markTransferable have to be done lazily\r\n// because otherwise we'll end up with a require cycle that ends up with\r\n// an incomplete initialization of abort_controller.\r\n\r\nfunction lazyMessageChannel() {\r\n  _MessageChannel ??= require('internal/worker/io').MessageChannel;\r\n  return new _MessageChannel();\r\n}\r\n\r\nfunction lazyMarkTransferMode(obj, cloneable, transferable) {\r\n  markTransferMode ??=\r\n    require('internal/worker/js_transferable').markTransferMode;\r\n  markTransferMode(obj, cloneable, transferable);\r\n}\r\n\r\nconst clearTimeoutRegistry = new SafeFinalizationRegistry(clearTimeout);\r\nconst gcPersistentSignals = new SafeSet();\r\n\r\nconst kAborted = Symbol('kAborted');\r\nconst kReason = Symbol('kReason');\r\nconst kCloneData = Symbol('kCloneData');\r\nconst kTimeout = Symbol('kTimeout');\r\nconst kMakeTransferable = Symbol('kMakeTransferable');\r\nconst kComposite = Symbol('kComposite');\r\nconst kSourceSignals = Symbol('kSourceSignals');\r\nconst kDependantSignals = Symbol('kDependantSignals');\r\n\r\nfunction customInspect(self, obj, depth, options) {\r\n  if (depth < 0)\r\n    return self;\r\n\r\n  const opts = ObjectAssign({}, options, {\r\n    depth: options.depth === null ? null : options.depth - 1,\r\n  });\r\n\r\n  return `${self.constructor.name} ${inspect(obj, opts)}`;\r\n}\r\n\r\nfunction validateThisAbortSignal(obj) {\r\n  if (obj?.[kAborted] === undefined)\r\n    throw new ERR_INVALID_THIS('AbortSignal');\r\n}\r\n\r\n// Because the AbortSignal timeout cannot be canceled, we don't want the\r\n// presence of the timer alone to keep the AbortSignal from being garbage\r\n// collected if it otherwise no longer accessible. We also don't want the\r\n// timer to keep the Node.js process open on it's own. Therefore, we wrap\r\n// the AbortSignal in a WeakRef and have the setTimeout callback close\r\n// over the WeakRef rather than directly over the AbortSignal, and we unref\r\n// the created timer object. Separately, we add the signal to a\r\n// FinalizerRegistry that will clear the timeout when the signal is gc'd.\r\nfunction setWeakAbortSignalTimeout(weakRef, delay) {\r\n  const timeout = setTimeout(() => {\r\n    const signal = weakRef.deref();\r\n    if (signal !== undefined) {\r\n      gcPersistentSignals.delete(signal);\r\n      abortSignal(\r\n        signal,\r\n        new DOMException(\r\n          'The operation was aborted due to timeout',\r\n          'TimeoutError'));\r\n    }\r\n  }, delay);\r\n  timeout.unref();\r\n  return timeout;\r\n}\r\n\r\nclass AbortSignal extends EventTarget {\r\n\r\n  /**\r\n   * @param {symbol | undefined} dontThrowSymbol\r\n   * @param {{\r\n   *   aborted? : boolean,\r\n   *   reason? : any,\r\n   *   transferable? : boolean,\r\n   *   composite? : boolean,\r\n   * }} [init]\r\n   * @private\r\n   */\r\n  constructor(dontThrowSymbol = undefined, init = kEmptyObject) {\r\n    if (dontThrowSymbol !== kDontThrowSymbol) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n    super();\r\n\r\n    const {\r\n      aborted = false,\r\n      reason = undefined,\r\n      transferable = false,\r\n      composite = false,\r\n    } = init;\r\n    this[kAborted] = aborted;\r\n    this[kReason] = reason;\r\n    this[kComposite] = composite;\r\n    if (transferable) {\r\n      lazyMarkTransferMode(this, false, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  get aborted() {\r\n    validateThisAbortSignal(this);\r\n    return !!this[kAborted];\r\n  }\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  get reason() {\r\n    validateThisAbortSignal(this);\r\n    return this[kReason];\r\n  }\r\n\r\n  throwIfAborted() {\r\n    validateThisAbortSignal(this);\r\n    if (this[kAborted]) {\r\n      throw this[kReason];\r\n    }\r\n  }\r\n\r\n  [customInspectSymbol](depth, options) {\r\n    return customInspect(this, {\r\n      aborted: this.aborted,\r\n    }, depth, options);\r\n  }\r\n\r\n  /**\r\n   * @param {any} [reason]\r\n   * @returns {AbortSignal}\r\n   */\r\n  static abort(\r\n    reason = new DOMException('This operation was aborted', 'AbortError')) {\r\n    return new AbortSignal(kDontThrowSymbol, { aborted: true, reason });\r\n  }\r\n\r\n  /**\r\n   * @param {number} delay\r\n   * @returns {AbortSignal}\r\n   */\r\n  static timeout(delay) {\r\n    validateUint32(delay, 'delay', false);\r\n    const signal = new AbortSignal(kDontThrowSymbol);\r\n    signal[kTimeout] = true;\r\n    clearTimeoutRegistry.register(\r\n      signal,\r\n      setWeakAbortSignalTimeout(new WeakRef(signal), delay));\r\n    return signal;\r\n  }\r\n\r\n  /**\r\n   * @param {AbortSignal[]} signals\r\n   * @returns {AbortSignal}\r\n   */\r\n  static any(signals) {\r\n    validateAbortSignalArray(signals, 'signals');\r\n    const resultSignal = new AbortSignal(kDontThrowSymbol, { composite: true });\r\n    if (!signals.length) {\r\n      return resultSignal;\r\n    }\r\n    const resultSignalWeakRef = new WeakRef(resultSignal);\r\n    resultSignal[kSourceSignals] = new SafeSet();\r\n    for (let i = 0; i < signals.length; i++) {\r\n      const signal = signals[i];\r\n      if (signal.aborted) {\r\n        abortSignal(resultSignal, signal.reason);\r\n        return resultSignal;\r\n      }\r\n      signal[kDependantSignals] ??= new SafeSet();\r\n      if (!signal[kComposite]) {\r\n        resultSignal[kSourceSignals].add(new WeakRef(signal));\r\n        signal[kDependantSignals].add(resultSignalWeakRef);\r\n      } else if (!signal[kSourceSignals]) {\r\n        continue;\r\n      } else {\r\n        for (const sourceSignal of signal[kSourceSignals]) {\r\n          const sourceSignalRef = sourceSignal.deref();\r\n          if (!sourceSignalRef) {\r\n            continue;\r\n          }\r\n          assert(!sourceSignalRef.aborted);\r\n          assert(!sourceSignalRef[kComposite]);\r\n\r\n          if (resultSignal[kSourceSignals].has(sourceSignal)) {\r\n            continue;\r\n          }\r\n          resultSignal[kSourceSignals].add(sourceSignal);\r\n          sourceSignalRef[kDependantSignals].add(resultSignalWeakRef);\r\n        }\r\n      }\r\n    }\r\n    return resultSignal;\r\n  }\r\n\r\n  [kNewListener](size, type, listener, once, capture, passive, weak) {\r\n    super[kNewListener](size, type, listener, once, capture, passive, weak);\r\n    const isTimeoutOrNonEmptyCompositeSignal = this[kTimeout] || (this[kComposite] && this[kSourceSignals]?.size);\r\n    if (isTimeoutOrNonEmptyCompositeSignal &&\r\n        type === 'abort' &&\r\n        !this.aborted &&\r\n        !weak &&\r\n        size === 1) {\r\n      // If this is a timeout signal, or a non-empty composite signal, and we're adding a non-weak abort\r\n      // listener, then we don't want it to be gc'd while the listener\r\n      // is attached and the timer still hasn't fired. So, we retain a\r\n      // strong ref that is held for as long as the listener is registered.\r\n      gcPersistentSignals.add(this);\r\n    }\r\n  }\r\n\r\n  [kRemoveListener](size, type, listener, capture) {\r\n    super[kRemoveListener](size, type, listener, capture);\r\n    const isTimeoutOrNonEmptyCompositeSignal = this[kTimeout] || (this[kComposite] && this[kSourceSignals]?.size);\r\n    if (isTimeoutOrNonEmptyCompositeSignal && type === 'abort' && size === 0) {\r\n      gcPersistentSignals.delete(this);\r\n    }\r\n  }\r\n\r\n  [kTransfer]() {\r\n    validateThisAbortSignal(this);\r\n    const aborted = this.aborted;\r\n    if (aborted) {\r\n      const reason = this.reason;\r\n      return {\r\n        data: { aborted, reason },\r\n        deserializeInfo: 'internal/abort_controller:ClonedAbortSignal',\r\n      };\r\n    }\r\n\r\n    const { port1, port2 } = this[kCloneData];\r\n    this[kCloneData] = undefined;\r\n\r\n    this.addEventListener('abort', () => {\r\n      port1.postMessage(this.reason);\r\n      port1.close();\r\n    }, { once: true });\r\n\r\n    return {\r\n      data: { port: port2 },\r\n      deserializeInfo: 'internal/abort_controller:ClonedAbortSignal',\r\n    };\r\n  }\r\n\r\n  [kTransferList]() {\r\n    if (!this.aborted) {\r\n      const { port1, port2 } = lazyMessageChannel();\r\n      port1.unref();\r\n      port2.unref();\r\n      this[kCloneData] = {\r\n        port1,\r\n        port2,\r\n      };\r\n      return [port2];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  [kDeserialize]({ aborted, reason, port }) {\r\n    if (aborted) {\r\n      this[kAborted] = aborted;\r\n      this[kReason] = reason;\r\n      return;\r\n    }\r\n\r\n    port.onmessage = ({ data }) => {\r\n      abortSignal(this, data);\r\n      port.close();\r\n      port.onmessage = undefined;\r\n    };\r\n    // The receiving port, by itself, should never keep the event loop open.\r\n    // The unref() has to be called *after* setting the onmessage handler.\r\n    port.unref();\r\n  }\r\n}\r\n\r\nfunction ClonedAbortSignal() {\r\n  return new AbortSignal(kDontThrowSymbol, { transferable: true });\r\n}\r\nClonedAbortSignal.prototype[kDeserialize] = () => {};\r\n\r\nObjectDefineProperties(AbortSignal.prototype, {\r\n  aborted: kEnumerableProperty,\r\n});\r\n\r\nObjectDefineProperty(AbortSignal.prototype, SymbolToStringTag, {\r\n  __proto__: null,\r\n  writable: false,\r\n  enumerable: false,\r\n  configurable: true,\r\n  value: 'AbortSignal',\r\n});\r\n\r\ndefineEventHandler(AbortSignal.prototype, 'abort');\r\n\r\nfunction abortSignal(signal, reason) {\r\n  if (signal[kAborted]) return;\r\n  signal[kAborted] = true;\r\n  signal[kReason] = reason;\r\n  const event = new Event('abort', {\r\n    [kTrustEvent]: true,\r\n  });\r\n  signal.dispatchEvent(event);\r\n  signal[kDependantSignals]?.forEach((s) => {\r\n    const signalRef = s.deref();\r\n    if (signalRef) abortSignal(signalRef, reason);\r\n  });\r\n}\r\n\r\nclass AbortController {\r\n  #signal;\r\n\r\n  /**\r\n   * @type {AbortSignal}\r\n   */\r\n  get signal() {\r\n    this.#signal ??= new AbortSignal(kDontThrowSymbol);\r\n    return this.#signal;\r\n  }\r\n\r\n  /**\r\n   * @param {any} [reason]\r\n   */\r\n  abort(reason = new DOMException('This operation was aborted', 'AbortError')) {\r\n    abortSignal(this.#signal ??= new AbortSignal(kDontThrowSymbol), reason);\r\n  }\r\n\r\n  [customInspectSymbol](depth, options) {\r\n    return customInspect(this, {\r\n      signal: this.signal,\r\n    }, depth, options);\r\n  }\r\n\r\n  static [kMakeTransferable]() {\r\n    const controller = new AbortController();\r\n    controller.#signal = new AbortSignal(kDontThrowSymbol, { transferable: true });\r\n    return controller;\r\n  }\r\n}\r\n\r\n/**\r\n * Enables the AbortSignal to be transferable using structuredClone/postMessage.\r\n * @param {AbortSignal} signal\r\n * @returns {AbortSignal}\r\n */\r\nfunction transferableAbortSignal(signal) {\r\n  if (signal?.[kAborted] === undefined)\r\n    throw new ERR_INVALID_ARG_TYPE('signal', 'AbortSignal', signal);\r\n  lazyMarkTransferMode(signal, false, true);\r\n  return signal;\r\n}\r\n\r\n/**\r\n * Creates an AbortController with a transferable AbortSignal\r\n */\r\nfunction transferableAbortController() {\r\n  return AbortController[kMakeTransferable]();\r\n}\r\n\r\n/**\r\n * @param {AbortSignal} signal\r\n * @param {any} resource\r\n * @returns {Promise<void>}\r\n */\r\nasync function aborted(signal, resource) {\r\n  if (signal === undefined) {\r\n    throw new ERR_INVALID_ARG_TYPE('signal', 'AbortSignal', signal);\r\n  }\r\n  validateAbortSignal(signal, 'signal');\r\n  validateObject(resource, 'resource', kValidateObjectAllowObjects);\r\n  if (signal.aborted)\r\n    return PromiseResolve();\r\n  const abortPromise = createDeferredPromise();\r\n  const opts = { __proto__: null, [kWeakHandler]: resource, once: true, [kResistStopPropagation]: true };\r\n  signal.addEventListener('abort', abortPromise.resolve, opts);\r\n  return abortPromise.promise;\r\n}\r\n\r\nObjectDefineProperties(AbortController.prototype, {\r\n  signal: kEnumerableProperty,\r\n  abort: kEnumerableProperty,\r\n});\r\n\r\nObjectDefineProperty(AbortController.prototype, SymbolToStringTag, {\r\n  __proto__: null,\r\n  writable: false,\r\n  enumerable: false,\r\n  configurable: true,\r\n  value: 'AbortController',\r\n});\r\n\r\nmodule.exports = {\r\n  AbortController,\r\n  AbortSignal,\r\n  ClonedAbortSignal,\r\n  aborted,\r\n  transferableAbortSignal,\r\n  transferableAbortController,\r\n};\r\n"
  },
  "84": {
    "metadata": {
      "scriptId": "84",
      "url": "node:internal/streams/end-of-stream",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 326,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "71fd21fa8eb52d9eb790ae2be50304479f8a4a0cfe8499f40d4f8b097af77565",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 8726,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/end-of-stream"
    },
    "source": "// Ported from https://github.com/mafintosh/end-of-stream with\r\n// permission from the author, Mathias Buus (@mafintosh).\r\n\r\n'use strict';\r\n\r\nconst {\r\n  Promise,\r\n  PromisePrototypeThen,\r\n  SymbolDispose,\r\n} = primordials;\r\n\r\nconst {\r\n  AbortError,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_STREAM_PREMATURE_CLOSE,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  kEmptyObject,\r\n  once,\r\n} = require('internal/util');\r\nconst {\r\n  validateAbortSignal,\r\n  validateFunction,\r\n  validateObject,\r\n  validateBoolean,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  isClosed,\r\n  isReadable,\r\n  isReadableNodeStream,\r\n  isReadableStream,\r\n  isReadableFinished,\r\n  isReadableErrored,\r\n  isWritable,\r\n  isWritableNodeStream,\r\n  isWritableStream,\r\n  isWritableFinished,\r\n  isWritableErrored,\r\n  isNodeStream,\r\n  willEmitClose: _willEmitClose,\r\n  kIsClosedPromise,\r\n} = require('internal/streams/utils');\r\nlet addAbortListener;\r\n\r\nfunction isRequest(stream) {\r\n  return stream.setHeader && typeof stream.abort === 'function';\r\n}\r\n\r\nconst nop = () => {};\r\n\r\nfunction eos(stream, options, callback) {\r\n  if (arguments.length === 2) {\r\n    callback = options;\r\n    options = kEmptyObject;\r\n  } else if (options == null) {\r\n    options = kEmptyObject;\r\n  } else {\r\n    validateObject(options, 'options');\r\n  }\r\n  validateFunction(callback, 'callback');\r\n  validateAbortSignal(options.signal, 'options.signal');\r\n\r\n  callback = once(callback);\r\n\r\n  if (isReadableStream(stream) || isWritableStream(stream)) {\r\n    return eosWeb(stream, options, callback);\r\n  }\r\n\r\n  if (!isNodeStream(stream)) {\r\n    throw new ERR_INVALID_ARG_TYPE('stream', ['ReadableStream', 'WritableStream', 'Stream'], stream);\r\n  }\r\n\r\n  const readable = options.readable ?? isReadableNodeStream(stream);\r\n  const writable = options.writable ?? isWritableNodeStream(stream);\r\n\r\n  const wState = stream._writableState;\r\n  const rState = stream._readableState;\r\n\r\n  const onlegacyfinish = () => {\r\n    if (!stream.writable) {\r\n      onfinish();\r\n    }\r\n  };\r\n\r\n  // TODO (ronag): Improve soft detection to include core modules and\r\n  // common ecosystem modules that do properly emit 'close' but fail\r\n  // this generic check.\r\n  let willEmitClose = (\r\n    _willEmitClose(stream) &&\r\n    isReadableNodeStream(stream) === readable &&\r\n    isWritableNodeStream(stream) === writable\r\n  );\r\n\r\n  let writableFinished = isWritableFinished(stream, false);\r\n  const onfinish = () => {\r\n    writableFinished = true;\r\n    // Stream should not be destroyed here. If it is that\r\n    // means that user space is doing something differently and\r\n    // we cannot trust willEmitClose.\r\n    if (stream.destroyed) {\r\n      willEmitClose = false;\r\n    }\r\n\r\n    if (willEmitClose && (!stream.readable || readable)) {\r\n      return;\r\n    }\r\n\r\n    if (!readable || readableFinished) {\r\n      callback.call(stream);\r\n    }\r\n  };\r\n\r\n  let readableFinished = isReadableFinished(stream, false);\r\n  const onend = () => {\r\n    readableFinished = true;\r\n    // Stream should not be destroyed here. If it is that\r\n    // means that user space is doing something differently and\r\n    // we cannot trust willEmitClose.\r\n    if (stream.destroyed) {\r\n      willEmitClose = false;\r\n    }\r\n\r\n    if (willEmitClose && (!stream.writable || writable)) {\r\n      return;\r\n    }\r\n\r\n    if (!writable || writableFinished) {\r\n      callback.call(stream);\r\n    }\r\n  };\r\n\r\n  const onerror = (err) => {\r\n    callback.call(stream, err);\r\n  };\r\n\r\n  let closed = isClosed(stream);\r\n\r\n  const onclose = () => {\r\n    closed = true;\r\n\r\n    const errored = isWritableErrored(stream) || isReadableErrored(stream);\r\n\r\n    if (errored && typeof errored !== 'boolean') {\r\n      return callback.call(stream, errored);\r\n    }\r\n\r\n    if (readable && !readableFinished && isReadableNodeStream(stream, true)) {\r\n      if (!isReadableFinished(stream, false))\r\n        return callback.call(stream,\r\n                             new ERR_STREAM_PREMATURE_CLOSE());\r\n    }\r\n    if (writable && !writableFinished) {\r\n      if (!isWritableFinished(stream, false))\r\n        return callback.call(stream,\r\n                             new ERR_STREAM_PREMATURE_CLOSE());\r\n    }\r\n\r\n    callback.call(stream);\r\n  };\r\n\r\n  const onclosed = () => {\r\n    closed = true;\r\n\r\n    const errored = isWritableErrored(stream) || isReadableErrored(stream);\r\n\r\n    if (errored && typeof errored !== 'boolean') {\r\n      return callback.call(stream, errored);\r\n    }\r\n\r\n    callback.call(stream);\r\n  };\r\n\r\n  const onrequest = () => {\r\n    stream.req.on('finish', onfinish);\r\n  };\r\n\r\n  if (isRequest(stream)) {\r\n    stream.on('complete', onfinish);\r\n    if (!willEmitClose) {\r\n      stream.on('abort', onclose);\r\n    }\r\n    if (stream.req) {\r\n      onrequest();\r\n    } else {\r\n      stream.on('request', onrequest);\r\n    }\r\n  } else if (writable && !wState) { // legacy streams\r\n    stream.on('end', onlegacyfinish);\r\n    stream.on('close', onlegacyfinish);\r\n  }\r\n\r\n  // Not all streams will emit 'close' after 'aborted'.\r\n  if (!willEmitClose && typeof stream.aborted === 'boolean') {\r\n    stream.on('aborted', onclose);\r\n  }\r\n\r\n  stream.on('end', onend);\r\n  stream.on('finish', onfinish);\r\n  if (options.error !== false) {\r\n    stream.on('error', onerror);\r\n  }\r\n  stream.on('close', onclose);\r\n\r\n  if (closed) {\r\n    process.nextTick(onclose);\r\n  } else if (wState?.errorEmitted || rState?.errorEmitted) {\r\n    if (!willEmitClose) {\r\n      process.nextTick(onclosed);\r\n    }\r\n  } else if (\r\n    !readable &&\r\n    (!willEmitClose || isReadable(stream)) &&\r\n    (writableFinished || isWritable(stream) === false)\r\n  ) {\r\n    process.nextTick(onclosed);\r\n  } else if (\r\n    !writable &&\r\n    (!willEmitClose || isWritable(stream)) &&\r\n    (readableFinished || isReadable(stream) === false)\r\n  ) {\r\n    process.nextTick(onclosed);\r\n  } else if ((rState && stream.req && stream.aborted)) {\r\n    process.nextTick(onclosed);\r\n  }\r\n\r\n  const cleanup = () => {\r\n    callback = nop;\r\n    stream.removeListener('aborted', onclose);\r\n    stream.removeListener('complete', onfinish);\r\n    stream.removeListener('abort', onclose);\r\n    stream.removeListener('request', onrequest);\r\n    if (stream.req) stream.req.removeListener('finish', onfinish);\r\n    stream.removeListener('end', onlegacyfinish);\r\n    stream.removeListener('close', onlegacyfinish);\r\n    stream.removeListener('finish', onfinish);\r\n    stream.removeListener('end', onend);\r\n    stream.removeListener('error', onerror);\r\n    stream.removeListener('close', onclose);\r\n  };\r\n\r\n  if (options.signal && !closed) {\r\n    const abort = () => {\r\n      // Keep it because cleanup removes it.\r\n      const endCallback = callback;\r\n      cleanup();\r\n      endCallback.call(\r\n        stream,\r\n        new AbortError(undefined, { cause: options.signal.reason }));\r\n    };\r\n    if (options.signal.aborted) {\r\n      process.nextTick(abort);\r\n    } else {\r\n      addAbortListener ??= require('internal/events/abort_listener').addAbortListener;\r\n      const disposable = addAbortListener(options.signal, abort);\r\n      const originalCallback = callback;\r\n      callback = once((...args) => {\r\n        disposable[SymbolDispose]();\r\n        originalCallback.apply(stream, args);\r\n      });\r\n    }\r\n  }\r\n\r\n  return cleanup;\r\n}\r\n\r\nfunction eosWeb(stream, options, callback) {\r\n  let isAborted = false;\r\n  let abort = nop;\r\n  if (options.signal) {\r\n    abort = () => {\r\n      isAborted = true;\r\n      callback.call(stream, new AbortError(undefined, { cause: options.signal.reason }));\r\n    };\r\n    if (options.signal.aborted) {\r\n      process.nextTick(abort);\r\n    } else {\r\n      addAbortListener ??= require('internal/events/abort_listener').addAbortListener;\r\n      const disposable = addAbortListener(options.signal, abort);\r\n      const originalCallback = callback;\r\n      callback = once((...args) => {\r\n        disposable[SymbolDispose]();\r\n        originalCallback.apply(stream, args);\r\n      });\r\n    }\r\n  }\r\n  const resolverFn = (...args) => {\r\n    if (!isAborted) {\r\n      process.nextTick(() => callback.apply(stream, args));\r\n    }\r\n  };\r\n  PromisePrototypeThen(\r\n    stream[kIsClosedPromise].promise,\r\n    resolverFn,\r\n    resolverFn,\r\n  );\r\n  return nop;\r\n}\r\n\r\nfunction finished(stream, opts) {\r\n  let autoCleanup = false;\r\n  if (opts === null) {\r\n    opts = kEmptyObject;\r\n  }\r\n  if (opts?.cleanup) {\r\n    validateBoolean(opts.cleanup, 'cleanup');\r\n    autoCleanup = opts.cleanup;\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    const cleanup = eos(stream, opts, (err) => {\r\n      if (autoCleanup) {\r\n        cleanup();\r\n      }\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nmodule.exports = eos;\r\nmodule.exports.finished = finished;\r\n"
  },
  "85": {
    "metadata": {
      "scriptId": "85",
      "url": "node:internal/streams/utils",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 364,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "dfdb98c9a4486b635297e07c0ee7b826542d265ebb57d2748b989297e7b0601c",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 9298,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/utils"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Symbol,\r\n  SymbolAsyncIterator,\r\n  SymbolFor,\r\n  SymbolIterator,\r\n} = primordials;\r\n\r\n// We need to use SymbolFor to make these globally available\r\n// for interopt with readable-stream, i.e. readable-stream\r\n// and node core needs to be able to read/write private state\r\n// from each other for proper interoperability.\r\nconst kIsDestroyed = SymbolFor('nodejs.stream.destroyed');\r\nconst kIsErrored = SymbolFor('nodejs.stream.errored');\r\nconst kIsReadable = SymbolFor('nodejs.stream.readable');\r\nconst kIsWritable = SymbolFor('nodejs.stream.writable');\r\nconst kIsDisturbed = SymbolFor('nodejs.stream.disturbed');\r\n\r\nconst kOnConstructed = Symbol('kOnConstructed');\r\n\r\nconst kIsClosedPromise = SymbolFor('nodejs.webstream.isClosedPromise');\r\nconst kControllerErrorFunction = SymbolFor('nodejs.webstream.controllerErrorFunction');\r\n\r\nconst kState = Symbol('kState');\r\nconst kObjectMode = 1 << 0;\r\nconst kErrorEmitted = 1 << 1;\r\nconst kAutoDestroy = 1 << 2;\r\nconst kEmitClose = 1 << 3;\r\nconst kDestroyed = 1 << 4;\r\nconst kClosed = 1 << 5;\r\nconst kCloseEmitted = 1 << 6;\r\nconst kErrored = 1 << 7;\r\nconst kConstructed = 1 << 8;\r\n\r\nfunction isReadableNodeStream(obj, strict = false) {\r\n  return !!(\r\n    obj &&\r\n    typeof obj.pipe === 'function' &&\r\n    typeof obj.on === 'function' &&\r\n    (\r\n      !strict ||\r\n      (typeof obj.pause === 'function' && typeof obj.resume === 'function')\r\n    ) &&\r\n    (!obj._writableState || obj._readableState?.readable !== false) && // Duplex\r\n    (!obj._writableState || obj._readableState) // Writable has .pipe.\r\n  );\r\n}\r\n\r\nfunction isWritableNodeStream(obj) {\r\n  return !!(\r\n    obj &&\r\n    typeof obj.write === 'function' &&\r\n    typeof obj.on === 'function' &&\r\n    (!obj._readableState || obj._writableState?.writable !== false) // Duplex\r\n  );\r\n}\r\n\r\nfunction isDuplexNodeStream(obj) {\r\n  return !!(\r\n    obj &&\r\n    (typeof obj.pipe === 'function' && obj._readableState) &&\r\n    typeof obj.on === 'function' &&\r\n    typeof obj.write === 'function'\r\n  );\r\n}\r\n\r\nfunction isNodeStream(obj) {\r\n  return (\r\n    obj &&\r\n    (\r\n      obj._readableState ||\r\n      obj._writableState ||\r\n      (typeof obj.write === 'function' && typeof obj.on === 'function') ||\r\n      (typeof obj.pipe === 'function' && typeof obj.on === 'function')\r\n    )\r\n  );\r\n}\r\n\r\nfunction isReadableStream(obj) {\r\n  return !!(\r\n    obj &&\r\n    !isNodeStream(obj) &&\r\n    typeof obj.pipeThrough === 'function' &&\r\n    typeof obj.getReader === 'function' &&\r\n    typeof obj.cancel === 'function'\r\n  );\r\n}\r\n\r\nfunction isWritableStream(obj) {\r\n  return !!(\r\n    obj &&\r\n    !isNodeStream(obj) &&\r\n    typeof obj.getWriter === 'function' &&\r\n    typeof obj.abort === 'function'\r\n  );\r\n}\r\n\r\nfunction isTransformStream(obj) {\r\n  return !!(\r\n    obj &&\r\n    !isNodeStream(obj) &&\r\n    typeof obj.readable === 'object' &&\r\n    typeof obj.writable === 'object'\r\n  );\r\n}\r\n\r\nfunction isWebStream(obj) {\r\n  return isReadableStream(obj) || isWritableStream(obj) || isTransformStream(obj);\r\n}\r\n\r\nfunction isIterable(obj, isAsync) {\r\n  if (obj == null) return false;\r\n  if (isAsync === true) return typeof obj[SymbolAsyncIterator] === 'function';\r\n  if (isAsync === false) return typeof obj[SymbolIterator] === 'function';\r\n  return typeof obj[SymbolAsyncIterator] === 'function' ||\r\n    typeof obj[SymbolIterator] === 'function';\r\n}\r\n\r\nfunction isDestroyed(stream) {\r\n  if (!isNodeStream(stream)) return null;\r\n  const wState = stream._writableState;\r\n  const rState = stream._readableState;\r\n  const state = wState || rState;\r\n  return !!(stream.destroyed || stream[kIsDestroyed] || state?.destroyed);\r\n}\r\n\r\n// Have been end():d.\r\nfunction isWritableEnded(stream) {\r\n  if (!isWritableNodeStream(stream)) return null;\r\n  if (stream.writableEnded === true) return true;\r\n  const wState = stream._writableState;\r\n  if (wState?.errored) return false;\r\n  if (typeof wState?.ended !== 'boolean') return null;\r\n  return wState.ended;\r\n}\r\n\r\n// Have emitted 'finish'.\r\nfunction isWritableFinished(stream, strict) {\r\n  if (!isWritableNodeStream(stream)) return null;\r\n  if (stream.writableFinished === true) return true;\r\n  const wState = stream._writableState;\r\n  if (wState?.errored) return false;\r\n  if (typeof wState?.finished !== 'boolean') return null;\r\n  return !!(\r\n    wState.finished ||\r\n    (strict === false && wState.ended === true && wState.length === 0)\r\n  );\r\n}\r\n\r\n// Have been push(null):d.\r\nfunction isReadableEnded(stream) {\r\n  if (!isReadableNodeStream(stream)) return null;\r\n  if (stream.readableEnded === true) return true;\r\n  const rState = stream._readableState;\r\n  if (!rState || rState.errored) return false;\r\n  if (typeof rState?.ended !== 'boolean') return null;\r\n  return rState.ended;\r\n}\r\n\r\n// Have emitted 'end'.\r\nfunction isReadableFinished(stream, strict) {\r\n  if (!isReadableNodeStream(stream)) return null;\r\n  const rState = stream._readableState;\r\n  if (rState?.errored) return false;\r\n  if (typeof rState?.endEmitted !== 'boolean') return null;\r\n  return !!(\r\n    rState.endEmitted ||\r\n    (strict === false && rState.ended === true && rState.length === 0)\r\n  );\r\n}\r\n\r\nfunction isReadable(stream) {\r\n  if (stream && stream[kIsReadable] != null) return stream[kIsReadable];\r\n  if (typeof stream?.readable !== 'boolean') return null;\r\n  if (isDestroyed(stream)) return false;\r\n  return isReadableNodeStream(stream) &&\r\n    stream.readable &&\r\n    !isReadableFinished(stream);\r\n}\r\n\r\nfunction isWritable(stream) {\r\n  if (stream && stream[kIsWritable] != null) return stream[kIsWritable];\r\n  if (typeof stream?.writable !== 'boolean') return null;\r\n  if (isDestroyed(stream)) return false;\r\n  return isWritableNodeStream(stream) &&\r\n    stream.writable &&\r\n    !isWritableEnded(stream);\r\n}\r\n\r\nfunction isFinished(stream, opts) {\r\n  if (!isNodeStream(stream)) {\r\n    return null;\r\n  }\r\n\r\n  if (isDestroyed(stream)) {\r\n    return true;\r\n  }\r\n\r\n  if (opts?.readable !== false && isReadable(stream)) {\r\n    return false;\r\n  }\r\n\r\n  if (opts?.writable !== false && isWritable(stream)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction isWritableErrored(stream) {\r\n  if (!isNodeStream(stream)) {\r\n    return null;\r\n  }\r\n\r\n  if (stream.writableErrored) {\r\n    return stream.writableErrored;\r\n  }\r\n\r\n  return stream._writableState?.errored ?? null;\r\n}\r\n\r\nfunction isReadableErrored(stream) {\r\n  if (!isNodeStream(stream)) {\r\n    return null;\r\n  }\r\n\r\n  if (stream.readableErrored) {\r\n    return stream.readableErrored;\r\n  }\r\n\r\n  return stream._readableState?.errored ?? null;\r\n}\r\n\r\nfunction isClosed(stream) {\r\n  if (!isNodeStream(stream)) {\r\n    return null;\r\n  }\r\n\r\n  if (typeof stream.closed === 'boolean') {\r\n    return stream.closed;\r\n  }\r\n\r\n  const wState = stream._writableState;\r\n  const rState = stream._readableState;\r\n\r\n  if (\r\n    typeof wState?.closed === 'boolean' ||\r\n    typeof rState?.closed === 'boolean'\r\n  ) {\r\n    return wState?.closed || rState?.closed;\r\n  }\r\n\r\n  if (typeof stream._closed === 'boolean' && isOutgoingMessage(stream)) {\r\n    return stream._closed;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction isOutgoingMessage(stream) {\r\n  return (\r\n    typeof stream._closed === 'boolean' &&\r\n    typeof stream._defaultKeepAlive === 'boolean' &&\r\n    typeof stream._removedConnection === 'boolean' &&\r\n    typeof stream._removedContLen === 'boolean'\r\n  );\r\n}\r\n\r\nfunction isServerResponse(stream) {\r\n  return (\r\n    typeof stream._sent100 === 'boolean' &&\r\n    isOutgoingMessage(stream)\r\n  );\r\n}\r\n\r\nfunction isServerRequest(stream) {\r\n  return (\r\n    typeof stream._consuming === 'boolean' &&\r\n    typeof stream._dumped === 'boolean' &&\r\n    stream.req?.upgradeOrConnect === undefined\r\n  );\r\n}\r\n\r\nfunction willEmitClose(stream) {\r\n  if (!isNodeStream(stream)) return null;\r\n\r\n  const wState = stream._writableState;\r\n  const rState = stream._readableState;\r\n  const state = wState || rState;\r\n\r\n  return (!state && isServerResponse(stream)) || !!(\r\n    state &&\r\n    state.autoDestroy &&\r\n    state.emitClose &&\r\n    state.closed === false\r\n  );\r\n}\r\n\r\nfunction isDisturbed(stream) {\r\n  return !!(stream && (\r\n    stream[kIsDisturbed] ??\r\n    (stream.readableDidRead || stream.readableAborted)\r\n  ));\r\n}\r\n\r\nfunction isErrored(stream) {\r\n  return !!(stream && (\r\n    stream[kIsErrored] ??\r\n    stream.readableErrored ??\r\n    stream.writableErrored ??\r\n    stream._readableState?.errorEmitted ??\r\n    stream._writableState?.errorEmitted ??\r\n    stream._readableState?.errored ??\r\n    stream._writableState?.errored\r\n  ));\r\n}\r\n\r\nmodule.exports = {\r\n  kOnConstructed,\r\n  isDestroyed,\r\n  kIsDestroyed,\r\n  isDisturbed,\r\n  kIsDisturbed,\r\n  isErrored,\r\n  kIsErrored,\r\n  isReadable,\r\n  kIsReadable,\r\n  kIsClosedPromise,\r\n  kControllerErrorFunction,\r\n  kIsWritable,\r\n  isClosed,\r\n  isDuplexNodeStream,\r\n  isFinished,\r\n  isIterable,\r\n  isReadableNodeStream,\r\n  isReadableStream,\r\n  isReadableEnded,\r\n  isReadableFinished,\r\n  isReadableErrored,\r\n  isNodeStream,\r\n  isWebStream,\r\n  isWritable,\r\n  isWritableNodeStream,\r\n  isWritableStream,\r\n  isWritableEnded,\r\n  isWritableFinished,\r\n  isWritableErrored,\r\n  isServerRequest,\r\n  isServerResponse,\r\n  willEmitClose,\r\n  isTransformStream,\r\n  kState,\r\n  // bitfields\r\n  kObjectMode,\r\n  kErrorEmitted,\r\n  kAutoDestroy,\r\n  kEmitClose,\r\n  kDestroyed,\r\n  kClosed,\r\n  kCloseEmitted,\r\n  kErrored,\r\n  kConstructed,\r\n};\r\n"
  },
  "86": {
    "metadata": {
      "scriptId": "86",
      "url": "node:internal/streams/compose",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 252,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "3b7dc95a7c058e7a623286490a0bb8f3897f0a7abe3a35520830c6b758760dda",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 5703,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/compose"
    },
    "source": "'use strict';\r\n\r\nconst { pipeline } = require('internal/streams/pipeline');\r\nconst Duplex = require('internal/streams/duplex');\r\nconst { destroyer } = require('internal/streams/destroy');\r\nconst {\r\n  isNodeStream,\r\n  isReadable,\r\n  isWritable,\r\n  isWebStream,\r\n  isTransformStream,\r\n  isWritableStream,\r\n  isReadableStream,\r\n} = require('internal/streams/utils');\r\nconst {\r\n  AbortError,\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_MISSING_ARGS,\r\n  },\r\n} = require('internal/errors');\r\nconst eos = require('internal/streams/end-of-stream');\r\n\r\nmodule.exports = function compose(...streams) {\r\n  if (streams.length === 0) {\r\n    throw new ERR_MISSING_ARGS('streams');\r\n  }\r\n\r\n  if (streams.length === 1) {\r\n    return Duplex.from(streams[0]);\r\n  }\r\n\r\n  const orgStreams = [...streams];\r\n\r\n  if (typeof streams[0] === 'function') {\r\n    streams[0] = Duplex.from(streams[0]);\r\n  }\r\n\r\n  if (typeof streams[streams.length - 1] === 'function') {\r\n    const idx = streams.length - 1;\r\n    streams[idx] = Duplex.from(streams[idx]);\r\n  }\r\n\r\n  for (let n = 0; n < streams.length; ++n) {\r\n    if (!isNodeStream(streams[n]) && !isWebStream(streams[n])) {\r\n      // TODO(ronag): Add checks for non streams.\r\n      continue;\r\n    }\r\n    if (\r\n      n < streams.length - 1 &&\r\n      !(\r\n        isReadable(streams[n]) ||\r\n        isReadableStream(streams[n]) ||\r\n        isTransformStream(streams[n])\r\n      )\r\n    ) {\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        `streams[${n}]`,\r\n        orgStreams[n],\r\n        'must be readable',\r\n      );\r\n    }\r\n    if (\r\n      n > 0 &&\r\n      !(\r\n        isWritable(streams[n]) ||\r\n        isWritableStream(streams[n]) ||\r\n        isTransformStream(streams[n])\r\n      )\r\n    ) {\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        `streams[${n}]`,\r\n        orgStreams[n],\r\n        'must be writable',\r\n      );\r\n    }\r\n  }\r\n\r\n  let ondrain;\r\n  let onfinish;\r\n  let onreadable;\r\n  let onclose;\r\n  let d;\r\n\r\n  function onfinished(err) {\r\n    const cb = onclose;\r\n    onclose = null;\r\n\r\n    if (cb) {\r\n      cb(err);\r\n    } else if (err) {\r\n      d.destroy(err);\r\n    } else if (!readable && !writable) {\r\n      d.destroy();\r\n    }\r\n  }\r\n\r\n  const head = streams[0];\r\n  const tail = pipeline(streams, onfinished);\r\n\r\n  const writable = !!(\r\n    isWritable(head) ||\r\n    isWritableStream(head) ||\r\n    isTransformStream(head)\r\n  );\r\n  const readable = !!(\r\n    isReadable(tail) ||\r\n    isReadableStream(tail) ||\r\n    isTransformStream(tail)\r\n  );\r\n\r\n  // TODO(ronag): Avoid double buffering.\r\n  // Implement Writable/Readable/Duplex traits.\r\n  // See, https://github.com/nodejs/node/pull/33515.\r\n  d = new Duplex({\r\n    // TODO (ronag): highWaterMark?\r\n    writableObjectMode: !!head?.writableObjectMode,\r\n    readableObjectMode: !!tail?.readableObjectMode,\r\n    writable,\r\n    readable,\r\n  });\r\n\r\n  if (writable) {\r\n    if (isNodeStream(head)) {\r\n      d._write = function(chunk, encoding, callback) {\r\n        if (head.write(chunk, encoding)) {\r\n          callback();\r\n        } else {\r\n          ondrain = callback;\r\n        }\r\n      };\r\n\r\n      d._final = function(callback) {\r\n        head.end();\r\n        onfinish = callback;\r\n      };\r\n\r\n      head.on('drain', function() {\r\n        if (ondrain) {\r\n          const cb = ondrain;\r\n          ondrain = null;\r\n          cb();\r\n        }\r\n      });\r\n    } else if (isWebStream(head)) {\r\n      const writable = isTransformStream(head) ? head.writable : head;\r\n      const writer = writable.getWriter();\r\n\r\n      d._write = async function(chunk, encoding, callback) {\r\n        try {\r\n          await writer.ready;\r\n          writer.write(chunk).catch(() => {});\r\n          callback();\r\n        } catch (err) {\r\n          callback(err);\r\n        }\r\n      };\r\n\r\n      d._final = async function(callback) {\r\n        try {\r\n          await writer.ready;\r\n          writer.close().catch(() => {});\r\n          onfinish = callback;\r\n        } catch (err) {\r\n          callback(err);\r\n        }\r\n      };\r\n    }\r\n\r\n    const toRead = isTransformStream(tail) ? tail.readable : tail;\r\n\r\n    eos(toRead, () => {\r\n      if (onfinish) {\r\n        const cb = onfinish;\r\n        onfinish = null;\r\n        cb();\r\n      }\r\n    });\r\n  }\r\n\r\n  if (readable) {\r\n    if (isNodeStream(tail)) {\r\n      tail.on('readable', function() {\r\n        if (onreadable) {\r\n          const cb = onreadable;\r\n          onreadable = null;\r\n          cb();\r\n        }\r\n      });\r\n\r\n      tail.on('end', function() {\r\n        d.push(null);\r\n      });\r\n\r\n      d._read = function() {\r\n        while (true) {\r\n          const buf = tail.read();\r\n          if (buf === null) {\r\n            onreadable = d._read;\r\n            return;\r\n          }\r\n\r\n          if (!d.push(buf)) {\r\n            return;\r\n          }\r\n        }\r\n      };\r\n    } else if (isWebStream(tail)) {\r\n      const readable = isTransformStream(tail) ? tail.readable : tail;\r\n      const reader = readable.getReader();\r\n      d._read = async function() {\r\n        while (true) {\r\n          try {\r\n            const { value, done } = await reader.read();\r\n\r\n            if (!d.push(value)) {\r\n              return;\r\n            }\r\n\r\n            if (done) {\r\n              d.push(null);\r\n              return;\r\n            }\r\n          } catch {\r\n            return;\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  d._destroy = function(err, callback) {\r\n    if (!err && onclose !== null) {\r\n      err = new AbortError();\r\n    }\r\n\r\n    onreadable = null;\r\n    ondrain = null;\r\n    onfinish = null;\r\n\r\n    if (onclose === null) {\r\n      callback(err);\r\n    } else {\r\n      onclose = callback;\r\n      if (isNodeStream(tail)) {\r\n        destroyer(tail, err);\r\n      }\r\n    }\r\n  };\r\n\r\n  return d;\r\n};\r\n"
  },
  "87": {
    "metadata": {
      "scriptId": "87",
      "url": "node:internal/streams/pipeline",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 467,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "28ed8c2f86f50c828d6b211579af56764b678b92b5859213ea617dd3d78f9129",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 12817,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/pipeline"
    },
    "source": "// Ported from https://github.com/mafintosh/pump with\r\n// permission from the author, Mathias Buus (@mafintosh).\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  Promise,\r\n  SymbolAsyncIterator,\r\n  SymbolDispose,\r\n} = primordials;\r\n\r\nconst eos = require('internal/streams/end-of-stream');\r\nconst { once } = require('internal/util');\r\nconst destroyImpl = require('internal/streams/destroy');\r\nconst Duplex = require('internal/streams/duplex');\r\nconst {\r\n  AbortError,\r\n  aggregateTwoErrors,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_RETURN_VALUE,\r\n    ERR_MISSING_ARGS,\r\n    ERR_STREAM_DESTROYED,\r\n    ERR_STREAM_PREMATURE_CLOSE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateFunction,\r\n  validateAbortSignal,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  isIterable,\r\n  isReadable,\r\n  isReadableNodeStream,\r\n  isNodeStream,\r\n  isTransformStream,\r\n  isWebStream,\r\n  isReadableStream,\r\n  isReadableFinished,\r\n} = require('internal/streams/utils');\r\nconst { AbortController } = require('internal/abort_controller');\r\n\r\nlet PassThrough;\r\nlet Readable;\r\nlet addAbortListener;\r\n\r\nfunction destroyer(stream, reading, writing) {\r\n  let finished = false;\r\n  stream.on('close', () => {\r\n    finished = true;\r\n  });\r\n\r\n  const cleanup = eos(stream, { readable: reading, writable: writing }, (err) => {\r\n    finished = !err;\r\n  });\r\n\r\n  return {\r\n    destroy: (err) => {\r\n      if (finished) return;\r\n      finished = true;\r\n      destroyImpl.destroyer(stream, err || new ERR_STREAM_DESTROYED('pipe'));\r\n    },\r\n    cleanup,\r\n  };\r\n}\r\n\r\nfunction popCallback(streams) {\r\n  // Streams should never be an empty array. It should always contain at least\r\n  // a single stream. Therefore optimize for the average case instead of\r\n  // checking for length === 0 as well.\r\n  validateFunction(streams[streams.length - 1], 'streams[stream.length - 1]');\r\n  return streams.pop();\r\n}\r\n\r\nfunction makeAsyncIterable(val) {\r\n  if (isIterable(val)) {\r\n    return val;\r\n  } else if (isReadableNodeStream(val)) {\r\n    // Legacy streams are not Iterable.\r\n    return fromReadable(val);\r\n  }\r\n  throw new ERR_INVALID_ARG_TYPE(\r\n    'val', ['Readable', 'Iterable', 'AsyncIterable'], val);\r\n}\r\n\r\nasync function* fromReadable(val) {\r\n  if (!Readable) {\r\n    Readable = require('internal/streams/readable');\r\n  }\r\n\r\n  yield* Readable.prototype[SymbolAsyncIterator].call(val);\r\n}\r\n\r\nasync function pumpToNode(iterable, writable, finish, { end }) {\r\n  let error;\r\n  let onresolve = null;\r\n\r\n  const resume = (err) => {\r\n    if (err) {\r\n      error = err;\r\n    }\r\n\r\n    if (onresolve) {\r\n      const callback = onresolve;\r\n      onresolve = null;\r\n      callback();\r\n    }\r\n  };\r\n\r\n  const wait = () => new Promise((resolve, reject) => {\r\n    if (error) {\r\n      reject(error);\r\n    } else {\r\n      onresolve = () => {\r\n        if (error) {\r\n          reject(error);\r\n        } else {\r\n          resolve();\r\n        }\r\n      };\r\n    }\r\n  });\r\n\r\n  writable.on('drain', resume);\r\n  const cleanup = eos(writable, { readable: false }, resume);\r\n\r\n  try {\r\n    if (writable.writableNeedDrain) {\r\n      await wait();\r\n    }\r\n\r\n    for await (const chunk of iterable) {\r\n      if (!writable.write(chunk)) {\r\n        await wait();\r\n      }\r\n    }\r\n\r\n    if (end) {\r\n      writable.end();\r\n      await wait();\r\n    }\r\n\r\n    finish();\r\n  } catch (err) {\r\n    finish(error !== err ? aggregateTwoErrors(error, err) : err);\r\n  } finally {\r\n    cleanup();\r\n    writable.off('drain', resume);\r\n  }\r\n}\r\n\r\nasync function pumpToWeb(readable, writable, finish, { end }) {\r\n  if (isTransformStream(writable)) {\r\n    writable = writable.writable;\r\n  }\r\n  // https://streams.spec.whatwg.org/#example-manual-write-with-backpressure\r\n  const writer = writable.getWriter();\r\n  try {\r\n    for await (const chunk of readable) {\r\n      await writer.ready;\r\n      writer.write(chunk).catch(() => {});\r\n    }\r\n\r\n    await writer.ready;\r\n\r\n    if (end) {\r\n      await writer.close();\r\n    }\r\n\r\n    finish();\r\n  } catch (err) {\r\n    try {\r\n      await writer.abort(err);\r\n      finish(err);\r\n    } catch (err) {\r\n      finish(err);\r\n    }\r\n  }\r\n}\r\n\r\nfunction pipeline(...streams) {\r\n  return pipelineImpl(streams, once(popCallback(streams)));\r\n}\r\n\r\nfunction pipelineImpl(streams, callback, opts) {\r\n  if (streams.length === 1 && ArrayIsArray(streams[0])) {\r\n    streams = streams[0];\r\n  }\r\n\r\n  if (streams.length < 2) {\r\n    throw new ERR_MISSING_ARGS('streams');\r\n  }\r\n\r\n  const ac = new AbortController();\r\n  const signal = ac.signal;\r\n  const outerSignal = opts?.signal;\r\n\r\n  // Need to cleanup event listeners if last stream is readable\r\n  // https://github.com/nodejs/node/issues/35452\r\n  const lastStreamCleanup = [];\r\n\r\n  validateAbortSignal(outerSignal, 'options.signal');\r\n\r\n  function abort() {\r\n    finishImpl(new AbortError());\r\n  }\r\n\r\n  addAbortListener ??= require('internal/events/abort_listener').addAbortListener;\r\n  let disposable;\r\n  if (outerSignal) {\r\n    disposable = addAbortListener(outerSignal, abort);\r\n  }\r\n\r\n  let error;\r\n  let value;\r\n  const destroys = [];\r\n\r\n  let finishCount = 0;\r\n\r\n  function finish(err) {\r\n    finishImpl(err, --finishCount === 0);\r\n  }\r\n\r\n  function finishImpl(err, final) {\r\n    if (err && (!error || error.code === 'ERR_STREAM_PREMATURE_CLOSE')) {\r\n      error = err;\r\n    }\r\n\r\n    if (!error && !final) {\r\n      return;\r\n    }\r\n\r\n    while (destroys.length) {\r\n      destroys.shift()(error);\r\n    }\r\n\r\n    disposable?.[SymbolDispose]();\r\n    ac.abort();\r\n\r\n    if (final) {\r\n      if (!error) {\r\n        lastStreamCleanup.forEach((fn) => fn());\r\n      }\r\n      process.nextTick(callback, error, value);\r\n    }\r\n  }\r\n\r\n  let ret;\r\n  for (let i = 0; i < streams.length; i++) {\r\n    const stream = streams[i];\r\n    const reading = i < streams.length - 1;\r\n    const writing = i > 0;\r\n    const end = reading || opts?.end !== false;\r\n    const isLastStream = i === streams.length - 1;\r\n\r\n    if (isNodeStream(stream)) {\r\n      if (end) {\r\n        const { destroy, cleanup } = destroyer(stream, reading, writing);\r\n        destroys.push(destroy);\r\n\r\n        if (isReadable(stream) && isLastStream) {\r\n          lastStreamCleanup.push(cleanup);\r\n        }\r\n      }\r\n\r\n      // Catch stream errors that occur after pipe/pump has completed.\r\n      function onError(err) {\r\n        if (\r\n          err &&\r\n          err.name !== 'AbortError' &&\r\n          err.code !== 'ERR_STREAM_PREMATURE_CLOSE'\r\n        ) {\r\n          finish(err);\r\n        }\r\n      }\r\n      stream.on('error', onError);\r\n      if (isReadable(stream) && isLastStream) {\r\n        lastStreamCleanup.push(() => {\r\n          stream.removeListener('error', onError);\r\n        });\r\n      }\r\n    }\r\n\r\n    if (i === 0) {\r\n      if (typeof stream === 'function') {\r\n        ret = stream({ signal });\r\n        if (!isIterable(ret)) {\r\n          throw new ERR_INVALID_RETURN_VALUE(\r\n            'Iterable, AsyncIterable or Stream', 'source', ret);\r\n        }\r\n      } else if (isIterable(stream) || isReadableNodeStream(stream) || isTransformStream(stream)) {\r\n        ret = stream;\r\n      } else {\r\n        ret = Duplex.from(stream);\r\n      }\r\n    } else if (typeof stream === 'function') {\r\n      if (isTransformStream(ret)) {\r\n        ret = makeAsyncIterable(ret?.readable);\r\n      } else {\r\n        ret = makeAsyncIterable(ret);\r\n      }\r\n      ret = stream(ret, { signal });\r\n\r\n      if (reading) {\r\n        if (!isIterable(ret, true)) {\r\n          throw new ERR_INVALID_RETURN_VALUE(\r\n            'AsyncIterable', `transform[${i - 1}]`, ret);\r\n        }\r\n      } else {\r\n        if (!PassThrough) {\r\n          PassThrough = require('internal/streams/passthrough');\r\n        }\r\n\r\n        // If the last argument to pipeline is not a stream\r\n        // we must create a proxy stream so that pipeline(...)\r\n        // always returns a stream which can be further\r\n        // composed through `.pipe(stream)`.\r\n\r\n        const pt = new PassThrough({\r\n          objectMode: true,\r\n        });\r\n\r\n        // Handle Promises/A+ spec, `then` could be a getter that throws on\r\n        // second use.\r\n        const then = ret?.then;\r\n        if (typeof then === 'function') {\r\n          finishCount++;\r\n          then.call(ret,\r\n                    (val) => {\r\n                      value = val;\r\n                      if (val != null) {\r\n                        pt.write(val);\r\n                      }\r\n                      if (end) {\r\n                        pt.end();\r\n                      }\r\n                      process.nextTick(finish);\r\n                    }, (err) => {\r\n                      pt.destroy(err);\r\n                      process.nextTick(finish, err);\r\n                    },\r\n          );\r\n        } else if (isIterable(ret, true)) {\r\n          finishCount++;\r\n          pumpToNode(ret, pt, finish, { end });\r\n        } else if (isReadableStream(ret) || isTransformStream(ret)) {\r\n          const toRead = ret.readable || ret;\r\n          finishCount++;\r\n          pumpToNode(toRead, pt, finish, { end });\r\n        } else {\r\n          throw new ERR_INVALID_RETURN_VALUE(\r\n            'AsyncIterable or Promise', 'destination', ret);\r\n        }\r\n\r\n        ret = pt;\r\n\r\n        const { destroy, cleanup } = destroyer(ret, false, true);\r\n        destroys.push(destroy);\r\n        if (isLastStream) {\r\n          lastStreamCleanup.push(cleanup);\r\n        }\r\n      }\r\n    } else if (isNodeStream(stream)) {\r\n      if (isReadableNodeStream(ret)) {\r\n        finishCount += 2;\r\n        const cleanup = pipe(ret, stream, finish, { end });\r\n        if (isReadable(stream) && isLastStream) {\r\n          lastStreamCleanup.push(cleanup);\r\n        }\r\n      } else if (isTransformStream(ret) || isReadableStream(ret)) {\r\n        const toRead = ret.readable || ret;\r\n        finishCount++;\r\n        pumpToNode(toRead, stream, finish, { end });\r\n      } else if (isIterable(ret)) {\r\n        finishCount++;\r\n        pumpToNode(ret, stream, finish, { end });\r\n      } else {\r\n        throw new ERR_INVALID_ARG_TYPE(\r\n          'val', ['Readable', 'Iterable', 'AsyncIterable', 'ReadableStream', 'TransformStream'], ret);\r\n      }\r\n      ret = stream;\r\n    } else if (isWebStream(stream)) {\r\n      if (isReadableNodeStream(ret)) {\r\n        finishCount++;\r\n        pumpToWeb(makeAsyncIterable(ret), stream, finish, { end });\r\n      } else if (isReadableStream(ret) || isIterable(ret)) {\r\n        finishCount++;\r\n        pumpToWeb(ret, stream, finish, { end });\r\n      } else if (isTransformStream(ret)) {\r\n        finishCount++;\r\n        pumpToWeb(ret.readable, stream, finish, { end });\r\n      } else {\r\n        throw new ERR_INVALID_ARG_TYPE(\r\n          'val', ['Readable', 'Iterable', 'AsyncIterable', 'ReadableStream', 'TransformStream'], ret);\r\n      }\r\n      ret = stream;\r\n    } else {\r\n      ret = Duplex.from(stream);\r\n    }\r\n  }\r\n\r\n  if (signal?.aborted || outerSignal?.aborted) {\r\n    process.nextTick(abort);\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction pipe(src, dst, finish, { end }) {\r\n  let ended = false;\r\n  dst.on('close', () => {\r\n    if (!ended) {\r\n      // Finish if the destination closes before the source has completed.\r\n      finish(new ERR_STREAM_PREMATURE_CLOSE());\r\n    }\r\n  });\r\n\r\n  src.pipe(dst, { end: false }); // If end is true we already will have a listener to end dst.\r\n\r\n  if (end) {\r\n    // Compat. Before node v10.12.0 stdio used to throw an error so\r\n    // pipe() did/does not end() stdio destinations.\r\n    // Now they allow it but \"secretly\" don't close the underlying fd.\r\n\r\n    function endFn() {\r\n      ended = true;\r\n      dst.end();\r\n    }\r\n\r\n    if (isReadableFinished(src)) { // End the destination if the source has already ended.\r\n      process.nextTick(endFn);\r\n    } else {\r\n      src.once('end', endFn);\r\n    }\r\n  } else {\r\n    finish();\r\n  }\r\n\r\n  eos(src, { readable: true, writable: false }, (err) => {\r\n    const rState = src._readableState;\r\n    if (\r\n      err &&\r\n      err.code === 'ERR_STREAM_PREMATURE_CLOSE' &&\r\n      (rState && rState.ended && !rState.errored && !rState.errorEmitted)\r\n    ) {\r\n      // Some readable streams will emit 'close' before 'end'. However, since\r\n      // this is on the readable side 'end' should still be emitted if the\r\n      // stream has been ended and no error emitted. This should be allowed in\r\n      // favor of backwards compatibility. Since the stream is piped to a\r\n      // destination this should not result in any observable difference.\r\n      // We don't need to check if this is a writable premature close since\r\n      // eos will only fail with premature close on the reading side for\r\n      // duplex streams.\r\n      src\r\n        .once('end', finish)\r\n        .once('error', finish);\r\n    } else {\r\n      finish(err);\r\n    }\r\n  });\r\n  return eos(dst, { readable: false, writable: true }, finish);\r\n}\r\n\r\nmodule.exports = { pipelineImpl, pipeline };\r\n"
  },
  "88": {
    "metadata": {
      "scriptId": "88",
      "url": "node:internal/streams/destroy",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 361,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "3926d962d1c6a096c766fc9dfebfb10b100aea7e9ae16da45ac6d971ffb2782d",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 7716,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/destroy"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  AbortError,\r\n  aggregateTwoErrors,\r\n  codes: {\r\n    ERR_MULTIPLE_CALLBACK,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  kIsDestroyed,\r\n  isDestroyed,\r\n  isFinished,\r\n  isServerRequest,\r\n  kState,\r\n  kErrorEmitted,\r\n  kEmitClose,\r\n  kClosed,\r\n  kCloseEmitted,\r\n  kConstructed,\r\n  kDestroyed,\r\n  kAutoDestroy,\r\n  kErrored,\r\n} = require('internal/streams/utils');\r\n\r\nconst kDestroy = Symbol('kDestroy');\r\nconst kConstruct = Symbol('kConstruct');\r\n\r\nfunction checkError(err, w, r) {\r\n  if (err) {\r\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\r\n    err.stack; // eslint-disable-line no-unused-expressions\r\n\r\n    if (w && !w.errored) {\r\n      w.errored = err;\r\n    }\r\n    if (r && !r.errored) {\r\n      r.errored = err;\r\n    }\r\n  }\r\n}\r\n\r\n// Backwards compat. cb() is undocumented and unused in core but\r\n// unfortunately might be used by modules.\r\nfunction destroy(err, cb) {\r\n  const r = this._readableState;\r\n  const w = this._writableState;\r\n  // With duplex streams we use the writable side for state.\r\n  const s = w || r;\r\n\r\n  if (\r\n    (w && (w[kState] & kDestroyed) !== 0) ||\r\n    (r && (r[kState] & kDestroyed) !== 0)\r\n  ) {\r\n    if (typeof cb === 'function') {\r\n      cb();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  // We set destroyed to true before firing error callbacks in order\r\n  // to make it re-entrance safe in case destroy() is called within callbacks\r\n  checkError(err, w, r);\r\n\r\n  if (w) {\r\n    w[kState] |= kDestroyed;\r\n  }\r\n  if (r) {\r\n    r[kState] |= kDestroyed;\r\n  }\r\n\r\n  // If still constructing then defer calling _destroy.\r\n  if ((s[kState] & kConstructed) === 0) {\r\n    this.once(kDestroy, function(er) {\r\n      _destroy(this, aggregateTwoErrors(er, err), cb);\r\n    });\r\n  } else {\r\n    _destroy(this, err, cb);\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\nfunction _destroy(self, err, cb) {\r\n  let called = false;\r\n\r\n  function onDestroy(err) {\r\n    if (called) {\r\n      return;\r\n    }\r\n    called = true;\r\n\r\n    const r = self._readableState;\r\n    const w = self._writableState;\r\n\r\n    checkError(err, w, r);\r\n\r\n    if (w) {\r\n      w[kState] |= kClosed;\r\n    }\r\n    if (r) {\r\n      r[kState] |= kClosed;\r\n    }\r\n\r\n    if (typeof cb === 'function') {\r\n      cb(err);\r\n    }\r\n\r\n    if (err) {\r\n      process.nextTick(emitErrorCloseNT, self, err);\r\n    } else {\r\n      process.nextTick(emitCloseNT, self);\r\n    }\r\n  }\r\n  try {\r\n    self._destroy(err || null, onDestroy);\r\n  } catch (err) {\r\n    onDestroy(err);\r\n  }\r\n}\r\n\r\nfunction emitErrorCloseNT(self, err) {\r\n  emitErrorNT(self, err);\r\n  emitCloseNT(self);\r\n}\r\n\r\nfunction emitCloseNT(self) {\r\n  const r = self._readableState;\r\n  const w = self._writableState;\r\n\r\n  if (w) {\r\n    w[kState] |= kCloseEmitted;\r\n  }\r\n  if (r) {\r\n    r[kState] |= kCloseEmitted;\r\n  }\r\n\r\n  if (\r\n    (w && (w[kState] & kEmitClose) !== 0) ||\r\n    (r && (r[kState] & kEmitClose) !== 0)\r\n  ) {\r\n    self.emit('close');\r\n  }\r\n}\r\n\r\nfunction emitErrorNT(self, err) {\r\n  const r = self._readableState;\r\n  const w = self._writableState;\r\n\r\n  if (\r\n    (w && (w[kState] & kErrorEmitted) !== 0) ||\r\n    (r && (r[kState] & kErrorEmitted) !== 0)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  if (w) {\r\n    w[kState] |= kErrorEmitted;\r\n  }\r\n  if (r) {\r\n    r[kState] |= kErrorEmitted;\r\n  }\r\n\r\n  self.emit('error', err);\r\n}\r\n\r\nfunction undestroy() {\r\n  const r = this._readableState;\r\n  const w = this._writableState;\r\n\r\n  if (r) {\r\n    r.constructed = true;\r\n    r.closed = false;\r\n    r.closeEmitted = false;\r\n    r.destroyed = false;\r\n    r.errored = null;\r\n    r.errorEmitted = false;\r\n    r.reading = false;\r\n    r.ended = r.readable === false;\r\n    r.endEmitted = r.readable === false;\r\n  }\r\n\r\n  if (w) {\r\n    w.constructed = true;\r\n    w.destroyed = false;\r\n    w.closed = false;\r\n    w.closeEmitted = false;\r\n    w.errored = null;\r\n    w.errorEmitted = false;\r\n    w.finalCalled = false;\r\n    w.prefinished = false;\r\n    w.ended = w.writable === false;\r\n    w.ending = w.writable === false;\r\n    w.finished = w.writable === false;\r\n  }\r\n}\r\n\r\nfunction errorOrDestroy(stream, err, sync) {\r\n  // We have tests that rely on errors being emitted\r\n  // in the same tick, so changing this is semver major.\r\n  // For now when you opt-in to autoDestroy we allow\r\n  // the error to be emitted nextTick. In a future\r\n  // semver major update we should change the default to this.\r\n\r\n  const r = stream._readableState;\r\n  const w = stream._writableState;\r\n\r\n  if (\r\n    (w && (w[kState] ? (w[kState] & kDestroyed) !== 0 : w.destroyed)) ||\r\n    (r && (r[kState] ? (r[kState] & kDestroyed) !== 0 : r.destroyed))\r\n  ) {\r\n    return this;\r\n  }\r\n\r\n  if (\r\n    (r && (r[kState] & kAutoDestroy) !== 0) ||\r\n    (w && (w[kState] & kAutoDestroy) !== 0)\r\n  ) {\r\n    stream.destroy(err);\r\n  } else if (err) {\r\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\r\n    err.stack; // eslint-disable-line no-unused-expressions\r\n\r\n    if (w && (w[kState] & kErrored) === 0) {\r\n      w.errored = err;\r\n    }\r\n    if (r && (r[kState] & kErrored) === 0) {\r\n      r.errored = err;\r\n    }\r\n    if (sync) {\r\n      process.nextTick(emitErrorNT, stream, err);\r\n    } else {\r\n      emitErrorNT(stream, err);\r\n    }\r\n  }\r\n}\r\n\r\nfunction construct(stream, cb) {\r\n  if (typeof stream._construct !== 'function') {\r\n    return;\r\n  }\r\n\r\n  const r = stream._readableState;\r\n  const w = stream._writableState;\r\n\r\n  if (r) {\r\n    r[kState] &= ~kConstructed;\r\n  }\r\n  if (w) {\r\n    w[kState] &= ~kConstructed;\r\n  }\r\n\r\n  stream.once(kConstruct, cb);\r\n\r\n  if (stream.listenerCount(kConstruct) > 1) {\r\n    // Duplex\r\n    return;\r\n  }\r\n\r\n  process.nextTick(constructNT, stream);\r\n}\r\n\r\nfunction constructNT(stream) {\r\n  let called = false;\r\n\r\n  function onConstruct(err) {\r\n    if (called) {\r\n      errorOrDestroy(stream, err ?? new ERR_MULTIPLE_CALLBACK());\r\n      return;\r\n    }\r\n    called = true;\r\n\r\n    const r = stream._readableState;\r\n    const w = stream._writableState;\r\n    const s = w || r;\r\n\r\n    if (r) {\r\n      r[kState] |= kConstructed;\r\n    }\r\n    if (w) {\r\n      w[kState] |= kConstructed;\r\n    }\r\n\r\n    if (s.destroyed) {\r\n      stream.emit(kDestroy, err);\r\n    } else if (err) {\r\n      errorOrDestroy(stream, err, true);\r\n    } else {\r\n      stream.emit(kConstruct);\r\n    }\r\n  }\r\n\r\n  try {\r\n    stream._construct((err) => {\r\n      process.nextTick(onConstruct, err);\r\n    });\r\n  } catch (err) {\r\n    process.nextTick(onConstruct, err);\r\n  }\r\n}\r\n\r\nfunction isRequest(stream) {\r\n  return stream?.setHeader && typeof stream.abort === 'function';\r\n}\r\n\r\nfunction emitCloseLegacy(stream) {\r\n  stream.emit('close');\r\n}\r\n\r\nfunction emitErrorCloseLegacy(stream, err) {\r\n  stream.emit('error', err);\r\n  process.nextTick(emitCloseLegacy, stream);\r\n}\r\n\r\n// Normalize destroy for legacy.\r\nfunction destroyer(stream, err) {\r\n  if (!stream || isDestroyed(stream)) {\r\n    return;\r\n  }\r\n\r\n  if (!err && !isFinished(stream)) {\r\n    err = new AbortError();\r\n  }\r\n\r\n  // TODO: Remove isRequest branches.\r\n  if (isServerRequest(stream)) {\r\n    stream.socket = null;\r\n    stream.destroy(err);\r\n  } else if (isRequest(stream)) {\r\n    stream.abort();\r\n  } else if (isRequest(stream.req)) {\r\n    stream.req.abort();\r\n  } else if (typeof stream.destroy === 'function') {\r\n    stream.destroy(err);\r\n  } else if (typeof stream.close === 'function') {\r\n    // TODO: Don't lose err?\r\n    stream.close();\r\n  } else if (err) {\r\n    process.nextTick(emitErrorCloseLegacy, stream, err);\r\n  } else {\r\n    process.nextTick(emitCloseLegacy, stream);\r\n  }\r\n\r\n  if (!stream.destroyed) {\r\n    stream[kIsDestroyed] = true;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  construct,\r\n  destroyer,\r\n  destroy,\r\n  undestroy,\r\n  errorOrDestroy,\r\n};\r\n"
  },
  "89": {
    "metadata": {
      "scriptId": "89",
      "url": "node:internal/streams/duplex",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 206,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "0d543591f3cc1fb5905e66f3688baf2e612af55964152982ceaca7ca6a9b3958",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 6794,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/duplex"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// a duplex stream is just a stream that is both readable and writable.\r\n// Since JS doesn't have multiple prototype inheritance, this class\r\n// prototypically inherits from Readable, and then parasitically from\r\n// Writable.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperties,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ObjectKeys,\r\n  ObjectSetPrototypeOf,\r\n} = primordials;\r\n\r\nmodule.exports = Duplex;\r\n\r\nconst Stream = require('internal/streams/legacy').Stream;\r\nconst Readable = require('internal/streams/readable');\r\nconst Writable = require('internal/streams/writable');\r\n\r\nconst {\r\n  addAbortSignal,\r\n} = require('internal/streams/add-abort-signal');\r\n\r\nconst destroyImpl = require('internal/streams/destroy');\r\nconst { kOnConstructed } = require('internal/streams/utils');\r\n\r\nObjectSetPrototypeOf(Duplex.prototype, Readable.prototype);\r\nObjectSetPrototypeOf(Duplex, Readable);\r\n\r\n{\r\n  const keys = ObjectKeys(Writable.prototype);\r\n  // Allow the keys array to be GC'ed.\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const method = keys[i];\r\n    if (!Duplex.prototype[method])\r\n      Duplex.prototype[method] = Writable.prototype[method];\r\n  }\r\n}\r\n\r\n// Use the `destroy` method of `Writable`.\r\nDuplex.prototype.destroy = Writable.prototype.destroy;\r\n\r\nfunction Duplex(options) {\r\n  if (!(this instanceof Duplex))\r\n    return new Duplex(options);\r\n\r\n  this._events ??= {\r\n    close: undefined,\r\n    error: undefined,\r\n    prefinish: undefined,\r\n    finish: undefined,\r\n    drain: undefined,\r\n    data: undefined,\r\n    end: undefined,\r\n    readable: undefined,\r\n    // Skip uncommon events...\r\n    // pause: undefined,\r\n    // resume: undefined,\r\n    // pipe: undefined,\r\n    // unpipe: undefined,\r\n    // [destroyImpl.kConstruct]: undefined,\r\n    // [destroyImpl.kDestroy]: undefined,\r\n  };\r\n\r\n  this._readableState = new Readable.ReadableState(options, this, true);\r\n  this._writableState = new Writable.WritableState(options, this, true);\r\n\r\n  if (options) {\r\n    this.allowHalfOpen = options.allowHalfOpen !== false;\r\n\r\n    if (options.readable === false) {\r\n      this._readableState.readable = false;\r\n      this._readableState.ended = true;\r\n      this._readableState.endEmitted = true;\r\n    }\r\n\r\n    if (options.writable === false) {\r\n      this._writableState.writable = false;\r\n      this._writableState.ending = true;\r\n      this._writableState.ended = true;\r\n      this._writableState.finished = true;\r\n    }\r\n\r\n    if (typeof options.read === 'function')\r\n      this._read = options.read;\r\n\r\n    if (typeof options.write === 'function')\r\n      this._write = options.write;\r\n\r\n    if (typeof options.writev === 'function')\r\n      this._writev = options.writev;\r\n\r\n    if (typeof options.destroy === 'function')\r\n      this._destroy = options.destroy;\r\n\r\n    if (typeof options.final === 'function')\r\n      this._final = options.final;\r\n\r\n    if (typeof options.construct === 'function')\r\n      this._construct = options.construct;\r\n\r\n    if (options.signal)\r\n      addAbortSignal(options.signal, this);\r\n  } else {\r\n    this.allowHalfOpen = true;\r\n  }\r\n\r\n  Stream.call(this, options);\r\n\r\n  if (this._construct != null) {\r\n    destroyImpl.construct(this, () => {\r\n      this._readableState[kOnConstructed](this);\r\n      this._writableState[kOnConstructed](this);\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(Duplex.prototype, {\r\n  writable:\r\n    { __proto__: null, ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writable') },\r\n  writableHighWaterMark:\r\n    { __proto__: null, ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableHighWaterMark') },\r\n  writableObjectMode:\r\n    { __proto__: null, ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableObjectMode') },\r\n  writableBuffer:\r\n    { __proto__: null, ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableBuffer') },\r\n  writableLength:\r\n    { __proto__: null, ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableLength') },\r\n  writableFinished:\r\n    { __proto__: null, ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableFinished') },\r\n  writableCorked:\r\n    { __proto__: null, ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableCorked') },\r\n  writableEnded:\r\n    { __proto__: null, ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableEnded') },\r\n  writableNeedDrain:\r\n    { __proto__: null, ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableNeedDrain') },\r\n\r\n  destroyed: {\r\n    __proto__: null,\r\n    get() {\r\n      if (this._readableState === undefined ||\r\n        this._writableState === undefined) {\r\n        return false;\r\n      }\r\n      return this._readableState.destroyed && this._writableState.destroyed;\r\n    },\r\n    set(value) {\r\n      // Backward compatibility, the user is explicitly\r\n      // managing destroyed.\r\n      if (this._readableState && this._writableState) {\r\n        this._readableState.destroyed = value;\r\n        this._writableState.destroyed = value;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nlet webStreamsAdapters;\r\n\r\n// Lazy to avoid circular references\r\nfunction lazyWebStreams() {\r\n  if (webStreamsAdapters === undefined)\r\n    webStreamsAdapters = require('internal/webstreams/adapters');\r\n  return webStreamsAdapters;\r\n}\r\n\r\nDuplex.fromWeb = function(pair, options) {\r\n  return lazyWebStreams().newStreamDuplexFromReadableWritablePair(\r\n    pair,\r\n    options);\r\n};\r\n\r\nDuplex.toWeb = function(duplex) {\r\n  return lazyWebStreams().newReadableWritablePairFromDuplex(duplex);\r\n};\r\n\r\nlet duplexify;\r\n\r\nDuplex.from = function(body) {\r\n  if (!duplexify) {\r\n    duplexify = require('internal/streams/duplexify');\r\n  }\r\n  return duplexify(body, 'body');\r\n};\r\n"
  },
  "90": {
    "metadata": {
      "scriptId": "90",
      "url": "node:internal/streams/legacy",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 125,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "8ec1feac0dd0c94b24f2c4f73f28d0d44ec9113d2dd50e1dac5955dddfdd4d9d",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3376,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/legacy"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ObjectSetPrototypeOf,\r\n  ReflectOwnKeys,\r\n} = primordials;\r\n\r\nconst EE = require('events');\r\n\r\nfunction Stream(opts) {\r\n  EE.call(this, opts);\r\n}\r\nObjectSetPrototypeOf(Stream.prototype, EE.prototype);\r\nObjectSetPrototypeOf(Stream, EE);\r\n\r\nStream.prototype.pipe = function(dest, options) {\r\n  const source = this;\r\n\r\n  function ondata(chunk) {\r\n    if (dest.writable && dest.write(chunk) === false && source.pause) {\r\n      source.pause();\r\n    }\r\n  }\r\n\r\n  source.on('data', ondata);\r\n\r\n  function ondrain() {\r\n    if (source.readable && source.resume) {\r\n      source.resume();\r\n    }\r\n  }\r\n\r\n  dest.on('drain', ondrain);\r\n\r\n  // If the 'end' option is not supplied, dest.end() will be called when\r\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\r\n  if (!dest._isStdio && (!options || options.end !== false)) {\r\n    source.on('end', onend);\r\n    source.on('close', onclose);\r\n  }\r\n\r\n  let didOnEnd = false;\r\n  function onend() {\r\n    if (didOnEnd) return;\r\n    didOnEnd = true;\r\n\r\n    dest.end();\r\n  }\r\n\r\n\r\n  function onclose() {\r\n    if (didOnEnd) return;\r\n    didOnEnd = true;\r\n\r\n    if (typeof dest.destroy === 'function') dest.destroy();\r\n  }\r\n\r\n  // Don't leave dangling pipes when there are errors.\r\n  function onerror(er) {\r\n    cleanup();\r\n    if (EE.listenerCount(this, 'error') === 0) {\r\n      this.emit('error', er);\r\n    }\r\n  }\r\n\r\n  prependListener(source, 'error', onerror);\r\n  prependListener(dest, 'error', onerror);\r\n\r\n  // Remove all the event listeners that were added.\r\n  function cleanup() {\r\n    source.removeListener('data', ondata);\r\n    dest.removeListener('drain', ondrain);\r\n\r\n    source.removeListener('end', onend);\r\n    source.removeListener('close', onclose);\r\n\r\n    source.removeListener('error', onerror);\r\n    dest.removeListener('error', onerror);\r\n\r\n    source.removeListener('end', cleanup);\r\n    source.removeListener('close', cleanup);\r\n\r\n    dest.removeListener('close', cleanup);\r\n  }\r\n\r\n  source.on('end', cleanup);\r\n  source.on('close', cleanup);\r\n\r\n  dest.on('close', cleanup);\r\n  dest.emit('pipe', source);\r\n\r\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\r\n  return dest;\r\n};\r\n\r\nStream.prototype.eventNames = function eventNames() {\r\n  const names = [];\r\n  for (const key of ReflectOwnKeys(this._events)) {\r\n    if (typeof this._events[key] === 'function' || (ArrayIsArray(this._events[key]) && this._events[key].length > 0)) {\r\n      names.push(key);\r\n    }\r\n  }\r\n  return names;\r\n};\r\n\r\nfunction prependListener(emitter, event, fn) {\r\n  // Sadly this is not cacheable as some libraries bundle their own\r\n  // event emitter implementation with them.\r\n  if (typeof emitter.prependListener === 'function')\r\n    return emitter.prependListener(event, fn);\r\n\r\n  // This is a hack to make sure that our error handler is attached before any\r\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\r\n  // to continue to work with older versions of Node.js that do not include\r\n  // the prependListener() method. The goal is to eventually remove this hack.\r\n  if (!emitter._events || !emitter._events[event])\r\n    emitter.on(event, fn);\r\n  else if (ArrayIsArray(emitter._events[event]))\r\n    emitter._events[event].unshift(fn);\r\n  else\r\n    emitter._events[event] = [fn, emitter._events[event]];\r\n}\r\n\r\nmodule.exports = { Stream, prependListener };\r\n"
  },
  "91": {
    "metadata": {
      "scriptId": "91",
      "url": "node:internal/streams/readable",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1760,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "7d1a41a0bc21bc140fc09524f207ace71f814ad4255187f10946dbdd768629fd",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 53085,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/readable"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeIndexOf,\r\n  NumberIsInteger,\r\n  NumberIsNaN,\r\n  NumberParseInt,\r\n  ObjectDefineProperties,\r\n  ObjectKeys,\r\n  ObjectSetPrototypeOf,\r\n  Promise,\r\n  SafeSet,\r\n  Symbol,\r\n  SymbolAsyncDispose,\r\n  SymbolAsyncIterator,\r\n  SymbolSpecies,\r\n  TypedArrayPrototypeSet,\r\n} = primordials;\r\n\r\nmodule.exports = Readable;\r\nReadable.ReadableState = ReadableState;\r\n\r\nconst EE = require('events');\r\nconst { Stream, prependListener } = require('internal/streams/legacy');\r\nconst { Buffer } = require('buffer');\r\n\r\nconst {\r\n  addAbortSignal,\r\n} = require('internal/streams/add-abort-signal');\r\nconst eos = require('internal/streams/end-of-stream');\r\n\r\nlet debug = require('internal/util/debuglog').debuglog('stream', (fn) => {\r\n  debug = fn;\r\n});\r\nconst destroyImpl = require('internal/streams/destroy');\r\nconst {\r\n  getHighWaterMark,\r\n  getDefaultHighWaterMark,\r\n} = require('internal/streams/state');\r\nconst {\r\n  kState,\r\n  // bitfields\r\n  kObjectMode,\r\n  kErrorEmitted,\r\n  kAutoDestroy,\r\n  kEmitClose,\r\n  kDestroyed,\r\n  kClosed,\r\n  kCloseEmitted,\r\n  kErrored,\r\n  kConstructed,\r\n  kOnConstructed,\r\n} = require('internal/streams/utils');\r\n\r\nconst {\r\n  AbortError,\r\n  aggregateTwoErrors,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_METHOD_NOT_IMPLEMENTED,\r\n    ERR_OUT_OF_RANGE,\r\n    ERR_STREAM_PUSH_AFTER_EOF,\r\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT,\r\n    ERR_UNKNOWN_ENCODING,\r\n  },\r\n} = require('internal/errors');\r\nconst { validateObject } = require('internal/validators');\r\n\r\nconst FastBuffer = Buffer[SymbolSpecies];\r\n\r\nconst { StringDecoder } = require('string_decoder');\r\nconst from = require('internal/streams/from');\r\n\r\nObjectSetPrototypeOf(Readable.prototype, Stream.prototype);\r\nObjectSetPrototypeOf(Readable, Stream);\r\nconst nop = () => {};\r\n\r\nconst { errorOrDestroy } = destroyImpl;\r\n\r\nconst kErroredValue = Symbol('kErroredValue');\r\nconst kDefaultEncodingValue = Symbol('kDefaultEncodingValue');\r\nconst kDecoderValue = Symbol('kDecoderValue');\r\nconst kEncodingValue = Symbol('kEncodingValue');\r\n\r\nconst kEnded = 1 << 9;\r\nconst kEndEmitted = 1 << 10;\r\nconst kReading = 1 << 11;\r\nconst kSync = 1 << 12;\r\nconst kNeedReadable = 1 << 13;\r\nconst kEmittedReadable = 1 << 14;\r\nconst kReadableListening = 1 << 15;\r\nconst kResumeScheduled = 1 << 16;\r\nconst kMultiAwaitDrain = 1 << 17;\r\nconst kReadingMore = 1 << 18;\r\nconst kDataEmitted = 1 << 19;\r\nconst kDefaultUTF8Encoding = 1 << 20;\r\nconst kDecoder = 1 << 21;\r\nconst kEncoding = 1 << 22;\r\nconst kHasFlowing = 1 << 23;\r\nconst kFlowing = 1 << 24;\r\nconst kHasPaused = 1 << 25;\r\nconst kPaused = 1 << 26;\r\nconst kDataListening = 1 << 27;\r\n\r\n// TODO(benjamingr) it is likely slower to do it this way than with free functions\r\nfunction makeBitMapDescriptor(bit) {\r\n  return {\r\n    enumerable: false,\r\n    get() { return (this[kState] & bit) !== 0; },\r\n    set(value) {\r\n      if (value) this[kState] |= bit;\r\n      else this[kState] &= ~bit;\r\n    },\r\n  };\r\n}\r\nObjectDefineProperties(ReadableState.prototype, {\r\n  objectMode: makeBitMapDescriptor(kObjectMode),\r\n  ended: makeBitMapDescriptor(kEnded),\r\n  endEmitted: makeBitMapDescriptor(kEndEmitted),\r\n  reading: makeBitMapDescriptor(kReading),\r\n  // Stream is still being constructed and cannot be\r\n  // destroyed until construction finished or failed.\r\n  // Async construction is opt in, therefore we start as\r\n  // constructed.\r\n  constructed: makeBitMapDescriptor(kConstructed),\r\n  // A flag to be able to tell if the event 'readable'/'data' is emitted\r\n  // immediately, or on a later tick.  We set this to true at first, because\r\n  // any actions that shouldn't happen until \"later\" should generally also\r\n  // not happen before the first read call.\r\n  sync: makeBitMapDescriptor(kSync),\r\n  // Whenever we return null, then we set a flag to say\r\n  // that we're awaiting a 'readable' event emission.\r\n  needReadable: makeBitMapDescriptor(kNeedReadable),\r\n  emittedReadable: makeBitMapDescriptor(kEmittedReadable),\r\n  readableListening: makeBitMapDescriptor(kReadableListening),\r\n  resumeScheduled: makeBitMapDescriptor(kResumeScheduled),\r\n  // True if the error was already emitted and should not be thrown again.\r\n  errorEmitted: makeBitMapDescriptor(kErrorEmitted),\r\n  emitClose: makeBitMapDescriptor(kEmitClose),\r\n  autoDestroy: makeBitMapDescriptor(kAutoDestroy),\r\n  // Has it been destroyed.\r\n  destroyed: makeBitMapDescriptor(kDestroyed),\r\n  // Indicates whether the stream has finished destroying.\r\n  closed: makeBitMapDescriptor(kClosed),\r\n  // True if close has been emitted or would have been emitted\r\n  // depending on emitClose.\r\n  closeEmitted: makeBitMapDescriptor(kCloseEmitted),\r\n  multiAwaitDrain: makeBitMapDescriptor(kMultiAwaitDrain),\r\n  // If true, a maybeReadMore has been scheduled.\r\n  readingMore: makeBitMapDescriptor(kReadingMore),\r\n  dataEmitted: makeBitMapDescriptor(kDataEmitted),\r\n\r\n  // Indicates whether the stream has errored. When true no further\r\n  // _read calls, 'data' or 'readable' events should occur. This is needed\r\n  // since when autoDestroy is disabled we need a way to tell whether the\r\n  // stream has failed.\r\n  errored: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() {\r\n      return (this[kState] & kErrored) !== 0 ? this[kErroredValue] : null;\r\n    },\r\n    set(value) {\r\n      if (value) {\r\n        this[kErroredValue] = value;\r\n        this[kState] |= kErrored;\r\n      } else {\r\n        this[kState] &= ~kErrored;\r\n      }\r\n    },\r\n  },\r\n\r\n  defaultEncoding: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() { return (this[kState] & kDefaultUTF8Encoding) !== 0 ? 'utf8' : this[kDefaultEncodingValue]; },\r\n    set(value) {\r\n      if (value === 'utf8' || value === 'utf-8') {\r\n        this[kState] |= kDefaultUTF8Encoding;\r\n      } else {\r\n        this[kState] &= ~kDefaultUTF8Encoding;\r\n        this[kDefaultEncodingValue] = value;\r\n      }\r\n    },\r\n  },\r\n\r\n  decoder: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() {\r\n      return (this[kState] & kDecoder) !== 0 ? this[kDecoderValue] : null;\r\n    },\r\n    set(value) {\r\n      if (value) {\r\n        this[kDecoderValue] = value;\r\n        this[kState] |= kDecoder;\r\n      } else {\r\n        this[kState] &= ~kDecoder;\r\n      }\r\n    },\r\n  },\r\n\r\n  encoding: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() {\r\n      return (this[kState] & kEncoding) !== 0 ? this[kEncodingValue] : null;\r\n    },\r\n    set(value) {\r\n      if (value) {\r\n        this[kEncodingValue] = value;\r\n        this[kState] |= kEncoding;\r\n      } else {\r\n        this[kState] &= ~kEncoding;\r\n      }\r\n    },\r\n  },\r\n\r\n  flowing: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() {\r\n      return (this[kState] & kHasFlowing) !== 0 ? (this[kState] & kFlowing) !== 0 : null;\r\n    },\r\n    set(value) {\r\n      if (value == null) {\r\n        this[kState] &= ~(kHasFlowing | kFlowing);\r\n      } else if (value) {\r\n        this[kState] |= (kHasFlowing | kFlowing);\r\n      } else {\r\n        this[kState] |= kHasFlowing;\r\n        this[kState] &= ~kFlowing;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\n\r\nfunction ReadableState(options, stream, isDuplex) {\r\n  // Bit map field to store ReadableState more effciently with 1 bit per field\r\n  // instead of a V8 slot per field.\r\n  this[kState] = kEmitClose | kAutoDestroy | kConstructed | kSync;\r\n\r\n  // Object stream flag. Used to make read(n) ignore n and to\r\n  // make all the buffer merging and length checks go away.\r\n  if (options && options.objectMode)\r\n    this[kState] |= kObjectMode;\r\n\r\n  if (isDuplex && options && options.readableObjectMode)\r\n    this[kState] |= kObjectMode;\r\n\r\n  // The point at which it stops calling _read() to fill the buffer\r\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\r\n  this.highWaterMark = options ?\r\n    getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex) :\r\n    getDefaultHighWaterMark(false);\r\n\r\n  this.buffer = [];\r\n  this.bufferIndex = 0;\r\n  this.length = 0;\r\n  this.pipes = [];\r\n\r\n  // Should close be emitted on destroy. Defaults to true.\r\n  if (options && options.emitClose === false) this[kState] &= ~kEmitClose;\r\n\r\n  // Should .destroy() be called after 'end' (and potentially 'finish').\r\n  if (options && options.autoDestroy === false) this[kState] &= ~kAutoDestroy;\r\n\r\n  // Crypto is kind of old and crusty.  Historically, its default string\r\n  // encoding is 'binary' so we have to make this configurable.\r\n  // Everything else in the universe uses 'utf8', though.\r\n  const defaultEncoding = options?.defaultEncoding;\r\n  if (defaultEncoding == null || defaultEncoding === 'utf8' || defaultEncoding === 'utf-8') {\r\n    this[kState] |= kDefaultUTF8Encoding;\r\n  } else if (Buffer.isEncoding(defaultEncoding)) {\r\n    this.defaultEncoding = defaultEncoding;\r\n  } else {\r\n    throw new ERR_UNKNOWN_ENCODING(defaultEncoding);\r\n  }\r\n\r\n  // Ref the piped dest which we need a drain event on it\r\n  // type: null | Writable | Set<Writable>.\r\n  this.awaitDrainWriters = null;\r\n\r\n  if (options && options.encoding) {\r\n    this.decoder = new StringDecoder(options.encoding);\r\n    this.encoding = options.encoding;\r\n  }\r\n}\r\n\r\nReadableState.prototype[kOnConstructed] = function onConstructed(stream) {\r\n  if ((this[kState] & kNeedReadable) !== 0) {\r\n    maybeReadMore(stream, this);\r\n  }\r\n};\r\n\r\nfunction Readable(options) {\r\n  if (!(this instanceof Readable))\r\n    return new Readable(options);\r\n\r\n  this._events ??= {\r\n    close: undefined,\r\n    error: undefined,\r\n    data: undefined,\r\n    end: undefined,\r\n    readable: undefined,\r\n    // Skip uncommon events...\r\n    // pause: undefined,\r\n    // resume: undefined,\r\n    // pipe: undefined,\r\n    // unpipe: undefined,\r\n    // [destroyImpl.kConstruct]: undefined,\r\n    // [destroyImpl.kDestroy]: undefined,\r\n  };\r\n\r\n  this._readableState = new ReadableState(options, this, false);\r\n\r\n  if (options) {\r\n    if (typeof options.read === 'function')\r\n      this._read = options.read;\r\n\r\n    if (typeof options.destroy === 'function')\r\n      this._destroy = options.destroy;\r\n\r\n    if (typeof options.construct === 'function')\r\n      this._construct = options.construct;\r\n\r\n    if (options.signal)\r\n      addAbortSignal(options.signal, this);\r\n  }\r\n\r\n  Stream.call(this, options);\r\n\r\n  if (this._construct != null) {\r\n    destroyImpl.construct(this, () => {\r\n      this._readableState[kOnConstructed](this);\r\n    });\r\n  }\r\n}\r\n\r\nReadable.prototype.destroy = destroyImpl.destroy;\r\nReadable.prototype._undestroy = destroyImpl.undestroy;\r\nReadable.prototype._destroy = function(err, cb) {\r\n  cb(err);\r\n};\r\n\r\nReadable.prototype[EE.captureRejectionSymbol] = function(err) {\r\n  this.destroy(err);\r\n};\r\n\r\nReadable.prototype[SymbolAsyncDispose] = function() {\r\n  let error;\r\n  if (!this.destroyed) {\r\n    error = this.readableEnded ? null : new AbortError();\r\n    this.destroy(error);\r\n  }\r\n  return new Promise((resolve, reject) => eos(this, (err) => (err && err !== error ? reject(err) : resolve(null))));\r\n};\r\n\r\n// Manually shove something into the read() buffer.\r\n// This returns true if the highWaterMark has not been hit yet,\r\n// similar to how Writable.write() returns true if you should\r\n// write() some more.\r\nReadable.prototype.push = function(chunk, encoding) {\r\n  debug('push', chunk);\r\n\r\n  const state = this._readableState;\r\n  return (state[kState] & kObjectMode) === 0 ?\r\n    readableAddChunkPushByteMode(this, state, chunk, encoding) :\r\n    readableAddChunkPushObjectMode(this, state, chunk, encoding);\r\n};\r\n\r\n// Unshift should *always* be something directly out of read().\r\nReadable.prototype.unshift = function(chunk, encoding) {\r\n  debug('unshift', chunk);\r\n  const state = this._readableState;\r\n  return (state[kState] & kObjectMode) === 0 ?\r\n    readableAddChunkUnshiftByteMode(this, state, chunk, encoding) :\r\n    readableAddChunkUnshiftObjectMode(this, state, chunk);\r\n};\r\n\r\n\r\nfunction readableAddChunkUnshiftByteMode(stream, state, chunk, encoding) {\r\n  if (chunk === null) {\r\n    state[kState] &= ~kReading;\r\n    onEofChunk(stream, state);\r\n\r\n    return false;\r\n  }\r\n\r\n  if (typeof chunk === 'string') {\r\n    encoding = encoding || state.defaultEncoding;\r\n    if (state.encoding !== encoding) {\r\n      if (state.encoding) {\r\n        // When unshifting, if state.encoding is set, we have to save\r\n        // the string in the BufferList with the state encoding.\r\n        chunk = Buffer.from(chunk, encoding).toString(state.encoding);\r\n      } else {\r\n        chunk = Buffer.from(chunk, encoding);\r\n      }\r\n    }\r\n  } else if (Stream._isArrayBufferView(chunk)) {\r\n    chunk = Stream._uint8ArrayToBuffer(chunk);\r\n  } else if (chunk !== undefined && !(chunk instanceof Buffer)) {\r\n    errorOrDestroy(stream, new ERR_INVALID_ARG_TYPE(\r\n      'chunk', ['string', 'Buffer', 'TypedArray', 'DataView'], chunk));\r\n    return false;\r\n  }\r\n\r\n\r\n  if (!(chunk && chunk.length > 0)) {\r\n    return canPushMore(state);\r\n  }\r\n\r\n  return readableAddChunkUnshiftValue(stream, state, chunk);\r\n}\r\n\r\nfunction readableAddChunkUnshiftObjectMode(stream, state, chunk) {\r\n  if (chunk === null) {\r\n    state[kState] &= ~kReading;\r\n    onEofChunk(stream, state);\r\n\r\n    return false;\r\n  }\r\n\r\n  return readableAddChunkUnshiftValue(stream, state, chunk);\r\n}\r\n\r\nfunction readableAddChunkUnshiftValue(stream, state, chunk) {\r\n  if ((state[kState] & kEndEmitted) !== 0)\r\n    errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\r\n  else if ((state[kState] & (kDestroyed | kErrored)) !== 0)\r\n    return false;\r\n  else\r\n    addChunk(stream, state, chunk, true);\r\n\r\n  return canPushMore(state);\r\n}\r\n\r\nfunction readableAddChunkPushByteMode(stream, state, chunk, encoding) {\r\n  if (chunk === null) {\r\n    state[kState] &= ~kReading;\r\n    onEofChunk(stream, state);\r\n    return false;\r\n  }\r\n\r\n  if (typeof chunk === 'string') {\r\n    encoding = encoding || state.defaultEncoding;\r\n    if (state.encoding !== encoding) {\r\n      chunk = Buffer.from(chunk, encoding);\r\n      encoding = '';\r\n    }\r\n  } else if (chunk instanceof Buffer) {\r\n    encoding = '';\r\n  } else if (Stream._isArrayBufferView(chunk)) {\r\n    chunk = Stream._uint8ArrayToBuffer(chunk);\r\n    encoding = '';\r\n  } else if (chunk !== undefined) {\r\n    errorOrDestroy(stream, new ERR_INVALID_ARG_TYPE(\r\n      'chunk', ['string', 'Buffer', 'TypedArray', 'DataView'], chunk));\r\n    return false;\r\n  }\r\n\r\n  if (!chunk || chunk.length <= 0) {\r\n    state[kState] &= ~kReading;\r\n    maybeReadMore(stream, state);\r\n\r\n    return canPushMore(state);\r\n  }\r\n\r\n  if ((state[kState] & kEnded) !== 0) {\r\n    errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\r\n    return false;\r\n  }\r\n\r\n  if ((state[kState] & (kDestroyed | kErrored)) !== 0) {\r\n    return false;\r\n  }\r\n\r\n  state[kState] &= ~kReading;\r\n  if ((state[kState] & kDecoder) !== 0 && !encoding) {\r\n    chunk = state[kDecoderValue].write(chunk);\r\n    if (chunk.length === 0) {\r\n      maybeReadMore(stream, state);\r\n      return canPushMore(state);\r\n    }\r\n  }\r\n\r\n  addChunk(stream, state, chunk, false);\r\n  return canPushMore(state);\r\n}\r\n\r\nfunction readableAddChunkPushObjectMode(stream, state, chunk, encoding) {\r\n  if (chunk === null) {\r\n    state[kState] &= ~kReading;\r\n    onEofChunk(stream, state);\r\n    return false;\r\n  }\r\n\r\n  if ((state[kState] & kEnded) !== 0) {\r\n    errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\r\n    return false;\r\n  }\r\n\r\n  if ((state[kState] & (kDestroyed | kErrored)) !== 0) {\r\n    return false;\r\n  }\r\n\r\n  state[kState] &= ~kReading;\r\n\r\n  if ((state[kState] & kDecoder) !== 0 && !encoding) {\r\n    chunk = state[kDecoderValue].write(chunk);\r\n  }\r\n\r\n  addChunk(stream, state, chunk, false);\r\n  return canPushMore(state);\r\n}\r\n\r\nfunction canPushMore(state) {\r\n  // We can push more data if we are below the highWaterMark.\r\n  // Also, if we have no data yet, we can stand some more bytes.\r\n  // This is to work around cases where hwm=0, such as the repl.\r\n  return (state[kState] & kEnded) === 0 &&\r\n    (state.length < state.highWaterMark || state.length === 0);\r\n}\r\n\r\nfunction addChunk(stream, state, chunk, addToFront) {\r\n  if ((state[kState] & (kFlowing | kSync | kDataListening)) === (kFlowing | kDataListening) && state.length === 0) {\r\n    // Use the guard to avoid creating `Set()` repeatedly\r\n    // when we have multiple pipes.\r\n    if ((state[kState] & kMultiAwaitDrain) !== 0) {\r\n      state.awaitDrainWriters.clear();\r\n    } else {\r\n      state.awaitDrainWriters = null;\r\n    }\r\n\r\n    state[kState] |= kDataEmitted;\r\n    stream.emit('data', chunk);\r\n  } else {\r\n    // Update the buffer info.\r\n    state.length += (state[kState] & kObjectMode) !== 0 ? 1 : chunk.length;\r\n    if (addToFront) {\r\n      if (state.bufferIndex > 0) {\r\n        state.buffer[--state.bufferIndex] = chunk;\r\n      } else {\r\n        state.buffer.unshift(chunk); // Slow path\r\n      }\r\n    } else {\r\n      state.buffer.push(chunk);\r\n    }\r\n\r\n    if ((state[kState] & kNeedReadable) !== 0)\r\n      emitReadable(stream);\r\n  }\r\n  maybeReadMore(stream, state);\r\n}\r\n\r\nReadable.prototype.isPaused = function() {\r\n  const state = this._readableState;\r\n  return (state[kState] & kPaused) !== 0 || (state[kState] & (kHasFlowing | kFlowing)) === kHasFlowing;\r\n};\r\n\r\n// Backwards compatibility.\r\nReadable.prototype.setEncoding = function(enc) {\r\n  const state = this._readableState;\r\n\r\n  const decoder = new StringDecoder(enc);\r\n  state.decoder = decoder;\r\n  // If setEncoding(null), decoder.encoding equals utf8.\r\n  state.encoding = state.decoder.encoding;\r\n\r\n  // Iterate over current buffer to convert already stored Buffers:\r\n  let content = '';\r\n  for (const data of state.buffer.slice(state.bufferIndex)) {\r\n    content += decoder.write(data);\r\n  }\r\n  state.buffer.length = 0;\r\n  state.bufferIndex = 0;\r\n\r\n  if (content !== '')\r\n    state.buffer.push(content);\r\n  state.length = content.length;\r\n  return this;\r\n};\r\n\r\n// Don't raise the hwm > 1GB.\r\nconst MAX_HWM = 0x40000000;\r\nfunction computeNewHighWaterMark(n) {\r\n  if (n > MAX_HWM) {\r\n    throw new ERR_OUT_OF_RANGE('size', '<= 1GiB', n);\r\n  } else {\r\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\r\n    // tiny amounts.\r\n    n--;\r\n    n |= n >>> 1;\r\n    n |= n >>> 2;\r\n    n |= n >>> 4;\r\n    n |= n >>> 8;\r\n    n |= n >>> 16;\r\n    n++;\r\n  }\r\n  return n;\r\n}\r\n\r\n// This function is designed to be inlinable, so please take care when making\r\n// changes to the function body.\r\nfunction howMuchToRead(n, state) {\r\n  if (n <= 0 || (state.length === 0 && (state[kState] & kEnded) !== 0))\r\n    return 0;\r\n  if ((state[kState] & kObjectMode) !== 0)\r\n    return 1;\r\n  if (NumberIsNaN(n)) {\r\n    // Only flow one buffer at a time.\r\n    if ((state[kState] & kFlowing) !== 0 && state.length)\r\n      return state.buffer[state.bufferIndex].length;\r\n    return state.length;\r\n  }\r\n  if (n <= state.length)\r\n    return n;\r\n  return (state[kState] & kEnded) !== 0 ? state.length : 0;\r\n}\r\n\r\n// You can override either this method, or the async _read(n) below.\r\nReadable.prototype.read = function(n) {\r\n  debug('read', n);\r\n  // Same as parseInt(undefined, 10), however V8 7.3 performance regressed\r\n  // in this scenario, so we are doing it manually.\r\n  if (n === undefined) {\r\n    n = NaN;\r\n  } else if (!NumberIsInteger(n)) {\r\n    n = NumberParseInt(n, 10);\r\n  }\r\n  const state = this._readableState;\r\n  const nOrig = n;\r\n\r\n  // If we're asking for more than the current hwm, then raise the hwm.\r\n  if (n > state.highWaterMark)\r\n    state.highWaterMark = computeNewHighWaterMark(n);\r\n\r\n  if (n !== 0)\r\n    state[kState] &= ~kEmittedReadable;\r\n\r\n  // If we're doing read(0) to trigger a readable event, but we\r\n  // already have a bunch of data in the buffer, then just trigger\r\n  // the 'readable' event and move on.\r\n  if (n === 0 &&\r\n      (state[kState] & kNeedReadable) !== 0 &&\r\n      ((state.highWaterMark !== 0 ?\r\n        state.length >= state.highWaterMark :\r\n        state.length > 0) ||\r\n       (state[kState] & kEnded) !== 0)) {\r\n    debug('read: emitReadable');\r\n    if (state.length === 0 && (state[kState] & kEnded) !== 0)\r\n      endReadable(this);\r\n    else\r\n      emitReadable(this);\r\n    return null;\r\n  }\r\n\r\n  n = howMuchToRead(n, state);\r\n\r\n  // If we've ended, and we're now clear, then finish it up.\r\n  if (n === 0 && (state[kState] & kEnded) !== 0) {\r\n    if (state.length === 0)\r\n      endReadable(this);\r\n    return null;\r\n  }\r\n\r\n  // All the actual chunk generation logic needs to be\r\n  // *below* the call to _read.  The reason is that in certain\r\n  // synthetic stream cases, such as passthrough streams, _read\r\n  // may be a completely synchronous operation which may change\r\n  // the state of the read buffer, providing enough data when\r\n  // before there was *not* enough.\r\n  //\r\n  // So, the steps are:\r\n  // 1. Figure out what the state of things will be after we do\r\n  // a read from the buffer.\r\n  //\r\n  // 2. If that resulting state will trigger a _read, then call _read.\r\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\r\n  // deeply ugly to write APIs this way, but that still doesn't mean\r\n  // that the Readable class should behave improperly, as streams are\r\n  // designed to be sync/async agnostic.\r\n  // Take note if the _read call is sync or async (ie, if the read call\r\n  // has returned yet), so that we know whether or not it's safe to emit\r\n  // 'readable' etc.\r\n  //\r\n  // 3. Actually pull the requested chunks out of the buffer and return.\r\n\r\n  // if we need a readable event, then we need to do some reading.\r\n  let doRead = (state[kState] & kNeedReadable) !== 0;\r\n  debug('need readable', doRead);\r\n\r\n  // If we currently have less than the highWaterMark, then also read some.\r\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\r\n    doRead = true;\r\n    debug('length less than watermark', doRead);\r\n  }\r\n\r\n  // However, if we've ended, then there's no point, if we're already\r\n  // reading, then it's unnecessary, if we're constructing we have to wait,\r\n  // and if we're destroyed or errored, then it's not allowed,\r\n  if ((state[kState] & (kReading | kEnded | kDestroyed | kErrored | kConstructed)) !== kConstructed) {\r\n    doRead = false;\r\n    debug('reading, ended or constructing', doRead);\r\n  } else if (doRead) {\r\n    debug('do read');\r\n    state[kState] |= kReading | kSync;\r\n    // If the length is currently zero, then we *need* a readable event.\r\n    if (state.length === 0)\r\n      state[kState] |= kNeedReadable;\r\n\r\n    // Call internal read method\r\n    try {\r\n      this._read(state.highWaterMark);\r\n    } catch (err) {\r\n      errorOrDestroy(this, err);\r\n    }\r\n    state[kState] &= ~kSync;\r\n\r\n    // If _read pushed data synchronously, then `reading` will be false,\r\n    // and we need to re-evaluate how much data we can return to the user.\r\n    if ((state[kState] & kReading) === 0)\r\n      n = howMuchToRead(nOrig, state);\r\n  }\r\n\r\n  let ret;\r\n  if (n > 0)\r\n    ret = fromList(n, state);\r\n  else\r\n    ret = null;\r\n\r\n  if (ret === null) {\r\n    state[kState] |= state.length <= state.highWaterMark ? kNeedReadable : 0;\r\n    n = 0;\r\n  } else {\r\n    state.length -= n;\r\n    if ((state[kState] & kMultiAwaitDrain) !== 0) {\r\n      state.awaitDrainWriters.clear();\r\n    } else {\r\n      state.awaitDrainWriters = null;\r\n    }\r\n  }\r\n\r\n  if (state.length === 0) {\r\n    // If we have nothing in the buffer, then we want to know\r\n    // as soon as we *do* get something into the buffer.\r\n    if ((state[kState] & kEnded) === 0)\r\n      state[kState] |= kNeedReadable;\r\n\r\n    // If we tried to read() past the EOF, then emit end on the next tick.\r\n    if (nOrig !== n && (state[kState] & kEnded) !== 0)\r\n      endReadable(this);\r\n  }\r\n\r\n  if (ret !== null && (state[kState] & (kErrorEmitted | kCloseEmitted)) === 0) {\r\n    state[kState] |= kDataEmitted;\r\n    this.emit('data', ret);\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\nfunction onEofChunk(stream, state) {\r\n  debug('onEofChunk');\r\n  if ((state[kState] & kEnded) !== 0) return;\r\n  const decoder = (state[kState] & kDecoder) !== 0 ? state[kDecoderValue] : null;\r\n  if (decoder) {\r\n    const chunk = decoder.end();\r\n    if (chunk && chunk.length) {\r\n      state.buffer.push(chunk);\r\n      state.length += (state[kState] & kObjectMode) !== 0 ? 1 : chunk.length;\r\n    }\r\n  }\r\n  state[kState] |= kEnded;\r\n\r\n  if ((state[kState] & kSync) !== 0) {\r\n    // If we are sync, wait until next tick to emit the data.\r\n    // Otherwise we risk emitting data in the flow()\r\n    // the readable code triggers during a read() call.\r\n    emitReadable(stream);\r\n  } else {\r\n    // Emit 'readable' now to make sure it gets picked up.\r\n    state[kState] &= ~kNeedReadable;\r\n    state[kState] |= kEmittedReadable;\r\n    // We have to emit readable now that we are EOF. Modules\r\n    // in the ecosystem (e.g. dicer) rely on this event being sync.\r\n    emitReadable_(stream);\r\n  }\r\n}\r\n\r\n// Don't emit readable right away in sync mode, because this can trigger\r\n// another read() call => stack overflow.  This way, it might trigger\r\n// a nextTick recursion warning, but that's not so bad.\r\nfunction emitReadable(stream) {\r\n  const state = stream._readableState;\r\n  debug('emitReadable');\r\n  state[kState] &= ~kNeedReadable;\r\n  if ((state[kState] & kEmittedReadable) === 0) {\r\n    debug('emitReadable', (state[kState] & kFlowing) !== 0);\r\n    state[kState] |= kEmittedReadable;\r\n    process.nextTick(emitReadable_, stream);\r\n  }\r\n}\r\n\r\nfunction emitReadable_(stream) {\r\n  const state = stream._readableState;\r\n  debug('emitReadable_');\r\n  if ((state[kState] & (kDestroyed | kErrored)) === 0 && (state.length || (state[kState] & kEnded) !== 0)) {\r\n    stream.emit('readable');\r\n    state[kState] &= ~kEmittedReadable;\r\n  }\r\n\r\n  // The stream needs another readable event if:\r\n  // 1. It is not flowing, as the flow mechanism will take\r\n  //    care of it.\r\n  // 2. It is not ended.\r\n  // 3. It is below the highWaterMark, so we can schedule\r\n  //    another readable later.\r\n  state[kState] |=\r\n    (state[kState] & (kFlowing | kEnded)) === 0 &&\r\n    state.length <= state.highWaterMark ? kNeedReadable : 0;\r\n  flow(stream);\r\n}\r\n\r\n\r\n// At this point, the user has presumably seen the 'readable' event,\r\n// and called read() to consume some data.  that may have triggered\r\n// in turn another _read(n) call, in which case reading = true if\r\n// it's in progress.\r\n// However, if we're not ended, or reading, and the length < hwm,\r\n// then go ahead and try to read some more preemptively.\r\nfunction maybeReadMore(stream, state) {\r\n  if ((state[kState] & (kReadingMore | kConstructed)) === kConstructed) {\r\n    state[kState] |= kReadingMore;\r\n    process.nextTick(maybeReadMore_, stream, state);\r\n  }\r\n}\r\n\r\nfunction maybeReadMore_(stream, state) {\r\n  // Attempt to read more data if we should.\r\n  //\r\n  // The conditions for reading more data are (one of):\r\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\r\n  //   is responsible for filling the buffer with enough data if such data\r\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\r\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\r\n  //   when the stream consumer calls read() instead.\r\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\r\n  //   the loop below is responsible for ensuring read() is called. Failing to\r\n  //   call read here would abort the flow and there's no other mechanism for\r\n  //   continuing the flow if the stream consumer has just subscribed to the\r\n  //   'data' event.\r\n  //\r\n  // In addition to the above conditions to keep reading data, the following\r\n  // conditions prevent the data from being read:\r\n  // - The stream has ended (state.ended).\r\n  // - There is already a pending 'read' operation (state.reading). This is a\r\n  //   case where the stream has called the implementation defined _read()\r\n  //   method, but they are processing the call asynchronously and have _not_\r\n  //   called push() with new data. In this case we skip performing more\r\n  //   read()s. The execution ends in this method again after the _read() ends\r\n  //   up calling push() with more data.\r\n  while ((state[kState] & (kReading | kEnded)) === 0 &&\r\n         (state.length < state.highWaterMark ||\r\n          ((state[kState] & kFlowing) !== 0 && state.length === 0))) {\r\n    const len = state.length;\r\n    debug('maybeReadMore read 0');\r\n    stream.read(0);\r\n    if (len === state.length)\r\n      // Didn't get any data, stop spinning.\r\n      break;\r\n  }\r\n  state[kState] &= ~kReadingMore;\r\n}\r\n\r\n// Abstract method.  to be overridden in specific implementation classes.\r\n// call cb(er, data) where data is <= n in length.\r\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\r\n// arbitrary, and perhaps not very meaningful.\r\nReadable.prototype._read = function(n) {\r\n  throw new ERR_METHOD_NOT_IMPLEMENTED('_read()');\r\n};\r\n\r\nReadable.prototype.pipe = function(dest, pipeOpts) {\r\n  const src = this;\r\n  const state = this._readableState;\r\n\r\n  if (state.pipes.length === 1) {\r\n    if ((state[kState] & kMultiAwaitDrain) === 0) {\r\n      state[kState] |= kMultiAwaitDrain;\r\n      state.awaitDrainWriters = new SafeSet(\r\n        state.awaitDrainWriters ? [state.awaitDrainWriters] : [],\r\n      );\r\n    }\r\n  }\r\n\r\n  state.pipes.push(dest);\r\n  debug('pipe count=%d opts=%j', state.pipes.length, pipeOpts);\r\n\r\n  const doEnd = (!pipeOpts || pipeOpts.end !== false) &&\r\n              dest !== process.stdout &&\r\n              dest !== process.stderr;\r\n\r\n  const endFn = doEnd ? onend : unpipe;\r\n  if ((state[kState] & kEndEmitted) !== 0)\r\n    process.nextTick(endFn);\r\n  else\r\n    src.once('end', endFn);\r\n\r\n  dest.on('unpipe', onunpipe);\r\n  function onunpipe(readable, unpipeInfo) {\r\n    debug('onunpipe');\r\n    if (readable === src) {\r\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\r\n        unpipeInfo.hasUnpiped = true;\r\n        cleanup();\r\n      }\r\n    }\r\n  }\r\n\r\n  function onend() {\r\n    debug('onend');\r\n    dest.end();\r\n  }\r\n\r\n  let ondrain;\r\n\r\n  let cleanedUp = false;\r\n  function cleanup() {\r\n    debug('cleanup');\r\n    // Cleanup event handlers once the pipe is broken.\r\n    dest.removeListener('close', onclose);\r\n    dest.removeListener('finish', onfinish);\r\n    if (ondrain) {\r\n      dest.removeListener('drain', ondrain);\r\n    }\r\n    dest.removeListener('error', onerror);\r\n    dest.removeListener('unpipe', onunpipe);\r\n    src.removeListener('end', onend);\r\n    src.removeListener('end', unpipe);\r\n    src.removeListener('data', ondata);\r\n\r\n    cleanedUp = true;\r\n\r\n    // If the reader is waiting for a drain event from this\r\n    // specific writer, then it would cause it to never start\r\n    // flowing again.\r\n    // So, if this is awaiting a drain, then we just call it now.\r\n    // If we don't know, then assume that we are waiting for one.\r\n    if (ondrain && state.awaitDrainWriters &&\r\n        (!dest._writableState || dest._writableState.needDrain))\r\n      ondrain();\r\n  }\r\n\r\n  function pause() {\r\n    // If the user unpiped during `dest.write()`, it is possible\r\n    // to get stuck in a permanently paused state if that write\r\n    // also returned false.\r\n    // => Check whether `dest` is still a piping destination.\r\n    if (!cleanedUp) {\r\n      if (state.pipes.length === 1 && state.pipes[0] === dest) {\r\n        debug('false write response, pause', 0);\r\n        state.awaitDrainWriters = dest;\r\n        state[kState] &= ~kMultiAwaitDrain;\r\n      } else if (state.pipes.length > 1 && state.pipes.includes(dest)) {\r\n        debug('false write response, pause', state.awaitDrainWriters.size);\r\n        state.awaitDrainWriters.add(dest);\r\n      }\r\n      src.pause();\r\n    }\r\n    if (!ondrain) {\r\n      // When the dest drains, it reduces the awaitDrain counter\r\n      // on the source.  This would be more elegant with a .once()\r\n      // handler in flow(), but adding and removing repeatedly is\r\n      // too slow.\r\n      ondrain = pipeOnDrain(src, dest);\r\n      dest.on('drain', ondrain);\r\n    }\r\n  }\r\n\r\n  src.on('data', ondata);\r\n  function ondata(chunk) {\r\n    debug('ondata');\r\n    const ret = dest.write(chunk);\r\n    debug('dest.write', ret);\r\n    if (ret === false) {\r\n      pause();\r\n    }\r\n  }\r\n\r\n  // If the dest has an error, then stop piping into it.\r\n  // However, don't suppress the throwing behavior for this.\r\n  function onerror(er) {\r\n    debug('onerror', er);\r\n    unpipe();\r\n    dest.removeListener('error', onerror);\r\n    if (dest.listenerCount('error') === 0) {\r\n      const s = dest._writableState || dest._readableState;\r\n      if (s && !s.errorEmitted) {\r\n        // User incorrectly emitted 'error' directly on the stream.\r\n        errorOrDestroy(dest, er);\r\n      } else {\r\n        dest.emit('error', er);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Make sure our error handler is attached before userland ones.\r\n  prependListener(dest, 'error', onerror);\r\n\r\n  // Both close and finish should trigger unpipe, but only once.\r\n  function onclose() {\r\n    dest.removeListener('finish', onfinish);\r\n    unpipe();\r\n  }\r\n  dest.once('close', onclose);\r\n  function onfinish() {\r\n    debug('onfinish');\r\n    dest.removeListener('close', onclose);\r\n    unpipe();\r\n  }\r\n  dest.once('finish', onfinish);\r\n\r\n  function unpipe() {\r\n    debug('unpipe');\r\n    src.unpipe(dest);\r\n  }\r\n\r\n  // Tell the dest that it's being piped to.\r\n  dest.emit('pipe', src);\r\n\r\n  // Start the flow if it hasn't been started already.\r\n\r\n  if (dest.writableNeedDrain === true) {\r\n    pause();\r\n  } else if ((state[kState] & kFlowing) === 0) {\r\n    debug('pipe resume');\r\n    src.resume();\r\n  }\r\n\r\n  return dest;\r\n};\r\n\r\nfunction pipeOnDrain(src, dest) {\r\n  return function pipeOnDrainFunctionResult() {\r\n    const state = src._readableState;\r\n\r\n    // `ondrain` will call directly,\r\n    // `this` maybe not a reference to dest,\r\n    // so we use the real dest here.\r\n    if (state.awaitDrainWriters === dest) {\r\n      debug('pipeOnDrain', 1);\r\n      state.awaitDrainWriters = null;\r\n    } else if ((state[kState] & kMultiAwaitDrain) !== 0) {\r\n      debug('pipeOnDrain', state.awaitDrainWriters.size);\r\n      state.awaitDrainWriters.delete(dest);\r\n    }\r\n\r\n    if ((!state.awaitDrainWriters || state.awaitDrainWriters.size === 0) &&\r\n      (state[kState] & kDataListening) !== 0) {\r\n      src.resume();\r\n    }\r\n  };\r\n}\r\n\r\n\r\nReadable.prototype.unpipe = function(dest) {\r\n  const state = this._readableState;\r\n  const unpipeInfo = { hasUnpiped: false };\r\n\r\n  // If we're not piping anywhere, then do nothing.\r\n  if (state.pipes.length === 0)\r\n    return this;\r\n\r\n  if (!dest) {\r\n    // remove all.\r\n    const dests = state.pipes;\r\n    state.pipes = [];\r\n    this.pause();\r\n\r\n    for (let i = 0; i < dests.length; i++)\r\n      dests[i].emit('unpipe', this, { hasUnpiped: false });\r\n    return this;\r\n  }\r\n\r\n  // Try to find the right one.\r\n  const index = ArrayPrototypeIndexOf(state.pipes, dest);\r\n  if (index === -1)\r\n    return this;\r\n\r\n  state.pipes.splice(index, 1);\r\n  if (state.pipes.length === 0)\r\n    this.pause();\r\n\r\n  dest.emit('unpipe', this, unpipeInfo);\r\n\r\n  return this;\r\n};\r\n\r\n// Set up data events if they are asked for\r\n// Ensure readable listeners eventually get something.\r\nReadable.prototype.on = function(ev, fn) {\r\n  const res = Stream.prototype.on.call(this, ev, fn);\r\n  const state = this._readableState;\r\n\r\n  if (ev === 'data') {\r\n    state[kState] |= kDataListening;\r\n\r\n    // Update readableListening so that resume() may be a no-op\r\n    // a few lines down. This is needed to support once('readable').\r\n    state[kState] |= this.listenerCount('readable') > 0 ? kReadableListening : 0;\r\n\r\n    // Try start flowing on next tick if stream isn't explicitly paused.\r\n    if ((state[kState] & (kHasFlowing | kFlowing)) !== kHasFlowing) {\r\n      this.resume();\r\n    }\r\n  } else if (ev === 'readable') {\r\n    if ((state[kState] & (kEndEmitted | kReadableListening)) === 0) {\r\n      state[kState] |= kReadableListening | kNeedReadable | kHasFlowing;\r\n      state[kState] &= ~(kFlowing | kEmittedReadable);\r\n      debug('on readable');\r\n      if (state.length) {\r\n        emitReadable(this);\r\n      } else if ((state[kState] & kReading) === 0) {\r\n        process.nextTick(nReadingNextTick, this);\r\n      }\r\n    }\r\n  }\r\n\r\n  return res;\r\n};\r\nReadable.prototype.addListener = Readable.prototype.on;\r\n\r\nReadable.prototype.removeListener = function(ev, fn) {\r\n  const state = this._readableState;\r\n\r\n  const res = Stream.prototype.removeListener.call(this,\r\n                                                   ev, fn);\r\n\r\n  if (ev === 'readable') {\r\n    // We need to check if there is someone still listening to\r\n    // readable and reset the state. However this needs to happen\r\n    // after readable has been emitted but before I/O (nextTick) to\r\n    // support once('readable', fn) cycles. This means that calling\r\n    // resume within the same tick will have no\r\n    // effect.\r\n    process.nextTick(updateReadableListening, this);\r\n  } else if (ev === 'data' && this.listenerCount('data') === 0) {\r\n    state[kState] &= ~kDataListening;\r\n  }\r\n\r\n  return res;\r\n};\r\nReadable.prototype.off = Readable.prototype.removeListener;\r\n\r\nReadable.prototype.removeAllListeners = function(ev) {\r\n  const res = Stream.prototype.removeAllListeners.apply(this,\r\n                                                        arguments);\r\n\r\n  if (ev === 'readable' || ev === undefined) {\r\n    // We need to check if there is someone still listening to\r\n    // readable and reset the state. However this needs to happen\r\n    // after readable has been emitted but before I/O (nextTick) to\r\n    // support once('readable', fn) cycles. This means that calling\r\n    // resume within the same tick will have no\r\n    // effect.\r\n    process.nextTick(updateReadableListening, this);\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nfunction updateReadableListening(self) {\r\n  const state = self._readableState;\r\n\r\n  if (self.listenerCount('readable') > 0) {\r\n    state[kState] |= kReadableListening;\r\n  } else {\r\n    state[kState] &= ~kReadableListening;\r\n  }\r\n\r\n  if ((state[kState] & (kHasPaused | kPaused | kResumeScheduled)) === (kHasPaused | kResumeScheduled)) {\r\n    // Flowing needs to be set to true now, otherwise\r\n    // the upcoming resume will not flow.\r\n    state[kState] |= kHasFlowing | kFlowing;\r\n\r\n    // Crude way to check if we should resume.\r\n  } else if ((state[kState] & kDataListening) !== 0) {\r\n    self.resume();\r\n  } else if ((state[kState] & kReadableListening) === 0) {\r\n    state[kState] &= ~(kHasFlowing | kFlowing);\r\n  }\r\n}\r\n\r\nfunction nReadingNextTick(self) {\r\n  debug('readable nexttick read 0');\r\n  self.read(0);\r\n}\r\n\r\n// pause() and resume() are remnants of the legacy readable stream API\r\n// If the user uses them, then switch into old mode.\r\nReadable.prototype.resume = function() {\r\n  const state = this._readableState;\r\n  if ((state[kState] & kFlowing) === 0) {\r\n    debug('resume');\r\n    // We flow only if there is no one listening\r\n    // for readable, but we still have to call\r\n    // resume().\r\n    state[kState] |= kHasFlowing;\r\n    if ((state[kState] & kReadableListening) === 0) {\r\n      state[kState] |= kFlowing;\r\n    } else {\r\n      state[kState] &= ~kFlowing;\r\n    }\r\n    resume(this, state);\r\n  }\r\n  state[kState] |= kHasPaused;\r\n  state[kState] &= ~kPaused;\r\n  return this;\r\n};\r\n\r\nfunction resume(stream, state) {\r\n  if ((state[kState] & kResumeScheduled) === 0) {\r\n    state[kState] |= kResumeScheduled;\r\n    process.nextTick(resume_, stream, state);\r\n  }\r\n}\r\n\r\nfunction resume_(stream, state) {\r\n  debug('resume', (state[kState] & kReading) !== 0);\r\n  if ((state[kState] & kReading) === 0) {\r\n    stream.read(0);\r\n  }\r\n\r\n  state[kState] &= ~kResumeScheduled;\r\n  stream.emit('resume');\r\n  flow(stream);\r\n  if ((state[kState] & (kFlowing | kReading)) === kFlowing)\r\n    stream.read(0);\r\n}\r\n\r\nReadable.prototype.pause = function() {\r\n  const state = this._readableState;\r\n  debug('call pause');\r\n  if ((state[kState] & (kHasFlowing | kFlowing)) !== kHasFlowing) {\r\n    debug('pause');\r\n    state[kState] |= kHasFlowing;\r\n    state[kState] &= ~kFlowing;\r\n    this.emit('pause');\r\n  }\r\n  state[kState] |= kHasPaused | kPaused;\r\n  return this;\r\n};\r\n\r\nfunction flow(stream) {\r\n  const state = stream._readableState;\r\n  debug('flow');\r\n  while ((state[kState] & kFlowing) !== 0 && stream.read() !== null);\r\n}\r\n\r\n// Wrap an old-style stream as the async data source.\r\n// This is *not* part of the readable stream interface.\r\n// It is an ugly unfortunate mess of history.\r\nReadable.prototype.wrap = function(stream) {\r\n  let paused = false;\r\n\r\n  // TODO (ronag): Should this.destroy(err) emit\r\n  // 'error' on the wrapped stream? Would require\r\n  // a static factory method, e.g. Readable.wrap(stream).\r\n\r\n  stream.on('data', (chunk) => {\r\n    if (!this.push(chunk) && stream.pause) {\r\n      paused = true;\r\n      stream.pause();\r\n    }\r\n  });\r\n\r\n  stream.on('end', () => {\r\n    this.push(null);\r\n  });\r\n\r\n  stream.on('error', (err) => {\r\n    errorOrDestroy(this, err);\r\n  });\r\n\r\n  stream.on('close', () => {\r\n    this.destroy();\r\n  });\r\n\r\n  stream.on('destroy', () => {\r\n    this.destroy();\r\n  });\r\n\r\n  this._read = () => {\r\n    if (paused && stream.resume) {\r\n      paused = false;\r\n      stream.resume();\r\n    }\r\n  };\r\n\r\n  // Proxy all the other methods. Important when wrapping filters and duplexes.\r\n  const streamKeys = ObjectKeys(stream);\r\n  for (let j = 1; j < streamKeys.length; j++) {\r\n    const i = streamKeys[j];\r\n    if (this[i] === undefined && typeof stream[i] === 'function') {\r\n      this[i] = stream[i].bind(stream);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nReadable.prototype[SymbolAsyncIterator] = function() {\r\n  return streamToAsyncIterator(this);\r\n};\r\n\r\nReadable.prototype.iterator = function(options) {\r\n  if (options !== undefined) {\r\n    validateObject(options, 'options');\r\n  }\r\n  return streamToAsyncIterator(this, options);\r\n};\r\n\r\nfunction streamToAsyncIterator(stream, options) {\r\n  if (typeof stream.read !== 'function') {\r\n    stream = Readable.wrap(stream, { objectMode: true });\r\n  }\r\n\r\n  const iter = createAsyncIterator(stream, options);\r\n  iter.stream = stream;\r\n  return iter;\r\n}\r\n\r\nasync function* createAsyncIterator(stream, options) {\r\n  let callback = nop;\r\n\r\n  function next(resolve) {\r\n    if (this === stream) {\r\n      callback();\r\n      callback = nop;\r\n    } else {\r\n      callback = resolve;\r\n    }\r\n  }\r\n\r\n  stream.on('readable', next);\r\n\r\n  let error;\r\n  const cleanup = eos(stream, { writable: false }, (err) => {\r\n    error = err ? aggregateTwoErrors(error, err) : null;\r\n    callback();\r\n    callback = nop;\r\n  });\r\n\r\n  try {\r\n    while (true) {\r\n      const chunk = stream.destroyed ? null : stream.read();\r\n      if (chunk !== null) {\r\n        yield chunk;\r\n      } else if (error) {\r\n        throw error;\r\n      } else if (error === null) {\r\n        return;\r\n      } else {\r\n        await new Promise(next);\r\n      }\r\n    }\r\n  } catch (err) {\r\n    error = aggregateTwoErrors(error, err);\r\n    throw error;\r\n  } finally {\r\n    if (\r\n      (error || options?.destroyOnReturn !== false) &&\r\n      (error === undefined || stream._readableState.autoDestroy)\r\n    ) {\r\n      destroyImpl.destroyer(stream, null);\r\n    } else {\r\n      stream.off('readable', next);\r\n      cleanup();\r\n    }\r\n  }\r\n}\r\n\r\n// Making it explicit these properties are not enumerable\r\n// because otherwise some prototype manipulation in\r\n// userland will fail.\r\nObjectDefineProperties(Readable.prototype, {\r\n  readable: {\r\n    __proto__: null,\r\n    get() {\r\n      const r = this._readableState;\r\n      // r.readable === false means that this is part of a Duplex stream\r\n      // where the readable side was disabled upon construction.\r\n      // Compat. The user might manually disable readable side through\r\n      // deprecated setter.\r\n      return !!r && r.readable !== false && !r.destroyed && !r.errorEmitted &&\r\n        !r.endEmitted;\r\n    },\r\n    set(val) {\r\n      // Backwards compat.\r\n      if (this._readableState) {\r\n        this._readableState.readable = !!val;\r\n      }\r\n    },\r\n  },\r\n\r\n  readableDidRead: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get: function() {\r\n      return this._readableState.dataEmitted;\r\n    },\r\n  },\r\n\r\n  readableAborted: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get: function() {\r\n      return !!(\r\n        this._readableState.readable !== false &&\r\n        (this._readableState.destroyed || this._readableState.errored) &&\r\n        !this._readableState.endEmitted\r\n      );\r\n    },\r\n  },\r\n\r\n  readableHighWaterMark: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get: function() {\r\n      return this._readableState.highWaterMark;\r\n    },\r\n  },\r\n\r\n  readableBuffer: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get: function() {\r\n      return this._readableState && this._readableState.buffer;\r\n    },\r\n  },\r\n\r\n  readableFlowing: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get: function() {\r\n      return this._readableState.flowing;\r\n    },\r\n    set: function(state) {\r\n      if (this._readableState) {\r\n        this._readableState.flowing = state;\r\n      }\r\n    },\r\n  },\r\n\r\n  readableLength: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() {\r\n      return this._readableState.length;\r\n    },\r\n  },\r\n\r\n  readableObjectMode: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() {\r\n      return this._readableState ? this._readableState.objectMode : false;\r\n    },\r\n  },\r\n\r\n  readableEncoding: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() {\r\n      return this._readableState ? this._readableState.encoding : null;\r\n    },\r\n  },\r\n\r\n  errored: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() {\r\n      return this._readableState ? this._readableState.errored : null;\r\n    },\r\n  },\r\n\r\n  closed: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._readableState ? this._readableState.closed : false;\r\n    },\r\n  },\r\n\r\n  destroyed: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() {\r\n      return this._readableState ? this._readableState.destroyed : false;\r\n    },\r\n    set(value) {\r\n      // We ignore the value if the stream\r\n      // has not been initialized yet.\r\n      if (!this._readableState) {\r\n        return;\r\n      }\r\n\r\n      // Backward compatibility, the user is explicitly\r\n      // managing destroyed.\r\n      this._readableState.destroyed = value;\r\n    },\r\n  },\r\n\r\n  readableEnded: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() {\r\n      return this._readableState ? this._readableState.endEmitted : false;\r\n    },\r\n  },\r\n\r\n});\r\n\r\nObjectDefineProperties(ReadableState.prototype, {\r\n  // Legacy getter for `pipesCount`.\r\n  pipesCount: {\r\n    __proto__: null,\r\n    get() {\r\n      return this.pipes.length;\r\n    },\r\n  },\r\n\r\n  // Legacy property for `paused`.\r\n  paused: {\r\n    __proto__: null,\r\n    get() {\r\n      return (this[kState] & kPaused) !== 0;\r\n    },\r\n    set(value) {\r\n      this[kState] |= kHasPaused;\r\n      if (value) {\r\n        this[kState] |= kPaused;\r\n      } else {\r\n        this[kState] &= ~kPaused;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\n// Exposed for testing purposes only.\r\nReadable._fromList = fromList;\r\n\r\n// Pluck off n bytes from an array of buffers.\r\n// Length is the combined lengths of all the buffers in the list.\r\n// This function is designed to be inlinable, so please take care when making\r\n// changes to the function body.\r\nfunction fromList(n, state) {\r\n  // nothing buffered.\r\n  if (state.length === 0)\r\n    return null;\r\n\r\n  let idx = state.bufferIndex;\r\n  let ret;\r\n\r\n  const buf = state.buffer;\r\n  const len = buf.length;\r\n\r\n  if ((state[kState] & kObjectMode) !== 0) {\r\n    ret = buf[idx];\r\n    buf[idx++] = null;\r\n  } else if (!n || n >= state.length) {\r\n    // Read it all, truncate the list.\r\n    if ((state[kState] & kDecoder) !== 0) {\r\n      ret = '';\r\n      while (idx < len) {\r\n        ret += buf[idx];\r\n        buf[idx++] = null;\r\n      }\r\n    } else if (len - idx === 0) {\r\n      ret = Buffer.alloc(0);\r\n    } else if (len - idx === 1) {\r\n      ret = buf[idx];\r\n      buf[idx++] = null;\r\n    } else {\r\n      ret = Buffer.allocUnsafe(state.length);\r\n\r\n      let i = 0;\r\n      while (idx < len) {\r\n        TypedArrayPrototypeSet(ret, buf[idx], i);\r\n        i += buf[idx].length;\r\n        buf[idx++] = null;\r\n      }\r\n    }\r\n  } else if (n < buf[idx].length) {\r\n    // `slice` is the same for buffers and strings.\r\n    ret = buf[idx].slice(0, n);\r\n    buf[idx] = buf[idx].slice(n);\r\n  } else if (n === buf[idx].length) {\r\n    // First chunk is a perfect match.\r\n    ret = buf[idx];\r\n    buf[idx++] = null;\r\n  } else if ((state[kState] & kDecoder) !== 0) {\r\n    ret = '';\r\n    while (idx < len) {\r\n      const str = buf[idx];\r\n      if (n > str.length) {\r\n        ret += str;\r\n        n -= str.length;\r\n        buf[idx++] = null;\r\n      } else {\r\n        if (n === buf.length) {\r\n          ret += str;\r\n          buf[idx++] = null;\r\n        } else {\r\n          ret += str.slice(0, n);\r\n          buf[idx] = str.slice(n);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  } else {\r\n    ret = Buffer.allocUnsafe(n);\r\n\r\n    const retLen = n;\r\n    while (idx < len) {\r\n      const data = buf[idx];\r\n      if (n > data.length) {\r\n        TypedArrayPrototypeSet(ret, data, retLen - n);\r\n        n -= data.length;\r\n        buf[idx++] = null;\r\n      } else {\r\n        if (n === data.length) {\r\n          TypedArrayPrototypeSet(ret, data, retLen - n);\r\n          buf[idx++] = null;\r\n        } else {\r\n          TypedArrayPrototypeSet(ret, new FastBuffer(data.buffer, data.byteOffset, n), retLen - n);\r\n          buf[idx] = new FastBuffer(data.buffer, data.byteOffset + n, data.length - n);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (idx === len) {\r\n    state.buffer.length = 0;\r\n    state.bufferIndex = 0;\r\n  } else if (idx > 1024) {\r\n    state.buffer.splice(0, idx);\r\n    state.bufferIndex = 0;\r\n  } else {\r\n    state.bufferIndex = idx;\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction endReadable(stream) {\r\n  const state = stream._readableState;\r\n\r\n  debug('endReadable');\r\n  if ((state[kState] & kEndEmitted) === 0) {\r\n    state[kState] |= kEnded;\r\n    process.nextTick(endReadableNT, state, stream);\r\n  }\r\n}\r\n\r\nfunction endReadableNT(state, stream) {\r\n  debug('endReadableNT');\r\n\r\n  // Check that we didn't get one last unshift.\r\n  if ((state[kState] & (kErrored | kCloseEmitted | kEndEmitted)) === 0 && state.length === 0) {\r\n    state[kState] |= kEndEmitted;\r\n    stream.emit('end');\r\n\r\n    if (stream.writable && stream.allowHalfOpen === false) {\r\n      process.nextTick(endWritableNT, stream);\r\n    } else if (state.autoDestroy) {\r\n      // In case of duplex streams we need a way to detect\r\n      // if the writable side is ready for autoDestroy as well.\r\n      const wState = stream._writableState;\r\n      const autoDestroy = !wState || (\r\n        wState.autoDestroy &&\r\n        // We don't expect the writable to ever 'finish'\r\n        // if writable is explicitly set to false.\r\n        (wState.finished || wState.writable === false)\r\n      );\r\n\r\n      if (autoDestroy) {\r\n        stream.destroy();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction endWritableNT(stream) {\r\n  const writable = stream.writable && !stream.writableEnded &&\r\n    !stream.destroyed;\r\n  if (writable) {\r\n    stream.end();\r\n  }\r\n}\r\n\r\nReadable.from = function(iterable, opts) {\r\n  return from(Readable, iterable, opts);\r\n};\r\n\r\nlet webStreamsAdapters;\r\n\r\n// Lazy to avoid circular references\r\nfunction lazyWebStreams() {\r\n  if (webStreamsAdapters === undefined)\r\n    webStreamsAdapters = require('internal/webstreams/adapters');\r\n  return webStreamsAdapters;\r\n}\r\n\r\nReadable.fromWeb = function(readableStream, options) {\r\n  return lazyWebStreams().newStreamReadableFromReadableStream(\r\n    readableStream,\r\n    options);\r\n};\r\n\r\nReadable.toWeb = function(streamReadable, options) {\r\n  return lazyWebStreams().newReadableStreamFromStreamReadable(\r\n    streamReadable,\r\n    options);\r\n};\r\n\r\nReadable.wrap = function(src, options) {\r\n  return new Readable({\r\n    objectMode: src.readableObjectMode ?? src.objectMode ?? true,\r\n    ...options,\r\n    destroy(err, callback) {\r\n      destroyImpl.destroyer(src, err);\r\n      callback(err);\r\n    },\r\n  }).wrap(src);\r\n};\r\n"
  },
  "92": {
    "metadata": {
      "scriptId": "92",
      "url": "node:internal/streams/add-abort-signal",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 60,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "5e8372a65797e6bab8d6fd6dfff6436e7f08c95cf658d23c638839f71913835e",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1781,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/add-abort-signal"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  SymbolDispose,\r\n} = primordials;\r\n\r\nconst {\r\n  AbortError,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  isNodeStream,\r\n  isWebStream,\r\n  kControllerErrorFunction,\r\n} = require('internal/streams/utils');\r\n\r\nconst eos = require('internal/streams/end-of-stream');\r\nlet addAbortListener;\r\n\r\n// This method is inlined here for readable-stream\r\n// It also does not allow for signal to not exist on the stream\r\n// https://github.com/nodejs/node/pull/36061#discussion_r533718029\r\nconst validateAbortSignal = (signal, name) => {\r\n  if (typeof signal !== 'object' ||\r\n       !('aborted' in signal)) {\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'AbortSignal', signal);\r\n  }\r\n};\r\n\r\nmodule.exports.addAbortSignal = function addAbortSignal(signal, stream) {\r\n  validateAbortSignal(signal, 'signal');\r\n  if (!isNodeStream(stream) && !isWebStream(stream)) {\r\n    throw new ERR_INVALID_ARG_TYPE('stream', ['ReadableStream', 'WritableStream', 'Stream'], stream);\r\n  }\r\n  return module.exports.addAbortSignalNoValidate(signal, stream);\r\n};\r\n\r\nmodule.exports.addAbortSignalNoValidate = function(signal, stream) {\r\n  if (typeof signal !== 'object' || !('aborted' in signal)) {\r\n    return stream;\r\n  }\r\n  const onAbort = isNodeStream(stream) ?\r\n    () => {\r\n      stream.destroy(new AbortError(undefined, { cause: signal.reason }));\r\n    } :\r\n    () => {\r\n      stream[kControllerErrorFunction](new AbortError(undefined, { cause: signal.reason }));\r\n    };\r\n  if (signal.aborted) {\r\n    onAbort();\r\n  } else {\r\n    addAbortListener ??= require('internal/events/abort_listener').addAbortListener;\r\n    const disposable = addAbortListener(signal, onAbort);\r\n    eos(stream, disposable[SymbolDispose]);\r\n  }\r\n  return stream;\r\n};\r\n"
  },
  "93": {
    "metadata": {
      "scriptId": "93",
      "url": "node:internal/streams/state",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 51,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "2b5f3c8b2d86136c86d9158f8ee1bfc1f63c2377b53c51b03b1166c1656e6809",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1491,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/state"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  MathFloor,\r\n  NumberIsInteger,\r\n} = primordials;\r\nconst { validateInteger } = require('internal/validators');\r\n\r\nconst { ERR_INVALID_ARG_VALUE } = require('internal/errors').codes;\r\n\r\n// TODO (fix): For some reason Windows CI fails with bigger hwm.\r\nlet defaultHighWaterMarkBytes = process.platform === 'win32' ? 16 * 1024 : 64 * 1024;\r\nlet defaultHighWaterMarkObjectMode = 16;\r\n\r\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\r\n  return options.highWaterMark != null ? options.highWaterMark :\r\n    isDuplex ? options[duplexKey] : null;\r\n}\r\n\r\nfunction getDefaultHighWaterMark(objectMode) {\r\n  return objectMode ? defaultHighWaterMarkObjectMode : defaultHighWaterMarkBytes;\r\n}\r\n\r\nfunction setDefaultHighWaterMark(objectMode, value) {\r\n  validateInteger(value, 'value', 0);\r\n  if (objectMode) {\r\n    defaultHighWaterMarkObjectMode = value;\r\n  } else {\r\n    defaultHighWaterMarkBytes = value;\r\n  }\r\n}\r\n\r\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\r\n  const hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\r\n  if (hwm != null) {\r\n    if (!NumberIsInteger(hwm) || hwm < 0) {\r\n      const name = isDuplex ? `options.${duplexKey}` : 'options.highWaterMark';\r\n      throw new ERR_INVALID_ARG_VALUE(name, hwm);\r\n    }\r\n    return MathFloor(hwm);\r\n  }\r\n\r\n  // Default value\r\n  return getDefaultHighWaterMark(state.objectMode);\r\n}\r\n\r\nmodule.exports = {\r\n  getHighWaterMark,\r\n  getDefaultHighWaterMark,\r\n  setDefaultHighWaterMark,\r\n};\r\n"
  },
  "94": {
    "metadata": {
      "scriptId": "94",
      "url": "node:string_decoder",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 166,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "bd2e5d954dffbd26c2be36bae6c6b0d4412af150802f41eb47d4c0ac0b3160a4",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 5307,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:string_decoder"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayBufferIsView,\r\n  ObjectDefineProperties,\r\n  Symbol,\r\n  TypedArrayPrototypeSubarray,\r\n} = primordials;\r\n\r\nconst { Buffer } = require('buffer');\r\nconst {\r\n  kIncompleteCharactersStart,\r\n  kIncompleteCharactersEnd,\r\n  kMissingBytes,\r\n  kBufferedBytes,\r\n  kEncodingField,\r\n  kSize,\r\n  decode,\r\n  flush,\r\n} = internalBinding('string_decoder');\r\nconst {\r\n  kIsEncodingSymbol,\r\n  encodingsMap,\r\n  normalizeEncoding: _normalizeEncoding,\r\n} = require('internal/util');\r\nconst {\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_INVALID_THIS,\r\n  ERR_UNKNOWN_ENCODING,\r\n} = require('internal/errors').codes;\r\nconst isEncoding = Buffer[kIsEncodingSymbol];\r\n\r\nconst kNativeDecoder = Symbol('kNativeDecoder');\r\n\r\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\r\n// modules monkey-patch it to support additional encodings\r\n/**\r\n * Normalize encoding notation\r\n * @param {string} enc\r\n * @returns {\"utf8\" | \"utf16le\" | \"hex\" | \"ascii\"\r\n *           | \"base64\" | \"latin1\" | \"base64url\"}\r\n * @throws {TypeError} Throws an error when encoding is invalid\r\n */\r\nfunction normalizeEncoding(enc) {\r\n  const nenc = _normalizeEncoding(enc);\r\n  if (nenc === undefined) {\r\n    if (Buffer.isEncoding === isEncoding || !Buffer.isEncoding(enc))\r\n      throw new ERR_UNKNOWN_ENCODING(enc);\r\n    return enc;\r\n  }\r\n  return nenc;\r\n}\r\n\r\n/**\r\n * StringDecoder provides an interface for efficiently splitting a series of\r\n * buffers into a series of JS strings without breaking apart multi-byte\r\n * characters.\r\n * @param {string} [encoding=utf-8]\r\n */\r\nfunction StringDecoder(encoding) {\r\n  this.encoding = normalizeEncoding(encoding);\r\n  this[kNativeDecoder] = Buffer.alloc(kSize);\r\n  this[kNativeDecoder][kEncodingField] = encodingsMap[this.encoding];\r\n}\r\n\r\n/**\r\n * Returns a decoded string, omitting any incomplete multi-bytes\r\n * characters at the end of the Buffer, or TypedArray, or DataView\r\n * @param {string | Buffer | TypedArray | DataView} buf\r\n * @returns {string}\r\n * @throws {TypeError} Throws when buf is not in one of supported types\r\n */\r\nStringDecoder.prototype.write = function write(buf) {\r\n  if (typeof buf === 'string')\r\n    return buf;\r\n  if (!ArrayBufferIsView(buf))\r\n    throw new ERR_INVALID_ARG_TYPE('buf',\r\n                                   ['Buffer', 'TypedArray', 'DataView'],\r\n                                   buf);\r\n  if (!this[kNativeDecoder]) {\r\n    throw new ERR_INVALID_THIS('StringDecoder');\r\n  }\r\n  return decode(this[kNativeDecoder], buf);\r\n};\r\n\r\n/**\r\n * Returns any remaining input stored in the internal buffer as a string.\r\n * After end() is called, the stringDecoder object can be reused for new\r\n * input.\r\n * @param {string | Buffer | TypedArray | DataView} [buf]\r\n * @returns {string}\r\n */\r\nStringDecoder.prototype.end = function end(buf) {\r\n  let ret = '';\r\n  if (buf !== undefined)\r\n    ret = this.write(buf);\r\n  if (this[kNativeDecoder][kBufferedBytes] > 0)\r\n    ret += flush(this[kNativeDecoder]);\r\n  return ret;\r\n};\r\n\r\n/* Everything below this line is undocumented legacy stuff. */\r\n/**\r\n *\r\n * @param {string | Buffer | TypedArray | DataView} buf\r\n * @param {number} offset\r\n * @returns {string}\r\n */\r\nStringDecoder.prototype.text = function text(buf, offset) {\r\n  this[kNativeDecoder][kMissingBytes] = 0;\r\n  this[kNativeDecoder][kBufferedBytes] = 0;\r\n  return this.write(buf.slice(offset));\r\n};\r\n\r\nObjectDefineProperties(StringDecoder.prototype, {\r\n  lastChar: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      return TypedArrayPrototypeSubarray(this[kNativeDecoder],\r\n                                         kIncompleteCharactersStart,\r\n                                         kIncompleteCharactersEnd);\r\n    },\r\n  },\r\n  lastNeed: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      return this[kNativeDecoder][kMissingBytes];\r\n    },\r\n  },\r\n  lastTotal: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      return this[kNativeDecoder][kBufferedBytes] +\r\n             this[kNativeDecoder][kMissingBytes];\r\n    },\r\n  },\r\n});\r\n\r\nexports.StringDecoder = StringDecoder;\r\n"
  },
  "95": {
    "metadata": {
      "scriptId": "95",
      "url": "node:internal/streams/from",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 208,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "f71ec22a40a593ce31f94e9ec61e0c03fef090232318c6cc2049a813632e8147",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4549,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/from"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  PromisePrototypeThen,\r\n  SymbolAsyncIterator,\r\n  SymbolIterator,\r\n} = primordials;\r\nconst { Buffer } = require('buffer');\r\n\r\nconst {\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_STREAM_NULL_VALUES,\r\n} = require('internal/errors').codes;\r\n\r\nfunction from(Readable, iterable, opts) {\r\n  let iterator;\r\n  if (typeof iterable === 'string' || iterable instanceof Buffer) {\r\n    return new Readable({\r\n      objectMode: true,\r\n      ...opts,\r\n      read() {\r\n        this.push(iterable);\r\n        this.push(null);\r\n      },\r\n    });\r\n  }\r\n\r\n  let isAsync;\r\n  if (iterable && iterable[SymbolAsyncIterator]) {\r\n    isAsync = true;\r\n    iterator = iterable[SymbolAsyncIterator]();\r\n  } else if (iterable && iterable[SymbolIterator]) {\r\n    isAsync = false;\r\n    iterator = iterable[SymbolIterator]();\r\n  } else {\r\n    throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable);\r\n  }\r\n\r\n\r\n  const readable = new Readable({\r\n    objectMode: true,\r\n    highWaterMark: 1,\r\n    // TODO(ronag): What options should be allowed?\r\n    ...opts,\r\n  });\r\n\r\n  // Flag to protect against _read\r\n  // being called before last iteration completion.\r\n  let reading = false;\r\n  let isAsyncValues = false;\r\n\r\n  readable._read = function() {\r\n    if (!reading) {\r\n      reading = true;\r\n\r\n      if (isAsync) {\r\n        nextAsync();\r\n      } else if (isAsyncValues) {\r\n        nextSyncWithAsyncValues();\r\n      } else {\r\n        nextSyncWithSyncValues();\r\n      }\r\n    }\r\n  };\r\n\r\n  readable._destroy = function(error, cb) {\r\n    PromisePrototypeThen(\r\n      close(error),\r\n      () => process.nextTick(cb, error), // nextTick is here in case cb throws\r\n      (e) => process.nextTick(cb, e || error),\r\n    );\r\n  };\r\n\r\n  async function close(error) {\r\n    const hadError = (error !== undefined) && (error !== null);\r\n    const hasThrow = typeof iterator.throw === 'function';\r\n    if (hadError && hasThrow) {\r\n      const { value, done } = await iterator.throw(error);\r\n      await value;\r\n      if (done) {\r\n        return;\r\n      }\r\n    }\r\n    if (typeof iterator.return === 'function') {\r\n      const { value } = await iterator.return();\r\n      await value;\r\n    }\r\n  }\r\n\r\n  // There are a lot of duplication here, it's done on purpose for performance\r\n  // reasons - avoid await when not needed.\r\n\r\n  function nextSyncWithSyncValues() {\r\n    for (;;) {\r\n      try {\r\n        const { value, done } = iterator.next();\r\n\r\n        if (done) {\r\n          readable.push(null);\r\n          return;\r\n        }\r\n\r\n        if (value &&\r\n          typeof value.then === 'function') {\r\n          return changeToAsyncValues(value);\r\n        }\r\n\r\n        if (value === null) {\r\n          reading = false;\r\n          throw new ERR_STREAM_NULL_VALUES();\r\n        }\r\n\r\n        if (readable.push(value)) {\r\n          continue;\r\n        }\r\n\r\n        reading = false;\r\n      } catch (err) {\r\n        readable.destroy(err);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  async function changeToAsyncValues(value) {\r\n    isAsyncValues = true;\r\n\r\n    try {\r\n      const res = await value;\r\n\r\n      if (res === null) {\r\n        reading = false;\r\n        throw new ERR_STREAM_NULL_VALUES();\r\n      }\r\n\r\n      if (readable.push(res)) {\r\n        nextSyncWithAsyncValues();\r\n        return;\r\n      }\r\n\r\n      reading = false;\r\n    } catch (err) {\r\n      readable.destroy(err);\r\n    }\r\n  }\r\n\r\n  async function nextSyncWithAsyncValues() {\r\n    for (;;) {\r\n      try {\r\n        const { value, done } = iterator.next();\r\n\r\n        if (done) {\r\n          readable.push(null);\r\n          return;\r\n        }\r\n\r\n        const res = (value &&\r\n          typeof value.then === 'function') ?\r\n          await value :\r\n          value;\r\n\r\n        if (res === null) {\r\n          reading = false;\r\n          throw new ERR_STREAM_NULL_VALUES();\r\n        }\r\n\r\n        if (readable.push(res)) {\r\n          continue;\r\n        }\r\n\r\n        reading = false;\r\n      } catch (err) {\r\n        readable.destroy(err);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  async function nextAsync() {\r\n    for (;;) {\r\n      try {\r\n        const { value, done } = await iterator.next();\r\n\r\n        if (done) {\r\n          readable.push(null);\r\n          return;\r\n        }\r\n\r\n        if (value === null) {\r\n          reading = false;\r\n          throw new ERR_STREAM_NULL_VALUES();\r\n        }\r\n\r\n        if (readable.push(value)) {\r\n          continue;\r\n        }\r\n\r\n        reading = false;\r\n      } catch (err) {\r\n        readable.destroy(err);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return readable;\r\n}\r\n\r\nmodule.exports = from;\r\n"
  },
  "96": {
    "metadata": {
      "scriptId": "96",
      "url": "node:internal/streams/writable",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1144,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "4287bbb4b3668c7dcbba80f93a29fed934ed70cc1fb940763f7783ab881a8603",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 34258,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/writable"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// A bit simpler than readable streams.\r\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\r\n// the drain event emission and buffering.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeSlice,\r\n  Error,\r\n  FunctionPrototypeSymbolHasInstance,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  StringPrototypeToLowerCase,\r\n  Symbol,\r\n  SymbolHasInstance,\r\n} = primordials;\r\n\r\nmodule.exports = Writable;\r\nWritable.WritableState = WritableState;\r\n\r\nconst EE = require('events');\r\nconst Stream = require('internal/streams/legacy').Stream;\r\nconst { Buffer } = require('buffer');\r\nconst destroyImpl = require('internal/streams/destroy');\r\n\r\nconst {\r\n  addAbortSignal,\r\n} = require('internal/streams/add-abort-signal');\r\n\r\nconst {\r\n  getHighWaterMark,\r\n  getDefaultHighWaterMark,\r\n} = require('internal/streams/state');\r\nconst {\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_METHOD_NOT_IMPLEMENTED,\r\n  ERR_MULTIPLE_CALLBACK,\r\n  ERR_STREAM_CANNOT_PIPE,\r\n  ERR_STREAM_DESTROYED,\r\n  ERR_STREAM_ALREADY_FINISHED,\r\n  ERR_STREAM_NULL_VALUES,\r\n  ERR_STREAM_WRITE_AFTER_END,\r\n  ERR_UNKNOWN_ENCODING,\r\n} = require('internal/errors').codes;\r\nconst {\r\n  kState,\r\n  // bitfields\r\n  kObjectMode,\r\n  kErrorEmitted,\r\n  kAutoDestroy,\r\n  kEmitClose,\r\n  kDestroyed,\r\n  kClosed,\r\n  kCloseEmitted,\r\n  kErrored,\r\n  kConstructed,\r\n  kOnConstructed,\r\n} = require('internal/streams/utils');\r\n\r\nconst { errorOrDestroy } = destroyImpl;\r\n\r\nObjectSetPrototypeOf(Writable.prototype, Stream.prototype);\r\nObjectSetPrototypeOf(Writable, Stream);\r\n\r\nfunction nop() {}\r\n\r\nconst kOnFinishedValue = Symbol('kOnFinishedValue');\r\nconst kErroredValue = Symbol('kErroredValue');\r\nconst kDefaultEncodingValue = Symbol('kDefaultEncodingValue');\r\nconst kWriteCbValue = Symbol('kWriteCbValue');\r\nconst kAfterWriteTickInfoValue = Symbol('kAfterWriteTickInfoValue');\r\nconst kBufferedValue = Symbol('kBufferedValue');\r\n\r\nconst kSync = 1 << 9;\r\nconst kFinalCalled = 1 << 10;\r\nconst kNeedDrain = 1 << 11;\r\nconst kEnding = 1 << 12;\r\nconst kFinished = 1 << 13;\r\nconst kDecodeStrings = 1 << 14;\r\nconst kWriting = 1 << 15;\r\nconst kBufferProcessing = 1 << 16;\r\nconst kPrefinished = 1 << 17;\r\nconst kAllBuffers = 1 << 18;\r\nconst kAllNoop = 1 << 19;\r\nconst kOnFinished = 1 << 20;\r\nconst kHasWritable = 1 << 21;\r\nconst kWritable = 1 << 22;\r\nconst kCorked = 1 << 23;\r\nconst kDefaultUTF8Encoding = 1 << 24;\r\nconst kWriteCb = 1 << 25;\r\nconst kExpectWriteCb = 1 << 26;\r\nconst kAfterWriteTickInfo = 1 << 27;\r\nconst kAfterWritePending = 1 << 28;\r\nconst kBuffered = 1 << 29;\r\nconst kEnded = 1 << 30;\r\n\r\n// TODO(benjamingr) it is likely slower to do it this way than with free functions\r\nfunction makeBitMapDescriptor(bit) {\r\n  return {\r\n    enumerable: false,\r\n    get() { return (this[kState] & bit) !== 0; },\r\n    set(value) {\r\n      if (value) this[kState] |= bit;\r\n      else this[kState] &= ~bit;\r\n    },\r\n  };\r\n}\r\nObjectDefineProperties(WritableState.prototype, {\r\n  // Object stream flag to indicate whether or not this stream\r\n  // contains buffers or objects.\r\n  objectMode: makeBitMapDescriptor(kObjectMode),\r\n\r\n  // if _final has been called.\r\n  finalCalled: makeBitMapDescriptor(kFinalCalled),\r\n\r\n  // drain event flag.\r\n  needDrain: makeBitMapDescriptor(kNeedDrain),\r\n\r\n  // At the start of calling end()\r\n  ending: makeBitMapDescriptor(kEnding),\r\n\r\n  // When end() has been called, and returned.\r\n  ended: makeBitMapDescriptor(kEnded),\r\n\r\n  // When 'finish' is emitted.\r\n  finished: makeBitMapDescriptor(kFinished),\r\n\r\n  // Has it been destroyed.\r\n  destroyed: makeBitMapDescriptor(kDestroyed),\r\n\r\n  // Should we decode strings into buffers before passing to _write?\r\n  // this is here so that some node-core streams can optimize string\r\n  // handling at a lower level.\r\n  decodeStrings: makeBitMapDescriptor(kDecodeStrings),\r\n\r\n  // A flag to see when we're in the middle of a write.\r\n  writing: makeBitMapDescriptor(kWriting),\r\n\r\n  // A flag to be able to tell if the onwrite cb is called immediately,\r\n  // or on a later tick.  We set this to true at first, because any\r\n  // actions that shouldn't happen until \"later\" should generally also\r\n  // not happen before the first write call.\r\n  sync: makeBitMapDescriptor(kSync),\r\n\r\n  // A flag to know if we're processing previously buffered items, which\r\n  // may call the _write() callback in the same tick, so that we don't\r\n  // end up in an overlapped onwrite situation.\r\n  bufferProcessing: makeBitMapDescriptor(kBufferProcessing),\r\n\r\n  // Stream is still being constructed and cannot be\r\n  // destroyed until construction finished or failed.\r\n  // Async construction is opt in, therefore we start as\r\n  // constructed.\r\n  constructed: makeBitMapDescriptor(kConstructed),\r\n\r\n  // Emit prefinish if the only thing we're waiting for is _write cbs\r\n  // This is relevant for synchronous Transform streams.\r\n  prefinished: makeBitMapDescriptor(kPrefinished),\r\n\r\n  // True if the error was already emitted and should not be thrown again.\r\n  errorEmitted: makeBitMapDescriptor(kErrorEmitted),\r\n\r\n  // Should close be emitted on destroy. Defaults to true.\r\n  emitClose: makeBitMapDescriptor(kEmitClose),\r\n\r\n  // Should .destroy() be called after 'finish' (and potentially 'end').\r\n  autoDestroy: makeBitMapDescriptor(kAutoDestroy),\r\n\r\n  // Indicates whether the stream has finished destroying.\r\n  closed: makeBitMapDescriptor(kClosed),\r\n\r\n  // True if close has been emitted or would have been emitted\r\n  // depending on emitClose.\r\n  closeEmitted: makeBitMapDescriptor(kCloseEmitted),\r\n\r\n  allBuffers: makeBitMapDescriptor(kAllBuffers),\r\n  allNoop: makeBitMapDescriptor(kAllNoop),\r\n\r\n  // Indicates whether the stream has errored. When true all write() calls\r\n  // should return false. This is needed since when autoDestroy\r\n  // is disabled we need a way to tell whether the stream has failed.\r\n  // This is/should be a cold path.\r\n  errored: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() { return (this[kState] & kErrored) !== 0 ? this[kErroredValue] : null; },\r\n    set(value) {\r\n      if (value) {\r\n        this[kErroredValue] = value;\r\n        this[kState] |= kErrored;\r\n      } else {\r\n        this[kState] &= ~kErrored;\r\n      }\r\n    },\r\n  },\r\n\r\n  writable: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() { return (this[kState] & kHasWritable) !== 0 ? (this[kState] & kWritable) !== 0 : undefined; },\r\n    set(value) {\r\n      if (value == null) {\r\n        this[kState] &= ~(kHasWritable | kWritable);\r\n      } else if (value) {\r\n        this[kState] |= (kHasWritable | kWritable);\r\n      } else {\r\n        this[kState] |= kHasWritable;\r\n        this[kState] &= ~kWritable;\r\n      }\r\n    },\r\n  },\r\n\r\n  defaultEncoding: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() { return (this[kState] & kDefaultUTF8Encoding) !== 0 ? 'utf8' : this[kDefaultEncodingValue]; },\r\n    set(value) {\r\n      if (value === 'utf8' || value === 'utf-8') {\r\n        this[kState] |= kDefaultUTF8Encoding;\r\n      } else {\r\n        this[kState] &= ~kDefaultUTF8Encoding;\r\n        this[kDefaultEncodingValue] = value;\r\n      }\r\n    },\r\n  },\r\n\r\n  // The callback that the user supplies to write(chunk, encoding, cb).\r\n  writecb: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() { return (this[kState] & kWriteCb) !== 0 ? this[kWriteCbValue] : nop; },\r\n    set(value) {\r\n      this[kWriteCbValue] = value;\r\n      if (value) {\r\n        this[kState] |= kWriteCb;\r\n      } else {\r\n        this[kState] &= ~kWriteCb;\r\n      }\r\n    },\r\n  },\r\n\r\n  // Storage for data passed to the afterWrite() callback in case of\r\n  // synchronous _write() completion.\r\n  afterWriteTickInfo: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() { return (this[kState] & kAfterWriteTickInfo) !== 0 ? this[kAfterWriteTickInfoValue] : null; },\r\n    set(value) {\r\n      this[kAfterWriteTickInfoValue] = value;\r\n      if (value) {\r\n        this[kState] |= kAfterWriteTickInfo;\r\n      } else {\r\n        this[kState] &= ~kAfterWriteTickInfo;\r\n      }\r\n    },\r\n  },\r\n\r\n  buffered: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() { return (this[kState] & kBuffered) !== 0 ? this[kBufferedValue] : []; },\r\n    set(value) {\r\n      this[kBufferedValue] = value;\r\n      if (value) {\r\n        this[kState] |= kBuffered;\r\n      } else {\r\n        this[kState] &= ~kBuffered;\r\n      }\r\n    },\r\n  },\r\n\r\n});\r\n\r\nfunction WritableState(options, stream, isDuplex) {\r\n  // Bit map field to store WritableState more effciently with 1 bit per field\r\n  // instead of a V8 slot per field.\r\n  this[kState] = kSync | kConstructed | kEmitClose | kAutoDestroy;\r\n\r\n  if (options && options.objectMode)\r\n    this[kState] |= kObjectMode;\r\n\r\n  if (isDuplex && options && options.writableObjectMode)\r\n    this[kState] |= kObjectMode;\r\n\r\n  // The point at which write() starts returning false\r\n  // Note: 0 is a valid value, means that we always return false if\r\n  // the entire buffer is not flushed immediately on write().\r\n  this.highWaterMark = options ?\r\n    getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex) :\r\n    getDefaultHighWaterMark(false);\r\n\r\n  if (!options || options.decodeStrings !== false) this[kState] |= kDecodeStrings;\r\n\r\n  // Should close be emitted on destroy. Defaults to true.\r\n  if (options && options.emitClose === false) this[kState] &= ~kEmitClose;\r\n\r\n  // Should .destroy() be called after 'end' (and potentially 'finish').\r\n  if (options && options.autoDestroy === false) this[kState] &= ~kAutoDestroy;\r\n\r\n  // Crypto is kind of old and crusty.  Historically, its default string\r\n  // encoding is 'binary' so we have to make this configurable.\r\n  // Everything else in the universe uses 'utf8', though.\r\n  const defaultEncoding = options ? options.defaultEncoding : null;\r\n  if (defaultEncoding == null || defaultEncoding === 'utf8' || defaultEncoding === 'utf-8') {\r\n    this[kState] |= kDefaultUTF8Encoding;\r\n  } else if (Buffer.isEncoding(defaultEncoding)) {\r\n    this[kState] &= ~kDefaultUTF8Encoding;\r\n    this[kDefaultEncodingValue] = defaultEncoding;\r\n  } else {\r\n    throw new ERR_UNKNOWN_ENCODING(defaultEncoding);\r\n  }\r\n\r\n  // Not an actual buffer we keep track of, but a measurement\r\n  // of how much we're waiting to get pushed to some underlying\r\n  // socket or file.\r\n  this.length = 0;\r\n\r\n  // When true all writes will be buffered until .uncork() call.\r\n  this.corked = 0;\r\n\r\n  // The callback that's passed to _write(chunk, cb).\r\n  this.onwrite = onwrite.bind(undefined, stream);\r\n\r\n  // The amount that is being written when _write is called.\r\n  this.writelen = 0;\r\n\r\n  resetBuffer(this);\r\n\r\n  // Number of pending user-supplied write callbacks\r\n  // this must be 0 before 'finish' can be emitted.\r\n  this.pendingcb = 0;\r\n}\r\n\r\nfunction resetBuffer(state) {\r\n  state[kBufferedValue] = null;\r\n  state.bufferedIndex = 0;\r\n  state[kState] |= kAllBuffers | kAllNoop;\r\n  state[kState] &= ~kBuffered;\r\n}\r\n\r\nWritableState.prototype.getBuffer = function getBuffer() {\r\n  return (this[kState] & kBuffered) === 0 ? [] : ArrayPrototypeSlice(this.buffered, this.bufferedIndex);\r\n};\r\n\r\nObjectDefineProperty(WritableState.prototype, 'bufferedRequestCount', {\r\n  __proto__: null,\r\n  get() {\r\n    return (this[kState] & kBuffered) === 0 ? 0 : this[kBufferedValue].length - this.bufferedIndex;\r\n  },\r\n});\r\n\r\nWritableState.prototype[kOnConstructed] = function onConstructed(stream) {\r\n  if ((this[kState] & kWriting) === 0) {\r\n    clearBuffer(stream, this);\r\n  }\r\n\r\n  if ((this[kState] & kEnding) !== 0) {\r\n    finishMaybe(stream, this);\r\n  }\r\n};\r\n\r\nfunction Writable(options) {\r\n  if (!(this instanceof Writable))\r\n    return new Writable(options);\r\n\r\n  this._events ??= {\r\n    close: undefined,\r\n    error: undefined,\r\n    prefinish: undefined,\r\n    finish: undefined,\r\n    drain: undefined,\r\n    // Skip uncommon events...\r\n    // [destroyImpl.kConstruct]: undefined,\r\n    // [destroyImpl.kDestroy]: undefined,\r\n  };\r\n\r\n  this._writableState = new WritableState(options, this, false);\r\n\r\n  if (options) {\r\n    if (typeof options.write === 'function')\r\n      this._write = options.write;\r\n\r\n    if (typeof options.writev === 'function')\r\n      this._writev = options.writev;\r\n\r\n    if (typeof options.destroy === 'function')\r\n      this._destroy = options.destroy;\r\n\r\n    if (typeof options.final === 'function')\r\n      this._final = options.final;\r\n\r\n    if (typeof options.construct === 'function')\r\n      this._construct = options.construct;\r\n\r\n    if (options.signal)\r\n      addAbortSignal(options.signal, this);\r\n  }\r\n\r\n  Stream.call(this, options);\r\n\r\n  if (this._construct != null) {\r\n    destroyImpl.construct(this, () => {\r\n      this._writableState[kOnConstructed](this);\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperty(Writable, SymbolHasInstance, {\r\n  __proto__: null,\r\n  value: function(object) {\r\n    if (FunctionPrototypeSymbolHasInstance(this, object)) return true;\r\n    if (this !== Writable) return false;\r\n\r\n    return object && object._writableState instanceof WritableState;\r\n  },\r\n});\r\n\r\n// Otherwise people can pipe Writable streams, which is just wrong.\r\nWritable.prototype.pipe = function() {\r\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\r\n};\r\n\r\nfunction _write(stream, chunk, encoding, cb) {\r\n  const state = stream._writableState;\r\n\r\n  if (cb == null || typeof cb !== 'function') {\r\n    cb = nop;\r\n  }\r\n\r\n  if (chunk === null) {\r\n    throw new ERR_STREAM_NULL_VALUES();\r\n  }\r\n\r\n  if ((state[kState] & kObjectMode) === 0) {\r\n    if (!encoding) {\r\n      encoding = (state[kState] & kDefaultUTF8Encoding) !== 0 ? 'utf8' : state.defaultEncoding;\r\n    } else if (encoding !== 'buffer' && !Buffer.isEncoding(encoding)) {\r\n      throw new ERR_UNKNOWN_ENCODING(encoding);\r\n    }\r\n\r\n    if (typeof chunk === 'string') {\r\n      if ((state[kState] & kDecodeStrings) !== 0) {\r\n        chunk = Buffer.from(chunk, encoding);\r\n        encoding = 'buffer';\r\n      }\r\n    } else if (chunk instanceof Buffer) {\r\n      encoding = 'buffer';\r\n    } else if (Stream._isArrayBufferView(chunk)) {\r\n      chunk = Stream._uint8ArrayToBuffer(chunk);\r\n      encoding = 'buffer';\r\n    } else {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'chunk', ['string', 'Buffer', 'TypedArray', 'DataView'], chunk);\r\n    }\r\n  }\r\n\r\n  let err;\r\n  if ((state[kState] & kEnding) !== 0) {\r\n    err = new ERR_STREAM_WRITE_AFTER_END();\r\n  } else if ((state[kState] & kDestroyed) !== 0) {\r\n    err = new ERR_STREAM_DESTROYED('write');\r\n  }\r\n\r\n  if (err) {\r\n    process.nextTick(cb, err);\r\n    errorOrDestroy(stream, err, true);\r\n    return err;\r\n  }\r\n\r\n  state.pendingcb++;\r\n  return writeOrBuffer(stream, state, chunk, encoding, cb);\r\n}\r\n\r\nWritable.prototype.write = function(chunk, encoding, cb) {\r\n  if (encoding != null && typeof encoding === 'function') {\r\n    cb = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  return _write(this, chunk, encoding, cb) === true;\r\n};\r\n\r\nWritable.prototype.cork = function() {\r\n  const state = this._writableState;\r\n\r\n  state[kState] |= kCorked;\r\n  state.corked++;\r\n};\r\n\r\nWritable.prototype.uncork = function() {\r\n  const state = this._writableState;\r\n\r\n  if (state.corked) {\r\n    state.corked--;\r\n\r\n    if (!state.corked) {\r\n      state[kState] &= ~kCorked;\r\n    }\r\n\r\n    if ((state[kState] & kWriting) === 0)\r\n      clearBuffer(this, state);\r\n  }\r\n};\r\n\r\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\r\n  // node::ParseEncoding() requires lower case.\r\n  if (typeof encoding === 'string')\r\n    encoding = StringPrototypeToLowerCase(encoding);\r\n  if (!Buffer.isEncoding(encoding))\r\n    throw new ERR_UNKNOWN_ENCODING(encoding);\r\n  this._writableState.defaultEncoding = encoding;\r\n  return this;\r\n};\r\n\r\n// If we're already writing something, then just put this\r\n// in the queue, and wait our turn.  Otherwise, call _write\r\n// If we return false, then we need a drain event, so set that flag.\r\nfunction writeOrBuffer(stream, state, chunk, encoding, callback) {\r\n  const len = (state[kState] & kObjectMode) !== 0 ? 1 : chunk.length;\r\n\r\n  state.length += len;\r\n\r\n  if ((state[kState] & (kWriting | kErrored | kCorked | kConstructed)) !== kConstructed) {\r\n    if ((state[kState] & kBuffered) === 0) {\r\n      state[kState] |= kBuffered;\r\n      state[kBufferedValue] = [];\r\n    }\r\n\r\n    state[kBufferedValue].push({ chunk, encoding, callback });\r\n    if ((state[kState] & kAllBuffers) !== 0 && encoding !== 'buffer') {\r\n      state[kState] &= ~kAllBuffers;\r\n    }\r\n    if ((state[kState] & kAllNoop) !== 0 && callback !== nop) {\r\n      state[kState] &= ~kAllNoop;\r\n    }\r\n  } else {\r\n    state.writelen = len;\r\n    if (callback !== nop) {\r\n      state.writecb = callback;\r\n    }\r\n    state[kState] |= kWriting | kSync | kExpectWriteCb;\r\n    stream._write(chunk, encoding, state.onwrite);\r\n    state[kState] &= ~kSync;\r\n  }\r\n\r\n  const ret = state.length < state.highWaterMark;\r\n\r\n  if (!ret) {\r\n    state[kState] |= kNeedDrain;\r\n  }\r\n\r\n  // Return false if errored or destroyed in order to break\r\n  // any synchronous while(stream.write(data)) loops.\r\n  return ret && (state[kState] & (kDestroyed | kErrored)) === 0;\r\n}\r\n\r\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\r\n  state.writelen = len;\r\n  if (cb !== nop) {\r\n    state.writecb = cb;\r\n  }\r\n  state[kState] |= kWriting | kSync | kExpectWriteCb;\r\n  if ((state[kState] & kDestroyed) !== 0)\r\n    state.onwrite(new ERR_STREAM_DESTROYED('write'));\r\n  else if (writev)\r\n    stream._writev(chunk, state.onwrite);\r\n  else\r\n    stream._write(chunk, encoding, state.onwrite);\r\n  state[kState] &= ~kSync;\r\n}\r\n\r\nfunction onwriteError(stream, state, er, cb) {\r\n  --state.pendingcb;\r\n\r\n  cb(er);\r\n  // Ensure callbacks are invoked even when autoDestroy is\r\n  // not enabled. Passing `er` here doesn't make sense since\r\n  // it's related to one specific write, not to the buffered\r\n  // writes.\r\n  errorBuffer(state);\r\n  // This can emit error, but error must always follow cb.\r\n  errorOrDestroy(stream, er);\r\n}\r\n\r\nfunction onwrite(stream, er) {\r\n  const state = stream._writableState;\r\n\r\n  if ((state[kState] & kExpectWriteCb) === 0) {\r\n    errorOrDestroy(stream, new ERR_MULTIPLE_CALLBACK());\r\n    return;\r\n  }\r\n\r\n  const sync = (state[kState] & kSync) !== 0;\r\n  const cb = (state[kState] & kWriteCb) !== 0 ? state[kWriteCbValue] : nop;\r\n\r\n  state.writecb = null;\r\n  state[kState] &= ~(kWriting | kExpectWriteCb);\r\n  state.length -= state.writelen;\r\n  state.writelen = 0;\r\n\r\n  if (er) {\r\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\r\n    er.stack; // eslint-disable-line no-unused-expressions\r\n\r\n    if ((state[kState] & kErrored) === 0) {\r\n      state[kErroredValue] = er;\r\n      state[kState] |= kErrored;\r\n    }\r\n\r\n    // In case of duplex streams we need to notify the readable side of the\r\n    // error.\r\n    if (stream._readableState && !stream._readableState.errored) {\r\n      stream._readableState.errored = er;\r\n    }\r\n\r\n    if (sync) {\r\n      process.nextTick(onwriteError, stream, state, er, cb);\r\n    } else {\r\n      onwriteError(stream, state, er, cb);\r\n    }\r\n  } else {\r\n    if ((state[kState] & kBuffered) !== 0) {\r\n      clearBuffer(stream, state);\r\n    }\r\n\r\n    if (sync) {\r\n      const needDrain = (state[kState] & kNeedDrain) !== 0 && state.length === 0;\r\n      const needTick = needDrain || (state[kState] & kDestroyed !== 0) || cb !== nop;\r\n\r\n      // It is a common case that the callback passed to .write() is always\r\n      // the same. In that case, we do not schedule a new nextTick(), but\r\n      // rather just increase a counter, to improve performance and avoid\r\n      // memory allocations.\r\n      if (cb === nop) {\r\n        if ((state[kState] & kAfterWritePending) === 0 && needTick) {\r\n          process.nextTick(afterWrite, stream, state, 1, cb);\r\n          state[kState] |= kAfterWritePending;\r\n        } else {\r\n          state.pendingcb--;\r\n          if ((state[kState] & kEnding) !== 0) {\r\n            finishMaybe(stream, state, true);\r\n          }\r\n        }\r\n      } else if ((state[kState] & kAfterWriteTickInfo) !== 0 &&\r\n                 state[kAfterWriteTickInfoValue].cb === cb) {\r\n        state[kAfterWriteTickInfoValue].count++;\r\n      } else if (needTick) {\r\n        state[kAfterWriteTickInfoValue] = { count: 1, cb, stream, state };\r\n        process.nextTick(afterWriteTick, state[kAfterWriteTickInfoValue]);\r\n        state[kState] |= (kAfterWritePending | kAfterWriteTickInfo);\r\n      } else {\r\n        state.pendingcb--;\r\n        if ((state[kState] & kEnding) !== 0) {\r\n          finishMaybe(stream, state, true);\r\n        }\r\n      }\r\n    } else {\r\n      afterWrite(stream, state, 1, cb);\r\n    }\r\n  }\r\n}\r\n\r\nfunction afterWriteTick({ stream, state, count, cb }) {\r\n  state[kState] &= ~kAfterWriteTickInfo;\r\n  state[kAfterWriteTickInfoValue] = null;\r\n  return afterWrite(stream, state, count, cb);\r\n}\r\n\r\nfunction afterWrite(stream, state, count, cb) {\r\n  state[kState] &= ~kAfterWritePending;\r\n\r\n  const needDrain = (state[kState] & (kEnding | kNeedDrain | kDestroyed)) === kNeedDrain && state.length === 0;\r\n  if (needDrain) {\r\n    state[kState] &= ~kNeedDrain;\r\n    stream.emit('drain');\r\n  }\r\n\r\n  while (count-- > 0) {\r\n    state.pendingcb--;\r\n    cb(null);\r\n  }\r\n\r\n  if ((state[kState] & kDestroyed) !== 0) {\r\n    errorBuffer(state);\r\n  }\r\n\r\n  if ((state[kState] & kEnding) !== 0) {\r\n    finishMaybe(stream, state, true);\r\n  }\r\n}\r\n\r\n// If there's something in the buffer waiting, then invoke callbacks.\r\nfunction errorBuffer(state) {\r\n  if ((state[kState] & kWriting) !== 0) {\r\n    return;\r\n  }\r\n\r\n  if ((state[kState] & kBuffered) !== 0) {\r\n    for (let n = state.bufferedIndex; n < state.buffered.length; ++n) {\r\n      const { chunk, callback } = state[kBufferedValue][n];\r\n      const len = (state[kState] & kObjectMode) !== 0 ? 1 : chunk.length;\r\n      state.length -= len;\r\n      callback(state.errored ?? new ERR_STREAM_DESTROYED('write'));\r\n    }\r\n  }\r\n\r\n\r\n  callFinishedCallbacks(state, state.errored ?? new ERR_STREAM_DESTROYED('end'));\r\n\r\n  resetBuffer(state);\r\n}\r\n\r\n// If there's something in the buffer waiting, then process it.\r\nfunction clearBuffer(stream, state) {\r\n  if ((state[kState] & (kDestroyed | kBufferProcessing | kCorked | kBuffered | kConstructed)) !==\r\n      (kBuffered | kConstructed)) {\r\n    return;\r\n  }\r\n\r\n  const objectMode = (state[kState] & kObjectMode) !== 0;\r\n  const { [kBufferedValue]: buffered, bufferedIndex } = state;\r\n  const bufferedLength = buffered.length - bufferedIndex;\r\n\r\n  if (!bufferedLength) {\r\n    return;\r\n  }\r\n\r\n  let i = bufferedIndex;\r\n\r\n  state[kState] |= kBufferProcessing;\r\n  if (bufferedLength > 1 && stream._writev) {\r\n    state.pendingcb -= bufferedLength - 1;\r\n\r\n    const callback = (state[kState] & kAllNoop) !== 0 ? nop : (err) => {\r\n      for (let n = i; n < buffered.length; ++n) {\r\n        buffered[n].callback(err);\r\n      }\r\n    };\r\n    // Make a copy of `buffered` if it's going to be used by `callback` above,\r\n    // since `doWrite` will mutate the array.\r\n    const chunks = (state[kState] & kAllNoop) !== 0 && i === 0 ?\r\n      buffered : ArrayPrototypeSlice(buffered, i);\r\n    chunks.allBuffers = (state[kState] & kAllBuffers) !== 0;\r\n\r\n    doWrite(stream, state, true, state.length, chunks, '', callback);\r\n\r\n    resetBuffer(state);\r\n  } else {\r\n    do {\r\n      const { chunk, encoding, callback } = buffered[i];\r\n      buffered[i++] = null;\r\n      const len = objectMode ? 1 : chunk.length;\r\n      doWrite(stream, state, false, len, chunk, encoding, callback);\r\n    } while (i < buffered.length && (state[kState] & kWriting) === 0);\r\n\r\n    if (i === buffered.length) {\r\n      resetBuffer(state);\r\n    } else if (i > 256) {\r\n      buffered.splice(0, i);\r\n      state.bufferedIndex = 0;\r\n    } else {\r\n      state.bufferedIndex = i;\r\n    }\r\n  }\r\n  state[kState] &= ~kBufferProcessing;\r\n}\r\n\r\nWritable.prototype._write = function(chunk, encoding, cb) {\r\n  if (this._writev) {\r\n    this._writev([{ chunk, encoding }], cb);\r\n  } else {\r\n    throw new ERR_METHOD_NOT_IMPLEMENTED('_write()');\r\n  }\r\n};\r\n\r\nWritable.prototype._writev = null;\r\n\r\nWritable.prototype.end = function(chunk, encoding, cb) {\r\n  const state = this._writableState;\r\n\r\n  if (typeof chunk === 'function') {\r\n    cb = chunk;\r\n    chunk = null;\r\n    encoding = null;\r\n  } else if (typeof encoding === 'function') {\r\n    cb = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  let err;\r\n\r\n  if (chunk != null) {\r\n    const ret = _write(this, chunk, encoding);\r\n    if (ret instanceof Error) {\r\n      err = ret;\r\n    }\r\n  }\r\n\r\n  // .end() fully uncorks.\r\n  if ((state[kState] & kCorked) !== 0) {\r\n    state.corked = 1;\r\n    this.uncork();\r\n  }\r\n\r\n  if (err) {\r\n    // Do nothing...\r\n  } else if ((state[kState] & (kEnding | kErrored)) === 0) {\r\n    // This is forgiving in terms of unnecessary calls to end() and can hide\r\n    // logic errors. However, usually such errors are harmless and causing a\r\n    // hard error can be disproportionately destructive. It is not always\r\n    // trivial for the user to determine whether end() needs to be called\r\n    // or not.\r\n\r\n    state[kState] |= kEnding;\r\n    finishMaybe(this, state, true);\r\n    state[kState] |= kEnded;\r\n  } else if ((state[kState] & kFinished) !== 0) {\r\n    err = new ERR_STREAM_ALREADY_FINISHED('end');\r\n  } else if ((state[kState] & kDestroyed) !== 0) {\r\n    err = new ERR_STREAM_DESTROYED('end');\r\n  }\r\n\r\n  if (typeof cb === 'function') {\r\n    if (err) {\r\n      process.nextTick(cb, err);\r\n    } else if ((state[kState] & kErrored) !== 0) {\r\n      process.nextTick(cb, state[kErroredValue]);\r\n    } else if ((state[kState] & kFinished) !== 0) {\r\n      process.nextTick(cb, null);\r\n    } else {\r\n      state[kState] |= kOnFinished;\r\n      state[kOnFinishedValue] ??= [];\r\n      state[kOnFinishedValue].push(cb);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nfunction needFinish(state) {\r\n  return (\r\n    // State is ended && constructed but not destroyed, finished, writing, errorEmitted or closedEmitted\r\n    (state[kState] & (\r\n      kEnding |\r\n          kDestroyed |\r\n          kConstructed |\r\n          kFinished |\r\n          kWriting |\r\n          kErrorEmitted |\r\n          kCloseEmitted |\r\n          kErrored |\r\n          kBuffered\r\n    )) === (kEnding | kConstructed) && state.length === 0);\r\n}\r\n\r\nfunction onFinish(stream, state, err) {\r\n  if ((state[kState] & kPrefinished) !== 0) {\r\n    errorOrDestroy(stream, err ?? new ERR_MULTIPLE_CALLBACK());\r\n    return;\r\n  }\r\n  state.pendingcb--;\r\n  if (err) {\r\n    callFinishedCallbacks(state, err);\r\n    errorOrDestroy(stream, err, (state[kState] & kSync) !== 0);\r\n  } else if (needFinish(state)) {\r\n    state[kState] |= kPrefinished;\r\n    stream.emit('prefinish');\r\n    // Backwards compat. Don't check state.sync here.\r\n    // Some streams assume 'finish' will be emitted\r\n    // asynchronously relative to _final callback.\r\n    state.pendingcb++;\r\n    process.nextTick(finish, stream, state);\r\n  }\r\n}\r\n\r\nfunction prefinish(stream, state) {\r\n  if ((state[kState] & (kPrefinished | kFinalCalled)) !== 0) {\r\n    return;\r\n  }\r\n\r\n  if (typeof stream._final === 'function' && (state[kState] & kDestroyed) === 0) {\r\n    state[kState] |= kFinalCalled | kSync;\r\n    state.pendingcb++;\r\n\r\n    try {\r\n      stream._final((err) => onFinish(stream, state, err));\r\n    } catch (err) {\r\n      onFinish(stream, state, err);\r\n    }\r\n\r\n    state[kState] &= ~kSync;\r\n  } else {\r\n    state[kState] |= kFinalCalled | kPrefinished;\r\n    stream.emit('prefinish');\r\n  }\r\n}\r\n\r\nfunction finishMaybe(stream, state, sync) {\r\n  if (needFinish(state)) {\r\n    prefinish(stream, state);\r\n    if (state.pendingcb === 0) {\r\n      if (sync) {\r\n        state.pendingcb++;\r\n        process.nextTick((stream, state) => {\r\n          if (needFinish(state)) {\r\n            finish(stream, state);\r\n          } else {\r\n            state.pendingcb--;\r\n          }\r\n        }, stream, state);\r\n      } else if (needFinish(state)) {\r\n        state.pendingcb++;\r\n        finish(stream, state);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction finish(stream, state) {\r\n  state.pendingcb--;\r\n  state[kState] |= kFinished;\r\n\r\n  callFinishedCallbacks(state, null);\r\n\r\n  stream.emit('finish');\r\n\r\n  if ((state[kState] & kAutoDestroy) !== 0) {\r\n    // In case of duplex streams we need a way to detect\r\n    // if the readable side is ready for autoDestroy as well.\r\n    const rState = stream._readableState;\r\n    const autoDestroy = !rState || (\r\n      rState.autoDestroy &&\r\n      // We don't expect the readable to ever 'end'\r\n      // if readable is explicitly set to false.\r\n      (rState.endEmitted || rState.readable === false)\r\n    );\r\n    if (autoDestroy) {\r\n      stream.destroy();\r\n    }\r\n  }\r\n}\r\n\r\nfunction callFinishedCallbacks(state, err) {\r\n  if ((state[kState] & kOnFinished) === 0) {\r\n    return;\r\n  }\r\n\r\n  const onfinishCallbacks = state[kOnFinishedValue];\r\n  state[kOnFinishedValue] = null;\r\n  state[kState] &= ~kOnFinished;\r\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\r\n    onfinishCallbacks[i](err);\r\n  }\r\n}\r\n\r\nObjectDefineProperties(Writable.prototype, {\r\n  closed: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._writableState ? (this._writableState[kState] & kClosed) !== 0 : false;\r\n    },\r\n  },\r\n\r\n  destroyed: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._writableState ? (this._writableState[kState] & kDestroyed) !== 0 : false;\r\n    },\r\n    set(value) {\r\n      // Backward compatibility, the user is explicitly managing destroyed.\r\n      if (!this._writableState) return;\r\n\r\n      if (value) this._writableState[kState] |= kDestroyed;\r\n      else this._writableState[kState] &= ~kDestroyed;\r\n    },\r\n  },\r\n\r\n  writable: {\r\n    __proto__: null,\r\n    get() {\r\n      const w = this._writableState;\r\n      // w.writable === false means that this is part of a Duplex stream\r\n      // where the writable side was disabled upon construction.\r\n      // Compat. The user might manually disable writable side through\r\n      // deprecated setter.\r\n      return !!w && w.writable !== false &&\r\n        (w[kState] & (kEnding | kEnded | kDestroyed | kErrored)) === 0;\r\n    },\r\n    set(val) {\r\n      // Backwards compatible.\r\n      if (this._writableState) {\r\n        this._writableState.writable = !!val;\r\n      }\r\n    },\r\n  },\r\n\r\n  writableFinished: {\r\n    __proto__: null,\r\n    get() {\r\n      const state = this._writableState;\r\n      return state ? (state[kState] & kFinished) !== 0 : false;\r\n    },\r\n  },\r\n\r\n  writableObjectMode: {\r\n    __proto__: null,\r\n    get() {\r\n      const state = this._writableState;\r\n      return state ? (state[kState] & kObjectMode) !== 0 : false;\r\n    },\r\n  },\r\n\r\n  writableBuffer: {\r\n    __proto__: null,\r\n    get() {\r\n      const state = this._writableState;\r\n      return state && state.getBuffer();\r\n    },\r\n  },\r\n\r\n  writableEnded: {\r\n    __proto__: null,\r\n    get() {\r\n      const state = this._writableState;\r\n      return state ? (state[kState] & kEnding) !== 0 : false;\r\n    },\r\n  },\r\n\r\n  writableNeedDrain: {\r\n    __proto__: null,\r\n    get() {\r\n      const state = this._writableState;\r\n      return state ? (state[kState] & (kDestroyed | kEnding | kNeedDrain)) === kNeedDrain : false;\r\n    },\r\n  },\r\n\r\n  writableHighWaterMark: {\r\n    __proto__: null,\r\n    get() {\r\n      const state = this._writableState;\r\n      return state && state.highWaterMark;\r\n    },\r\n  },\r\n\r\n  writableCorked: {\r\n    __proto__: null,\r\n    get() {\r\n      const state = this._writableState;\r\n      return state ? state.corked : 0;\r\n    },\r\n  },\r\n\r\n  writableLength: {\r\n    __proto__: null,\r\n    get() {\r\n      const state = this._writableState;\r\n      return state && state.length;\r\n    },\r\n  },\r\n\r\n  errored: {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    get() {\r\n      const state = this._writableState;\r\n      return state ? state.errored : null;\r\n    },\r\n  },\r\n\r\n  writableAborted: {\r\n    __proto__: null,\r\n    get: function() {\r\n      const state = this._writableState;\r\n      return (\r\n        (state[kState] & (kHasWritable | kWritable)) !== kHasWritable &&\r\n        (state[kState] & (kDestroyed | kErrored)) !== 0 &&\r\n        (state[kState] & kFinished) === 0\r\n      );\r\n    },\r\n  },\r\n});\r\n\r\nconst destroy = destroyImpl.destroy;\r\nWritable.prototype.destroy = function(err, cb) {\r\n  const state = this._writableState;\r\n\r\n  // Invoke pending callbacks.\r\n  if ((state[kState] & (kBuffered | kOnFinished)) !== 0 && (state[kState] & kDestroyed) === 0) {\r\n    process.nextTick(errorBuffer, state);\r\n  }\r\n\r\n  destroy.call(this, err, cb);\r\n  return this;\r\n};\r\n\r\nWritable.prototype._undestroy = destroyImpl.undestroy;\r\nWritable.prototype._destroy = function(err, cb) {\r\n  cb(err);\r\n};\r\n\r\nWritable.prototype[EE.captureRejectionSymbol] = function(err) {\r\n  this.destroy(err);\r\n};\r\n\r\nlet webStreamsAdapters;\r\n\r\n// Lazy to avoid circular references\r\nfunction lazyWebStreams() {\r\n  if (webStreamsAdapters === undefined)\r\n    webStreamsAdapters = require('internal/webstreams/adapters');\r\n  return webStreamsAdapters;\r\n}\r\n\r\nWritable.fromWeb = function(writableStream, options) {\r\n  return lazyWebStreams().newStreamWritableFromWritableStream(\r\n    writableStream,\r\n    options);\r\n};\r\n\r\nWritable.toWeb = function(streamWritable) {\r\n  return lazyWebStreams().newWritableStreamFromStreamWritable(streamWritable);\r\n};\r\n"
  },
  "97": {
    "metadata": {
      "scriptId": "97",
      "url": "node:stream/promises",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 44,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "656a5e36ab3ea28f99b5fa91bc0b91393755d5d2d8cf10d81bb02897aa099904",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 961,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:stream/promises"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePop,\r\n  Promise,\r\n} = primordials;\r\n\r\nconst {\r\n  isIterable,\r\n  isNodeStream,\r\n  isWebStream,\r\n} = require('internal/streams/utils');\r\n\r\nconst { pipelineImpl: pl } = require('internal/streams/pipeline');\r\nconst { finished } = require('internal/streams/end-of-stream');\r\n\r\nrequire('stream');\r\n\r\nfunction pipeline(...streams) {\r\n  return new Promise((resolve, reject) => {\r\n    let signal;\r\n    let end;\r\n    const lastArg = streams[streams.length - 1];\r\n    if (lastArg && typeof lastArg === 'object' &&\r\n        !isNodeStream(lastArg) && !isIterable(lastArg) && !isWebStream(lastArg)) {\r\n      const options = ArrayPrototypePop(streams);\r\n      signal = options.signal;\r\n      end = options.end;\r\n    }\r\n\r\n    pl(streams, (err, value) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve(value);\r\n      }\r\n    }, { signal, end });\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  finished,\r\n  pipeline,\r\n};\r\n"
  },
  "98": {
    "metadata": {
      "scriptId": "98",
      "url": "node:internal/streams/transform",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 204,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "9b2d7e14f0ce0c558dc9b09d2df51ebbcb85c2e7732227e0794f8da96e8699f5",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 7325,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/transform"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// a transform stream is a readable/writable stream where you do\r\n// something with the data.  Sometimes it's called a \"filter\",\r\n// but that's not a great name for it, since that implies a thing where\r\n// some bits pass through, and others are simply ignored.  (That would\r\n// be a valid example of a transform, of course.)\r\n//\r\n// While the output is causally related to the input, it's not a\r\n// necessarily symmetric or synchronous transformation.  For example,\r\n// a zlib stream might take multiple plain-text writes(), and then\r\n// emit a single compressed chunk some time in the future.\r\n//\r\n// Here's how this works:\r\n//\r\n// The Transform stream has all the aspects of the readable and writable\r\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\r\n// internally, and returns false if there's a lot of pending writes\r\n// buffered up.  When you call read(), that calls _read(n) until\r\n// there's enough pending readable data buffered up.\r\n//\r\n// In a transform stream, the written data is placed in a buffer.  When\r\n// _read(n) is called, it transforms the queued up data, calling the\r\n// buffered _write cb's as it consumes chunks.  If consuming a single\r\n// written chunk would result in multiple output chunks, then the first\r\n// outputted bit calls the readcb, and subsequent chunks just go into\r\n// the read buffer, and will cause it to emit 'readable' if necessary.\r\n//\r\n// This way, back-pressure is actually determined by the reading side,\r\n// since _read has to be called to start processing a new chunk.  However,\r\n// a pathological inflate type of transform can cause excessive buffering\r\n// here.  For example, imagine a stream where every byte of input is\r\n// interpreted as an integer from 0-255, and then results in that many\r\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\r\n// 1kb of data being output.  In this case, you could write a very small\r\n// amount of input, and end up with a very large amount of output.  In\r\n// such a pathological inflating mechanism, there'd be no way to tell\r\n// the system to stop doing the transform.  A single 4MB write could\r\n// cause the system to run out of memory.\r\n//\r\n// However, even in such a pathological case, only a single written chunk\r\n// would be consumed, and then the rest would wait (un-transformed) until\r\n// the results of the previous transformed chunk were consumed.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ObjectSetPrototypeOf,\r\n  Symbol,\r\n} = primordials;\r\n\r\nmodule.exports = Transform;\r\nconst {\r\n  ERR_METHOD_NOT_IMPLEMENTED,\r\n} = require('internal/errors').codes;\r\nconst Duplex = require('internal/streams/duplex');\r\nconst { getHighWaterMark } = require('internal/streams/state');\r\nObjectSetPrototypeOf(Transform.prototype, Duplex.prototype);\r\nObjectSetPrototypeOf(Transform, Duplex);\r\n\r\nconst kCallback = Symbol('kCallback');\r\n\r\nfunction Transform(options) {\r\n  if (!(this instanceof Transform))\r\n    return new Transform(options);\r\n\r\n  // TODO (ronag): This should preferably always be\r\n  // applied but would be semver-major. Or even better;\r\n  // make Transform a Readable with the Writable interface.\r\n  const readableHighWaterMark = options ? getHighWaterMark(this, options, 'readableHighWaterMark', true) : null;\r\n  if (readableHighWaterMark === 0) {\r\n    // A Duplex will buffer both on the writable and readable side while\r\n    // a Transform just wants to buffer hwm number of elements. To avoid\r\n    // buffering twice we disable buffering on the writable side.\r\n    options = {\r\n      ...options,\r\n      highWaterMark: null,\r\n      readableHighWaterMark,\r\n      writableHighWaterMark: options.writableHighWaterMark || 0,\r\n    };\r\n  }\r\n\r\n  Duplex.call(this, options);\r\n\r\n  // We have implemented the _read method, and done the other things\r\n  // that Readable wants before the first _read call, so unset the\r\n  // sync guard flag.\r\n  this._readableState.sync = false;\r\n\r\n  this[kCallback] = null;\r\n\r\n  if (options) {\r\n    if (typeof options.transform === 'function')\r\n      this._transform = options.transform;\r\n\r\n    if (typeof options.flush === 'function')\r\n      this._flush = options.flush;\r\n  }\r\n\r\n  // When the writable side finishes, then flush out anything remaining.\r\n  // Backwards compat. Some Transform streams incorrectly implement _final\r\n  // instead of or in addition to _flush. By using 'prefinish' instead of\r\n  // implementing _final we continue supporting this unfortunate use case.\r\n  this.on('prefinish', prefinish);\r\n}\r\n\r\nfunction final(cb) {\r\n  if (typeof this._flush === 'function' && !this.destroyed) {\r\n    this._flush((er, data) => {\r\n      if (er) {\r\n        if (cb) {\r\n          cb(er);\r\n        } else {\r\n          this.destroy(er);\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (data != null) {\r\n        this.push(data);\r\n      }\r\n      this.push(null);\r\n      if (cb) {\r\n        cb();\r\n      }\r\n    });\r\n  } else {\r\n    this.push(null);\r\n    if (cb) {\r\n      cb();\r\n    }\r\n  }\r\n}\r\n\r\nfunction prefinish() {\r\n  if (this._final !== final) {\r\n    final.call(this);\r\n  }\r\n}\r\n\r\nTransform.prototype._final = final;\r\n\r\nTransform.prototype._transform = function(chunk, encoding, callback) {\r\n  throw new ERR_METHOD_NOT_IMPLEMENTED('_transform()');\r\n};\r\n\r\nTransform.prototype._write = function(chunk, encoding, callback) {\r\n  const rState = this._readableState;\r\n  const wState = this._writableState;\r\n  const length = rState.length;\r\n\r\n  this._transform(chunk, encoding, (err, val) => {\r\n    if (err) {\r\n      callback(err);\r\n      return;\r\n    }\r\n\r\n    if (val != null) {\r\n      this.push(val);\r\n    }\r\n\r\n    if (rState.ended) {\r\n      // If user has called this.push(null) we have to\r\n      // delay the callback to properly progate the new\r\n      // state.\r\n      process.nextTick(callback);\r\n    } else if (\r\n      wState.ended || // Backwards compat.\r\n      length === rState.length || // Backwards compat.\r\n      rState.length < rState.highWaterMark\r\n    ) {\r\n      callback();\r\n    } else {\r\n      this[kCallback] = callback;\r\n    }\r\n  });\r\n};\r\n\r\nTransform.prototype._read = function() {\r\n  if (this[kCallback]) {\r\n    const callback = this[kCallback];\r\n    this[kCallback] = null;\r\n    callback();\r\n  }\r\n};\r\n"
  },
  "99": {
    "metadata": {
      "scriptId": "99",
      "url": "node:internal/streams/passthrough",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 47,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "82f55466f4ec4583f2da8cdc5329d5e94b2c2e9f5469dd709568c8c26683ac5e",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1809,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/passthrough"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// a passthrough stream.\r\n// basically just the most minimal sort of Transform stream.\r\n// Every written chunk gets output as-is.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ObjectSetPrototypeOf,\r\n} = primordials;\r\n\r\nmodule.exports = PassThrough;\r\n\r\nconst Transform = require('internal/streams/transform');\r\nObjectSetPrototypeOf(PassThrough.prototype, Transform.prototype);\r\nObjectSetPrototypeOf(PassThrough, Transform);\r\n\r\nfunction PassThrough(options) {\r\n  if (!(this instanceof PassThrough))\r\n    return new PassThrough(options);\r\n\r\n  Transform.call(this, options);\r\n}\r\n\r\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\r\n  cb(null, chunk);\r\n};\r\n"
  },
  "100": {
    "metadata": {
      "scriptId": "100",
      "url": "node:internal/stream_base_commons",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 282,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "24cbe49900e50cc5cc820a9315ce951a7767c2ebb015f4ac2557f536f91c7013",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 7452,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/stream_base_commons"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst { Buffer } = require('buffer');\r\nconst { FastBuffer } = require('internal/buffer');\r\nconst {\r\n  WriteWrap,\r\n  kReadBytesOrError,\r\n  kArrayBufferOffset,\r\n  kBytesWritten,\r\n  kLastWriteWasAsync,\r\n  streamBaseState,\r\n} = internalBinding('stream_wrap');\r\nconst { UV_EOF } = internalBinding('uv');\r\nconst {\r\n  ErrnoException,\r\n} = require('internal/errors');\r\nconst { owner_symbol } = require('internal/async_hooks').symbols;\r\nconst {\r\n  kTimeout,\r\n  setUnrefTimeout,\r\n  getTimerDuration,\r\n} = require('internal/timers');\r\nconst { isUint8Array } = require('internal/util/types');\r\nconst { clearTimeout } = require('timers');\r\nconst { validateFunction } = require('internal/validators');\r\n\r\nconst kMaybeDestroy = Symbol('kMaybeDestroy');\r\nconst kUpdateTimer = Symbol('kUpdateTimer');\r\nconst kAfterAsyncWrite = Symbol('kAfterAsyncWrite');\r\nconst kHandle = Symbol('kHandle');\r\nconst kBoundSession = Symbol('kBoundSession');\r\nconst kSession = Symbol('kSession');\r\n\r\nlet debug = require('internal/util/debuglog').debuglog('stream', (fn) => {\r\n  debug = fn;\r\n});\r\nconst kBuffer = Symbol('kBuffer');\r\nconst kBufferGen = Symbol('kBufferGen');\r\nconst kBufferCb = Symbol('kBufferCb');\r\n\r\nfunction handleWriteReq(req, data, encoding) {\r\n  const { handle } = req;\r\n\r\n  switch (encoding) {\r\n    case 'buffer':\r\n    {\r\n      const ret = handle.writeBuffer(req, data);\r\n      if (streamBaseState[kLastWriteWasAsync])\r\n        req.buffer = data;\r\n      return ret;\r\n    }\r\n    case 'latin1':\r\n    case 'binary':\r\n      return handle.writeLatin1String(req, data);\r\n    case 'utf8':\r\n    case 'utf-8':\r\n      return handle.writeUtf8String(req, data);\r\n    case 'ascii':\r\n      return handle.writeAsciiString(req, data);\r\n    case 'ucs2':\r\n    case 'ucs-2':\r\n    case 'utf16le':\r\n    case 'utf-16le':\r\n      return handle.writeUcs2String(req, data);\r\n    default:\r\n    {\r\n      const buffer = Buffer.from(data, encoding);\r\n      const ret = handle.writeBuffer(req, buffer);\r\n      if (streamBaseState[kLastWriteWasAsync])\r\n        req.buffer = buffer;\r\n      return ret;\r\n    }\r\n  }\r\n}\r\n\r\nfunction onWriteComplete(status) {\r\n  debug('onWriteComplete', status, this.error);\r\n\r\n  const stream = this.handle[owner_symbol];\r\n\r\n  if (stream.destroyed) {\r\n    if (typeof this.callback === 'function')\r\n      this.callback(null);\r\n    return;\r\n  }\r\n\r\n  // TODO (ronag): This should be moved before if(stream.destroyed)\r\n  // in order to avoid swallowing error.\r\n  if (status < 0) {\r\n    const ex = new ErrnoException(status, 'write', this.error);\r\n    if (typeof this.callback === 'function')\r\n      this.callback(ex);\r\n    else\r\n      stream.destroy(ex);\r\n    return;\r\n  }\r\n\r\n  stream[kUpdateTimer]();\r\n  stream[kAfterAsyncWrite](this);\r\n\r\n  if (typeof this.callback === 'function')\r\n    this.callback(null);\r\n}\r\n\r\nfunction createWriteWrap(handle, callback) {\r\n  const req = new WriteWrap();\r\n\r\n  req.handle = handle;\r\n  req.oncomplete = onWriteComplete;\r\n  req.async = false;\r\n  req.bytes = 0;\r\n  req.buffer = null;\r\n  req.callback = callback;\r\n\r\n  return req;\r\n}\r\n\r\nfunction writevGeneric(self, data, cb) {\r\n  const req = createWriteWrap(self[kHandle], cb);\r\n  const allBuffers = data.allBuffers;\r\n  let chunks;\r\n  if (allBuffers) {\r\n    chunks = data;\r\n    for (let i = 0; i < data.length; i++)\r\n      data[i] = data[i].chunk;\r\n  } else {\r\n    chunks = new Array(data.length << 1);\r\n    for (let i = 0; i < data.length; i++) {\r\n      const entry = data[i];\r\n      chunks[i * 2] = entry.chunk;\r\n      chunks[i * 2 + 1] = entry.encoding;\r\n    }\r\n  }\r\n  const err = req.handle.writev(req, chunks, allBuffers);\r\n\r\n  // Retain chunks\r\n  if (err === 0) req._chunks = chunks;\r\n\r\n  afterWriteDispatched(req, err, cb);\r\n  return req;\r\n}\r\n\r\nfunction writeGeneric(self, data, encoding, cb) {\r\n  const req = createWriteWrap(self[kHandle], cb);\r\n  const err = handleWriteReq(req, data, encoding);\r\n\r\n  afterWriteDispatched(req, err, cb);\r\n  return req;\r\n}\r\n\r\nfunction afterWriteDispatched(req, err, cb) {\r\n  req.bytes = streamBaseState[kBytesWritten];\r\n  req.async = !!streamBaseState[kLastWriteWasAsync];\r\n\r\n  if (err !== 0)\r\n    return cb(new ErrnoException(err, 'write', req.error));\r\n\r\n  if (!req.async && typeof req.callback === 'function') {\r\n    req.callback();\r\n  }\r\n}\r\n\r\nfunction onStreamRead(arrayBuffer) {\r\n  const nread = streamBaseState[kReadBytesOrError];\r\n\r\n  const handle = this;\r\n  const stream = this[owner_symbol];\r\n\r\n  stream[kUpdateTimer]();\r\n\r\n  if (nread > 0 && !stream.destroyed) {\r\n    let ret;\r\n    let result;\r\n    const userBuf = stream[kBuffer];\r\n    if (userBuf) {\r\n      result = (stream[kBufferCb](nread, userBuf) !== false);\r\n      const bufGen = stream[kBufferGen];\r\n      if (bufGen !== null) {\r\n        const nextBuf = bufGen();\r\n        if (isUint8Array(nextBuf))\r\n          stream[kBuffer] = ret = nextBuf;\r\n      }\r\n    } else {\r\n      const offset = streamBaseState[kArrayBufferOffset];\r\n      const buf = new FastBuffer(arrayBuffer, offset, nread);\r\n      result = stream.push(buf);\r\n    }\r\n    if (!result) {\r\n      handle.reading = false;\r\n      if (!stream.destroyed) {\r\n        const err = handle.readStop();\r\n        if (err)\r\n          stream.destroy(new ErrnoException(err, 'read'));\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  if (nread === 0) {\r\n    return;\r\n  }\r\n\r\n  // After seeing EOF, most streams will be closed permanently,\r\n  // and will not deliver any more read events after this point.\r\n  // (equivalently, it should have called readStop on itself already).\r\n  // Some streams may be reset and explicitly started again with a call\r\n  // to readStart, such as TTY.\r\n\r\n  if (nread !== UV_EOF) {\r\n    // CallJSOnreadMethod expects the return value to be a buffer.\r\n    // Ref: https://github.com/nodejs/node/pull/34375\r\n    stream.destroy(new ErrnoException(nread, 'read'));\r\n    return;\r\n  }\r\n\r\n  // Defer this until we actually emit end\r\n  if (stream._readableState.endEmitted) {\r\n    if (stream[kMaybeDestroy])\r\n      stream[kMaybeDestroy]();\r\n  } else {\r\n    if (stream[kMaybeDestroy])\r\n      stream.on('end', stream[kMaybeDestroy]);\r\n\r\n    // Push a null to signal the end of data.\r\n    // Do it before `maybeDestroy` for correct order of events:\r\n    // `end` -> `close`\r\n    stream.push(null);\r\n    stream.read(0);\r\n  }\r\n}\r\n\r\nfunction setStreamTimeout(msecs, callback) {\r\n  if (this.destroyed)\r\n    return this;\r\n\r\n  this.timeout = msecs;\r\n\r\n  // Type checking identical to timers.enroll()\r\n  msecs = getTimerDuration(msecs, 'msecs');\r\n\r\n  // Attempt to clear an existing timer in both cases -\r\n  //  even if it will be rescheduled we don't want to leak an existing timer.\r\n  clearTimeout(this[kTimeout]);\r\n\r\n  if (msecs === 0) {\r\n    if (callback !== undefined) {\r\n      validateFunction(callback, 'callback');\r\n      this.removeListener('timeout', callback);\r\n    }\r\n  } else {\r\n    this[kTimeout] = setUnrefTimeout(this._onTimeout.bind(this), msecs);\r\n    if (this[kSession]) this[kSession][kUpdateTimer]();\r\n    if (this[kBoundSession]) this[kBoundSession][kUpdateTimer]();\r\n\r\n    if (callback !== undefined) {\r\n      validateFunction(callback, 'callback');\r\n      this.once('timeout', callback);\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\nmodule.exports = {\r\n  writevGeneric,\r\n  writeGeneric,\r\n  onStreamRead,\r\n  kAfterAsyncWrite,\r\n  kMaybeDestroy,\r\n  kUpdateTimer,\r\n  kHandle,\r\n  kSession,\r\n  setStreamTimeout,\r\n  kBuffer,\r\n  kBufferCb,\r\n  kBufferGen,\r\n};\r\n"
  },
  "101": {
    "metadata": {
      "scriptId": "101",
      "url": "node:diagnostics_channel",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 428,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "0df00b9a02f8394a4fdd3d17df5e9a4590b72e738a848233922d89e5b79a1048",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10199,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:diagnostics_channel"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeAt,\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSplice,\r\n  ObjectDefineProperty,\r\n  ObjectGetPrototypeOf,\r\n  ObjectSetPrototypeOf,\r\n  Promise,\r\n  PromisePrototypeThen,\r\n  PromiseReject,\r\n  PromiseResolve,\r\n  ReflectApply,\r\n  SafeFinalizationRegistry,\r\n  SafeMap,\r\n  SymbolHasInstance,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  validateFunction,\r\n} = require('internal/validators');\r\n\r\nconst { triggerUncaughtException } = internalBinding('errors');\r\n\r\nconst { WeakReference } = require('internal/util');\r\n\r\n// Can't delete when weakref count reaches 0 as it could increment again.\r\n// Only GC can be used as a valid time to clean up the channels map.\r\nclass WeakRefMap extends SafeMap {\r\n  #finalizers = new SafeFinalizationRegistry((key) => {\r\n    this.delete(key);\r\n  });\r\n\r\n  set(key, value) {\r\n    this.#finalizers.register(value, key);\r\n    return super.set(key, new WeakReference(value));\r\n  }\r\n\r\n  get(key) {\r\n    return super.get(key)?.get();\r\n  }\r\n\r\n  incRef(key) {\r\n    return super.get(key)?.incRef();\r\n  }\r\n\r\n  decRef(key) {\r\n    return super.get(key)?.decRef();\r\n  }\r\n}\r\n\r\nfunction markActive(channel) {\r\n  // eslint-disable-next-line no-use-before-define\r\n  ObjectSetPrototypeOf(channel, ActiveChannel.prototype);\r\n  channel._subscribers = [];\r\n  channel._stores = new SafeMap();\r\n}\r\n\r\nfunction maybeMarkInactive(channel) {\r\n  // When there are no more active subscribers or bound, restore to fast prototype.\r\n  if (!channel._subscribers.length && !channel._stores.size) {\r\n    // eslint-disable-next-line no-use-before-define\r\n    ObjectSetPrototypeOf(channel, Channel.prototype);\r\n    channel._subscribers = undefined;\r\n    channel._stores = undefined;\r\n  }\r\n}\r\n\r\nfunction defaultTransform(data) {\r\n  return data;\r\n}\r\n\r\nfunction wrapStoreRun(store, data, next, transform = defaultTransform) {\r\n  return () => {\r\n    let context;\r\n    try {\r\n      context = transform(data);\r\n    } catch (err) {\r\n      process.nextTick(() => {\r\n        triggerUncaughtException(err, false);\r\n      });\r\n      return next();\r\n    }\r\n\r\n    return store.run(context, next);\r\n  };\r\n}\r\n\r\n// TODO(qard): should there be a C++ channel interface?\r\nclass ActiveChannel {\r\n  subscribe(subscription) {\r\n    validateFunction(subscription, 'subscription');\r\n    ArrayPrototypePush(this._subscribers, subscription);\r\n    channels.incRef(this.name);\r\n  }\r\n\r\n  unsubscribe(subscription) {\r\n    const index = ArrayPrototypeIndexOf(this._subscribers, subscription);\r\n    if (index === -1) return false;\r\n\r\n    ArrayPrototypeSplice(this._subscribers, index, 1);\r\n\r\n    channels.decRef(this.name);\r\n    maybeMarkInactive(this);\r\n\r\n    return true;\r\n  }\r\n\r\n  bindStore(store, transform) {\r\n    const replacing = this._stores.has(store);\r\n    if (!replacing) channels.incRef(this.name);\r\n    this._stores.set(store, transform);\r\n  }\r\n\r\n  unbindStore(store) {\r\n    if (!this._stores.has(store)) {\r\n      return false;\r\n    }\r\n\r\n    this._stores.delete(store);\r\n\r\n    channels.decRef(this.name);\r\n    maybeMarkInactive(this);\r\n\r\n    return true;\r\n  }\r\n\r\n  get hasSubscribers() {\r\n    return true;\r\n  }\r\n\r\n  publish(data) {\r\n    for (let i = 0; i < (this._subscribers?.length || 0); i++) {\r\n      try {\r\n        const onMessage = this._subscribers[i];\r\n        onMessage(data, this.name);\r\n      } catch (err) {\r\n        process.nextTick(() => {\r\n          triggerUncaughtException(err, false);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  runStores(data, fn, thisArg, ...args) {\r\n    let run = () => {\r\n      this.publish(data);\r\n      return ReflectApply(fn, thisArg, args);\r\n    };\r\n\r\n    for (const entry of this._stores.entries()) {\r\n      const store = entry[0];\r\n      const transform = entry[1];\r\n      run = wrapStoreRun(store, data, run, transform);\r\n    }\r\n\r\n    return run();\r\n  }\r\n}\r\n\r\nclass Channel {\r\n  constructor(name) {\r\n    this._subscribers = undefined;\r\n    this._stores = undefined;\r\n    this.name = name;\r\n\r\n    channels.set(name, this);\r\n  }\r\n\r\n  static [SymbolHasInstance](instance) {\r\n    const prototype = ObjectGetPrototypeOf(instance);\r\n    return prototype === Channel.prototype ||\r\n           prototype === ActiveChannel.prototype;\r\n  }\r\n\r\n  subscribe(subscription) {\r\n    markActive(this);\r\n    this.subscribe(subscription);\r\n  }\r\n\r\n  unsubscribe() {\r\n    return false;\r\n  }\r\n\r\n  bindStore(store, transform) {\r\n    markActive(this);\r\n    this.bindStore(store, transform);\r\n  }\r\n\r\n  unbindStore() {\r\n    return false;\r\n  }\r\n\r\n  get hasSubscribers() {\r\n    return false;\r\n  }\r\n\r\n  publish() {}\r\n\r\n  runStores(data, fn, thisArg, ...args) {\r\n    return ReflectApply(fn, thisArg, args);\r\n  }\r\n}\r\n\r\nconst channels = new WeakRefMap();\r\n\r\nfunction channel(name) {\r\n  const channel = channels.get(name);\r\n  if (channel) return channel;\r\n\r\n  if (typeof name !== 'string' && typeof name !== 'symbol') {\r\n    throw new ERR_INVALID_ARG_TYPE('channel', ['string', 'symbol'], name);\r\n  }\r\n\r\n  return new Channel(name);\r\n}\r\n\r\nfunction subscribe(name, subscription) {\r\n  return channel(name).subscribe(subscription);\r\n}\r\n\r\nfunction unsubscribe(name, subscription) {\r\n  return channel(name).unsubscribe(subscription);\r\n}\r\n\r\nfunction hasSubscribers(name) {\r\n  const channel = channels.get(name);\r\n  if (!channel) return false;\r\n\r\n  return channel.hasSubscribers;\r\n}\r\n\r\nconst traceEvents = [\r\n  'start',\r\n  'end',\r\n  'asyncStart',\r\n  'asyncEnd',\r\n  'error',\r\n];\r\n\r\nfunction assertChannel(value, name) {\r\n  if (!(value instanceof Channel)) {\r\n    throw new ERR_INVALID_ARG_TYPE(name, ['Channel'], value);\r\n  }\r\n}\r\n\r\nfunction tracingChannelFrom(nameOrChannels, name) {\r\n  if (typeof nameOrChannels === 'string') {\r\n    return channel(`tracing:${nameOrChannels}:${name}`);\r\n  }\r\n\r\n  if (typeof nameOrChannels === 'object' && nameOrChannels !== null) {\r\n    const channel = nameOrChannels[name];\r\n    assertChannel(channel, `nameOrChannels.${name}`);\r\n    return channel;\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE('nameOrChannels',\r\n                                 ['string', 'object', 'TracingChannel'],\r\n                                 nameOrChannels);\r\n}\r\n\r\nclass TracingChannel {\r\n  constructor(nameOrChannels) {\r\n    for (const eventName of traceEvents) {\r\n      ObjectDefineProperty(this, eventName, {\r\n        __proto__: null,\r\n        value: tracingChannelFrom(nameOrChannels, eventName),\r\n      });\r\n    }\r\n  }\r\n\r\n  get hasSubscribers() {\r\n    return this.start.hasSubscribers ||\r\n      this.end.hasSubscribers ||\r\n      this.asyncStart.hasSubscribers ||\r\n      this.asyncEnd.hasSubscribers ||\r\n      this.error.hasSubscribers;\r\n  }\r\n\r\n  subscribe(handlers) {\r\n    for (const name of traceEvents) {\r\n      if (!handlers[name]) continue;\r\n\r\n      this[name]?.subscribe(handlers[name]);\r\n    }\r\n  }\r\n\r\n  unsubscribe(handlers) {\r\n    let done = true;\r\n\r\n    for (const name of traceEvents) {\r\n      if (!handlers[name]) continue;\r\n\r\n      if (!this[name]?.unsubscribe(handlers[name])) {\r\n        done = false;\r\n      }\r\n    }\r\n\r\n    return done;\r\n  }\r\n\r\n  traceSync(fn, context = {}, thisArg, ...args) {\r\n    if (!this.hasSubscribers) {\r\n      return ReflectApply(fn, thisArg, args);\r\n    }\r\n\r\n    const { start, end, error } = this;\r\n\r\n    return start.runStores(context, () => {\r\n      try {\r\n        const result = ReflectApply(fn, thisArg, args);\r\n        context.result = result;\r\n        return result;\r\n      } catch (err) {\r\n        context.error = err;\r\n        error.publish(context);\r\n        throw err;\r\n      } finally {\r\n        end.publish(context);\r\n      }\r\n    });\r\n  }\r\n\r\n  tracePromise(fn, context = {}, thisArg, ...args) {\r\n    if (!this.hasSubscribers) {\r\n      return ReflectApply(fn, thisArg, args);\r\n    }\r\n\r\n    const { start, end, asyncStart, asyncEnd, error } = this;\r\n\r\n    function reject(err) {\r\n      context.error = err;\r\n      error.publish(context);\r\n      asyncStart.publish(context);\r\n      // TODO: Is there a way to have asyncEnd _after_ the continuation?\r\n      asyncEnd.publish(context);\r\n      return PromiseReject(err);\r\n    }\r\n\r\n    function resolve(result) {\r\n      context.result = result;\r\n      asyncStart.publish(context);\r\n      // TODO: Is there a way to have asyncEnd _after_ the continuation?\r\n      asyncEnd.publish(context);\r\n      return result;\r\n    }\r\n\r\n    return start.runStores(context, () => {\r\n      try {\r\n        let promise = ReflectApply(fn, thisArg, args);\r\n        // Convert thenables to native promises\r\n        if (!(promise instanceof Promise)) {\r\n          promise = PromiseResolve(promise);\r\n        }\r\n        return PromisePrototypeThen(promise, resolve, reject);\r\n      } catch (err) {\r\n        context.error = err;\r\n        error.publish(context);\r\n        throw err;\r\n      } finally {\r\n        end.publish(context);\r\n      }\r\n    });\r\n  }\r\n\r\n  traceCallback(fn, position = -1, context = {}, thisArg, ...args) {\r\n    if (!this.hasSubscribers) {\r\n      return ReflectApply(fn, thisArg, args);\r\n    }\r\n\r\n    const { start, end, asyncStart, asyncEnd, error } = this;\r\n\r\n    function wrappedCallback(err, res) {\r\n      if (err) {\r\n        context.error = err;\r\n        error.publish(context);\r\n      } else {\r\n        context.result = res;\r\n      }\r\n\r\n      // Using runStores here enables manual context failure recovery\r\n      asyncStart.runStores(context, () => {\r\n        try {\r\n          return ReflectApply(callback, this, arguments);\r\n        } finally {\r\n          asyncEnd.publish(context);\r\n        }\r\n      });\r\n    }\r\n\r\n    const callback = ArrayPrototypeAt(args, position);\r\n    validateFunction(callback, 'callback');\r\n    ArrayPrototypeSplice(args, position, 1, wrappedCallback);\r\n\r\n    return start.runStores(context, () => {\r\n      try {\r\n        return ReflectApply(fn, thisArg, args);\r\n      } catch (err) {\r\n        context.error = err;\r\n        error.publish(context);\r\n        throw err;\r\n      } finally {\r\n        end.publish(context);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction tracingChannel(nameOrChannels) {\r\n  return new TracingChannel(nameOrChannels);\r\n}\r\n\r\nmodule.exports = {\r\n  channel,\r\n  hasSubscribers,\r\n  subscribe,\r\n  tracingChannel,\r\n  unsubscribe,\r\n  Channel,\r\n};\r\n"
  },
  "102": {
    "metadata": {
      "scriptId": "102",
      "url": "node:internal/perf/observe",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 613,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "cbf5a0217c27575bf876c562526f6f6daf2c346fdd4a432f56451c604bac0c8b",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 17335,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/perf/observe"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayFrom,\r\n  ArrayIsArray,\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypePushApply,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSort,\r\n  Error,\r\n  MathMax,\r\n  MathMin,\r\n  ObjectDefineProperties,\r\n  ObjectFreeze,\r\n  ObjectKeys,\r\n  SafeMap,\r\n  SafeSet,\r\n  Symbol,\r\n  SymbolToStringTag,\r\n} = primordials;\r\n\r\nconst {\r\n  constants: {\r\n    NODE_PERFORMANCE_ENTRY_TYPE_GC,\r\n    NODE_PERFORMANCE_ENTRY_TYPE_HTTP2,\r\n    NODE_PERFORMANCE_ENTRY_TYPE_HTTP,\r\n    NODE_PERFORMANCE_ENTRY_TYPE_NET,\r\n    NODE_PERFORMANCE_ENTRY_TYPE_DNS,\r\n  },\r\n  installGarbageCollectionTracking,\r\n  observerCounts,\r\n  removeGarbageCollectionTracking,\r\n  setupObservers,\r\n} = internalBinding('performance');\r\n\r\nconst {\r\n  isPerformanceEntry,\r\n  createPerformanceNodeEntry,\r\n} = require('internal/perf/performance_entry');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_MISSING_ARGS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateFunction,\r\n  validateObject,\r\n  validateInternalField,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  customInspectSymbol: kInspect,\r\n  deprecate,\r\n  lazyDOMException,\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  setImmediate,\r\n} = require('timers');\r\n\r\nconst { inspect } = require('util');\r\n\r\nconst { now } = require('internal/perf/utils');\r\n\r\nconst kBuffer = Symbol('kBuffer');\r\nconst kDispatch = Symbol('kDispatch');\r\nconst kMaybeBuffer = Symbol('kMaybeBuffer');\r\nconst kDeprecatedFields = Symbol('kDeprecatedFields');\r\n\r\nconst kDeprecationMessage =\r\n  'Custom PerformanceEntry accessors are deprecated. ' +\r\n  'Please use the detail property.';\r\n\r\nconst kTypeSingle = 0;\r\nconst kTypeMultiple = 1;\r\n\r\nlet gcTrackingInstalled = false;\r\n\r\nconst kSupportedEntryTypes = ObjectFreeze([\r\n  'dns',\r\n  'function',\r\n  'gc',\r\n  'http',\r\n  'http2',\r\n  'mark',\r\n  'measure',\r\n  'net',\r\n  'resource',\r\n]);\r\n\r\n// Performance timeline entry Buffers\r\nlet markEntryBuffer = [];\r\nlet measureEntryBuffer = [];\r\nlet resourceTimingBuffer = [];\r\nlet resourceTimingSecondaryBuffer = [];\r\nconst kPerformanceEntryBufferWarnSize = 1e6;\r\n// https://www.w3.org/TR/timing-entrytypes-registry/#registry\r\n// Default buffer limit for resource timing entries.\r\nlet resourceTimingBufferSizeLimit = 250;\r\nlet dispatchBufferFull;\r\nlet resourceTimingBufferFullPending = false;\r\n\r\nconst kClearPerformanceEntryBuffers = ObjectFreeze({\r\n  'mark': 'performance.clearMarks',\r\n  'measure': 'performance.clearMeasures',\r\n});\r\nconst kWarnedEntryTypes = new SafeMap();\r\n\r\nconst kObservers = new SafeSet();\r\nconst kPending = new SafeSet();\r\nlet isPending = false;\r\n\r\nfunction queuePending() {\r\n  if (isPending) return;\r\n  isPending = true;\r\n  setImmediate(() => {\r\n    isPending = false;\r\n    const pendings = ArrayFrom(kPending.values());\r\n    kPending.clear();\r\n    for (const pending of pendings)\r\n      pending[kDispatch]();\r\n  });\r\n}\r\n\r\nfunction getObserverType(type) {\r\n  switch (type) {\r\n    case 'gc': return NODE_PERFORMANCE_ENTRY_TYPE_GC;\r\n    case 'http2': return NODE_PERFORMANCE_ENTRY_TYPE_HTTP2;\r\n    case 'http': return NODE_PERFORMANCE_ENTRY_TYPE_HTTP;\r\n    case 'net': return NODE_PERFORMANCE_ENTRY_TYPE_NET;\r\n    case 'dns': return NODE_PERFORMANCE_ENTRY_TYPE_DNS;\r\n  }\r\n}\r\n\r\nfunction maybeDecrementObserverCounts(entryTypes) {\r\n  for (const type of entryTypes) {\r\n    const observerType = getObserverType(type);\r\n\r\n    if (observerType !== undefined) {\r\n      observerCounts[observerType]--;\r\n\r\n      if (observerType === NODE_PERFORMANCE_ENTRY_TYPE_GC &&\r\n          observerCounts[observerType] === 0) {\r\n        removeGarbageCollectionTracking();\r\n        gcTrackingInstalled = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction maybeIncrementObserverCount(type) {\r\n  const observerType = getObserverType(type);\r\n\r\n  if (observerType !== undefined) {\r\n    observerCounts[observerType]++;\r\n    if (!gcTrackingInstalled &&\r\n        observerType === NODE_PERFORMANCE_ENTRY_TYPE_GC) {\r\n      installGarbageCollectionTracking();\r\n      gcTrackingInstalled = true;\r\n    }\r\n  }\r\n}\r\n\r\nconst kSkipThrow = Symbol('kSkipThrow');\r\nconst performanceObserverSorter = (first, second) => {\r\n  return first.startTime - second.startTime;\r\n};\r\n\r\nclass PerformanceObserverEntryList {\r\n  constructor(skipThrowSymbol = undefined, entries = []) {\r\n    if (skipThrowSymbol !== kSkipThrow) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n\r\n    this[kBuffer] = ArrayPrototypeSort(entries, performanceObserverSorter);\r\n  }\r\n\r\n  getEntries() {\r\n    validateInternalField(this, kBuffer, 'PerformanceObserverEntryList');\r\n    return ArrayPrototypeSlice(this[kBuffer]);\r\n  }\r\n\r\n  getEntriesByType(type) {\r\n    validateInternalField(this, kBuffer, 'PerformanceObserverEntryList');\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('type');\r\n    }\r\n    type = `${type}`;\r\n    return ArrayPrototypeFilter(\r\n      this[kBuffer],\r\n      (entry) => entry.entryType === type);\r\n  }\r\n\r\n  getEntriesByName(name, type = undefined) {\r\n    validateInternalField(this, kBuffer, 'PerformanceObserverEntryList');\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n    name = `${name}`;\r\n    if (type != null /** not nullish */) {\r\n      return ArrayPrototypeFilter(\r\n        this[kBuffer],\r\n        (entry) => entry.name === name && entry.entryType === type);\r\n    }\r\n    return ArrayPrototypeFilter(\r\n      this[kBuffer],\r\n      (entry) => entry.name === name);\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (depth < 0) return this;\r\n\r\n    const opts = {\r\n      ...options,\r\n      depth: options.depth == null ? null : options.depth - 1,\r\n    };\r\n\r\n    return `PerformanceObserverEntryList ${inspect(this[kBuffer], opts)}`;\r\n  }\r\n}\r\nObjectDefineProperties(PerformanceObserverEntryList.prototype, {\r\n  getEntries: kEnumerableProperty,\r\n  getEntriesByType: kEnumerableProperty,\r\n  getEntriesByName: kEnumerableProperty,\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    writable: false,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: 'PerformanceObserverEntryList',\r\n  },\r\n});\r\n\r\nclass PerformanceObserver {\r\n  #buffer = [];\r\n  #entryTypes = new SafeSet();\r\n  #type;\r\n  #callback;\r\n\r\n  constructor(callback) {\r\n    validateFunction(callback, 'callback');\r\n    this.#callback = callback;\r\n  }\r\n\r\n  observe(options = kEmptyObject) {\r\n    validateObject(options, 'options');\r\n    const {\r\n      entryTypes,\r\n      type,\r\n      buffered,\r\n    } = { ...options };\r\n    if (entryTypes === undefined && type === undefined)\r\n      throw new ERR_MISSING_ARGS('options.entryTypes', 'options.type');\r\n    if (entryTypes != null && type != null)\r\n      throw new ERR_INVALID_ARG_VALUE('options.entryTypes',\r\n                                      entryTypes,\r\n                                      'options.entryTypes can not set with ' +\r\n                                      'options.type together');\r\n\r\n    switch (this.#type) {\r\n      case undefined:\r\n        if (entryTypes !== undefined) this.#type = kTypeMultiple;\r\n        if (type !== undefined) this.#type = kTypeSingle;\r\n        break;\r\n      case kTypeSingle:\r\n        if (entryTypes !== undefined)\r\n          throw lazyDOMException(\r\n            'PerformanceObserver can not change to multiple observations',\r\n            'InvalidModificationError');\r\n        break;\r\n      case kTypeMultiple:\r\n        if (type !== undefined)\r\n          throw lazyDOMException(\r\n            'PerformanceObserver can not change to single observation',\r\n            'InvalidModificationError');\r\n        break;\r\n    }\r\n\r\n    if (this.#type === kTypeMultiple) {\r\n      if (!ArrayIsArray(entryTypes)) {\r\n        throw new ERR_INVALID_ARG_TYPE(\r\n          'options.entryTypes',\r\n          'string[]',\r\n          entryTypes);\r\n      }\r\n      maybeDecrementObserverCounts(this.#entryTypes);\r\n      this.#entryTypes.clear();\r\n      for (let n = 0; n < entryTypes.length; n++) {\r\n        if (ArrayPrototypeIncludes(kSupportedEntryTypes, entryTypes[n])) {\r\n          this.#entryTypes.add(entryTypes[n]);\r\n          maybeIncrementObserverCount(entryTypes[n]);\r\n        }\r\n      }\r\n    } else {\r\n      if (!ArrayPrototypeIncludes(kSupportedEntryTypes, type))\r\n        return;\r\n      this.#entryTypes.add(type);\r\n      maybeIncrementObserverCount(type);\r\n      if (buffered) {\r\n        const entries = filterBufferMapByNameAndType(undefined, type);\r\n        ArrayPrototypePushApply(this.#buffer, entries);\r\n        kPending.add(this);\r\n        if (kPending.size)\r\n          queuePending();\r\n      }\r\n    }\r\n\r\n    if (this.#entryTypes.size)\r\n      kObservers.add(this);\r\n    else\r\n      this.disconnect();\r\n  }\r\n\r\n  disconnect() {\r\n    maybeDecrementObserverCounts(this.#entryTypes);\r\n    kObservers.delete(this);\r\n    kPending.delete(this);\r\n    this.#buffer = [];\r\n    this.#entryTypes.clear();\r\n    this.#type = undefined;\r\n  }\r\n\r\n  takeRecords() {\r\n    const list = this.#buffer;\r\n    this.#buffer = [];\r\n    return list;\r\n  }\r\n\r\n  static get supportedEntryTypes() {\r\n    return kSupportedEntryTypes;\r\n  }\r\n\r\n  [kMaybeBuffer](entry) {\r\n    if (!this.#entryTypes.has(entry.entryType))\r\n      return;\r\n    ArrayPrototypePush(this.#buffer, entry);\r\n    kPending.add(this);\r\n    if (kPending.size)\r\n      queuePending();\r\n  }\r\n\r\n  [kDispatch]() {\r\n    const entryList = new PerformanceObserverEntryList(kSkipThrow, this.takeRecords());\r\n\r\n    this.#callback(entryList, this);\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (depth < 0) return this;\r\n\r\n    const opts = {\r\n      ...options,\r\n      depth: options.depth == null ? null : options.depth - 1,\r\n    };\r\n\r\n    return `PerformanceObserver ${inspect({\r\n      connected: kObservers.has(this),\r\n      pending: kPending.has(this),\r\n      entryTypes: ArrayFrom(this.#entryTypes),\r\n      buffer: this.#buffer,\r\n    }, opts)}`;\r\n  }\r\n}\r\nObjectDefineProperties(PerformanceObserver.prototype, {\r\n  observe: kEnumerableProperty,\r\n  disconnect: kEnumerableProperty,\r\n  takeRecords: kEnumerableProperty,\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    writable: false,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: 'PerformanceObserver',\r\n  },\r\n});\r\n\r\n/**\r\n * https://www.w3.org/TR/performance-timeline/#dfn-queue-a-performanceentry\r\n *\r\n * Add the performance entry to the interested performance observer's queue.\r\n */\r\nfunction enqueue(entry) {\r\n  if (!isPerformanceEntry(entry))\r\n    throw new ERR_INVALID_ARG_TYPE('entry', 'PerformanceEntry', entry);\r\n\r\n  for (const obs of kObservers) {\r\n    obs[kMaybeBuffer](entry);\r\n  }\r\n}\r\n\r\n/**\r\n * Add the user timing entry to the global buffer.\r\n */\r\nfunction bufferUserTiming(entry) {\r\n  const entryType = entry.entryType;\r\n  let buffer;\r\n  if (entryType === 'mark') {\r\n    buffer = markEntryBuffer;\r\n  } else if (entryType === 'measure') {\r\n    buffer = measureEntryBuffer;\r\n  } else {\r\n    return;\r\n  }\r\n\r\n  ArrayPrototypePush(buffer, entry);\r\n  const count = buffer.length;\r\n\r\n  if (count > kPerformanceEntryBufferWarnSize &&\r\n    !kWarnedEntryTypes.has(entryType)) {\r\n    kWarnedEntryTypes.set(entryType, true);\r\n    // No error code for this since it is a Warning\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    const w = new Error('Possible perf_hooks memory leak detected. ' +\r\n                        `${count} ${entryType} entries added to the global ` +\r\n                        'performance entry buffer. Use ' +\r\n                        `${kClearPerformanceEntryBuffers[entryType]} to ` +\r\n                        'clear the buffer.');\r\n    w.name = 'MaxPerformanceEntryBufferExceededWarning';\r\n    w.entryType = entryType;\r\n    w.count = count;\r\n    process.emitWarning(w);\r\n  }\r\n}\r\n\r\n/**\r\n * Add the resource timing entry to the global buffer if the buffer size is not\r\n * exceeding the buffer limit, or dispatch a buffer full event on the global\r\n * performance object.\r\n *\r\n * See also https://www.w3.org/TR/resource-timing-2/#dfn-add-a-performanceresourcetiming-entry\r\n */\r\nfunction bufferResourceTiming(entry) {\r\n  if (resourceTimingBuffer.length < resourceTimingBufferSizeLimit && !resourceTimingBufferFullPending) {\r\n    ArrayPrototypePush(resourceTimingBuffer, entry);\r\n    return;\r\n  }\r\n\r\n  if (!resourceTimingBufferFullPending) {\r\n    resourceTimingBufferFullPending = true;\r\n    setImmediate(() => {\r\n      while (resourceTimingSecondaryBuffer.length > 0) {\r\n        const excessNumberBefore = resourceTimingSecondaryBuffer.length;\r\n        dispatchBufferFull('resourcetimingbufferfull');\r\n\r\n        // Calculate the number of items to be pushed to the global buffer.\r\n        const numbersToPreserve = MathMax(\r\n          MathMin(resourceTimingBufferSizeLimit - resourceTimingBuffer.length, resourceTimingSecondaryBuffer.length),\r\n          0,\r\n        );\r\n        const excessNumberAfter = resourceTimingSecondaryBuffer.length - numbersToPreserve;\r\n        for (let idx = 0; idx < numbersToPreserve; idx++) {\r\n          ArrayPrototypePush(resourceTimingBuffer, resourceTimingSecondaryBuffer[idx]);\r\n        }\r\n\r\n        if (excessNumberBefore <= excessNumberAfter) {\r\n          resourceTimingSecondaryBuffer = [];\r\n        }\r\n      }\r\n      resourceTimingBufferFullPending = false;\r\n    });\r\n  }\r\n\r\n  ArrayPrototypePush(resourceTimingSecondaryBuffer, entry);\r\n}\r\n\r\n// https://w3c.github.io/resource-timing/#dom-performance-setresourcetimingbuffersize\r\nfunction setResourceTimingBufferSize(maxSize) {\r\n  // If the maxSize parameter is less than resource timing buffer current\r\n  // size, no PerformanceResourceTiming objects are to be removed from the\r\n  // performance entry buffer.\r\n  resourceTimingBufferSizeLimit = maxSize;\r\n}\r\n\r\nfunction setDispatchBufferFull(fn) {\r\n  dispatchBufferFull = fn;\r\n}\r\n\r\nfunction clearEntriesFromBuffer(type, name) {\r\n  if (type !== 'mark' && type !== 'measure' && type !== 'resource') {\r\n    return;\r\n  }\r\n\r\n  if (type === 'mark') {\r\n    markEntryBuffer = name === undefined ?\r\n      [] : ArrayPrototypeFilter(markEntryBuffer, (entry) => entry.name !== name);\r\n  } else if (type === 'measure') {\r\n    measureEntryBuffer = name === undefined ?\r\n      [] : ArrayPrototypeFilter(measureEntryBuffer, (entry) => entry.name !== name);\r\n  } else {\r\n    resourceTimingBuffer = name === undefined ?\r\n      [] : ArrayPrototypeFilter(resourceTimingBuffer, (entry) => entry.name !== name);\r\n  }\r\n}\r\n\r\nfunction filterBufferMapByNameAndType(name, type) {\r\n  let bufferList;\r\n  if (type === 'mark') {\r\n    bufferList = markEntryBuffer;\r\n  } else if (type === 'measure') {\r\n    bufferList = measureEntryBuffer;\r\n  } else if (type === 'resource') {\r\n    bufferList = resourceTimingBuffer;\r\n  } else if (type !== undefined) {\r\n    // Unrecognized type;\r\n    return [];\r\n  } else {\r\n    bufferList = [];\r\n    ArrayPrototypePushApply(bufferList, markEntryBuffer);\r\n    ArrayPrototypePushApply(bufferList, measureEntryBuffer);\r\n    ArrayPrototypePushApply(bufferList, resourceTimingBuffer);\r\n  }\r\n  if (name !== undefined) {\r\n    bufferList = ArrayPrototypeFilter(bufferList, (buffer) => buffer.name === name);\r\n  } else if (type !== undefined) {\r\n    bufferList = ArrayPrototypeSlice(bufferList);\r\n  }\r\n\r\n  return ArrayPrototypeSort(bufferList, performanceObserverSorter);\r\n}\r\n\r\nfunction observerCallback(name, type, startTime, duration, details) {\r\n  const entry =\r\n    createPerformanceNodeEntry(\r\n      name,\r\n      type,\r\n      startTime,\r\n      duration,\r\n      details);\r\n\r\n  if (details !== undefined) {\r\n    // GC, HTTP2, and HTTP PerformanceEntry used additional\r\n    // properties directly off the entry. Those have been\r\n    // moved into the details property. The existing accessors\r\n    // are still included but are deprecated.\r\n    entry[kDeprecatedFields] = new SafeMap();\r\n\r\n    const detailKeys = ObjectKeys(details);\r\n    const props = {};\r\n    for (let n = 0; n < detailKeys.length; n++) {\r\n      const key = detailKeys[n];\r\n      entry[kDeprecatedFields].set(key, details[key]);\r\n      props[key] = {\r\n        configurable: true,\r\n        enumerable: true,\r\n        get: deprecate(() => {\r\n          return entry[kDeprecatedFields].get(key);\r\n        }, kDeprecationMessage, 'DEP0152'),\r\n        set: deprecate((value) => {\r\n          entry[kDeprecatedFields].set(key, value);\r\n        }, kDeprecationMessage, 'DEP0152'),\r\n      };\r\n    }\r\n    ObjectDefineProperties(entry, props);\r\n  }\r\n\r\n  enqueue(entry);\r\n}\r\n\r\nsetupObservers(observerCallback);\r\n\r\nfunction hasObserver(type) {\r\n  const observerType = getObserverType(type);\r\n  return observerCounts[observerType] > 0;\r\n}\r\n\r\n\r\nfunction startPerf(target, key, context = {}) {\r\n  target[key] = {\r\n    ...context,\r\n    startTime: now(),\r\n  };\r\n}\r\n\r\nfunction stopPerf(target, key, context = {}) {\r\n  const ctx = target[key];\r\n  if (!ctx) {\r\n    return;\r\n  }\r\n  const startTime = ctx.startTime;\r\n  const entry = createPerformanceNodeEntry(\r\n    ctx.name,\r\n    ctx.type,\r\n    startTime,\r\n    now() - startTime,\r\n    { ...ctx.detail, ...context.detail },\r\n  );\r\n  enqueue(entry);\r\n}\r\n\r\nmodule.exports = {\r\n  PerformanceObserver,\r\n  PerformanceObserverEntryList,\r\n  enqueue,\r\n  hasObserver,\r\n  clearEntriesFromBuffer,\r\n  filterBufferMapByNameAndType,\r\n  startPerf,\r\n  stopPerf,\r\n\r\n  bufferUserTiming,\r\n  bufferResourceTiming,\r\n  setResourceTimingBufferSize,\r\n  setDispatchBufferFull,\r\n};\r\n"
  },
  "103": {
    "metadata": {
      "scriptId": "103",
      "url": "node:internal/perf/performance_entry",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 140,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "e6ff663f44a8ab4cefc9766c60c8b2a6e93b7afc268a124eda177f71c248a96a",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3412,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/perf/performance_entry"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperties,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  customInspectSymbol: kInspect,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\nconst { validateInternalField } = require('internal/validators');\r\n\r\nconst { inspect } = require('util');\r\n\r\nconst kName = Symbol('PerformanceEntry.Name');\r\nconst kEntryType = Symbol('PerformanceEntry.EntryType');\r\nconst kStartTime = Symbol('PerformanceEntry.StartTime');\r\nconst kDuration = Symbol('PerformanceEntry.Duration');\r\nconst kDetail = Symbol('NodePerformanceEntry.Detail');\r\nconst kSkipThrow = Symbol('kSkipThrow');\r\n\r\nfunction isPerformanceEntry(obj) {\r\n  return obj?.[kName] !== undefined;\r\n}\r\n\r\nclass PerformanceEntry {\r\n  constructor(\r\n    skipThrowSymbol = undefined,\r\n    name = undefined,\r\n    type = undefined,\r\n    start = undefined,\r\n    duration = undefined,\r\n  ) {\r\n    if (skipThrowSymbol !== kSkipThrow) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n\r\n    this[kName] = name;\r\n    this[kEntryType] = type;\r\n    this[kStartTime] = start;\r\n    this[kDuration] = duration;\r\n  }\r\n\r\n  get name() {\r\n    validateInternalField(this, kName, 'PerformanceEntry');\r\n    return this[kName];\r\n  }\r\n\r\n  get entryType() {\r\n    validateInternalField(this, kEntryType, 'PerformanceEntry');\r\n    return this[kEntryType];\r\n  }\r\n\r\n  get startTime() {\r\n    validateInternalField(this, kStartTime, 'PerformanceEntry');\r\n    return this[kStartTime];\r\n  }\r\n\r\n  get duration() {\r\n    validateInternalField(this, kDuration, 'PerformanceEntry');\r\n    return this[kDuration];\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (depth < 0) return this;\r\n\r\n    const opts = {\r\n      ...options,\r\n      depth: options.depth == null ? null : options.depth - 1,\r\n    };\r\n\r\n    return `${this.constructor.name} ${inspect(this.toJSON(), opts)}`;\r\n  }\r\n\r\n  toJSON() {\r\n    validateInternalField(this, kName, 'PerformanceEntry');\r\n    return {\r\n      name: this[kName],\r\n      entryType: this[kEntryType],\r\n      startTime: this[kStartTime],\r\n      duration: this[kDuration],\r\n    };\r\n  }\r\n}\r\nObjectDefineProperties(PerformanceEntry.prototype, {\r\n  name: kEnumerableProperty,\r\n  entryType: kEnumerableProperty,\r\n  startTime: kEnumerableProperty,\r\n  duration: kEnumerableProperty,\r\n  toJSON: kEnumerableProperty,\r\n});\r\n\r\nfunction createPerformanceEntry(name, type, start, duration) {\r\n  return new PerformanceEntry(kSkipThrow, name, type, start, duration);\r\n}\r\n\r\n/**\r\n * Node.js specific extension to PerformanceEntry.\r\n */\r\nclass PerformanceNodeEntry extends PerformanceEntry {\r\n  get detail() {\r\n    validateInternalField(this, kDetail, 'NodePerformanceEntry');\r\n    return this[kDetail];\r\n  }\r\n\r\n  toJSON() {\r\n    validateInternalField(this, kName, 'PerformanceEntry');\r\n    return {\r\n      name: this[kName],\r\n      entryType: this[kEntryType],\r\n      startTime: this[kStartTime],\r\n      duration: this[kDuration],\r\n      detail: this[kDetail],\r\n    };\r\n  }\r\n}\r\n\r\nfunction createPerformanceNodeEntry(name, type, start, duration, detail) {\r\n  const entry = new PerformanceNodeEntry(kSkipThrow, name, type, start, duration);\r\n\r\n  entry[kDetail] = detail;\r\n\r\n  return entry;\r\n}\r\n\r\nmodule.exports = {\r\n  createPerformanceEntry,\r\n  PerformanceEntry,\r\n  isPerformanceEntry,\r\n  PerformanceNodeEntry,\r\n  createPerformanceNodeEntry,\r\n  kSkipThrow,\r\n};\r\n"
  },
  "104": {
    "metadata": {
      "scriptId": "104",
      "url": "node:_http_client",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 980,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "eb78ef13602d302a74445b757a5ab4550004f57f6ded1aeb7e35f4b20cd41701",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 29367,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_http_client"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  Boolean,\r\n  Error,\r\n  FunctionPrototypeCall,\r\n  NumberIsFinite,\r\n  ObjectAssign,\r\n  ObjectKeys,\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n  RegExpPrototypeExec,\r\n  String,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeToUpperCase,\r\n  Symbol,\r\n  TypedArrayPrototypeSlice,\r\n} = primordials;\r\n\r\nconst net = require('net');\r\nconst assert = require('internal/assert');\r\nconst {\r\n  kEmptyObject,\r\n  once,\r\n} = require('internal/util');\r\nconst {\r\n  _checkIsHttpToken: checkIsHttpToken,\r\n  freeParser,\r\n  parsers,\r\n  HTTPParser,\r\n  isLenient,\r\n  prepareError,\r\n} = require('_http_common');\r\nconst {\r\n  kUniqueHeaders,\r\n  parseUniqueHeadersOption,\r\n  OutgoingMessage,\r\n} = require('_http_outgoing');\r\nconst Agent = require('_http_agent');\r\nconst { Buffer } = require('buffer');\r\nconst { defaultTriggerAsyncIdScope } = require('internal/async_hooks');\r\nconst { URL, urlToHttpOptions, isURL } = require('internal/url');\r\nconst {\r\n  kOutHeaders,\r\n  kNeedDrain,\r\n  isTraceHTTPEnabled,\r\n  traceBegin,\r\n  traceEnd,\r\n  getNextTraceEventId,\r\n} = require('internal/http');\r\nconst {\r\n  ConnResetException,\r\n  codes: {\r\n    ERR_HTTP_HEADERS_SENT,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_HTTP_TOKEN,\r\n    ERR_INVALID_PROTOCOL,\r\n    ERR_UNESCAPED_CHARACTERS,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  validateInteger,\r\n  validateBoolean,\r\n} = require('internal/validators');\r\nconst { getTimerDuration } = require('internal/timers');\r\nconst {\r\n  hasObserver,\r\n  startPerf,\r\n  stopPerf,\r\n} = require('internal/perf/observe');\r\n\r\nconst kClientRequestStatistics = Symbol('ClientRequestStatistics');\r\n\r\nconst dc = require('diagnostics_channel');\r\nconst onClientRequestStartChannel = dc.channel('http.client.request.start');\r\nconst onClientResponseFinishChannel = dc.channel('http.client.response.finish');\r\n\r\nconst { addAbortSignal, finished } = require('stream');\r\n\r\nlet debug = require('internal/util/debuglog').debuglog('http', (fn) => {\r\n  debug = fn;\r\n});\r\n\r\nconst INVALID_PATH_REGEX = /[^\\u0021-\\u00ff]/;\r\nconst kError = Symbol('kError');\r\n\r\nconst kLenientAll = HTTPParser.kLenientAll | 0;\r\nconst kLenientNone = HTTPParser.kLenientNone | 0;\r\n\r\nconst HTTP_CLIENT_TRACE_EVENT_NAME = 'http.client.request';\r\n\r\nfunction validateHost(host, name) {\r\n  if (host !== null && host !== undefined && typeof host !== 'string') {\r\n    throw new ERR_INVALID_ARG_TYPE(`options.${name}`,\r\n                                   ['string', 'undefined', 'null'],\r\n                                   host);\r\n  }\r\n  return host;\r\n}\r\n\r\nclass HTTPClientAsyncResource {\r\n  constructor(type, req) {\r\n    this.type = type;\r\n    this.req = req;\r\n  }\r\n}\r\n\r\nfunction ClientRequest(input, options, cb) {\r\n  FunctionPrototypeCall(OutgoingMessage, this);\r\n\r\n  if (typeof input === 'string') {\r\n    const urlStr = input;\r\n    input = urlToHttpOptions(new URL(urlStr));\r\n  } else if (isURL(input)) {\r\n    // url.URL instance\r\n    input = urlToHttpOptions(input);\r\n  } else {\r\n    cb = options;\r\n    options = input;\r\n    input = null;\r\n  }\r\n\r\n  if (typeof options === 'function') {\r\n    cb = options;\r\n    options = input || kEmptyObject;\r\n  } else {\r\n    options = ObjectAssign(input || {}, options);\r\n  }\r\n\r\n  let agent = options.agent;\r\n  const defaultAgent = options._defaultAgent || Agent.globalAgent;\r\n  if (agent === false) {\r\n    agent = new defaultAgent.constructor();\r\n  } else if (agent === null || agent === undefined) {\r\n    if (typeof options.createConnection !== 'function') {\r\n      agent = defaultAgent;\r\n    }\r\n    // Explicitly pass through this statement as agent will not be used\r\n    // when createConnection is provided.\r\n  } else if (typeof agent.addRequest !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE('options.agent',\r\n                                   ['Agent-like Object', 'undefined', 'false'],\r\n                                   agent);\r\n  }\r\n  this.agent = agent;\r\n\r\n  const protocol = options.protocol || defaultAgent.protocol;\r\n  let expectedProtocol = defaultAgent.protocol;\r\n  if (this.agent && this.agent.protocol)\r\n    expectedProtocol = this.agent.protocol;\r\n\r\n  if (options.path) {\r\n    const path = String(options.path);\r\n    if (RegExpPrototypeExec(INVALID_PATH_REGEX, path) !== null) {\r\n      debug('Path contains unescaped characters: \"%s\"', path);\r\n      throw new ERR_UNESCAPED_CHARACTERS('Request path');\r\n    }\r\n  }\r\n\r\n  if (protocol !== expectedProtocol) {\r\n    throw new ERR_INVALID_PROTOCOL(protocol, expectedProtocol);\r\n  }\r\n\r\n  const defaultPort = options.defaultPort ||\r\n                    (this.agent && this.agent.defaultPort);\r\n\r\n  const optsWithoutSignal = { __proto__: null, ...options };\r\n\r\n  const port = optsWithoutSignal.port = options.port || defaultPort || 80;\r\n  const host = optsWithoutSignal.host = validateHost(options.hostname, 'hostname') ||\r\n                                        validateHost(options.host, 'host') || 'localhost';\r\n\r\n  const setHost = (options.setHost === undefined || Boolean(options.setHost));\r\n\r\n  this.socketPath = options.socketPath;\r\n\r\n  if (options.timeout !== undefined)\r\n    this.timeout = getTimerDuration(options.timeout, 'timeout');\r\n\r\n  const signal = options.signal;\r\n  if (signal) {\r\n    addAbortSignal(signal, this);\r\n    delete optsWithoutSignal.signal;\r\n  }\r\n  let method = options.method;\r\n  const methodIsString = (typeof method === 'string');\r\n  if (method !== null && method !== undefined && !methodIsString) {\r\n    throw new ERR_INVALID_ARG_TYPE('options.method', 'string', method);\r\n  }\r\n\r\n  if (methodIsString && method) {\r\n    if (!checkIsHttpToken(method)) {\r\n      throw new ERR_INVALID_HTTP_TOKEN('Method', method);\r\n    }\r\n    method = this.method = StringPrototypeToUpperCase(method);\r\n  } else {\r\n    method = this.method = 'GET';\r\n  }\r\n\r\n  const maxHeaderSize = options.maxHeaderSize;\r\n  if (maxHeaderSize !== undefined)\r\n    validateInteger(maxHeaderSize, 'maxHeaderSize', 0);\r\n  this.maxHeaderSize = maxHeaderSize;\r\n\r\n  const insecureHTTPParser = options.insecureHTTPParser;\r\n  if (insecureHTTPParser !== undefined) {\r\n    validateBoolean(insecureHTTPParser, 'options.insecureHTTPParser');\r\n  }\r\n\r\n  this.insecureHTTPParser = insecureHTTPParser;\r\n\r\n  if (options.joinDuplicateHeaders !== undefined) {\r\n    validateBoolean(options.joinDuplicateHeaders, 'options.joinDuplicateHeaders');\r\n  }\r\n\r\n  this.joinDuplicateHeaders = options.joinDuplicateHeaders;\r\n\r\n  this.path = options.path || '/';\r\n  if (cb) {\r\n    this.once('response', cb);\r\n  }\r\n\r\n  if (method === 'GET' ||\r\n      method === 'HEAD' ||\r\n      method === 'DELETE' ||\r\n      method === 'OPTIONS' ||\r\n      method === 'TRACE' ||\r\n      method === 'CONNECT') {\r\n    this.useChunkedEncodingByDefault = false;\r\n  } else {\r\n    this.useChunkedEncodingByDefault = true;\r\n  }\r\n\r\n  this._ended = false;\r\n  this.res = null;\r\n  this.aborted = false;\r\n  this.timeoutCb = null;\r\n  this.upgradeOrConnect = false;\r\n  this.parser = null;\r\n  this.maxHeadersCount = null;\r\n  this.reusedSocket = false;\r\n  this.host = host;\r\n  this.protocol = protocol;\r\n\r\n  if (this.agent) {\r\n    // If there is an agent we should default to Connection:keep-alive,\r\n    // but only if the Agent will actually reuse the connection!\r\n    // If it's not a keepAlive agent, and the maxSockets==Infinity, then\r\n    // there's never a case where this socket will actually be reused\r\n    if (!this.agent.keepAlive && !NumberIsFinite(this.agent.maxSockets)) {\r\n      this._last = true;\r\n      this.shouldKeepAlive = false;\r\n    } else {\r\n      this._last = false;\r\n      this.shouldKeepAlive = true;\r\n    }\r\n  }\r\n\r\n  const headersArray = ArrayIsArray(options.headers);\r\n  if (!headersArray) {\r\n    if (options.headers) {\r\n      const keys = ObjectKeys(options.headers);\r\n      // Retain for(;;) loop for performance reasons\r\n      // Refs: https://github.com/nodejs/node/pull/30958\r\n      for (let i = 0; i < keys.length; i++) {\r\n        const key = keys[i];\r\n        this.setHeader(key, options.headers[key]);\r\n      }\r\n    }\r\n\r\n    if (host && !this.getHeader('host') && setHost) {\r\n      let hostHeader = host;\r\n\r\n      // For the Host header, ensure that IPv6 addresses are enclosed\r\n      // in square brackets, as defined by URI formatting\r\n      // https://tools.ietf.org/html/rfc3986#section-3.2.2\r\n      const posColon = StringPrototypeIndexOf(hostHeader, ':');\r\n      if (posColon !== -1 &&\r\n          StringPrototypeIncludes(hostHeader, ':', posColon + 1) &&\r\n          StringPrototypeCharCodeAt(hostHeader, 0) !== 91/* '[' */) {\r\n        hostHeader = `[${hostHeader}]`;\r\n      }\r\n\r\n      if (port && +port !== defaultPort) {\r\n        hostHeader += ':' + port;\r\n      }\r\n      this.setHeader('Host', hostHeader);\r\n    }\r\n\r\n    if (options.auth && !this.getHeader('Authorization')) {\r\n      this.setHeader('Authorization', 'Basic ' +\r\n                     Buffer.from(options.auth).toString('base64'));\r\n    }\r\n\r\n    if (this.getHeader('expect')) {\r\n      if (this._header) {\r\n        throw new ERR_HTTP_HEADERS_SENT('render');\r\n      }\r\n\r\n      this._storeHeader(this.method + ' ' + this.path + ' HTTP/1.1\\r\\n',\r\n                        this[kOutHeaders]);\r\n    }\r\n  } else {\r\n    this._storeHeader(this.method + ' ' + this.path + ' HTTP/1.1\\r\\n',\r\n                      options.headers);\r\n  }\r\n\r\n  this[kUniqueHeaders] = parseUniqueHeadersOption(options.uniqueHeaders);\r\n\r\n  // initiate connection\r\n  if (this.agent) {\r\n    this.agent.addRequest(this, optsWithoutSignal);\r\n  } else {\r\n    // No agent, default to Connection:close.\r\n    this._last = true;\r\n    this.shouldKeepAlive = false;\r\n    let opts = optsWithoutSignal;\r\n    if (opts.path || opts.socketPath) {\r\n      opts = { ...optsWithoutSignal };\r\n      if (opts.socketPath) {\r\n        opts.path = opts.socketPath;\r\n      } else if (opts.path) {\r\n        opts.path = undefined;\r\n      }\r\n    }\r\n    if (typeof opts.createConnection === 'function') {\r\n      const oncreate = once((err, socket) => {\r\n        if (err) {\r\n          process.nextTick(() => this.emit('error', err));\r\n        } else {\r\n          this.onSocket(socket);\r\n        }\r\n      });\r\n\r\n      try {\r\n        const newSocket = opts.createConnection(opts, oncreate);\r\n        if (newSocket) {\r\n          oncreate(null, newSocket);\r\n        }\r\n      } catch (err) {\r\n        oncreate(err);\r\n      }\r\n    } else {\r\n      debug('CLIENT use net.createConnection', opts);\r\n      this.onSocket(net.createConnection(opts));\r\n    }\r\n  }\r\n}\r\nObjectSetPrototypeOf(ClientRequest.prototype, OutgoingMessage.prototype);\r\nObjectSetPrototypeOf(ClientRequest, OutgoingMessage);\r\n\r\nClientRequest.prototype._finish = function _finish() {\r\n  FunctionPrototypeCall(OutgoingMessage.prototype._finish, this);\r\n  if (hasObserver('http')) {\r\n    startPerf(this, kClientRequestStatistics, {\r\n      type: 'http',\r\n      name: 'HttpClient',\r\n      detail: {\r\n        req: {\r\n          method: this.method,\r\n          url: `${this.protocol}//${this.host}${this.path}`,\r\n          headers: typeof this.getHeaders === 'function' ? this.getHeaders() : {},\r\n        },\r\n      },\r\n    });\r\n  }\r\n  if (onClientRequestStartChannel.hasSubscribers) {\r\n    onClientRequestStartChannel.publish({\r\n      request: this,\r\n    });\r\n  }\r\n  if (isTraceHTTPEnabled()) {\r\n    this._traceEventId = getNextTraceEventId();\r\n    traceBegin(HTTP_CLIENT_TRACE_EVENT_NAME, this._traceEventId);\r\n  }\r\n};\r\n\r\nClientRequest.prototype._implicitHeader = function _implicitHeader() {\r\n  if (this._header) {\r\n    throw new ERR_HTTP_HEADERS_SENT('render');\r\n  }\r\n  this._storeHeader(this.method + ' ' + this.path + ' HTTP/1.1\\r\\n',\r\n                    this[kOutHeaders]);\r\n};\r\n\r\nClientRequest.prototype.abort = function abort() {\r\n  if (this.aborted) {\r\n    return;\r\n  }\r\n  this.aborted = true;\r\n  process.nextTick(emitAbortNT, this);\r\n  this.destroy();\r\n};\r\n\r\nClientRequest.prototype.destroy = function destroy(err) {\r\n  if (this.destroyed) {\r\n    return this;\r\n  }\r\n  this.destroyed = true;\r\n\r\n  // If we're aborting, we don't care about any more response data.\r\n  if (this.res) {\r\n    this.res._dump();\r\n  }\r\n\r\n  this[kError] = err;\r\n  this.socket?.destroy(err);\r\n\r\n  return this;\r\n};\r\n\r\nfunction emitAbortNT(req) {\r\n  req.emit('abort');\r\n}\r\n\r\nfunction ondrain() {\r\n  const msg = this._httpMessage;\r\n  if (msg && !msg.finished && msg[kNeedDrain]) {\r\n    msg[kNeedDrain] = false;\r\n    msg.emit('drain');\r\n  }\r\n}\r\n\r\nfunction socketCloseListener() {\r\n  const socket = this;\r\n  const req = socket._httpMessage;\r\n  debug('HTTP socket close');\r\n\r\n  // NOTE: It's important to get parser here, because it could be freed by\r\n  // the `socketOnData`.\r\n  const parser = socket.parser;\r\n  const res = req.res;\r\n\r\n  req.destroyed = true;\r\n  if (res) {\r\n    // Socket closed before we emitted 'end' below.\r\n    if (!res.complete) {\r\n      res.destroy(new ConnResetException('aborted'));\r\n    }\r\n    req._closed = true;\r\n    req.emit('close');\r\n    if (!res.aborted && res.readable) {\r\n      res.push(null);\r\n    }\r\n  } else {\r\n    if (!req.socket._hadError) {\r\n      // This socket error fired before we started to\r\n      // receive a response. The error needs to\r\n      // fire on the request.\r\n      req.socket._hadError = true;\r\n      req.emit('error', new ConnResetException('socket hang up'));\r\n    }\r\n    req._closed = true;\r\n    req.emit('close');\r\n  }\r\n\r\n  // Too bad.  That output wasn't getting written.\r\n  // This is pretty terrible that it doesn't raise an error.\r\n  // Fixed better in v0.10\r\n  if (req.outputData)\r\n    req.outputData.length = 0;\r\n\r\n  if (parser) {\r\n    parser.finish();\r\n    freeParser(parser, req, socket);\r\n  }\r\n}\r\n\r\nfunction socketErrorListener(err) {\r\n  const socket = this;\r\n  const req = socket._httpMessage;\r\n  debug('SOCKET ERROR:', err.message, err.stack);\r\n\r\n  if (req) {\r\n    // For Safety. Some additional errors might fire later on\r\n    // and we need to make sure we don't double-fire the error event.\r\n    req.socket._hadError = true;\r\n    req.emit('error', err);\r\n  }\r\n\r\n  const parser = socket.parser;\r\n  if (parser) {\r\n    parser.finish();\r\n    freeParser(parser, req, socket);\r\n  }\r\n\r\n  // Ensure that no further data will come out of the socket\r\n  socket.removeListener('data', socketOnData);\r\n  socket.removeListener('end', socketOnEnd);\r\n  socket.destroy();\r\n}\r\n\r\nfunction socketOnEnd() {\r\n  const socket = this;\r\n  const req = this._httpMessage;\r\n  const parser = this.parser;\r\n\r\n  if (!req.res && !req.socket._hadError) {\r\n    // If we don't have a response then we know that the socket\r\n    // ended prematurely and we need to emit an error on the request.\r\n    req.socket._hadError = true;\r\n    req.emit('error', new ConnResetException('socket hang up'));\r\n  }\r\n  if (parser) {\r\n    parser.finish();\r\n    freeParser(parser, req, socket);\r\n  }\r\n  socket.destroy();\r\n}\r\n\r\nfunction socketOnData(d) {\r\n  const socket = this;\r\n  const req = this._httpMessage;\r\n  const parser = this.parser;\r\n\r\n  assert(parser && parser.socket === socket);\r\n\r\n  const ret = parser.execute(d);\r\n  if (ret instanceof Error) {\r\n    prepareError(ret, parser, d);\r\n    debug('parse error', ret);\r\n    freeParser(parser, req, socket);\r\n    socket.removeListener('data', socketOnData);\r\n    socket.removeListener('end', socketOnEnd);\r\n    socket.destroy();\r\n    req.socket._hadError = true;\r\n    req.emit('error', ret);\r\n  } else if (parser.incoming && parser.incoming.upgrade) {\r\n    // Upgrade (if status code 101) or CONNECT\r\n    const bytesParsed = ret;\r\n    const res = parser.incoming;\r\n    req.res = res;\r\n\r\n    socket.removeListener('data', socketOnData);\r\n    socket.removeListener('end', socketOnEnd);\r\n    socket.removeListener('drain', ondrain);\r\n\r\n    if (req.timeoutCb) socket.removeListener('timeout', req.timeoutCb);\r\n    socket.removeListener('timeout', responseOnTimeout);\r\n\r\n    parser.finish();\r\n    freeParser(parser, req, socket);\r\n\r\n    const bodyHead = TypedArrayPrototypeSlice(d, bytesParsed, d.length);\r\n\r\n    const eventName = req.method === 'CONNECT' ? 'connect' : 'upgrade';\r\n    if (req.listenerCount(eventName) > 0) {\r\n      req.upgradeOrConnect = true;\r\n\r\n      // detach the socket\r\n      socket.emit('agentRemove');\r\n      socket.removeListener('close', socketCloseListener);\r\n      socket.removeListener('error', socketErrorListener);\r\n\r\n      socket._httpMessage = null;\r\n      socket.readableFlowing = null;\r\n\r\n      req.emit(eventName, res, socket, bodyHead);\r\n      req.destroyed = true;\r\n      req._closed = true;\r\n      req.emit('close');\r\n    } else {\r\n      // Requested Upgrade or used CONNECT method, but have no handler.\r\n      socket.destroy();\r\n    }\r\n  } else if (parser.incoming && parser.incoming.complete &&\r\n             // When the status code is informational (100, 102-199),\r\n             // the server will send a final response after this client\r\n             // sends a request body, so we must not free the parser.\r\n             // 101 (Switching Protocols) and all other status codes\r\n             // should be processed normally.\r\n             !statusIsInformational(parser.incoming.statusCode)) {\r\n    socket.removeListener('data', socketOnData);\r\n    socket.removeListener('end', socketOnEnd);\r\n    socket.removeListener('drain', ondrain);\r\n    freeParser(parser, req, socket);\r\n  }\r\n}\r\n\r\nfunction statusIsInformational(status) {\r\n  // 100 (Continue)    RFC7231 Section 6.2.1\r\n  // 102 (Processing)  RFC2518\r\n  // 103 (Early Hints) RFC8297\r\n  // 104-199 (Unassigned)\r\n  return (status < 200 && status >= 100 && status !== 101);\r\n}\r\n\r\n// client\r\nfunction parserOnIncomingClient(res, shouldKeepAlive) {\r\n  const socket = this.socket;\r\n  const req = socket._httpMessage;\r\n\r\n  debug('AGENT incoming response!');\r\n\r\n  if (req.res) {\r\n    // We already have a response object, this means the server\r\n    // sent a double response.\r\n    socket.destroy();\r\n    return 0;  // No special treatment.\r\n  }\r\n  req.res = res;\r\n\r\n  // Skip body and treat as Upgrade.\r\n  if (res.upgrade)\r\n    return 2;\r\n\r\n  // Responses to CONNECT request is handled as Upgrade.\r\n  const method = req.method;\r\n  if (method === 'CONNECT') {\r\n    res.upgrade = true;\r\n    return 2;  // Skip body and treat as Upgrade.\r\n  }\r\n\r\n  if (statusIsInformational(res.statusCode)) {\r\n    // Restart the parser, as this is a 1xx informational message.\r\n    req.res = null; // Clear res so that we don't hit double-responses.\r\n    // Maintain compatibility by sending 100-specific events\r\n    if (res.statusCode === 100) {\r\n      req.emit('continue');\r\n    }\r\n    // Send information events to all 1xx responses except 101 Upgrade.\r\n    req.emit('information', {\r\n      statusCode: res.statusCode,\r\n      statusMessage: res.statusMessage,\r\n      httpVersion: res.httpVersion,\r\n      httpVersionMajor: res.httpVersionMajor,\r\n      httpVersionMinor: res.httpVersionMinor,\r\n      headers: res.headers,\r\n      rawHeaders: res.rawHeaders,\r\n    });\r\n\r\n    return 1;  // Skip body but don't treat as Upgrade.\r\n  }\r\n\r\n  if (req.shouldKeepAlive && !shouldKeepAlive && !req.upgradeOrConnect) {\r\n    // Server MUST respond with Connection:keep-alive for us to enable it.\r\n    // If we've been upgraded (via WebSockets) we also shouldn't try to\r\n    // keep the connection open.\r\n    req.shouldKeepAlive = false;\r\n  }\r\n\r\n  if (req[kClientRequestStatistics] && hasObserver('http')) {\r\n    stopPerf(req, kClientRequestStatistics, {\r\n      detail: {\r\n        res: {\r\n          statusCode: res.statusCode,\r\n          statusMessage: res.statusMessage,\r\n          headers: res.headers,\r\n        },\r\n      },\r\n    });\r\n  }\r\n  if (onClientResponseFinishChannel.hasSubscribers) {\r\n    onClientResponseFinishChannel.publish({\r\n      request: req,\r\n      response: res,\r\n    });\r\n  }\r\n  if (isTraceHTTPEnabled() && typeof req._traceEventId === 'number') {\r\n    traceEnd(HTTP_CLIENT_TRACE_EVENT_NAME, req._traceEventId, {\r\n      path: req.path,\r\n      statusCode: res.statusCode,\r\n    });\r\n  }\r\n  req.res = res;\r\n  res.req = req;\r\n\r\n  // Add our listener first, so that we guarantee socket cleanup\r\n  res.on('end', responseOnEnd);\r\n  req.on('finish', requestOnFinish);\r\n  socket.on('timeout', responseOnTimeout);\r\n\r\n  // If the user did not listen for the 'response' event, then they\r\n  // can't possibly read the data, so we ._dump() it into the void\r\n  // so that the socket doesn't hang there in a paused state.\r\n  if (req.aborted || !req.emit('response', res))\r\n    res._dump();\r\n\r\n  if (method === 'HEAD')\r\n    return 1;  // Skip body but don't treat as Upgrade.\r\n\r\n  if (res.statusCode === 304) {\r\n    res.complete = true;\r\n    return 1; // Skip body as there won't be any\r\n  }\r\n\r\n  return 0;  // No special treatment.\r\n}\r\n\r\n// client\r\nfunction responseKeepAlive(req) {\r\n  const socket = req.socket;\r\n\r\n  debug('AGENT socket keep-alive');\r\n  if (req.timeoutCb) {\r\n    socket.setTimeout(0, req.timeoutCb);\r\n    req.timeoutCb = null;\r\n  }\r\n  socket.removeListener('close', socketCloseListener);\r\n  socket.removeListener('error', socketErrorListener);\r\n  socket.removeListener('data', socketOnData);\r\n  socket.removeListener('end', socketOnEnd);\r\n\r\n  // TODO(ronag): Between here and emitFreeNT the socket\r\n  // has no 'error' handler.\r\n\r\n  // There are cases where _handle === null. Avoid those. Passing undefined to\r\n  // nextTick() will call getDefaultTriggerAsyncId() to retrieve the id.\r\n  const asyncId = socket._handle ? socket._handle.getAsyncId() : undefined;\r\n  // Mark this socket as available, AFTER user-added end\r\n  // handlers have a chance to run.\r\n  defaultTriggerAsyncIdScope(asyncId, process.nextTick, emitFreeNT, req);\r\n\r\n  req.destroyed = true;\r\n  if (req.res) {\r\n    // Detach socket from IncomingMessage to avoid destroying the freed\r\n    // socket in IncomingMessage.destroy().\r\n    req.res.socket = null;\r\n  }\r\n}\r\n\r\nfunction responseOnEnd() {\r\n  const req = this.req;\r\n  const socket = req.socket;\r\n\r\n  if (socket) {\r\n    if (req.timeoutCb) socket.removeListener('timeout', emitRequestTimeout);\r\n    socket.removeListener('timeout', responseOnTimeout);\r\n  }\r\n\r\n  req._ended = true;\r\n\r\n  if (!req.shouldKeepAlive) {\r\n    if (socket.writable) {\r\n      debug('AGENT socket.destroySoon()');\r\n      if (typeof socket.destroySoon === 'function')\r\n        socket.destroySoon();\r\n      else\r\n        socket.end();\r\n    }\r\n    assert(!socket.writable);\r\n  } else if (req.writableFinished && !this.aborted) {\r\n    assert(req.finished);\r\n    // We can assume `req.finished` means all data has been written since:\r\n    // - `'responseOnEnd'` means we have been assigned a socket.\r\n    // - when we have a socket we write directly to it without buffering.\r\n    // - `req.finished` means `end()` has been called and no further data.\r\n    //   can be written\r\n    // In addition, `req.writableFinished` means all data written has been\r\n    // accepted by the kernel. (i.e. the `req.socket` is drained).Without\r\n    // this constraint, we may assign a non drained socket to a request.\r\n    responseKeepAlive(req);\r\n  }\r\n}\r\n\r\nfunction responseOnTimeout() {\r\n  const req = this._httpMessage;\r\n  if (!req) return;\r\n  const res = req.res;\r\n  if (!res) return;\r\n  res.emit('timeout');\r\n}\r\n\r\n// This function is necessary in the case where we receive the entire response\r\n// from the server before we finish sending out the request.\r\nfunction requestOnFinish() {\r\n  const req = this;\r\n\r\n  if (req.shouldKeepAlive && req._ended)\r\n    responseKeepAlive(req);\r\n}\r\n\r\nfunction emitFreeNT(req) {\r\n  req._closed = true;\r\n  req.emit('close');\r\n  if (req.socket) {\r\n    req.socket.emit('free');\r\n  }\r\n}\r\n\r\nfunction tickOnSocket(req, socket) {\r\n  const parser = parsers.alloc();\r\n  req.socket = socket;\r\n  const lenient = req.insecureHTTPParser === undefined ?\r\n    isLenient() : req.insecureHTTPParser;\r\n  parser.initialize(HTTPParser.RESPONSE,\r\n                    new HTTPClientAsyncResource('HTTPINCOMINGMESSAGE', req),\r\n                    req.maxHeaderSize || 0,\r\n                    lenient ? kLenientAll : kLenientNone);\r\n  parser.socket = socket;\r\n  parser.outgoing = req;\r\n  req.parser = parser;\r\n\r\n  socket.parser = parser;\r\n  socket._httpMessage = req;\r\n\r\n  // Propagate headers limit from request object to parser\r\n  if (typeof req.maxHeadersCount === 'number') {\r\n    parser.maxHeaderPairs = req.maxHeadersCount << 1;\r\n  }\r\n\r\n  parser.joinDuplicateHeaders = req.joinDuplicateHeaders;\r\n\r\n  parser.onIncoming = parserOnIncomingClient;\r\n  socket.on('error', socketErrorListener);\r\n  socket.on('data', socketOnData);\r\n  socket.on('end', socketOnEnd);\r\n  socket.on('close', socketCloseListener);\r\n  socket.on('drain', ondrain);\r\n\r\n  if (\r\n    req.timeout !== undefined ||\r\n    (req.agent && req.agent.options && req.agent.options.timeout)\r\n  ) {\r\n    listenSocketTimeout(req);\r\n  }\r\n  req.emit('socket', socket);\r\n}\r\n\r\nfunction emitRequestTimeout() {\r\n  const req = this._httpMessage;\r\n  if (req) {\r\n    req.emit('timeout');\r\n  }\r\n}\r\n\r\nfunction listenSocketTimeout(req) {\r\n  if (req.timeoutCb) {\r\n    return;\r\n  }\r\n  // Set timeoutCb so it will get cleaned up on request end.\r\n  req.timeoutCb = emitRequestTimeout;\r\n  // Delegate socket timeout event.\r\n  if (req.socket) {\r\n    req.socket.once('timeout', emitRequestTimeout);\r\n  } else {\r\n    req.on('socket', (socket) => {\r\n      socket.once('timeout', emitRequestTimeout);\r\n    });\r\n  }\r\n}\r\n\r\nClientRequest.prototype.onSocket = function onSocket(socket, err) {\r\n  // TODO(ronag): Between here and onSocketNT the socket\r\n  // has no 'error' handler.\r\n  process.nextTick(onSocketNT, this, socket, err);\r\n};\r\n\r\nfunction onSocketNT(req, socket, err) {\r\n  if (req.destroyed || err) {\r\n    req.destroyed = true;\r\n\r\n    function _destroy(req, err) {\r\n      if (!req.aborted && !err) {\r\n        err = new ConnResetException('socket hang up');\r\n      }\r\n      if (err) {\r\n        req.emit('error', err);\r\n      }\r\n      req._closed = true;\r\n      req.emit('close');\r\n    }\r\n\r\n    if (socket) {\r\n      if (!err && req.agent && !socket.destroyed) {\r\n        socket.emit('free');\r\n      } else {\r\n        finished(socket.destroy(err || req[kError]), (er) => {\r\n          if (er?.code === 'ERR_STREAM_PREMATURE_CLOSE') {\r\n            er = null;\r\n          }\r\n          _destroy(req, er || err);\r\n        });\r\n        return;\r\n      }\r\n    }\r\n\r\n    _destroy(req, err || req[kError]);\r\n  } else {\r\n    tickOnSocket(req, socket);\r\n    req._flush();\r\n  }\r\n}\r\n\r\nClientRequest.prototype._deferToConnect = _deferToConnect;\r\nfunction _deferToConnect(method, arguments_) {\r\n  // This function is for calls that need to happen once the socket is\r\n  // assigned to this request and writable. It's an important promisy\r\n  // thing for all the socket calls that happen either now\r\n  // (when a socket is assigned) or in the future (when a socket gets\r\n  // assigned out of the pool and is eventually writable).\r\n\r\n  const callSocketMethod = () => {\r\n    if (method)\r\n      ReflectApply(this.socket[method], this.socket, arguments_);\r\n  };\r\n\r\n  const onSocket = () => {\r\n    if (this.socket.writable) {\r\n      callSocketMethod();\r\n    } else {\r\n      this.socket.once('connect', callSocketMethod);\r\n    }\r\n  };\r\n\r\n  if (!this.socket) {\r\n    this.once('socket', onSocket);\r\n  } else {\r\n    onSocket();\r\n  }\r\n}\r\n\r\nClientRequest.prototype.setTimeout = function setTimeout(msecs, callback) {\r\n  if (this._ended) {\r\n    return this;\r\n  }\r\n\r\n  listenSocketTimeout(this);\r\n  msecs = getTimerDuration(msecs, 'msecs');\r\n  if (callback) this.once('timeout', callback);\r\n\r\n  if (this.socket) {\r\n    setSocketTimeout(this.socket, msecs);\r\n  } else {\r\n    this.once('socket', (sock) => setSocketTimeout(sock, msecs));\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nfunction setSocketTimeout(sock, msecs) {\r\n  if (sock.connecting) {\r\n    sock.once('connect', function() {\r\n      sock.setTimeout(msecs);\r\n    });\r\n  } else {\r\n    sock.setTimeout(msecs);\r\n  }\r\n}\r\n\r\nClientRequest.prototype.setNoDelay = function setNoDelay(noDelay) {\r\n  this._deferToConnect('setNoDelay', [noDelay]);\r\n};\r\n\r\nClientRequest.prototype.setSocketKeepAlive =\r\n    function setSocketKeepAlive(enable, initialDelay) {\r\n      this._deferToConnect('setKeepAlive', [enable, initialDelay]);\r\n    };\r\n\r\nClientRequest.prototype.clearTimeout = function clearTimeout(cb) {\r\n  this.setTimeout(0, cb);\r\n};\r\n\r\nmodule.exports = {\r\n  ClientRequest,\r\n};\r\n"
  },
  "105": {
    "metadata": {
      "scriptId": "105",
      "url": "node:_http_common",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 271,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "391f746f7be66e292b0ca2bcb209f1be3fe64a00835a81fe67e761d00cc63151",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 8547,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_http_common"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  MathMin,\r\n  RegExpPrototypeExec,\r\n  Symbol,\r\n} = primordials;\r\nconst { setImmediate } = require('timers');\r\n\r\nconst { methods, allMethods, HTTPParser } = internalBinding('http_parser');\r\nconst { getOptionValue } = require('internal/options');\r\nconst insecureHTTPParser = getOptionValue('--insecure-http-parser');\r\n\r\nconst FreeList = require('internal/freelist');\r\nconst incoming = require('_http_incoming');\r\nconst {\r\n  IncomingMessage,\r\n  readStart,\r\n  readStop,\r\n} = incoming;\r\n\r\nconst kIncomingMessage = Symbol('IncomingMessage');\r\nconst kOnMessageBegin = HTTPParser.kOnMessageBegin | 0;\r\nconst kOnHeaders = HTTPParser.kOnHeaders | 0;\r\nconst kOnHeadersComplete = HTTPParser.kOnHeadersComplete | 0;\r\nconst kOnBody = HTTPParser.kOnBody | 0;\r\nconst kOnMessageComplete = HTTPParser.kOnMessageComplete | 0;\r\nconst kOnExecute = HTTPParser.kOnExecute | 0;\r\nconst kOnTimeout = HTTPParser.kOnTimeout | 0;\r\n\r\nconst MAX_HEADER_PAIRS = 2000;\r\n\r\n// Only called in the slow case where slow means\r\n// that the request headers were either fragmented\r\n// across multiple TCP packets or too large to be\r\n// processed in a single run. This method is also\r\n// called to process trailing HTTP headers.\r\nfunction parserOnHeaders(headers, url) {\r\n  // Once we exceeded headers limit - stop collecting them\r\n  if (this.maxHeaderPairs <= 0 ||\r\n      this._headers.length < this.maxHeaderPairs) {\r\n    this._headers.push(...headers);\r\n  }\r\n  this._url += url;\r\n}\r\n\r\n// `headers` and `url` are set only if .onHeaders() has not been called for\r\n// this request.\r\n// `url` is not set for response parsers but that's not applicable here since\r\n// all our parsers are request parsers.\r\nfunction parserOnHeadersComplete(versionMajor, versionMinor, headers, method,\r\n                                 url, statusCode, statusMessage, upgrade,\r\n                                 shouldKeepAlive) {\r\n  const parser = this;\r\n  const { socket } = parser;\r\n\r\n  if (headers === undefined) {\r\n    headers = parser._headers;\r\n    parser._headers = [];\r\n  }\r\n\r\n  if (url === undefined) {\r\n    url = parser._url;\r\n    parser._url = '';\r\n  }\r\n\r\n  // Parser is also used by http client\r\n  const ParserIncomingMessage = (socket && socket.server &&\r\n                                 socket.server[kIncomingMessage]) ||\r\n                                 IncomingMessage;\r\n\r\n  const incoming = parser.incoming = new ParserIncomingMessage(socket);\r\n  incoming.httpVersionMajor = versionMajor;\r\n  incoming.httpVersionMinor = versionMinor;\r\n  incoming.httpVersion = `${versionMajor}.${versionMinor}`;\r\n  incoming.joinDuplicateHeaders = socket?.server?.joinDuplicateHeaders ||\r\n                                  parser.joinDuplicateHeaders;\r\n  incoming.url = url;\r\n  incoming.upgrade = upgrade;\r\n\r\n  let n = headers.length;\r\n\r\n  // If parser.maxHeaderPairs <= 0 assume that there's no limit.\r\n  if (parser.maxHeaderPairs > 0)\r\n    n = MathMin(n, parser.maxHeaderPairs);\r\n\r\n  incoming._addHeaderLines(headers, n);\r\n\r\n  if (typeof method === 'number') {\r\n    // server only\r\n    incoming.method = allMethods[method];\r\n  } else {\r\n    // client only\r\n    incoming.statusCode = statusCode;\r\n    incoming.statusMessage = statusMessage;\r\n  }\r\n\r\n  return parser.onIncoming(incoming, shouldKeepAlive);\r\n}\r\n\r\nfunction parserOnBody(b) {\r\n  const stream = this.incoming;\r\n\r\n  // If the stream has already been removed, then drop it.\r\n  if (stream === null)\r\n    return;\r\n\r\n  // Pretend this was the result of a stream._read call.\r\n  if (!stream._dumped) {\r\n    const ret = stream.push(b);\r\n    if (!ret)\r\n      readStop(this.socket);\r\n  }\r\n}\r\n\r\nfunction parserOnMessageComplete() {\r\n  const parser = this;\r\n  const stream = parser.incoming;\r\n\r\n  if (stream !== null) {\r\n    stream.complete = true;\r\n    // Emit any trailing headers.\r\n    const headers = parser._headers;\r\n    if (headers.length) {\r\n      stream._addHeaderLines(headers, headers.length);\r\n      parser._headers = [];\r\n      parser._url = '';\r\n    }\r\n\r\n    // For emit end event\r\n    stream.push(null);\r\n  }\r\n\r\n  // Force to read the next incoming message\r\n  readStart(parser.socket);\r\n}\r\n\r\n\r\nconst parsers = new FreeList('parsers', 1000, function parsersCb() {\r\n  const parser = new HTTPParser();\r\n\r\n  cleanParser(parser);\r\n\r\n  parser[kOnHeaders] = parserOnHeaders;\r\n  parser[kOnHeadersComplete] = parserOnHeadersComplete;\r\n  parser[kOnBody] = parserOnBody;\r\n  parser[kOnMessageComplete] = parserOnMessageComplete;\r\n\r\n  return parser;\r\n});\r\n\r\nfunction closeParserInstance(parser) { parser.close(); }\r\n\r\n// Free the parser and also break any links that it\r\n// might have to any other things.\r\n// TODO: All parser data should be attached to a\r\n// single object, so that it can be easily cleaned\r\n// up by doing `parser.data = {}`, which should\r\n// be done in FreeList.free.  `parsers.free(parser)`\r\n// should be all that is needed.\r\nfunction freeParser(parser, req, socket) {\r\n  if (parser) {\r\n    if (parser._consumed)\r\n      parser.unconsume();\r\n    cleanParser(parser);\r\n    parser.remove();\r\n    if (parsers.free(parser) === false) {\r\n      // Make sure the parser's stack has unwound before deleting the\r\n      // corresponding C++ object through .close().\r\n      setImmediate(closeParserInstance, parser);\r\n    } else {\r\n      // Since the Parser destructor isn't going to run the destroy() callbacks\r\n      // it needs to be triggered manually.\r\n      parser.free();\r\n    }\r\n  }\r\n  if (req) {\r\n    req.parser = null;\r\n  }\r\n  if (socket) {\r\n    socket.parser = null;\r\n  }\r\n}\r\n\r\nconst tokenRegExp = /^[\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]+$/;\r\n/**\r\n * Verifies that the given val is a valid HTTP token\r\n * per the rules defined in RFC 7230\r\n * See https://tools.ietf.org/html/rfc7230#section-3.2.6\r\n */\r\nfunction checkIsHttpToken(val) {\r\n  return RegExpPrototypeExec(tokenRegExp, val) !== null;\r\n}\r\n\r\nconst headerCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\r\n/**\r\n * True if val contains an invalid field-vchar\r\n *  field-value    = *( field-content / obs-fold )\r\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n *  field-vchar    = VCHAR / obs-text\r\n */\r\nfunction checkInvalidHeaderChar(val) {\r\n  return RegExpPrototypeExec(headerCharRegex, val) !== null;\r\n}\r\n\r\nfunction cleanParser(parser) {\r\n  parser._headers = [];\r\n  parser._url = '';\r\n  parser.socket = null;\r\n  parser.incoming = null;\r\n  parser.outgoing = null;\r\n  parser.maxHeaderPairs = MAX_HEADER_PAIRS;\r\n  parser[kOnMessageBegin] = null;\r\n  parser[kOnExecute] = null;\r\n  parser[kOnTimeout] = null;\r\n  parser._consumed = false;\r\n  parser.onIncoming = null;\r\n  parser.joinDuplicateHeaders = null;\r\n}\r\n\r\nfunction prepareError(err, parser, rawPacket) {\r\n  err.rawPacket = rawPacket || parser.getCurrentBuffer();\r\n  if (typeof err.reason === 'string')\r\n    err.message = `Parse Error: ${err.reason}`;\r\n}\r\n\r\nlet warnedLenient = false;\r\n\r\nfunction isLenient() {\r\n  if (insecureHTTPParser && !warnedLenient) {\r\n    warnedLenient = true;\r\n    process.emitWarning('Using insecure HTTP parsing');\r\n  }\r\n  return insecureHTTPParser;\r\n}\r\n\r\nmodule.exports = {\r\n  _checkInvalidHeaderChar: checkInvalidHeaderChar,\r\n  _checkIsHttpToken: checkIsHttpToken,\r\n  chunkExpression: /(?:^|\\W)chunked(?:$|\\W)/i,\r\n  continueExpression: /(?:^|\\W)100-continue(?:$|\\W)/i,\r\n  CRLF: '\\r\\n', // TODO: Deprecate this.\r\n  freeParser,\r\n  methods,\r\n  parsers,\r\n  kIncomingMessage,\r\n  HTTPParser,\r\n  isLenient,\r\n  prepareError,\r\n};\r\n"
  },
  "106": {
    "metadata": {
      "scriptId": "106",
      "url": "node:internal/freelist",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 30,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "8a9e1d8cc2d6f7839a298b33c30a91a82fb6b49d5f5938240ba37e6f0202d41a",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 506,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/freelist"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ReflectApply,\r\n} = primordials;\r\n\r\nclass FreeList {\r\n  constructor(name, max, ctor) {\r\n    this.name = name;\r\n    this.ctor = ctor;\r\n    this.max = max;\r\n    this.list = [];\r\n  }\r\n\r\n  alloc() {\r\n    return this.list.length > 0 ?\r\n      this.list.pop() :\r\n      ReflectApply(this.ctor, this, arguments);\r\n  }\r\n\r\n  free(obj) {\r\n    if (this.list.length < this.max) {\r\n      this.list.push(obj);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = FreeList;\r\n"
  },
  "107": {
    "metadata": {
      "scriptId": "107",
      "url": "node:_http_incoming",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 456,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "6a30a8e364fb410b9fe8cd200426aeee073cbc89ee9dbd427ca531ba80bec3e6",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 15359,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_http_incoming"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeSlice,\r\n  StringPrototypeToLowerCase,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst { Readable, finished } = require('stream');\r\n\r\nconst kHeaders = Symbol('kHeaders');\r\nconst kHeadersDistinct = Symbol('kHeadersDistinct');\r\nconst kHeadersCount = Symbol('kHeadersCount');\r\nconst kTrailers = Symbol('kTrailers');\r\nconst kTrailersDistinct = Symbol('kTrailersDistinct');\r\nconst kTrailersCount = Symbol('kTrailersCount');\r\n\r\nfunction readStart(socket) {\r\n  if (socket && !socket._paused && socket.readable)\r\n    socket.resume();\r\n}\r\n\r\nfunction readStop(socket) {\r\n  if (socket)\r\n    socket.pause();\r\n}\r\n\r\n/* Abstract base class for ServerRequest and ClientResponse. */\r\nfunction IncomingMessage(socket) {\r\n  let streamOptions;\r\n\r\n  if (socket) {\r\n    streamOptions = {\r\n      highWaterMark: socket.readableHighWaterMark,\r\n    };\r\n  }\r\n\r\n  Readable.call(this, streamOptions);\r\n\r\n  this._readableState.readingMore = true;\r\n\r\n  this.socket = socket;\r\n\r\n  this.httpVersionMajor = null;\r\n  this.httpVersionMinor = null;\r\n  this.httpVersion = null;\r\n  this.complete = false;\r\n  this[kHeaders] = null;\r\n  this[kHeadersCount] = 0;\r\n  this.rawHeaders = [];\r\n  this[kTrailers] = null;\r\n  this[kTrailersCount] = 0;\r\n  this.rawTrailers = [];\r\n  this.joinDuplicateHeaders = false;\r\n  this.aborted = false;\r\n\r\n  this.upgrade = null;\r\n\r\n  // request (server) only\r\n  this.url = '';\r\n  this.method = null;\r\n\r\n  // response (client) only\r\n  this.statusCode = null;\r\n  this.statusMessage = null;\r\n  this.client = socket;\r\n\r\n  this._consuming = false;\r\n  // Flag for when we decide that this message cannot possibly be\r\n  // read by the user, so there's no point continuing to handle it.\r\n  this._dumped = false;\r\n}\r\nObjectSetPrototypeOf(IncomingMessage.prototype, Readable.prototype);\r\nObjectSetPrototypeOf(IncomingMessage, Readable);\r\n\r\nObjectDefineProperty(IncomingMessage.prototype, 'connection', {\r\n  __proto__: null,\r\n  get: function() {\r\n    return this.socket;\r\n  },\r\n  set: function(val) {\r\n    this.socket = val;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(IncomingMessage.prototype, 'headers', {\r\n  __proto__: null,\r\n  get: function() {\r\n    if (!this[kHeaders]) {\r\n      this[kHeaders] = {};\r\n\r\n      const src = this.rawHeaders;\r\n      const dst = this[kHeaders];\r\n\r\n      for (let n = 0; n < this[kHeadersCount]; n += 2) {\r\n        this._addHeaderLine(src[n + 0], src[n + 1], dst);\r\n      }\r\n    }\r\n    return this[kHeaders];\r\n  },\r\n  set: function(val) {\r\n    this[kHeaders] = val;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(IncomingMessage.prototype, 'headersDistinct', {\r\n  __proto__: null,\r\n  get: function() {\r\n    if (!this[kHeadersDistinct]) {\r\n      this[kHeadersDistinct] = {};\r\n\r\n      const src = this.rawHeaders;\r\n      const dst = this[kHeadersDistinct];\r\n\r\n      for (let n = 0; n < this[kHeadersCount]; n += 2) {\r\n        this._addHeaderLineDistinct(src[n + 0], src[n + 1], dst);\r\n      }\r\n    }\r\n    return this[kHeadersDistinct];\r\n  },\r\n  set: function(val) {\r\n    this[kHeadersDistinct] = val;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(IncomingMessage.prototype, 'trailers', {\r\n  __proto__: null,\r\n  get: function() {\r\n    if (!this[kTrailers]) {\r\n      this[kTrailers] = {};\r\n\r\n      const src = this.rawTrailers;\r\n      const dst = this[kTrailers];\r\n\r\n      for (let n = 0; n < this[kTrailersCount]; n += 2) {\r\n        this._addHeaderLine(src[n + 0], src[n + 1], dst);\r\n      }\r\n    }\r\n    return this[kTrailers];\r\n  },\r\n  set: function(val) {\r\n    this[kTrailers] = val;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(IncomingMessage.prototype, 'trailersDistinct', {\r\n  __proto__: null,\r\n  get: function() {\r\n    if (!this[kTrailersDistinct]) {\r\n      this[kTrailersDistinct] = {};\r\n\r\n      const src = this.rawTrailers;\r\n      const dst = this[kTrailersDistinct];\r\n\r\n      for (let n = 0; n < this[kTrailersCount]; n += 2) {\r\n        this._addHeaderLineDistinct(src[n + 0], src[n + 1], dst);\r\n      }\r\n    }\r\n    return this[kTrailersDistinct];\r\n  },\r\n  set: function(val) {\r\n    this[kTrailersDistinct] = val;\r\n  },\r\n});\r\n\r\nIncomingMessage.prototype.setTimeout = function setTimeout(msecs, callback) {\r\n  if (callback)\r\n    this.on('timeout', callback);\r\n  this.socket.setTimeout(msecs);\r\n  return this;\r\n};\r\n\r\n// Argument n cannot be factored out due to the overhead of\r\n// argument adaptor frame creation inside V8 in case that number of actual\r\n// arguments is different from expected arguments.\r\n// Ref: https://bugs.chromium.org/p/v8/issues/detail?id=10201\r\n// NOTE: Argument adapt frame issue might be solved in V8 engine v8.9.\r\n// Refactoring `n` out might be possible when V8 is upgraded to that\r\n// version.\r\n// Ref: https://v8.dev/blog/v8-release-89\r\nIncomingMessage.prototype._read = function _read(n) {\r\n  if (!this._consuming) {\r\n    this._readableState.readingMore = false;\r\n    this._consuming = true;\r\n  }\r\n\r\n  // We actually do almost nothing here, because the parserOnBody\r\n  // function fills up our internal buffer directly.  However, we\r\n  // do need to unpause the underlying socket so that it flows.\r\n  if (this.socket.readable)\r\n    readStart(this.socket);\r\n};\r\n\r\n// It's possible that the socket will be destroyed, and removed from\r\n// any messages, before ever calling this.  In that case, just skip\r\n// it, since something else is destroying this connection anyway.\r\nIncomingMessage.prototype._destroy = function _destroy(err, cb) {\r\n  if (!this.readableEnded || !this.complete) {\r\n    this.aborted = true;\r\n    this.emit('aborted');\r\n  }\r\n\r\n  // If aborted and the underlying socket is not already destroyed,\r\n  // destroy it.\r\n  // We have to check if the socket is already destroyed because finished\r\n  // does not call the callback when this method is invoked from `_http_client`\r\n  // in `test/parallel/test-http-client-spurious-aborted.js`\r\n  if (this.socket && !this.socket.destroyed && this.aborted) {\r\n    this.socket.destroy(err);\r\n    const cleanup = finished(this.socket, (e) => {\r\n      if (e?.code === 'ERR_STREAM_PREMATURE_CLOSE') {\r\n        e = null;\r\n      }\r\n      cleanup();\r\n      process.nextTick(onError, this, e || err, cb);\r\n    });\r\n  } else {\r\n    process.nextTick(onError, this, err, cb);\r\n  }\r\n};\r\n\r\nIncomingMessage.prototype._addHeaderLines = _addHeaderLines;\r\nfunction _addHeaderLines(headers, n) {\r\n  if (headers && headers.length) {\r\n    let dest;\r\n    if (this.complete) {\r\n      this.rawTrailers = headers;\r\n      this[kTrailersCount] = n;\r\n      dest = this[kTrailers];\r\n    } else {\r\n      this.rawHeaders = headers;\r\n      this[kHeadersCount] = n;\r\n      dest = this[kHeaders];\r\n    }\r\n\r\n    if (dest) {\r\n      for (let i = 0; i < n; i += 2) {\r\n        this._addHeaderLine(headers[i], headers[i + 1], dest);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// This function is used to help avoid the lowercasing of a field name if it\r\n// matches a 'traditional cased' version of a field name. It then returns the\r\n// lowercased name to both avoid calling toLowerCase() a second time and to\r\n// indicate whether the field was a 'no duplicates' field. If a field is not a\r\n// 'no duplicates' field, a `0` byte is prepended as a flag. The one exception\r\n// to this is the Set-Cookie header which is indicated by a `1` byte flag, since\r\n// it is an 'array' field and thus is treated differently in _addHeaderLines().\r\n// TODO: perhaps http_parser could be returning both raw and lowercased versions\r\n// of known header names to avoid us having to call toLowerCase() for those\r\n// headers.\r\nfunction matchKnownFields(field, lowercased) {\r\n  switch (field.length) {\r\n    case 3:\r\n      if (field === 'Age' || field === 'age') return 'age';\r\n      break;\r\n    case 4:\r\n      if (field === 'Host' || field === 'host') return 'host';\r\n      if (field === 'From' || field === 'from') return 'from';\r\n      if (field === 'ETag' || field === 'etag') return 'etag';\r\n      if (field === 'Date' || field === 'date') return '\\u0000date';\r\n      if (field === 'Vary' || field === 'vary') return '\\u0000vary';\r\n      break;\r\n    case 6:\r\n      if (field === 'Server' || field === 'server') return 'server';\r\n      if (field === 'Cookie' || field === 'cookie') return '\\u0002cookie';\r\n      if (field === 'Origin' || field === 'origin') return '\\u0000origin';\r\n      if (field === 'Expect' || field === 'expect') return '\\u0000expect';\r\n      if (field === 'Accept' || field === 'accept') return '\\u0000accept';\r\n      break;\r\n    case 7:\r\n      if (field === 'Referer' || field === 'referer') return 'referer';\r\n      if (field === 'Expires' || field === 'expires') return 'expires';\r\n      if (field === 'Upgrade' || field === 'upgrade') return '\\u0000upgrade';\r\n      break;\r\n    case 8:\r\n      if (field === 'Location' || field === 'location')\r\n        return 'location';\r\n      if (field === 'If-Match' || field === 'if-match')\r\n        return '\\u0000if-match';\r\n      break;\r\n    case 10:\r\n      if (field === 'User-Agent' || field === 'user-agent')\r\n        return 'user-agent';\r\n      if (field === 'Set-Cookie' || field === 'set-cookie')\r\n        return '\\u0001';\r\n      if (field === 'Connection' || field === 'connection')\r\n        return '\\u0000connection';\r\n      break;\r\n    case 11:\r\n      if (field === 'Retry-After' || field === 'retry-after')\r\n        return 'retry-after';\r\n      break;\r\n    case 12:\r\n      if (field === 'Content-Type' || field === 'content-type')\r\n        return 'content-type';\r\n      if (field === 'Max-Forwards' || field === 'max-forwards')\r\n        return 'max-forwards';\r\n      break;\r\n    case 13:\r\n      if (field === 'Authorization' || field === 'authorization')\r\n        return 'authorization';\r\n      if (field === 'Last-Modified' || field === 'last-modified')\r\n        return 'last-modified';\r\n      if (field === 'Cache-Control' || field === 'cache-control')\r\n        return '\\u0000cache-control';\r\n      if (field === 'If-None-Match' || field === 'if-none-match')\r\n        return '\\u0000if-none-match';\r\n      break;\r\n    case 14:\r\n      if (field === 'Content-Length' || field === 'content-length')\r\n        return 'content-length';\r\n      break;\r\n    case 15:\r\n      if (field === 'Accept-Encoding' || field === 'accept-encoding')\r\n        return '\\u0000accept-encoding';\r\n      if (field === 'Accept-Language' || field === 'accept-language')\r\n        return '\\u0000accept-language';\r\n      if (field === 'X-Forwarded-For' || field === 'x-forwarded-for')\r\n        return '\\u0000x-forwarded-for';\r\n      break;\r\n    case 16:\r\n      if (field === 'Content-Encoding' || field === 'content-encoding')\r\n        return '\\u0000content-encoding';\r\n      if (field === 'X-Forwarded-Host' || field === 'x-forwarded-host')\r\n        return '\\u0000x-forwarded-host';\r\n      break;\r\n    case 17:\r\n      if (field === 'If-Modified-Since' || field === 'if-modified-since')\r\n        return 'if-modified-since';\r\n      if (field === 'Transfer-Encoding' || field === 'transfer-encoding')\r\n        return '\\u0000transfer-encoding';\r\n      if (field === 'X-Forwarded-Proto' || field === 'x-forwarded-proto')\r\n        return '\\u0000x-forwarded-proto';\r\n      break;\r\n    case 19:\r\n      if (field === 'Proxy-Authorization' || field === 'proxy-authorization')\r\n        return 'proxy-authorization';\r\n      if (field === 'If-Unmodified-Since' || field === 'if-unmodified-since')\r\n        return 'if-unmodified-since';\r\n      break;\r\n  }\r\n  if (lowercased) {\r\n    return '\\u0000' + field;\r\n  }\r\n  return matchKnownFields(StringPrototypeToLowerCase(field), true);\r\n}\r\n// Add the given (field, value) pair to the message\r\n//\r\n// Per RFC2616, section 4.2 it is acceptable to join multiple instances of the\r\n// same header with a ', ' if the header in question supports specification of\r\n// multiple values this way. The one exception to this is the Cookie header,\r\n// which has multiple values joined with a '; ' instead. If a header's values\r\n// cannot be joined in either of these ways, we declare the first instance the\r\n// winner and drop the second. Extended header fields (those beginning with\r\n// 'x-') are always joined.\r\nIncomingMessage.prototype._addHeaderLine = _addHeaderLine;\r\nfunction _addHeaderLine(field, value, dest) {\r\n  field = matchKnownFields(field);\r\n  const flag = StringPrototypeCharCodeAt(field, 0);\r\n  if (flag === 0 || flag === 2) {\r\n    field = StringPrototypeSlice(field, 1);\r\n    // Make a delimited list\r\n    if (typeof dest[field] === 'string') {\r\n      dest[field] += (flag === 0 ? ', ' : '; ') + value;\r\n    } else {\r\n      dest[field] = value;\r\n    }\r\n  } else if (flag === 1) {\r\n    // Array header -- only Set-Cookie at the moment\r\n    if (dest['set-cookie'] !== undefined) {\r\n      dest['set-cookie'].push(value);\r\n    } else {\r\n      dest['set-cookie'] = [value];\r\n    }\r\n  } else if (this.joinDuplicateHeaders) {\r\n    // RFC 9110 https://www.rfc-editor.org/rfc/rfc9110#section-5.2\r\n    // https://github.com/nodejs/node/issues/45699\r\n    // allow authorization multiple fields\r\n    // Make a delimited list\r\n    if (dest[field] === undefined) {\r\n      dest[field] = value;\r\n    } else {\r\n      dest[field] += ', ' + value;\r\n    }\r\n  } else if (dest[field] === undefined) {\r\n    // Drop duplicates\r\n    dest[field] = value;\r\n  }\r\n}\r\n\r\nIncomingMessage.prototype._addHeaderLineDistinct = _addHeaderLineDistinct;\r\nfunction _addHeaderLineDistinct(field, value, dest) {\r\n  field = StringPrototypeToLowerCase(field);\r\n  if (!dest[field]) {\r\n    dest[field] = [value];\r\n  } else {\r\n    dest[field].push(value);\r\n  }\r\n}\r\n\r\n\r\n// Call this instead of resume() if we want to just\r\n// dump all the data to /dev/null\r\nIncomingMessage.prototype._dump = function _dump() {\r\n  if (!this._dumped) {\r\n    this._dumped = true;\r\n    // If there is buffered data, it may trigger 'data' events.\r\n    // Remove 'data' event listeners explicitly.\r\n    this.removeAllListeners('data');\r\n    this.resume();\r\n  }\r\n};\r\n\r\nfunction onError(self, error, cb) {\r\n  // This is to keep backward compatible behavior.\r\n  // An error is emitted only if there are listeners attached to the event.\r\n  if (self.listenerCount('error') === 0) {\r\n    cb();\r\n  } else {\r\n    cb(error);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  IncomingMessage,\r\n  readStart,\r\n  readStop,\r\n};\r\n"
  },
  "108": {
    "metadata": {
      "scriptId": "108",
      "url": "node:_http_outgoing",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1259,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "13d110ecbb6454b2fa7bf60748d596b78c72f1fb113502cb9925594d00ea3646",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 37844,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_http_outgoing"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  Array,\r\n  ArrayIsArray,\r\n  ArrayPrototypeJoin,\r\n  MathFloor,\r\n  NumberPrototypeToString,\r\n  ObjectDefineProperty,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  ObjectSetPrototypeOf,\r\n  ObjectValues,\r\n  RegExpPrototypeExec,\r\n  SafeSet,\r\n  StringPrototypeToLowerCase,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst { getDefaultHighWaterMark } = require('internal/streams/state');\r\nconst assert = require('internal/assert');\r\nconst EE = require('events');\r\nconst Stream = require('stream');\r\nconst internalUtil = require('internal/util');\r\nconst { kOutHeaders, utcDate, kNeedDrain } = require('internal/http');\r\nconst { Buffer } = require('buffer');\r\nconst {\r\n  _checkIsHttpToken: checkIsHttpToken,\r\n  _checkInvalidHeaderChar: checkInvalidHeaderChar,\r\n  chunkExpression: RE_TE_CHUNKED,\r\n} = require('_http_common');\r\nconst {\r\n  defaultTriggerAsyncIdScope,\r\n  symbols: { async_id_symbol },\r\n} = require('internal/async_hooks');\r\nconst {\r\n  codes: {\r\n    ERR_HTTP_BODY_NOT_ALLOWED,\r\n    ERR_HTTP_CONTENT_LENGTH_MISMATCH,\r\n    ERR_HTTP_HEADERS_SENT,\r\n    ERR_HTTP_INVALID_HEADER_VALUE,\r\n    ERR_HTTP_TRAILER_INVALID,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_CHAR,\r\n    ERR_INVALID_HTTP_TOKEN,\r\n    ERR_METHOD_NOT_IMPLEMENTED,\r\n    ERR_STREAM_ALREADY_FINISHED,\r\n    ERR_STREAM_CANNOT_PIPE,\r\n    ERR_STREAM_DESTROYED,\r\n    ERR_STREAM_NULL_VALUES,\r\n    ERR_STREAM_WRITE_AFTER_END,\r\n  },\r\n  hideStackFrames,\r\n} = require('internal/errors');\r\nconst { validateString } = require('internal/validators');\r\nconst { isUint8Array } = require('internal/util/types');\r\n\r\nlet debug = require('internal/util/debuglog').debuglog('http', (fn) => {\r\n  debug = fn;\r\n});\r\n\r\nconst kCorked = Symbol('corked');\r\nconst kSocket = Symbol('kSocket');\r\nconst kChunkedBuffer = Symbol('kChunkedBuffer');\r\nconst kChunkedLength = Symbol('kChunkedLength');\r\nconst kUniqueHeaders = Symbol('kUniqueHeaders');\r\nconst kBytesWritten = Symbol('kBytesWritten');\r\nconst kErrored = Symbol('errored');\r\nconst kHighWaterMark = Symbol('kHighWaterMark');\r\nconst kRejectNonStandardBodyWrites = Symbol('kRejectNonStandardBodyWrites');\r\n\r\nconst nop = () => {};\r\n\r\nconst RE_CONN_CLOSE = /(?:^|\\W)close(?:$|\\W)/i;\r\n\r\n// isCookieField performs a case-insensitive comparison of a provided string\r\n// against the word \"cookie.\" As of V8 6.6 this is faster than handrolling or\r\n// using a case-insensitive RegExp.\r\nfunction isCookieField(s) {\r\n  return s.length === 6 && StringPrototypeToLowerCase(s) === 'cookie';\r\n}\r\n\r\nfunction isContentDispositionField(s) {\r\n  return s.length === 19 && StringPrototypeToLowerCase(s) === 'content-disposition';\r\n}\r\n\r\nfunction OutgoingMessage(options) {\r\n  Stream.call(this);\r\n\r\n  // Queue that holds all currently pending data, until the response will be\r\n  // assigned to the socket (until it will its turn in the HTTP pipeline).\r\n  this.outputData = [];\r\n\r\n  // `outputSize` is an approximate measure of how much data is queued on this\r\n  // response. `_onPendingData` will be invoked to update similar global\r\n  // per-connection counter. That counter will be used to pause/unpause the\r\n  // TCP socket and HTTP Parser and thus handle the backpressure.\r\n  this.outputSize = 0;\r\n\r\n  this.writable = true;\r\n  this.destroyed = false;\r\n\r\n  this._last = false;\r\n  this.chunkedEncoding = false;\r\n  this.shouldKeepAlive = true;\r\n  this.maxRequestsOnConnectionReached = false;\r\n  this._defaultKeepAlive = true;\r\n  this.useChunkedEncodingByDefault = true;\r\n  this.sendDate = false;\r\n  this._removedConnection = false;\r\n  this._removedContLen = false;\r\n  this._removedTE = false;\r\n\r\n  this.strictContentLength = false;\r\n  this[kBytesWritten] = 0;\r\n  this._contentLength = null;\r\n  this._hasBody = true;\r\n  this._trailer = '';\r\n  this[kNeedDrain] = false;\r\n\r\n  this.finished = false;\r\n  this._headerSent = false;\r\n  this[kCorked] = 0;\r\n  this[kChunkedBuffer] = [];\r\n  this[kChunkedLength] = 0;\r\n  this._closed = false;\r\n\r\n  this[kSocket] = null;\r\n  this._header = null;\r\n  this[kOutHeaders] = null;\r\n\r\n  this._keepAliveTimeout = 0;\r\n\r\n  this._onPendingData = nop;\r\n\r\n  this[kErrored] = null;\r\n  this[kHighWaterMark] = options?.highWaterMark ?? getDefaultHighWaterMark();\r\n  this[kRejectNonStandardBodyWrites] = options?.rejectNonStandardBodyWrites ?? false;\r\n}\r\nObjectSetPrototypeOf(OutgoingMessage.prototype, Stream.prototype);\r\nObjectSetPrototypeOf(OutgoingMessage, Stream);\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, 'errored', {\r\n  __proto__: null,\r\n  get() {\r\n    return this[kErrored];\r\n  },\r\n});\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, 'closed', {\r\n  __proto__: null,\r\n  get() {\r\n    return this._closed;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, 'writableFinished', {\r\n  __proto__: null,\r\n  get() {\r\n    return (\r\n      this.finished &&\r\n      this.outputSize === 0 &&\r\n      (!this[kSocket] || this[kSocket].writableLength === 0)\r\n    );\r\n  },\r\n});\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, 'writableObjectMode', {\r\n  __proto__: null,\r\n  get() {\r\n    return false;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, 'writableLength', {\r\n  __proto__: null,\r\n  get() {\r\n    return this.outputSize + this[kChunkedLength] + (this[kSocket] ? this[kSocket].writableLength : 0);\r\n  },\r\n});\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, 'writableHighWaterMark', {\r\n  __proto__: null,\r\n  get() {\r\n    return this[kSocket] ? this[kSocket].writableHighWaterMark : this[kHighWaterMark];\r\n  },\r\n});\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, 'writableCorked', {\r\n  __proto__: null,\r\n  get() {\r\n    return this[kCorked];\r\n  },\r\n});\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, '_headers', {\r\n  __proto__: null,\r\n  get: internalUtil.deprecate(function() {\r\n    return this.getHeaders();\r\n  }, 'OutgoingMessage.prototype._headers is deprecated', 'DEP0066'),\r\n  set: internalUtil.deprecate(function(val) {\r\n    if (val == null) {\r\n      this[kOutHeaders] = null;\r\n    } else if (typeof val === 'object') {\r\n      const headers = this[kOutHeaders] = { __proto__: null };\r\n      const keys = ObjectKeys(val);\r\n      // Retain for(;;) loop for performance reasons\r\n      // Refs: https://github.com/nodejs/node/pull/30958\r\n      for (let i = 0; i < keys.length; ++i) {\r\n        const name = keys[i];\r\n        headers[StringPrototypeToLowerCase(name)] = [name, val[name]];\r\n      }\r\n    }\r\n  }, 'OutgoingMessage.prototype._headers is deprecated', 'DEP0066'),\r\n});\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, 'connection', {\r\n  __proto__: null,\r\n  get: function() {\r\n    return this[kSocket];\r\n  },\r\n  set: function(val) {\r\n    this.socket = val;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, 'socket', {\r\n  __proto__: null,\r\n  get: function() {\r\n    return this[kSocket];\r\n  },\r\n  set: function(val) {\r\n    for (let n = 0; n < this[kCorked]; n++) {\r\n      val?.cork();\r\n      this[kSocket]?.uncork();\r\n    }\r\n    this[kSocket] = val;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, '_headerNames', {\r\n  __proto__: null,\r\n  get: internalUtil.deprecate(function() {\r\n    const headers = this[kOutHeaders];\r\n    if (headers !== null) {\r\n      const out = { __proto__: null };\r\n      const keys = ObjectKeys(headers);\r\n      // Retain for(;;) loop for performance reasons\r\n      // Refs: https://github.com/nodejs/node/pull/30958\r\n      for (let i = 0; i < keys.length; ++i) {\r\n        const key = keys[i];\r\n        const val = headers[key][0];\r\n        out[key] = val;\r\n      }\r\n      return out;\r\n    }\r\n    return null;\r\n  }, 'OutgoingMessage.prototype._headerNames is deprecated', 'DEP0066'),\r\n  set: internalUtil.deprecate(function(val) {\r\n    if (typeof val === 'object' && val !== null) {\r\n      const headers = this[kOutHeaders];\r\n      if (!headers)\r\n        return;\r\n      const keys = ObjectKeys(val);\r\n      // Retain for(;;) loop for performance reasons\r\n      // Refs: https://github.com/nodejs/node/pull/30958\r\n      for (let i = 0; i < keys.length; ++i) {\r\n        const header = headers[keys[i]];\r\n        if (header)\r\n          header[0] = val[keys[i]];\r\n      }\r\n    }\r\n  }, 'OutgoingMessage.prototype._headerNames is deprecated', 'DEP0066'),\r\n});\r\n\r\n\r\nOutgoingMessage.prototype._renderHeaders = function _renderHeaders() {\r\n  if (this._header) {\r\n    throw new ERR_HTTP_HEADERS_SENT('render');\r\n  }\r\n\r\n  const headersMap = this[kOutHeaders];\r\n  const headers = {};\r\n\r\n  if (headersMap !== null) {\r\n    const keys = ObjectKeys(headersMap);\r\n    // Retain for(;;) loop for performance reasons\r\n    // Refs: https://github.com/nodejs/node/pull/30958\r\n    for (let i = 0, l = keys.length; i < l; i++) {\r\n      const key = keys[i];\r\n      headers[headersMap[key][0]] = headersMap[key][1];\r\n    }\r\n  }\r\n  return headers;\r\n};\r\n\r\nOutgoingMessage.prototype.cork = function() {\r\n  this[kCorked]++;\r\n  if (this[kSocket]) {\r\n    this[kSocket].cork();\r\n  }\r\n};\r\n\r\nOutgoingMessage.prototype.uncork = function() {\r\n  this[kCorked]--;\r\n  if (this[kSocket]) {\r\n    this[kSocket].uncork();\r\n  }\r\n\r\n  if (this[kCorked] || this[kChunkedBuffer].length === 0) {\r\n    return;\r\n  }\r\n\r\n  const len = this[kChunkedLength];\r\n  const buf = this[kChunkedBuffer];\r\n\r\n  assert(this.chunkedEncoding);\r\n\r\n  let callbacks;\r\n  this._send(NumberPrototypeToString(len, 16), 'latin1', null);\r\n  this._send(crlf_buf, null, null);\r\n  for (let n = 0; n < buf.length; n += 3) {\r\n    this._send(buf[n + 0], buf[n + 1], null);\r\n    if (buf[n + 2]) {\r\n      callbacks ??= [];\r\n      callbacks.push(buf[n + 2]);\r\n    }\r\n  }\r\n  this._send(crlf_buf, null, callbacks.length ? (err) => {\r\n    for (const callback of callbacks) {\r\n      callback(err);\r\n    }\r\n  } : null);\r\n\r\n  this[kChunkedBuffer].length = 0;\r\n  this[kChunkedLength] = 0;\r\n};\r\n\r\nOutgoingMessage.prototype.setTimeout = function setTimeout(msecs, callback) {\r\n\r\n  if (callback) {\r\n    this.on('timeout', callback);\r\n  }\r\n\r\n  if (!this[kSocket]) {\r\n    this.once('socket', function socketSetTimeoutOnConnect(socket) {\r\n      socket.setTimeout(msecs);\r\n    });\r\n  } else {\r\n    this[kSocket].setTimeout(msecs);\r\n  }\r\n  return this;\r\n};\r\n\r\n\r\n// It's possible that the socket will be destroyed, and removed from\r\n// any messages, before ever calling this.  In that case, just skip\r\n// it, since something else is destroying this connection anyway.\r\nOutgoingMessage.prototype.destroy = function destroy(error) {\r\n  if (this.destroyed) {\r\n    return this;\r\n  }\r\n  this.destroyed = true;\r\n\r\n  this[kErrored] = error;\r\n\r\n  if (this[kSocket]) {\r\n    this[kSocket].destroy(error);\r\n  } else {\r\n    this.once('socket', function socketDestroyOnConnect(socket) {\r\n      socket.destroy(error);\r\n    });\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n\r\n// This abstract either writing directly to the socket or buffering it.\r\nOutgoingMessage.prototype._send = function _send(data, encoding, callback, byteLength) {\r\n  // This is a shameful hack to get the headers and first body chunk onto\r\n  // the same packet. Future versions of Node are going to take care of\r\n  // this at a lower level and in a more general way.\r\n  if (!this._headerSent && this._header !== null) {\r\n    // `this._header` can be null if OutgoingMessage is used without a proper Socket\r\n    // See: /test/parallel/test-http-outgoing-message-inheritance.js\r\n    if (typeof data === 'string' &&\r\n        (encoding === 'utf8' || encoding === 'latin1' || !encoding)) {\r\n      data = this._header + data;\r\n    } else {\r\n      const header = this._header;\r\n      this.outputData.unshift({\r\n        data: header,\r\n        encoding: 'latin1',\r\n        callback: null,\r\n      });\r\n      this.outputSize += header.length;\r\n      this._onPendingData(header.length);\r\n    }\r\n    this._headerSent = true;\r\n  }\r\n  return this._writeRaw(data, encoding, callback, byteLength);\r\n};\r\n\r\nOutgoingMessage.prototype._writeRaw = _writeRaw;\r\nfunction _writeRaw(data, encoding, callback, size) {\r\n  const conn = this[kSocket];\r\n  if (conn && conn.destroyed) {\r\n    // The socket was destroyed. If we're still trying to write to it,\r\n    // then we haven't gotten the 'close' event yet.\r\n    return false;\r\n  }\r\n\r\n  if (typeof encoding === 'function') {\r\n    callback = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  if (conn && conn._httpMessage === this && conn.writable) {\r\n    // There might be pending data in the this.output buffer.\r\n    if (this.outputData.length) {\r\n      this._flushOutput(conn);\r\n    }\r\n    // Directly write to socket.\r\n    return conn.write(data, encoding, callback);\r\n  }\r\n  // Buffer, as long as we're not destroyed.\r\n  this.outputData.push({ data, encoding, callback });\r\n  this.outputSize += data.length;\r\n  this._onPendingData(data.length);\r\n  return this.outputSize < this[kHighWaterMark];\r\n}\r\n\r\n\r\nOutgoingMessage.prototype._storeHeader = _storeHeader;\r\nfunction _storeHeader(firstLine, headers) {\r\n  // firstLine in the case of request is: 'GET /index.html HTTP/1.1\\r\\n'\r\n  // in the case of response it is: 'HTTP/1.1 200 OK\\r\\n'\r\n  const state = {\r\n    connection: false,\r\n    contLen: false,\r\n    te: false,\r\n    date: false,\r\n    expect: false,\r\n    trailer: false,\r\n    header: firstLine,\r\n  };\r\n\r\n  if (headers) {\r\n    if (headers === this[kOutHeaders]) {\r\n      for (const key in headers) {\r\n        const entry = headers[key];\r\n        processHeader(this, state, entry[0], entry[1], false);\r\n      }\r\n    } else if (ArrayIsArray(headers)) {\r\n      if (headers.length && ArrayIsArray(headers[0])) {\r\n        for (let i = 0; i < headers.length; i++) {\r\n          const entry = headers[i];\r\n          processHeader(this, state, entry[0], entry[1], true);\r\n        }\r\n      } else {\r\n        if (headers.length % 2 !== 0) {\r\n          throw new ERR_INVALID_ARG_VALUE('headers', headers);\r\n        }\r\n\r\n        for (let n = 0; n < headers.length; n += 2) {\r\n          processHeader(this, state, headers[n + 0], headers[n + 1], true);\r\n        }\r\n      }\r\n    } else {\r\n      for (const key in headers) {\r\n        if (ObjectPrototypeHasOwnProperty(headers, key)) {\r\n          processHeader(this, state, key, headers[key], true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  let { header } = state;\r\n\r\n  // Date header\r\n  if (this.sendDate && !state.date) {\r\n    header += 'Date: ' + utcDate() + '\\r\\n';\r\n  }\r\n\r\n  // Force the connection to close when the response is a 204 No Content or\r\n  // a 304 Not Modified and the user has set a \"Transfer-Encoding: chunked\"\r\n  // header.\r\n  //\r\n  // RFC 2616 mandates that 204 and 304 responses MUST NOT have a body but\r\n  // node.js used to send out a zero chunk anyway to accommodate clients\r\n  // that don't have special handling for those responses.\r\n  //\r\n  // It was pointed out that this might confuse reverse proxies to the point\r\n  // of creating security liabilities, so suppress the zero chunk and force\r\n  // the connection to close.\r\n  if (this.chunkedEncoding && (this.statusCode === 204 ||\r\n                               this.statusCode === 304)) {\r\n    debug(this.statusCode + ' response should not use chunked encoding,' +\r\n          ' closing connection.');\r\n    this.chunkedEncoding = false;\r\n    this.shouldKeepAlive = false;\r\n  }\r\n\r\n  // keep-alive logic\r\n  if (this._removedConnection) {\r\n    // shouldKeepAlive is generally true for HTTP/1.1. In that common case,\r\n    // even if the connection header isn't sent, we still persist by default.\r\n    this._last = !this.shouldKeepAlive;\r\n  } else if (!state.connection) {\r\n    const shouldSendKeepAlive = this.shouldKeepAlive &&\r\n        (state.contLen || this.useChunkedEncodingByDefault || this.agent);\r\n    if (shouldSendKeepAlive && this.maxRequestsOnConnectionReached) {\r\n      header += 'Connection: close\\r\\n';\r\n    } else if (shouldSendKeepAlive) {\r\n      header += 'Connection: keep-alive\\r\\n';\r\n      if (this._keepAliveTimeout && this._defaultKeepAlive) {\r\n        const timeoutSeconds = MathFloor(this._keepAliveTimeout / 1000);\r\n        let max = '';\r\n        if (~~this._maxRequestsPerSocket > 0) {\r\n          max = `, max=${this._maxRequestsPerSocket}`;\r\n        }\r\n        header += `Keep-Alive: timeout=${timeoutSeconds}${max}\\r\\n`;\r\n      }\r\n    } else {\r\n      this._last = true;\r\n      header += 'Connection: close\\r\\n';\r\n    }\r\n  }\r\n\r\n  if (!state.contLen && !state.te) {\r\n    if (!this._hasBody) {\r\n      // Make sure we don't end the 0\\r\\n\\r\\n at the end of the message.\r\n      this.chunkedEncoding = false;\r\n    } else if (!this.useChunkedEncodingByDefault) {\r\n      this._last = true;\r\n    } else if (!state.trailer &&\r\n               !this._removedContLen &&\r\n               typeof this._contentLength === 'number') {\r\n      header += 'Content-Length: ' + this._contentLength + '\\r\\n';\r\n    } else if (!this._removedTE) {\r\n      header += 'Transfer-Encoding: chunked\\r\\n';\r\n      this.chunkedEncoding = true;\r\n    } else {\r\n      // We should only be able to get here if both Content-Length and\r\n      // Transfer-Encoding are removed by the user.\r\n      // See: test/parallel/test-http-remove-header-stays-removed.js\r\n      debug('Both Content-Length and Transfer-Encoding are removed');\r\n\r\n      // We can't keep alive in this case, because with no header info the body\r\n      // is defined as all data until the connection is closed.\r\n      this._last = true;\r\n    }\r\n  }\r\n\r\n  // Test non-chunked message does not have trailer header set,\r\n  // message will be terminated by the first empty line after the\r\n  // header fields, regardless of the header fields present in the\r\n  // message, and thus cannot contain a message body or 'trailers'.\r\n  if (this.chunkedEncoding !== true && state.trailer) {\r\n    throw new ERR_HTTP_TRAILER_INVALID();\r\n  }\r\n\r\n  this._header = header + '\\r\\n';\r\n  this._headerSent = false;\r\n\r\n  // Wait until the first body chunk, or close(), is sent to flush,\r\n  // UNLESS we're sending Expect: 100-continue.\r\n  if (state.expect) this._send('');\r\n}\r\n\r\nfunction processHeader(self, state, key, value, validate) {\r\n  if (validate)\r\n    validateHeaderName(key);\r\n\r\n  // If key is content-disposition and there is content-length\r\n  // encode the value in latin1\r\n  // https://www.rfc-editor.org/rfc/rfc6266#section-4.3\r\n  // Refs: https://github.com/nodejs/node/pull/46528\r\n  if (isContentDispositionField(key) && self._contentLength) {\r\n    // The value could be an array here\r\n    if (ArrayIsArray(value)) {\r\n      for (let i = 0; i < value.length; i++) {\r\n        value[i] = Buffer.from(value[i], 'latin1');\r\n      }\r\n    } else {\r\n      value = Buffer.from(value, 'latin1');\r\n    }\r\n  }\r\n\r\n  if (ArrayIsArray(value)) {\r\n    if (\r\n      (value.length < 2 || !isCookieField(key)) &&\r\n      (!self[kUniqueHeaders] || !self[kUniqueHeaders].has(StringPrototypeToLowerCase(key)))\r\n    ) {\r\n      // Retain for(;;) loop for performance reasons\r\n      // Refs: https://github.com/nodejs/node/pull/30958\r\n      for (let i = 0; i < value.length; i++)\r\n        storeHeader(self, state, key, value[i], validate);\r\n      return;\r\n    }\r\n    value = ArrayPrototypeJoin(value, '; ');\r\n  }\r\n  storeHeader(self, state, key, value, validate);\r\n}\r\n\r\nfunction storeHeader(self, state, key, value, validate) {\r\n  if (validate)\r\n    validateHeaderValue(key, value);\r\n  state.header += key + ': ' + value + '\\r\\n';\r\n  matchHeader(self, state, key, value);\r\n}\r\n\r\nfunction matchHeader(self, state, field, value) {\r\n  if (field.length < 4 || field.length > 17)\r\n    return;\r\n  field = StringPrototypeToLowerCase(field);\r\n  switch (field) {\r\n    case 'connection':\r\n      state.connection = true;\r\n      self._removedConnection = false;\r\n      if (RegExpPrototypeExec(RE_CONN_CLOSE, value) !== null)\r\n        self._last = true;\r\n      else\r\n        self.shouldKeepAlive = true;\r\n      break;\r\n    case 'transfer-encoding':\r\n      state.te = true;\r\n      self._removedTE = false;\r\n      if (RegExpPrototypeExec(RE_TE_CHUNKED, value) !== null)\r\n        self.chunkedEncoding = true;\r\n      break;\r\n    case 'content-length':\r\n      state.contLen = true;\r\n      self._contentLength = value;\r\n      self._removedContLen = false;\r\n      break;\r\n    case 'date':\r\n    case 'expect':\r\n    case 'trailer':\r\n      state[field] = true;\r\n      break;\r\n    case 'keep-alive':\r\n      self._defaultKeepAlive = false;\r\n      break;\r\n  }\r\n}\r\n\r\nconst validateHeaderName = hideStackFrames((name, label) => {\r\n  if (typeof name !== 'string' || !name || !checkIsHttpToken(name)) {\r\n    throw new ERR_INVALID_HTTP_TOKEN.HideStackFramesError(label || 'Header name', name);\r\n  }\r\n});\r\n\r\nconst validateHeaderValue = hideStackFrames((name, value) => {\r\n  if (value === undefined) {\r\n    throw new ERR_HTTP_INVALID_HEADER_VALUE.HideStackFramesError(value, name);\r\n  }\r\n  if (checkInvalidHeaderChar(value)) {\r\n    debug('Header \"%s\" contains invalid characters', name);\r\n    throw new ERR_INVALID_CHAR.HideStackFramesError('header content', name);\r\n  }\r\n});\r\n\r\nfunction parseUniqueHeadersOption(headers) {\r\n  if (!ArrayIsArray(headers)) {\r\n    return null;\r\n  }\r\n\r\n  const unique = new SafeSet();\r\n  const l = headers.length;\r\n  for (let i = 0; i < l; i++) {\r\n    unique.add(StringPrototypeToLowerCase(headers[i]));\r\n  }\r\n\r\n  return unique;\r\n}\r\n\r\nOutgoingMessage.prototype.setHeader = function setHeader(name, value) {\r\n  if (this._header) {\r\n    throw new ERR_HTTP_HEADERS_SENT('set');\r\n  }\r\n  validateHeaderName(name);\r\n  validateHeaderValue(name, value);\r\n\r\n  let headers = this[kOutHeaders];\r\n  if (headers === null)\r\n    this[kOutHeaders] = headers = { __proto__: null };\r\n\r\n  headers[StringPrototypeToLowerCase(name)] = [name, value];\r\n  return this;\r\n};\r\n\r\nOutgoingMessage.prototype.setHeaders = function setHeaders(headers) {\r\n  if (this._header) {\r\n    throw new ERR_HTTP_HEADERS_SENT('set');\r\n  }\r\n\r\n\r\n  if (\r\n    !headers ||\r\n    ArrayIsArray(headers) ||\r\n    typeof headers.keys !== 'function' ||\r\n    typeof headers.get !== 'function'\r\n  ) {\r\n    throw new ERR_INVALID_ARG_TYPE('headers', ['Headers', 'Map'], headers);\r\n  }\r\n\r\n  // Headers object joins multiple cookies with a comma when using\r\n  // the getter to retrieve the value,\r\n  // unless iterating over the headers directly.\r\n  // We also cannot safely split by comma.\r\n  // To avoid setHeader overwriting the previous value we push\r\n  // set-cookie values in array and set them all at once.\r\n  const cookies = [];\r\n\r\n  for (const { 0: key, 1: value } of headers) {\r\n    if (key === 'set-cookie') {\r\n      if (ArrayIsArray(value)) {\r\n        cookies.push(...value);\r\n      } else {\r\n        cookies.push(value);\r\n      }\r\n      continue;\r\n    }\r\n    this.setHeader(key, value);\r\n  }\r\n  if (cookies.length) {\r\n    this.setHeader('set-cookie', cookies);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nOutgoingMessage.prototype.appendHeader = function appendHeader(name, value) {\r\n  if (this._header) {\r\n    throw new ERR_HTTP_HEADERS_SENT('append');\r\n  }\r\n  validateHeaderName(name);\r\n  validateHeaderValue(name, value);\r\n\r\n  const field = StringPrototypeToLowerCase(name);\r\n  const headers = this[kOutHeaders];\r\n  if (headers === null || !headers[field]) {\r\n    return this.setHeader(name, value);\r\n  }\r\n\r\n  // Prepare the field for appending, if required\r\n  if (!ArrayIsArray(headers[field][1])) {\r\n    headers[field][1] = [headers[field][1]];\r\n  }\r\n\r\n  const existingValues = headers[field][1];\r\n  if (ArrayIsArray(value)) {\r\n    for (let i = 0, length = value.length; i < length; i++) {\r\n      existingValues.push(value[i]);\r\n    }\r\n  } else {\r\n    existingValues.push(value);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n\r\nOutgoingMessage.prototype.getHeader = function getHeader(name) {\r\n  validateString(name, 'name');\r\n\r\n  const headers = this[kOutHeaders];\r\n  if (headers === null)\r\n    return;\r\n\r\n  const entry = headers[StringPrototypeToLowerCase(name)];\r\n  return entry && entry[1];\r\n};\r\n\r\n\r\n// Returns an array of the names of the current outgoing headers.\r\nOutgoingMessage.prototype.getHeaderNames = function getHeaderNames() {\r\n  return this[kOutHeaders] !== null ? ObjectKeys(this[kOutHeaders]) : [];\r\n};\r\n\r\n\r\n// Returns an array of the names of the current outgoing raw headers.\r\nOutgoingMessage.prototype.getRawHeaderNames = function getRawHeaderNames() {\r\n  const headersMap = this[kOutHeaders];\r\n  if (headersMap === null) return [];\r\n\r\n  const values = ObjectValues(headersMap);\r\n  const headers = Array(values.length);\r\n  // Retain for(;;) loop for performance reasons\r\n  // Refs: https://github.com/nodejs/node/pull/30958\r\n  for (let i = 0, l = values.length; i < l; i++) {\r\n    headers[i] = values[i][0];\r\n  }\r\n\r\n  return headers;\r\n};\r\n\r\n\r\n// Returns a shallow copy of the current outgoing headers.\r\nOutgoingMessage.prototype.getHeaders = function getHeaders() {\r\n  const headers = this[kOutHeaders];\r\n  const ret = { __proto__: null };\r\n  if (headers) {\r\n    const keys = ObjectKeys(headers);\r\n    // Retain for(;;) loop for performance reasons\r\n    // Refs: https://github.com/nodejs/node/pull/30958\r\n    for (let i = 0; i < keys.length; ++i) {\r\n      const key = keys[i];\r\n      const val = headers[key][1];\r\n      ret[key] = val;\r\n    }\r\n  }\r\n  return ret;\r\n};\r\n\r\n\r\nOutgoingMessage.prototype.hasHeader = function hasHeader(name) {\r\n  validateString(name, 'name');\r\n  return this[kOutHeaders] !== null &&\r\n    !!this[kOutHeaders][StringPrototypeToLowerCase(name)];\r\n};\r\n\r\n\r\nOutgoingMessage.prototype.removeHeader = function removeHeader(name) {\r\n  validateString(name, 'name');\r\n\r\n  if (this._header) {\r\n    throw new ERR_HTTP_HEADERS_SENT('remove');\r\n  }\r\n\r\n  const key = StringPrototypeToLowerCase(name);\r\n\r\n  switch (key) {\r\n    case 'connection':\r\n      this._removedConnection = true;\r\n      break;\r\n    case 'content-length':\r\n      this._removedContLen = true;\r\n      break;\r\n    case 'transfer-encoding':\r\n      this._removedTE = true;\r\n      break;\r\n    case 'date':\r\n      this.sendDate = false;\r\n      break;\r\n  }\r\n\r\n  if (this[kOutHeaders] !== null) {\r\n    delete this[kOutHeaders][key];\r\n  }\r\n};\r\n\r\n\r\nOutgoingMessage.prototype._implicitHeader = function _implicitHeader() {\r\n  throw new ERR_METHOD_NOT_IMPLEMENTED('_implicitHeader()');\r\n};\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, 'headersSent', {\r\n  __proto__: null,\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: function() { return !!this._header; },\r\n});\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, 'writableEnded', {\r\n  __proto__: null,\r\n  get: function() { return this.finished; },\r\n});\r\n\r\nObjectDefineProperty(OutgoingMessage.prototype, 'writableNeedDrain', {\r\n  __proto__: null,\r\n  get: function() {\r\n    return !this.destroyed && !this.finished && this[kNeedDrain];\r\n  },\r\n});\r\n\r\nconst crlf_buf = Buffer.from('\\r\\n');\r\nOutgoingMessage.prototype.write = function write(chunk, encoding, callback) {\r\n  if (typeof encoding === 'function') {\r\n    callback = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  const ret = write_(this, chunk, encoding, callback, false);\r\n  if (!ret)\r\n    this[kNeedDrain] = true;\r\n  return ret;\r\n};\r\n\r\nfunction onError(msg, err, callback) {\r\n  const triggerAsyncId = msg.socket ? msg.socket[async_id_symbol] : undefined;\r\n  defaultTriggerAsyncIdScope(triggerAsyncId,\r\n                             process.nextTick,\r\n                             emitErrorNt,\r\n                             msg,\r\n                             err,\r\n                             callback);\r\n}\r\n\r\nfunction emitErrorNt(msg, err, callback) {\r\n  callback(err);\r\n  if (typeof msg.emit === 'function' && !msg._closed) {\r\n    msg.emit('error', err);\r\n  }\r\n}\r\n\r\nfunction strictContentLength(msg) {\r\n  return (\r\n    msg.strictContentLength &&\r\n    msg._contentLength != null &&\r\n    msg._hasBody &&\r\n    !msg._removedContLen &&\r\n    !msg.chunkedEncoding &&\r\n    !msg.hasHeader('transfer-encoding')\r\n  );\r\n}\r\n\r\nfunction write_(msg, chunk, encoding, callback, fromEnd) {\r\n  if (typeof callback !== 'function')\r\n    callback = nop;\r\n\r\n  if (chunk === null) {\r\n    throw new ERR_STREAM_NULL_VALUES();\r\n  } else if (typeof chunk !== 'string' && !isUint8Array(chunk)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\r\n  }\r\n\r\n  let err;\r\n  if (msg.finished) {\r\n    err = new ERR_STREAM_WRITE_AFTER_END();\r\n  } else if (msg.destroyed) {\r\n    err = new ERR_STREAM_DESTROYED('write');\r\n  }\r\n\r\n  if (err) {\r\n    if (!msg.destroyed) {\r\n      onError(msg, err, callback);\r\n    } else {\r\n      process.nextTick(callback, err);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  let len;\r\n\r\n  if (msg.strictContentLength) {\r\n    len ??= typeof chunk === 'string' ? Buffer.byteLength(chunk, encoding) : chunk.byteLength;\r\n\r\n    if (\r\n      strictContentLength(msg) &&\r\n      (fromEnd ? msg[kBytesWritten] + len !== msg._contentLength : msg[kBytesWritten] + len > msg._contentLength)\r\n    ) {\r\n      throw new ERR_HTTP_CONTENT_LENGTH_MISMATCH(len + msg[kBytesWritten], msg._contentLength);\r\n    }\r\n\r\n    msg[kBytesWritten] += len;\r\n  }\r\n\r\n  if (!msg._header) {\r\n    if (fromEnd) {\r\n      len ??= typeof chunk === 'string' ? Buffer.byteLength(chunk, encoding) : chunk.byteLength;\r\n      msg._contentLength = len;\r\n    }\r\n    msg._implicitHeader();\r\n  }\r\n\r\n  if (!msg._hasBody) {\r\n    if (msg[kRejectNonStandardBodyWrites]) {\r\n      throw new ERR_HTTP_BODY_NOT_ALLOWED();\r\n    } else {\r\n      debug('This type of response MUST NOT have a body. ' +\r\n        'Ignoring write() calls.');\r\n      process.nextTick(callback);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  if (!fromEnd && msg.socket && !msg.socket.writableCorked) {\r\n    msg.socket.cork();\r\n    process.nextTick(connectionCorkNT, msg.socket);\r\n  }\r\n\r\n  let ret;\r\n  if (msg.chunkedEncoding && chunk.length !== 0) {\r\n    len ??= typeof chunk === 'string' ? Buffer.byteLength(chunk, encoding) : chunk.byteLength;\r\n    if (msg[kCorked] && msg._headerSent) {\r\n      msg[kChunkedBuffer].push(chunk, encoding, callback);\r\n      msg[kChunkedLength] += len;\r\n      ret = msg[kChunkedLength] < msg[kHighWaterMark];\r\n    } else {\r\n      msg._send(NumberPrototypeToString(len, 16), 'latin1', null);\r\n      msg._send(crlf_buf, null, null);\r\n      msg._send(chunk, encoding, null, len);\r\n      ret = msg._send(crlf_buf, null, callback);\r\n    }\r\n  } else {\r\n    ret = msg._send(chunk, encoding, callback, len);\r\n  }\r\n\r\n  debug('write ret = ' + ret);\r\n  return ret;\r\n}\r\n\r\n\r\nfunction connectionCorkNT(conn) {\r\n  conn.uncork();\r\n}\r\n\r\nOutgoingMessage.prototype.addTrailers = function addTrailers(headers) {\r\n  this._trailer = '';\r\n  const keys = ObjectKeys(headers);\r\n  const isArray = ArrayIsArray(headers);\r\n  // Retain for(;;) loop for performance reasons\r\n  // Refs: https://github.com/nodejs/node/pull/30958\r\n  for (let i = 0, l = keys.length; i < l; i++) {\r\n    let field, value;\r\n    const key = keys[i];\r\n    if (isArray) {\r\n      field = headers[key][0];\r\n      value = headers[key][1];\r\n    } else {\r\n      field = key;\r\n      value = headers[key];\r\n    }\r\n    validateHeaderName(field, 'Trailer name');\r\n\r\n    // Check if the field must be sent several times\r\n    const isArrayValue = ArrayIsArray(value);\r\n    if (\r\n      isArrayValue && value.length > 1 &&\r\n      (!this[kUniqueHeaders] || !this[kUniqueHeaders].has(StringPrototypeToLowerCase(field)))\r\n    ) {\r\n      for (let j = 0, l = value.length; j < l; j++) {\r\n        if (checkInvalidHeaderChar(value[j])) {\r\n          debug('Trailer \"%s\"[%d] contains invalid characters', field, j);\r\n          throw new ERR_INVALID_CHAR('trailer content', field);\r\n        }\r\n        this._trailer += field + ': ' + value[j] + '\\r\\n';\r\n      }\r\n    } else {\r\n      if (isArrayValue) {\r\n        value = ArrayPrototypeJoin(value, '; ');\r\n      }\r\n\r\n      if (checkInvalidHeaderChar(value)) {\r\n        debug('Trailer \"%s\" contains invalid characters', field);\r\n        throw new ERR_INVALID_CHAR('trailer content', field);\r\n      }\r\n      this._trailer += field + ': ' + value + '\\r\\n';\r\n    }\r\n  }\r\n};\r\n\r\nfunction onFinish(outmsg) {\r\n  if (outmsg && outmsg.socket && outmsg.socket._hadError) return;\r\n  outmsg.emit('finish');\r\n}\r\n\r\nOutgoingMessage.prototype.end = function end(chunk, encoding, callback) {\r\n  if (typeof chunk === 'function') {\r\n    callback = chunk;\r\n    chunk = null;\r\n    encoding = null;\r\n  } else if (typeof encoding === 'function') {\r\n    callback = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  if (chunk) {\r\n    if (this.finished) {\r\n      onError(this,\r\n              new ERR_STREAM_WRITE_AFTER_END(),\r\n              typeof callback !== 'function' ? nop : callback);\r\n      return this;\r\n    }\r\n\r\n    if (this[kSocket]) {\r\n      this[kSocket].cork();\r\n    }\r\n\r\n    write_(this, chunk, encoding, null, true);\r\n  } else if (this.finished) {\r\n    if (typeof callback === 'function') {\r\n      if (!this.writableFinished) {\r\n        this.on('finish', callback);\r\n      } else {\r\n        callback(new ERR_STREAM_ALREADY_FINISHED('end'));\r\n      }\r\n    }\r\n    return this;\r\n  } else if (!this._header) {\r\n    if (this[kSocket]) {\r\n      this[kSocket].cork();\r\n    }\r\n\r\n    this._contentLength = 0;\r\n    this._implicitHeader();\r\n  }\r\n\r\n  if (typeof callback === 'function')\r\n    this.once('finish', callback);\r\n\r\n  if (strictContentLength(this) && this[kBytesWritten] !== this._contentLength) {\r\n    throw new ERR_HTTP_CONTENT_LENGTH_MISMATCH(this[kBytesWritten], this._contentLength);\r\n  }\r\n\r\n  const finish = onFinish.bind(undefined, this);\r\n\r\n  if (this._hasBody && this.chunkedEncoding) {\r\n    this._send('0\\r\\n' + this._trailer + '\\r\\n', 'latin1', finish);\r\n  } else if (!this._headerSent || this.writableLength || chunk) {\r\n    this._send('', 'latin1', finish);\r\n  } else {\r\n    process.nextTick(finish);\r\n  }\r\n\r\n  if (this[kSocket]) {\r\n    // Fully uncork connection on end().\r\n    this[kSocket]._writableState.corked = 1;\r\n    this[kSocket].uncork();\r\n  }\r\n  this[kCorked] = 1;\r\n  this.uncork();\r\n\r\n  this.finished = true;\r\n\r\n  // There is the first message on the outgoing queue, and we've sent\r\n  // everything to the socket.\r\n  debug('outgoing message end.');\r\n  if (this.outputData.length === 0 &&\r\n      this[kSocket] &&\r\n      this[kSocket]._httpMessage === this) {\r\n    this._finish();\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n\r\n// This function is called once all user data are flushed to the socket.\r\n// Note that it has a chance that the socket is not drained.\r\nOutgoingMessage.prototype._finish = function _finish() {\r\n  assert(this[kSocket]);\r\n  this.emit('prefinish');\r\n};\r\n\r\n\r\n// This logic is probably a bit confusing. Let me explain a bit:\r\n//\r\n// In both HTTP servers and clients it is possible to queue up several\r\n// outgoing messages. This is easiest to imagine in the case of a client.\r\n// Take the following situation:\r\n//\r\n//    req1 = client.request('GET', '/');\r\n//    req2 = client.request('POST', '/');\r\n//\r\n// When the user does\r\n//\r\n//   req2.write('hello world\\n');\r\n//\r\n// it's possible that the first request has not been completely flushed to\r\n// the socket yet. Thus the outgoing messages need to be prepared to queue\r\n// up data internally before sending it on further to the socket's queue.\r\n//\r\n// This function, _flush(), is called by both the Server and Client\r\n// to attempt to flush any pending messages out to the socket.\r\nOutgoingMessage.prototype._flush = function _flush() {\r\n  const socket = this[kSocket];\r\n\r\n  if (socket && socket.writable) {\r\n    // There might be remaining data in this.output; write it out\r\n    const ret = this._flushOutput(socket);\r\n\r\n    if (this.finished) {\r\n      // This is a queue to the server or client to bring in the next this.\r\n      this._finish();\r\n    } else if (ret && this[kNeedDrain]) {\r\n      this[kNeedDrain] = false;\r\n      this.emit('drain');\r\n    }\r\n  }\r\n};\r\n\r\nOutgoingMessage.prototype._flushOutput = function _flushOutput(socket) {\r\n  const outputLength = this.outputData.length;\r\n  if (outputLength <= 0)\r\n    return undefined;\r\n\r\n  const outputData = this.outputData;\r\n  socket.cork();\r\n  let ret;\r\n  // Retain for(;;) loop for performance reasons\r\n  // Refs: https://github.com/nodejs/node/pull/30958\r\n  for (let i = 0; i < outputLength; i++) {\r\n    const { data, encoding, callback } = outputData[i];\r\n    ret = socket.write(data, encoding, callback);\r\n  }\r\n  socket.uncork();\r\n\r\n  this.outputData = [];\r\n  this._onPendingData(-this.outputSize);\r\n  this.outputSize = 0;\r\n\r\n  return ret;\r\n};\r\n\r\n\r\nOutgoingMessage.prototype.flushHeaders = function flushHeaders() {\r\n  if (!this._header) {\r\n    this._implicitHeader();\r\n  }\r\n\r\n  // Force-flush the headers.\r\n  this._send('');\r\n};\r\n\r\nOutgoingMessage.prototype.pipe = function pipe() {\r\n  // OutgoingMessage should be write-only. Piping from it is disabled.\r\n  this.emit('error', new ERR_STREAM_CANNOT_PIPE());\r\n};\r\n\r\nOutgoingMessage.prototype[EE.captureRejectionSymbol] =\r\nfunction(err, event) {\r\n  this.destroy(err);\r\n};\r\n\r\nmodule.exports = {\r\n  kHighWaterMark,\r\n  kUniqueHeaders,\r\n  parseUniqueHeadersOption,\r\n  validateHeaderName,\r\n  validateHeaderValue,\r\n  OutgoingMessage,\r\n};\r\n"
  },
  "109": {
    "metadata": {
      "scriptId": "109",
      "url": "node:internal/http",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 62,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "d1052f59998a1aa303d5a4d2b3c6f2ddfe461f44c12550a46fa373c72e9fc758",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1257,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/http"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Date,\r\n  DatePrototypeGetMilliseconds,\r\n  DatePrototypeToUTCString,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst { setUnrefTimeout } = require('internal/timers');\r\nconst { trace, isTraceCategoryEnabled } = internalBinding('trace_events');\r\nconst {\r\n  CHAR_LOWERCASE_B,\r\n  CHAR_LOWERCASE_E,\r\n} = require('internal/constants');\r\n\r\nlet utcCache;\r\n\r\nfunction utcDate() {\r\n  if (!utcCache) cache();\r\n  return utcCache;\r\n}\r\n\r\nfunction cache() {\r\n  const d = new Date();\r\n  utcCache = DatePrototypeToUTCString(d);\r\n  setUnrefTimeout(resetCache, 1000 - DatePrototypeGetMilliseconds(d));\r\n}\r\n\r\nfunction resetCache() {\r\n  utcCache = undefined;\r\n}\r\n\r\nlet traceEventId = 0;\r\n\r\nfunction getNextTraceEventId() {\r\n  return ++traceEventId;\r\n}\r\n\r\nfunction isTraceHTTPEnabled() {\r\n  return isTraceCategoryEnabled('node.http');\r\n}\r\n\r\nconst traceEventCategory = 'node,node.http';\r\n\r\nfunction traceBegin(...args) {\r\n  trace(CHAR_LOWERCASE_B, traceEventCategory, ...args);\r\n}\r\n\r\nfunction traceEnd(...args) {\r\n  trace(CHAR_LOWERCASE_E, traceEventCategory, ...args);\r\n}\r\n\r\nmodule.exports = {\r\n  kOutHeaders: Symbol('kOutHeaders'),\r\n  kNeedDrain: Symbol('kNeedDrain'),\r\n  utcDate,\r\n  traceBegin,\r\n  traceEnd,\r\n  getNextTraceEventId,\r\n  isTraceHTTPEnabled,\r\n};\r\n"
  },
  "110": {
    "metadata": {
      "scriptId": "110",
      "url": "node:_http_server",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1226,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "8719dad578a42d9d5b9733ecf52db694724e4bc44554c2347657dc947e12a704",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 39960,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_http_server"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  Error,\r\n  FunctionPrototypeCall,\r\n  MathMin,\r\n  ObjectKeys,\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n  RegExpPrototypeExec,\r\n  Symbol,\r\n  SymbolAsyncDispose,\r\n  SymbolFor,\r\n} = primordials;\r\n\r\nconst net = require('net');\r\nconst EE = require('events');\r\nconst assert = require('internal/assert');\r\nconst {\r\n  parsers,\r\n  freeParser,\r\n  continueExpression,\r\n  chunkExpression,\r\n  kIncomingMessage,\r\n  HTTPParser,\r\n  isLenient,\r\n  _checkInvalidHeaderChar: checkInvalidHeaderChar,\r\n  prepareError,\r\n} = require('_http_common');\r\nconst { ConnectionsList } = internalBinding('http_parser');\r\nconst {\r\n  kUniqueHeaders,\r\n  parseUniqueHeadersOption,\r\n  OutgoingMessage,\r\n} = require('_http_outgoing');\r\nconst {\r\n  kOutHeaders,\r\n  kNeedDrain,\r\n  isTraceHTTPEnabled,\r\n  traceBegin,\r\n  traceEnd,\r\n  getNextTraceEventId,\r\n} = require('internal/http');\r\nconst {\r\n  defaultTriggerAsyncIdScope,\r\n  getOrSetAsyncId,\r\n} = require('internal/async_hooks');\r\nconst { IncomingMessage } = require('_http_incoming');\r\nconst {\r\n  ConnResetException,\r\n  codes: {\r\n    ERR_HTTP_HEADERS_SENT,\r\n    ERR_HTTP_INVALID_STATUS_CODE,\r\n    ERR_HTTP_REQUEST_TIMEOUT,\r\n    ERR_HTTP_SOCKET_ASSIGNED,\r\n    ERR_HTTP_SOCKET_ENCODING,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_CHAR,\r\n    ERR_OUT_OF_RANGE,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  kEmptyObject,\r\n  promisify,\r\n} = require('internal/util');\r\nconst {\r\n  validateInteger,\r\n  validateBoolean,\r\n  validateLinkHeaderValue,\r\n  validateObject,\r\n} = require('internal/validators');\r\nconst Buffer = require('buffer').Buffer;\r\nconst { setInterval, clearInterval } = require('timers');\r\nlet debug = require('internal/util/debuglog').debuglog('http', (fn) => {\r\n  debug = fn;\r\n});\r\n\r\nconst dc = require('diagnostics_channel');\r\nconst onRequestStartChannel = dc.channel('http.server.request.start');\r\nconst onResponseFinishChannel = dc.channel('http.server.response.finish');\r\n\r\nconst kServerResponse = Symbol('ServerResponse');\r\nconst kServerResponseStatistics = Symbol('ServerResponseStatistics');\r\n\r\nconst {\r\n  hasObserver,\r\n  startPerf,\r\n  stopPerf,\r\n} = require('internal/perf/observe');\r\n\r\nconst STATUS_CODES = {\r\n  100: 'Continue',                   // RFC 7231 6.2.1\r\n  101: 'Switching Protocols',        // RFC 7231 6.2.2\r\n  102: 'Processing',                 // RFC 2518 10.1 (obsoleted by RFC 4918)\r\n  103: 'Early Hints',                // RFC 8297 2\r\n  200: 'OK',                         // RFC 7231 6.3.1\r\n  201: 'Created',                    // RFC 7231 6.3.2\r\n  202: 'Accepted',                   // RFC 7231 6.3.3\r\n  203: 'Non-Authoritative Information', // RFC 7231 6.3.4\r\n  204: 'No Content',                 // RFC 7231 6.3.5\r\n  205: 'Reset Content',              // RFC 7231 6.3.6\r\n  206: 'Partial Content',            // RFC 7233 4.1\r\n  207: 'Multi-Status',               // RFC 4918 11.1\r\n  208: 'Already Reported',           // RFC 5842 7.1\r\n  226: 'IM Used',                    // RFC 3229 10.4.1\r\n  300: 'Multiple Choices',           // RFC 7231 6.4.1\r\n  301: 'Moved Permanently',          // RFC 7231 6.4.2\r\n  302: 'Found',                      // RFC 7231 6.4.3\r\n  303: 'See Other',                  // RFC 7231 6.4.4\r\n  304: 'Not Modified',               // RFC 7232 4.1\r\n  305: 'Use Proxy',                  // RFC 7231 6.4.5\r\n  307: 'Temporary Redirect',         // RFC 7231 6.4.7\r\n  308: 'Permanent Redirect',         // RFC 7238 3\r\n  400: 'Bad Request',                // RFC 7231 6.5.1\r\n  401: 'Unauthorized',               // RFC 7235 3.1\r\n  402: 'Payment Required',           // RFC 7231 6.5.2\r\n  403: 'Forbidden',                  // RFC 7231 6.5.3\r\n  404: 'Not Found',                  // RFC 7231 6.5.4\r\n  405: 'Method Not Allowed',         // RFC 7231 6.5.5\r\n  406: 'Not Acceptable',             // RFC 7231 6.5.6\r\n  407: 'Proxy Authentication Required', // RFC 7235 3.2\r\n  408: 'Request Timeout',            // RFC 7231 6.5.7\r\n  409: 'Conflict',                   // RFC 7231 6.5.8\r\n  410: 'Gone',                       // RFC 7231 6.5.9\r\n  411: 'Length Required',            // RFC 7231 6.5.10\r\n  412: 'Precondition Failed',        // RFC 7232 4.2\r\n  413: 'Payload Too Large',          // RFC 7231 6.5.11\r\n  414: 'URI Too Long',               // RFC 7231 6.5.12\r\n  415: 'Unsupported Media Type',     // RFC 7231 6.5.13\r\n  416: 'Range Not Satisfiable',      // RFC 7233 4.4\r\n  417: 'Expectation Failed',         // RFC 7231 6.5.14\r\n  418: 'I\\'m a Teapot',              // RFC 7168 2.3.3\r\n  421: 'Misdirected Request',        // RFC 7540 9.1.2\r\n  422: 'Unprocessable Entity',       // RFC 4918 11.2\r\n  423: 'Locked',                     // RFC 4918 11.3\r\n  424: 'Failed Dependency',          // RFC 4918 11.4\r\n  425: 'Too Early',                  // RFC 8470 5.2\r\n  426: 'Upgrade Required',           // RFC 2817 and RFC 7231 6.5.15\r\n  428: 'Precondition Required',      // RFC 6585 3\r\n  429: 'Too Many Requests',          // RFC 6585 4\r\n  431: 'Request Header Fields Too Large', // RFC 6585 5\r\n  451: 'Unavailable For Legal Reasons', // RFC 7725 3\r\n  500: 'Internal Server Error',      // RFC 7231 6.6.1\r\n  501: 'Not Implemented',            // RFC 7231 6.6.2\r\n  502: 'Bad Gateway',                // RFC 7231 6.6.3\r\n  503: 'Service Unavailable',        // RFC 7231 6.6.4\r\n  504: 'Gateway Timeout',            // RFC 7231 6.6.5\r\n  505: 'HTTP Version Not Supported', // RFC 7231 6.6.6\r\n  506: 'Variant Also Negotiates',    // RFC 2295 8.1\r\n  507: 'Insufficient Storage',       // RFC 4918 11.5\r\n  508: 'Loop Detected',              // RFC 5842 7.2\r\n  509: 'Bandwidth Limit Exceeded',\r\n  510: 'Not Extended',               // RFC 2774 7\r\n  511: 'Network Authentication Required', // RFC 6585 6\r\n};\r\n\r\nconst kOnExecute = HTTPParser.kOnExecute | 0;\r\nconst kOnTimeout = HTTPParser.kOnTimeout | 0;\r\nconst kLenientAll = HTTPParser.kLenientAll | 0;\r\nconst kLenientNone = HTTPParser.kLenientNone | 0;\r\nconst kConnections = Symbol('http.server.connections');\r\nconst kConnectionsCheckingInterval = Symbol('http.server.connectionsCheckingInterval');\r\n\r\nconst HTTP_SERVER_TRACE_EVENT_NAME = 'http.server.request';\r\n\r\nclass HTTPServerAsyncResource {\r\n  constructor(type, socket) {\r\n    this.type = type;\r\n    this.socket = socket;\r\n  }\r\n}\r\n\r\nfunction ServerResponse(req, options) {\r\n  OutgoingMessage.call(this, options);\r\n\r\n  if (req.method === 'HEAD') this._hasBody = false;\r\n\r\n  this.req = req;\r\n  this.sendDate = true;\r\n  this._sent100 = false;\r\n  this._expect_continue = false;\r\n\r\n  if (req.httpVersionMajor < 1 || req.httpVersionMinor < 1) {\r\n    this.useChunkedEncodingByDefault = RegExpPrototypeExec(chunkExpression,\r\n                                                           req.headers.te) !== null;\r\n    this.shouldKeepAlive = false;\r\n  }\r\n\r\n  if (hasObserver('http')) {\r\n    startPerf(this, kServerResponseStatistics, {\r\n      type: 'http',\r\n      name: 'HttpRequest',\r\n      detail: {\r\n        req: {\r\n          method: req.method,\r\n          url: req.url,\r\n          headers: req.headers,\r\n        },\r\n      },\r\n    });\r\n  }\r\n  if (isTraceHTTPEnabled()) {\r\n    this._traceEventId = getNextTraceEventId();\r\n    traceBegin(HTTP_SERVER_TRACE_EVENT_NAME, this._traceEventId);\r\n  }\r\n}\r\nObjectSetPrototypeOf(ServerResponse.prototype, OutgoingMessage.prototype);\r\nObjectSetPrototypeOf(ServerResponse, OutgoingMessage);\r\n\r\nServerResponse.prototype._finish = function _finish() {\r\n  if (this[kServerResponseStatistics] && hasObserver('http')) {\r\n    stopPerf(this, kServerResponseStatistics, {\r\n      detail: {\r\n        res: {\r\n          statusCode: this.statusCode,\r\n          statusMessage: this.statusMessage,\r\n          headers: typeof this.getHeaders === 'function' ? this.getHeaders() : {},\r\n        },\r\n      },\r\n    });\r\n  }\r\n  OutgoingMessage.prototype._finish.call(this);\r\n  if (isTraceHTTPEnabled() && typeof this._traceEventId === 'number') {\r\n    const data = {\r\n      url: this.req?.url,\r\n      statusCode: this.statusCode,\r\n    };\r\n    traceEnd(HTTP_SERVER_TRACE_EVENT_NAME, this._traceEventId, data);\r\n  }\r\n};\r\n\r\n\r\nServerResponse.prototype.statusCode = 200;\r\nServerResponse.prototype.statusMessage = undefined;\r\n\r\nfunction onServerResponseClose() {\r\n  // EventEmitter.emit makes a copy of the 'close' listeners array before\r\n  // calling the listeners. detachSocket() unregisters onServerResponseClose\r\n  // but if detachSocket() is called, directly or indirectly, by a 'close'\r\n  // listener, onServerResponseClose is still in that copy of the listeners\r\n  // array. That is, in the example below, b still gets called even though\r\n  // it's been removed by a:\r\n  //\r\n  //   const EventEmitter = require('events');\r\n  //   const obj = new EventEmitter();\r\n  //   obj.on('event', a);\r\n  //   obj.on('event', b);\r\n  //   function a() { obj.removeListener('event', b) }\r\n  //   function b() { throw \"BAM!\" }\r\n  //   obj.emit('event');  // throws\r\n  //\r\n  // Ergo, we need to deal with stale 'close' events and handle the case\r\n  // where the ServerResponse object has already been deconstructed.\r\n  // Fortunately, that requires only a single if check. :-)\r\n  if (this._httpMessage) {\r\n    emitCloseNT(this._httpMessage);\r\n  }\r\n}\r\n\r\nServerResponse.prototype.assignSocket = function assignSocket(socket) {\r\n  if (socket._httpMessage) {\r\n    throw new ERR_HTTP_SOCKET_ASSIGNED();\r\n  }\r\n  socket._httpMessage = this;\r\n  socket.on('close', onServerResponseClose);\r\n  this.socket = socket;\r\n  this.emit('socket', socket);\r\n  this._flush();\r\n};\r\n\r\nServerResponse.prototype.detachSocket = function detachSocket(socket) {\r\n  assert(socket._httpMessage === this);\r\n  socket.removeListener('close', onServerResponseClose);\r\n  socket._httpMessage = null;\r\n  this.socket = null;\r\n};\r\n\r\nServerResponse.prototype.writeContinue = function writeContinue(cb) {\r\n  this._writeRaw('HTTP/1.1 100 Continue\\r\\n\\r\\n', 'ascii', cb);\r\n  this._sent100 = true;\r\n};\r\n\r\nServerResponse.prototype.writeProcessing = function writeProcessing(cb) {\r\n  this._writeRaw('HTTP/1.1 102 Processing\\r\\n\\r\\n', 'ascii', cb);\r\n};\r\n\r\nServerResponse.prototype.writeEarlyHints = function writeEarlyHints(hints, cb) {\r\n  let head = 'HTTP/1.1 103 Early Hints\\r\\n';\r\n\r\n  validateObject(hints, 'hints');\r\n\r\n  if (hints.link === null || hints.link === undefined) {\r\n    return;\r\n  }\r\n\r\n  const link = validateLinkHeaderValue(hints.link);\r\n\r\n  if (link.length === 0) {\r\n    return;\r\n  }\r\n\r\n  head += 'Link: ' + link + '\\r\\n';\r\n\r\n  for (const key of ObjectKeys(hints)) {\r\n    if (key !== 'link') {\r\n      head += key + ': ' + hints[key] + '\\r\\n';\r\n    }\r\n  }\r\n\r\n  head += '\\r\\n';\r\n\r\n  this._writeRaw(head, 'ascii', cb);\r\n};\r\n\r\nServerResponse.prototype._implicitHeader = function _implicitHeader() {\r\n  this.writeHead(this.statusCode);\r\n};\r\n\r\nServerResponse.prototype.writeHead = writeHead;\r\nfunction writeHead(statusCode, reason, obj) {\r\n\r\n  if (this._header) {\r\n    throw new ERR_HTTP_HEADERS_SENT('write');\r\n  }\r\n\r\n  const originalStatusCode = statusCode;\r\n\r\n  statusCode |= 0;\r\n  if (statusCode < 100 || statusCode > 999) {\r\n    throw new ERR_HTTP_INVALID_STATUS_CODE(originalStatusCode);\r\n  }\r\n\r\n\r\n  if (typeof reason === 'string') {\r\n    // writeHead(statusCode, reasonPhrase[, headers])\r\n    this.statusMessage = reason;\r\n  } else {\r\n    // writeHead(statusCode[, headers])\r\n    if (!this.statusMessage)\r\n      this.statusMessage = STATUS_CODES[statusCode] || 'unknown';\r\n    obj ??= reason;\r\n  }\r\n  this.statusCode = statusCode;\r\n\r\n  let headers;\r\n  if (this[kOutHeaders]) {\r\n    // Slow-case: when progressive API and header fields are passed.\r\n    let k;\r\n    if (ArrayIsArray(obj)) {\r\n      if (obj.length % 2 !== 0) {\r\n        throw new ERR_INVALID_ARG_VALUE('headers', obj);\r\n      }\r\n\r\n      // Headers in obj should override previous headers but still\r\n      // allow explicit duplicates. To do so, we first remove any\r\n      // existing conflicts, then use appendHeader.\r\n\r\n      for (let n = 0; n < obj.length; n += 2) {\r\n        k = obj[n + 0];\r\n        this.removeHeader(k);\r\n      }\r\n\r\n      for (let n = 0; n < obj.length; n += 2) {\r\n        k = obj[n + 0];\r\n        if (k) this.appendHeader(k, obj[n + 1]);\r\n      }\r\n    } else if (obj) {\r\n      const keys = ObjectKeys(obj);\r\n      // Retain for(;;) loop for performance reasons\r\n      // Refs: https://github.com/nodejs/node/pull/30958\r\n      for (let i = 0; i < keys.length; i++) {\r\n        k = keys[i];\r\n        if (k) this.setHeader(k, obj[k]);\r\n      }\r\n    }\r\n    // Only progressive api is used\r\n    headers = this[kOutHeaders];\r\n  } else {\r\n    // Only writeHead() called\r\n    headers = obj;\r\n  }\r\n\r\n  if (checkInvalidHeaderChar(this.statusMessage))\r\n    throw new ERR_INVALID_CHAR('statusMessage');\r\n\r\n  const statusLine = `HTTP/1.1 ${statusCode} ${this.statusMessage}\\r\\n`;\r\n\r\n  if (statusCode === 204 || statusCode === 304 ||\r\n      (statusCode >= 100 && statusCode <= 199)) {\r\n    // RFC 2616, 10.2.5:\r\n    // The 204 response MUST NOT include a message-body, and thus is always\r\n    // terminated by the first empty line after the header fields.\r\n    // RFC 2616, 10.3.5:\r\n    // The 304 response MUST NOT contain a message-body, and thus is always\r\n    // terminated by the first empty line after the header fields.\r\n    // RFC 2616, 10.1 Informational 1xx:\r\n    // This class of status code indicates a provisional response,\r\n    // consisting only of the Status-Line and optional headers, and is\r\n    // terminated by an empty line.\r\n    this._hasBody = false;\r\n  }\r\n\r\n  // Don't keep alive connections where the client expects 100 Continue\r\n  // but we sent a final status; they may put extra bytes on the wire.\r\n  if (this._expect_continue && !this._sent100) {\r\n    this.shouldKeepAlive = false;\r\n  }\r\n\r\n  this._storeHeader(statusLine, headers);\r\n\r\n  return this;\r\n}\r\n\r\n// Docs-only deprecated: DEP0063\r\nServerResponse.prototype.writeHeader = ServerResponse.prototype.writeHead;\r\n\r\nfunction storeHTTPOptions(options) {\r\n  this[kIncomingMessage] = options.IncomingMessage || IncomingMessage;\r\n  this[kServerResponse] = options.ServerResponse || ServerResponse;\r\n\r\n  const maxHeaderSize = options.maxHeaderSize;\r\n  if (maxHeaderSize !== undefined)\r\n    validateInteger(maxHeaderSize, 'maxHeaderSize', 0);\r\n  this.maxHeaderSize = maxHeaderSize;\r\n\r\n  const insecureHTTPParser = options.insecureHTTPParser;\r\n  if (insecureHTTPParser !== undefined)\r\n    validateBoolean(insecureHTTPParser, 'options.insecureHTTPParser');\r\n  this.insecureHTTPParser = insecureHTTPParser;\r\n\r\n  const requestTimeout = options.requestTimeout;\r\n  if (requestTimeout !== undefined) {\r\n    validateInteger(requestTimeout, 'requestTimeout', 0);\r\n    this.requestTimeout = requestTimeout;\r\n  } else {\r\n    this.requestTimeout = 300_000; // 5 minutes\r\n  }\r\n\r\n  const headersTimeout = options.headersTimeout;\r\n  if (headersTimeout !== undefined) {\r\n    validateInteger(headersTimeout, 'headersTimeout', 0);\r\n    this.headersTimeout = headersTimeout;\r\n  } else {\r\n    this.headersTimeout = MathMin(60_000, this.requestTimeout); // Minimum between 60 seconds or requestTimeout\r\n  }\r\n\r\n  if (this.requestTimeout > 0 && this.headersTimeout > 0 && this.headersTimeout > this.requestTimeout) {\r\n    throw new ERR_OUT_OF_RANGE('headersTimeout', '<= requestTimeout', headersTimeout);\r\n  }\r\n\r\n  const keepAliveTimeout = options.keepAliveTimeout;\r\n  if (keepAliveTimeout !== undefined) {\r\n    validateInteger(keepAliveTimeout, 'keepAliveTimeout', 0);\r\n    this.keepAliveTimeout = keepAliveTimeout;\r\n  } else {\r\n    this.keepAliveTimeout = 5_000; // 5 seconds;\r\n  }\r\n\r\n  const connectionsCheckingInterval = options.connectionsCheckingInterval;\r\n  if (connectionsCheckingInterval !== undefined) {\r\n    validateInteger(connectionsCheckingInterval, 'connectionsCheckingInterval', 0);\r\n    this.connectionsCheckingInterval = connectionsCheckingInterval;\r\n  } else {\r\n    this.connectionsCheckingInterval = 30_000; // 30 seconds\r\n  }\r\n\r\n  const requireHostHeader = options.requireHostHeader;\r\n  if (requireHostHeader !== undefined) {\r\n    validateBoolean(requireHostHeader, 'options.requireHostHeader');\r\n    this.requireHostHeader = requireHostHeader;\r\n  } else {\r\n    this.requireHostHeader = true;\r\n  }\r\n\r\n  const joinDuplicateHeaders = options.joinDuplicateHeaders;\r\n  if (joinDuplicateHeaders !== undefined) {\r\n    validateBoolean(joinDuplicateHeaders, 'options.joinDuplicateHeaders');\r\n  }\r\n  this.joinDuplicateHeaders = joinDuplicateHeaders;\r\n\r\n  const rejectNonStandardBodyWrites = options.rejectNonStandardBodyWrites;\r\n  if (rejectNonStandardBodyWrites !== undefined) {\r\n    validateBoolean(rejectNonStandardBodyWrites, 'options.rejectNonStandardBodyWrites');\r\n    this.rejectNonStandardBodyWrites = rejectNonStandardBodyWrites;\r\n  } else {\r\n    this.rejectNonStandardBodyWrites = false;\r\n  }\r\n}\r\n\r\nfunction setupConnectionsTracking() {\r\n  // Start connection handling\r\n  if (!this[kConnections]) {\r\n    this[kConnections] = new ConnectionsList();\r\n  }\r\n\r\n  if (this[kConnectionsCheckingInterval]) {\r\n    clearInterval(this[kConnectionsCheckingInterval]);\r\n  }\r\n  // This checker is started without checking whether any headersTimeout or requestTimeout is non zero\r\n  // otherwise it would not be started if such timeouts are modified after createServer.\r\n  this[kConnectionsCheckingInterval] =\r\n    setInterval(checkConnections.bind(this), this.connectionsCheckingInterval).unref();\r\n}\r\n\r\nfunction httpServerPreClose(server) {\r\n  server.closeIdleConnections();\r\n  clearInterval(server[kConnectionsCheckingInterval]);\r\n}\r\n\r\nfunction Server(options, requestListener) {\r\n  if (!(this instanceof Server)) return new Server(options, requestListener);\r\n\r\n  if (typeof options === 'function') {\r\n    requestListener = options;\r\n    options = kEmptyObject;\r\n  } else if (options == null) {\r\n    options = kEmptyObject;\r\n  } else {\r\n    validateObject(options, 'options');\r\n  }\r\n\r\n  storeHTTPOptions.call(this, options);\r\n  net.Server.call(\r\n    this,\r\n    { allowHalfOpen: true, noDelay: options.noDelay ?? true,\r\n      keepAlive: options.keepAlive,\r\n      keepAliveInitialDelay: options.keepAliveInitialDelay,\r\n      highWaterMark: options.highWaterMark });\r\n\r\n  if (requestListener) {\r\n    this.on('request', requestListener);\r\n  }\r\n\r\n  // Similar option to this. Too lazy to write my own docs.\r\n  // http://www.squid-cache.org/Doc/config/half_closed_clients/\r\n  // https://wiki.squid-cache.org/SquidFaq/InnerWorkings#What_is_a_half-closed_filedescriptor.3F\r\n  this.httpAllowHalfOpen = false;\r\n\r\n  this.on('connection', connectionListener);\r\n  this.on('listening', setupConnectionsTracking);\r\n\r\n  this.timeout = 0;\r\n  this.maxHeadersCount = null;\r\n  this.maxRequestsPerSocket = 0;\r\n\r\n  this[kUniqueHeaders] = parseUniqueHeadersOption(options.uniqueHeaders);\r\n}\r\nObjectSetPrototypeOf(Server.prototype, net.Server.prototype);\r\nObjectSetPrototypeOf(Server, net.Server);\r\n\r\nServer.prototype.close = function() {\r\n  httpServerPreClose(this);\r\n  ReflectApply(net.Server.prototype.close, this, arguments);\r\n  return this;\r\n};\r\n\r\nServer.prototype[SymbolAsyncDispose] = async function() {\r\n  return FunctionPrototypeCall(promisify(this.close), this);\r\n};\r\n\r\nServer.prototype.closeAllConnections = function() {\r\n  if (!this[kConnections]) {\r\n    return;\r\n  }\r\n\r\n  const connections = this[kConnections].all();\r\n\r\n  for (let i = 0, l = connections.length; i < l; i++) {\r\n    connections[i].socket.destroy();\r\n  }\r\n};\r\n\r\nServer.prototype.closeIdleConnections = function() {\r\n  if (!this[kConnections]) {\r\n    return;\r\n  }\r\n\r\n  const connections = this[kConnections].idle();\r\n\r\n  for (let i = 0, l = connections.length; i < l; i++) {\r\n    if (connections[i].socket._httpMessage && !connections[i].socket._httpMessage.finished) {\r\n      continue;\r\n    }\r\n\r\n    connections[i].socket.destroy();\r\n  }\r\n};\r\n\r\nServer.prototype.setTimeout = function setTimeout(msecs, callback) {\r\n  this.timeout = msecs;\r\n  if (callback)\r\n    this.on('timeout', callback);\r\n  return this;\r\n};\r\n\r\nServer.prototype[EE.captureRejectionSymbol] = function(err, event, ...args) {\r\n  switch (event) {\r\n    case 'request': {\r\n      const { 1: res } = args;\r\n      if (!res.headersSent && !res.writableEnded) {\r\n        // Don't leak headers.\r\n        const names = res.getHeaderNames();\r\n        for (let i = 0; i < names.length; i++) {\r\n          res.removeHeader(names[i]);\r\n        }\r\n        res.statusCode = 500;\r\n        res.end(STATUS_CODES[500]);\r\n      } else {\r\n        res.destroy();\r\n      }\r\n      break;\r\n    }\r\n    default:\r\n      net.Server.prototype[SymbolFor('nodejs.rejection')]\r\n        .apply(this, arguments);\r\n  }\r\n};\r\n\r\nfunction checkConnections() {\r\n  if (this.headersTimeout === 0 && this.requestTimeout === 0) {\r\n    return;\r\n  }\r\n\r\n  const expired = this[kConnections].expired(this.headersTimeout, this.requestTimeout);\r\n\r\n  for (let i = 0; i < expired.length; i++) {\r\n    const socket = expired[i].socket;\r\n\r\n    if (socket) {\r\n      onRequestTimeout(socket);\r\n    }\r\n  }\r\n}\r\n\r\nfunction connectionListener(socket) {\r\n  defaultTriggerAsyncIdScope(\r\n    getOrSetAsyncId(socket), connectionListenerInternal, this, socket,\r\n  );\r\n}\r\n\r\nfunction connectionListenerInternal(server, socket) {\r\n  debug('SERVER new http connection');\r\n\r\n  // Ensure that the server property of the socket is correctly set.\r\n  // See https://github.com/nodejs/node/issues/13435\r\n  socket.server = server;\r\n\r\n  // If the user has added a listener to the server,\r\n  // request, or response, then it's their responsibility.\r\n  // otherwise, destroy on timeout by default\r\n  if (server.timeout && typeof socket.setTimeout === 'function')\r\n    socket.setTimeout(server.timeout);\r\n  socket.on('timeout', socketOnTimeout);\r\n\r\n  const parser = parsers.alloc();\r\n\r\n  const lenient = server.insecureHTTPParser === undefined ?\r\n    isLenient() : server.insecureHTTPParser;\r\n\r\n  // TODO(addaleax): This doesn't play well with the\r\n  // `async_hooks.currentResource()` proposal, see\r\n  // https://github.com/nodejs/node/pull/21313\r\n  parser.initialize(\r\n    HTTPParser.REQUEST,\r\n    new HTTPServerAsyncResource('HTTPINCOMINGMESSAGE', socket),\r\n    server.maxHeaderSize || 0,\r\n    lenient ? kLenientAll : kLenientNone,\r\n    server[kConnections],\r\n  );\r\n  parser.socket = socket;\r\n  socket.parser = parser;\r\n\r\n  // Propagate headers limit from server instance to parser\r\n  if (typeof server.maxHeadersCount === 'number') {\r\n    parser.maxHeaderPairs = server.maxHeadersCount << 1;\r\n  }\r\n\r\n  const state = {\r\n    onData: null,\r\n    onEnd: null,\r\n    onClose: null,\r\n    onDrain: null,\r\n    outgoing: [],\r\n    incoming: [],\r\n    // `outgoingData` is an approximate amount of bytes queued through all\r\n    // inactive responses. If more data than the high watermark is queued - we\r\n    // need to pause TCP socket/HTTP parser, and wait until the data will be\r\n    // sent to the client.\r\n    outgoingData: 0,\r\n    requestsCount: 0,\r\n    keepAliveTimeoutSet: false,\r\n  };\r\n  state.onData = socketOnData.bind(undefined,\r\n                                   server, socket, parser, state);\r\n  state.onEnd = socketOnEnd.bind(undefined,\r\n                                 server, socket, parser, state);\r\n  state.onClose = socketOnClose.bind(undefined,\r\n                                     socket, state);\r\n  state.onDrain = socketOnDrain.bind(undefined,\r\n                                     socket, state);\r\n  socket.on('data', state.onData);\r\n  socket.on('error', socketOnError);\r\n  socket.on('end', state.onEnd);\r\n  socket.on('close', state.onClose);\r\n  socket.on('drain', state.onDrain);\r\n  parser.onIncoming = parserOnIncoming.bind(undefined,\r\n                                            server, socket, state);\r\n\r\n  // We are consuming socket, so it won't get any actual data\r\n  socket.on('resume', onSocketResume);\r\n  socket.on('pause', onSocketPause);\r\n\r\n  // Overrides to unconsume on `data`, `readable` listeners\r\n  socket.on = generateSocketListenerWrapper('on');\r\n  socket.addListener = generateSocketListenerWrapper('addListener');\r\n  socket.prependListener = generateSocketListenerWrapper('prependListener');\r\n  socket.setEncoding = socketSetEncoding;\r\n\r\n  // We only consume the socket if it has never been consumed before.\r\n  if (socket._handle && socket._handle.isStreamBase &&\r\n      !socket._handle._consumed) {\r\n    parser._consumed = true;\r\n    socket._handle._consumed = true;\r\n    parser.consume(socket._handle);\r\n  }\r\n  parser[kOnExecute] =\r\n    onParserExecute.bind(undefined,\r\n                         server, socket, parser, state);\r\n\r\n  parser[kOnTimeout] =\r\n    onParserTimeout.bind(undefined,\r\n                         server, socket);\r\n\r\n  socket._paused = false;\r\n}\r\n\r\nfunction socketSetEncoding() {\r\n  throw new ERR_HTTP_SOCKET_ENCODING();\r\n}\r\n\r\nfunction updateOutgoingData(socket, state, delta) {\r\n  state.outgoingData += delta;\r\n  socketOnDrain(socket, state);\r\n}\r\n\r\nfunction socketOnDrain(socket, state) {\r\n  const needPause = state.outgoingData > socket.writableHighWaterMark;\r\n\r\n  // If we previously paused, then start reading again.\r\n  if (socket._paused && !needPause) {\r\n    socket._paused = false;\r\n    if (socket.parser)\r\n      socket.parser.resume();\r\n    socket.resume();\r\n  }\r\n\r\n  const msg = socket._httpMessage;\r\n  if (msg && !msg.finished && msg[kNeedDrain]) {\r\n    msg[kNeedDrain] = false;\r\n    msg.emit('drain');\r\n  }\r\n}\r\n\r\nfunction socketOnTimeout() {\r\n  const req = this.parser && this.parser.incoming;\r\n  const reqTimeout = req && !req.complete && req.emit('timeout', this);\r\n  const res = this._httpMessage;\r\n  const resTimeout = res && res.emit('timeout', this);\r\n  const serverTimeout = this.server.emit('timeout', this);\r\n\r\n  if (!reqTimeout && !resTimeout && !serverTimeout)\r\n    this.destroy();\r\n}\r\n\r\nfunction socketOnClose(socket, state) {\r\n  debug('server socket close');\r\n  freeParser(socket.parser, null, socket);\r\n  abortIncoming(state.incoming);\r\n}\r\n\r\nfunction abortIncoming(incoming) {\r\n  while (incoming.length) {\r\n    const req = incoming.shift();\r\n    req.destroy(new ConnResetException('aborted'));\r\n  }\r\n  // Abort socket._httpMessage ?\r\n}\r\n\r\nfunction socketOnEnd(server, socket, parser, state) {\r\n  const ret = parser.finish();\r\n\r\n  if (ret instanceof Error) {\r\n    debug('parse error');\r\n    // socketOnError has additional logic and will call socket.destroy(err).\r\n    socketOnError.call(socket, ret);\r\n  } else if (!server.httpAllowHalfOpen) {\r\n    socket.end();\r\n  } else if (state.outgoing.length) {\r\n    state.outgoing[state.outgoing.length - 1]._last = true;\r\n  } else if (socket._httpMessage) {\r\n    socket._httpMessage._last = true;\r\n  } else {\r\n    socket.end();\r\n  }\r\n}\r\n\r\nfunction socketOnData(server, socket, parser, state, d) {\r\n  assert(!socket._paused);\r\n  debug('SERVER socketOnData %d', d.length);\r\n\r\n  const ret = parser.execute(d);\r\n  onParserExecuteCommon(server, socket, parser, state, ret, d);\r\n}\r\n\r\nfunction onRequestTimeout(socket) {\r\n  // socketOnError has additional logic and will call socket.destroy(err).\r\n  socketOnError.call(socket, new ERR_HTTP_REQUEST_TIMEOUT());\r\n}\r\n\r\nfunction onParserExecute(server, socket, parser, state, ret) {\r\n  // When underlying `net.Socket` instance is consumed - no\r\n  // `data` events are emitted, and thus `socket.setTimeout` fires the\r\n  // callback even if the data is constantly flowing into the socket.\r\n  // See, https://github.com/nodejs/node/commit/ec2822adaad76b126b5cccdeaa1addf2376c9aa6\r\n  socket._unrefTimer();\r\n  debug('SERVER socketOnParserExecute %d', ret);\r\n  onParserExecuteCommon(server, socket, parser, state, ret, undefined);\r\n}\r\n\r\nfunction onParserTimeout(server, socket) {\r\n  const serverTimeout = server.emit('timeout', socket);\r\n\r\n  if (!serverTimeout)\r\n    socket.destroy();\r\n}\r\n\r\nconst noop = () => {};\r\nconst badRequestResponse = Buffer.from(\r\n  `HTTP/1.1 400 ${STATUS_CODES[400]}\\r\\n` +\r\n  'Connection: close\\r\\n\\r\\n', 'ascii',\r\n);\r\nconst requestTimeoutResponse = Buffer.from(\r\n  `HTTP/1.1 408 ${STATUS_CODES[408]}\\r\\n` +\r\n  'Connection: close\\r\\n\\r\\n', 'ascii',\r\n);\r\nconst requestHeaderFieldsTooLargeResponse = Buffer.from(\r\n  `HTTP/1.1 431 ${STATUS_CODES[431]}\\r\\n` +\r\n  'Connection: close\\r\\n\\r\\n', 'ascii',\r\n);\r\n\r\nconst requestChunkExtensionsTooLargeResponse = Buffer.from(\r\n  `HTTP/1.1 413 ${STATUS_CODES[413]}\\r\\n` +\r\n  'Connection: close\\r\\n\\r\\n', 'ascii',\r\n);\r\n\r\nfunction socketOnError(e) {\r\n  // Ignore further errors\r\n  this.removeListener('error', socketOnError);\r\n\r\n  if (this.listenerCount('error', noop) === 0) {\r\n    this.on('error', noop);\r\n  }\r\n\r\n  if (!this.server.emit('clientError', e, this)) {\r\n    // Caution must be taken to avoid corrupting the remote peer.\r\n    // Reply an error segment if there is no in-flight `ServerResponse`,\r\n    // or no data of the in-flight one has been written yet to this socket.\r\n    if (this.writable &&\r\n        (!this._httpMessage || !this._httpMessage._headerSent)) {\r\n      let response;\r\n\r\n      switch (e.code) {\r\n        case 'HPE_HEADER_OVERFLOW':\r\n          response = requestHeaderFieldsTooLargeResponse;\r\n          break;\r\n        case 'HPE_CHUNK_EXTENSIONS_OVERFLOW':\r\n          response = requestChunkExtensionsTooLargeResponse;\r\n          break;\r\n        case 'ERR_HTTP_REQUEST_TIMEOUT':\r\n          response = requestTimeoutResponse;\r\n          break;\r\n        default:\r\n          response = badRequestResponse;\r\n          break;\r\n      }\r\n\r\n      this.write(response);\r\n    }\r\n    this.destroy(e);\r\n  }\r\n}\r\n\r\nfunction onParserExecuteCommon(server, socket, parser, state, ret, d) {\r\n  resetSocketTimeout(server, socket, state);\r\n\r\n  if (ret instanceof Error) {\r\n    prepareError(ret, parser, d);\r\n    debug('parse error', ret);\r\n    socketOnError.call(socket, ret);\r\n  } else if (parser.incoming && parser.incoming.upgrade) {\r\n    // Upgrade or CONNECT\r\n    const req = parser.incoming;\r\n    debug('SERVER upgrade or connect', req.method);\r\n\r\n    if (!d)\r\n      d = parser.getCurrentBuffer();\r\n\r\n    socket.removeListener('data', state.onData);\r\n    socket.removeListener('end', state.onEnd);\r\n    socket.removeListener('close', state.onClose);\r\n    socket.removeListener('drain', state.onDrain);\r\n    socket.removeListener('error', socketOnError);\r\n    socket.removeListener('timeout', socketOnTimeout);\r\n    unconsume(parser, socket);\r\n    parser.finish();\r\n    freeParser(parser, req, socket);\r\n    parser = null;\r\n\r\n    const eventName = req.method === 'CONNECT' ? 'connect' : 'upgrade';\r\n    if (eventName === 'upgrade' || server.listenerCount(eventName) > 0) {\r\n      debug('SERVER have listener for %s', eventName);\r\n      const bodyHead = d.slice(ret, d.length);\r\n\r\n      socket.readableFlowing = null;\r\n\r\n      server.emit(eventName, req, socket, bodyHead);\r\n    } else {\r\n      // Got CONNECT method, but have no handler.\r\n      socket.destroy();\r\n    }\r\n  } else if (parser.incoming && parser.incoming.method === 'PRI') {\r\n    debug('SERVER got PRI request');\r\n    socket.destroy();\r\n  }\r\n\r\n  if (socket._paused && socket.parser) {\r\n    // onIncoming paused the socket, we should pause the parser as well\r\n    debug('pause parser');\r\n    socket.parser.pause();\r\n  }\r\n}\r\n\r\nfunction clearIncoming(req) {\r\n  req = req || this;\r\n  const parser = req.socket && req.socket.parser;\r\n  // Reset the .incoming property so that the request object can be gc'ed.\r\n  if (parser && parser.incoming === req) {\r\n    if (req.readableEnded) {\r\n      parser.incoming = null;\r\n    } else {\r\n      req.on('end', clearIncoming);\r\n    }\r\n  }\r\n}\r\n\r\nfunction resOnFinish(req, res, socket, state, server) {\r\n  if (onResponseFinishChannel.hasSubscribers) {\r\n    onResponseFinishChannel.publish({\r\n      request: req,\r\n      response: res,\r\n      socket,\r\n      server,\r\n    });\r\n  }\r\n\r\n  // Usually the first incoming element should be our request.  it may\r\n  // be that in the case abortIncoming() was called that the incoming\r\n  // array will be empty.\r\n  assert(state.incoming.length === 0 || state.incoming[0] === req);\r\n\r\n  state.incoming.shift();\r\n\r\n  // If the user never called req.read(), and didn't pipe() or\r\n  // .resume() or .on('data'), then we call req._dump() so that the\r\n  // bytes will be pulled off the wire.\r\n  if (!req._consuming && !req._readableState.resumeScheduled)\r\n    req._dump();\r\n\r\n  res.detachSocket(socket);\r\n  clearIncoming(req);\r\n  process.nextTick(emitCloseNT, res);\r\n\r\n  if (res._last) {\r\n    if (typeof socket.destroySoon === 'function') {\r\n      socket.destroySoon();\r\n    } else {\r\n      socket.end();\r\n    }\r\n  } else if (state.outgoing.length === 0) {\r\n    if (server.keepAliveTimeout && typeof socket.setTimeout === 'function') {\r\n      socket.setTimeout(server.keepAliveTimeout);\r\n      state.keepAliveTimeoutSet = true;\r\n    }\r\n  } else {\r\n    // Start sending the next message\r\n    const m = state.outgoing.shift();\r\n    if (m) {\r\n      m.assignSocket(socket);\r\n    }\r\n  }\r\n}\r\n\r\nfunction emitCloseNT(self) {\r\n  if (!self._closed) {\r\n    self.destroyed = true;\r\n    self._closed = true;\r\n    self.emit('close');\r\n  }\r\n}\r\n\r\n// The following callback is issued after the headers have been read on a\r\n// new message. In this callback we setup the response object and pass it\r\n// to the user.\r\nfunction parserOnIncoming(server, socket, state, req, keepAlive) {\r\n  resetSocketTimeout(server, socket, state);\r\n\r\n  if (req.upgrade) {\r\n    req.upgrade = req.method === 'CONNECT' ||\r\n                  server.listenerCount('upgrade') > 0;\r\n    if (req.upgrade)\r\n      return 2;\r\n  }\r\n\r\n  state.incoming.push(req);\r\n\r\n  // If the writable end isn't consuming, then stop reading\r\n  // so that we don't become overwhelmed by a flood of\r\n  // pipelined requests that may never be resolved.\r\n  if (!socket._paused) {\r\n    const ws = socket._writableState;\r\n    if (ws.needDrain || state.outgoingData >= socket.writableHighWaterMark) {\r\n      socket._paused = true;\r\n      // We also need to pause the parser, but don't do that until after\r\n      // the call to execute, because we may still be processing the last\r\n      // chunk.\r\n      socket.pause();\r\n    }\r\n  }\r\n\r\n  const res = new server[kServerResponse](req,\r\n                                          {\r\n                                            highWaterMark: socket.writableHighWaterMark,\r\n                                            rejectNonStandardBodyWrites: server.rejectNonStandardBodyWrites,\r\n                                          });\r\n  res._keepAliveTimeout = server.keepAliveTimeout;\r\n  res._maxRequestsPerSocket = server.maxRequestsPerSocket;\r\n  res._onPendingData = updateOutgoingData.bind(undefined,\r\n                                               socket, state);\r\n\r\n  res.shouldKeepAlive = keepAlive;\r\n  res[kUniqueHeaders] = server[kUniqueHeaders];\r\n\r\n  if (onRequestStartChannel.hasSubscribers) {\r\n    onRequestStartChannel.publish({\r\n      request: req,\r\n      response: res,\r\n      socket,\r\n      server,\r\n    });\r\n  }\r\n\r\n  if (socket._httpMessage) {\r\n    // There are already pending outgoing res, append.\r\n    state.outgoing.push(res);\r\n  } else {\r\n    res.assignSocket(socket);\r\n  }\r\n\r\n  // When we're finished writing the response, check if this is the last\r\n  // response, if so destroy the socket.\r\n  res.on('finish',\r\n         resOnFinish.bind(undefined,\r\n                          req, res, socket, state, server));\r\n\r\n  let handled = false;\r\n\r\n\r\n  if (req.httpVersionMajor === 1 && req.httpVersionMinor === 1) {\r\n\r\n    // From RFC 7230 5.4 https://datatracker.ietf.org/doc/html/rfc7230#section-5.4\r\n    // A server MUST respond with a 400 (Bad Request) status code to any\r\n    // HTTP/1.1 request message that lacks a Host header field\r\n    if (server.requireHostHeader && req.headers.host === undefined) {\r\n      res.writeHead(400, ['Connection', 'close']);\r\n      res.end();\r\n      return 0;\r\n    }\r\n\r\n    const isRequestsLimitSet = (\r\n      typeof server.maxRequestsPerSocket === 'number' &&\r\n      server.maxRequestsPerSocket > 0\r\n    );\r\n\r\n    if (isRequestsLimitSet) {\r\n      state.requestsCount++;\r\n      res.maxRequestsOnConnectionReached = (\r\n        server.maxRequestsPerSocket <= state.requestsCount);\r\n    }\r\n\r\n    if (isRequestsLimitSet &&\r\n      (server.maxRequestsPerSocket < state.requestsCount)) {\r\n      handled = true;\r\n      server.emit('dropRequest', req, socket);\r\n      res.writeHead(503);\r\n      res.end();\r\n    } else if (req.headers.expect !== undefined) {\r\n      handled = true;\r\n\r\n      if (RegExpPrototypeExec(continueExpression, req.headers.expect) !== null) {\r\n        res._expect_continue = true;\r\n        if (server.listenerCount('checkContinue') > 0) {\r\n          server.emit('checkContinue', req, res);\r\n        } else {\r\n          res.writeContinue();\r\n          server.emit('request', req, res);\r\n        }\r\n      } else if (server.listenerCount('checkExpectation') > 0) {\r\n        server.emit('checkExpectation', req, res);\r\n      } else {\r\n        res.writeHead(417);\r\n        res.end();\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!handled) {\r\n    server.emit('request', req, res);\r\n  }\r\n\r\n  return 0;  // No special treatment.\r\n}\r\n\r\nfunction resetSocketTimeout(server, socket, state) {\r\n  if (!state.keepAliveTimeoutSet)\r\n    return;\r\n\r\n  socket.setTimeout(server.timeout || 0);\r\n  state.keepAliveTimeoutSet = false;\r\n}\r\n\r\nfunction onSocketResume() {\r\n  // It may seem that the socket is resumed, but this is an enemy's trick to\r\n  // deceive us! `resume` is emitted asynchronously, and may be called from\r\n  // `incoming.readStart()`. Stop the socket again here, just to preserve the\r\n  // state.\r\n  //\r\n  // We don't care about stream semantics for the consumed socket anyway.\r\n  if (this._paused) {\r\n    this.pause();\r\n    return;\r\n  }\r\n\r\n  if (this._handle && !this._handle.reading) {\r\n    this._handle.reading = true;\r\n    this._handle.readStart();\r\n  }\r\n}\r\n\r\nfunction onSocketPause() {\r\n  if (this._handle && this._handle.reading) {\r\n    this._handle.reading = false;\r\n    this._handle.readStop();\r\n  }\r\n}\r\n\r\nfunction unconsume(parser, socket) {\r\n  if (socket._handle) {\r\n    if (parser._consumed)\r\n      parser.unconsume();\r\n    parser._consumed = false;\r\n    socket.removeListener('pause', onSocketPause);\r\n    socket.removeListener('resume', onSocketResume);\r\n  }\r\n}\r\n\r\nfunction generateSocketListenerWrapper(originalFnName) {\r\n  return function socketListenerWrap(ev, fn) {\r\n    const res = net.Socket.prototype[originalFnName].call(this,\r\n                                                          ev, fn);\r\n    if (!this.parser) {\r\n      this.on = net.Socket.prototype.on;\r\n      this.addListener = net.Socket.prototype.addListener;\r\n      this.prependListener = net.Socket.prototype.prependListener;\r\n      return res;\r\n    }\r\n\r\n    if (ev === 'data' || ev === 'readable')\r\n      unconsume(this.parser, this);\r\n\r\n    return res;\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  STATUS_CODES,\r\n  Server,\r\n  ServerResponse,\r\n  setupConnectionsTracking,\r\n  storeHTTPOptions,\r\n  _connectionListener: connectionListener,\r\n  kServerResponse,\r\n  httpServerPreClose,\r\n  kConnectionsCheckingInterval,\r\n};\r\n"
  },
  "111": {
    "metadata": {
      "scriptId": "111",
      "url": "node:_stream_duplex",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 5,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "61cb0770af6c2279d10d0a4dcf04cbe479238c44188471449a937ff4d64e604f",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 122,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_stream_duplex"
    },
    "source": "'use strict';\r\n\r\n// Keep this file as an alias for the full stream module.\r\n\r\nmodule.exports = require('stream').Duplex;\r\n"
  },
  "112": {
    "metadata": {
      "scriptId": "112",
      "url": "node:_stream_passthrough",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 5,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "4bf9a0eee9d469e44e062f409d4153116dc7b05f579dcf2777aa18a343b58ebb",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 127,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_stream_passthrough"
    },
    "source": "'use strict';\r\n\r\n// Keep this file as an alias for the full stream module.\r\n\r\nmodule.exports = require('stream').PassThrough;\r\n"
  },
  "113": {
    "metadata": {
      "scriptId": "113",
      "url": "node:_stream_readable",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 5,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "72d858a5cdadb4a94b71da7dc7f33b1c2292debd826c10f06aae86cf7b305f40",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 124,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_stream_readable"
    },
    "source": "'use strict';\r\n\r\n// Keep this file as an alias for the full stream module.\r\n\r\nmodule.exports = require('stream').Readable;\r\n"
  },
  "114": {
    "metadata": {
      "scriptId": "114",
      "url": "node:_stream_transform",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 5,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "17de15f2e9e199386a0b3469cea99cc18dd4a175c245a422422a40932d8cb498",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 125,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_stream_transform"
    },
    "source": "'use strict';\r\n\r\n// Keep this file as an alias for the full stream module.\r\n\r\nmodule.exports = require('stream').Transform;\r\n"
  },
  "115": {
    "metadata": {
      "scriptId": "115",
      "url": "node:_stream_wrap",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 5,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "b1e923b575168a17a8ca24e4316e29fc67aaa9559bcbba7e5133541c1992117c",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 191,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_stream_wrap"
    },
    "source": "'use strict';\r\n\r\nmodule.exports = require('internal/js_stream_socket');\r\nprocess.emitWarning('The _stream_wrap module is deprecated.',\r\n                    'DeprecationWarning', 'DEP0125');\r\n"
  },
  "116": {
    "metadata": {
      "scriptId": "116",
      "url": "node:internal/js_stream_socket",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 277,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "0ed72bf4f42c7848ec33b180281601df47d6389fb3437de0515e365e16606002",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 8857,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/js_stream_socket"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst { setImmediate } = require('timers');\r\nconst assert = require('internal/assert');\r\nconst { Socket } = require('net');\r\nconst { JSStream } = internalBinding('js_stream');\r\nconst uv = internalBinding('uv');\r\nlet debug = require('internal/util/debuglog').debuglog(\r\n  'stream_socket',\r\n  (fn) => {\r\n    debug = fn;\r\n  },\r\n);\r\nconst { owner_symbol } = require('internal/async_hooks').symbols;\r\nconst { ERR_STREAM_WRAP } = require('internal/errors').codes;\r\nconst { kBoundSession } = require('internal/stream_base_commons');\r\n\r\nconst kCurrentWriteRequest = Symbol('kCurrentWriteRequest');\r\nconst kCurrentShutdownRequest = Symbol('kCurrentShutdownRequest');\r\nconst kPendingShutdownRequest = Symbol('kPendingShutdownRequest');\r\nconst kPendingClose = Symbol('kPendingClose');\r\n\r\nfunction isClosing() { return this[owner_symbol].isClosing(); }\r\n\r\nfunction onreadstart() { return this[owner_symbol].readStart(); }\r\n\r\nfunction onreadstop() { return this[owner_symbol].readStop(); }\r\n\r\nfunction onshutdown(req) { return this[owner_symbol].doShutdown(req); }\r\n\r\nfunction onwrite(req, bufs) { return this[owner_symbol].doWrite(req, bufs); }\r\n\r\n/* This class serves as a wrapper for when the C++ side of Node wants access\r\n * to a standard JS stream. For example, TLS or HTTP do not operate on network\r\n * resources conceptually, although that is the common case and what we are\r\n * optimizing for; in theory, they are completely composable and can work with\r\n * any stream resource they see.\r\n *\r\n * For the common case, i.e. a TLS socket wrapping around a net.Socket, we\r\n * can skip going through the JS layer and let TLS access the raw C++ handle\r\n * of a net.Socket. The flipside of this is that, to maintain composability,\r\n * we need a way to create \"fake\" net.Socket instances that call back into a\r\n * \"real\" JavaScript stream. JSStreamSocket is exactly this.\r\n */\r\nclass JSStreamSocket extends Socket {\r\n  constructor(stream) {\r\n    const handle = new JSStream();\r\n    handle.close = (cb) => {\r\n      debug('close');\r\n      this.doClose(cb);\r\n    };\r\n    // Inside of the following functions, `this` refers to the handle\r\n    // and `this[owner_symbol]` refers to this JSStreamSocket instance.\r\n    handle.isClosing = isClosing;\r\n    handle.onreadstart = onreadstart;\r\n    handle.onreadstop = onreadstop;\r\n    handle.onshutdown = onshutdown;\r\n    handle.onwrite = onwrite;\r\n\r\n    stream.pause();\r\n    stream.on('error', (err) => this.emit('error', err));\r\n    const ondata = (chunk) => {\r\n      if (typeof chunk === 'string' ||\r\n          stream.readableObjectMode === true) {\r\n        // Make sure that no further `data` events will happen.\r\n        stream.pause();\r\n        stream.removeListener('data', ondata);\r\n\r\n        this.emit('error', new ERR_STREAM_WRAP());\r\n        return;\r\n      }\r\n\r\n      debug('data', chunk.length);\r\n      if (this._handle)\r\n        this._handle.readBuffer(chunk);\r\n    };\r\n    stream.on('data', ondata);\r\n    stream.once('end', () => {\r\n      debug('end');\r\n      if (this._handle)\r\n        this._handle.emitEOF();\r\n    });\r\n    // Some `Stream` don't pass `hasError` parameters when closed.\r\n    stream.once('close', () => {\r\n      // Errors emitted from `stream` have also been emitted to this instance\r\n      // so that we don't pass errors to `destroy()` again.\r\n      this.destroy();\r\n    });\r\n\r\n    super({ handle, manualStart: true });\r\n    this.stream = stream;\r\n    this[kCurrentWriteRequest] = null;\r\n    this[kCurrentShutdownRequest] = null;\r\n    this[kPendingShutdownRequest] = null;\r\n    this[kPendingClose] = false;\r\n    this.readable = stream.readable;\r\n    this.writable = stream.writable;\r\n\r\n    // Start reading.\r\n    this.read(0);\r\n  }\r\n\r\n  // Allow legacy requires in the test suite to keep working:\r\n  //   const { StreamWrap } = require('internal/js_stream_socket')\r\n  static get StreamWrap() {\r\n    return JSStreamSocket;\r\n  }\r\n\r\n  isClosing() {\r\n    return !this.readable || !this.writable;\r\n  }\r\n\r\n  readStart() {\r\n    this.stream.resume();\r\n    return 0;\r\n  }\r\n\r\n  readStop() {\r\n    this.stream.pause();\r\n    return 0;\r\n  }\r\n\r\n  doShutdown(req) {\r\n    // TODO(addaleax): It might be nice if we could get into a state where\r\n    // DoShutdown() is not called on streams while a write is still pending.\r\n    //\r\n    // Currently, the only part of the code base where that happens is the\r\n    // TLS implementation, which calls both DoWrite() and DoShutdown() on the\r\n    // underlying network stream inside of its own DoShutdown() method.\r\n    // Working around that on the native side is not quite trivial (yet?),\r\n    // so for now that is supported here.\r\n\r\n    if (this[kCurrentWriteRequest] !== null) {\r\n      this[kPendingShutdownRequest] = req;\r\n      return 0;\r\n    }\r\n\r\n    assert(this[kCurrentWriteRequest] === null);\r\n    assert(this[kCurrentShutdownRequest] === null);\r\n    this[kCurrentShutdownRequest] = req;\r\n\r\n    if (this[kPendingClose]) {\r\n      // If doClose is pending, the stream & this._handle are gone. We can't do\r\n      // anything. doClose will call finishShutdown with ECANCELED for us shortly.\r\n      return 0;\r\n    }\r\n\r\n    const handle = this._handle;\r\n    assert(handle !== null);\r\n\r\n    process.nextTick(() => {\r\n      // Ensure that write is dispatched asynchronously.\r\n      this.stream.end(() => {\r\n        this.finishShutdown(handle, 0);\r\n      });\r\n    });\r\n    return 0;\r\n  }\r\n\r\n  // handle === this._handle except when called from doClose().\r\n  finishShutdown(handle, errCode) {\r\n    // The shutdown request might already have been cancelled.\r\n    if (this[kCurrentShutdownRequest] === null)\r\n      return;\r\n    const req = this[kCurrentShutdownRequest];\r\n    this[kCurrentShutdownRequest] = null;\r\n    handle.finishShutdown(req, errCode);\r\n  }\r\n\r\n  doWrite(req, bufs) {\r\n    assert(this[kCurrentWriteRequest] === null);\r\n    assert(this[kCurrentShutdownRequest] === null);\r\n\r\n    if (this[kPendingClose]) {\r\n      // If doClose is pending, the stream & this._handle are gone. We can't do\r\n      // anything. doClose will call finishWrite with ECANCELED for us shortly.\r\n      this[kCurrentWriteRequest] = req; // Store req, for doClose to cancel\r\n      return 0;\r\n    } else if (this._handle === null) {\r\n      // If this._handle is already null, there is nothing left to do with a\r\n      // pending write request, so we discard it.\r\n      return 0;\r\n    }\r\n\r\n    const handle = this._handle;\r\n\r\n    const self = this;\r\n\r\n    let pending = bufs.length;\r\n\r\n    this.stream.cork();\r\n    // Use `var` over `let` for performance optimization.\r\n    // eslint-disable-next-line no-var\r\n    for (var i = 0; i < bufs.length; ++i)\r\n      this.stream.write(bufs[i], done);\r\n    this.stream.uncork();\r\n\r\n    // Only set the request here, because the `write()` calls could throw.\r\n    this[kCurrentWriteRequest] = req;\r\n\r\n    function done(err) {\r\n      if (!err && --pending !== 0)\r\n        return;\r\n\r\n      // Ensure that this is called once in case of error\r\n      pending = 0;\r\n\r\n      let errCode = 0;\r\n      if (err) {\r\n        errCode = uv[`UV_${err.code}`] || uv.UV_EPIPE;\r\n      }\r\n\r\n      // Ensure that write was dispatched\r\n      setImmediate(() => {\r\n        self.finishWrite(handle, errCode);\r\n      });\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  // handle === this._handle except when called from doClose().\r\n  finishWrite(handle, errCode) {\r\n    // The write request might already have been cancelled.\r\n    if (this[kCurrentWriteRequest] === null)\r\n      return;\r\n    const req = this[kCurrentWriteRequest];\r\n    this[kCurrentWriteRequest] = null;\r\n\r\n    handle.finishWrite(req, errCode);\r\n    if (this[kPendingShutdownRequest]) {\r\n      const req = this[kPendingShutdownRequest];\r\n      this[kPendingShutdownRequest] = null;\r\n      this.doShutdown(req);\r\n    }\r\n  }\r\n\r\n  doClose(cb) {\r\n    this[kPendingClose] = true;\r\n\r\n    const handle = this._handle;\r\n\r\n    // When sockets of the \"net\" module destroyed, they will call\r\n    // `this._handle.close()` which will also emit EOF if not emitted before.\r\n    // This feature makes sockets on the other side emit \"end\" and \"close\"\r\n    // even though we haven't called `end()`. As `stream` are likely to be\r\n    // instances of `net.Socket`, calling `stream.destroy()` manually will\r\n    // avoid issues that don't properly close wrapped connections.\r\n    this.stream.destroy();\r\n\r\n    setImmediate(() => {\r\n      // Should be already set by net.js\r\n      assert(this._handle === null);\r\n\r\n      this.finishWrite(handle, uv.UV_ECANCELED);\r\n      this.finishShutdown(handle, uv.UV_ECANCELED);\r\n\r\n      this[kPendingClose] = false;\r\n\r\n      cb();\r\n    });\r\n  }\r\n\r\n  get [kBoundSession]() {\r\n    return this.stream[kBoundSession];\r\n  }\r\n\r\n  set [kBoundSession](session) {\r\n    this.stream[kBoundSession] = session;\r\n  }\r\n}\r\n\r\nmodule.exports = JSStreamSocket;\r\n"
  },
  "117": {
    "metadata": {
      "scriptId": "117",
      "url": "node:_stream_writable",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 5,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "da7510226d1d5fb35c418974f38055810cf687ccd4ea7ed7df70a9a65afeac7f",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 124,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_stream_writable"
    },
    "source": "'use strict';\r\n\r\n// Keep this file as an alias for the full stream module.\r\n\r\nmodule.exports = require('stream').Writable;\r\n"
  },
  "118": {
    "metadata": {
      "scriptId": "118",
      "url": "node:_tls_common",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 159,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "7f3df2f57b7c02f5bdefc8fa832fcb394a178036484149056d5e19950a051083",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 5289,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_tls_common"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePush,\r\n  JSONParse,\r\n  RegExpPrototypeSymbolReplace,\r\n} = primordials;\r\n\r\nconst tls = require('tls');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_TLS_INVALID_PROTOCOL_VERSION,\r\n    ERR_TLS_PROTOCOL_VERSION_CONFLICT,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  crypto: {\r\n    SSL_OP_CIPHER_SERVER_PREFERENCE,\r\n    TLS1_VERSION,\r\n    TLS1_1_VERSION,\r\n    TLS1_2_VERSION,\r\n    TLS1_3_VERSION,\r\n  },\r\n} = internalBinding('constants');\r\n\r\nconst {\r\n  kEmptyObject,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  validateInteger,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  configSecureContext,\r\n} = require('internal/tls/secure-context');\r\n\r\nfunction toV(which, v, def) {\r\n  if (v == null) v = def;\r\n  if (v === 'TLSv1') return TLS1_VERSION;\r\n  if (v === 'TLSv1.1') return TLS1_1_VERSION;\r\n  if (v === 'TLSv1.2') return TLS1_2_VERSION;\r\n  if (v === 'TLSv1.3') return TLS1_3_VERSION;\r\n  throw new ERR_TLS_INVALID_PROTOCOL_VERSION(v, which);\r\n}\r\n\r\nconst {\r\n  SecureContext: NativeSecureContext,\r\n} = internalBinding('crypto');\r\n\r\nfunction SecureContext(secureProtocol, secureOptions, minVersion, maxVersion) {\r\n  if (!(this instanceof SecureContext)) {\r\n    return new SecureContext(secureProtocol, secureOptions, minVersion,\r\n                             maxVersion);\r\n  }\r\n\r\n  if (secureProtocol) {\r\n    if (minVersion != null)\r\n      throw new ERR_TLS_PROTOCOL_VERSION_CONFLICT(minVersion, secureProtocol);\r\n    if (maxVersion != null)\r\n      throw new ERR_TLS_PROTOCOL_VERSION_CONFLICT(maxVersion, secureProtocol);\r\n  }\r\n\r\n  this.context = new NativeSecureContext();\r\n  this.context.init(secureProtocol,\r\n                    toV('minimum', minVersion, tls.DEFAULT_MIN_VERSION),\r\n                    toV('maximum', maxVersion, tls.DEFAULT_MAX_VERSION));\r\n\r\n  if (secureOptions) {\r\n    validateInteger(secureOptions, 'secureOptions');\r\n    this.context.setOptions(secureOptions);\r\n  }\r\n}\r\n\r\nfunction createSecureContext(options) {\r\n  if (!options) options = kEmptyObject;\r\n\r\n  const {\r\n    honorCipherOrder,\r\n    minVersion,\r\n    maxVersion,\r\n    secureProtocol,\r\n  } = options;\r\n\r\n  let { secureOptions } = options;\r\n\r\n  if (honorCipherOrder)\r\n    secureOptions |= SSL_OP_CIPHER_SERVER_PREFERENCE;\r\n\r\n  const c = new SecureContext(secureProtocol, secureOptions,\r\n                              minVersion, maxVersion);\r\n\r\n  configSecureContext(c.context, options);\r\n\r\n  return c;\r\n}\r\n\r\n// Translate some fields from the handle's C-friendly format into more idiomatic\r\n// javascript object representations before passing them back to the user.  Can\r\n// be used on any cert object, but changing the name would be semver-major.\r\nfunction translatePeerCertificate(c) {\r\n  if (!c)\r\n    return null;\r\n\r\n  if (c.issuerCertificate != null && c.issuerCertificate !== c) {\r\n    c.issuerCertificate = translatePeerCertificate(c.issuerCertificate);\r\n  }\r\n  if (c.infoAccess != null) {\r\n    const info = c.infoAccess;\r\n    c.infoAccess = { __proto__: null };\r\n\r\n    // XXX: More key validation?\r\n    RegExpPrototypeSymbolReplace(/([^\\n:]*):([^\\n]*)(?:\\n|$)/g, info,\r\n                                 (all, key, val) => {\r\n                                   if (val.charCodeAt(0) === 0x22) {\r\n                                     // The translatePeerCertificate function is only\r\n                                     // used on internally created legacy certificate\r\n                                     // objects, and any value that contains a quote\r\n                                     // will always be a valid JSON string literal,\r\n                                     // so this should never throw.\r\n                                     val = JSONParse(val);\r\n                                   }\r\n                                   if (key in c.infoAccess)\r\n                                     ArrayPrototypePush(c.infoAccess[key], val);\r\n                                   else\r\n                                     c.infoAccess[key] = [val];\r\n                                 });\r\n  }\r\n  return c;\r\n}\r\n\r\nmodule.exports = {\r\n  SecureContext,\r\n  createSecureContext,\r\n  translatePeerCertificate,\r\n};\r\n"
  },
  "119": {
    "metadata": {
      "scriptId": "119",
      "url": "node:tls",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 351,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "ce4759f6bad027054e747ce84f7a1d5d477e49c0b28f967e9e84cbf2e2af8cb7",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 11963,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:tls"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  Array,\r\n  ArrayIsArray,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeReduce,\r\n  ArrayPrototypeSome,\r\n  JSONParse,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  RegExpPrototypeExec,\r\n  RegExpPrototypeSymbolReplace,\r\n  StringFromCharCode,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeSlice,\r\n  StringPrototypeSplit,\r\n  StringPrototypeStartsWith,\r\n  StringPrototypeSubstring,\r\n} = primordials;\r\n\r\nconst {\r\n  ERR_TLS_CERT_ALTNAME_FORMAT,\r\n  ERR_TLS_CERT_ALTNAME_INVALID,\r\n  ERR_OUT_OF_RANGE,\r\n} = require('internal/errors').codes;\r\nconst internalUtil = require('internal/util');\r\ninternalUtil.assertCrypto();\r\nconst {\r\n  isArrayBufferView,\r\n  isUint8Array,\r\n} = require('internal/util/types');\r\n\r\nconst net = require('net');\r\nconst { getOptionValue } = require('internal/options');\r\nconst { getRootCertificates, getSSLCiphers } = internalBinding('crypto');\r\nconst { Buffer } = require('buffer');\r\nconst { canonicalizeIP } = internalBinding('cares_wrap');\r\nconst _tls_common = require('_tls_common');\r\nconst _tls_wrap = require('_tls_wrap');\r\nconst { createSecurePair } = require('internal/tls/secure-pair');\r\n\r\n// Allow {CLIENT_RENEG_LIMIT} client-initiated session renegotiations\r\n// every {CLIENT_RENEG_WINDOW} seconds. An error event is emitted if more\r\n// renegotiations are seen. The settings are applied to all remote client\r\n// connections.\r\nexports.CLIENT_RENEG_LIMIT = 3;\r\nexports.CLIENT_RENEG_WINDOW = 600;\r\n\r\nexports.DEFAULT_CIPHERS = getOptionValue('--tls-cipher-list');\r\n\r\nexports.DEFAULT_ECDH_CURVE = 'auto';\r\n\r\nif (getOptionValue('--tls-min-v1.0'))\r\n  exports.DEFAULT_MIN_VERSION = 'TLSv1';\r\nelse if (getOptionValue('--tls-min-v1.1'))\r\n  exports.DEFAULT_MIN_VERSION = 'TLSv1.1';\r\nelse if (getOptionValue('--tls-min-v1.2'))\r\n  exports.DEFAULT_MIN_VERSION = 'TLSv1.2';\r\nelse if (getOptionValue('--tls-min-v1.3'))\r\n  exports.DEFAULT_MIN_VERSION = 'TLSv1.3';\r\nelse\r\n  exports.DEFAULT_MIN_VERSION = 'TLSv1.2';\r\n\r\nif (getOptionValue('--tls-max-v1.3'))\r\n  exports.DEFAULT_MAX_VERSION = 'TLSv1.3';\r\nelse if (getOptionValue('--tls-max-v1.2'))\r\n  exports.DEFAULT_MAX_VERSION = 'TLSv1.2';\r\nelse\r\n  exports.DEFAULT_MAX_VERSION = 'TLSv1.3'; // Will depend on node version.\r\n\r\n\r\nexports.getCiphers = internalUtil.cachedResult(\r\n  () => internalUtil.filterDuplicateStrings(getSSLCiphers(), true),\r\n);\r\n\r\nlet rootCertificates;\r\n\r\nfunction cacheRootCertificates() {\r\n  rootCertificates = ObjectFreeze(getRootCertificates());\r\n}\r\n\r\nObjectDefineProperty(exports, 'rootCertificates', {\r\n  __proto__: null,\r\n  configurable: false,\r\n  enumerable: true,\r\n  get: () => {\r\n    // Out-of-line caching to promote inlining the getter.\r\n    if (!rootCertificates) cacheRootCertificates();\r\n    return rootCertificates;\r\n  },\r\n});\r\n\r\n// Convert protocols array into valid OpenSSL protocols list\r\n// (\"\\x06spdy/2\\x08http/1.1\\x08http/1.0\")\r\nfunction convertProtocols(protocols) {\r\n  const lens = new Array(protocols.length);\r\n  const buff = Buffer.allocUnsafe(ArrayPrototypeReduce(protocols, (p, c, i) => {\r\n    const len = Buffer.byteLength(c);\r\n    if (len > 255) {\r\n      throw new ERR_OUT_OF_RANGE('The byte length of the protocol at index ' +\r\n        `${i} exceeds the maximum length.`, '<= 255', len, true);\r\n    }\r\n    lens[i] = len;\r\n    return p + 1 + len;\r\n  }, 0));\r\n\r\n  let offset = 0;\r\n  for (let i = 0, c = protocols.length; i < c; i++) {\r\n    buff[offset++] = lens[i];\r\n    buff.write(protocols[i], offset);\r\n    offset += lens[i];\r\n  }\r\n\r\n  return buff;\r\n}\r\n\r\nexports.convertALPNProtocols = function convertALPNProtocols(protocols, out) {\r\n  // If protocols is Array - translate it into buffer\r\n  if (ArrayIsArray(protocols)) {\r\n    out.ALPNProtocols = convertProtocols(protocols);\r\n  } else if (isUint8Array(protocols)) {\r\n    // Copy new buffer not to be modified by user.\r\n    out.ALPNProtocols = Buffer.from(protocols);\r\n  } else if (isArrayBufferView(protocols)) {\r\n    out.ALPNProtocols = Buffer.from(protocols.buffer.slice(\r\n      protocols.byteOffset,\r\n      protocols.byteOffset + protocols.byteLength,\r\n    ));\r\n  }\r\n};\r\n\r\nfunction unfqdn(host) {\r\n  return RegExpPrototypeSymbolReplace(/[.]$/, host, '');\r\n}\r\n\r\n// String#toLowerCase() is locale-sensitive so we use\r\n// a conservative version that only lowercases A-Z.\r\nfunction toLowerCase(c) {\r\n  return StringFromCharCode(32 + StringPrototypeCharCodeAt(c, 0));\r\n}\r\n\r\nfunction splitHost(host) {\r\n  return StringPrototypeSplit(\r\n    RegExpPrototypeSymbolReplace(/[A-Z]/g, unfqdn(host), toLowerCase),\r\n    '.',\r\n  );\r\n}\r\n\r\nfunction check(hostParts, pattern, wildcards) {\r\n  // Empty strings, null, undefined, etc. never match.\r\n  if (!pattern)\r\n    return false;\r\n\r\n  const patternParts = splitHost(pattern);\r\n\r\n  if (hostParts.length !== patternParts.length)\r\n    return false;\r\n\r\n  // Pattern has empty components, e.g. \"bad..example.com\".\r\n  if (ArrayPrototypeIncludes(patternParts, ''))\r\n    return false;\r\n\r\n  // RFC 6125 allows IDNA U-labels (Unicode) in names but we have no\r\n  // good way to detect their encoding or normalize them so we simply\r\n  // reject them.  Control characters and blanks are rejected as well\r\n  // because nothing good can come from accepting them.\r\n  const isBad = (s) => RegExpPrototypeExec(/[^\\u0021-\\u007F]/u, s) !== null;\r\n  if (ArrayPrototypeSome(patternParts, isBad))\r\n    return false;\r\n\r\n  // Check host parts from right to left first.\r\n  for (let i = hostParts.length - 1; i > 0; i -= 1) {\r\n    if (hostParts[i] !== patternParts[i])\r\n      return false;\r\n  }\r\n\r\n  const hostSubdomain = hostParts[0];\r\n  const patternSubdomain = patternParts[0];\r\n  const patternSubdomainParts = StringPrototypeSplit(patternSubdomain, '*');\r\n\r\n  // Short-circuit when the subdomain does not contain a wildcard.\r\n  // RFC 6125 does not allow wildcard substitution for components\r\n  // containing IDNA A-labels (Punycode) so match those verbatim.\r\n  if (patternSubdomainParts.length === 1 ||\r\n      StringPrototypeIncludes(patternSubdomain, 'xn--'))\r\n    return hostSubdomain === patternSubdomain;\r\n\r\n  if (!wildcards)\r\n    return false;\r\n\r\n  // More than one wildcard is always wrong.\r\n  if (patternSubdomainParts.length > 2)\r\n    return false;\r\n\r\n  // *.tld wildcards are not allowed.\r\n  if (patternParts.length <= 2)\r\n    return false;\r\n\r\n  const { 0: prefix, 1: suffix } = patternSubdomainParts;\r\n\r\n  if (prefix.length + suffix.length > hostSubdomain.length)\r\n    return false;\r\n\r\n  if (!StringPrototypeStartsWith(hostSubdomain, prefix))\r\n    return false;\r\n\r\n  if (!StringPrototypeEndsWith(hostSubdomain, suffix))\r\n    return false;\r\n\r\n  return true;\r\n}\r\n\r\n// This pattern is used to determine the length of escaped sequences within\r\n// the subject alt names string. It allows any valid JSON string literal.\r\n// This MUST match the JSON specification (ECMA-404 / RFC8259) exactly.\r\nconst jsonStringPattern =\r\n  // eslint-disable-next-line no-control-regex\r\n  /^\"(?:[^\"\\\\\\u0000-\\u001f]|\\\\(?:[\"\\\\/bfnrt]|u[0-9a-fA-F]{4}))*\"/;\r\n\r\nfunction splitEscapedAltNames(altNames) {\r\n  const result = [];\r\n  let currentToken = '';\r\n  let offset = 0;\r\n  while (offset !== altNames.length) {\r\n    const nextSep = StringPrototypeIndexOf(altNames, ', ', offset);\r\n    const nextQuote = StringPrototypeIndexOf(altNames, '\"', offset);\r\n    if (nextQuote !== -1 && (nextSep === -1 || nextQuote < nextSep)) {\r\n      // There is a quote character and there is no separator before the quote.\r\n      currentToken += StringPrototypeSubstring(altNames, offset, nextQuote);\r\n      const match = RegExpPrototypeExec(\r\n        jsonStringPattern, StringPrototypeSubstring(altNames, nextQuote));\r\n      if (!match) {\r\n        throw new ERR_TLS_CERT_ALTNAME_FORMAT();\r\n      }\r\n      currentToken += JSONParse(match[0]);\r\n      offset = nextQuote + match[0].length;\r\n    } else if (nextSep !== -1) {\r\n      // There is a separator and no quote before it.\r\n      currentToken += StringPrototypeSubstring(altNames, offset, nextSep);\r\n      ArrayPrototypePush(result, currentToken);\r\n      currentToken = '';\r\n      offset = nextSep + 2;\r\n    } else {\r\n      currentToken += StringPrototypeSubstring(altNames, offset);\r\n      offset = altNames.length;\r\n    }\r\n  }\r\n  ArrayPrototypePush(result, currentToken);\r\n  return result;\r\n}\r\n\r\nexports.checkServerIdentity = function checkServerIdentity(hostname, cert) {\r\n  const subject = cert.subject;\r\n  const altNames = cert.subjectaltname;\r\n  const dnsNames = [];\r\n  const ips = [];\r\n\r\n  hostname = '' + hostname;\r\n\r\n  if (altNames) {\r\n    const splitAltNames = StringPrototypeIncludes(altNames, '\"') ?\r\n      splitEscapedAltNames(altNames) :\r\n      StringPrototypeSplit(altNames, ', ');\r\n    ArrayPrototypeForEach(splitAltNames, (name) => {\r\n      if (StringPrototypeStartsWith(name, 'DNS:')) {\r\n        ArrayPrototypePush(dnsNames, StringPrototypeSlice(name, 4));\r\n      } else if (StringPrototypeStartsWith(name, 'IP Address:')) {\r\n        ArrayPrototypePush(ips, canonicalizeIP(StringPrototypeSlice(name, 11)));\r\n      }\r\n    });\r\n  }\r\n\r\n  let valid = false;\r\n  let reason = 'Unknown reason';\r\n\r\n  hostname = unfqdn(hostname);  // Remove trailing dot for error messages.\r\n\r\n  if (net.isIP(hostname)) {\r\n    valid = ArrayPrototypeIncludes(ips, canonicalizeIP(hostname));\r\n    if (!valid)\r\n      reason = `IP: ${hostname} is not in the cert's list: ` +\r\n               ArrayPrototypeJoin(ips, ', ');\r\n  } else if (dnsNames.length > 0 || subject?.CN) {\r\n    const hostParts = splitHost(hostname);\r\n    const wildcard = (pattern) => check(hostParts, pattern, true);\r\n\r\n    if (dnsNames.length > 0) {\r\n      valid = ArrayPrototypeSome(dnsNames, wildcard);\r\n      if (!valid)\r\n        reason =\r\n          `Host: ${hostname}. is not in the cert's altnames: ${altNames}`;\r\n    } else {\r\n      // Match against Common Name only if no supported identifiers exist.\r\n      const cn = subject.CN;\r\n\r\n      if (ArrayIsArray(cn))\r\n        valid = ArrayPrototypeSome(cn, wildcard);\r\n      else if (cn)\r\n        valid = wildcard(cn);\r\n\r\n      if (!valid)\r\n        reason = `Host: ${hostname}. is not cert's CN: ${cn}`;\r\n    }\r\n  } else {\r\n    reason = 'Cert does not contain a DNS name';\r\n  }\r\n\r\n  if (!valid) {\r\n    return new ERR_TLS_CERT_ALTNAME_INVALID(reason, hostname, cert);\r\n  }\r\n};\r\n\r\nexports.createSecureContext = _tls_common.createSecureContext;\r\nexports.SecureContext = _tls_common.SecureContext;\r\nexports.TLSSocket = _tls_wrap.TLSSocket;\r\nexports.Server = _tls_wrap.Server;\r\nexports.createServer = _tls_wrap.createServer;\r\nexports.connect = _tls_wrap.connect;\r\n\r\nexports.createSecurePair = internalUtil.deprecate(\r\n  createSecurePair,\r\n  'tls.createSecurePair() is deprecated. Please use ' +\r\n  'tls.TLSSocket instead.', 'DEP0064');\r\n"
  },
  "120": {
    "metadata": {
      "scriptId": "120",
      "url": "node:_tls_wrap",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1827,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "2ce6fa5b9193bc039db5593e009892fb895528c5f9ede772501867273c0c2bbc",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 55446,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:_tls_wrap"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypePush,\r\n  FunctionPrototype,\r\n  ObjectAssign,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n  RegExp,\r\n  RegExpPrototypeExec,\r\n  RegExpPrototypeSymbolReplace,\r\n  StringPrototypeReplaceAll,\r\n  StringPrototypeSlice,\r\n  Symbol,\r\n  SymbolFor,\r\n} = primordials;\r\n\r\nconst {\r\n  assertCrypto,\r\n  deprecate,\r\n  kEmptyObject,\r\n} = require('internal/util');\r\n\r\nassertCrypto();\r\n\r\nconst { setImmediate } = require('timers');\r\nconst assert = require('internal/assert');\r\nconst crypto = require('crypto');\r\nconst EE = require('events');\r\nconst net = require('net');\r\nconst tls = require('tls');\r\nconst common = require('_tls_common');\r\nconst { kReinitializeHandle } = require('internal/net');\r\nconst JSStreamSocket = require('internal/js_stream_socket');\r\nconst { Buffer } = require('buffer');\r\nlet debug = require('internal/util/debuglog').debuglog('tls', (fn) => {\r\n  debug = fn;\r\n});\r\nconst { TCP, constants: TCPConstants } = internalBinding('tcp_wrap');\r\nconst tls_wrap = internalBinding('tls_wrap');\r\nconst { Pipe, constants: PipeConstants } = internalBinding('pipe_wrap');\r\nconst { owner_symbol } = require('internal/async_hooks').symbols;\r\nconst { isArrayBufferView } = require('internal/util/types');\r\nconst { SecureContext: NativeSecureContext } = internalBinding('crypto');\r\nconst {\r\n  ConnResetException,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_MULTIPLE_CALLBACK,\r\n    ERR_SOCKET_CLOSED,\r\n    ERR_TLS_ALPN_CALLBACK_INVALID_RESULT,\r\n    ERR_TLS_ALPN_CALLBACK_WITH_PROTOCOLS,\r\n    ERR_TLS_DH_PARAM_SIZE,\r\n    ERR_TLS_HANDSHAKE_TIMEOUT,\r\n    ERR_TLS_INVALID_CONTEXT,\r\n    ERR_TLS_INVALID_STATE,\r\n    ERR_TLS_RENEGOTIATION_DISABLED,\r\n    ERR_TLS_REQUIRED_SERVER_NAME,\r\n    ERR_TLS_SESSION_ATTACK,\r\n    ERR_TLS_SNI_FROM_SERVER,\r\n  },\r\n} = require('internal/errors');\r\nconst { onpskexchange: kOnPskExchange } = internalBinding('symbols');\r\nconst {\r\n  getOptionValue,\r\n  getAllowUnauthorized,\r\n} = require('internal/options');\r\nconst {\r\n  validateBoolean,\r\n  validateBuffer,\r\n  validateFunction,\r\n  validateInt32,\r\n  validateNumber,\r\n  validateObject,\r\n  validateString,\r\n  validateUint32,\r\n} = require('internal/validators');\r\nconst {\r\n  InternalX509Certificate,\r\n} = require('internal/crypto/x509');\r\nconst traceTls = getOptionValue('--trace-tls');\r\nconst tlsKeylog = getOptionValue('--tls-keylog');\r\nconst { appendFile } = require('fs');\r\nconst kConnectOptions = Symbol('connect-options');\r\nconst kDisableRenegotiation = Symbol('disable-renegotiation');\r\nconst kErrorEmitted = Symbol('error-emitted');\r\nconst kHandshakeTimeout = Symbol('handshake-timeout');\r\nconst kRes = Symbol('res');\r\nconst kSNICallback = Symbol('snicallback');\r\nconst kALPNCallback = Symbol('alpncallback');\r\nconst kEnableTrace = Symbol('enableTrace');\r\nconst kPskCallback = Symbol('pskcallback');\r\nconst kPskIdentityHint = Symbol('pskidentityhint');\r\nconst kPendingSession = Symbol('pendingSession');\r\nconst kIsVerified = Symbol('verified');\r\n\r\nconst noop = FunctionPrototype;\r\n\r\nlet ipServernameWarned = false;\r\nlet tlsTracingWarned = false;\r\n\r\n// Server side times how long a handshake is taking to protect against slow\r\n// handshakes being used for DoS.\r\nfunction onhandshakestart(now) {\r\n  debug('server onhandshakestart');\r\n\r\n  const { lastHandshakeTime } = this;\r\n  assert(now >= lastHandshakeTime,\r\n         `now (${now}) < lastHandshakeTime (${lastHandshakeTime})`);\r\n\r\n  this.lastHandshakeTime = now;\r\n\r\n  // If this is the first handshake we can skip the rest of the checks.\r\n  if (lastHandshakeTime === 0)\r\n    return;\r\n\r\n  if ((now - lastHandshakeTime) >= tls.CLIENT_RENEG_WINDOW * 1000)\r\n    this.handshakes = 1;\r\n  else\r\n    this.handshakes++;\r\n\r\n  const owner = this[owner_symbol];\r\n\r\n  assert(owner._tlsOptions.isServer);\r\n\r\n  if (this.handshakes > tls.CLIENT_RENEG_LIMIT) {\r\n    owner._emitTLSError(new ERR_TLS_SESSION_ATTACK());\r\n    return;\r\n  }\r\n\r\n  if (owner[kDisableRenegotiation])\r\n    owner._emitTLSError(new ERR_TLS_RENEGOTIATION_DISABLED());\r\n}\r\n\r\nfunction onhandshakedone() {\r\n  debug('server onhandshakedone');\r\n\r\n  const owner = this[owner_symbol];\r\n  assert(owner._tlsOptions.isServer);\r\n\r\n  // `newSession` callback wasn't called yet\r\n  if (owner._newSessionPending) {\r\n    owner._securePending = true;\r\n    return;\r\n  }\r\n\r\n  owner._finishInit();\r\n}\r\n\r\n\r\nfunction loadSession(hello) {\r\n  debug('server onclienthello',\r\n        'sessionid.len', hello.sessionId.length,\r\n        'ticket?', hello.tlsTicket,\r\n  );\r\n  const owner = this[owner_symbol];\r\n\r\n  let once = false;\r\n  function onSession(err, session) {\r\n    debug('server resumeSession callback(err %j, sess? %s)', err, !!session);\r\n    if (once)\r\n      return owner.destroy(new ERR_MULTIPLE_CALLBACK());\r\n    once = true;\r\n\r\n    if (err)\r\n      return owner.destroy(err);\r\n\r\n    if (owner._handle === null)\r\n      return owner.destroy(new ERR_SOCKET_CLOSED());\r\n\r\n    owner._handle.loadSession(session);\r\n    // Session is loaded. End the parser to allow handshaking to continue.\r\n    owner._handle.endParser();\r\n  }\r\n\r\n  if (hello.sessionId.length <= 0 ||\r\n      hello.tlsTicket ||\r\n      (owner.server &&\r\n      !owner.server.emit('resumeSession', hello.sessionId, onSession))) {\r\n    // Sessions without identifiers can't be resumed.\r\n    // Sessions with tickets can be resumed directly from the ticket, no server\r\n    // session storage is necessary.\r\n    // Without a call to a resumeSession listener, a session will never be\r\n    // loaded, so end the parser to allow handshaking to continue.\r\n    owner._handle.endParser();\r\n  }\r\n}\r\n\r\n\r\nfunction loadSNI(info) {\r\n  const owner = this[owner_symbol];\r\n  const servername = info.servername;\r\n  if (!servername || !owner._SNICallback)\r\n    return requestOCSP(owner, info);\r\n\r\n  let once = false;\r\n  owner._SNICallback(servername, (err, context) => {\r\n    if (once)\r\n      return owner.destroy(new ERR_MULTIPLE_CALLBACK());\r\n    once = true;\r\n\r\n    if (err)\r\n      return owner.destroy(err);\r\n\r\n    if (owner._handle === null)\r\n      return owner.destroy(new ERR_SOCKET_CLOSED());\r\n\r\n    // TODO(indutny): eventually disallow raw `SecureContext`\r\n    if (context)\r\n      owner._handle.sni_context = context.context || context;\r\n\r\n    requestOCSP(owner, info);\r\n  });\r\n}\r\n\r\n\r\nfunction callALPNCallback(protocolsBuffer) {\r\n  const handle = this;\r\n  const socket = handle[owner_symbol];\r\n\r\n  const servername = handle.getServername();\r\n\r\n  // Collect all the protocols from the given buffer:\r\n  const protocols = [];\r\n  let offset = 0;\r\n  while (offset < protocolsBuffer.length) {\r\n    const protocolLen = protocolsBuffer[offset];\r\n    offset += 1;\r\n\r\n    const protocol = protocolsBuffer.slice(offset, offset + protocolLen);\r\n    offset += protocolLen;\r\n\r\n    protocols.push(protocol.toString('ascii'));\r\n  }\r\n\r\n  const selectedProtocol = socket[kALPNCallback]({\r\n    servername,\r\n    protocols,\r\n  });\r\n\r\n  // Undefined -> all proposed protocols rejected\r\n  if (selectedProtocol === undefined) return undefined;\r\n\r\n  const protocolIndex = protocols.indexOf(selectedProtocol);\r\n  if (protocolIndex === -1) {\r\n    throw new ERR_TLS_ALPN_CALLBACK_INVALID_RESULT(selectedProtocol, protocols);\r\n  }\r\n  let protocolOffset = 0;\r\n  for (let i = 0; i < protocolIndex; i++) {\r\n    protocolOffset += 1 + protocols[i].length;\r\n  }\r\n\r\n  return protocolOffset;\r\n}\r\n\r\nfunction requestOCSP(socket, info) {\r\n  if (!info.OCSPRequest || !socket.server)\r\n    return requestOCSPDone(socket);\r\n\r\n  let ctx = socket._handle.sni_context;\r\n\r\n  if (!ctx) {\r\n    ctx = socket.server._sharedCreds;\r\n\r\n    // TLS socket is using a `net.Server` instead of a tls.TLSServer.\r\n    // Some TLS properties like `server._sharedCreds` will not be present\r\n    if (!ctx)\r\n      return requestOCSPDone(socket);\r\n  }\r\n\r\n  // TODO(indutny): eventually disallow raw `SecureContext`\r\n  if (ctx.context)\r\n    ctx = ctx.context;\r\n\r\n  if (socket.server.listenerCount('OCSPRequest') === 0) {\r\n    return requestOCSPDone(socket);\r\n  }\r\n\r\n  let once = false;\r\n  const onOCSP = (err, response) => {\r\n    debug('server OCSPRequest done', 'handle?', !!socket._handle, 'once?', once,\r\n          'response?', !!response, 'err?', err);\r\n    if (once)\r\n      return socket.destroy(new ERR_MULTIPLE_CALLBACK());\r\n    once = true;\r\n\r\n    if (err)\r\n      return socket.destroy(err);\r\n\r\n    if (socket._handle === null)\r\n      return socket.destroy(new ERR_SOCKET_CLOSED());\r\n\r\n    if (response)\r\n      socket._handle.setOCSPResponse(response);\r\n    requestOCSPDone(socket);\r\n  };\r\n\r\n  debug('server oncertcb emit OCSPRequest');\r\n  socket.server.emit('OCSPRequest',\r\n                     ctx.getCertificate(),\r\n                     ctx.getIssuer(),\r\n                     onOCSP);\r\n}\r\n\r\nfunction requestOCSPDone(socket) {\r\n  debug('server certcb done');\r\n  try {\r\n    socket._handle.certCbDone();\r\n  } catch (e) {\r\n    debug('server certcb done errored', e);\r\n    socket.destroy(e);\r\n  }\r\n}\r\n\r\nfunction onnewsessionclient(sessionId, session) {\r\n  debug('client emit session');\r\n  const owner = this[owner_symbol];\r\n  if (owner[kIsVerified]) {\r\n    owner.emit('session', session);\r\n  } else {\r\n    owner[kPendingSession] = session;\r\n  }\r\n}\r\n\r\nfunction onnewsession(sessionId, session) {\r\n  debug('onnewsession');\r\n  const owner = this[owner_symbol];\r\n\r\n  // TODO(@sam-github) no server to emit the event on, but handshake won't\r\n  // continue unless newSessionDone() is called, should it be, or is that\r\n  // situation unreachable, or only occurring during shutdown?\r\n  if (!owner.server)\r\n    return;\r\n\r\n  let once = false;\r\n  const done = () => {\r\n    debug('onnewsession done');\r\n    if (once)\r\n      return;\r\n    once = true;\r\n\r\n    if (owner._handle === null)\r\n      return owner.destroy(new ERR_SOCKET_CLOSED());\r\n\r\n    this.newSessionDone();\r\n\r\n    owner._newSessionPending = false;\r\n    if (owner._securePending)\r\n      owner._finishInit();\r\n    owner._securePending = false;\r\n  };\r\n\r\n  owner._newSessionPending = true;\r\n  if (!owner.server.emit('newSession', sessionId, session, done))\r\n    done();\r\n}\r\n\r\nfunction onPskServerCallback(identity, maxPskLen) {\r\n  const owner = this[owner_symbol];\r\n  const ret = owner[kPskCallback](owner, identity);\r\n  if (ret == null)\r\n    return undefined;\r\n\r\n  let psk;\r\n  if (isArrayBufferView(ret)) {\r\n    psk = ret;\r\n  } else {\r\n    if (typeof ret !== 'object') {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'ret',\r\n        ['Object', 'Buffer', 'TypedArray', 'DataView'],\r\n        ret,\r\n      );\r\n    }\r\n    psk = ret.psk;\r\n    validateBuffer(psk, 'psk');\r\n  }\r\n\r\n  if (psk.length > maxPskLen) {\r\n    throw new ERR_INVALID_ARG_VALUE(\r\n      'psk',\r\n      psk,\r\n      `Pre-shared key exceeds ${maxPskLen} bytes`,\r\n    );\r\n  }\r\n\r\n  return psk;\r\n}\r\n\r\nfunction onPskClientCallback(hint, maxPskLen, maxIdentityLen) {\r\n  const owner = this[owner_symbol];\r\n  const ret = owner[kPskCallback](hint);\r\n  if (ret == null)\r\n    return undefined;\r\n\r\n  validateObject(ret, 'ret');\r\n\r\n  validateBuffer(ret.psk, 'psk');\r\n  if (ret.psk.length > maxPskLen) {\r\n    throw new ERR_INVALID_ARG_VALUE(\r\n      'psk',\r\n      ret.psk,\r\n      `Pre-shared key exceeds ${maxPskLen} bytes`,\r\n    );\r\n  }\r\n\r\n  validateString(ret.identity, 'identity');\r\n  if (Buffer.byteLength(ret.identity) > maxIdentityLen) {\r\n    throw new ERR_INVALID_ARG_VALUE(\r\n      'identity',\r\n      ret.identity,\r\n      `PSK identity exceeds ${maxIdentityLen} bytes`,\r\n    );\r\n  }\r\n\r\n  return { psk: ret.psk, identity: ret.identity };\r\n}\r\n\r\nfunction onkeylog(line) {\r\n  debug('onkeylog');\r\n  this[owner_symbol].emit('keylog', line);\r\n}\r\n\r\nfunction onocspresponse(resp) {\r\n  debug('client onocspresponse');\r\n  this[owner_symbol].emit('OCSPResponse', resp);\r\n}\r\n\r\nfunction onerror(err) {\r\n  const owner = this[owner_symbol];\r\n  debug('%s onerror %s had? %j',\r\n        (typeof owner._tlsOptions === 'object' && owner._tlsOptions !== null) ?\r\n          owner._tlsOptions.isServer ? 'server' : 'client' :\r\n          'unknown',\r\n        err, owner._hadError);\r\n\r\n  if (owner._hadError)\r\n    return;\r\n\r\n  owner._hadError = true;\r\n\r\n  // Destroy socket if error happened before handshake's finish\r\n  if (!owner._secureEstablished) {\r\n    // When handshake fails control is not yet released,\r\n    // so self._tlsError will return null instead of actual error\r\n\r\n    // Set closing the socket after emitting an event since the socket needs to\r\n    // be accessible when the `tlsClientError` event is emitted.\r\n    owner._closeAfterHandlingError = true;\r\n    owner.destroy(err);\r\n  } else if (owner._tlsOptions?.isServer &&\r\n             owner._rejectUnauthorized &&\r\n             RegExpPrototypeExec(/peer did not return a certificate/,\r\n                                 err.message) !== null) {\r\n    // Ignore server's authorization errors\r\n    owner.destroy();\r\n  } else {\r\n    // Emit error\r\n    owner._emitTLSError(err);\r\n  }\r\n}\r\n\r\n// Used by both client and server TLSSockets to start data flowing from _handle,\r\n// read(0) causes a StreamBase::ReadStart, via Socket._read.\r\nfunction initRead(tlsSocket, socket) {\r\n  debug('%s initRead',\r\n        tlsSocket._tlsOptions.isServer ? 'server' : 'client',\r\n        'handle?', !!tlsSocket._handle,\r\n        'buffered?', !!socket && socket.readableLength,\r\n  );\r\n  // If we were destroyed already don't bother reading\r\n  if (!tlsSocket._handle)\r\n    return;\r\n\r\n  // Socket already has some buffered data - emulate receiving it\r\n  if (socket && socket.readableLength) {\r\n    let buf;\r\n    while ((buf = socket.read()) !== null)\r\n      tlsSocket._handle.receive(buf);\r\n  }\r\n\r\n  tlsSocket.read(0);\r\n}\r\n\r\n/**\r\n * Provides a wrap of socket stream to do encrypted communication.\r\n */\r\n\r\nfunction TLSSocket(socket, opts) {\r\n  const tlsOptions = { ...opts };\r\n  let enableTrace = tlsOptions.enableTrace;\r\n\r\n  if (enableTrace == null) {\r\n    enableTrace = traceTls;\r\n\r\n    if (enableTrace && !tlsTracingWarned) {\r\n      tlsTracingWarned = true;\r\n      process.emitWarning('Enabling --trace-tls can expose sensitive data in ' +\r\n                          'the resulting log.');\r\n    }\r\n  } else {\r\n    validateBoolean(enableTrace, 'options.enableTrace');\r\n  }\r\n\r\n  if (tlsOptions.ALPNProtocols)\r\n    tls.convertALPNProtocols(tlsOptions.ALPNProtocols, tlsOptions);\r\n\r\n  this._tlsOptions = tlsOptions;\r\n  this._secureEstablished = false;\r\n  this._securePending = false;\r\n  this._newSessionPending = false;\r\n  this._controlReleased = false;\r\n  this.secureConnecting = true;\r\n  this._SNICallback = null;\r\n  this[kALPNCallback] = null;\r\n  this.servername = null;\r\n  this.alpnProtocol = null;\r\n  this.authorized = false;\r\n  this.authorizationError = null;\r\n  this[kRes] = null;\r\n  this[kIsVerified] = false;\r\n  this[kPendingSession] = null;\r\n\r\n  let wrap;\r\n  let handle;\r\n  let wrapHasActiveWriteFromPrevOwner;\r\n\r\n  if (socket) {\r\n    if (socket instanceof net.Socket && socket._handle) {\r\n      // 1. connected socket\r\n      wrap = socket;\r\n    } else {\r\n      // 2. socket has no handle so it is js not c++\r\n      // 3. unconnected sockets are wrapped\r\n      // TLS expects to interact from C++ with a net.Socket that has a C++ stream\r\n      // handle, but a JS stream doesn't have one. Wrap it up to make it look like\r\n      // a socket.\r\n      wrap = new JSStreamSocket(socket);\r\n    }\r\n\r\n    handle = wrap._handle;\r\n    wrapHasActiveWriteFromPrevOwner = wrap.writableLength > 0;\r\n  } else {\r\n    // 4. no socket, one will be created with net.Socket().connect\r\n    wrap = null;\r\n    wrapHasActiveWriteFromPrevOwner = false;\r\n  }\r\n\r\n  // Just a documented property to make secure sockets\r\n  // distinguishable from regular ones.\r\n  this.encrypted = true;\r\n\r\n  ReflectApply(net.Socket, this, [{\r\n    handle: this._wrapHandle(wrap, handle, wrapHasActiveWriteFromPrevOwner),\r\n    allowHalfOpen: socket ? socket.allowHalfOpen : tlsOptions.allowHalfOpen,\r\n    pauseOnCreate: tlsOptions.pauseOnConnect,\r\n    manualStart: true,\r\n    highWaterMark: tlsOptions.highWaterMark,\r\n    onread: !socket ? tlsOptions.onread : null,\r\n    signal: tlsOptions.signal,\r\n  }]);\r\n\r\n  // Proxy for API compatibility\r\n  this.ssl = this._handle;  // C++ TLSWrap object\r\n\r\n  this.on('error', this._tlsError);\r\n\r\n  this._init(socket, wrap);\r\n\r\n  if (enableTrace && this._handle)\r\n    this._handle.enableTrace();\r\n\r\n  if (wrapHasActiveWriteFromPrevOwner) {\r\n    // `wrap` is a streams.Writable in JS. This empty write will be queued\r\n    // and hence finish after all existing writes, which is the timing\r\n    // we want to start to send any tls data to `wrap`.\r\n    wrap.write('', (err) => {\r\n      if (err) {\r\n        debug('error got before writing any tls data to the underlying stream');\r\n        this.destroy(err);\r\n        return;\r\n      }\r\n\r\n      this._handle.writesIssuedByPrevListenerDone();\r\n    });\r\n  }\r\n\r\n  // Read on next tick so the caller has a chance to setup listeners\r\n  process.nextTick(initRead, this, socket);\r\n}\r\nObjectSetPrototypeOf(TLSSocket.prototype, net.Socket.prototype);\r\nObjectSetPrototypeOf(TLSSocket, net.Socket);\r\nexports.TLSSocket = TLSSocket;\r\n\r\nconst proxiedMethods = [\r\n  'ref', 'unref', 'open', 'bind', 'listen', 'connect', 'bind6',\r\n  'connect6', 'getsockname', 'getpeername', 'setNoDelay', 'setKeepAlive',\r\n  'setSimultaneousAccepts', 'setBlocking',\r\n\r\n  // PipeWrap\r\n  'setPendingInstances',\r\n];\r\n\r\n// Proxy HandleWrap, PipeWrap and TCPWrap methods\r\nfunction makeMethodProxy(name) {\r\n  return function methodProxy(...args) {\r\n    if (this._parent[name])\r\n      return ReflectApply(this._parent[name], this._parent, args);\r\n  };\r\n}\r\nfor (const proxiedMethod of proxiedMethods) {\r\n  tls_wrap.TLSWrap.prototype[proxiedMethod] =\r\n    makeMethodProxy(proxiedMethod);\r\n}\r\n\r\ntls_wrap.TLSWrap.prototype.close = function close(cb) {\r\n  let ssl;\r\n  if (this[owner_symbol]) {\r\n    ssl = this[owner_symbol].ssl;\r\n    this[owner_symbol].ssl = null;\r\n  }\r\n\r\n  // Invoke `destroySSL` on close to clean up possibly pending write requests\r\n  // that may self-reference TLSWrap, leading to leak\r\n  const done = () => {\r\n    if (ssl) {\r\n      ssl.destroySSL();\r\n      if (ssl._secureContext.singleUse) {\r\n        ssl._secureContext.context.close();\r\n        ssl._secureContext.context = null;\r\n      }\r\n    }\r\n    if (cb)\r\n      cb();\r\n  };\r\n\r\n  if (this._parentWrap) {\r\n    if (this._parentWrap._handle === null) {\r\n      // The socket handle was already closed.\r\n      done();\r\n      return;\r\n    }\r\n\r\n    if (this._parentWrap._handle === this._parent) {\r\n      this._parentWrap.once('close', done);\r\n      this._parentWrap.destroy();\r\n      return;\r\n    }\r\n  }\r\n\r\n  return this._parent.close(done);\r\n};\r\n\r\nTLSSocket.prototype.disableRenegotiation = function disableRenegotiation() {\r\n  this[kDisableRenegotiation] = true;\r\n};\r\n\r\n/**\r\n *\r\n * @param {null|net.Socket} wrap\r\n * @param {null|object} handle\r\n * @param {boolean} wrapHasActiveWriteFromPrevOwner\r\n * @returns {object}\r\n */\r\nTLSSocket.prototype._wrapHandle = function(wrap, handle, wrapHasActiveWriteFromPrevOwner) {\r\n  const options = this._tlsOptions;\r\n  if (!handle) {\r\n    handle = options.pipe ?\r\n      new Pipe(PipeConstants.SOCKET) :\r\n      new TCP(TCPConstants.SOCKET);\r\n    handle[owner_symbol] = this;\r\n  }\r\n\r\n  // Wrap socket's handle\r\n  const context = options.secureContext ||\r\n                  options.credentials ||\r\n                  tls.createSecureContext(options);\r\n  assert(handle.isStreamBase, 'handle must be a StreamBase');\r\n  if (!(context.context instanceof NativeSecureContext)) {\r\n    throw new ERR_TLS_INVALID_CONTEXT('context');\r\n  }\r\n\r\n  const res = tls_wrap.wrap(handle, context.context,\r\n                            !!options.isServer,\r\n                            wrapHasActiveWriteFromPrevOwner);\r\n  res._parent = handle;  // C++ \"wrap\" object: TCPWrap, JSStream, ...\r\n  res._parentWrap = wrap;  // JS object: net.Socket, JSStreamSocket, ...\r\n  res._secureContext = context;\r\n  res.reading = handle.reading;\r\n  this[kRes] = res;\r\n  defineHandleReading(this, handle);\r\n\r\n  // Guard against adding multiple listeners, as this method may be called\r\n  // repeatedly on the same socket by reinitializeHandle\r\n  if (this.listenerCount('close', onSocketCloseDestroySSL) === 0) {\r\n    this.on('close', onSocketCloseDestroySSL);\r\n  }\r\n\r\n  if (wrap) {\r\n    wrap.on('close', () => this.destroy());\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nTLSSocket.prototype[kReinitializeHandle] = function reinitializeHandle(handle) {\r\n  const originalServername = this.ssl ? this._handle.getServername() : null;\r\n  const originalSession = this.ssl ? this._handle.getSession() : null;\r\n\r\n  this.handle = this._wrapHandle(null, handle, false);\r\n  this.ssl = this._handle;\r\n\r\n  net.Socket.prototype[kReinitializeHandle].call(this, this.handle);\r\n  this._init();\r\n\r\n  if (this._tlsOptions.enableTrace) {\r\n    this._handle.enableTrace();\r\n  }\r\n\r\n  if (originalSession) {\r\n    this.setSession(originalSession);\r\n  }\r\n\r\n  if (originalServername) {\r\n    this.setServername(originalServername);\r\n  }\r\n};\r\n\r\n// This eliminates a cyclic reference to TLSWrap\r\n// Ref: https://github.com/nodejs/node/commit/f7620fb96d339f704932f9bb9a0dceb9952df2d4\r\nfunction defineHandleReading(socket, handle) {\r\n  ObjectDefineProperty(handle, 'reading', {\r\n    __proto__: null,\r\n    get: () => {\r\n      return socket[kRes].reading;\r\n    },\r\n    set: (value) => {\r\n      socket[kRes].reading = value;\r\n    },\r\n  });\r\n}\r\n\r\nfunction onSocketCloseDestroySSL() {\r\n  // Make sure we are not doing it on OpenSSL's stack\r\n  setImmediate(destroySSL, this);\r\n  this[kRes] = null;\r\n}\r\n\r\nfunction destroySSL(self) {\r\n  self._destroySSL();\r\n}\r\n\r\nTLSSocket.prototype._destroySSL = function _destroySSL() {\r\n  if (!this.ssl) return;\r\n  this.ssl.destroySSL();\r\n  if (this.ssl._secureContext.singleUse) {\r\n    this.ssl._secureContext.context.close();\r\n    this.ssl._secureContext.context = null;\r\n  }\r\n  this.ssl = null;\r\n  this[kPendingSession] = null;\r\n  this[kIsVerified] = false;\r\n};\r\n\r\nfunction keylogNewListener(event) {\r\n  if (event !== 'keylog')\r\n    return;\r\n\r\n  // Guard against enableKeylogCallback after destroy\r\n  if (!this._handle) return;\r\n  this._handle.enableKeylogCallback();\r\n\r\n  // Remove this listener since it's no longer needed.\r\n  this.removeListener('newListener', keylogNewListener);\r\n}\r\n\r\nfunction newListener(event) {\r\n  if (event !== 'session')\r\n    return;\r\n\r\n  // Guard against enableSessionCallbacks after destroy\r\n  if (!this._handle) return;\r\n  this._handle.enableSessionCallbacks();\r\n\r\n  // Remove this listener since it's no longer needed.\r\n  this.removeListener('newListener', newListener);\r\n}\r\n\r\n// Constructor guts, arbitrarily factored out.\r\nlet warnOnTlsKeylog = true;\r\nlet warnOnTlsKeylogError = true;\r\nTLSSocket.prototype._init = function(socket, wrap) {\r\n  const options = this._tlsOptions;\r\n  const ssl = this._handle;\r\n  this.server = options.server;\r\n\r\n  debug('%s _init',\r\n        options.isServer ? 'server' : 'client',\r\n        'handle?', !!ssl,\r\n  );\r\n\r\n  // Clients (!isServer) always request a cert, servers request a client cert\r\n  // only on explicit configuration.\r\n  const requestCert = !!options.requestCert || !options.isServer;\r\n  const rejectUnauthorized = !!options.rejectUnauthorized;\r\n\r\n  this._requestCert = requestCert;\r\n  this._rejectUnauthorized = rejectUnauthorized;\r\n  if (requestCert || rejectUnauthorized)\r\n    ssl.setVerifyMode(requestCert, rejectUnauthorized);\r\n\r\n  // Only call .onkeylog if there is a keylog listener.\r\n  ssl.onkeylog = onkeylog;\r\n\r\n  if (this.listenerCount('newListener', keylogNewListener) === 0) {\r\n    this.on('newListener', keylogNewListener);\r\n  }\r\n\r\n  if (options.isServer) {\r\n    ssl.onhandshakestart = onhandshakestart;\r\n    ssl.onhandshakedone = onhandshakedone;\r\n    ssl.onclienthello = loadSession;\r\n    ssl.oncertcb = loadSNI;\r\n    ssl.onnewsession = onnewsession;\r\n    ssl.lastHandshakeTime = 0;\r\n    ssl.handshakes = 0;\r\n\r\n    if (options.ALPNCallback) {\r\n      validateFunction(options.ALPNCallback, 'options.ALPNCallback');\r\n      this[kALPNCallback] = options.ALPNCallback;\r\n      ssl.ALPNCallback = callALPNCallback;\r\n      ssl.enableALPNCb();\r\n    }\r\n\r\n    if (this.server) {\r\n      if (this.server.listenerCount('resumeSession') > 0 ||\r\n          this.server.listenerCount('newSession') > 0) {\r\n        // Also starts the client hello parser as a side effect.\r\n        ssl.enableSessionCallbacks();\r\n      }\r\n      if (this.server.listenerCount('OCSPRequest') > 0)\r\n        ssl.enableCertCb();\r\n    }\r\n  } else {\r\n    ssl.onhandshakestart = noop;\r\n    ssl.onhandshakedone = () => {\r\n      debug('client onhandshakedone');\r\n      this._finishInit();\r\n    };\r\n    ssl.onocspresponse = onocspresponse;\r\n\r\n    if (options.session)\r\n      ssl.setSession(options.session);\r\n\r\n    ssl.onnewsession = onnewsessionclient;\r\n\r\n    // Only call .onnewsession if there is a session listener.\r\n    if (this.listenerCount('newListener', newListener) === 0) {\r\n      this.on('newListener', newListener);\r\n    }\r\n  }\r\n\r\n  if (tlsKeylog) {\r\n    if (warnOnTlsKeylog) {\r\n      warnOnTlsKeylog = false;\r\n      process.emitWarning('Using --tls-keylog makes TLS connections insecure ' +\r\n        'by writing secret key material to file ' + tlsKeylog);\r\n    }\r\n    this.on('keylog', (line) => {\r\n      appendFile(tlsKeylog, line, { mode: 0o600 }, (err) => {\r\n        if (err && warnOnTlsKeylogError) {\r\n          warnOnTlsKeylogError = false;\r\n          process.emitWarning('Failed to write TLS keylog (this warning ' +\r\n            'will not be repeated): ' + err);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  ssl.onerror = onerror;\r\n\r\n  // If custom SNICallback was given, or if\r\n  // there're SNI contexts to perform match against -\r\n  // set `.onsniselect` callback.\r\n  if (options.isServer &&\r\n      options.SNICallback &&\r\n      (options.SNICallback !== SNICallback ||\r\n       (options.server && options.server._contexts.length))) {\r\n    validateFunction(options.SNICallback, 'options.SNICallback');\r\n    this._SNICallback = options.SNICallback;\r\n    ssl.enableCertCb();\r\n  }\r\n\r\n  if (options.ALPNProtocols)\r\n    ssl.setALPNProtocols(options.ALPNProtocols);\r\n\r\n  if (options.pskCallback && ssl.enablePskCallback) {\r\n    validateFunction(options.pskCallback, 'pskCallback');\r\n\r\n    ssl[kOnPskExchange] = options.isServer ?\r\n      onPskServerCallback : onPskClientCallback;\r\n\r\n    this[kPskCallback] = options.pskCallback;\r\n    ssl.enablePskCallback();\r\n\r\n    if (options.pskIdentityHint) {\r\n      validateString(options.pskIdentityHint, 'options.pskIdentityHint');\r\n      ssl.setPskIdentityHint(options.pskIdentityHint);\r\n    }\r\n  }\r\n\r\n  // We can only come here via [kWrapConnectedHandle]() call that happens\r\n  // if the connection is established with `autoSelectFamily` set to `true`.\r\n  const connectOptions = this[kConnectOptions];\r\n  if (!options.isServer && connectOptions) {\r\n    if (connectOptions.servername) {\r\n      this.setServername(connectOptions.servername);\r\n    }\r\n  }\r\n\r\n  if (options.handshakeTimeout > 0)\r\n    this.setTimeout(options.handshakeTimeout, this._handleTimeout);\r\n\r\n  if (socket instanceof net.Socket) {\r\n    this._parent = socket;\r\n\r\n    // To prevent assertion in afterConnect() and properly kick off readStart\r\n    this.connecting = socket.connecting || !socket._handle;\r\n    socket.once('connect', () => {\r\n      this.connecting = false;\r\n      this.emit('connect');\r\n    });\r\n  }\r\n\r\n  // Assume `tls.connect()`\r\n  if (wrap) {\r\n    wrap.on('error', (err) => this._emitTLSError(err));\r\n  } else {\r\n    assert(!socket);\r\n    this.connecting = true;\r\n  }\r\n};\r\n\r\nTLSSocket.prototype.renegotiate = function(options, callback) {\r\n  validateObject(options, 'options');\r\n  if (callback !== undefined) {\r\n    validateFunction(callback, 'callback');\r\n  }\r\n\r\n  debug('%s renegotiate()',\r\n        this._tlsOptions.isServer ? 'server' : 'client',\r\n        'destroyed?', this.destroyed,\r\n  );\r\n\r\n  if (this.destroyed)\r\n    return;\r\n\r\n  let requestCert = !!this._requestCert;\r\n  let rejectUnauthorized = !!this._rejectUnauthorized;\r\n\r\n  if (options.requestCert !== undefined)\r\n    requestCert = !!options.requestCert;\r\n  if (options.rejectUnauthorized !== undefined)\r\n    rejectUnauthorized = !!options.rejectUnauthorized;\r\n\r\n  if (requestCert !== this._requestCert ||\r\n      rejectUnauthorized !== this._rejectUnauthorized) {\r\n    this._handle.setVerifyMode(requestCert, rejectUnauthorized);\r\n    this._requestCert = requestCert;\r\n    this._rejectUnauthorized = rejectUnauthorized;\r\n  }\r\n  // Ensure that we'll cycle through internal openssl's state\r\n  this.write('');\r\n\r\n  try {\r\n    this._handle.renegotiate();\r\n  } catch (err) {\r\n    if (callback) {\r\n      process.nextTick(callback, err);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Ensure that we'll cycle through internal openssl's state\r\n  this.write('');\r\n\r\n  if (callback) {\r\n    this.once('secure', () => callback(null));\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nTLSSocket.prototype.exportKeyingMaterial = function(length, label, context) {\r\n  validateUint32(length, 'length', true);\r\n  validateString(label, 'label');\r\n  if (context !== undefined)\r\n    validateBuffer(context, 'context');\r\n\r\n  if (!this._secureEstablished)\r\n    throw new ERR_TLS_INVALID_STATE();\r\n\r\n  return this._handle.exportKeyingMaterial(length, label, context);\r\n};\r\n\r\nTLSSocket.prototype.setMaxSendFragment = function setMaxSendFragment(size) {\r\n  validateInt32(size, 'size');\r\n  return this._handle.setMaxSendFragment(size) === 1;\r\n};\r\n\r\nTLSSocket.prototype._handleTimeout = function() {\r\n  this._emitTLSError(new ERR_TLS_HANDSHAKE_TIMEOUT());\r\n};\r\n\r\nTLSSocket.prototype._emitTLSError = function(err) {\r\n  const e = this._tlsError(err);\r\n  if (e)\r\n    this.emit('error', e);\r\n};\r\n\r\nTLSSocket.prototype._tlsError = function(err) {\r\n  this.emit('_tlsError', err);\r\n  if (this._controlReleased)\r\n    return err;\r\n  return null;\r\n};\r\n\r\nTLSSocket.prototype._releaseControl = function() {\r\n  if (this._controlReleased)\r\n    return false;\r\n  this._controlReleased = true;\r\n  this.removeListener('error', this._tlsError);\r\n  return true;\r\n};\r\n\r\nTLSSocket.prototype._finishInit = function() {\r\n  // Guard against getting onhandshakedone() after .destroy().\r\n  // * 1.2: If destroy() during onocspresponse(), then write of next handshake\r\n  // record fails, the handshake done info callbacks does not occur, and the\r\n  // socket closes.\r\n  // * 1.3: The OCSP response comes in the same record that finishes handshake,\r\n  // so even after .destroy(), the handshake done info callback occurs\r\n  // immediately after onocspresponse(). Ignore it.\r\n  if (!this._handle)\r\n    return;\r\n\r\n  this.alpnProtocol = this._handle.getALPNNegotiatedProtocol();\r\n  // The servername could be set by TLSWrap::SelectSNIContextCallback().\r\n  if (this.servername === null) {\r\n    this.servername = this._handle.getServername();\r\n  }\r\n\r\n  debug('%s _finishInit',\r\n        this._tlsOptions.isServer ? 'server' : 'client',\r\n        'handle?', !!this._handle,\r\n        'alpn', this.alpnProtocol,\r\n        'servername', this.servername);\r\n\r\n  this._secureEstablished = true;\r\n  if (this._tlsOptions.handshakeTimeout > 0)\r\n    this.setTimeout(0, this._handleTimeout);\r\n  this.emit('secure');\r\n};\r\n\r\nTLSSocket.prototype._start = function() {\r\n  debug('%s _start',\r\n        this._tlsOptions.isServer ? 'server' : 'client',\r\n        'handle?', !!this._handle,\r\n        'connecting?', this.connecting,\r\n        'requestOCSP?', !!this._tlsOptions.requestOCSP,\r\n  );\r\n  if (this.connecting) {\r\n    this.once('connect', this._start);\r\n    return;\r\n  }\r\n\r\n  // Socket was destroyed before the connection was established\r\n  if (!this._handle)\r\n    return;\r\n\r\n  if (this._tlsOptions.requestOCSP)\r\n    this._handle.requestOCSP();\r\n  this._handle.start();\r\n};\r\n\r\nTLSSocket.prototype.setServername = function(name) {\r\n  validateString(name, 'name');\r\n\r\n  if (this._tlsOptions.isServer) {\r\n    throw new ERR_TLS_SNI_FROM_SERVER();\r\n  }\r\n\r\n  this._handle.setServername(name);\r\n};\r\n\r\nTLSSocket.prototype.setSession = function(session) {\r\n  if (typeof session === 'string')\r\n    session = Buffer.from(session, 'latin1');\r\n  this._handle.setSession(session);\r\n};\r\n\r\nTLSSocket.prototype.getPeerCertificate = function(detailed) {\r\n  if (this._handle) {\r\n    return common.translatePeerCertificate(\r\n      this._handle.getPeerCertificate(detailed)) || {};\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nTLSSocket.prototype.getCertificate = function() {\r\n  if (this._handle) {\r\n    // It's not a peer cert, but the formatting is identical.\r\n    return common.translatePeerCertificate(\r\n      this._handle.getCertificate()) || {};\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nTLSSocket.prototype.getPeerX509Certificate = function(detailed) {\r\n  const cert = this._handle?.getPeerX509Certificate();\r\n  return cert ? new InternalX509Certificate(cert) : undefined;\r\n};\r\n\r\nTLSSocket.prototype.getX509Certificate = function() {\r\n  const cert = this._handle?.getX509Certificate();\r\n  return cert ? new InternalX509Certificate(cert) : undefined;\r\n};\r\n\r\n// Proxy TLSSocket handle methods\r\nfunction makeSocketMethodProxy(name) {\r\n  return function socketMethodProxy(...args) {\r\n    if (this._handle)\r\n      return ReflectApply(this._handle[name], this._handle, args);\r\n    return null;\r\n  };\r\n}\r\n\r\nArrayPrototypeForEach([\r\n  'getCipher',\r\n  'getSharedSigalgs',\r\n  'getEphemeralKeyInfo',\r\n  'getFinished',\r\n  'getPeerFinished',\r\n  'getProtocol',\r\n  'getSession',\r\n  'getTLSTicket',\r\n  'isSessionReused',\r\n  'enableTrace',\r\n], (method) => {\r\n  TLSSocket.prototype[method] = makeSocketMethodProxy(method);\r\n});\r\n\r\n// TODO: support anonymous (nocert)\r\n\r\n\r\nfunction onServerSocketSecure() {\r\n  if (this._requestCert) {\r\n    const verifyError = this._handle.verifyError();\r\n    if (verifyError) {\r\n      this.authorizationError = verifyError.code;\r\n\r\n      if (this._rejectUnauthorized)\r\n        this.destroy();\r\n    } else {\r\n      this.authorized = true;\r\n    }\r\n  }\r\n\r\n  if (!this.destroyed && this._releaseControl()) {\r\n    debug('server emit secureConnection');\r\n    this.secureConnecting = false;\r\n    this._tlsOptions.server.emit('secureConnection', this);\r\n  }\r\n}\r\n\r\nfunction onSocketTLSError(err) {\r\n  if (!this._controlReleased && !this[kErrorEmitted]) {\r\n    this[kErrorEmitted] = true;\r\n    debug('server emit tlsClientError:', err);\r\n    this._tlsOptions.server.emit('tlsClientError', err, this);\r\n  }\r\n}\r\n\r\nfunction onSocketKeylog(line) {\r\n  this._tlsOptions.server.emit('keylog', line, this);\r\n}\r\n\r\nfunction onSocketClose(err) {\r\n  // Closed because of error - no need to emit it twice\r\n  if (err)\r\n    return;\r\n\r\n  // Emit ECONNRESET\r\n  if (!this._controlReleased && !this[kErrorEmitted]) {\r\n    this[kErrorEmitted] = true;\r\n    const connReset = new ConnResetException('socket hang up');\r\n    this._tlsOptions.server.emit('tlsClientError', connReset, this);\r\n  }\r\n}\r\n\r\nfunction tlsConnectionListener(rawSocket) {\r\n  debug('net.Server.on(connection): new TLSSocket');\r\n  const socket = new TLSSocket(rawSocket, {\r\n    secureContext: this._sharedCreds,\r\n    isServer: true,\r\n    server: this,\r\n    requestCert: this.requestCert,\r\n    rejectUnauthorized: this.rejectUnauthorized,\r\n    handshakeTimeout: this[kHandshakeTimeout],\r\n    ALPNProtocols: this.ALPNProtocols,\r\n    ALPNCallback: this.ALPNCallback,\r\n    SNICallback: this[kSNICallback] || SNICallback,\r\n    enableTrace: this[kEnableTrace],\r\n    pauseOnConnect: this.pauseOnConnect,\r\n    pskCallback: this[kPskCallback],\r\n    pskIdentityHint: this[kPskIdentityHint],\r\n  });\r\n\r\n  socket.on('secure', onServerSocketSecure);\r\n\r\n  if (this.listenerCount('keylog') > 0)\r\n    socket.on('keylog', onSocketKeylog);\r\n\r\n  socket[kErrorEmitted] = false;\r\n  socket.on('close', onSocketClose);\r\n  socket.on('_tlsError', onSocketTLSError);\r\n}\r\n\r\n// AUTHENTICATION MODES\r\n//\r\n// There are several levels of authentication that TLS/SSL supports.\r\n// Read more about this in \"man SSL_set_verify\".\r\n//\r\n// 1. The server sends a certificate to the client but does not request a\r\n// cert from the client. This is common for most HTTPS servers. The browser\r\n// can verify the identity of the server, but the server does not know who\r\n// the client is. Authenticating the client is usually done over HTTP using\r\n// login boxes and cookies and stuff.\r\n//\r\n// 2. The server sends a cert to the client and requests that the client\r\n// also send it a cert. The client knows who the server is and the server is\r\n// requesting the client also identify themselves. There are several\r\n// outcomes:\r\n//\r\n//   A) verifyError returns null meaning the client's certificate is signed\r\n//   by one of the server's CAs. The server now knows the client's identity\r\n//   and the client is authorized.\r\n//\r\n//   B) For some reason the client's certificate is not acceptable -\r\n//   verifyError returns a string indicating the problem. The server can\r\n//   either (i) reject the client or (ii) allow the client to connect as an\r\n//   unauthorized connection.\r\n//\r\n// The mode is controlled by two boolean variables.\r\n//\r\n// requestCert\r\n//   If true the server requests a certificate from client connections. For\r\n//   the common HTTPS case, users will want this to be false, which is what\r\n//   it defaults to.\r\n//\r\n// rejectUnauthorized\r\n//   If true clients whose certificates are invalid for any reason will not\r\n//   be allowed to make connections. If false, they will simply be marked as\r\n//   unauthorized but secure communication will continue. By default this is\r\n//   true.\r\n//\r\n//\r\n//\r\n// Options:\r\n// - requestCert. Send verify request. Default to false.\r\n// - rejectUnauthorized. Boolean, default to true.\r\n// - key. string.\r\n// - cert: string.\r\n// - clientCertEngine: string.\r\n// - ca: string or array of strings.\r\n// - sessionTimeout: integer.\r\n//\r\n// emit 'secureConnection'\r\n//   function (tlsSocket) { }\r\n//\r\n//   \"UNABLE_TO_GET_ISSUER_CERT\", \"UNABLE_TO_GET_CRL\",\r\n//   \"UNABLE_TO_DECRYPT_CERT_SIGNATURE\", \"UNABLE_TO_DECRYPT_CRL_SIGNATURE\",\r\n//   \"UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY\", \"CERT_SIGNATURE_FAILURE\",\r\n//   \"CRL_SIGNATURE_FAILURE\", \"CERT_NOT_YET_VALID\" \"CERT_HAS_EXPIRED\",\r\n//   \"CRL_NOT_YET_VALID\", \"CRL_HAS_EXPIRED\" \"ERROR_IN_CERT_NOT_BEFORE_FIELD\",\r\n//   \"ERROR_IN_CERT_NOT_AFTER_FIELD\", \"ERROR_IN_CRL_LAST_UPDATE_FIELD\",\r\n//   \"ERROR_IN_CRL_NEXT_UPDATE_FIELD\", \"OUT_OF_MEM\",\r\n//   \"DEPTH_ZERO_SELF_SIGNED_CERT\", \"SELF_SIGNED_CERT_IN_CHAIN\",\r\n//   \"UNABLE_TO_GET_ISSUER_CERT_LOCALLY\", \"UNABLE_TO_VERIFY_LEAF_SIGNATURE\",\r\n//   \"CERT_CHAIN_TOO_LONG\", \"CERT_REVOKED\" \"INVALID_CA\",\r\n//   \"PATH_LENGTH_EXCEEDED\", \"INVALID_PURPOSE\" \"CERT_UNTRUSTED\",\r\n//   \"CERT_REJECTED\"\r\n//\r\nfunction Server(options, listener) {\r\n  if (!(this instanceof Server))\r\n    return new Server(options, listener);\r\n\r\n  if (typeof options === 'function') {\r\n    listener = options;\r\n    options = kEmptyObject;\r\n  } else if (options == null || typeof options === 'object') {\r\n    options = options ?? kEmptyObject;\r\n  } else {\r\n    throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);\r\n  }\r\n\r\n  this._contexts = [];\r\n  this.requestCert = options.requestCert === true;\r\n  this.rejectUnauthorized = options.rejectUnauthorized !== false;\r\n\r\n  this.ALPNCallback = options.ALPNCallback;\r\n  if (this.ALPNCallback && options.ALPNProtocols) {\r\n    throw new ERR_TLS_ALPN_CALLBACK_WITH_PROTOCOLS();\r\n  }\r\n\r\n  if (options.sessionTimeout)\r\n    this.sessionTimeout = options.sessionTimeout;\r\n\r\n  if (options.ticketKeys)\r\n    this.ticketKeys = options.ticketKeys;\r\n\r\n  if (options.ALPNProtocols)\r\n    tls.convertALPNProtocols(options.ALPNProtocols, this);\r\n\r\n  this.setSecureContext(options);\r\n\r\n  this[kHandshakeTimeout] = options.handshakeTimeout || (120 * 1000);\r\n  this[kSNICallback] = options.SNICallback;\r\n  this[kPskCallback] = options.pskCallback;\r\n  this[kPskIdentityHint] = options.pskIdentityHint;\r\n\r\n  validateNumber(this[kHandshakeTimeout], 'options.handshakeTimeout');\r\n\r\n  if (this[kSNICallback]) {\r\n    validateFunction(this[kSNICallback], 'options.SNICallback');\r\n  }\r\n\r\n  if (this[kPskCallback]) {\r\n    validateFunction(this[kPskCallback], 'options.pskCallback');\r\n  }\r\n\r\n  if (this[kPskIdentityHint]) {\r\n    validateString(this[kPskIdentityHint], 'options.pskIdentityHint');\r\n  }\r\n\r\n  // constructor call\r\n  ReflectApply(net.Server, this, [options, tlsConnectionListener]);\r\n\r\n  if (listener) {\r\n    this.on('secureConnection', listener);\r\n  }\r\n\r\n  this[kEnableTrace] = options.enableTrace;\r\n}\r\n\r\nObjectSetPrototypeOf(Server.prototype, net.Server.prototype);\r\nObjectSetPrototypeOf(Server, net.Server);\r\nexports.Server = Server;\r\nexports.createServer = function createServer(options, listener) {\r\n  return new Server(options, listener);\r\n};\r\n\r\n\r\nServer.prototype.setSecureContext = function(options) {\r\n  validateObject(options, 'options');\r\n\r\n  if (options.pfx)\r\n    this.pfx = options.pfx;\r\n  else\r\n    this.pfx = undefined;\r\n\r\n  if (options.key)\r\n    this.key = options.key;\r\n  else\r\n    this.key = undefined;\r\n\r\n  if (options.passphrase)\r\n    this.passphrase = options.passphrase;\r\n  else\r\n    this.passphrase = undefined;\r\n\r\n  if (options.cert)\r\n    this.cert = options.cert;\r\n  else\r\n    this.cert = undefined;\r\n\r\n  if (options.clientCertEngine)\r\n    this.clientCertEngine = options.clientCertEngine;\r\n  else\r\n    this.clientCertEngine = undefined;\r\n\r\n  if (options.ca)\r\n    this.ca = options.ca;\r\n  else\r\n    this.ca = undefined;\r\n\r\n  if (options.minVersion)\r\n    this.minVersion = options.minVersion;\r\n  else\r\n    this.minVersion = undefined;\r\n\r\n  if (options.maxVersion)\r\n    this.maxVersion = options.maxVersion;\r\n  else\r\n    this.maxVersion = undefined;\r\n\r\n  if (options.secureProtocol)\r\n    this.secureProtocol = options.secureProtocol;\r\n  else\r\n    this.secureProtocol = undefined;\r\n\r\n  if (options.crl)\r\n    this.crl = options.crl;\r\n  else\r\n    this.crl = undefined;\r\n\r\n  this.sigalgs = options.sigalgs;\r\n\r\n  if (options.ciphers)\r\n    this.ciphers = options.ciphers;\r\n  else\r\n    this.ciphers = undefined;\r\n\r\n  this.ecdhCurve = options.ecdhCurve;\r\n\r\n  if (options.dhparam)\r\n    this.dhparam = options.dhparam;\r\n  else\r\n    this.dhparam = undefined;\r\n\r\n  if (options.honorCipherOrder !== undefined)\r\n    this.honorCipherOrder = !!options.honorCipherOrder;\r\n  else\r\n    this.honorCipherOrder = true;\r\n\r\n  const secureOptions = options.secureOptions || 0;\r\n\r\n  if (secureOptions)\r\n    this.secureOptions = secureOptions;\r\n  else\r\n    this.secureOptions = undefined;\r\n\r\n  if (options.sessionIdContext) {\r\n    this.sessionIdContext = options.sessionIdContext;\r\n  } else {\r\n    this.sessionIdContext = StringPrototypeSlice(\r\n      crypto.createHash('sha1')\r\n        .update(ArrayPrototypeJoin(process.argv, ' '))\r\n        .digest('hex'), 0, 32);\r\n  }\r\n\r\n  if (options.sessionTimeout)\r\n    this.sessionTimeout = options.sessionTimeout;\r\n\r\n  if (options.ticketKeys)\r\n    this.ticketKeys = options.ticketKeys;\r\n\r\n  this.privateKeyIdentifier = options.privateKeyIdentifier;\r\n  this.privateKeyEngine = options.privateKeyEngine;\r\n\r\n  this._sharedCreds = tls.createSecureContext({\r\n    pfx: this.pfx,\r\n    key: this.key,\r\n    passphrase: this.passphrase,\r\n    cert: this.cert,\r\n    clientCertEngine: this.clientCertEngine,\r\n    ca: this.ca,\r\n    ciphers: this.ciphers,\r\n    sigalgs: this.sigalgs,\r\n    ecdhCurve: this.ecdhCurve,\r\n    dhparam: this.dhparam,\r\n    minVersion: this.minVersion,\r\n    maxVersion: this.maxVersion,\r\n    secureProtocol: this.secureProtocol,\r\n    secureOptions: this.secureOptions,\r\n    honorCipherOrder: this.honorCipherOrder,\r\n    crl: this.crl,\r\n    sessionIdContext: this.sessionIdContext,\r\n    ticketKeys: this.ticketKeys,\r\n    sessionTimeout: this.sessionTimeout,\r\n    privateKeyIdentifier: this.privateKeyIdentifier,\r\n    privateKeyEngine: this.privateKeyEngine,\r\n  });\r\n};\r\n\r\n\r\nServer.prototype._getServerData = function() {\r\n  return {\r\n    ticketKeys: this.getTicketKeys().toString('hex'),\r\n  };\r\n};\r\n\r\n\r\nServer.prototype._setServerData = function(data) {\r\n  this.setTicketKeys(Buffer.from(data.ticketKeys, 'hex'));\r\n};\r\n\r\n\r\nServer.prototype.getTicketKeys = function getTicketKeys() {\r\n  return this._sharedCreds.context.getTicketKeys();\r\n};\r\n\r\n\r\nServer.prototype.setTicketKeys = function setTicketKeys(keys) {\r\n  validateBuffer(keys);\r\n  assert(keys.byteLength === 48,\r\n         'Session ticket keys must be a 48-byte buffer');\r\n  this._sharedCreds.context.setTicketKeys(keys);\r\n};\r\n\r\n\r\nServer.prototype.setOptions = deprecate(function(options) {\r\n  this.requestCert = options.requestCert === true;\r\n  this.rejectUnauthorized = options.rejectUnauthorized !== false;\r\n\r\n  if (options.pfx) this.pfx = options.pfx;\r\n  if (options.key) this.key = options.key;\r\n  if (options.passphrase) this.passphrase = options.passphrase;\r\n  if (options.cert) this.cert = options.cert;\r\n  if (options.clientCertEngine)\r\n    this.clientCertEngine = options.clientCertEngine;\r\n  if (options.ca) this.ca = options.ca;\r\n  if (options.minVersion) this.minVersion = options.minVersion;\r\n  if (options.maxVersion) this.maxVersion = options.maxVersion;\r\n  if (options.secureProtocol) this.secureProtocol = options.secureProtocol;\r\n  if (options.crl) this.crl = options.crl;\r\n  if (options.ciphers) this.ciphers = options.ciphers;\r\n  if (options.ecdhCurve !== undefined)\r\n    this.ecdhCurve = options.ecdhCurve;\r\n  if (options.dhparam) this.dhparam = options.dhparam;\r\n  if (options.sessionTimeout) this.sessionTimeout = options.sessionTimeout;\r\n  if (options.ticketKeys) this.ticketKeys = options.ticketKeys;\r\n  const secureOptions = options.secureOptions || 0;\r\n  if (options.honorCipherOrder !== undefined)\r\n    this.honorCipherOrder = !!options.honorCipherOrder;\r\n  else\r\n    this.honorCipherOrder = true;\r\n  if (secureOptions) this.secureOptions = secureOptions;\r\n  if (options.ALPNProtocols)\r\n    tls.convertALPNProtocols(options.ALPNProtocols, this);\r\n  if (options.sessionIdContext) {\r\n    this.sessionIdContext = options.sessionIdContext;\r\n  } else {\r\n    this.sessionIdContext = StringPrototypeSlice(\r\n      crypto.createHash('sha1')\r\n        .update(ArrayPrototypeJoin(process.argv, ' '))\r\n        .digest('hex'), 0, 32);\r\n  }\r\n  if (options.pskCallback) this[kPskCallback] = options.pskCallback;\r\n  if (options.pskIdentityHint) this[kPskIdentityHint] = options.pskIdentityHint;\r\n  if (options.sigalgs) this.sigalgs = options.sigalgs;\r\n  if (options.privateKeyIdentifier !== undefined)\r\n    this.privateKeyIdentifier = options.privateKeyIdentifier;\r\n  if (options.privateKeyEngine !== undefined)\r\n    this.privateKeyEngine = options.privateKeyEngine;\r\n}, 'Server.prototype.setOptions() is deprecated', 'DEP0122');\r\n\r\n// SNI Contexts High-Level API\r\nServer.prototype.addContext = function(servername, context) {\r\n  if (!servername) {\r\n    throw new ERR_TLS_REQUIRED_SERVER_NAME();\r\n  }\r\n\r\n  const re = new RegExp('^' + StringPrototypeReplaceAll(\r\n    RegExpPrototypeSymbolReplace(/([.^$+?\\-\\\\[\\]{}])/g, servername, '\\\\$1'),\r\n    '*', '[^.]*',\r\n  ) + '$');\r\n\r\n  const secureContext =\r\n    context instanceof common.SecureContext ? context : tls.createSecureContext(context);\r\n  ArrayPrototypePush(this._contexts, [re, secureContext.context]);\r\n};\r\n\r\nServer.prototype[EE.captureRejectionSymbol] = function(\r\n  err, event, sock) {\r\n\r\n  switch (event) {\r\n    case 'secureConnection':\r\n      sock.destroy(err);\r\n      break;\r\n    default:\r\n      ReflectApply(net.Server.prototype[SymbolFor('nodejs.rejection')], this,\r\n                   [err, event, sock]);\r\n  }\r\n};\r\n\r\nfunction SNICallback(servername, callback) {\r\n  const contexts = this.server._contexts;\r\n\r\n  for (let i = contexts.length - 1; i >= 0; --i) {\r\n    const elem = contexts[i];\r\n    if (RegExpPrototypeExec(elem[0], servername) !== null) {\r\n      callback(null, elem[1]);\r\n      return;\r\n    }\r\n  }\r\n\r\n  callback(null, undefined);\r\n}\r\n\r\n\r\n// Target API:\r\n//\r\n//  let s = tls.connect({port: 8000, host: \"google.com\"}, function() {\r\n//    if (!s.authorized) {\r\n//      s.destroy();\r\n//      return;\r\n//    }\r\n//\r\n//    // s.socket;\r\n//\r\n//    s.end(\"hello world\\n\");\r\n//  });\r\n//\r\n//\r\nfunction normalizeConnectArgs(listArgs) {\r\n  const args = net._normalizeArgs(listArgs);\r\n  const options = args[0];\r\n  const cb = args[1];\r\n\r\n  // If args[0] was options, then normalize dealt with it.\r\n  // If args[0] is port, or args[0], args[1] is host, port, we need to\r\n  // find the options and merge them in, normalize's options has only\r\n  // the host/port/path args that it knows about, not the tls options.\r\n  // This means that options.host overrides a host arg.\r\n  if (listArgs[1] !== null && typeof listArgs[1] === 'object') {\r\n    ObjectAssign(options, listArgs[1]);\r\n  } else if (listArgs[2] !== null && typeof listArgs[2] === 'object') {\r\n    ObjectAssign(options, listArgs[2]);\r\n  }\r\n\r\n  return cb ? [options, cb] : [options];\r\n}\r\n\r\nfunction onConnectSecure() {\r\n  const options = this[kConnectOptions];\r\n\r\n  // Check the size of DHE parameter above minimum requirement\r\n  // specified in options.\r\n  const ekeyinfo = this.getEphemeralKeyInfo();\r\n  if (ekeyinfo.type === 'DH' && ekeyinfo.size < options.minDHSize) {\r\n    const err = new ERR_TLS_DH_PARAM_SIZE(ekeyinfo.size);\r\n    debug('client emit:', err);\r\n    this.emit('error', err);\r\n    this.destroy();\r\n    return;\r\n  }\r\n\r\n  let verifyError = this._handle.verifyError();\r\n\r\n  // Verify that server's identity matches it's certificate's names\r\n  // Unless server has resumed our existing session\r\n  if (!verifyError && !this.isSessionReused()) {\r\n    const hostname = options.servername ||\r\n                   options.host ||\r\n                   (options.socket && options.socket._host) ||\r\n                   'localhost';\r\n    const cert = this.getPeerCertificate(true);\r\n    verifyError = options.checkServerIdentity(hostname, cert);\r\n  }\r\n\r\n  if (verifyError) {\r\n    this.authorized = false;\r\n    this.authorizationError = verifyError.code || verifyError.message;\r\n\r\n    // rejectUnauthorized property can be explicitly defined as `undefined`\r\n    // causing the assignment to default value (`true`) fail. Before assigning\r\n    // it to the tlssock connection options, explicitly check if it is false\r\n    // and update rejectUnauthorized property. The property gets used by\r\n    // TLSSocket connection handler to allow or reject connection if\r\n    // unauthorized.\r\n    // This check is potentially redundant, however it is better to keep it\r\n    // in case the option object gets modified somewhere.\r\n    if (options.rejectUnauthorized !== false) {\r\n      this.destroy(verifyError);\r\n      return;\r\n    }\r\n    debug('client emit secureConnect. rejectUnauthorized: %s, ' +\r\n          'authorizationError: %s', options.rejectUnauthorized,\r\n          this.authorizationError);\r\n  } else {\r\n    this.authorized = true;\r\n    debug('client emit secureConnect. authorized:', this.authorized);\r\n  }\r\n  this.secureConnecting = false;\r\n  this.emit('secureConnect');\r\n\r\n  this[kIsVerified] = true;\r\n  const session = this[kPendingSession];\r\n  this[kPendingSession] = null;\r\n  if (session)\r\n    this.emit('session', session);\r\n\r\n  this.removeListener('end', onConnectEnd);\r\n}\r\n\r\nfunction onConnectEnd() {\r\n  // NOTE: This logic is shared with _http_client.js\r\n  if (!this._hadError) {\r\n    const options = this[kConnectOptions];\r\n    this._hadError = true;\r\n    const error = new ConnResetException('Client network socket disconnected ' +\r\n                                         'before secure TLS connection was ' +\r\n                                         'established');\r\n    error.path = options.path;\r\n    error.host = options.host;\r\n    error.port = options.port;\r\n    error.localAddress = options.localAddress;\r\n    this.destroy(error);\r\n  }\r\n}\r\n\r\n// Arguments: [port,] [host,] [options,] [cb]\r\nexports.connect = function connect(...args) {\r\n  args = normalizeConnectArgs(args);\r\n  let options = args[0];\r\n  const cb = args[1];\r\n  const allowUnauthorized = getAllowUnauthorized();\r\n\r\n  options = {\r\n    rejectUnauthorized: !allowUnauthorized,\r\n    ciphers: tls.DEFAULT_CIPHERS,\r\n    checkServerIdentity: tls.checkServerIdentity,\r\n    minDHSize: 1024,\r\n    ...options,\r\n  };\r\n\r\n  if (!options.keepAlive)\r\n    options.singleUse = true;\r\n\r\n  validateFunction(options.checkServerIdentity, 'options.checkServerIdentity');\r\n  validateNumber(options.minDHSize, 'options.minDHSize', 1);\r\n\r\n  const context = options.secureContext || tls.createSecureContext(options);\r\n\r\n  const tlssock = new TLSSocket(options.socket, {\r\n    allowHalfOpen: options.allowHalfOpen,\r\n    pipe: !!options.path,\r\n    secureContext: context,\r\n    isServer: false,\r\n    requestCert: true,\r\n    rejectUnauthorized: options.rejectUnauthorized !== false,\r\n    session: options.session,\r\n    ALPNProtocols: options.ALPNProtocols,\r\n    requestOCSP: options.requestOCSP,\r\n    enableTrace: options.enableTrace,\r\n    pskCallback: options.pskCallback,\r\n    highWaterMark: options.highWaterMark,\r\n    onread: options.onread,\r\n    signal: options.signal,\r\n  });\r\n\r\n  // rejectUnauthorized property can be explicitly defined as `undefined`\r\n  // causing the assignment to default value (`true`) fail. Before assigning\r\n  // it to the tlssock connection options, explicitly check if it is false\r\n  // and update rejectUnauthorized property. The property gets used by TLSSocket\r\n  // connection handler to allow or reject connection if unauthorized\r\n  options.rejectUnauthorized = options.rejectUnauthorized !== false;\r\n\r\n  tlssock[kConnectOptions] = options;\r\n\r\n  if (cb)\r\n    tlssock.once('secureConnect', cb);\r\n\r\n  if (!options.socket) {\r\n    // If user provided the socket, it's their responsibility to manage its\r\n    // connectivity. If we created one internally, we connect it.\r\n    if (options.timeout) {\r\n      tlssock.setTimeout(options.timeout);\r\n    }\r\n\r\n    tlssock.connect(options, tlssock._start);\r\n  }\r\n\r\n  tlssock._releaseControl();\r\n\r\n  if (options.session)\r\n    tlssock.setSession(options.session);\r\n\r\n  if (options.servername) {\r\n    if (!ipServernameWarned && net.isIP(options.servername)) {\r\n      process.emitWarning(\r\n        'Setting the TLS ServerName to an IP address is not permitted by ' +\r\n        'RFC 6066. This will be ignored in a future version.',\r\n        'DeprecationWarning',\r\n        'DEP0123',\r\n      );\r\n      ipServernameWarned = true;\r\n    }\r\n    tlssock.setServername(options.servername);\r\n  }\r\n\r\n  if (options.socket)\r\n    tlssock._start();\r\n\r\n  tlssock.on('secure', onConnectSecure);\r\n  tlssock.prependListener('end', onConnectEnd);\r\n\r\n  return tlssock;\r\n};\r\n"
  },
  "121": {
    "metadata": {
      "scriptId": "121",
      "url": "node:crypto",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 375,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "19c6c2de44ac8138d727491af8e3a66e6ab40e8f01bdaa50f2904023aa3db5a9",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 8796,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:crypto"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// Note: In 0.8 and before, crypto functions all defaulted to using\r\n// binary-encoded strings rather than buffers.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n} = primordials;\r\n\r\nconst {\r\n  assertCrypto,\r\n  deprecate,\r\n} = require('internal/util');\r\nassertCrypto();\r\n\r\nconst {\r\n  ERR_CRYPTO_FIPS_FORCED,\r\n  ERR_WORKER_UNSUPPORTED_OPERATION,\r\n} = require('internal/errors').codes;\r\nconst constants = internalBinding('constants').crypto;\r\nconst { getOptionValue } = require('internal/options');\r\nconst {\r\n  getFipsCrypto,\r\n  setFipsCrypto,\r\n  timingSafeEqual,\r\n} = internalBinding('crypto');\r\nconst {\r\n  checkPrime,\r\n  checkPrimeSync,\r\n  generatePrime,\r\n  generatePrimeSync,\r\n  randomBytes,\r\n  randomFill,\r\n  randomFillSync,\r\n  randomInt,\r\n  randomUUID,\r\n} = require('internal/crypto/random');\r\nconst {\r\n  pbkdf2,\r\n  pbkdf2Sync,\r\n} = require('internal/crypto/pbkdf2');\r\nconst {\r\n  scrypt,\r\n  scryptSync,\r\n} = require('internal/crypto/scrypt');\r\nconst {\r\n  hkdf,\r\n  hkdfSync,\r\n} = require('internal/crypto/hkdf');\r\nconst {\r\n  generateKeyPair,\r\n  generateKeyPairSync,\r\n  generateKey,\r\n  generateKeySync,\r\n} = require('internal/crypto/keygen');\r\nconst {\r\n  createSecretKey,\r\n  createPublicKey,\r\n  createPrivateKey,\r\n  KeyObject,\r\n} = require('internal/crypto/keys');\r\nconst {\r\n  DiffieHellman,\r\n  DiffieHellmanGroup,\r\n  ECDH,\r\n  diffieHellman,\r\n} = require('internal/crypto/diffiehellman');\r\nconst {\r\n  Cipher,\r\n  Cipheriv,\r\n  Decipher,\r\n  Decipheriv,\r\n  privateDecrypt,\r\n  privateEncrypt,\r\n  publicDecrypt,\r\n  publicEncrypt,\r\n  getCipherInfo,\r\n} = require('internal/crypto/cipher');\r\nconst {\r\n  Sign,\r\n  signOneShot,\r\n  Verify,\r\n  verifyOneShot,\r\n} = require('internal/crypto/sig');\r\nconst {\r\n  Hash,\r\n  Hmac,\r\n  hash,\r\n} = require('internal/crypto/hash');\r\nconst {\r\n  X509Certificate,\r\n} = require('internal/crypto/x509');\r\nconst {\r\n  getCiphers,\r\n  getCurves,\r\n  getHashes,\r\n  setEngine,\r\n  secureHeapUsed,\r\n} = require('internal/crypto/util');\r\nconst Certificate = require('internal/crypto/certificate');\r\n\r\nlet webcrypto;\r\nfunction lazyWebCrypto() {\r\n  webcrypto ??= require('internal/crypto/webcrypto');\r\n  return webcrypto;\r\n}\r\n\r\nlet ownsProcessState;\r\nfunction lazyOwnsProcessState() {\r\n  ownsProcessState ??= require('internal/worker').ownsProcessState;\r\n  return ownsProcessState;\r\n}\r\n\r\n// These helper functions are needed because the constructors can\r\n// use new, in which case V8 cannot inline the recursive constructor call\r\nfunction createHash(algorithm, options) {\r\n  return new Hash(algorithm, options);\r\n}\r\n\r\nfunction createCipheriv(cipher, key, iv, options) {\r\n  return new Cipheriv(cipher, key, iv, options);\r\n}\r\n\r\nfunction createDecipheriv(cipher, key, iv, options) {\r\n  return new Decipheriv(cipher, key, iv, options);\r\n}\r\n\r\nfunction createDiffieHellman(sizeOrKey, keyEncoding, generator, genEncoding) {\r\n  return new DiffieHellman(sizeOrKey, keyEncoding, generator, genEncoding);\r\n}\r\n\r\nfunction createDiffieHellmanGroup(name) {\r\n  return new DiffieHellmanGroup(name);\r\n}\r\n\r\nfunction createECDH(curve) {\r\n  return new ECDH(curve);\r\n}\r\n\r\nfunction createHmac(hmac, key, options) {\r\n  return new Hmac(hmac, key, options);\r\n}\r\n\r\nfunction createSign(algorithm, options) {\r\n  return new Sign(algorithm, options);\r\n}\r\n\r\nfunction createVerify(algorithm, options) {\r\n  return new Verify(algorithm, options);\r\n}\r\n\r\nmodule.exports = {\r\n  // Methods\r\n  checkPrime,\r\n  checkPrimeSync,\r\n  createCipheriv,\r\n  createDecipheriv,\r\n  createDiffieHellman,\r\n  createDiffieHellmanGroup,\r\n  createECDH,\r\n  createHash,\r\n  createHmac,\r\n  createPrivateKey,\r\n  createPublicKey,\r\n  createSecretKey,\r\n  createSign,\r\n  createVerify,\r\n  diffieHellman,\r\n  generatePrime,\r\n  generatePrimeSync,\r\n  getCiphers,\r\n  getCipherInfo,\r\n  getCurves,\r\n  getDiffieHellman: createDiffieHellmanGroup,\r\n  getHashes,\r\n  hkdf,\r\n  hkdfSync,\r\n  pbkdf2,\r\n  pbkdf2Sync,\r\n  generateKeyPair,\r\n  generateKeyPairSync,\r\n  generateKey,\r\n  generateKeySync,\r\n  privateDecrypt,\r\n  privateEncrypt,\r\n  publicDecrypt,\r\n  publicEncrypt,\r\n  randomBytes,\r\n  randomFill,\r\n  randomFillSync,\r\n  randomInt,\r\n  randomUUID,\r\n  scrypt,\r\n  scryptSync,\r\n  sign: signOneShot,\r\n  setEngine,\r\n  timingSafeEqual,\r\n  getFips,\r\n  setFips,\r\n  verify: verifyOneShot,\r\n  hash,\r\n\r\n  // Classes\r\n  Certificate,\r\n  Cipher,\r\n  Cipheriv,\r\n  Decipher,\r\n  Decipheriv,\r\n  DiffieHellman,\r\n  DiffieHellmanGroup,\r\n  ECDH,\r\n  Hash: deprecate(Hash, 'crypto.Hash constructor is deprecated.', 'DEP0179'),\r\n  Hmac: deprecate(Hmac, 'crypto.Hmac constructor is deprecated.', 'DEP0181'),\r\n  KeyObject,\r\n  Sign,\r\n  Verify,\r\n  X509Certificate,\r\n  secureHeapUsed,\r\n};\r\n\r\nfunction getFips() {\r\n  return getOptionValue('--force-fips') ? 1 : getFipsCrypto();\r\n}\r\n\r\nfunction setFips(val) {\r\n  if (getOptionValue('--force-fips')) {\r\n    if (val) return;\r\n    throw new ERR_CRYPTO_FIPS_FORCED();\r\n  } else {\r\n    if (!lazyOwnsProcessState()) {\r\n      throw new ERR_WORKER_UNSUPPORTED_OPERATION('Calling crypto.setFips()');\r\n    }\r\n    setFipsCrypto(val);\r\n  }\r\n}\r\n\r\nfunction getRandomValues(array) {\r\n  return lazyWebCrypto().crypto.getRandomValues(array);\r\n}\r\n\r\nObjectDefineProperty(constants, 'defaultCipherList', {\r\n  __proto__: null,\r\n  get() {\r\n    const value = getOptionValue('--tls-cipher-list');\r\n    ObjectDefineProperty(this, 'defaultCipherList', {\r\n      __proto__: null,\r\n      writable: true,\r\n      configurable: true,\r\n      enumerable: true,\r\n      value,\r\n    });\r\n    return value;\r\n  },\r\n  set(val) {\r\n    ObjectDefineProperty(this, 'defaultCipherList', {\r\n      __proto__: null,\r\n      writable: true,\r\n      configurable: true,\r\n      enumerable: true,\r\n      value: val,\r\n    });\r\n  },\r\n  configurable: true,\r\n  enumerable: true,\r\n});\r\n\r\nfunction getRandomBytesAlias(key) {\r\n  return {\r\n    enumerable: false,\r\n    configurable: true,\r\n    get() {\r\n      let value;\r\n      if (getOptionValue('--pending-deprecation')) {\r\n        value = deprecate(\r\n          randomBytes,\r\n          `crypto.${key} is deprecated.`,\r\n          'DEP0115');\r\n      } else {\r\n        value = randomBytes;\r\n      }\r\n      ObjectDefineProperty(\r\n        this,\r\n        key,\r\n        {\r\n          __proto__: null,\r\n          enumerable: false,\r\n          configurable: true,\r\n          writable: true,\r\n          value: value,\r\n        },\r\n      );\r\n      return value;\r\n    },\r\n    set(value) {\r\n      ObjectDefineProperty(\r\n        this,\r\n        key,\r\n        {\r\n          __proto__: null,\r\n          enumerable: true,\r\n          configurable: true,\r\n          writable: true,\r\n          value,\r\n        },\r\n      );\r\n    },\r\n  };\r\n}\r\n\r\nObjectDefineProperties(module.exports, {\r\n  // crypto.fips is deprecated. DEP0093. Use crypto.getFips()/crypto.setFips()\r\n  fips: {\r\n    __proto__: null,\r\n    get: getFips,\r\n    set: setFips,\r\n  },\r\n  constants: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    value: constants,\r\n  },\r\n\r\n  webcrypto: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    get() { return lazyWebCrypto().crypto; },\r\n    set: undefined,\r\n  },\r\n\r\n  subtle: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    get() { return lazyWebCrypto().crypto.subtle; },\r\n    set: undefined,\r\n  },\r\n\r\n  getRandomValues: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    get: () => getRandomValues,\r\n    set: undefined,\r\n  },\r\n\r\n  // Aliases for randomBytes are deprecated.\r\n  // The ecosystem needs those to exist for backwards compatibility.\r\n  prng: getRandomBytesAlias('prng'),\r\n  pseudoRandomBytes: getRandomBytesAlias('pseudoRandomBytes'),\r\n  rng: getRandomBytesAlias('rng'),\r\n});\r\n"
  },
  "122": {
    "metadata": {
      "scriptId": "122",
      "url": "node:internal/crypto/random",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 613,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "55415cd473ffabcd97ee74f3d82f7b7f9ad0ad15731f19409d60b8356c529d14",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 16859,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/random"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n  ArrayBufferPrototypeGetByteLength,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeShift,\r\n  ArrayPrototypeSplice,\r\n  BigInt,\r\n  BigIntPrototypeToString,\r\n  DataView,\r\n  DataViewPrototypeGetUint8,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeCall,\r\n  MathMin,\r\n  NumberIsNaN,\r\n  NumberIsSafeInteger,\r\n  NumberPrototypeToString,\r\n  StringFromCharCodeApply,\r\n  StringPrototypePadStart,\r\n} = primordials;\r\n\r\nconst {\r\n  RandomBytesJob,\r\n  RandomPrimeJob,\r\n  CheckPrimeJob,\r\n  kCryptoJobAsync,\r\n  kCryptoJobSync,\r\n  secureBuffer,\r\n} = internalBinding('crypto');\r\n\r\nconst {\r\n  kEmptyObject,\r\n  lazyDOMException,\r\n} = require('internal/util');\r\n\r\nconst { Buffer, kMaxLength } = require('buffer');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_OPERATION_FAILED,\r\n    ERR_OUT_OF_RANGE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateNumber,\r\n  validateBoolean,\r\n  validateFunction,\r\n  validateInt32,\r\n  validateObject,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  isArrayBufferView,\r\n  isAnyArrayBuffer,\r\n  isTypedArray,\r\n  isFloat32Array,\r\n  isFloat64Array,\r\n} = require('internal/util/types');\r\n\r\nconst { FastBuffer } = require('internal/buffer');\r\n\r\nconst kMaxInt32 = 2 ** 31 - 1;\r\nconst kMaxPossibleLength = MathMin(kMaxLength, kMaxInt32);\r\n\r\nfunction assertOffset(offset, elementSize, length) {\r\n  validateNumber(offset, 'offset');\r\n  offset *= elementSize;\r\n\r\n  const maxLength = MathMin(length, kMaxPossibleLength);\r\n  if (NumberIsNaN(offset) || offset > maxLength || offset < 0) {\r\n    throw new ERR_OUT_OF_RANGE('offset', `>= 0 && <= ${maxLength}`, offset);\r\n  }\r\n\r\n  return offset >>> 0;  // Convert to uint32.\r\n}\r\n\r\nfunction assertSize(size, elementSize, offset, length) {\r\n  validateNumber(size, 'size');\r\n  size *= elementSize;\r\n\r\n  if (NumberIsNaN(size) || size > kMaxPossibleLength || size < 0) {\r\n    throw new ERR_OUT_OF_RANGE('size',\r\n                               `>= 0 && <= ${kMaxPossibleLength}`, size);\r\n  }\r\n\r\n  if (size + offset > length) {\r\n    throw new ERR_OUT_OF_RANGE('size + offset', `<= ${length}`, size + offset);\r\n  }\r\n\r\n  return size >>> 0;  // Convert to uint32.\r\n}\r\n\r\nfunction randomBytes(size, callback) {\r\n  size = assertSize(size, 1, 0, Infinity);\r\n  if (callback !== undefined) {\r\n    validateFunction(callback, 'callback');\r\n  }\r\n\r\n  const buf = new FastBuffer(size);\r\n\r\n  if (callback === undefined) {\r\n    randomFillSync(buf.buffer, 0, size);\r\n    return buf;\r\n  }\r\n\r\n  // Keep the callback as a regular function so this is propagated.\r\n  randomFill(buf.buffer, 0, size, function(error) {\r\n    if (error) return FunctionPrototypeCall(callback, this, error);\r\n    FunctionPrototypeCall(callback, this, null, buf);\r\n  });\r\n}\r\n\r\nfunction randomFillSync(buf, offset = 0, size) {\r\n  if (!isAnyArrayBuffer(buf) && !isArrayBufferView(buf)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'buf',\r\n      ['ArrayBuffer', 'ArrayBufferView'],\r\n      buf);\r\n  }\r\n\r\n  const elementSize = buf.BYTES_PER_ELEMENT || 1;\r\n\r\n  offset = assertOffset(offset, elementSize, buf.byteLength);\r\n\r\n  if (size === undefined) {\r\n    size = buf.byteLength - offset;\r\n  } else {\r\n    size = assertSize(size, elementSize, offset, buf.byteLength);\r\n  }\r\n\r\n  if (size === 0)\r\n    return buf;\r\n\r\n  const job = new RandomBytesJob(\r\n    kCryptoJobSync,\r\n    buf,\r\n    offset,\r\n    size);\r\n\r\n  const err = job.run()[0];\r\n  if (err)\r\n    throw err;\r\n\r\n  return buf;\r\n}\r\n\r\nfunction randomFill(buf, offset, size, callback) {\r\n  if (!isAnyArrayBuffer(buf) && !isArrayBufferView(buf)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'buf',\r\n      ['ArrayBuffer', 'ArrayBufferView'],\r\n      buf);\r\n  }\r\n\r\n  const elementSize = buf.BYTES_PER_ELEMENT || 1;\r\n\r\n  if (typeof offset === 'function') {\r\n    callback = offset;\r\n    offset = 0;\r\n    // Size is a length here, assertSize() call turns it into a number of bytes\r\n    size = buf.length;\r\n  } else if (typeof size === 'function') {\r\n    callback = size;\r\n    size = buf.length - offset;\r\n  } else {\r\n    validateFunction(callback, 'callback');\r\n  }\r\n\r\n  offset = assertOffset(offset, elementSize, buf.byteLength);\r\n\r\n  if (size === undefined) {\r\n    size = buf.byteLength - offset;\r\n  } else {\r\n    size = assertSize(size, elementSize, offset, buf.byteLength);\r\n  }\r\n\r\n  if (size === 0) {\r\n    callback(null, buf);\r\n    return;\r\n  }\r\n\r\n  const job = new RandomBytesJob(\r\n    kCryptoJobAsync,\r\n    buf,\r\n    offset,\r\n    size);\r\n  job.ondone = FunctionPrototypeBind(onJobDone, job, buf, callback);\r\n  job.run();\r\n}\r\n\r\n// Largest integer we can read from a buffer.\r\n// e.g.: Buffer.from(\"ff\".repeat(6), \"hex\").readUIntBE(0, 6);\r\nconst RAND_MAX = 0xFFFF_FFFF_FFFF;\r\n\r\n// Cache random data to use in randomInt. The cache size must be evenly\r\n// divisible by 6 because each attempt to obtain a random int uses 6 bytes.\r\nconst randomCache = new FastBuffer(6 * 1024);\r\nlet randomCacheOffset = randomCache.length;\r\nlet asyncCacheFillInProgress = false;\r\nconst asyncCachePendingTasks = [];\r\n\r\n// Generates an integer in [min, max) range where min is inclusive and max is\r\n// exclusive.\r\nfunction randomInt(min, max, callback) {\r\n  // Detect optional min syntax\r\n  // randomInt(max)\r\n  // randomInt(max, callback)\r\n  const minNotSpecified = typeof max === 'undefined' ||\r\n    typeof max === 'function';\r\n\r\n  if (minNotSpecified) {\r\n    callback = max;\r\n    max = min;\r\n    min = 0;\r\n  }\r\n\r\n  const isSync = typeof callback === 'undefined';\r\n  if (!isSync) {\r\n    validateFunction(callback, 'callback');\r\n  }\r\n  if (!NumberIsSafeInteger(min)) {\r\n    throw new ERR_INVALID_ARG_TYPE('min', 'a safe integer', min);\r\n  }\r\n  if (!NumberIsSafeInteger(max)) {\r\n    throw new ERR_INVALID_ARG_TYPE('max', 'a safe integer', max);\r\n  }\r\n  if (max <= min) {\r\n    throw new ERR_OUT_OF_RANGE(\r\n      'max', `greater than the value of \"min\" (${min})`, max,\r\n    );\r\n  }\r\n\r\n  // First we generate a random int between [0..range)\r\n  const range = max - min;\r\n\r\n  if (!(range <= RAND_MAX)) {\r\n    throw new ERR_OUT_OF_RANGE(`max${minNotSpecified ? '' : ' - min'}`,\r\n                               `<= ${RAND_MAX}`, range);\r\n  }\r\n\r\n  // For (x % range) to produce an unbiased value greater than or equal to 0 and\r\n  // less than range, x must be drawn randomly from the set of integers greater\r\n  // than or equal to 0 and less than randLimit.\r\n  const randLimit = RAND_MAX - (RAND_MAX % range);\r\n\r\n  // If we don't have a callback, or if there is still data in the cache, we can\r\n  // do this synchronously, which is super fast.\r\n  while (isSync || (randomCacheOffset < randomCache.length)) {\r\n    if (randomCacheOffset === randomCache.length) {\r\n      // This might block the thread for a bit, but we are in sync mode.\r\n      randomFillSync(randomCache);\r\n      randomCacheOffset = 0;\r\n    }\r\n\r\n    const x = randomCache.readUIntBE(randomCacheOffset, 6);\r\n    randomCacheOffset += 6;\r\n\r\n    if (x < randLimit) {\r\n      const n = (x % range) + min;\r\n      if (isSync) return n;\r\n      process.nextTick(callback, undefined, n);\r\n      return;\r\n    }\r\n  }\r\n\r\n  // At this point, we are in async mode with no data in the cache. We cannot\r\n  // simply refill the cache, because another async call to randomInt might\r\n  // already be doing that. Instead, queue this call for when the cache has\r\n  // been refilled.\r\n  ArrayPrototypePush(asyncCachePendingTasks, { min, max, callback });\r\n  asyncRefillRandomIntCache();\r\n}\r\n\r\nfunction asyncRefillRandomIntCache() {\r\n  if (asyncCacheFillInProgress)\r\n    return;\r\n\r\n  asyncCacheFillInProgress = true;\r\n  randomFill(randomCache, (err) => {\r\n    asyncCacheFillInProgress = false;\r\n\r\n    const tasks = asyncCachePendingTasks;\r\n    const errorReceiver = err && ArrayPrototypeShift(tasks);\r\n    if (!err)\r\n      randomCacheOffset = 0;\r\n\r\n    // Restart all pending tasks. If an error occurred, we only notify a single\r\n    // callback (errorReceiver) about it. This way, every async call to\r\n    // randomInt has a chance of being successful, and it avoids complex\r\n    // exception handling here.\r\n    ArrayPrototypeForEach(ArrayPrototypeSplice(tasks, 0), (task) => {\r\n      randomInt(task.min, task.max, task.callback);\r\n    });\r\n\r\n    // This is the only call that might throw, and is therefore done at the end.\r\n    if (errorReceiver)\r\n      errorReceiver.callback(err);\r\n  });\r\n}\r\n\r\n\r\nfunction onJobDone(buf, callback, error) {\r\n  if (error) return FunctionPrototypeCall(callback, this, error);\r\n  FunctionPrototypeCall(callback, this, null, buf);\r\n}\r\n\r\n// Really just the Web Crypto API alternative\r\n// to require('crypto').randomFillSync() with an\r\n// additional limitation that the input buffer is\r\n// not allowed to exceed 65536 bytes, and can only\r\n// be an integer-type TypedArray.\r\nfunction getRandomValues(data) {\r\n  if (!isTypedArray(data) ||\r\n      isFloat32Array(data) ||\r\n      isFloat64Array(data)) {\r\n    // Ordinarily this would be an ERR_INVALID_ARG_TYPE. However,\r\n    // the Web Crypto API and web platform tests expect this to\r\n    // be a DOMException with type TypeMismatchError.\r\n    throw lazyDOMException(\r\n      'The data argument must be an integer-type TypedArray',\r\n      'TypeMismatchError');\r\n  }\r\n  if (data.byteLength > 65536) {\r\n    throw lazyDOMException(\r\n      'The requested length exceeds 65,536 bytes',\r\n      'QuotaExceededError');\r\n  }\r\n  randomFillSync(data, 0);\r\n  return data;\r\n}\r\n\r\n// Implements an RFC 4122 version 4 random UUID.\r\n// To improve performance, random data is generated in batches\r\n// large enough to cover kBatchSize UUID's at a time. The uuidData\r\n// buffer is reused. Each call to randomUUID() consumes 16 bytes\r\n// from the buffer.\r\n\r\nconst kBatchSize = 128;\r\nlet uuidData;\r\nlet uuidNotBuffered;\r\nlet uuidBatch = 0;\r\n\r\nlet hexBytesCache;\r\nfunction getHexBytes() {\r\n  if (hexBytesCache === undefined) {\r\n    hexBytesCache = new Array(256);\r\n    for (let i = 0; i < hexBytesCache.length; i++) {\r\n      const hex = NumberPrototypeToString(i, 16);\r\n      hexBytesCache[i] = StringPrototypePadStart(hex, 2, '0');\r\n    }\r\n  }\r\n  return hexBytesCache;\r\n}\r\n\r\nfunction serializeUUID(buf, offset = 0) {\r\n  const kHexBytes = getHexBytes();\r\n  // xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\r\n  return kHexBytes[buf[offset]] +\r\n    kHexBytes[buf[offset + 1]] +\r\n    kHexBytes[buf[offset + 2]] +\r\n    kHexBytes[buf[offset + 3]] +\r\n    '-' +\r\n    kHexBytes[buf[offset + 4]] +\r\n    kHexBytes[buf[offset + 5]] +\r\n    '-' +\r\n    kHexBytes[(buf[offset + 6] & 0x0f) | 0x40] +\r\n    kHexBytes[buf[offset + 7]] +\r\n    '-' +\r\n    kHexBytes[(buf[offset + 8] & 0x3f) | 0x80] +\r\n    kHexBytes[buf[offset + 9]] +\r\n    '-' +\r\n    kHexBytes[buf[offset + 10]] +\r\n    kHexBytes[buf[offset + 11]] +\r\n    kHexBytes[buf[offset + 12]] +\r\n    kHexBytes[buf[offset + 13]] +\r\n    kHexBytes[buf[offset + 14]] +\r\n    kHexBytes[buf[offset + 15]];\r\n}\r\n\r\nfunction getBufferedUUID() {\r\n  uuidData ??= secureBuffer(16 * kBatchSize);\r\n  if (uuidData === undefined)\r\n    throw new ERR_OPERATION_FAILED('Out of memory');\r\n\r\n  if (uuidBatch === 0) randomFillSync(uuidData);\r\n  uuidBatch = (uuidBatch + 1) % kBatchSize;\r\n  return serializeUUID(uuidData, uuidBatch * 16);\r\n}\r\n\r\nfunction getUnbufferedUUID() {\r\n  uuidNotBuffered ??= secureBuffer(16);\r\n  if (uuidNotBuffered === undefined)\r\n    throw new ERR_OPERATION_FAILED('Out of memory');\r\n  randomFillSync(uuidNotBuffered);\r\n  return serializeUUID(uuidNotBuffered);\r\n}\r\n\r\nfunction randomUUID(options) {\r\n  if (options !== undefined)\r\n    validateObject(options, 'options');\r\n  const {\r\n    disableEntropyCache = false,\r\n  } = options || kEmptyObject;\r\n\r\n  validateBoolean(disableEntropyCache, 'options.disableEntropyCache');\r\n\r\n  return disableEntropyCache ? getUnbufferedUUID() : getBufferedUUID();\r\n}\r\n\r\nfunction createRandomPrimeJob(type, size, options) {\r\n  validateObject(options, 'options');\r\n\r\n  const {\r\n    safe = false,\r\n    bigint = false,\r\n  } = options;\r\n  let {\r\n    add,\r\n    rem,\r\n  } = options;\r\n\r\n  validateBoolean(safe, 'options.safe');\r\n  validateBoolean(bigint, 'options.bigint');\r\n\r\n  if (add !== undefined) {\r\n    if (typeof add === 'bigint') {\r\n      add = unsignedBigIntToBuffer(add, 'options.add');\r\n    } else if (!isAnyArrayBuffer(add) && !isArrayBufferView(add)) {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'options.add',\r\n        [\r\n          'ArrayBuffer',\r\n          'TypedArray',\r\n          'Buffer',\r\n          'DataView',\r\n          'bigint',\r\n        ],\r\n        add);\r\n    }\r\n  }\r\n\r\n  if (rem !== undefined) {\r\n    if (typeof rem === 'bigint') {\r\n      rem = unsignedBigIntToBuffer(rem, 'options.rem');\r\n    } else if (!isAnyArrayBuffer(rem) && !isArrayBufferView(rem)) {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'options.rem',\r\n        [\r\n          'ArrayBuffer',\r\n          'TypedArray',\r\n          'Buffer',\r\n          'DataView',\r\n          'bigint',\r\n        ],\r\n        rem);\r\n    }\r\n  }\r\n\r\n  const job = new RandomPrimeJob(type, size, safe, add, rem);\r\n  job.result = bigint ? arrayBufferToUnsignedBigInt : (p) => p;\r\n  return job;\r\n}\r\n\r\nfunction generatePrime(size, options, callback) {\r\n  validateInt32(size, 'size', 1);\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = kEmptyObject;\r\n  }\r\n  validateFunction(callback, 'callback');\r\n\r\n  const job = createRandomPrimeJob(kCryptoJobAsync, size, options);\r\n  job.ondone = (err, prime) => {\r\n    if (err) {\r\n      callback(err);\r\n      return;\r\n    }\r\n\r\n    callback(\r\n      undefined,\r\n      job.result(prime));\r\n  };\r\n  job.run();\r\n}\r\n\r\nfunction generatePrimeSync(size, options = kEmptyObject) {\r\n  validateInt32(size, 'size', 1);\r\n\r\n  const job = createRandomPrimeJob(kCryptoJobSync, size, options);\r\n  const { 0: err, 1: prime } = job.run();\r\n  if (err)\r\n    throw err;\r\n  return job.result(prime);\r\n}\r\n\r\n/**\r\n * 48 is the ASCII code for '0', 97 is the ASCII code for 'a'.\r\n * @param {number} number An integer between 0 and 15.\r\n * @returns {number} corresponding to the ASCII code of the hex representation\r\n *                   of the parameter.\r\n */\r\nconst numberToHexCharCode = (number) => (number < 10 ? 48 : 87) + number;\r\n\r\n/**\r\n * @param {ArrayBuffer} buf An ArrayBuffer.\r\n * @return {bigint}\r\n */\r\nfunction arrayBufferToUnsignedBigInt(buf) {\r\n  const length = ArrayBufferPrototypeGetByteLength(buf);\r\n  const chars = Array(length * 2);\r\n  const view = new DataView(buf);\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    const val = DataViewPrototypeGetUint8(view, i);\r\n    chars[2 * i] = numberToHexCharCode(val >> 4);\r\n    chars[2 * i + 1] = numberToHexCharCode(val & 0xf);\r\n  }\r\n\r\n  return BigInt(`0x${StringFromCharCodeApply(chars)}`);\r\n}\r\n\r\nfunction unsignedBigIntToBuffer(bigint, name) {\r\n  if (bigint < 0) {\r\n    throw new ERR_OUT_OF_RANGE(name, '>= 0', bigint);\r\n  }\r\n\r\n  const hex = BigIntPrototypeToString(bigint, 16);\r\n  const padded = StringPrototypePadStart(hex, hex.length + (hex.length % 2), 0);\r\n  return Buffer.from(padded, 'hex');\r\n}\r\n\r\nfunction checkPrime(candidate, options = kEmptyObject, callback) {\r\n  if (typeof candidate === 'bigint')\r\n    candidate = unsignedBigIntToBuffer(candidate, 'candidate');\r\n  if (!isAnyArrayBuffer(candidate) && !isArrayBufferView(candidate)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'candidate',\r\n      [\r\n        'ArrayBuffer',\r\n        'TypedArray',\r\n        'Buffer',\r\n        'DataView',\r\n        'bigint',\r\n      ],\r\n      candidate,\r\n    );\r\n  }\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = kEmptyObject;\r\n  }\r\n  validateFunction(callback, 'callback');\r\n  validateObject(options, 'options');\r\n  const {\r\n    checks = 0,\r\n  } = options;\r\n\r\n  // The checks option is unsigned but must fit into a signed C int for OpenSSL.\r\n  validateInt32(checks, 'options.checks', 0);\r\n\r\n  const job = new CheckPrimeJob(kCryptoJobAsync, candidate, checks);\r\n  job.ondone = callback;\r\n  job.run();\r\n}\r\n\r\nfunction checkPrimeSync(candidate, options = kEmptyObject) {\r\n  if (typeof candidate === 'bigint')\r\n    candidate = unsignedBigIntToBuffer(candidate, 'candidate');\r\n  if (!isAnyArrayBuffer(candidate) && !isArrayBufferView(candidate)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'candidate',\r\n      [\r\n        'ArrayBuffer',\r\n        'TypedArray',\r\n        'Buffer',\r\n        'DataView',\r\n        'bigint',\r\n      ],\r\n      candidate,\r\n    );\r\n  }\r\n  validateObject(options, 'options');\r\n  const {\r\n    checks = 0,\r\n  } = options;\r\n\r\n  // The checks option is unsigned but must fit into a signed C int for OpenSSL.\r\n  validateInt32(checks, 'options.checks', 0);\r\n\r\n  const job = new CheckPrimeJob(kCryptoJobSync, candidate, checks);\r\n  const { 0: err, 1: result } = job.run();\r\n  if (err)\r\n    throw err;\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports = {\r\n  checkPrime,\r\n  checkPrimeSync,\r\n  randomBytes,\r\n  randomFill,\r\n  randomFillSync,\r\n  randomInt,\r\n  getRandomValues,\r\n  randomUUID,\r\n  generatePrime,\r\n  generatePrimeSync,\r\n};\r\n"
  },
  "123": {
    "metadata": {
      "scriptId": "123",
      "url": "node:internal/crypto/pbkdf2",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 131,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "acef62ed3f7ded1011777c7ab480751c7625f208d1210f280cb2faf5604b6c84",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3149,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/pbkdf2"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeCall,\r\n} = primordials;\r\n\r\nconst { Buffer } = require('buffer');\r\n\r\nconst {\r\n  PBKDF2Job,\r\n  kCryptoJobAsync,\r\n  kCryptoJobSync,\r\n} = internalBinding('crypto');\r\n\r\nconst {\r\n  validateFunction,\r\n  validateInt32,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  getArrayBufferOrView,\r\n  normalizeHashName,\r\n  kKeyObject,\r\n} = require('internal/crypto/util');\r\n\r\nconst {\r\n  lazyDOMException,\r\n  promisify,\r\n} = require('internal/util');\r\n\r\nfunction pbkdf2(password, salt, iterations, keylen, digest, callback) {\r\n  if (typeof digest === 'function') {\r\n    callback = digest;\r\n    digest = undefined;\r\n  }\r\n\r\n  ({ password, salt, iterations, keylen, digest } =\r\n    check(password, salt, iterations, keylen, digest));\r\n\r\n  validateFunction(callback, 'callback');\r\n\r\n  const job = new PBKDF2Job(\r\n    kCryptoJobAsync,\r\n    password,\r\n    salt,\r\n    iterations,\r\n    keylen,\r\n    digest);\r\n\r\n  job.ondone = (err, result) => {\r\n    if (err !== undefined)\r\n      return FunctionPrototypeCall(callback, job, err);\r\n    const buf = Buffer.from(result);\r\n    return FunctionPrototypeCall(callback, job, null, buf);\r\n  };\r\n\r\n  job.run();\r\n}\r\n\r\nfunction pbkdf2Sync(password, salt, iterations, keylen, digest) {\r\n  ({ password, salt, iterations, keylen, digest } =\r\n    check(password, salt, iterations, keylen, digest));\r\n\r\n  const job = new PBKDF2Job(\r\n    kCryptoJobSync,\r\n    password,\r\n    salt,\r\n    iterations,\r\n    keylen,\r\n    digest);\r\n\r\n  const { 0: err, 1: result } = job.run();\r\n  if (err !== undefined)\r\n    throw err;\r\n\r\n  return Buffer.from(result);\r\n}\r\n\r\nfunction check(password, salt, iterations, keylen, digest) {\r\n  validateString(digest, 'digest');\r\n\r\n  password = getArrayBufferOrView(password, 'password');\r\n  salt = getArrayBufferOrView(salt, 'salt');\r\n  // OpenSSL uses a signed int to represent these values, so we are restricted\r\n  // to the 31-bit range here (which is plenty).\r\n  validateInt32(iterations, 'iterations', 1);\r\n  validateInt32(keylen, 'keylen', 0);\r\n\r\n  return { password, salt, iterations, keylen, digest };\r\n}\r\n\r\nconst pbkdf2Promise = promisify(pbkdf2);\r\nasync function pbkdf2DeriveBits(algorithm, baseKey, length) {\r\n  const { iterations, hash, salt } = algorithm;\r\n  if (iterations === 0)\r\n    throw lazyDOMException(\r\n      'iterations cannot be zero',\r\n      'OperationError');\r\n\r\n  const raw = baseKey[kKeyObject].export();\r\n\r\n  if (length === 0)\r\n    throw lazyDOMException('length cannot be zero', 'OperationError');\r\n  if (length === null)\r\n    throw lazyDOMException('length cannot be null', 'OperationError');\r\n  if (length % 8) {\r\n    throw lazyDOMException(\r\n      'length must be a multiple of 8',\r\n      'OperationError');\r\n  }\r\n\r\n  let result;\r\n  try {\r\n    result = await pbkdf2Promise(\r\n      raw, salt, iterations, length / 8, normalizeHashName(hash.name),\r\n    );\r\n  } catch (err) {\r\n    throw lazyDOMException(\r\n      'The operation failed for an operation-specific reason',\r\n      { name: 'OperationError', cause: err });\r\n  }\r\n\r\n  return result.buffer;\r\n}\r\n\r\nmodule.exports = {\r\n  pbkdf2,\r\n  pbkdf2Sync,\r\n  pbkdf2DeriveBits,\r\n};\r\n"
  },
  "124": {
    "metadata": {
      "scriptId": "124",
      "url": "node:internal/crypto/util",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 618,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "c1a51738f68fbaec3115bee04e82b0826d7214421933c7023dc378de5efe85db",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 16469,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/util"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayBufferIsView,\r\n  ArrayBufferPrototypeGetByteLength,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypePush,\r\n  BigInt,\r\n  DataViewPrototypeGetBuffer,\r\n  DataViewPrototypeGetByteLength,\r\n  DataViewPrototypeGetByteOffset,\r\n  FunctionPrototypeBind,\r\n  Number,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  Promise,\r\n  StringPrototypeToUpperCase,\r\n  Symbol,\r\n  TypedArrayPrototypeGetBuffer,\r\n  TypedArrayPrototypeGetByteLength,\r\n  TypedArrayPrototypeGetByteOffset,\r\n  TypedArrayPrototypeSlice,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  getCiphers: _getCiphers,\r\n  getCurves: _getCurves,\r\n  getHashes: _getHashes,\r\n  setEngine: _setEngine,\r\n  secureHeapUsed: _secureHeapUsed,\r\n  getCachedAliases,\r\n} = internalBinding('crypto');\r\n\r\nconst { getOptionValue } = require('internal/options');\r\n\r\nconst {\r\n  crypto: {\r\n    ENGINE_METHOD_ALL,\r\n  },\r\n} = internalBinding('constants');\r\n\r\nconst normalizeHashName = require('internal/crypto/hashnames');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED,\r\n    ERR_CRYPTO_ENGINE_UNKNOWN,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_OUT_OF_RANGE,\r\n  },\r\n  hideStackFrames,\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateArray,\r\n  validateNumber,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst { Buffer } = require('buffer');\r\n\r\nconst {\r\n  cachedResult,\r\n  filterDuplicateStrings,\r\n  lazyDOMException,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  namespace: {\r\n    isBuildingSnapshot,\r\n    addSerializeCallback,\r\n  },\r\n} = require('internal/v8/startup_snapshot');\r\n\r\nconst {\r\n  isDataView,\r\n  isArrayBufferView,\r\n  isAnyArrayBuffer,\r\n} = require('internal/util/types');\r\n\r\nconst kHandle = Symbol('kHandle');\r\nconst kKeyObject = Symbol('kKeyObject');\r\n\r\n// This is here because many functions accepted binary strings without\r\n// any explicit encoding in older versions of node, and we don't want\r\n// to break them unnecessarily.\r\nfunction toBuf(val, encoding) {\r\n  if (typeof val === 'string') {\r\n    if (encoding === 'buffer')\r\n      encoding = 'utf8';\r\n    return Buffer.from(val, encoding);\r\n  }\r\n  return val;\r\n}\r\n\r\nlet _hashCache;\r\nfunction getHashCache() {\r\n  if (_hashCache === undefined) {\r\n    _hashCache = getCachedAliases();\r\n    if (isBuildingSnapshot()) {\r\n      // For dynamic linking, clear the map.\r\n      addSerializeCallback(() => { _hashCache = undefined; });\r\n    }\r\n  }\r\n  return _hashCache;\r\n}\r\n\r\nfunction getCachedHashId(algorithm) {\r\n  const result = getHashCache()[algorithm];\r\n  return result === undefined ? -1 : result;\r\n}\r\n\r\nconst getCiphers = cachedResult(() => filterDuplicateStrings(_getCiphers()));\r\nconst getHashes = cachedResult(() => filterDuplicateStrings(_getHashes()));\r\nconst getCurves = cachedResult(() => filterDuplicateStrings(_getCurves()));\r\n\r\nfunction setEngine(id, flags) {\r\n  validateString(id, 'id');\r\n  if (flags)\r\n    validateNumber(flags, 'flags');\r\n  flags = flags >>> 0;\r\n\r\n  // Use provided engine for everything by default\r\n  if (flags === 0)\r\n    flags = ENGINE_METHOD_ALL;\r\n\r\n  if (typeof _setEngine !== 'function')\r\n    throw new ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED();\r\n  if (!_setEngine(id, flags))\r\n    throw new ERR_CRYPTO_ENGINE_UNKNOWN(id);\r\n}\r\n\r\nconst getArrayBufferOrView = hideStackFrames((buffer, name, encoding) => {\r\n  if (isAnyArrayBuffer(buffer))\r\n    return buffer;\r\n  if (typeof buffer === 'string') {\r\n    if (encoding === 'buffer')\r\n      encoding = 'utf8';\r\n    return Buffer.from(buffer, encoding);\r\n  }\r\n  if (!isArrayBufferView(buffer)) {\r\n    throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(\r\n      name,\r\n      [\r\n        'string',\r\n        'ArrayBuffer',\r\n        'Buffer',\r\n        'TypedArray',\r\n        'DataView',\r\n      ],\r\n      buffer,\r\n    );\r\n  }\r\n  return buffer;\r\n});\r\n\r\n// The maximum buffer size that we'll support in the WebCrypto impl\r\nconst kMaxBufferLength = (2 ** 31) - 1;\r\n\r\n// The EC named curves that we currently support via the Web Crypto API.\r\nconst kNamedCurveAliases = {\r\n  'P-256': 'prime256v1',\r\n  'P-384': 'secp384r1',\r\n  'P-521': 'secp521r1',\r\n};\r\n\r\nconst kAesKeyLengths = [128, 192, 256];\r\n\r\n// These are the only hash algorithms we currently support via\r\n// the Web Crypto API.\r\nconst kHashTypes = [\r\n  'SHA-1',\r\n  'SHA-256',\r\n  'SHA-384',\r\n  'SHA-512',\r\n];\r\n\r\nconst kSupportedAlgorithms = {\r\n  'digest': {\r\n    'SHA-1': null,\r\n    'SHA-256': null,\r\n    'SHA-384': null,\r\n    'SHA-512': null,\r\n  },\r\n  'generateKey': {\r\n    'RSASSA-PKCS1-v1_5': 'RsaHashedKeyGenParams',\r\n    'RSA-PSS': 'RsaHashedKeyGenParams',\r\n    'RSA-OAEP': 'RsaHashedKeyGenParams',\r\n    'ECDSA': 'EcKeyGenParams',\r\n    'ECDH': 'EcKeyGenParams',\r\n    'AES-CTR': 'AesKeyGenParams',\r\n    'AES-CBC': 'AesKeyGenParams',\r\n    'AES-GCM': 'AesKeyGenParams',\r\n    'AES-KW': 'AesKeyGenParams',\r\n    'HMAC': 'HmacKeyGenParams',\r\n    'X25519': null,\r\n    'Ed25519': null,\r\n    'X448': null,\r\n    'Ed448': null,\r\n  },\r\n  'sign': {\r\n    'RSASSA-PKCS1-v1_5': null,\r\n    'RSA-PSS': 'RsaPssParams',\r\n    'ECDSA': 'EcdsaParams',\r\n    'HMAC': null,\r\n    'Ed25519': null,\r\n    'Ed448': 'Ed448Params',\r\n  },\r\n  'verify': {\r\n    'RSASSA-PKCS1-v1_5': null,\r\n    'RSA-PSS': 'RsaPssParams',\r\n    'ECDSA': 'EcdsaParams',\r\n    'HMAC': null,\r\n    'Ed25519': null,\r\n    'Ed448': 'Ed448Params',\r\n  },\r\n  'importKey': {\r\n    'RSASSA-PKCS1-v1_5': 'RsaHashedImportParams',\r\n    'RSA-PSS': 'RsaHashedImportParams',\r\n    'RSA-OAEP': 'RsaHashedImportParams',\r\n    'ECDSA': 'EcKeyImportParams',\r\n    'ECDH': 'EcKeyImportParams',\r\n    'HMAC': 'HmacImportParams',\r\n    'HKDF': null,\r\n    'PBKDF2': null,\r\n    'AES-CTR': null,\r\n    'AES-CBC': null,\r\n    'AES-GCM': null,\r\n    'AES-KW': null,\r\n    'Ed25519': null,\r\n    'X25519': null,\r\n    'Ed448': null,\r\n    'X448': null,\r\n  },\r\n  'deriveBits': {\r\n    'HKDF': 'HkdfParams',\r\n    'PBKDF2': 'Pbkdf2Params',\r\n    'ECDH': 'EcdhKeyDeriveParams',\r\n    'X25519': 'EcdhKeyDeriveParams',\r\n    'X448': 'EcdhKeyDeriveParams',\r\n  },\r\n  'encrypt': {\r\n    'RSA-OAEP': 'RsaOaepParams',\r\n    'AES-CBC': 'AesCbcParams',\r\n    'AES-GCM': 'AesGcmParams',\r\n    'AES-CTR': 'AesCtrParams',\r\n  },\r\n  'decrypt': {\r\n    'RSA-OAEP': 'RsaOaepParams',\r\n    'AES-CBC': 'AesCbcParams',\r\n    'AES-GCM': 'AesGcmParams',\r\n    'AES-CTR': 'AesCtrParams',\r\n  },\r\n  'get key length': {\r\n    'AES-CBC': 'AesDerivedKeyParams',\r\n    'AES-CTR': 'AesDerivedKeyParams',\r\n    'AES-GCM': 'AesDerivedKeyParams',\r\n    'AES-KW': 'AesDerivedKeyParams',\r\n    'HMAC': 'HmacImportParams',\r\n    'HKDF': null,\r\n    'PBKDF2': null,\r\n  },\r\n  'wrapKey': {\r\n    'AES-KW': null,\r\n  },\r\n  'unwrapKey': {\r\n    'AES-KW': null,\r\n  },\r\n};\r\n\r\nconst simpleAlgorithmDictionaries = {\r\n  AesGcmParams: { iv: 'BufferSource', additionalData: 'BufferSource' },\r\n  RsaHashedKeyGenParams: { hash: 'HashAlgorithmIdentifier' },\r\n  EcKeyGenParams: {},\r\n  HmacKeyGenParams: { hash: 'HashAlgorithmIdentifier' },\r\n  RsaPssParams: {},\r\n  EcdsaParams: { hash: 'HashAlgorithmIdentifier' },\r\n  HmacImportParams: { hash: 'HashAlgorithmIdentifier' },\r\n  HkdfParams: {\r\n    hash: 'HashAlgorithmIdentifier',\r\n    salt: 'BufferSource',\r\n    info: 'BufferSource',\r\n  },\r\n  Ed448Params: { context: 'BufferSource' },\r\n  Pbkdf2Params: { hash: 'HashAlgorithmIdentifier', salt: 'BufferSource' },\r\n  RsaOaepParams: { label: 'BufferSource' },\r\n  RsaHashedImportParams: { hash: 'HashAlgorithmIdentifier' },\r\n  EcKeyImportParams: {},\r\n};\r\n\r\nfunction validateMaxBufferLength(data, name) {\r\n  if (data.byteLength > kMaxBufferLength) {\r\n    throw lazyDOMException(\r\n      `${name} must be less than ${kMaxBufferLength + 1} bits`,\r\n      'OperationError');\r\n  }\r\n}\r\n\r\nlet webidl;\r\n\r\n// https://w3c.github.io/webcrypto/#algorithm-normalization-normalize-an-algorithm\r\n// adapted for Node.js from Deno's implementation\r\n// https://github.com/denoland/deno/blob/v1.29.1/ext/crypto/00_crypto.js#L195\r\nfunction normalizeAlgorithm(algorithm, op) {\r\n  if (typeof algorithm === 'string')\r\n    return normalizeAlgorithm({ name: algorithm }, op);\r\n\r\n  webidl ??= require('internal/crypto/webidl');\r\n\r\n  // 1.\r\n  const registeredAlgorithms = kSupportedAlgorithms[op];\r\n  // 2. 3.\r\n  const initialAlg = webidl.converters.Algorithm(algorithm, {\r\n    prefix: 'Failed to normalize algorithm',\r\n    context: 'passed algorithm',\r\n  });\r\n  // 4.\r\n  let algName = initialAlg.name;\r\n\r\n  // 5.\r\n  let desiredType;\r\n  for (const key in registeredAlgorithms) {\r\n    if (!ObjectPrototypeHasOwnProperty(registeredAlgorithms, key)) {\r\n      continue;\r\n    }\r\n    if (\r\n      StringPrototypeToUpperCase(key) === StringPrototypeToUpperCase(algName)\r\n    ) {\r\n      algName = key;\r\n      desiredType = registeredAlgorithms[key];\r\n    }\r\n  }\r\n  if (desiredType === undefined)\r\n    throw lazyDOMException('Unrecognized algorithm name', 'NotSupportedError');\r\n\r\n  // Fast path everything below if the registered dictionary is null\r\n  if (desiredType === null)\r\n    return { name: algName };\r\n\r\n  // 6.\r\n  const normalizedAlgorithm = webidl.converters[desiredType](algorithm, {\r\n    prefix: 'Failed to normalize algorithm',\r\n    context: 'passed algorithm',\r\n  });\r\n  // 7.\r\n  normalizedAlgorithm.name = algName;\r\n\r\n  // 9.\r\n  const dict = simpleAlgorithmDictionaries[desiredType];\r\n  // 10.\r\n  const dictKeys = dict ? ObjectKeys(dict) : [];\r\n  for (let i = 0; i < dictKeys.length; i++) {\r\n    const member = dictKeys[i];\r\n    if (!ObjectPrototypeHasOwnProperty(dict, member))\r\n      continue;\r\n    const idlType = dict[member];\r\n    const idlValue = normalizedAlgorithm[member];\r\n    // 3.\r\n    if (idlType === 'BufferSource' && idlValue) {\r\n      const isView = ArrayBufferIsView(idlValue);\r\n      normalizedAlgorithm[member] = TypedArrayPrototypeSlice(\r\n        new Uint8Array(\r\n          isView ? getDataViewOrTypedArrayBuffer(idlValue) : idlValue,\r\n          isView ? getDataViewOrTypedArrayByteOffset(idlValue) : 0,\r\n          isView ? getDataViewOrTypedArrayByteLength(idlValue) : ArrayBufferPrototypeGetByteLength(idlValue),\r\n        ),\r\n      );\r\n    } else if (idlType === 'HashAlgorithmIdentifier') {\r\n      normalizedAlgorithm[member] = normalizeAlgorithm(idlValue, 'digest');\r\n    } else if (idlType === 'AlgorithmIdentifier') {\r\n      // This extension point is not used by any supported algorithm (yet?)\r\n      throw lazyDOMException('Not implemented.', 'NotSupportedError');\r\n    }\r\n  }\r\n\r\n  return normalizedAlgorithm;\r\n}\r\n\r\nfunction getDataViewOrTypedArrayBuffer(V) {\r\n  return isDataView(V) ?\r\n    DataViewPrototypeGetBuffer(V) : TypedArrayPrototypeGetBuffer(V);\r\n}\r\n\r\nfunction getDataViewOrTypedArrayByteOffset(V) {\r\n  return isDataView(V) ?\r\n    DataViewPrototypeGetByteOffset(V) : TypedArrayPrototypeGetByteOffset(V);\r\n}\r\n\r\nfunction getDataViewOrTypedArrayByteLength(V) {\r\n  return isDataView(V) ?\r\n    DataViewPrototypeGetByteLength(V) : TypedArrayPrototypeGetByteLength(V);\r\n}\r\n\r\nfunction hasAnyNotIn(set, checks) {\r\n  for (const s of set)\r\n    if (!ArrayPrototypeIncludes(checks, s))\r\n      return true;\r\n  return false;\r\n}\r\n\r\nfunction validateBitLength(length, name, required = false) {\r\n  if (length !== undefined || required) {\r\n    validateNumber(length, name);\r\n    if (length < 0)\r\n      throw new ERR_OUT_OF_RANGE(name, '> 0');\r\n    if (length % 8) {\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        name,\r\n        length,\r\n        'must be a multiple of 8');\r\n    }\r\n  }\r\n}\r\n\r\nfunction validateByteLength(buf, name, target) {\r\n  if (buf.byteLength !== target) {\r\n    throw lazyDOMException(\r\n      `${name} must contain exactly ${target} bytes`,\r\n      'OperationError');\r\n  }\r\n}\r\n\r\nconst validateByteSource = hideStackFrames((val, name) => {\r\n  val = toBuf(val);\r\n\r\n  if (isAnyArrayBuffer(val) || isArrayBufferView(val))\r\n    return val;\r\n\r\n  throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(\r\n    name,\r\n    [\r\n      'string',\r\n      'ArrayBuffer',\r\n      'TypedArray',\r\n      'DataView',\r\n      'Buffer',\r\n    ],\r\n    val);\r\n});\r\n\r\nfunction onDone(resolve, reject, err, result) {\r\n  if (err) {\r\n    return reject(lazyDOMException(\r\n      'The operation failed for an operation-specific reason',\r\n      { name: 'OperationError', cause: err }));\r\n  }\r\n  resolve(result);\r\n}\r\n\r\nfunction jobPromise(getJob) {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const job = getJob();\r\n      job.ondone = FunctionPrototypeBind(onDone, job, resolve, reject);\r\n      job.run();\r\n    } catch (err) {\r\n      onDone(resolve, reject, err);\r\n    }\r\n  });\r\n}\r\n\r\n// In WebCrypto, the publicExponent option in RSA is represented as a\r\n// WebIDL \"BigInteger\"... that is, a Uint8Array that allows an arbitrary\r\n// number of leading zero bits. Our conventional APIs for reading\r\n// an unsigned int from a Buffer are not adequate. The implementation\r\n// here is adapted from the chromium implementation here:\r\n// https://github.com/chromium/chromium/blob/HEAD/third_party/blink/public/platform/web_crypto_algorithm_params.h, but ported to JavaScript\r\n// Returns undefined if the conversion was unsuccessful.\r\nfunction bigIntArrayToUnsignedInt(input) {\r\n  let result = 0;\r\n\r\n  for (let n = 0; n < input.length; ++n) {\r\n    const n_reversed = input.length - n - 1;\r\n    if (n_reversed >= 4 && input[n])\r\n      return;  // Too large\r\n    result |= input[n] << 8 * n_reversed;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction bigIntArrayToUnsignedBigInt(input) {\r\n  let result = 0n;\r\n\r\n  for (let n = 0; n < input.length; ++n) {\r\n    const n_reversed = input.length - n - 1;\r\n    result |= BigInt(input[n]) << 8n * BigInt(n_reversed);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction getStringOption(options, key) {\r\n  let value;\r\n  if (options && (value = options[key]) != null)\r\n    validateString(value, `options.${key}`);\r\n  return value;\r\n}\r\n\r\nfunction getUsagesUnion(usageSet, ...usages) {\r\n  const newset = [];\r\n  for (let n = 0; n < usages.length; n++) {\r\n    if (usageSet.has(usages[n]))\r\n      ArrayPrototypePush(newset, usages[n]);\r\n  }\r\n  return newset;\r\n}\r\n\r\nfunction getBlockSize(name) {\r\n  switch (name) {\r\n    case 'SHA-1':\r\n      // Fall through\r\n    case 'SHA-256':\r\n      return 512;\r\n    case 'SHA-384':\r\n      // Fall through\r\n    case 'SHA-512':\r\n      return 1024;\r\n  }\r\n}\r\n\r\nfunction getDigestSizeInBytes(name) {\r\n  switch (name) {\r\n    case 'SHA-1': return 20;\r\n    case 'SHA-256': return 32;\r\n    case 'SHA-384': return 48;\r\n    case 'SHA-512': return 64;\r\n  }\r\n}\r\n\r\nconst kKeyOps = {\r\n  sign: 1,\r\n  verify: 2,\r\n  encrypt: 3,\r\n  decrypt: 4,\r\n  wrapKey: 5,\r\n  unwrapKey: 6,\r\n  deriveKey: 7,\r\n  deriveBits: 8,\r\n};\r\n\r\nfunction validateKeyOps(keyOps, usagesSet) {\r\n  if (keyOps === undefined) return;\r\n  validateArray(keyOps, 'keyData.key_ops');\r\n  let flags = 0;\r\n  for (let n = 0; n < keyOps.length; n++) {\r\n    const op = keyOps[n];\r\n    const op_flag = kKeyOps[op];\r\n    // Skipping unknown key ops\r\n    if (op_flag === undefined)\r\n      continue;\r\n    // Have we seen it already? if so, error\r\n    if (flags & (1 << op_flag))\r\n      throw lazyDOMException('Duplicate key operation', 'DataError');\r\n    flags |= (1 << op_flag);\r\n\r\n    // TODO(@jasnell): RFC7517 section 4.3 strong recommends validating\r\n    // key usage combinations. Specifically, it says that unrelated key\r\n    // ops SHOULD NOT be used together. We're not yet validating that here.\r\n  }\r\n\r\n  if (usagesSet !== undefined) {\r\n    for (const use of usagesSet) {\r\n      if (!ArrayPrototypeIncludes(keyOps, use)) {\r\n        throw lazyDOMException(\r\n          'Key operations and usage mismatch',\r\n          'DataError');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction secureHeapUsed() {\r\n  const val = _secureHeapUsed();\r\n  if (val === undefined)\r\n    return { total: 0, used: 0, utilization: 0, min: 0 };\r\n  const used = Number(_secureHeapUsed());\r\n  const total = Number(getOptionValue('--secure-heap'));\r\n  const min = Number(getOptionValue('--secure-heap-min'));\r\n  const utilization = used / total;\r\n  return { total, used, utilization, min };\r\n}\r\n\r\nmodule.exports = {\r\n  getArrayBufferOrView,\r\n  getCiphers,\r\n  getCurves,\r\n  getDataViewOrTypedArrayBuffer,\r\n  getHashes,\r\n  kHandle,\r\n  kKeyObject,\r\n  setEngine,\r\n  toBuf,\r\n\r\n  kHashTypes,\r\n  kNamedCurveAliases,\r\n  kAesKeyLengths,\r\n  normalizeAlgorithm,\r\n  normalizeHashName,\r\n  hasAnyNotIn,\r\n  validateBitLength,\r\n  validateByteLength,\r\n  validateByteSource,\r\n  validateKeyOps,\r\n  jobPromise,\r\n  validateMaxBufferLength,\r\n  bigIntArrayToUnsignedBigInt,\r\n  bigIntArrayToUnsignedInt,\r\n  getBlockSize,\r\n  getDigestSizeInBytes,\r\n  getStringOption,\r\n  getUsagesUnion,\r\n  secureHeapUsed,\r\n  getCachedHashId,\r\n  getHashCache,\r\n};\r\n"
  },
  "125": {
    "metadata": {
      "scriptId": "125",
      "url": "node:internal/crypto/hashnames",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 84,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "12017e2c3c3ed6899446ede6df9a918430ed6ae0ee53d53535fb6519226e4d6b",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2604,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/hashnames"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectKeys,\r\n  StringPrototypeToLowerCase,\r\n} = primordials;\r\n\r\nconst kHashContextNode = 1;\r\nconst kHashContextWebCrypto = 2;\r\nconst kHashContextJwkRsa = 3;\r\nconst kHashContextJwkRsaPss = 4;\r\nconst kHashContextJwkRsaOaep = 5;\r\nconst kHashContextJwkHmac = 6;\r\n\r\n// WebCrypto and JWK use a bunch of different names for the\r\n// standard set of SHA-* digest algorithms... which is ... fun.\r\n// Here we provide a utility for mapping between them in order\r\n// make it easier in the code.\r\n\r\nconst kHashNames = {\r\n  sha1: {\r\n    [kHashContextNode]: 'sha1',\r\n    [kHashContextWebCrypto]: 'SHA-1',\r\n    [kHashContextJwkRsa]: 'RS1',\r\n    [kHashContextJwkRsaPss]: 'PS1',\r\n    [kHashContextJwkRsaOaep]: 'RSA-OAEP',\r\n    [kHashContextJwkHmac]: 'HS1',\r\n  },\r\n  sha256: {\r\n    [kHashContextNode]: 'sha256',\r\n    [kHashContextWebCrypto]: 'SHA-256',\r\n    [kHashContextJwkRsa]: 'RS256',\r\n    [kHashContextJwkRsaPss]: 'PS256',\r\n    [kHashContextJwkRsaOaep]: 'RSA-OAEP-256',\r\n    [kHashContextJwkHmac]: 'HS256',\r\n  },\r\n  sha384: {\r\n    [kHashContextNode]: 'sha384',\r\n    [kHashContextWebCrypto]: 'SHA-384',\r\n    [kHashContextJwkRsa]: 'RS384',\r\n    [kHashContextJwkRsaPss]: 'PS384',\r\n    [kHashContextJwkRsaOaep]: 'RSA-OAEP-384',\r\n    [kHashContextJwkHmac]: 'HS384',\r\n  },\r\n  sha512: {\r\n    [kHashContextNode]: 'sha512',\r\n    [kHashContextWebCrypto]: 'SHA-512',\r\n    [kHashContextJwkRsa]: 'RS512',\r\n    [kHashContextJwkRsaPss]: 'PS512',\r\n    [kHashContextJwkRsaOaep]: 'RSA-OAEP-512',\r\n    [kHashContextJwkHmac]: 'HS512',\r\n  },\r\n};\r\n\r\n{\r\n  // Index the aliases\r\n  const keys = ObjectKeys(kHashNames);\r\n  for (let n = 0; n < keys.length; n++) {\r\n    const contexts = ObjectKeys(kHashNames[keys[n]]);\r\n    for (let i = 0; i < contexts.length; i++) {\r\n      const alias =\r\n        StringPrototypeToLowerCase(kHashNames[keys[n]][contexts[i]]);\r\n      if (kHashNames[alias] === undefined)\r\n        kHashNames[alias] = kHashNames[keys[n]];\r\n    }\r\n  }\r\n}\r\n\r\nfunction normalizeHashName(name, context = kHashContextNode) {\r\n  if (typeof name !== 'string')\r\n    return name;\r\n  name = StringPrototypeToLowerCase(name);\r\n  const alias = kHashNames[name] && kHashNames[name][context];\r\n  return alias || name;\r\n}\r\n\r\nnormalizeHashName.kContextNode = kHashContextNode;\r\nnormalizeHashName.kContextWebCrypto = kHashContextWebCrypto;\r\nnormalizeHashName.kContextJwkRsa = kHashContextJwkRsa;\r\nnormalizeHashName.kContextJwkRsaPss = kHashContextJwkRsaPss;\r\nnormalizeHashName.kContextJwkRsaOaep = kHashContextJwkRsaOaep;\r\nnormalizeHashName.kContextJwkHmac = kHashContextJwkHmac;\r\n\r\nmodule.exports = normalizeHashName;\r\n"
  },
  "126": {
    "metadata": {
      "scriptId": "126",
      "url": "node:internal/crypto/scrypt",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 135,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "e8090b8f7757f63df6dec7f0c4ac385b098a779d855371e987b7ab9e332f407b",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3466,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/scrypt"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeCall,\r\n} = primordials;\r\n\r\nconst { Buffer } = require('buffer');\r\n\r\nconst {\r\n  ScryptJob,\r\n  kCryptoJobAsync,\r\n  kCryptoJobSync,\r\n} = internalBinding('crypto');\r\n\r\nconst {\r\n  validateFunction,\r\n  validateInteger,\r\n  validateInt32,\r\n  validateUint32,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_CRYPTO_SCRYPT_INVALID_PARAMETER,\r\n    ERR_CRYPTO_SCRYPT_NOT_SUPPORTED,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  getArrayBufferOrView,\r\n} = require('internal/crypto/util');\r\n\r\nconst defaults = {\r\n  N: 16384,\r\n  r: 8,\r\n  p: 1,\r\n  maxmem: 32 << 20,  // 32 MiB, matches SCRYPT_MAX_MEM.\r\n};\r\n\r\nfunction scrypt(password, salt, keylen, options, callback = defaults) {\r\n  if (callback === defaults) {\r\n    callback = options;\r\n    options = defaults;\r\n  }\r\n\r\n  options = check(password, salt, keylen, options);\r\n  const { N, r, p, maxmem } = options;\r\n  ({ password, salt, keylen } = options);\r\n\r\n  validateFunction(callback, 'callback');\r\n\r\n  const job = new ScryptJob(\r\n    kCryptoJobAsync, password, salt, N, r, p, maxmem, keylen);\r\n\r\n  job.ondone = (error, result) => {\r\n    if (error !== undefined)\r\n      return FunctionPrototypeCall(callback, job, error);\r\n    const buf = Buffer.from(result);\r\n    return FunctionPrototypeCall(callback, job, null, buf);\r\n  };\r\n\r\n  job.run();\r\n}\r\n\r\nfunction scryptSync(password, salt, keylen, options = defaults) {\r\n  options = check(password, salt, keylen, options);\r\n  const { N, r, p, maxmem } = options;\r\n  ({ password, salt, keylen } = options);\r\n  const job = new ScryptJob(\r\n    kCryptoJobSync, password, salt, N, r, p, maxmem, keylen);\r\n  const { 0: err, 1: result } = job.run();\r\n\r\n  if (err !== undefined)\r\n    throw err;\r\n\r\n  return Buffer.from(result);\r\n}\r\n\r\nfunction check(password, salt, keylen, options) {\r\n  if (ScryptJob === undefined)\r\n    throw new ERR_CRYPTO_SCRYPT_NOT_SUPPORTED();\r\n\r\n  password = getArrayBufferOrView(password, 'password');\r\n  salt = getArrayBufferOrView(salt, 'salt');\r\n  validateInt32(keylen, 'keylen', 0);\r\n\r\n  let { N, r, p, maxmem } = defaults;\r\n  if (options && options !== defaults) {\r\n    const has_N = options.N !== undefined;\r\n    if (has_N) {\r\n      N = options.N;\r\n      validateUint32(N, 'N');\r\n    }\r\n    if (options.cost !== undefined) {\r\n      if (has_N) throw new ERR_CRYPTO_SCRYPT_INVALID_PARAMETER();\r\n      N = options.cost;\r\n      validateUint32(N, 'cost');\r\n    }\r\n    const has_r = (options.r !== undefined);\r\n    if (has_r) {\r\n      r = options.r;\r\n      validateUint32(r, 'r');\r\n    }\r\n    if (options.blockSize !== undefined) {\r\n      if (has_r) throw new ERR_CRYPTO_SCRYPT_INVALID_PARAMETER();\r\n      r = options.blockSize;\r\n      validateUint32(r, 'blockSize');\r\n    }\r\n    const has_p = options.p !== undefined;\r\n    if (has_p) {\r\n      p = options.p;\r\n      validateUint32(p, 'p');\r\n    }\r\n    if (options.parallelization !== undefined) {\r\n      if (has_p) throw new ERR_CRYPTO_SCRYPT_INVALID_PARAMETER();\r\n      p = options.parallelization;\r\n      validateUint32(p, 'parallelization');\r\n    }\r\n    if (options.maxmem !== undefined) {\r\n      maxmem = options.maxmem;\r\n      validateInteger(maxmem, 'maxmem', 0);\r\n    }\r\n    if (N === 0) N = defaults.N;\r\n    if (r === 0) r = defaults.r;\r\n    if (p === 0) p = defaults.p;\r\n    if (maxmem === 0) maxmem = defaults.maxmem;\r\n  }\r\n\r\n  return { password, salt, keylen, N, r, p, maxmem };\r\n}\r\n\r\nmodule.exports = {\r\n  scrypt,\r\n  scryptSync,\r\n};\r\n"
  },
  "127": {
    "metadata": {
      "scriptId": "127",
      "url": "node:internal/crypto/hkdf",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 168,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "3763050d66eb3d21fa3a17674e796664feca1d6ac0dd218850f2f137e54eacfe",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3569,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/hkdf"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeCall,\r\n} = primordials;\r\n\r\nconst {\r\n  HKDFJob,\r\n  kCryptoJobAsync,\r\n  kCryptoJobSync,\r\n} = internalBinding('crypto');\r\n\r\nconst {\r\n  validateFunction,\r\n  validateInteger,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst { kMaxLength } = require('buffer');\r\n\r\nconst {\r\n  normalizeHashName,\r\n  toBuf,\r\n  validateByteSource,\r\n  kKeyObject,\r\n} = require('internal/crypto/util');\r\n\r\nconst {\r\n  createSecretKey,\r\n  isKeyObject,\r\n} = require('internal/crypto/keys');\r\n\r\nconst {\r\n  lazyDOMException,\r\n  promisify,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  isAnyArrayBuffer,\r\n  isArrayBufferView,\r\n} = require('internal/util/types');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_OUT_OF_RANGE,\r\n  },\r\n  hideStackFrames,\r\n} = require('internal/errors');\r\n\r\nconst validateParameters = hideStackFrames((hash, key, salt, info, length) => {\r\n  validateString.withoutStackTrace(hash, 'digest');\r\n  key = prepareKey(key);\r\n  salt = validateByteSource.withoutStackTrace(salt, 'salt');\r\n  info = validateByteSource.withoutStackTrace(info, 'info');\r\n\r\n  validateInteger.withoutStackTrace(length, 'length', 0, kMaxLength);\r\n\r\n  if (info.byteLength > 1024) {\r\n    throw new ERR_OUT_OF_RANGE.HideStackFramesError(\r\n      'info',\r\n      'must not contain more than 1024 bytes',\r\n      info.byteLength);\r\n  }\r\n\r\n  return {\r\n    hash,\r\n    key,\r\n    salt,\r\n    info,\r\n    length,\r\n  };\r\n});\r\n\r\nfunction prepareKey(key) {\r\n  if (isKeyObject(key))\r\n    return key;\r\n\r\n  if (isAnyArrayBuffer(key))\r\n    return createSecretKey(key);\r\n\r\n  key = toBuf(key);\r\n\r\n  if (!isArrayBufferView(key)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'ikm',\r\n      [\r\n        'string',\r\n        'SecretKeyObject',\r\n        'ArrayBuffer',\r\n        'TypedArray',\r\n        'DataView',\r\n        'Buffer',\r\n      ],\r\n      key);\r\n  }\r\n\r\n  return createSecretKey(key);\r\n}\r\n\r\nfunction hkdf(hash, key, salt, info, length, callback) {\r\n  ({\r\n    hash,\r\n    key,\r\n    salt,\r\n    info,\r\n    length,\r\n  } = validateParameters(hash, key, salt, info, length));\r\n\r\n  validateFunction(callback, 'callback');\r\n\r\n  const job = new HKDFJob(kCryptoJobAsync, hash, key, salt, info, length);\r\n\r\n  job.ondone = (error, bits) => {\r\n    if (error) return FunctionPrototypeCall(callback, job, error);\r\n    FunctionPrototypeCall(callback, job, null, bits);\r\n  };\r\n\r\n  job.run();\r\n}\r\n\r\nfunction hkdfSync(hash, key, salt, info, length) {\r\n  ({\r\n    hash,\r\n    key,\r\n    salt,\r\n    info,\r\n    length,\r\n  } = validateParameters(hash, key, salt, info, length));\r\n\r\n  const job = new HKDFJob(kCryptoJobSync, hash, key, salt, info, length);\r\n  const { 0: err, 1: bits } = job.run();\r\n  if (err !== undefined)\r\n    throw err;\r\n\r\n  return bits;\r\n}\r\n\r\nconst hkdfPromise = promisify(hkdf);\r\nasync function hkdfDeriveBits(algorithm, baseKey, length) {\r\n  const { hash, salt, info } = algorithm;\r\n\r\n  if (length === 0)\r\n    throw lazyDOMException('length cannot be zero', 'OperationError');\r\n  if (length === null)\r\n    throw lazyDOMException('length cannot be null', 'OperationError');\r\n  if (length % 8) {\r\n    throw lazyDOMException(\r\n      'length must be a multiple of 8',\r\n      'OperationError');\r\n  }\r\n\r\n  try {\r\n    return await hkdfPromise(\r\n      normalizeHashName(hash.name), baseKey[kKeyObject], salt, info, length / 8,\r\n    );\r\n  } catch (err) {\r\n    throw lazyDOMException(\r\n      'The operation failed for an operation-specific reason',\r\n      { name: 'OperationError', cause: err });\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  hkdf,\r\n  hkdfSync,\r\n  hkdfDeriveBits,\r\n};\r\n"
  },
  "128": {
    "metadata": {
      "scriptId": "128",
      "url": "node:internal/crypto/keys",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 825,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "d6767688bc9db9bb71d2126158c2cb822c780c7ae0f7fb17406a917f833c4b78",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 23139,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/keys"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayFrom,\r\n  ArrayPrototypeSlice,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  Symbol,\r\n  SymbolToStringTag,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  KeyObjectHandle,\r\n  createNativeKeyObjectClass,\r\n  kKeyTypeSecret,\r\n  kKeyTypePublic,\r\n  kKeyTypePrivate,\r\n  kKeyFormatPEM,\r\n  kKeyFormatDER,\r\n  kKeyFormatJWK,\r\n  kKeyEncodingPKCS1,\r\n  kKeyEncodingPKCS8,\r\n  kKeyEncodingSPKI,\r\n  kKeyEncodingSEC1,\r\n} = internalBinding('crypto');\r\n\r\nconst {\r\n  validateObject,\r\n  validateOneOf,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS,\r\n    ERR_CRYPTO_INVALID_JWK,\r\n    ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE,\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_THIS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  kHandle,\r\n  kKeyObject,\r\n  getArrayBufferOrView,\r\n  bigIntArrayToUnsignedBigInt,\r\n} = require('internal/crypto/util');\r\n\r\nconst {\r\n  isAnyArrayBuffer,\r\n  isArrayBufferView,\r\n} = require('internal/util/types');\r\n\r\nconst {\r\n  markTransferMode,\r\n  kClone,\r\n  kDeserialize,\r\n} = require('internal/worker/js_transferable');\r\n\r\nconst {\r\n  customInspectSymbol: kInspect,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\n\r\nconst { inspect } = require('internal/util/inspect');\r\n\r\nconst { Buffer } = require('buffer');\r\n\r\nconst kAlgorithm = Symbol('kAlgorithm');\r\nconst kExtractable = Symbol('kExtractable');\r\nconst kKeyType = Symbol('kKeyType');\r\nconst kKeyUsages = Symbol('kKeyUsages');\r\n\r\n// Key input contexts.\r\nconst kConsumePublic = 0;\r\nconst kConsumePrivate = 1;\r\nconst kCreatePublic = 2;\r\nconst kCreatePrivate = 3;\r\n\r\nconst encodingNames = [];\r\nfor (const m of [[kKeyEncodingPKCS1, 'pkcs1'], [kKeyEncodingPKCS8, 'pkcs8'],\r\n                 [kKeyEncodingSPKI, 'spki'], [kKeyEncodingSEC1, 'sec1']])\r\n  encodingNames[m[0]] = m[1];\r\n\r\n// Creating the KeyObject class is a little complicated due to inheritance\r\n// and the fact that KeyObjects should be transferrable between threads,\r\n// which requires the KeyObject base class to be implemented in C++.\r\n// The creation requires a callback to make sure that the NativeKeyObject\r\n// base class cannot exist without the other KeyObject implementations.\r\nconst {\r\n  0: KeyObject,\r\n  1: SecretKeyObject,\r\n  2: PublicKeyObject,\r\n  3: PrivateKeyObject,\r\n} = createNativeKeyObjectClass((NativeKeyObject) => {\r\n  // Publicly visible KeyObject class.\r\n  class KeyObject extends NativeKeyObject {\r\n    constructor(type, handle) {\r\n      if (type !== 'secret' && type !== 'public' && type !== 'private')\r\n        throw new ERR_INVALID_ARG_VALUE('type', type);\r\n      if (typeof handle !== 'object' || !(handle instanceof KeyObjectHandle))\r\n        throw new ERR_INVALID_ARG_TYPE('handle', 'object', handle);\r\n\r\n      super(handle);\r\n\r\n      this[kKeyType] = type;\r\n\r\n      ObjectDefineProperty(this, kHandle, {\r\n        __proto__: null,\r\n        value: handle,\r\n        enumerable: false,\r\n        configurable: false,\r\n        writable: false,\r\n      });\r\n    }\r\n\r\n    get type() {\r\n      return this[kKeyType];\r\n    }\r\n\r\n    static from(key) {\r\n      if (!isCryptoKey(key))\r\n        throw new ERR_INVALID_ARG_TYPE('key', 'CryptoKey', key);\r\n      return key[kKeyObject];\r\n    }\r\n\r\n    equals(otherKeyObject) {\r\n      if (!isKeyObject(otherKeyObject)) {\r\n        throw new ERR_INVALID_ARG_TYPE(\r\n          'otherKeyObject', 'KeyObject', otherKeyObject);\r\n      }\r\n\r\n      return otherKeyObject.type === this.type &&\r\n        this[kHandle].equals(otherKeyObject[kHandle]);\r\n    }\r\n  }\r\n\r\n  ObjectDefineProperties(KeyObject.prototype, {\r\n    [SymbolToStringTag]: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: 'KeyObject',\r\n    },\r\n  });\r\n\r\n  class SecretKeyObject extends KeyObject {\r\n    constructor(handle) {\r\n      super('secret', handle);\r\n    }\r\n\r\n    get symmetricKeySize() {\r\n      return this[kHandle].getSymmetricKeySize();\r\n    }\r\n\r\n    export(options) {\r\n      if (options !== undefined) {\r\n        validateObject(options, 'options');\r\n        validateOneOf(\r\n          options.format, 'options.format', [undefined, 'buffer', 'jwk']);\r\n        if (options.format === 'jwk') {\r\n          return this[kHandle].exportJwk({}, false);\r\n        }\r\n      }\r\n      return this[kHandle].export();\r\n    }\r\n  }\r\n\r\n  const kAsymmetricKeyType = Symbol('kAsymmetricKeyType');\r\n  const kAsymmetricKeyDetails = Symbol('kAsymmetricKeyDetails');\r\n\r\n  function normalizeKeyDetails(details = {}) {\r\n    if (details.publicExponent !== undefined) {\r\n      return {\r\n        ...details,\r\n        publicExponent:\r\n          bigIntArrayToUnsignedBigInt(new Uint8Array(details.publicExponent)),\r\n      };\r\n    }\r\n    return details;\r\n  }\r\n\r\n  class AsymmetricKeyObject extends KeyObject {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(type, handle) {\r\n      super(type, handle);\r\n    }\r\n\r\n    get asymmetricKeyType() {\r\n      return this[kAsymmetricKeyType] ||\r\n             (this[kAsymmetricKeyType] = this[kHandle].getAsymmetricKeyType());\r\n    }\r\n\r\n    get asymmetricKeyDetails() {\r\n      switch (this.asymmetricKeyType) {\r\n        case 'rsa':\r\n        case 'rsa-pss':\r\n        case 'dsa':\r\n        case 'ec':\r\n          return this[kAsymmetricKeyDetails] ||\r\n             (this[kAsymmetricKeyDetails] = normalizeKeyDetails(\r\n               this[kHandle].keyDetail({}),\r\n             ));\r\n        default:\r\n          return {};\r\n      }\r\n    }\r\n  }\r\n\r\n  class PublicKeyObject extends AsymmetricKeyObject {\r\n    constructor(handle) {\r\n      super('public', handle);\r\n    }\r\n\r\n    export(options) {\r\n      if (options && options.format === 'jwk') {\r\n        return this[kHandle].exportJwk({}, false);\r\n      }\r\n      const {\r\n        format,\r\n        type,\r\n      } = parsePublicKeyEncoding(options, this.asymmetricKeyType);\r\n      return this[kHandle].export(format, type);\r\n    }\r\n  }\r\n\r\n  class PrivateKeyObject extends AsymmetricKeyObject {\r\n    constructor(handle) {\r\n      super('private', handle);\r\n    }\r\n\r\n    export(options) {\r\n      if (options && options.format === 'jwk') {\r\n        if (options.passphrase !== undefined) {\r\n          throw new ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS(\r\n            'jwk', 'does not support encryption');\r\n        }\r\n        return this[kHandle].exportJwk({}, false);\r\n      }\r\n      const {\r\n        format,\r\n        type,\r\n        cipher,\r\n        passphrase,\r\n      } = parsePrivateKeyEncoding(options, this.asymmetricKeyType);\r\n      return this[kHandle].export(format, type, cipher, passphrase);\r\n    }\r\n  }\r\n\r\n  return [KeyObject, SecretKeyObject, PublicKeyObject, PrivateKeyObject];\r\n});\r\n\r\nfunction parseKeyFormat(formatStr, defaultFormat, optionName) {\r\n  if (formatStr === undefined && defaultFormat !== undefined)\r\n    return defaultFormat;\r\n  else if (formatStr === 'pem')\r\n    return kKeyFormatPEM;\r\n  else if (formatStr === 'der')\r\n    return kKeyFormatDER;\r\n  else if (formatStr === 'jwk')\r\n    return kKeyFormatJWK;\r\n  throw new ERR_INVALID_ARG_VALUE(optionName, formatStr);\r\n}\r\n\r\nfunction parseKeyType(typeStr, required, keyType, isPublic, optionName) {\r\n  if (typeStr === undefined && !required) {\r\n    return undefined;\r\n  } else if (typeStr === 'pkcs1') {\r\n    if (keyType !== undefined && keyType !== 'rsa') {\r\n      throw new ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS(\r\n        typeStr, 'can only be used for RSA keys');\r\n    }\r\n    return kKeyEncodingPKCS1;\r\n  } else if (typeStr === 'spki' && isPublic !== false) {\r\n    return kKeyEncodingSPKI;\r\n  } else if (typeStr === 'pkcs8' && isPublic !== true) {\r\n    return kKeyEncodingPKCS8;\r\n  } else if (typeStr === 'sec1' && isPublic !== true) {\r\n    if (keyType !== undefined && keyType !== 'ec') {\r\n      throw new ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS(\r\n        typeStr, 'can only be used for EC keys');\r\n    }\r\n    return kKeyEncodingSEC1;\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_VALUE(optionName, typeStr);\r\n}\r\n\r\nfunction option(name, objName) {\r\n  return objName === undefined ?\r\n    `options.${name}` : `options.${objName}.${name}`;\r\n}\r\n\r\nfunction parseKeyFormatAndType(enc, keyType, isPublic, objName) {\r\n  const { format: formatStr, type: typeStr } = enc;\r\n\r\n  const isInput = keyType === undefined;\r\n  const format = parseKeyFormat(formatStr,\r\n                                isInput ? kKeyFormatPEM : undefined,\r\n                                option('format', objName));\r\n\r\n  const isRequired = (!isInput ||\r\n                      format === kKeyFormatDER) &&\r\n                      format !== kKeyFormatJWK;\r\n  const type = parseKeyType(typeStr,\r\n                            isRequired,\r\n                            keyType,\r\n                            isPublic,\r\n                            option('type', objName));\r\n  return { format, type };\r\n}\r\n\r\nfunction isStringOrBuffer(val) {\r\n  return typeof val === 'string' ||\r\n         isArrayBufferView(val) ||\r\n         isAnyArrayBuffer(val);\r\n}\r\n\r\nfunction parseKeyEncoding(enc, keyType, isPublic, objName) {\r\n  validateObject(enc, 'options');\r\n\r\n  const isInput = keyType === undefined;\r\n\r\n  const {\r\n    format,\r\n    type,\r\n  } = parseKeyFormatAndType(enc, keyType, isPublic, objName);\r\n\r\n  let cipher, passphrase, encoding;\r\n  if (isPublic !== true) {\r\n    ({ cipher, passphrase, encoding } = enc);\r\n\r\n    if (!isInput) {\r\n      if (cipher != null) {\r\n        if (typeof cipher !== 'string')\r\n          throw new ERR_INVALID_ARG_VALUE(option('cipher', objName), cipher);\r\n        if (format === kKeyFormatDER &&\r\n            (type === kKeyEncodingPKCS1 ||\r\n             type === kKeyEncodingSEC1)) {\r\n          throw new ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS(\r\n            encodingNames[type], 'does not support encryption');\r\n        }\r\n      } else if (passphrase !== undefined) {\r\n        throw new ERR_INVALID_ARG_VALUE(option('cipher', objName), cipher);\r\n      }\r\n    }\r\n\r\n    if ((isInput && passphrase !== undefined &&\r\n         !isStringOrBuffer(passphrase)) ||\r\n        (!isInput && cipher != null && !isStringOrBuffer(passphrase))) {\r\n      throw new ERR_INVALID_ARG_VALUE(option('passphrase', objName),\r\n                                      passphrase);\r\n    }\r\n  }\r\n\r\n  if (passphrase !== undefined)\r\n    passphrase = getArrayBufferOrView(passphrase, 'key.passphrase', encoding);\r\n\r\n  return { format, type, cipher, passphrase };\r\n}\r\n\r\n// Parses the public key encoding based on an object. keyType must be undefined\r\n// when this is used to parse an input encoding and must be a valid key type if\r\n// used to parse an output encoding.\r\nfunction parsePublicKeyEncoding(enc, keyType, objName) {\r\n  return parseKeyEncoding(enc, keyType, keyType ? true : undefined, objName);\r\n}\r\n\r\n// Parses the private key encoding based on an object. keyType must be undefined\r\n// when this is used to parse an input encoding and must be a valid key type if\r\n// used to parse an output encoding.\r\nfunction parsePrivateKeyEncoding(enc, keyType, objName) {\r\n  return parseKeyEncoding(enc, keyType, false, objName);\r\n}\r\n\r\nfunction getKeyObjectHandle(key, ctx) {\r\n  if (ctx === kCreatePrivate) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'key',\r\n      ['string', 'ArrayBuffer', 'Buffer', 'TypedArray', 'DataView'],\r\n      key,\r\n    );\r\n  }\r\n\r\n  if (key.type !== 'private') {\r\n    if (ctx === kConsumePrivate || ctx === kCreatePublic)\r\n      throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(key.type, 'private');\r\n    if (key.type !== 'public') {\r\n      throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(key.type,\r\n                                                   'private or public');\r\n    }\r\n  }\r\n\r\n  return key[kHandle];\r\n}\r\n\r\nfunction getKeyTypes(allowKeyObject, bufferOnly = false) {\r\n  const types = [\r\n    'ArrayBuffer',\r\n    'Buffer',\r\n    'TypedArray',\r\n    'DataView',\r\n    'string', // Only if bufferOnly == false\r\n    'KeyObject', // Only if allowKeyObject == true && bufferOnly == false\r\n    'CryptoKey', // Only if allowKeyObject == true && bufferOnly == false\r\n  ];\r\n  if (bufferOnly) {\r\n    return ArrayPrototypeSlice(types, 0, 4);\r\n  } else if (!allowKeyObject) {\r\n    return ArrayPrototypeSlice(types, 0, 5);\r\n  }\r\n  return types;\r\n}\r\n\r\nfunction getKeyObjectHandleFromJwk(key, ctx) {\r\n  validateObject(key, 'key');\r\n  validateOneOf(\r\n    key.kty, 'key.kty', ['RSA', 'EC', 'OKP']);\r\n  const isPublic = ctx === kConsumePublic || ctx === kCreatePublic;\r\n\r\n  if (key.kty === 'OKP') {\r\n    validateString(key.crv, 'key.crv');\r\n    validateOneOf(\r\n      key.crv, 'key.crv', ['Ed25519', 'Ed448', 'X25519', 'X448']);\r\n    validateString(key.x, 'key.x');\r\n\r\n    if (!isPublic)\r\n      validateString(key.d, 'key.d');\r\n\r\n    let keyData;\r\n    if (isPublic)\r\n      keyData = Buffer.from(key.x, 'base64');\r\n    else\r\n      keyData = Buffer.from(key.d, 'base64');\r\n\r\n    switch (key.crv) {\r\n      case 'Ed25519':\r\n      case 'X25519':\r\n        if (keyData.byteLength !== 32) {\r\n          throw new ERR_CRYPTO_INVALID_JWK();\r\n        }\r\n        break;\r\n      case 'Ed448':\r\n        if (keyData.byteLength !== 57) {\r\n          throw new ERR_CRYPTO_INVALID_JWK();\r\n        }\r\n        break;\r\n      case 'X448':\r\n        if (keyData.byteLength !== 56) {\r\n          throw new ERR_CRYPTO_INVALID_JWK();\r\n        }\r\n        break;\r\n    }\r\n\r\n    const handle = new KeyObjectHandle();\r\n\r\n    const keyType = isPublic ? kKeyTypePublic : kKeyTypePrivate;\r\n    if (!handle.initEDRaw(key.crv, keyData, keyType)) {\r\n      throw new ERR_CRYPTO_INVALID_JWK();\r\n    }\r\n\r\n    return handle;\r\n  }\r\n\r\n  if (key.kty === 'EC') {\r\n    validateString(key.crv, 'key.crv');\r\n    validateOneOf(\r\n      key.crv, 'key.crv', ['P-256', 'secp256k1', 'P-384', 'P-521']);\r\n    validateString(key.x, 'key.x');\r\n    validateString(key.y, 'key.y');\r\n\r\n    const jwk = {\r\n      kty: key.kty,\r\n      crv: key.crv,\r\n      x: key.x,\r\n      y: key.y,\r\n    };\r\n\r\n    if (!isPublic) {\r\n      validateString(key.d, 'key.d');\r\n      jwk.d = key.d;\r\n    }\r\n\r\n    const handle = new KeyObjectHandle();\r\n    const type = handle.initJwk(jwk, jwk.crv);\r\n    if (type === undefined)\r\n      throw new ERR_CRYPTO_INVALID_JWK();\r\n\r\n    return handle;\r\n  }\r\n\r\n  // RSA\r\n  validateString(key.n, 'key.n');\r\n  validateString(key.e, 'key.e');\r\n\r\n  const jwk = {\r\n    kty: key.kty,\r\n    n: key.n,\r\n    e: key.e,\r\n  };\r\n\r\n  if (!isPublic) {\r\n    validateString(key.d, 'key.d');\r\n    validateString(key.p, 'key.p');\r\n    validateString(key.q, 'key.q');\r\n    validateString(key.dp, 'key.dp');\r\n    validateString(key.dq, 'key.dq');\r\n    validateString(key.qi, 'key.qi');\r\n    jwk.d = key.d;\r\n    jwk.p = key.p;\r\n    jwk.q = key.q;\r\n    jwk.dp = key.dp;\r\n    jwk.dq = key.dq;\r\n    jwk.qi = key.qi;\r\n  }\r\n\r\n  const handle = new KeyObjectHandle();\r\n  const type = handle.initJwk(jwk);\r\n  if (type === undefined)\r\n    throw new ERR_CRYPTO_INVALID_JWK();\r\n\r\n  return handle;\r\n}\r\n\r\nfunction prepareAsymmetricKey(key, ctx) {\r\n  if (isKeyObject(key)) {\r\n    // Best case: A key object, as simple as that.\r\n    return { data: getKeyObjectHandle(key, ctx) };\r\n  } else if (isCryptoKey(key)) {\r\n    return { data: getKeyObjectHandle(key[kKeyObject], ctx) };\r\n  } else if (isStringOrBuffer(key)) {\r\n    // Expect PEM by default, mostly for backward compatibility.\r\n    return { format: kKeyFormatPEM, data: getArrayBufferOrView(key, 'key') };\r\n  } else if (typeof key === 'object') {\r\n    const { key: data, encoding, format } = key;\r\n\r\n    // The 'key' property can be a KeyObject as well to allow specifying\r\n    // additional options such as padding along with the key.\r\n    if (isKeyObject(data))\r\n      return { data: getKeyObjectHandle(data, ctx) };\r\n    else if (isCryptoKey(data))\r\n      return { data: getKeyObjectHandle(data[kKeyObject], ctx) };\r\n    else if (format === 'jwk') {\r\n      validateObject(data, 'key.key');\r\n      return { data: getKeyObjectHandleFromJwk(data, ctx), format: 'jwk' };\r\n    }\r\n\r\n    // Either PEM or DER using PKCS#1 or SPKI.\r\n    if (!isStringOrBuffer(data)) {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'key.key',\r\n        getKeyTypes(ctx !== kCreatePrivate),\r\n        data);\r\n    }\r\n\r\n    const isPublic =\r\n      (ctx === kConsumePrivate || ctx === kCreatePrivate) ? false : undefined;\r\n    return {\r\n      data: getArrayBufferOrView(data, 'key', encoding),\r\n      ...parseKeyEncoding(key, undefined, isPublic),\r\n    };\r\n  }\r\n  throw new ERR_INVALID_ARG_TYPE(\r\n    'key',\r\n    getKeyTypes(ctx !== kCreatePrivate),\r\n    key);\r\n}\r\n\r\nfunction preparePrivateKey(key) {\r\n  return prepareAsymmetricKey(key, kConsumePrivate);\r\n}\r\n\r\nfunction preparePublicOrPrivateKey(key) {\r\n  return prepareAsymmetricKey(key, kConsumePublic);\r\n}\r\n\r\nfunction prepareSecretKey(key, encoding, bufferOnly = false) {\r\n  if (!bufferOnly) {\r\n    if (isKeyObject(key)) {\r\n      if (key.type !== 'secret')\r\n        throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(key.type, 'secret');\r\n      return key[kHandle];\r\n    } else if (isCryptoKey(key)) {\r\n      if (key.type !== 'secret')\r\n        throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(key.type, 'secret');\r\n      return key[kKeyObject][kHandle];\r\n    }\r\n  }\r\n  if (typeof key !== 'string' &&\r\n      !isArrayBufferView(key) &&\r\n      !isAnyArrayBuffer(key)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'key',\r\n      getKeyTypes(!bufferOnly, bufferOnly),\r\n      key);\r\n  }\r\n  return getArrayBufferOrView(key, 'key', encoding);\r\n}\r\n\r\nfunction createSecretKey(key, encoding) {\r\n  key = prepareSecretKey(key, encoding, true);\r\n  const handle = new KeyObjectHandle();\r\n  handle.init(kKeyTypeSecret, key);\r\n  return new SecretKeyObject(handle);\r\n}\r\n\r\nfunction createPublicKey(key) {\r\n  const { format, type, data, passphrase } =\r\n    prepareAsymmetricKey(key, kCreatePublic);\r\n  let handle;\r\n  if (format === 'jwk') {\r\n    handle = data;\r\n  } else {\r\n    handle = new KeyObjectHandle();\r\n    handle.init(kKeyTypePublic, data, format, type, passphrase);\r\n  }\r\n  return new PublicKeyObject(handle);\r\n}\r\n\r\nfunction createPrivateKey(key) {\r\n  const { format, type, data, passphrase } =\r\n    prepareAsymmetricKey(key, kCreatePrivate);\r\n  let handle;\r\n  if (format === 'jwk') {\r\n    handle = data;\r\n  } else {\r\n    handle = new KeyObjectHandle();\r\n    handle.init(kKeyTypePrivate, data, format, type, passphrase);\r\n  }\r\n  return new PrivateKeyObject(handle);\r\n}\r\n\r\nfunction isKeyObject(obj) {\r\n  return obj != null && obj[kKeyType] !== undefined;\r\n}\r\n\r\n// Our implementation of CryptoKey is a simple wrapper around a KeyObject\r\n// that adapts it to the standard interface.\r\n// TODO(@jasnell): Embedder environments like electron may have issues\r\n// here similar to other things like URL. A chromium provided CryptoKey\r\n// will not be recognized as a Node.js CryptoKey, and vice versa. It\r\n// would be fantastic if we could find a way of making those interop.\r\nclass CryptoKey {\r\n  constructor() {\r\n    throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (depth < 0)\r\n      return this;\r\n\r\n    const opts = {\r\n      ...options,\r\n      depth: options.depth == null ? null : options.depth - 1,\r\n    };\r\n\r\n    return `CryptoKey ${inspect({\r\n      type: this.type,\r\n      extractable: this.extractable,\r\n      algorithm: this.algorithm,\r\n      usages: this.usages,\r\n    }, opts)}`;\r\n  }\r\n\r\n  get type() {\r\n    if (!(this instanceof CryptoKey))\r\n      throw new ERR_INVALID_THIS('CryptoKey');\r\n    return this[kKeyObject].type;\r\n  }\r\n\r\n  get extractable() {\r\n    if (!(this instanceof CryptoKey))\r\n      throw new ERR_INVALID_THIS('CryptoKey');\r\n    return this[kExtractable];\r\n  }\r\n\r\n  get algorithm() {\r\n    if (!(this instanceof CryptoKey))\r\n      throw new ERR_INVALID_THIS('CryptoKey');\r\n    return this[kAlgorithm];\r\n  }\r\n\r\n  get usages() {\r\n    if (!(this instanceof CryptoKey))\r\n      throw new ERR_INVALID_THIS('CryptoKey');\r\n    return ArrayFrom(this[kKeyUsages]);\r\n  }\r\n}\r\n\r\nObjectDefineProperties(CryptoKey.prototype, {\r\n  type: kEnumerableProperty,\r\n  extractable: kEnumerableProperty,\r\n  algorithm: kEnumerableProperty,\r\n  usages: kEnumerableProperty,\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value: 'CryptoKey',\r\n  },\r\n});\r\n\r\n/**\r\n * @param {InternalCryptoKey} key\r\n * @param {KeyObject} keyObject\r\n * @param {object} algorithm\r\n * @param {boolean} extractable\r\n * @param {Set<string>} keyUsages\r\n */\r\nfunction defineCryptoKeyProperties(\r\n  key,\r\n  keyObject,\r\n  algorithm,\r\n  extractable,\r\n  keyUsages,\r\n) {\r\n  // Using symbol properties here currently instead of private\r\n  // properties because (for now) the performance penalty of\r\n  // private fields is still too high.\r\n  ObjectDefineProperties(key, {\r\n    [kKeyObject]: {\r\n      __proto__: null,\r\n      value: keyObject,\r\n      enumerable: false,\r\n      configurable: false,\r\n      writable: false,\r\n    },\r\n    [kAlgorithm]: {\r\n      __proto__: null,\r\n      value: algorithm,\r\n      enumerable: false,\r\n      configurable: false,\r\n      writable: false,\r\n    },\r\n    [kExtractable]: {\r\n      __proto__: null,\r\n      value: extractable,\r\n      enumerable: false,\r\n      configurable: false,\r\n      writable: false,\r\n    },\r\n    [kKeyUsages]: {\r\n      __proto__: null,\r\n      value: keyUsages,\r\n      enumerable: false,\r\n      configurable: false,\r\n      writable: false,\r\n    },\r\n  });\r\n}\r\n\r\n// All internal code must use new InternalCryptoKey to create\r\n// CryptoKey instances. The CryptoKey class is exposed to end\r\n// user code but is not permitted to be constructed directly.\r\n// Using markTransferMode also allows the CryptoKey to be\r\n// cloned to Workers.\r\nclass InternalCryptoKey {\r\n  constructor(keyObject, algorithm, keyUsages, extractable) {\r\n    markTransferMode(this, true, false);\r\n    // When constructed during transfer the properties get assigned\r\n    // in the kDeserialize call.\r\n    if (keyObject) {\r\n      defineCryptoKeyProperties(\r\n        this,\r\n        keyObject,\r\n        algorithm,\r\n        extractable,\r\n        keyUsages,\r\n      );\r\n    }\r\n  }\r\n\r\n  [kClone]() {\r\n    const keyObject = this[kKeyObject];\r\n    const algorithm = this[kAlgorithm];\r\n    const extractable = this[kExtractable];\r\n    const usages = this[kKeyUsages];\r\n\r\n    return {\r\n      data: {\r\n        keyObject,\r\n        algorithm,\r\n        usages,\r\n        extractable,\r\n      },\r\n      deserializeInfo: 'internal/crypto/keys:InternalCryptoKey',\r\n    };\r\n  }\r\n\r\n  [kDeserialize]({ keyObject, algorithm, usages, extractable }) {\r\n    defineCryptoKeyProperties(this, keyObject, algorithm, extractable, usages);\r\n  }\r\n}\r\nInternalCryptoKey.prototype.constructor = CryptoKey;\r\nObjectSetPrototypeOf(InternalCryptoKey.prototype, CryptoKey.prototype);\r\n\r\nfunction isCryptoKey(obj) {\r\n  return obj != null && obj[kKeyObject] !== undefined;\r\n}\r\n\r\nmodule.exports = {\r\n  // Public API.\r\n  createSecretKey,\r\n  createPublicKey,\r\n  createPrivateKey,\r\n  KeyObject,\r\n  CryptoKey,\r\n  InternalCryptoKey,\r\n\r\n  // These are designed for internal use only and should not be exposed.\r\n  parsePublicKeyEncoding,\r\n  parsePrivateKeyEncoding,\r\n  parseKeyEncoding,\r\n  preparePrivateKey,\r\n  preparePublicOrPrivateKey,\r\n  prepareSecretKey,\r\n  SecretKeyObject,\r\n  PublicKeyObject,\r\n  PrivateKeyObject,\r\n  isKeyObject,\r\n  isCryptoKey,\r\n};\r\n"
  },
  "129": {
    "metadata": {
      "scriptId": "129",
      "url": "node:internal/crypto/keygen",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 409,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "8e31c10bbdd5e787a785b3b19915dcbce9c53d251c1aaaa70ba5cca83d4f0626",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 11121,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/keygen"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeCall,\r\n  ObjectDefineProperty,\r\n  SafeArrayIterator,\r\n} = primordials;\r\n\r\nconst {\r\n  DhKeyPairGenJob,\r\n  DsaKeyPairGenJob,\r\n  EcKeyPairGenJob,\r\n  NidKeyPairGenJob,\r\n  RsaKeyPairGenJob,\r\n  SecretKeyGenJob,\r\n  kCryptoJobAsync,\r\n  kCryptoJobSync,\r\n  kKeyVariantRSA_PSS,\r\n  kKeyVariantRSA_SSA_PKCS1_v1_5,\r\n  EVP_PKEY_ED25519,\r\n  EVP_PKEY_ED448,\r\n  EVP_PKEY_X25519,\r\n  EVP_PKEY_X448,\r\n  OPENSSL_EC_NAMED_CURVE,\r\n  OPENSSL_EC_EXPLICIT_CURVE,\r\n} = internalBinding('crypto');\r\n\r\nconst {\r\n  PublicKeyObject,\r\n  PrivateKeyObject,\r\n  SecretKeyObject,\r\n  parsePublicKeyEncoding,\r\n  parsePrivateKeyEncoding,\r\n} = require('internal/crypto/keys');\r\n\r\nconst {\r\n  kAesKeyLengths,\r\n} = require('internal/crypto/util');\r\n\r\nconst {\r\n  customPromisifyArgs,\r\n  kEmptyObject,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  validateFunction,\r\n  validateBuffer,\r\n  validateString,\r\n  validateInteger,\r\n  validateObject,\r\n  validateOneOf,\r\n  validateInt32,\r\n  validateUint32,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INCOMPATIBLE_OPTION_PAIR,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_MISSING_OPTION,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst { isArrayBufferView } = require('internal/util/types');\r\n\r\nfunction isJwk(obj) {\r\n  return obj != null && obj.kty !== undefined;\r\n}\r\n\r\nfunction wrapKey(key, ctor) {\r\n  if (typeof key === 'string' ||\r\n      isArrayBufferView(key) ||\r\n      isJwk(key))\r\n    return key;\r\n  return new ctor(key);\r\n}\r\n\r\nfunction generateKeyPair(type, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  validateFunction(callback, 'callback');\r\n\r\n  const job = createJob(kCryptoJobAsync, type, options);\r\n\r\n  job.ondone = (error, result) => {\r\n    if (error) return FunctionPrototypeCall(callback, job, error);\r\n    // If no encoding was chosen, return key objects instead.\r\n    let { 0: pubkey, 1: privkey } = result;\r\n    pubkey = wrapKey(pubkey, PublicKeyObject);\r\n    privkey = wrapKey(privkey, PrivateKeyObject);\r\n    FunctionPrototypeCall(callback, job, null, pubkey, privkey);\r\n  };\r\n\r\n  job.run();\r\n}\r\n\r\nObjectDefineProperty(generateKeyPair, customPromisifyArgs, {\r\n  __proto__: null,\r\n  value: ['publicKey', 'privateKey'],\r\n  enumerable: false,\r\n});\r\n\r\nfunction generateKeyPairSync(type, options) {\r\n  return handleError(createJob(kCryptoJobSync, type, options).run());\r\n}\r\n\r\nfunction handleError(ret) {\r\n  if (ret == null)\r\n    return; // async\r\n\r\n  const { 0: err, 1: keys } = ret;\r\n  if (err !== undefined)\r\n    throw err;\r\n\r\n  const { 0: publicKey, 1: privateKey } = keys;\r\n\r\n  // If no encoding was chosen, return key objects instead.\r\n  return {\r\n    publicKey: wrapKey(publicKey, PublicKeyObject),\r\n    privateKey: wrapKey(privateKey, PrivateKeyObject),\r\n  };\r\n}\r\n\r\nfunction parseKeyEncoding(keyType, options = kEmptyObject) {\r\n  const { publicKeyEncoding, privateKeyEncoding } = options;\r\n\r\n  let publicFormat, publicType;\r\n  if (publicKeyEncoding == null) {\r\n    publicFormat = publicType = undefined;\r\n  } else if (typeof publicKeyEncoding === 'object') {\r\n    ({\r\n      format: publicFormat,\r\n      type: publicType,\r\n    } = parsePublicKeyEncoding(publicKeyEncoding, keyType,\r\n                               'publicKeyEncoding'));\r\n  } else {\r\n    throw new ERR_INVALID_ARG_VALUE('options.publicKeyEncoding',\r\n                                    publicKeyEncoding);\r\n  }\r\n\r\n  let privateFormat, privateType, cipher, passphrase;\r\n  if (privateKeyEncoding == null) {\r\n    privateFormat = privateType = undefined;\r\n  } else if (typeof privateKeyEncoding === 'object') {\r\n    ({\r\n      format: privateFormat,\r\n      type: privateType,\r\n      cipher,\r\n      passphrase,\r\n    } = parsePrivateKeyEncoding(privateKeyEncoding, keyType,\r\n                                'privateKeyEncoding'));\r\n  } else {\r\n    throw new ERR_INVALID_ARG_VALUE('options.privateKeyEncoding',\r\n                                    privateKeyEncoding);\r\n  }\r\n\r\n  return [\r\n    publicFormat,\r\n    publicType,\r\n    privateFormat,\r\n    privateType,\r\n    cipher,\r\n    passphrase,\r\n  ];\r\n}\r\n\r\nfunction createJob(mode, type, options) {\r\n  validateString(type, 'type');\r\n\r\n  const encoding = new SafeArrayIterator(parseKeyEncoding(type, options));\r\n\r\n  if (options !== undefined)\r\n    validateObject(options, 'options');\r\n\r\n  switch (type) {\r\n    case 'rsa':\r\n    case 'rsa-pss':\r\n    {\r\n      validateObject(options, 'options');\r\n      const { modulusLength } = options;\r\n      validateUint32(modulusLength, 'options.modulusLength');\r\n\r\n      let { publicExponent } = options;\r\n      if (publicExponent == null) {\r\n        publicExponent = 0x10001;\r\n      } else {\r\n        validateUint32(publicExponent, 'options.publicExponent');\r\n      }\r\n\r\n      if (type === 'rsa') {\r\n        return new RsaKeyPairGenJob(\r\n          mode,\r\n          kKeyVariantRSA_SSA_PKCS1_v1_5,  // Used also for RSA-OAEP\r\n          modulusLength,\r\n          publicExponent,\r\n          ...encoding);\r\n      }\r\n\r\n      const {\r\n        hash, mgf1Hash, hashAlgorithm, mgf1HashAlgorithm, saltLength,\r\n      } = options;\r\n\r\n      if (saltLength !== undefined)\r\n        validateInt32(saltLength, 'options.saltLength', 0);\r\n      if (hashAlgorithm !== undefined)\r\n        validateString(hashAlgorithm, 'options.hashAlgorithm');\r\n      if (mgf1HashAlgorithm !== undefined)\r\n        validateString(mgf1HashAlgorithm, 'options.mgf1HashAlgorithm');\r\n      if (hash !== undefined) {\r\n        process.emitWarning(\r\n          '\"options.hash\" is deprecated, ' +\r\n          'use \"options.hashAlgorithm\" instead.',\r\n          'DeprecationWarning',\r\n          'DEP0154');\r\n        validateString(hash, 'options.hash');\r\n        if (hashAlgorithm && hash !== hashAlgorithm) {\r\n          throw new ERR_INVALID_ARG_VALUE('options.hash', hash);\r\n        }\r\n      }\r\n      if (mgf1Hash !== undefined) {\r\n        process.emitWarning(\r\n          '\"options.mgf1Hash\" is deprecated, ' +\r\n          'use \"options.mgf1HashAlgorithm\" instead.',\r\n          'DeprecationWarning',\r\n          'DEP0154');\r\n        validateString(mgf1Hash, 'options.mgf1Hash');\r\n        if (mgf1HashAlgorithm && mgf1Hash !== mgf1HashAlgorithm) {\r\n          throw new ERR_INVALID_ARG_VALUE('options.mgf1Hash', mgf1Hash);\r\n        }\r\n      }\r\n\r\n      return new RsaKeyPairGenJob(\r\n        mode,\r\n        kKeyVariantRSA_PSS,\r\n        modulusLength,\r\n        publicExponent,\r\n        hashAlgorithm || hash,\r\n        mgf1HashAlgorithm || mgf1Hash,\r\n        saltLength,\r\n        ...encoding);\r\n    }\r\n    case 'dsa':\r\n    {\r\n      validateObject(options, 'options');\r\n      const { modulusLength } = options;\r\n      validateUint32(modulusLength, 'options.modulusLength');\r\n\r\n      let { divisorLength } = options;\r\n      if (divisorLength == null) {\r\n        divisorLength = -1;\r\n      } else\r\n        validateInt32(divisorLength, 'options.divisorLength', 0);\r\n\r\n      return new DsaKeyPairGenJob(\r\n        mode,\r\n        modulusLength,\r\n        divisorLength,\r\n        ...encoding);\r\n    }\r\n    case 'ec':\r\n    {\r\n      validateObject(options, 'options');\r\n      const { namedCurve } = options;\r\n      validateString(namedCurve, 'options.namedCurve');\r\n      let { paramEncoding } = options;\r\n      if (paramEncoding == null || paramEncoding === 'named')\r\n        paramEncoding = OPENSSL_EC_NAMED_CURVE;\r\n      else if (paramEncoding === 'explicit')\r\n        paramEncoding = OPENSSL_EC_EXPLICIT_CURVE;\r\n      else\r\n        throw new ERR_INVALID_ARG_VALUE('options.paramEncoding', paramEncoding);\r\n\r\n      return new EcKeyPairGenJob(\r\n        mode,\r\n        namedCurve,\r\n        paramEncoding,\r\n        ...encoding);\r\n    }\r\n    case 'ed25519':\r\n    case 'ed448':\r\n    case 'x25519':\r\n    case 'x448':\r\n    {\r\n      let id;\r\n      switch (type) {\r\n        case 'ed25519':\r\n          id = EVP_PKEY_ED25519;\r\n          break;\r\n        case 'ed448':\r\n          id = EVP_PKEY_ED448;\r\n          break;\r\n        case 'x25519':\r\n          id = EVP_PKEY_X25519;\r\n          break;\r\n        case 'x448':\r\n          id = EVP_PKEY_X448;\r\n          break;\r\n      }\r\n      return new NidKeyPairGenJob(mode, id, ...encoding);\r\n    }\r\n    case 'dh':\r\n    {\r\n      validateObject(options, 'options');\r\n      const { group, primeLength, prime, generator } = options;\r\n      if (group != null) {\r\n        if (prime != null)\r\n          throw new ERR_INCOMPATIBLE_OPTION_PAIR('group', 'prime');\r\n        if (primeLength != null)\r\n          throw new ERR_INCOMPATIBLE_OPTION_PAIR('group', 'primeLength');\r\n        if (generator != null)\r\n          throw new ERR_INCOMPATIBLE_OPTION_PAIR('group', 'generator');\r\n\r\n        validateString(group, 'options.group');\r\n\r\n        return new DhKeyPairGenJob(mode, group, ...encoding);\r\n      }\r\n\r\n      if (prime != null) {\r\n        if (primeLength != null)\r\n          throw new ERR_INCOMPATIBLE_OPTION_PAIR('prime', 'primeLength');\r\n\r\n        validateBuffer(prime, 'options.prime');\r\n      } else if (primeLength != null) {\r\n        validateInt32(primeLength, 'options.primeLength', 0);\r\n      } else {\r\n        throw new ERR_MISSING_OPTION(\r\n          'At least one of the group, prime, or primeLength options');\r\n      }\r\n\r\n      if (generator != null) {\r\n        validateInt32(generator, 'options.generator', 0);\r\n      }\r\n      return new DhKeyPairGenJob(\r\n        mode,\r\n        prime != null ? prime : primeLength,\r\n        generator == null ? 2 : generator,\r\n        ...encoding);\r\n    }\r\n    default:\r\n      // Fall through\r\n  }\r\n  throw new ERR_INVALID_ARG_VALUE('type', type, 'must be a supported key type');\r\n}\r\n\r\n// Symmetric Key Generation\r\n\r\nfunction generateKeyJob(mode, keyType, options) {\r\n  validateString(keyType, 'type');\r\n  validateObject(options, 'options');\r\n  const { length } = options;\r\n  switch (keyType) {\r\n    case 'hmac':\r\n      validateInteger(length, 'options.length', 8, 2 ** 31 - 1);\r\n      break;\r\n    case 'aes':\r\n      validateOneOf(length, 'options.length', kAesKeyLengths);\r\n      break;\r\n    default:\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        'type',\r\n        keyType,\r\n        'must be a supported key type');\r\n  }\r\n\r\n  return new SecretKeyGenJob(mode, length);\r\n}\r\n\r\nfunction handleGenerateKeyError(ret) {\r\n  if (ret === undefined)\r\n    return; // async\r\n\r\n  const { 0: err, 1: key } = ret;\r\n  if (err !== undefined)\r\n    throw err;\r\n\r\n  return wrapKey(key, SecretKeyObject);\r\n}\r\n\r\nfunction generateKey(type, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n\r\n  validateFunction(callback, 'callback');\r\n\r\n  const job = generateKeyJob(kCryptoJobAsync, type, options);\r\n\r\n  job.ondone = (error, key) => {\r\n    if (error) return FunctionPrototypeCall(callback, job, error);\r\n    FunctionPrototypeCall(callback, job, null, wrapKey(key, SecretKeyObject));\r\n  };\r\n\r\n  handleGenerateKeyError(job.run());\r\n}\r\n\r\nfunction generateKeySync(type, options) {\r\n  return handleGenerateKeyError(\r\n    generateKeyJob(kCryptoJobSync, type, options).run());\r\n}\r\n\r\nmodule.exports = {\r\n  generateKeyPair,\r\n  generateKeyPairSync,\r\n  generateKey,\r\n  generateKeySync,\r\n};\r\n"
  },
  "130": {
    "metadata": {
      "scriptId": "130",
      "url": "node:internal/crypto/diffiehellman",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 365,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "cc98ee597e508295ffd4be30e71d7c5072432ff4e393c9a72eb494d99f1b84e6",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10275,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/diffiehellman"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayBufferPrototypeSlice,\r\n  MathCeil,\r\n  ObjectDefineProperty,\r\n  SafeSet,\r\n} = primordials;\r\n\r\nconst { Buffer } = require('buffer');\r\n\r\nconst {\r\n  DiffieHellman: _DiffieHellman,\r\n  DiffieHellmanGroup: _DiffieHellmanGroup,\r\n  ECDH: _ECDH,\r\n  ECDHBitsJob,\r\n  ECDHConvertKey: _ECDHConvertKey,\r\n  statelessDH,\r\n  kCryptoJobAsync,\r\n} = internalBinding('crypto');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_CRYPTO_ECDH_INVALID_FORMAT,\r\n    ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY,\r\n    ERR_CRYPTO_INCOMPATIBLE_KEY,\r\n    ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateInt32,\r\n  validateObject,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  isArrayBufferView,\r\n  isAnyArrayBuffer,\r\n} = require('internal/util/types');\r\n\r\nconst {\r\n  lazyDOMException,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  KeyObject,\r\n} = require('internal/crypto/keys');\r\n\r\nconst {\r\n  getArrayBufferOrView,\r\n  jobPromise,\r\n  toBuf,\r\n  kHandle,\r\n  kKeyObject,\r\n} = require('internal/crypto/util');\r\n\r\nconst {\r\n  crypto: {\r\n    POINT_CONVERSION_COMPRESSED,\r\n    POINT_CONVERSION_HYBRID,\r\n    POINT_CONVERSION_UNCOMPRESSED,\r\n  },\r\n} = internalBinding('constants');\r\n\r\nconst DH_GENERATOR = 2;\r\n\r\nfunction DiffieHellman(sizeOrKey, keyEncoding, generator, genEncoding) {\r\n  if (!(this instanceof DiffieHellman))\r\n    return new DiffieHellman(sizeOrKey, keyEncoding, generator, genEncoding);\r\n\r\n  if (typeof sizeOrKey !== 'number' &&\r\n      typeof sizeOrKey !== 'string' &&\r\n      !isArrayBufferView(sizeOrKey) &&\r\n      !isAnyArrayBuffer(sizeOrKey)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'sizeOrKey',\r\n      ['number', 'string', 'ArrayBuffer', 'Buffer', 'TypedArray', 'DataView'],\r\n      sizeOrKey,\r\n    );\r\n  }\r\n\r\n  // Sizes < 0 don't make sense but they _are_ accepted (and subsequently\r\n  // rejected with ERR_OSSL_BN_BITS_TOO_SMALL) by OpenSSL. The glue code\r\n  // in node_crypto.cc accepts values that are IsInt32() for that reason\r\n  // and that's why we do that here too.\r\n  if (typeof sizeOrKey === 'number')\r\n    validateInt32(sizeOrKey, 'sizeOrKey');\r\n\r\n  if (keyEncoding && !Buffer.isEncoding(keyEncoding) &&\r\n      keyEncoding !== 'buffer') {\r\n    genEncoding = generator;\r\n    generator = keyEncoding;\r\n    keyEncoding = false;\r\n  }\r\n\r\n  if (typeof sizeOrKey !== 'number')\r\n    sizeOrKey = toBuf(sizeOrKey, keyEncoding);\r\n\r\n  if (!generator) {\r\n    generator = DH_GENERATOR;\r\n  } else if (typeof generator === 'number') {\r\n    validateInt32(generator, 'generator');\r\n  } else if (typeof generator === 'string') {\r\n    generator = toBuf(generator, genEncoding);\r\n  } else if (!isArrayBufferView(generator) && !isAnyArrayBuffer(generator)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'generator',\r\n      ['number', 'string', 'ArrayBuffer', 'Buffer', 'TypedArray', 'DataView'],\r\n      generator,\r\n    );\r\n  }\r\n\r\n\r\n  this[kHandle] = new _DiffieHellman(sizeOrKey, generator);\r\n  ObjectDefineProperty(this, 'verifyError', {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    value: this[kHandle].verifyError,\r\n    writable: false,\r\n  });\r\n}\r\n\r\n\r\nfunction DiffieHellmanGroup(name) {\r\n  if (!(this instanceof DiffieHellmanGroup))\r\n    return new DiffieHellmanGroup(name);\r\n  this[kHandle] = new _DiffieHellmanGroup(name);\r\n  ObjectDefineProperty(this, 'verifyError', {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    value: this[kHandle].verifyError,\r\n    writable: false,\r\n  });\r\n}\r\n\r\n\r\nDiffieHellmanGroup.prototype.generateKeys =\r\n    DiffieHellman.prototype.generateKeys =\r\n    dhGenerateKeys;\r\n\r\nfunction dhGenerateKeys(encoding) {\r\n  const keys = this[kHandle].generateKeys();\r\n  return encode(keys, encoding);\r\n}\r\n\r\n\r\nDiffieHellmanGroup.prototype.computeSecret =\r\n    DiffieHellman.prototype.computeSecret =\r\n    dhComputeSecret;\r\n\r\nfunction dhComputeSecret(key, inEnc, outEnc) {\r\n  key = getArrayBufferOrView(key, 'key', inEnc);\r\n  const ret = this[kHandle].computeSecret(key);\r\n  if (typeof ret === 'string')\r\n    throw new ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY();\r\n  return encode(ret, outEnc);\r\n}\r\n\r\n\r\nDiffieHellmanGroup.prototype.getPrime =\r\n    DiffieHellman.prototype.getPrime =\r\n    dhGetPrime;\r\n\r\nfunction dhGetPrime(encoding) {\r\n  const prime = this[kHandle].getPrime();\r\n  return encode(prime, encoding);\r\n}\r\n\r\n\r\nDiffieHellmanGroup.prototype.getGenerator =\r\n    DiffieHellman.prototype.getGenerator =\r\n    dhGetGenerator;\r\n\r\nfunction dhGetGenerator(encoding) {\r\n  const generator = this[kHandle].getGenerator();\r\n  return encode(generator, encoding);\r\n}\r\n\r\n\r\nDiffieHellmanGroup.prototype.getPublicKey =\r\n    DiffieHellman.prototype.getPublicKey =\r\n    dhGetPublicKey;\r\n\r\nfunction dhGetPublicKey(encoding) {\r\n  const key = this[kHandle].getPublicKey();\r\n  return encode(key, encoding);\r\n}\r\n\r\n\r\nDiffieHellmanGroup.prototype.getPrivateKey =\r\n    DiffieHellman.prototype.getPrivateKey =\r\n    dhGetPrivateKey;\r\n\r\nfunction dhGetPrivateKey(encoding) {\r\n  const key = this[kHandle].getPrivateKey();\r\n  return encode(key, encoding);\r\n}\r\n\r\n\r\nDiffieHellman.prototype.setPublicKey = function setPublicKey(key, encoding) {\r\n  key = getArrayBufferOrView(key, 'key', encoding);\r\n  this[kHandle].setPublicKey(key);\r\n  return this;\r\n};\r\n\r\n\r\nDiffieHellman.prototype.setPrivateKey = function setPrivateKey(key, encoding) {\r\n  key = getArrayBufferOrView(key, 'key', encoding);\r\n  this[kHandle].setPrivateKey(key);\r\n  return this;\r\n};\r\n\r\n\r\nfunction ECDH(curve) {\r\n  if (!(this instanceof ECDH))\r\n    return new ECDH(curve);\r\n\r\n  validateString(curve, 'curve');\r\n  this[kHandle] = new _ECDH(curve);\r\n}\r\n\r\nECDH.prototype.computeSecret = DiffieHellman.prototype.computeSecret;\r\nECDH.prototype.setPrivateKey = DiffieHellman.prototype.setPrivateKey;\r\nECDH.prototype.setPublicKey = DiffieHellman.prototype.setPublicKey;\r\nECDH.prototype.getPrivateKey = DiffieHellman.prototype.getPrivateKey;\r\n\r\nECDH.prototype.generateKeys = function generateKeys(encoding, format) {\r\n  this[kHandle].generateKeys();\r\n\r\n  return this.getPublicKey(encoding, format);\r\n};\r\n\r\nECDH.prototype.getPublicKey = function getPublicKey(encoding, format) {\r\n  const f = getFormat(format);\r\n  const key = this[kHandle].getPublicKey(f);\r\n  return encode(key, encoding);\r\n};\r\n\r\nECDH.convertKey = function convertKey(key, curve, inEnc, outEnc, format) {\r\n  validateString(curve, 'curve');\r\n  key = getArrayBufferOrView(key, 'key', inEnc);\r\n  const f = getFormat(format);\r\n  const convertedKey = _ECDHConvertKey(key, curve, f);\r\n  return encode(convertedKey, outEnc);\r\n};\r\n\r\nfunction encode(buffer, encoding) {\r\n  if (encoding && encoding !== 'buffer')\r\n    buffer = buffer.toString(encoding);\r\n  return buffer;\r\n}\r\n\r\nfunction getFormat(format) {\r\n  if (format) {\r\n    if (format === 'compressed')\r\n      return POINT_CONVERSION_COMPRESSED;\r\n    if (format === 'hybrid')\r\n      return POINT_CONVERSION_HYBRID;\r\n    if (format !== 'uncompressed')\r\n      throw new ERR_CRYPTO_ECDH_INVALID_FORMAT(format);\r\n  }\r\n  return POINT_CONVERSION_UNCOMPRESSED;\r\n}\r\n\r\nconst dhEnabledKeyTypes = new SafeSet(['dh', 'ec', 'x448', 'x25519']);\r\n\r\nfunction diffieHellman(options) {\r\n  validateObject(options, 'options');\r\n\r\n  const { privateKey, publicKey } = options;\r\n  if (!(privateKey instanceof KeyObject))\r\n    throw new ERR_INVALID_ARG_VALUE('options.privateKey', privateKey);\r\n\r\n  if (!(publicKey instanceof KeyObject))\r\n    throw new ERR_INVALID_ARG_VALUE('options.publicKey', publicKey);\r\n\r\n  if (privateKey.type !== 'private')\r\n    throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(privateKey.type, 'private');\r\n\r\n  if (publicKey.type !== 'public' && publicKey.type !== 'private') {\r\n    throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(publicKey.type,\r\n                                                 'private or public');\r\n  }\r\n\r\n  const privateType = privateKey.asymmetricKeyType;\r\n  const publicType = publicKey.asymmetricKeyType;\r\n  if (privateType !== publicType || !dhEnabledKeyTypes.has(privateType)) {\r\n    throw new ERR_CRYPTO_INCOMPATIBLE_KEY('key types for Diffie-Hellman',\r\n                                          `${privateType} and ${publicType}`);\r\n  }\r\n\r\n  return statelessDH(privateKey[kHandle], publicKey[kHandle]);\r\n}\r\n\r\n// The ecdhDeriveBits function is part of the Web Crypto API and serves both\r\n// deriveKeys and deriveBits functions.\r\nasync function ecdhDeriveBits(algorithm, baseKey, length) {\r\n  const { 'public': key } = algorithm;\r\n\r\n  if (key.type !== 'public') {\r\n    throw lazyDOMException(\r\n      'algorithm.public must be a public key', 'InvalidAccessError');\r\n  }\r\n  if (baseKey.type !== 'private') {\r\n    throw lazyDOMException(\r\n      'baseKey must be a private key', 'InvalidAccessError');\r\n  }\r\n\r\n  if (\r\n    key.algorithm.name !== 'ECDH' &&\r\n    key.algorithm.name !== 'X25519' &&\r\n    key.algorithm.name !== 'X448'\r\n  ) {\r\n    throw lazyDOMException('Keys must be ECDH, X25519, or X448 keys', 'InvalidAccessError');\r\n  }\r\n\r\n  if (key.algorithm.name !== baseKey.algorithm.name) {\r\n    throw lazyDOMException(\r\n      'The public and private keys must be of the same type',\r\n      'InvalidAccessError');\r\n  }\r\n\r\n  if (\r\n    key.algorithm.name === 'ECDH' &&\r\n    key.algorithm.namedCurve !== baseKey.algorithm.namedCurve\r\n  ) {\r\n    throw lazyDOMException('Named curve mismatch', 'InvalidAccessError');\r\n  }\r\n\r\n  const bits = await jobPromise(() => new ECDHBitsJob(\r\n    kCryptoJobAsync,\r\n    key.algorithm.name === 'ECDH' ? baseKey.algorithm.namedCurve : baseKey.algorithm.name,\r\n    key[kKeyObject][kHandle],\r\n    baseKey[kKeyObject][kHandle]));\r\n\r\n  // If a length is not specified, return the full derived secret\r\n  if (length === null)\r\n    return bits;\r\n\r\n  // If the length is not a multiple of 8 the nearest ceiled\r\n  // multiple of 8 is sliced.\r\n  length = MathCeil(length / 8);\r\n  const { byteLength } = bits;\r\n\r\n  // If the length is larger than the derived secret, throw.\r\n  // Otherwise, we either return the secret or a truncated\r\n  // slice.\r\n  if (byteLength < length)\r\n    throw lazyDOMException('derived bit length is too small', 'OperationError');\r\n\r\n  return length === byteLength ?\r\n    bits :\r\n    ArrayBufferPrototypeSlice(bits, 0, length);\r\n}\r\n\r\nmodule.exports = {\r\n  DiffieHellman,\r\n  DiffieHellmanGroup,\r\n  ECDH,\r\n  diffieHellman,\r\n  ecdhDeriveBits,\r\n};\r\n"
  },
  "131": {
    "metadata": {
      "scriptId": "131",
      "url": "node:internal/crypto/cipher",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 320,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "82c88de8eca2c76cb98a81033f679578d8f47c76dbd3f90ac02178a31cdab350",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10115,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/cipher"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n  StringPrototypeToLowerCase,\r\n} = primordials;\r\n\r\nconst {\r\n  CipherBase,\r\n  privateDecrypt: _privateDecrypt,\r\n  privateEncrypt: _privateEncrypt,\r\n  publicDecrypt: _publicDecrypt,\r\n  publicEncrypt: _publicEncrypt,\r\n  getCipherInfo: _getCipherInfo,\r\n} = internalBinding('crypto');\r\n\r\nconst {\r\n  crypto: {\r\n    RSA_PKCS1_OAEP_PADDING,\r\n    RSA_PKCS1_PADDING,\r\n  },\r\n} = internalBinding('constants');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_CRYPTO_INVALID_STATE,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_UNKNOWN_ENCODING,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateEncoding,\r\n  validateInt32,\r\n  validateObject,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  preparePrivateKey,\r\n  preparePublicOrPrivateKey,\r\n  prepareSecretKey,\r\n} = require('internal/crypto/keys');\r\n\r\nconst {\r\n  getArrayBufferOrView,\r\n  getStringOption,\r\n  kHandle,\r\n} = require('internal/crypto/util');\r\n\r\nconst {\r\n  isArrayBufferView,\r\n} = require('internal/util/types');\r\n\r\nconst assert = require('internal/assert');\r\n\r\nconst LazyTransform = require('internal/streams/lazy_transform');\r\n\r\nconst { normalizeEncoding } = require('internal/util');\r\n\r\nconst { StringDecoder } = require('string_decoder');\r\n\r\nfunction rsaFunctionFor(method, defaultPadding, keyType) {\r\n  return (options, buffer) => {\r\n    const { format, type, data, passphrase } =\r\n      keyType === 'private' ?\r\n        preparePrivateKey(options) :\r\n        preparePublicOrPrivateKey(options);\r\n    const padding = options.padding || defaultPadding;\r\n    const { oaepHash, encoding } = options;\r\n    let { oaepLabel } = options;\r\n    if (oaepHash !== undefined)\r\n      validateString(oaepHash, 'key.oaepHash');\r\n    if (oaepLabel !== undefined)\r\n      oaepLabel = getArrayBufferOrView(oaepLabel, 'key.oaepLabel', encoding);\r\n    buffer = getArrayBufferOrView(buffer, 'buffer', encoding);\r\n    return method(data, format, type, passphrase, buffer, padding, oaepHash,\r\n                  oaepLabel);\r\n  };\r\n}\r\n\r\nconst publicEncrypt = rsaFunctionFor(_publicEncrypt, RSA_PKCS1_OAEP_PADDING,\r\n                                     'public');\r\nconst publicDecrypt = rsaFunctionFor(_publicDecrypt, RSA_PKCS1_PADDING,\r\n                                     'public');\r\nconst privateEncrypt = rsaFunctionFor(_privateEncrypt, RSA_PKCS1_PADDING,\r\n                                      'private');\r\nconst privateDecrypt = rsaFunctionFor(_privateDecrypt, RSA_PKCS1_OAEP_PADDING,\r\n                                      'private');\r\n\r\nfunction getDecoder(decoder, encoding) {\r\n  const normalizedEncoding = normalizeEncoding(encoding);\r\n  decoder = decoder || new StringDecoder(encoding);\r\n  if (decoder.encoding !== normalizedEncoding) {\r\n    if (normalizedEncoding === undefined) {\r\n      throw new ERR_UNKNOWN_ENCODING(encoding);\r\n    }\r\n    assert(false, 'Cannot change encoding');\r\n  }\r\n  return decoder;\r\n}\r\n\r\nfunction getUIntOption(options, key) {\r\n  let value;\r\n  if (options && (value = options[key]) != null) {\r\n    if (value >>> 0 !== value)\r\n      throw new ERR_INVALID_ARG_VALUE(`options.${key}`, value);\r\n    return value;\r\n  }\r\n  return -1;\r\n}\r\n\r\nfunction createCipherBase(cipher, credential, options, decipher, iv) {\r\n  const authTagLength = getUIntOption(options, 'authTagLength');\r\n  this[kHandle] = new CipherBase(decipher);\r\n  if (iv === undefined) {\r\n    this[kHandle].init(cipher, credential, authTagLength);\r\n  } else {\r\n    this[kHandle].initiv(cipher, credential, iv, authTagLength);\r\n  }\r\n  this._decoder = null;\r\n\r\n  ReflectApply(LazyTransform, this, [options]);\r\n}\r\n\r\nfunction createCipherWithIV(cipher, key, options, decipher, iv) {\r\n  validateString(cipher, 'cipher');\r\n  const encoding = getStringOption(options, 'encoding');\r\n  key = prepareSecretKey(key, encoding);\r\n  iv = iv === null ? null : getArrayBufferOrView(iv, 'iv');\r\n  ReflectApply(createCipherBase, this, [cipher, key, options, decipher, iv]);\r\n}\r\n\r\n// The Cipher class is part of the legacy Node.js crypto API. It exposes\r\n// a stream-based encryption/decryption model. For backwards compatibility\r\n// the Cipher class is defined using the legacy function syntax rather than\r\n// ES6 classes.\r\n\r\nfunction Cipher(cipher, password, options) {\r\n  if (!(this instanceof Cipher))\r\n    return new Cipher(cipher, password, options);\r\n}\r\n\r\nObjectSetPrototypeOf(Cipher.prototype, LazyTransform.prototype);\r\nObjectSetPrototypeOf(Cipher, LazyTransform);\r\n\r\nCipher.prototype._transform = function _transform(chunk, encoding, callback) {\r\n  this.push(this[kHandle].update(chunk, encoding));\r\n  callback();\r\n};\r\n\r\nCipher.prototype._flush = function _flush(callback) {\r\n  try {\r\n    this.push(this[kHandle].final());\r\n  } catch (e) {\r\n    callback(e);\r\n    return;\r\n  }\r\n  callback();\r\n};\r\n\r\nCipher.prototype.update = function update(data, inputEncoding, outputEncoding) {\r\n  if (typeof data === 'string') {\r\n    validateEncoding(data, inputEncoding);\r\n  } else if (!isArrayBufferView(data)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'data', ['string', 'Buffer', 'TypedArray', 'DataView'], data);\r\n  }\r\n\r\n  const ret = this[kHandle].update(data, inputEncoding);\r\n\r\n  if (outputEncoding && outputEncoding !== 'buffer') {\r\n    this._decoder = getDecoder(this._decoder, outputEncoding);\r\n    return this._decoder.write(ret);\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\n\r\nCipher.prototype.final = function final(outputEncoding) {\r\n  const ret = this[kHandle].final();\r\n\r\n  if (outputEncoding && outputEncoding !== 'buffer') {\r\n    this._decoder = getDecoder(this._decoder, outputEncoding);\r\n    return this._decoder.end(ret);\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\n\r\nCipher.prototype.setAutoPadding = function setAutoPadding(ap) {\r\n  if (!this[kHandle].setAutoPadding(!!ap))\r\n    throw new ERR_CRYPTO_INVALID_STATE('setAutoPadding');\r\n  return this;\r\n};\r\n\r\nCipher.prototype.getAuthTag = function getAuthTag() {\r\n  const ret = this[kHandle].getAuthTag();\r\n  if (ret === undefined)\r\n    throw new ERR_CRYPTO_INVALID_STATE('getAuthTag');\r\n  return ret;\r\n};\r\n\r\n\r\nfunction setAuthTag(tagbuf, encoding) {\r\n  tagbuf = getArrayBufferOrView(tagbuf, 'buffer', encoding);\r\n  if (!this[kHandle].setAuthTag(tagbuf))\r\n    throw new ERR_CRYPTO_INVALID_STATE('setAuthTag');\r\n  return this;\r\n}\r\n\r\nCipher.prototype.setAAD = function setAAD(aadbuf, options) {\r\n  const encoding = getStringOption(options, 'encoding');\r\n  const plaintextLength = getUIntOption(options, 'plaintextLength');\r\n  aadbuf = getArrayBufferOrView(aadbuf, 'aadbuf', encoding);\r\n  if (!this[kHandle].setAAD(aadbuf, plaintextLength))\r\n    throw new ERR_CRYPTO_INVALID_STATE('setAAD');\r\n  return this;\r\n};\r\n\r\n// The Cipheriv class is part of the legacy Node.js crypto API. It exposes\r\n// a stream-based encryption/decryption model. For backwards compatibility\r\n// the Cipheriv class is defined using the legacy function syntax rather than\r\n// ES6 classes.\r\n\r\nfunction Cipheriv(cipher, key, iv, options) {\r\n  if (!(this instanceof Cipheriv))\r\n    return new Cipheriv(cipher, key, iv, options);\r\n\r\n  ReflectApply(createCipherWithIV, this, [cipher, key, options, true, iv]);\r\n}\r\n\r\nfunction addCipherPrototypeFunctions(constructor) {\r\n  constructor.prototype._transform = Cipher.prototype._transform;\r\n  constructor.prototype._flush = Cipher.prototype._flush;\r\n  constructor.prototype.update = Cipher.prototype.update;\r\n  constructor.prototype.final = Cipher.prototype.final;\r\n  constructor.prototype.setAutoPadding = Cipher.prototype.setAutoPadding;\r\n  if (constructor === Cipheriv) {\r\n    constructor.prototype.getAuthTag = Cipher.prototype.getAuthTag;\r\n  } else {\r\n    constructor.prototype.setAuthTag = setAuthTag;\r\n  }\r\n  constructor.prototype.setAAD = Cipher.prototype.setAAD;\r\n}\r\n\r\nObjectSetPrototypeOf(Cipheriv.prototype, LazyTransform.prototype);\r\nObjectSetPrototypeOf(Cipheriv, LazyTransform);\r\naddCipherPrototypeFunctions(Cipheriv);\r\n\r\n// The Decipher class is part of the legacy Node.js crypto API. It exposes\r\n// a stream-based encryption/decryption model. For backwards compatibility\r\n// the Decipher class is defined using the legacy function syntax rather than\r\n// ES6 classes.\r\n\r\nfunction Decipher(cipher, password, options) {\r\n  if (!(this instanceof Decipher))\r\n    return new Decipher(cipher, password, options);\r\n}\r\n\r\nObjectSetPrototypeOf(Decipher.prototype, LazyTransform.prototype);\r\nObjectSetPrototypeOf(Decipher, LazyTransform);\r\naddCipherPrototypeFunctions(Decipher);\r\n\r\n// The Decipheriv class is part of the legacy Node.js crypto API. It exposes\r\n// a stream-based encryption/decryption model. For backwards compatibility\r\n// the Decipheriv class is defined using the legacy function syntax rather than\r\n// ES6 classes.\r\n\r\nfunction Decipheriv(cipher, key, iv, options) {\r\n  if (!(this instanceof Decipheriv))\r\n    return new Decipheriv(cipher, key, iv, options);\r\n\r\n  ReflectApply(createCipherWithIV, this, [cipher, key, options, false, iv]);\r\n}\r\n\r\nObjectSetPrototypeOf(Decipheriv.prototype, LazyTransform.prototype);\r\nObjectSetPrototypeOf(Decipheriv, LazyTransform);\r\naddCipherPrototypeFunctions(Decipheriv);\r\n\r\nfunction getCipherInfo(nameOrNid, options) {\r\n  if (typeof nameOrNid !== 'string' && typeof nameOrNid !== 'number') {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'nameOrNid',\r\n      ['string', 'number'],\r\n      nameOrNid);\r\n  }\r\n  if (typeof nameOrNid === 'number')\r\n    validateInt32(nameOrNid, 'nameOrNid');\r\n  let keyLength, ivLength;\r\n  if (options !== undefined) {\r\n    validateObject(options, 'options');\r\n    ({ keyLength, ivLength } = options);\r\n    if (keyLength !== undefined)\r\n      validateInt32(keyLength, 'options.keyLength');\r\n    if (ivLength !== undefined)\r\n      validateInt32(ivLength, 'options.ivLength');\r\n  }\r\n\r\n  const ret = _getCipherInfo({}, nameOrNid, keyLength, ivLength);\r\n  if (ret !== undefined) {\r\n    if (ret.name) ret.name = StringPrototypeToLowerCase(ret.name);\r\n    if (ret.type) ret.type = StringPrototypeToLowerCase(ret.type);\r\n  }\r\n  return ret;\r\n}\r\n\r\nmodule.exports = {\r\n  Cipheriv,\r\n  Decipheriv,\r\n  privateDecrypt,\r\n  privateEncrypt,\r\n  publicDecrypt,\r\n  publicEncrypt,\r\n  getCipherInfo,\r\n};\r\n"
  },
  "132": {
    "metadata": {
      "scriptId": "132",
      "url": "node:internal/streams/lazy_transform",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 57,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "0943c5b7392002852c8e95b89bc77bd9abcfb7a74db62625638153ffa569f47f",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1443,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/streams/lazy_transform"
    },
    "source": "// LazyTransform is a special type of Transform stream that is lazily loaded.\r\n// This is used for performance with bi-API-ship: when two APIs are available\r\n// for the stream, one conventional and one non-conventional.\r\n'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n} = primordials;\r\n\r\nconst stream = require('stream');\r\n\r\nmodule.exports = LazyTransform;\r\n\r\nfunction LazyTransform(options) {\r\n  this._options = options;\r\n}\r\nObjectSetPrototypeOf(LazyTransform.prototype, stream.Transform.prototype);\r\nObjectSetPrototypeOf(LazyTransform, stream.Transform);\r\n\r\nfunction makeGetter(name) {\r\n  return function() {\r\n    stream.Transform.call(this, this._options);\r\n    this._writableState.decodeStrings = false;\r\n    return this[name];\r\n  };\r\n}\r\n\r\nfunction makeSetter(name) {\r\n  return function(val) {\r\n    ObjectDefineProperty(this, name, {\r\n      __proto__: null,\r\n      value: val,\r\n      enumerable: true,\r\n      configurable: true,\r\n      writable: true,\r\n    });\r\n  };\r\n}\r\n\r\nObjectDefineProperties(LazyTransform.prototype, {\r\n  _readableState: {\r\n    __proto__: null,\r\n    get: makeGetter('_readableState'),\r\n    set: makeSetter('_readableState'),\r\n    configurable: true,\r\n    enumerable: true,\r\n  },\r\n  _writableState: {\r\n    __proto__: null,\r\n    get: makeGetter('_writableState'),\r\n    set: makeSetter('_writableState'),\r\n    configurable: true,\r\n    enumerable: true,\r\n  },\r\n});\r\n"
  },
  "133": {
    "metadata": {
      "scriptId": "133",
      "url": "node:internal/crypto/sig",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 301,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "d2f1e8bbd58c08ce690fb893569e328f3cda6ee2be5c07a9c9f3801d6ef65c91",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 7243,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/sig"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeCall,\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_CRYPTO_SIGN_KEY_REQUIRED,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateFunction,\r\n  validateEncoding,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  Sign: _Sign,\r\n  SignJob,\r\n  Verify: _Verify,\r\n  kCryptoJobAsync,\r\n  kCryptoJobSync,\r\n  kSigEncDER,\r\n  kSigEncP1363,\r\n  kSignJobModeSign,\r\n  kSignJobModeVerify,\r\n} = internalBinding('crypto');\r\n\r\nconst {\r\n  getArrayBufferOrView,\r\n  kHandle,\r\n} = require('internal/crypto/util');\r\n\r\nconst {\r\n  preparePrivateKey,\r\n  preparePublicOrPrivateKey,\r\n} = require('internal/crypto/keys');\r\n\r\nconst { Writable } = require('stream');\r\n\r\nconst { Buffer } = require('buffer');\r\n\r\nconst {\r\n  isArrayBufferView,\r\n} = require('internal/util/types');\r\n\r\nfunction Sign(algorithm, options) {\r\n  if (!(this instanceof Sign))\r\n    return new Sign(algorithm, options);\r\n  validateString(algorithm, 'algorithm');\r\n  this[kHandle] = new _Sign();\r\n  this[kHandle].init(algorithm);\r\n\r\n  ReflectApply(Writable, this, [options]);\r\n}\r\n\r\nObjectSetPrototypeOf(Sign.prototype, Writable.prototype);\r\nObjectSetPrototypeOf(Sign, Writable);\r\n\r\nSign.prototype._write = function _write(chunk, encoding, callback) {\r\n  this.update(chunk, encoding);\r\n  callback();\r\n};\r\n\r\nSign.prototype.update = function update(data, encoding) {\r\n  if (typeof data === 'string') {\r\n    validateEncoding(data, encoding);\r\n  } else if (!isArrayBufferView(data)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'data', ['string', 'Buffer', 'TypedArray', 'DataView'], data);\r\n  }\r\n\r\n  this[kHandle].update(data, encoding);\r\n  return this;\r\n};\r\n\r\nfunction getPadding(options) {\r\n  return getIntOption('padding', options);\r\n}\r\n\r\nfunction getSaltLength(options) {\r\n  return getIntOption('saltLength', options);\r\n}\r\n\r\nfunction getDSASignatureEncoding(options) {\r\n  if (typeof options === 'object') {\r\n    const { dsaEncoding = 'der' } = options;\r\n    if (dsaEncoding === 'der')\r\n      return kSigEncDER;\r\n    else if (dsaEncoding === 'ieee-p1363')\r\n      return kSigEncP1363;\r\n    throw new ERR_INVALID_ARG_VALUE('options.dsaEncoding', dsaEncoding);\r\n  }\r\n\r\n  return kSigEncDER;\r\n}\r\n\r\nfunction getIntOption(name, options) {\r\n  const value = options[name];\r\n  if (value !== undefined) {\r\n    if (value === value >> 0) {\r\n      return value;\r\n    }\r\n    throw new ERR_INVALID_ARG_VALUE(`options.${name}`, value);\r\n  }\r\n  return undefined;\r\n}\r\n\r\nSign.prototype.sign = function sign(options, encoding) {\r\n  if (!options)\r\n    throw new ERR_CRYPTO_SIGN_KEY_REQUIRED();\r\n\r\n  const { data, format, type, passphrase } = preparePrivateKey(options, true);\r\n\r\n  // Options specific to RSA\r\n  const rsaPadding = getPadding(options);\r\n  const pssSaltLength = getSaltLength(options);\r\n\r\n  // Options specific to (EC)DSA\r\n  const dsaSigEnc = getDSASignatureEncoding(options);\r\n\r\n  const ret = this[kHandle].sign(data, format, type, passphrase, rsaPadding,\r\n                                 pssSaltLength, dsaSigEnc);\r\n\r\n  if (encoding && encoding !== 'buffer')\r\n    return ret.toString(encoding);\r\n\r\n  return ret;\r\n};\r\n\r\nfunction signOneShot(algorithm, data, key, callback) {\r\n  if (algorithm != null)\r\n    validateString(algorithm, 'algorithm');\r\n\r\n  if (callback !== undefined)\r\n    validateFunction(callback, 'callback');\r\n\r\n  data = getArrayBufferOrView(data, 'data');\r\n\r\n  if (!key)\r\n    throw new ERR_CRYPTO_SIGN_KEY_REQUIRED();\r\n\r\n  // Options specific to RSA\r\n  const rsaPadding = getPadding(key);\r\n  const pssSaltLength = getSaltLength(key);\r\n\r\n  // Options specific to (EC)DSA\r\n  const dsaSigEnc = getDSASignatureEncoding(key);\r\n\r\n  const {\r\n    data: keyData,\r\n    format: keyFormat,\r\n    type: keyType,\r\n    passphrase: keyPassphrase,\r\n  } = preparePrivateKey(key);\r\n\r\n  const job = new SignJob(\r\n    callback ? kCryptoJobAsync : kCryptoJobSync,\r\n    kSignJobModeSign,\r\n    keyData,\r\n    keyFormat,\r\n    keyType,\r\n    keyPassphrase,\r\n    data,\r\n    algorithm,\r\n    pssSaltLength,\r\n    rsaPadding,\r\n    dsaSigEnc);\r\n\r\n  if (!callback) {\r\n    const { 0: err, 1: signature } = job.run();\r\n    if (err !== undefined)\r\n      throw err;\r\n\r\n    return Buffer.from(signature);\r\n  }\r\n\r\n  job.ondone = (error, signature) => {\r\n    if (error) return FunctionPrototypeCall(callback, job, error);\r\n    FunctionPrototypeCall(callback, job, null, Buffer.from(signature));\r\n  };\r\n  job.run();\r\n}\r\n\r\nfunction Verify(algorithm, options) {\r\n  if (!(this instanceof Verify))\r\n    return new Verify(algorithm, options);\r\n  validateString(algorithm, 'algorithm');\r\n  this[kHandle] = new _Verify();\r\n  this[kHandle].init(algorithm);\r\n\r\n  ReflectApply(Writable, this, [options]);\r\n}\r\n\r\nObjectSetPrototypeOf(Verify.prototype, Writable.prototype);\r\nObjectSetPrototypeOf(Verify, Writable);\r\n\r\nVerify.prototype._write = Sign.prototype._write;\r\nVerify.prototype.update = Sign.prototype.update;\r\n\r\nVerify.prototype.verify = function verify(options, signature, sigEncoding) {\r\n  const {\r\n    data,\r\n    format,\r\n    type,\r\n    passphrase,\r\n  } = preparePublicOrPrivateKey(options, true);\r\n\r\n  // Options specific to RSA\r\n  const rsaPadding = getPadding(options);\r\n  const pssSaltLength = getSaltLength(options);\r\n\r\n  // Options specific to (EC)DSA\r\n  const dsaSigEnc = getDSASignatureEncoding(options);\r\n\r\n  signature = getArrayBufferOrView(signature, 'signature', sigEncoding);\r\n\r\n  return this[kHandle].verify(data, format, type, passphrase, signature,\r\n                              rsaPadding, pssSaltLength, dsaSigEnc);\r\n};\r\n\r\nfunction verifyOneShot(algorithm, data, key, signature, callback) {\r\n  if (algorithm != null)\r\n    validateString(algorithm, 'algorithm');\r\n\r\n  if (callback !== undefined)\r\n    validateFunction(callback, 'callback');\r\n\r\n  data = getArrayBufferOrView(data, 'data');\r\n\r\n  if (!isArrayBufferView(data)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'data',\r\n      ['Buffer', 'TypedArray', 'DataView'],\r\n      data,\r\n    );\r\n  }\r\n\r\n  // Options specific to RSA\r\n  const rsaPadding = getPadding(key);\r\n  const pssSaltLength = getSaltLength(key);\r\n\r\n  // Options specific to (EC)DSA\r\n  const dsaSigEnc = getDSASignatureEncoding(key);\r\n\r\n  if (!isArrayBufferView(signature)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'signature',\r\n      ['Buffer', 'TypedArray', 'DataView'],\r\n      signature,\r\n    );\r\n  }\r\n\r\n  const {\r\n    data: keyData,\r\n    format: keyFormat,\r\n    type: keyType,\r\n    passphrase: keyPassphrase,\r\n  } = preparePublicOrPrivateKey(key);\r\n\r\n  const job = new SignJob(\r\n    callback ? kCryptoJobAsync : kCryptoJobSync,\r\n    kSignJobModeVerify,\r\n    keyData,\r\n    keyFormat,\r\n    keyType,\r\n    keyPassphrase,\r\n    data,\r\n    algorithm,\r\n    pssSaltLength,\r\n    rsaPadding,\r\n    dsaSigEnc,\r\n    signature);\r\n\r\n  if (!callback) {\r\n    const { 0: err, 1: result } = job.run();\r\n    if (err !== undefined)\r\n      throw err;\r\n\r\n    return result;\r\n  }\r\n\r\n  job.ondone = (error, result) => {\r\n    if (error) return FunctionPrototypeCall(callback, job, error);\r\n    FunctionPrototypeCall(callback, job, null, result);\r\n  };\r\n  job.run();\r\n}\r\n\r\nmodule.exports = {\r\n  Sign,\r\n  signOneShot,\r\n  Verify,\r\n  verifyOneShot,\r\n};\r\n"
  },
  "134": {
    "metadata": {
      "scriptId": "134",
      "url": "node:internal/crypto/hash",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 225,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "d4128b6a3bd059d619b9fd2360c1223bb8795503427fdc08da68857685cb0e4e",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 6172,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/hash"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n  StringPrototypeToLowerCase,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  Hash: _Hash,\r\n  HashJob,\r\n  Hmac: _Hmac,\r\n  kCryptoJobAsync,\r\n  oneShotDigest,\r\n} = internalBinding('crypto');\r\n\r\nconst {\r\n  getStringOption,\r\n  jobPromise,\r\n  normalizeHashName,\r\n  validateMaxBufferLength,\r\n  kHandle,\r\n  getCachedHashId,\r\n  getHashCache,\r\n} = require('internal/crypto/util');\r\n\r\nconst {\r\n  prepareSecretKey,\r\n} = require('internal/crypto/keys');\r\n\r\nconst {\r\n  lazyDOMException,\r\n  normalizeEncoding,\r\n  encodingsMap,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  Buffer,\r\n} = require('buffer');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_CRYPTO_HASH_FINALIZED,\r\n    ERR_CRYPTO_HASH_UPDATE_FAILED,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateEncoding,\r\n  validateString,\r\n  validateUint32,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  isArrayBufferView,\r\n} = require('internal/util/types');\r\n\r\nconst LazyTransform = require('internal/streams/lazy_transform');\r\n\r\nconst kState = Symbol('kState');\r\nconst kFinalized = Symbol('kFinalized');\r\n\r\nfunction Hash(algorithm, options) {\r\n  if (!new.target)\r\n    return new Hash(algorithm, options);\r\n  const isCopy = algorithm instanceof _Hash;\r\n  if (!isCopy)\r\n    validateString(algorithm, 'algorithm');\r\n  const xofLen = typeof options === 'object' && options !== null ?\r\n    options.outputLength : undefined;\r\n  if (xofLen !== undefined)\r\n    validateUint32(xofLen, 'options.outputLength');\r\n  // Lookup the cached ID from JS land because it's faster than decoding\r\n  // the string in C++ land.\r\n  const algorithmId = isCopy ? -1 : getCachedHashId(algorithm);\r\n  this[kHandle] = new _Hash(algorithm, xofLen, algorithmId, getHashCache());\r\n  this[kState] = {\r\n    [kFinalized]: false,\r\n  };\r\n  ReflectApply(LazyTransform, this, [options]);\r\n}\r\n\r\nObjectSetPrototypeOf(Hash.prototype, LazyTransform.prototype);\r\nObjectSetPrototypeOf(Hash, LazyTransform);\r\n\r\nHash.prototype.copy = function copy(options) {\r\n  const state = this[kState];\r\n  if (state[kFinalized])\r\n    throw new ERR_CRYPTO_HASH_FINALIZED();\r\n\r\n  return new Hash(this[kHandle], options);\r\n};\r\n\r\nHash.prototype._transform = function _transform(chunk, encoding, callback) {\r\n  this[kHandle].update(chunk, encoding);\r\n  callback();\r\n};\r\n\r\nHash.prototype._flush = function _flush(callback) {\r\n  this.push(this[kHandle].digest());\r\n  callback();\r\n};\r\n\r\nHash.prototype.update = function update(data, encoding) {\r\n  const state = this[kState];\r\n  if (state[kFinalized])\r\n    throw new ERR_CRYPTO_HASH_FINALIZED();\r\n\r\n  if (typeof data === 'string') {\r\n    validateEncoding(data, encoding);\r\n  } else if (!isArrayBufferView(data)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'data', ['string', 'Buffer', 'TypedArray', 'DataView'], data);\r\n  }\r\n\r\n  if (!this[kHandle].update(data, encoding))\r\n    throw new ERR_CRYPTO_HASH_UPDATE_FAILED();\r\n  return this;\r\n};\r\n\r\n\r\nHash.prototype.digest = function digest(outputEncoding) {\r\n  const state = this[kState];\r\n  if (state[kFinalized])\r\n    throw new ERR_CRYPTO_HASH_FINALIZED();\r\n\r\n  // Explicit conversion of truthy values for backward compatibility.\r\n  const ret = this[kHandle].digest(outputEncoding && `${outputEncoding}`);\r\n  state[kFinalized] = true;\r\n  return ret;\r\n};\r\n\r\nfunction Hmac(hmac, key, options) {\r\n  if (!(this instanceof Hmac))\r\n    return new Hmac(hmac, key, options);\r\n  validateString(hmac, 'hmac');\r\n  const encoding = getStringOption(options, 'encoding');\r\n  key = prepareSecretKey(key, encoding);\r\n  this[kHandle] = new _Hmac();\r\n  this[kHandle].init(hmac, key);\r\n  this[kState] = {\r\n    [kFinalized]: false,\r\n  };\r\n  ReflectApply(LazyTransform, this, [options]);\r\n}\r\n\r\nObjectSetPrototypeOf(Hmac.prototype, LazyTransform.prototype);\r\nObjectSetPrototypeOf(Hmac, LazyTransform);\r\n\r\nHmac.prototype.update = Hash.prototype.update;\r\n\r\nHmac.prototype.digest = function digest(outputEncoding) {\r\n  const state = this[kState];\r\n\r\n  if (state[kFinalized]) {\r\n    const buf = Buffer.from('');\r\n    if (outputEncoding && outputEncoding !== 'buffer')\r\n      return buf.toString(outputEncoding);\r\n    return buf;\r\n  }\r\n\r\n  // Explicit conversion of truthy values for backward compatibility.\r\n  const ret = this[kHandle].digest(outputEncoding && `${outputEncoding}`);\r\n  state[kFinalized] = true;\r\n  return ret;\r\n};\r\n\r\nHmac.prototype._flush = Hash.prototype._flush;\r\nHmac.prototype._transform = Hash.prototype._transform;\r\n\r\n// Implementation for WebCrypto subtle.digest()\r\n\r\nasync function asyncDigest(algorithm, data) {\r\n  validateMaxBufferLength(data, 'data');\r\n\r\n  switch (algorithm.name) {\r\n    case 'SHA-1':\r\n      // Fall through\r\n    case 'SHA-256':\r\n      // Fall through\r\n    case 'SHA-384':\r\n      // Fall through\r\n    case 'SHA-512':\r\n      return jobPromise(() => new HashJob(\r\n        kCryptoJobAsync,\r\n        normalizeHashName(algorithm.name),\r\n        data));\r\n  }\r\n\r\n  throw lazyDOMException('Unrecognized algorithm name', 'NotSupportedError');\r\n}\r\n\r\nfunction hash(algorithm, input, outputEncoding = 'hex') {\r\n  validateString(algorithm, 'algorithm');\r\n  if (typeof input !== 'string' && !isArrayBufferView(input)) {\r\n    throw new ERR_INVALID_ARG_TYPE('input', ['Buffer', 'TypedArray', 'DataView', 'string'], input);\r\n  }\r\n  let normalized = outputEncoding;\r\n  // Fast case: if it's 'hex', we don't need to validate it further.\r\n  if (outputEncoding !== 'hex') {\r\n    validateString(outputEncoding, 'outputEncoding');\r\n    normalized = normalizeEncoding(outputEncoding);\r\n    // If the encoding is invalid, normalizeEncoding() returns undefined.\r\n    if (normalized === undefined) {\r\n      // normalizeEncoding() doesn't handle 'buffer'.\r\n      if (StringPrototypeToLowerCase(outputEncoding) === 'buffer') {\r\n        normalized = 'buffer';\r\n      } else {\r\n        throw new ERR_INVALID_ARG_VALUE('outputEncoding', outputEncoding);\r\n      }\r\n    }\r\n  }\r\n  return oneShotDigest(algorithm, getCachedHashId(algorithm), getHashCache(),\r\n                       input, normalized, encodingsMap[normalized]);\r\n}\r\n\r\nmodule.exports = {\r\n  Hash,\r\n  Hmac,\r\n  asyncDigest,\r\n  hash,\r\n};\r\n"
  },
  "135": {
    "metadata": {
      "scriptId": "135",
      "url": "node:internal/crypto/x509",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 368,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "b8430a8c01df5a994e607574fab390d016801b795311ce91d02ff21af7b87613",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10289,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/x509"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectSetPrototypeOf,\r\n  SafeMap,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  parseX509,\r\n  X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT,\r\n  X509_CHECK_FLAG_NEVER_CHECK_SUBJECT,\r\n  X509_CHECK_FLAG_NO_WILDCARDS,\r\n  X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS,\r\n  X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS,\r\n  X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS,\r\n} = internalBinding('crypto');\r\n\r\nconst {\r\n  PublicKeyObject,\r\n  isKeyObject,\r\n} = require('internal/crypto/keys');\r\n\r\nconst {\r\n  customInspectSymbol: kInspect,\r\n  kEmptyObject,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  validateBoolean,\r\n  validateObject,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst { inspect } = require('internal/util/inspect');\r\n\r\nconst { Buffer } = require('buffer');\r\n\r\nconst {\r\n  isArrayBufferView,\r\n} = require('internal/util/types');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  markTransferMode,\r\n  kClone,\r\n  kDeserialize,\r\n} = require('internal/worker/js_transferable');\r\n\r\nconst {\r\n  kHandle,\r\n} = require('internal/crypto/util');\r\n\r\nlet lazyTranslatePeerCertificate;\r\n\r\nconst kInternalState = Symbol('kInternalState');\r\n\r\nfunction isX509Certificate(value) {\r\n  return value[kInternalState] !== undefined;\r\n}\r\n\r\nfunction getFlags(options = kEmptyObject) {\r\n  validateObject(options, 'options');\r\n  const {\r\n    subject = 'default',  // Can be 'default', 'always', or 'never'\r\n    wildcards = true,\r\n    partialWildcards = true,\r\n    multiLabelWildcards = false,\r\n    singleLabelSubdomains = false,\r\n  } = { ...options };\r\n  let flags = 0;\r\n  validateString(subject, 'options.subject');\r\n  validateBoolean(wildcards, 'options.wildcards');\r\n  validateBoolean(partialWildcards, 'options.partialWildcards');\r\n  validateBoolean(multiLabelWildcards, 'options.multiLabelWildcards');\r\n  validateBoolean(singleLabelSubdomains, 'options.singleLabelSubdomains');\r\n  switch (subject) {\r\n    case 'default': /* Matches OpenSSL's default, no flags. */ break;\r\n    case 'always': flags |= X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT; break;\r\n    case 'never': flags |= X509_CHECK_FLAG_NEVER_CHECK_SUBJECT; break;\r\n    default:\r\n      throw new ERR_INVALID_ARG_VALUE('options.subject', subject);\r\n  }\r\n  if (!wildcards) flags |= X509_CHECK_FLAG_NO_WILDCARDS;\r\n  if (!partialWildcards) flags |= X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS;\r\n  if (multiLabelWildcards) flags |= X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS;\r\n  if (singleLabelSubdomains) flags |= X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS;\r\n  return flags;\r\n}\r\n\r\nclass InternalX509Certificate {\r\n  [kInternalState] = new SafeMap();\r\n\r\n  constructor(handle) {\r\n    markTransferMode(this, true, false);\r\n    this[kHandle] = handle;\r\n  }\r\n}\r\n\r\nclass X509Certificate {\r\n  [kInternalState] = new SafeMap();\r\n\r\n  constructor(buffer) {\r\n    if (typeof buffer === 'string')\r\n      buffer = Buffer.from(buffer);\r\n    if (!isArrayBufferView(buffer)) {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'buffer',\r\n        ['string', 'Buffer', 'TypedArray', 'DataView'],\r\n        buffer);\r\n    }\r\n    markTransferMode(this, true, false);\r\n    this[kHandle] = parseX509(buffer);\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (depth < 0)\r\n      return this;\r\n\r\n    const opts = {\r\n      ...options,\r\n      depth: options.depth == null ? null : options.depth - 1,\r\n    };\r\n\r\n    return `X509Certificate ${inspect({\r\n      subject: this.subject,\r\n      subjectAltName: this.subjectAltName,\r\n      issuer: this.issuer,\r\n      infoAccess: this.infoAccess,\r\n      validFrom: this.validFrom,\r\n      validTo: this.validTo,\r\n      fingerprint: this.fingerprint,\r\n      fingerprint256: this.fingerprint256,\r\n      fingerprint512: this.fingerprint512,\r\n      keyUsage: this.keyUsage,\r\n      serialNumber: this.serialNumber,\r\n    }, opts)}`;\r\n  }\r\n\r\n  [kClone]() {\r\n    const handle = this[kHandle];\r\n    return {\r\n      data: { handle },\r\n      deserializeInfo: 'internal/crypto/x509:InternalX509Certificate',\r\n    };\r\n  }\r\n\r\n  [kDeserialize]({ handle }) {\r\n    this[kHandle] = handle;\r\n  }\r\n\r\n  get subject() {\r\n    let value = this[kInternalState].get('subject');\r\n    if (value === undefined) {\r\n      value = this[kHandle].subject();\r\n      this[kInternalState].set('subject', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  get subjectAltName() {\r\n    let value = this[kInternalState].get('subjectAltName');\r\n    if (value === undefined) {\r\n      value = this[kHandle].subjectAltName();\r\n      this[kInternalState].set('subjectAltName', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  get issuer() {\r\n    let value = this[kInternalState].get('issuer');\r\n    if (value === undefined) {\r\n      value = this[kHandle].issuer();\r\n      this[kInternalState].set('issuer', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  get issuerCertificate() {\r\n    let value = this[kInternalState].get('issuerCertificate');\r\n    if (value === undefined) {\r\n      const cert = this[kHandle].getIssuerCert();\r\n      if (cert)\r\n        value = new InternalX509Certificate(this[kHandle].getIssuerCert());\r\n      this[kInternalState].set('issuerCertificate', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  get infoAccess() {\r\n    let value = this[kInternalState].get('infoAccess');\r\n    if (value === undefined) {\r\n      value = this[kHandle].infoAccess();\r\n      this[kInternalState].set('infoAccess', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  get validFrom() {\r\n    let value = this[kInternalState].get('validFrom');\r\n    if (value === undefined) {\r\n      value = this[kHandle].validFrom();\r\n      this[kInternalState].set('validFrom', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  get validTo() {\r\n    let value = this[kInternalState].get('validTo');\r\n    if (value === undefined) {\r\n      value = this[kHandle].validTo();\r\n      this[kInternalState].set('validTo', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  get fingerprint() {\r\n    let value = this[kInternalState].get('fingerprint');\r\n    if (value === undefined) {\r\n      value = this[kHandle].fingerprint();\r\n      this[kInternalState].set('fingerprint', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  get fingerprint256() {\r\n    let value = this[kInternalState].get('fingerprint256');\r\n    if (value === undefined) {\r\n      value = this[kHandle].fingerprint256();\r\n      this[kInternalState].set('fingerprint256', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  get fingerprint512() {\r\n    let value = this[kInternalState].get('fingerprint512');\r\n    if (value === undefined) {\r\n      value = this[kHandle].fingerprint512();\r\n      this[kInternalState].set('fingerprint512', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  get keyUsage() {\r\n    let value = this[kInternalState].get('keyUsage');\r\n    if (value === undefined) {\r\n      value = this[kHandle].keyUsage();\r\n      this[kInternalState].set('keyUsage', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  get serialNumber() {\r\n    let value = this[kInternalState].get('serialNumber');\r\n    if (value === undefined) {\r\n      value = this[kHandle].serialNumber();\r\n      this[kInternalState].set('serialNumber', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  get raw() {\r\n    let value = this[kInternalState].get('raw');\r\n    if (value === undefined) {\r\n      value = this[kHandle].raw();\r\n      this[kInternalState].set('raw', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  get publicKey() {\r\n    let value = this[kInternalState].get('publicKey');\r\n    if (value === undefined) {\r\n      value = new PublicKeyObject(this[kHandle].publicKey());\r\n      this[kInternalState].set('publicKey', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  toString() {\r\n    let value = this[kInternalState].get('pem');\r\n    if (value === undefined) {\r\n      value = this[kHandle].pem();\r\n      this[kInternalState].set('pem', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  // There's no standardized JSON encoding for X509 certs so we\r\n  // fallback to providing the PEM encoding as a string.\r\n  toJSON() { return this.toString(); }\r\n\r\n  get ca() {\r\n    let value = this[kInternalState].get('ca');\r\n    if (value === undefined) {\r\n      value = this[kHandle].checkCA();\r\n      this[kInternalState].set('ca', value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  checkHost(name, options) {\r\n    validateString(name, 'name');\r\n    return this[kHandle].checkHost(name, getFlags(options));\r\n  }\r\n\r\n  checkEmail(email, options) {\r\n    validateString(email, 'email');\r\n    return this[kHandle].checkEmail(email, getFlags(options));\r\n  }\r\n\r\n  checkIP(ip, options) {\r\n    validateString(ip, 'ip');\r\n    // The options argument is currently undocumented since none of the options\r\n    // have any effect on the behavior of this function. However, we still parse\r\n    // the options argument in case OpenSSL adds flags in the future that do\r\n    // affect the behavior of X509_check_ip. This ensures that no invalid values\r\n    // are passed as the second argument in the meantime.\r\n    return this[kHandle].checkIP(ip, getFlags(options));\r\n  }\r\n\r\n  checkIssued(otherCert) {\r\n    if (!isX509Certificate(otherCert))\r\n      throw new ERR_INVALID_ARG_TYPE('otherCert', 'X509Certificate', otherCert);\r\n    return this[kHandle].checkIssued(otherCert[kHandle]);\r\n  }\r\n\r\n  checkPrivateKey(pkey) {\r\n    if (!isKeyObject(pkey))\r\n      throw new ERR_INVALID_ARG_TYPE('pkey', 'KeyObject', pkey);\r\n    if (pkey.type !== 'private')\r\n      throw new ERR_INVALID_ARG_VALUE('pkey', pkey);\r\n    return this[kHandle].checkPrivateKey(pkey[kHandle]);\r\n  }\r\n\r\n  verify(pkey) {\r\n    if (!isKeyObject(pkey))\r\n      throw new ERR_INVALID_ARG_TYPE('pkey', 'KeyObject', pkey);\r\n    if (pkey.type !== 'public')\r\n      throw new ERR_INVALID_ARG_VALUE('pkey', pkey);\r\n    return this[kHandle].verify(pkey[kHandle]);\r\n  }\r\n\r\n  toLegacyObject() {\r\n    // TODO(tniessen): do not depend on translatePeerCertificate here, return\r\n    // the correct legacy representation from the binding\r\n    lazyTranslatePeerCertificate ??=\r\n      require('_tls_common').translatePeerCertificate;\r\n    return lazyTranslatePeerCertificate(this[kHandle].toLegacy());\r\n  }\r\n}\r\n\r\nInternalX509Certificate.prototype.constructor = X509Certificate;\r\nObjectSetPrototypeOf(\r\n  InternalX509Certificate.prototype,\r\n  X509Certificate.prototype);\r\n\r\nmodule.exports = {\r\n  X509Certificate,\r\n  InternalX509Certificate,\r\n  isX509Certificate,\r\n};\r\n"
  },
  "136": {
    "metadata": {
      "scriptId": "136",
      "url": "node:internal/crypto/certificate",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 53,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "e832d348ebf7414bc96110d730a610a8db3b47de58fb719c8c1e8685424dfc27",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1599,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/crypto/certificate"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  certExportChallenge,\r\n  certExportPublicKey,\r\n  certVerifySpkac,\r\n} = internalBinding('crypto');\r\n\r\nconst {\r\n  getArrayBufferOrView,\r\n} = require('internal/crypto/util');\r\n\r\n// The functions contained in this file cover the SPKAC format\r\n// (also referred to as Netscape SPKI). A general description of\r\n// the format can be found at https://en.wikipedia.org/wiki/SPKAC\r\n\r\nfunction verifySpkac(spkac, encoding) {\r\n  return certVerifySpkac(\r\n    getArrayBufferOrView(spkac, 'spkac', encoding));\r\n}\r\n\r\nfunction exportPublicKey(spkac, encoding) {\r\n  return certExportPublicKey(\r\n    getArrayBufferOrView(spkac, 'spkac', encoding));\r\n}\r\n\r\nfunction exportChallenge(spkac, encoding) {\r\n  return certExportChallenge(\r\n    getArrayBufferOrView(spkac, 'spkac', encoding));\r\n}\r\n\r\n// The legacy implementation of this exposed the Certificate\r\n// object and required that users create an instance before\r\n// calling the member methods. This API pattern has been\r\n// deprecated, however, as the method implementations do not\r\n// rely on any object state.\r\n\r\n// For backwards compatibility reasons, this cannot be converted into a\r\n// ES6 Class.\r\nfunction Certificate() {\r\n  if (!(this instanceof Certificate))\r\n    return new Certificate();\r\n}\r\n\r\nCertificate.prototype.verifySpkac = verifySpkac;\r\nCertificate.prototype.exportPublicKey = exportPublicKey;\r\nCertificate.prototype.exportChallenge = exportChallenge;\r\n\r\nCertificate.exportChallenge = exportChallenge;\r\nCertificate.exportPublicKey = exportPublicKey;\r\nCertificate.verifySpkac = verifySpkac;\r\n\r\nmodule.exports = Certificate;\r\n"
  },
  "137": {
    "metadata": {
      "scriptId": "137",
      "url": "node:internal/tls/secure-pair",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 87,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "49bd30ef349f23abd7d7380b3444d089635abb0cfc15eb48e65b7f621369130b",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2078,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/tls/secure-pair"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ReflectConstruct,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst EventEmitter = require('events');\r\nconst { kEmptyObject } = require('internal/util');\r\nconst { Duplex } = require('stream');\r\nconst _tls_wrap = require('_tls_wrap');\r\nconst _tls_common = require('_tls_common');\r\n\r\nconst kCallback = Symbol('Callback');\r\nconst kOtherSide = Symbol('Other');\r\n\r\nclass DuplexSocket extends Duplex {\r\n  constructor() {\r\n    super();\r\n    this[kCallback] = null;\r\n    this[kOtherSide] = null;\r\n  }\r\n\r\n  _read() {\r\n    const callback = this[kCallback];\r\n    if (callback) {\r\n      this[kCallback] = null;\r\n      callback();\r\n    }\r\n  }\r\n\r\n  _write(chunk, encoding, callback) {\r\n    if (chunk.length === 0) {\r\n      process.nextTick(callback);\r\n    } else {\r\n      this[kOtherSide].push(chunk);\r\n      this[kOtherSide][kCallback] = callback;\r\n    }\r\n  }\r\n\r\n  _final(callback) {\r\n    this[kOtherSide].on('end', callback);\r\n    this[kOtherSide].push(null);\r\n  }\r\n}\r\n\r\nclass DuplexPair {\r\n  constructor() {\r\n    this.socket1 = new DuplexSocket();\r\n    this.socket2 = new DuplexSocket();\r\n    this.socket1[kOtherSide] = this.socket2;\r\n    this.socket2[kOtherSide] = this.socket1;\r\n  }\r\n}\r\n\r\nclass SecurePair extends EventEmitter {\r\n  constructor(secureContext = _tls_common.createSecureContext(),\r\n              isServer = false,\r\n              requestCert = !isServer,\r\n              rejectUnauthorized = false,\r\n              options = kEmptyObject) {\r\n    super();\r\n    const { socket1, socket2 } = new DuplexPair();\r\n\r\n    this.server = options.server;\r\n    this.credentials = secureContext;\r\n\r\n    this.encrypted = socket1;\r\n    this.cleartext = new _tls_wrap.TLSSocket(socket2, {\r\n      secureContext,\r\n      isServer,\r\n      requestCert,\r\n      rejectUnauthorized,\r\n      ...options,\r\n    });\r\n    this.cleartext.once('secure', () => this.emit('secure'));\r\n  }\r\n\r\n  destroy() {\r\n    this.cleartext.destroy();\r\n    this.encrypted.destroy();\r\n  }\r\n}\r\n\r\nexports.createSecurePair = function createSecurePair(...args) {\r\n  return ReflectConstruct(SecurePair, args);\r\n};\r\n"
  },
  "138": {
    "metadata": {
      "scriptId": "138",
      "url": "node:internal/tls/secure-context",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 321,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "d96b9fb9af88a2b7aaa7abe6517e4792327ce0f7f14b36eaca5c26f8fb6cf184",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 9815,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/tls/secure-context"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeJoin,\r\n  StringPrototypeSplit,\r\n  StringPrototypeStartsWith,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  kEmptyObject,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  isArrayBufferView,\r\n} = require('internal/util/types');\r\n\r\nconst {\r\n  validateBuffer,\r\n  validateInt32,\r\n  validateObject,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  toBuf,\r\n} = require('internal/crypto/util');\r\n\r\nconst {\r\n  crypto: {\r\n    TLS1_2_VERSION,\r\n    TLS1_3_VERSION,\r\n  },\r\n} = internalBinding('constants');\r\n\r\nfunction getDefaultEcdhCurve() {\r\n  // We do it this way because DEFAULT_ECDH_CURVE can be\r\n  // changed by users, so we need to grab the current\r\n  // value, but we want the evaluation to be lazy.\r\n  return require('tls').DEFAULT_ECDH_CURVE || 'auto';\r\n}\r\n\r\nfunction getDefaultCiphers() {\r\n  // We do it this way because DEFAULT_CIPHERS can be\r\n  // changed by users, so we need to grab the current\r\n  // value, but we want the evaluation to be lazy.\r\n  return require('tls').DEFAULT_CIPHERS;\r\n}\r\n\r\nfunction addCACerts(context, certs, name) {\r\n  ArrayPrototypeForEach(certs, (cert) => {\r\n    validateKeyOrCertOption(name, cert);\r\n    context.addCACert(cert);\r\n  });\r\n}\r\n\r\nfunction setCerts(context, certs, name) {\r\n  ArrayPrototypeForEach(certs, (cert) => {\r\n    validateKeyOrCertOption(name, cert);\r\n    context.setCert(cert);\r\n  });\r\n}\r\n\r\nfunction validateKeyOrCertOption(name, value) {\r\n  if (typeof value !== 'string' && !isArrayBufferView(value)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      name,\r\n      [\r\n        'string',\r\n        'Buffer',\r\n        'TypedArray',\r\n        'DataView',\r\n      ],\r\n      value,\r\n    );\r\n  }\r\n}\r\n\r\nfunction setKey(context, key, passphrase, name) {\r\n  validateKeyOrCertOption(`${name}.key`, key);\r\n  if (passphrase !== undefined && passphrase !== null)\r\n    validateString(passphrase, `${name}.passphrase`);\r\n  context.setKey(key, passphrase);\r\n}\r\n\r\nfunction processCiphers(ciphers, name) {\r\n  ciphers = StringPrototypeSplit(ciphers || getDefaultCiphers(), ':');\r\n\r\n  const cipherList =\r\n    ArrayPrototypeJoin(\r\n      ArrayPrototypeFilter(\r\n        ciphers,\r\n        (cipher) => {\r\n          if (cipher.length === 0) return false;\r\n          if (StringPrototypeStartsWith(cipher, 'TLS_')) return false;\r\n          if (StringPrototypeStartsWith(cipher, '!TLS_')) return false;\r\n          return true;\r\n        }), ':');\r\n\r\n  const cipherSuites =\r\n    ArrayPrototypeJoin(\r\n      ArrayPrototypeFilter(\r\n        ciphers,\r\n        (cipher) => {\r\n          if (cipher.length === 0) return false;\r\n          if (StringPrototypeStartsWith(cipher, 'TLS_')) return true;\r\n          if (StringPrototypeStartsWith(cipher, '!TLS_')) return true;\r\n          return false;\r\n        }), ':');\r\n\r\n  // Specifying empty cipher suites for both TLS1.2 and TLS1.3 is invalid, its\r\n  // not possible to handshake with no suites.\r\n  if (cipherSuites === '' && cipherList === '')\r\n    throw new ERR_INVALID_ARG_VALUE(name, ciphers);\r\n\r\n  return { cipherList, cipherSuites };\r\n}\r\n\r\nfunction configSecureContext(context, options = kEmptyObject, name = 'options') {\r\n  validateObject(options, name);\r\n\r\n  const {\r\n    ca,\r\n    cert,\r\n    ciphers = getDefaultCiphers(),\r\n    clientCertEngine,\r\n    crl,\r\n    dhparam,\r\n    ecdhCurve = getDefaultEcdhCurve(),\r\n    key,\r\n    passphrase,\r\n    pfx,\r\n    privateKeyIdentifier,\r\n    privateKeyEngine,\r\n    sessionIdContext,\r\n    sessionTimeout,\r\n    sigalgs,\r\n    ticketKeys,\r\n  } = options;\r\n\r\n  // Set the cipher list and cipher suite before anything else because\r\n  // @SECLEVEL=<n> changes the security level and that affects subsequent\r\n  // operations.\r\n  if (ciphers !== undefined && ciphers !== null)\r\n    validateString(ciphers, `${name}.ciphers`);\r\n\r\n  // Work around an OpenSSL API quirk. cipherList is for TLSv1.2 and below,\r\n  // cipherSuites is for TLSv1.3 (and presumably any later versions). TLSv1.3\r\n  // cipher suites all have a standard name format beginning with TLS_, so split\r\n  // the ciphers and pass them to the appropriate API.\r\n  const {\r\n    cipherList,\r\n    cipherSuites,\r\n  } = processCiphers(ciphers, `${name}.ciphers`);\r\n\r\n  if (cipherSuites !== '')\r\n    context.setCipherSuites(cipherSuites);\r\n  context.setCiphers(cipherList);\r\n\r\n  if (cipherList === '' &&\r\n      context.getMinProto() < TLS1_3_VERSION &&\r\n      context.getMaxProto() > TLS1_2_VERSION) {\r\n    context.setMinProto(TLS1_3_VERSION);\r\n  }\r\n\r\n  // Add CA before the cert to be able to load cert's issuer in C++ code.\r\n  // NOTE(@jasnell): ca, cert, and key are permitted to be falsy, so do not\r\n  // change the checks to !== undefined checks.\r\n  if (ca) {\r\n    addCACerts(context, ArrayIsArray(ca) ? ca : [ca], `${name}.ca`);\r\n  } else {\r\n    context.addRootCerts();\r\n  }\r\n\r\n  if (cert) {\r\n    setCerts(context, ArrayIsArray(cert) ? cert : [cert], `${name}.cert`);\r\n  }\r\n\r\n  // Set the key after the cert.\r\n  // `ssl_set_pkey` returns `0` when the key does not match the cert, but\r\n  // `ssl_set_cert` returns `1` and nullifies the key in the SSL structure\r\n  // which leads to the crash later on.\r\n  if (key) {\r\n    if (ArrayIsArray(key)) {\r\n      for (let i = 0; i < key.length; ++i) {\r\n        const val = key[i];\r\n        const pem = (\r\n          val?.pem !== undefined ? val.pem : val);\r\n        const pass = (\r\n          val?.passphrase !== undefined ? val.passphrase : passphrase);\r\n        setKey(context, pem, pass, name);\r\n      }\r\n    } else {\r\n      setKey(context, key, passphrase, name);\r\n    }\r\n  }\r\n\r\n  if (sigalgs !== undefined && sigalgs !== null) {\r\n    validateString(sigalgs, `${name}.sigalgs`);\r\n\r\n    if (sigalgs === '')\r\n      throw new ERR_INVALID_ARG_VALUE(`${name}.sigalgs`, sigalgs);\r\n\r\n    context.setSigalgs(sigalgs);\r\n  }\r\n\r\n  if (privateKeyIdentifier !== undefined && privateKeyIdentifier !== null) {\r\n    if (privateKeyEngine === undefined || privateKeyEngine === null) {\r\n      // Engine is required when privateKeyIdentifier is present\r\n      throw new ERR_INVALID_ARG_VALUE(`${name}.privateKeyEngine`,\r\n                                      privateKeyEngine);\r\n    }\r\n    if (key) {\r\n      // Both data key and engine key can't be set at the same time\r\n      throw new ERR_INVALID_ARG_VALUE(`${name}.privateKeyIdentifier`,\r\n                                      privateKeyIdentifier);\r\n    }\r\n\r\n    if (typeof privateKeyIdentifier === 'string' &&\r\n        typeof privateKeyEngine === 'string') {\r\n      if (context.setEngineKey)\r\n        context.setEngineKey(privateKeyIdentifier, privateKeyEngine);\r\n      else\r\n        throw new ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED();\r\n    } else if (typeof privateKeyIdentifier !== 'string') {\r\n      throw new ERR_INVALID_ARG_TYPE(`${name}.privateKeyIdentifier`,\r\n                                     ['string', 'null', 'undefined'],\r\n                                     privateKeyIdentifier);\r\n    } else {\r\n      throw new ERR_INVALID_ARG_TYPE(`${name}.privateKeyEngine`,\r\n                                     ['string', 'null', 'undefined'],\r\n                                     privateKeyEngine);\r\n    }\r\n  }\r\n\r\n  validateString(ecdhCurve, `${name}.ecdhCurve`);\r\n  context.setECDHCurve(ecdhCurve);\r\n\r\n  if (dhparam !== undefined && dhparam !== null) {\r\n    validateKeyOrCertOption(`${name}.dhparam`, dhparam);\r\n    const warning = context.setDHParam(dhparam === 'auto' || dhparam);\r\n    if (warning)\r\n      process.emitWarning(warning, 'SecurityWarning');\r\n  }\r\n\r\n  if (crl !== undefined && crl !== null) {\r\n    if (ArrayIsArray(crl)) {\r\n      for (const val of crl) {\r\n        validateKeyOrCertOption(`${name}.crl`, val);\r\n        context.addCRL(val);\r\n      }\r\n    } else {\r\n      validateKeyOrCertOption(`${name}.crl`, crl);\r\n      context.addCRL(crl);\r\n    }\r\n  }\r\n\r\n  if (sessionIdContext !== undefined && sessionIdContext !== null) {\r\n    validateString(sessionIdContext, `${name}.sessionIdContext`);\r\n    context.setSessionIdContext(sessionIdContext);\r\n  }\r\n\r\n  if (pfx !== undefined && pfx !== null) {\r\n    if (ArrayIsArray(pfx)) {\r\n      ArrayPrototypeForEach(pfx, (val) => {\r\n        const raw = val.buf || val;\r\n        const pass = val.passphrase || passphrase;\r\n        if (pass !== undefined && pass !== null) {\r\n          context.loadPKCS12(toBuf(raw), toBuf(pass));\r\n        } else {\r\n          context.loadPKCS12(toBuf(raw));\r\n        }\r\n      });\r\n    } else if (passphrase) {\r\n      context.loadPKCS12(toBuf(pfx), toBuf(passphrase));\r\n    } else {\r\n      context.loadPKCS12(toBuf(pfx));\r\n    }\r\n  }\r\n\r\n  if (typeof clientCertEngine === 'string') {\r\n    if (typeof context.setClientCertEngine !== 'function')\r\n      throw new ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED();\r\n    else\r\n      context.setClientCertEngine(clientCertEngine);\r\n  } else if (clientCertEngine !== undefined && clientCertEngine !== null) {\r\n    throw new ERR_INVALID_ARG_TYPE(`${name}.clientCertEngine`,\r\n                                   ['string', 'null', 'undefined'],\r\n                                   clientCertEngine);\r\n  }\r\n\r\n  if (ticketKeys !== undefined && ticketKeys !== null) {\r\n    validateBuffer(ticketKeys, `${name}.ticketKeys`);\r\n    if (ticketKeys.byteLength !== 48) {\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        `${name}.ticketKeys`,\r\n        ticketKeys.byteLength,\r\n        'must be exactly 48 bytes');\r\n    }\r\n    context.setTicketKeys(ticketKeys);\r\n  }\r\n\r\n  if (sessionTimeout !== undefined && sessionTimeout !== null) {\r\n    validateInt32(sessionTimeout, `${name}.sessionTimeout`, 0);\r\n    context.setSessionTimeout(sessionTimeout);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  configSecureContext,\r\n};\r\n"
  },
  "139": {
    "metadata": {
      "scriptId": "139",
      "url": "node:assert",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1079,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "5ec67d989d64c4a07a045b36e8b31205dfbb6eb29973a5914bf021a5a0ccac89",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 33297,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:assert"
    },
    "source": "// Originally from narwhal.js (http://narwhaljs.org)\r\n// Copyright (c) 2009 Thomas Robinson <280north.com>\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the 'Software'), to\r\n// deal in the Software without restriction, including without limitation the\r\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n// sell copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\r\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeShift,\r\n  ArrayPrototypeSlice,\r\n  Error,\r\n  ErrorCaptureStackTrace,\r\n  FunctionPrototypeBind,\r\n  NumberIsNaN,\r\n  ObjectAssign,\r\n  ObjectIs,\r\n  ObjectKeys,\r\n  ObjectPrototypeIsPrototypeOf,\r\n  ReflectApply,\r\n  RegExpPrototypeExec,\r\n  RegExpPrototypeSymbolReplace,\r\n  SafeMap,\r\n  String,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeReplace,\r\n  StringPrototypeSlice,\r\n  StringPrototypeSplit,\r\n  StringPrototypeStartsWith,\r\n} = primordials;\r\n\r\nconst { Buffer } = require('buffer');\r\nconst {\r\n  codes: {\r\n    ERR_AMBIGUOUS_ARGUMENT,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_RETURN_VALUE,\r\n    ERR_MISSING_ARGS,\r\n  },\r\n  isErrorStackTraceLimitWritable,\r\n  overrideStackTrace,\r\n} = require('internal/errors');\r\nconst AssertionError = require('internal/assert/assertion_error');\r\nconst { openSync, closeSync, readSync } = require('fs');\r\nconst { inspect } = require('internal/util/inspect');\r\nconst { isPromise, isRegExp } = require('internal/util/types');\r\nconst { EOL } = require('internal/constants');\r\nconst { BuiltinModule } = require('internal/bootstrap/realm');\r\nconst { isError, deprecate } = require('internal/util');\r\n\r\nconst errorCache = new SafeMap();\r\nconst CallTracker = require('internal/assert/calltracker');\r\nconst {\r\n  validateFunction,\r\n} = require('internal/validators');\r\nconst { fileURLToPath } = require('internal/url');\r\n\r\nlet isDeepEqual;\r\nlet isDeepStrictEqual;\r\nlet parseExpressionAt;\r\nlet findNodeAround;\r\nlet tokenizer;\r\nlet decoder;\r\n\r\nfunction lazyLoadComparison() {\r\n  const comparison = require('internal/util/comparisons');\r\n  isDeepEqual = comparison.isDeepEqual;\r\n  isDeepStrictEqual = comparison.isDeepStrictEqual;\r\n}\r\n\r\n// Escape control characters but not \\n and \\t to keep the line breaks and\r\n// indentation intact.\r\n// eslint-disable-next-line no-control-regex\r\nconst escapeSequencesRegExp = /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f]/g;\r\nconst meta = [\r\n  '\\\\u0000', '\\\\u0001', '\\\\u0002', '\\\\u0003', '\\\\u0004',\r\n  '\\\\u0005', '\\\\u0006', '\\\\u0007', '\\\\b', '',\r\n  '', '\\\\u000b', '\\\\f', '', '\\\\u000e',\r\n  '\\\\u000f', '\\\\u0010', '\\\\u0011', '\\\\u0012', '\\\\u0013',\r\n  '\\\\u0014', '\\\\u0015', '\\\\u0016', '\\\\u0017', '\\\\u0018',\r\n  '\\\\u0019', '\\\\u001a', '\\\\u001b', '\\\\u001c', '\\\\u001d',\r\n  '\\\\u001e', '\\\\u001f',\r\n];\r\n\r\nconst escapeFn = (str) => meta[StringPrototypeCharCodeAt(str, 0)];\r\n\r\nlet warned = false;\r\n\r\n// The assert module provides functions that throw\r\n// AssertionError's when particular conditions are not met. The\r\n// assert module must conform to the following interface.\r\n\r\nconst assert = module.exports = ok;\r\n\r\nconst NO_EXCEPTION_SENTINEL = {};\r\n\r\n// All of the following functions must throw an AssertionError\r\n// when a corresponding condition is not met, with a message that\r\n// may be undefined if not provided. All assertion methods provide\r\n// both the actual and expected values to the assertion error for\r\n// display purposes.\r\n\r\nfunction innerFail(obj) {\r\n  if (obj.message instanceof Error) throw obj.message;\r\n\r\n  throw new AssertionError(obj);\r\n}\r\n\r\n/**\r\n * @param {any} actual\r\n * @param {any} expected\r\n * @param {string | Error} [message]\r\n * @param {string} [operator]\r\n * @param {Function} [stackStartFn]\r\n */\r\nfunction fail(actual, expected, message, operator, stackStartFn) {\r\n  const argsLen = arguments.length;\r\n\r\n  let internalMessage = false;\r\n  if (actual == null && argsLen <= 1) {\r\n    internalMessage = true;\r\n    message = 'Failed';\r\n  } else if (argsLen === 1) {\r\n    message = actual;\r\n    actual = undefined;\r\n  } else {\r\n    if (warned === false) {\r\n      warned = true;\r\n      process.emitWarning(\r\n        'assert.fail() with more than one argument is deprecated. ' +\r\n          'Please use assert.strictEqual() instead or only pass a message.',\r\n        'DeprecationWarning',\r\n        'DEP0094',\r\n      );\r\n    }\r\n    if (argsLen === 2)\r\n      operator = '!=';\r\n  }\r\n\r\n  if (message instanceof Error) throw message;\r\n\r\n  const errArgs = {\r\n    actual,\r\n    expected,\r\n    operator: operator === undefined ? 'fail' : operator,\r\n    stackStartFn: stackStartFn || fail,\r\n    message,\r\n  };\r\n  const err = new AssertionError(errArgs);\r\n  if (internalMessage) {\r\n    err.generatedMessage = true;\r\n  }\r\n  throw err;\r\n}\r\n\r\nassert.fail = fail;\r\n\r\n// The AssertionError is defined in internal/error.\r\nassert.AssertionError = AssertionError;\r\n\r\nfunction findColumn(fd, column, code) {\r\n  if (code.length > column + 100) {\r\n    try {\r\n      return parseCode(code, column);\r\n    } catch {\r\n      // End recursion in case no code could be parsed. The expression should\r\n      // have been found after 2500 characters, so stop trying.\r\n      if (code.length - column > 2500) {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw null;\r\n      }\r\n    }\r\n  }\r\n  // Read up to 2500 bytes more than necessary in columns. That way we address\r\n  // multi byte characters and read enough data to parse the code.\r\n  const bytesToRead = column - code.length + 2500;\r\n  const buffer = Buffer.allocUnsafe(bytesToRead);\r\n  const bytesRead = readSync(fd, buffer, 0, bytesToRead);\r\n  code += decoder.write(buffer.slice(0, bytesRead));\r\n  // EOF: fast path.\r\n  if (bytesRead < bytesToRead) {\r\n    return parseCode(code, column);\r\n  }\r\n  // Read potentially missing code.\r\n  return findColumn(fd, column, code);\r\n}\r\n\r\nfunction getCode(fd, line, column) {\r\n  let bytesRead = 0;\r\n  if (line === 0) {\r\n    // Special handle line number one. This is more efficient and simplifies the\r\n    // rest of the algorithm. Read more than the regular column number in bytes\r\n    // to prevent multiple reads in case multi byte characters are used.\r\n    return findColumn(fd, column, '');\r\n  }\r\n  let lines = 0;\r\n  // Prevent blocking the event loop by limiting the maximum amount of\r\n  // data that may be read.\r\n  let maxReads = 32; // bytesPerRead * maxReads = 512 KiB\r\n  const bytesPerRead = 16384;\r\n  // Use a single buffer up front that is reused until the call site is found.\r\n  let buffer = Buffer.allocUnsafe(bytesPerRead);\r\n  while (maxReads-- !== 0) {\r\n    // Only allocate a new buffer in case the needed line is found. All data\r\n    // before that can be discarded.\r\n    buffer = lines < line ? buffer : Buffer.allocUnsafe(bytesPerRead);\r\n    bytesRead = readSync(fd, buffer, 0, bytesPerRead);\r\n    // Read the buffer until the required code line is found.\r\n    for (let i = 0; i < bytesRead; i++) {\r\n      if (buffer[i] === 10 && ++lines === line) {\r\n        // If the end of file is reached, directly parse the code and return.\r\n        if (bytesRead < bytesPerRead) {\r\n          return parseCode(buffer.toString('utf8', i + 1, bytesRead), column);\r\n        }\r\n        // Check if the read code is sufficient or read more until the whole\r\n        // expression is read. Make sure multi byte characters are preserved\r\n        // properly by using the decoder.\r\n        const code = decoder.write(buffer.slice(i + 1, bytesRead));\r\n        return findColumn(fd, column, code);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction parseCode(code, offset) {\r\n  // Lazy load acorn.\r\n  if (parseExpressionAt === undefined) {\r\n    const Parser = require('internal/deps/acorn/acorn/dist/acorn').Parser;\r\n    ({ findNodeAround } = require('internal/deps/acorn/acorn-walk/dist/walk'));\r\n\r\n    parseExpressionAt = FunctionPrototypeBind(Parser.parseExpressionAt, Parser);\r\n    tokenizer = FunctionPrototypeBind(Parser.tokenizer, Parser);\r\n  }\r\n  let node;\r\n  let start;\r\n  // Parse the read code until the correct expression is found.\r\n  for (const token of tokenizer(code, { ecmaVersion: 'latest' })) {\r\n    start = token.start;\r\n    if (start > offset) {\r\n      // No matching expression found. This could happen if the assert\r\n      // expression is bigger than the provided buffer.\r\n      break;\r\n    }\r\n    try {\r\n      node = parseExpressionAt(code, start, { ecmaVersion: 'latest' });\r\n      // Find the CallExpression in the tree.\r\n      node = findNodeAround(node, offset, 'CallExpression');\r\n      if (node?.node.end >= offset) {\r\n        return [\r\n          node.node.start,\r\n          StringPrototypeReplace(StringPrototypeSlice(code,\r\n                                                      node.node.start, node.node.end),\r\n                                 escapeSequencesRegExp, escapeFn),\r\n        ];\r\n      }\r\n    // eslint-disable-next-line no-unused-vars\r\n    } catch (err) {\r\n      continue;\r\n    }\r\n  }\r\n  // eslint-disable-next-line no-throw-literal\r\n  throw null;\r\n}\r\n\r\nfunction getErrMessage(message, fn) {\r\n  const tmpLimit = Error.stackTraceLimit;\r\n  const errorStackTraceLimitIsWritable = isErrorStackTraceLimitWritable();\r\n  // Make sure the limit is set to 1. Otherwise it could fail (<= 0) or it\r\n  // does to much work.\r\n  if (errorStackTraceLimitIsWritable) Error.stackTraceLimit = 1;\r\n  // We only need the stack trace. To minimize the overhead use an object\r\n  // instead of an error.\r\n  const err = {};\r\n  ErrorCaptureStackTrace(err, fn);\r\n  if (errorStackTraceLimitIsWritable) Error.stackTraceLimit = tmpLimit;\r\n\r\n  overrideStackTrace.set(err, (_, stack) => stack);\r\n  const call = err.stack[0];\r\n\r\n  let filename = call.getFileName();\r\n  const line = call.getLineNumber() - 1;\r\n  let column = call.getColumnNumber() - 1;\r\n  let identifier;\r\n  let code;\r\n\r\n  if (filename) {\r\n    identifier = `${filename}${line}${column}`;\r\n\r\n    // Skip Node.js modules!\r\n    if (StringPrototypeStartsWith(filename, 'node:') &&\r\n        BuiltinModule.exists(StringPrototypeSlice(filename, 5))) {\r\n      errorCache.set(identifier, undefined);\r\n      return;\r\n    }\r\n  } else {\r\n    return message;\r\n  }\r\n\r\n  if (errorCache.has(identifier)) {\r\n    return errorCache.get(identifier);\r\n  }\r\n\r\n  let fd;\r\n  try {\r\n    // Set the stack trace limit to zero. This makes sure unexpected token\r\n    // errors are handled faster.\r\n    if (errorStackTraceLimitIsWritable) Error.stackTraceLimit = 0;\r\n\r\n    if (filename) {\r\n      if (decoder === undefined) {\r\n        const { StringDecoder } = require('string_decoder');\r\n        decoder = new StringDecoder('utf8');\r\n      }\r\n\r\n      // ESM file prop is a file proto. Convert that to path.\r\n      // This ensure opensync will not throw ENOENT for ESM files.\r\n      const fileProtoPrefix = 'file://';\r\n      if (StringPrototypeStartsWith(filename, fileProtoPrefix)) {\r\n        filename = fileURLToPath(filename);\r\n      }\r\n\r\n      fd = openSync(filename, 'r', 0o666);\r\n      // Reset column and message.\r\n      ({ 0: column, 1: message } = getCode(fd, line, column));\r\n      // Flush unfinished multi byte characters.\r\n      decoder.end();\r\n    } else {\r\n      for (let i = 0; i < line; i++) {\r\n        code = StringPrototypeSlice(code,\r\n                                    StringPrototypeIndexOf(code, '\\n') + 1);\r\n      }\r\n      ({ 0: column, 1: message } = parseCode(code, column));\r\n    }\r\n    // Always normalize indentation, otherwise the message could look weird.\r\n    if (StringPrototypeIncludes(message, '\\n')) {\r\n      if (EOL === '\\r\\n') {\r\n        message = RegExpPrototypeSymbolReplace(/\\r\\n/g, message, '\\n');\r\n      }\r\n      const frames = StringPrototypeSplit(message, '\\n');\r\n      message = ArrayPrototypeShift(frames);\r\n      for (const frame of frames) {\r\n        let pos = 0;\r\n        while (pos < column && (frame[pos] === ' ' || frame[pos] === '\\t')) {\r\n          pos++;\r\n        }\r\n        message += `\\n  ${StringPrototypeSlice(frame, pos)}`;\r\n      }\r\n    }\r\n    message = `The expression evaluated to a falsy value:\\n\\n  ${message}\\n`;\r\n    // Make sure to always set the cache! No matter if the message is\r\n    // undefined or not\r\n    errorCache.set(identifier, message);\r\n\r\n    return message;\r\n  } catch {\r\n    // Invalidate cache to prevent trying to read this part again.\r\n    errorCache.set(identifier, undefined);\r\n  } finally {\r\n    // Reset limit.\r\n    if (errorStackTraceLimitIsWritable) Error.stackTraceLimit = tmpLimit;\r\n    if (fd !== undefined)\r\n      closeSync(fd);\r\n  }\r\n}\r\n\r\nfunction innerOk(fn, argLen, value, message) {\r\n  if (!value) {\r\n    let generatedMessage = false;\r\n\r\n    if (argLen === 0) {\r\n      generatedMessage = true;\r\n      message = 'No value argument passed to `assert.ok()`';\r\n    } else if (message == null) {\r\n      generatedMessage = true;\r\n      message = getErrMessage(message, fn);\r\n    } else if (message instanceof Error) {\r\n      throw message;\r\n    }\r\n\r\n    const err = new AssertionError({\r\n      actual: value,\r\n      expected: true,\r\n      message,\r\n      operator: '==',\r\n      stackStartFn: fn,\r\n    });\r\n    err.generatedMessage = generatedMessage;\r\n    throw err;\r\n  }\r\n}\r\n\r\n/**\r\n * Pure assertion tests whether a value is truthy, as determined\r\n * by !!value.\r\n * @param {...any} args\r\n * @returns {void}\r\n */\r\nfunction ok(...args) {\r\n  innerOk(ok, args.length, ...args);\r\n}\r\nassert.ok = ok;\r\n\r\n/**\r\n * The equality assertion tests shallow, coercive equality with ==.\r\n * @param {any} actual\r\n * @param {any} expected\r\n * @param {string | Error} [message]\r\n * @returns {void}\r\n */\r\n/* eslint-disable no-restricted-properties */\r\nassert.equal = function equal(actual, expected, message) {\r\n  if (arguments.length < 2) {\r\n    throw new ERR_MISSING_ARGS('actual', 'expected');\r\n  }\r\n  // eslint-disable-next-line eqeqeq\r\n  if (actual != expected && (!NumberIsNaN(actual) || !NumberIsNaN(expected))) {\r\n    innerFail({\r\n      actual,\r\n      expected,\r\n      message,\r\n      operator: '==',\r\n      stackStartFn: equal,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * The non-equality assertion tests for whether two objects are not\r\n * equal with !=.\r\n * @param {any} actual\r\n * @param {any} expected\r\n * @param {string | Error} [message]\r\n * @returns {void}\r\n */\r\nassert.notEqual = function notEqual(actual, expected, message) {\r\n  if (arguments.length < 2) {\r\n    throw new ERR_MISSING_ARGS('actual', 'expected');\r\n  }\r\n  // eslint-disable-next-line eqeqeq\r\n  if (actual == expected || (NumberIsNaN(actual) && NumberIsNaN(expected))) {\r\n    innerFail({\r\n      actual,\r\n      expected,\r\n      message,\r\n      operator: '!=',\r\n      stackStartFn: notEqual,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * The deep equivalence assertion tests a deep equality relation.\r\n * @param {any} actual\r\n * @param {any} expected\r\n * @param {string | Error} [message]\r\n * @returns {void}\r\n */\r\nassert.deepEqual = function deepEqual(actual, expected, message) {\r\n  if (arguments.length < 2) {\r\n    throw new ERR_MISSING_ARGS('actual', 'expected');\r\n  }\r\n  if (isDeepEqual === undefined) lazyLoadComparison();\r\n  if (!isDeepEqual(actual, expected)) {\r\n    innerFail({\r\n      actual,\r\n      expected,\r\n      message,\r\n      operator: 'deepEqual',\r\n      stackStartFn: deepEqual,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * The deep non-equivalence assertion tests for any deep inequality.\r\n * @param {any} actual\r\n * @param {any} expected\r\n * @param {string | Error} [message]\r\n * @returns {void}\r\n */\r\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\r\n  if (arguments.length < 2) {\r\n    throw new ERR_MISSING_ARGS('actual', 'expected');\r\n  }\r\n  if (isDeepEqual === undefined) lazyLoadComparison();\r\n  if (isDeepEqual(actual, expected)) {\r\n    innerFail({\r\n      actual,\r\n      expected,\r\n      message,\r\n      operator: 'notDeepEqual',\r\n      stackStartFn: notDeepEqual,\r\n    });\r\n  }\r\n};\r\n/* eslint-enable */\r\n\r\n/**\r\n * The deep strict equivalence assertion tests a deep strict equality\r\n * relation.\r\n * @param {any} actual\r\n * @param {any} expected\r\n * @param {string | Error} [message]\r\n * @returns {void}\r\n */\r\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\r\n  if (arguments.length < 2) {\r\n    throw new ERR_MISSING_ARGS('actual', 'expected');\r\n  }\r\n  if (isDeepEqual === undefined) lazyLoadComparison();\r\n  if (!isDeepStrictEqual(actual, expected)) {\r\n    innerFail({\r\n      actual,\r\n      expected,\r\n      message,\r\n      operator: 'deepStrictEqual',\r\n      stackStartFn: deepStrictEqual,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * The deep strict non-equivalence assertion tests for any deep strict\r\n * inequality.\r\n * @param {any} actual\r\n * @param {any} expected\r\n * @param {string | Error} [message]\r\n * @returns {void}\r\n */\r\nassert.notDeepStrictEqual = notDeepStrictEqual;\r\nfunction notDeepStrictEqual(actual, expected, message) {\r\n  if (arguments.length < 2) {\r\n    throw new ERR_MISSING_ARGS('actual', 'expected');\r\n  }\r\n  if (isDeepEqual === undefined) lazyLoadComparison();\r\n  if (isDeepStrictEqual(actual, expected)) {\r\n    innerFail({\r\n      actual,\r\n      expected,\r\n      message,\r\n      operator: 'notDeepStrictEqual',\r\n      stackStartFn: notDeepStrictEqual,\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * The strict equivalence assertion tests a strict equality relation.\r\n * @param {any} actual\r\n * @param {any} expected\r\n * @param {string | Error} [message]\r\n * @returns {void}\r\n */\r\nassert.strictEqual = function strictEqual(actual, expected, message) {\r\n  if (arguments.length < 2) {\r\n    throw new ERR_MISSING_ARGS('actual', 'expected');\r\n  }\r\n  if (!ObjectIs(actual, expected)) {\r\n    innerFail({\r\n      actual,\r\n      expected,\r\n      message,\r\n      operator: 'strictEqual',\r\n      stackStartFn: strictEqual,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * The strict non-equivalence assertion tests for any strict inequality.\r\n * @param {any} actual\r\n * @param {any} expected\r\n * @param {string | Error} [message]\r\n * @returns {void}\r\n */\r\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\r\n  if (arguments.length < 2) {\r\n    throw new ERR_MISSING_ARGS('actual', 'expected');\r\n  }\r\n  if (ObjectIs(actual, expected)) {\r\n    innerFail({\r\n      actual,\r\n      expected,\r\n      message,\r\n      operator: 'notStrictEqual',\r\n      stackStartFn: notStrictEqual,\r\n    });\r\n  }\r\n};\r\n\r\nclass Comparison {\r\n  constructor(obj, keys, actual) {\r\n    for (const key of keys) {\r\n      if (key in obj) {\r\n        if (actual !== undefined &&\r\n            typeof actual[key] === 'string' &&\r\n            isRegExp(obj[key]) &&\r\n            RegExpPrototypeExec(obj[key], actual[key]) !== null) {\r\n          this[key] = actual[key];\r\n        } else {\r\n          this[key] = obj[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction compareExceptionKey(actual, expected, key, message, keys, fn) {\r\n  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {\r\n    if (!message) {\r\n      // Create placeholder objects to create a nice output.\r\n      const a = new Comparison(actual, keys);\r\n      const b = new Comparison(expected, keys, actual);\r\n\r\n      const err = new AssertionError({\r\n        actual: a,\r\n        expected: b,\r\n        operator: 'deepStrictEqual',\r\n        stackStartFn: fn,\r\n      });\r\n      err.actual = actual;\r\n      err.expected = expected;\r\n      err.operator = fn.name;\r\n      throw err;\r\n    }\r\n    innerFail({\r\n      actual,\r\n      expected,\r\n      message,\r\n      operator: fn.name,\r\n      stackStartFn: fn,\r\n    });\r\n  }\r\n}\r\n\r\nfunction expectedException(actual, expected, message, fn) {\r\n  let generatedMessage = false;\r\n  let throwError = false;\r\n\r\n  if (typeof expected !== 'function') {\r\n    // Handle regular expressions.\r\n    if (isRegExp(expected)) {\r\n      const str = String(actual);\r\n      if (RegExpPrototypeExec(expected, str) !== null)\r\n        return;\r\n\r\n      if (!message) {\r\n        generatedMessage = true;\r\n        message = 'The input did not match the regular expression ' +\r\n                  `${inspect(expected)}. Input:\\n\\n${inspect(str)}\\n`;\r\n      }\r\n      throwError = true;\r\n      // Handle primitives properly.\r\n    } else if (typeof actual !== 'object' || actual === null) {\r\n      const err = new AssertionError({\r\n        actual,\r\n        expected,\r\n        message,\r\n        operator: 'deepStrictEqual',\r\n        stackStartFn: fn,\r\n      });\r\n      err.operator = fn.name;\r\n      throw err;\r\n    } else {\r\n      // Handle validation objects.\r\n      const keys = ObjectKeys(expected);\r\n      // Special handle errors to make sure the name and the message are\r\n      // compared as well.\r\n      if (expected instanceof Error) {\r\n        ArrayPrototypePush(keys, 'name', 'message');\r\n      } else if (keys.length === 0) {\r\n        throw new ERR_INVALID_ARG_VALUE('error',\r\n                                        expected, 'may not be an empty object');\r\n      }\r\n      if (isDeepEqual === undefined) lazyLoadComparison();\r\n      for (const key of keys) {\r\n        if (typeof actual[key] === 'string' &&\r\n            isRegExp(expected[key]) &&\r\n            RegExpPrototypeExec(expected[key], actual[key]) !== null) {\r\n          continue;\r\n        }\r\n        compareExceptionKey(actual, expected, key, message, keys, fn);\r\n      }\r\n      return;\r\n    }\r\n  // Guard instanceof against arrow functions as they don't have a prototype.\r\n  // Check for matching Error classes.\r\n  } else if (expected.prototype !== undefined && actual instanceof expected) {\r\n    return;\r\n  } else if (ObjectPrototypeIsPrototypeOf(Error, expected)) {\r\n    if (!message) {\r\n      generatedMessage = true;\r\n      message = 'The error is expected to be an instance of ' +\r\n        `\"${expected.name}\". Received `;\r\n      if (isError(actual)) {\r\n        const name = (actual.constructor && actual.constructor.name) ||\r\n                     actual.name;\r\n        if (expected.name === name) {\r\n          message += 'an error with identical name but a different prototype.';\r\n        } else {\r\n          message += `\"${name}\"`;\r\n        }\r\n        if (actual.message) {\r\n          message += `\\n\\nError message:\\n\\n${actual.message}`;\r\n        }\r\n      } else {\r\n        message += `\"${inspect(actual, { depth: -1 })}\"`;\r\n      }\r\n    }\r\n    throwError = true;\r\n  } else {\r\n    // Check validation functions return value.\r\n    const res = ReflectApply(expected, {}, [actual]);\r\n    if (res !== true) {\r\n      if (!message) {\r\n        generatedMessage = true;\r\n        const name = expected.name ? `\"${expected.name}\" ` : '';\r\n        message = `The ${name}validation function is expected to return` +\r\n          ` \"true\". Received ${inspect(res)}`;\r\n\r\n        if (isError(actual)) {\r\n          message += `\\n\\nCaught error:\\n\\n${actual}`;\r\n        }\r\n      }\r\n      throwError = true;\r\n    }\r\n  }\r\n\r\n  if (throwError) {\r\n    const err = new AssertionError({\r\n      actual,\r\n      expected,\r\n      message,\r\n      operator: fn.name,\r\n      stackStartFn: fn,\r\n    });\r\n    err.generatedMessage = generatedMessage;\r\n    throw err;\r\n  }\r\n}\r\n\r\nfunction getActual(fn) {\r\n  validateFunction(fn, 'fn');\r\n  try {\r\n    fn();\r\n  } catch (e) {\r\n    return e;\r\n  }\r\n  return NO_EXCEPTION_SENTINEL;\r\n}\r\n\r\nfunction checkIsPromise(obj) {\r\n  // Accept native ES6 promises and promises that are implemented in a similar\r\n  // way. Do not accept thenables that use a function as `obj` and that have no\r\n  // `catch` handler.\r\n  return isPromise(obj) ||\r\n    (obj !== null && typeof obj === 'object' &&\r\n    typeof obj.then === 'function' &&\r\n    typeof obj.catch === 'function');\r\n}\r\n\r\nasync function waitForActual(promiseFn) {\r\n  let resultPromise;\r\n  if (typeof promiseFn === 'function') {\r\n    // Return a rejected promise if `promiseFn` throws synchronously.\r\n    resultPromise = promiseFn();\r\n    // Fail in case no promise is returned.\r\n    if (!checkIsPromise(resultPromise)) {\r\n      throw new ERR_INVALID_RETURN_VALUE('instance of Promise',\r\n                                         'promiseFn', resultPromise);\r\n    }\r\n  } else if (checkIsPromise(promiseFn)) {\r\n    resultPromise = promiseFn;\r\n  } else {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'promiseFn', ['Function', 'Promise'], promiseFn);\r\n  }\r\n\r\n  try {\r\n    await resultPromise;\r\n  } catch (e) {\r\n    return e;\r\n  }\r\n  return NO_EXCEPTION_SENTINEL;\r\n}\r\n\r\nfunction expectsError(stackStartFn, actual, error, message) {\r\n  if (typeof error === 'string') {\r\n    if (arguments.length === 4) {\r\n      throw new ERR_INVALID_ARG_TYPE('error',\r\n                                     ['Object', 'Error', 'Function', 'RegExp'],\r\n                                     error);\r\n    }\r\n    if (typeof actual === 'object' && actual !== null) {\r\n      if (actual.message === error) {\r\n        throw new ERR_AMBIGUOUS_ARGUMENT(\r\n          'error/message',\r\n          `The error message \"${actual.message}\" is identical to the message.`,\r\n        );\r\n      }\r\n    } else if (actual === error) {\r\n      throw new ERR_AMBIGUOUS_ARGUMENT(\r\n        'error/message',\r\n        `The error \"${actual}\" is identical to the message.`,\r\n      );\r\n    }\r\n    message = error;\r\n    error = undefined;\r\n  } else if (error != null &&\r\n             typeof error !== 'object' &&\r\n             typeof error !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE('error',\r\n                                   ['Object', 'Error', 'Function', 'RegExp'],\r\n                                   error);\r\n  }\r\n\r\n  if (actual === NO_EXCEPTION_SENTINEL) {\r\n    let details = '';\r\n    if (error && error.name) {\r\n      details += ` (${error.name})`;\r\n    }\r\n    details += message ? `: ${message}` : '.';\r\n    const fnType = stackStartFn === assert.rejects ? 'rejection' : 'exception';\r\n    innerFail({\r\n      actual: undefined,\r\n      expected: error,\r\n      operator: stackStartFn.name,\r\n      message: `Missing expected ${fnType}${details}`,\r\n      stackStartFn,\r\n    });\r\n  }\r\n\r\n  if (!error)\r\n    return;\r\n\r\n  expectedException(actual, error, message, stackStartFn);\r\n}\r\n\r\nfunction hasMatchingError(actual, expected) {\r\n  if (typeof expected !== 'function') {\r\n    if (isRegExp(expected)) {\r\n      const str = String(actual);\r\n      return RegExpPrototypeExec(expected, str) !== null;\r\n    }\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'expected', ['Function', 'RegExp'], expected,\r\n    );\r\n  }\r\n  // Guard instanceof against arrow functions as they don't have a prototype.\r\n  if (expected.prototype !== undefined && actual instanceof expected) {\r\n    return true;\r\n  }\r\n  if (ObjectPrototypeIsPrototypeOf(Error, expected)) {\r\n    return false;\r\n  }\r\n  return ReflectApply(expected, {}, [actual]) === true;\r\n}\r\n\r\nfunction expectsNoError(stackStartFn, actual, error, message) {\r\n  if (actual === NO_EXCEPTION_SENTINEL)\r\n    return;\r\n\r\n  if (typeof error === 'string') {\r\n    message = error;\r\n    error = undefined;\r\n  }\r\n\r\n  if (!error || hasMatchingError(actual, error)) {\r\n    const details = message ? `: ${message}` : '.';\r\n    const fnType = stackStartFn === assert.doesNotReject ?\r\n      'rejection' : 'exception';\r\n    innerFail({\r\n      actual,\r\n      expected: error,\r\n      operator: stackStartFn.name,\r\n      message: `Got unwanted ${fnType}${details}\\n` +\r\n               `Actual message: \"${actual && actual.message}\"`,\r\n      stackStartFn,\r\n    });\r\n  }\r\n  throw actual;\r\n}\r\n\r\n/**\r\n * Expects the function `promiseFn` to throw an error.\r\n * @param {() => any} promiseFn\r\n * @param {...any} [args]\r\n * @returns {void}\r\n */\r\nassert.throws = function throws(promiseFn, ...args) {\r\n  expectsError(throws, getActual(promiseFn), ...args);\r\n};\r\n\r\n/**\r\n * Expects `promiseFn` function or its value to reject.\r\n * @param {() => Promise<any>} promiseFn\r\n * @param {...any} [args]\r\n * @returns {Promise<void>}\r\n */\r\nassert.rejects = async function rejects(promiseFn, ...args) {\r\n  expectsError(rejects, await waitForActual(promiseFn), ...args);\r\n};\r\n\r\n/**\r\n * Asserts that the function `fn` does not throw an error.\r\n * @param {() => any} fn\r\n * @param {...any} [args]\r\n * @returns {void}\r\n */\r\nassert.doesNotThrow = function doesNotThrow(fn, ...args) {\r\n  expectsNoError(doesNotThrow, getActual(fn), ...args);\r\n};\r\n\r\n/**\r\n * Expects `fn` or its value to not reject.\r\n * @param {() => Promise<any>} fn\r\n * @param {...any} [args]\r\n * @returns {Promise<void>}\r\n */\r\nassert.doesNotReject = async function doesNotReject(fn, ...args) {\r\n  expectsNoError(doesNotReject, await waitForActual(fn), ...args);\r\n};\r\n\r\n/**\r\n * Throws `value` if the value is not `null` or `undefined`.\r\n * @param {any} err\r\n * @returns {void}\r\n */\r\nassert.ifError = function ifError(err) {\r\n  if (err !== null && err !== undefined) {\r\n    let message = 'ifError got unwanted exception: ';\r\n    if (typeof err === 'object' && typeof err.message === 'string') {\r\n      if (err.message.length === 0 && err.constructor) {\r\n        message += err.constructor.name;\r\n      } else {\r\n        message += err.message;\r\n      }\r\n    } else {\r\n      message += inspect(err);\r\n    }\r\n\r\n    const newErr = new AssertionError({\r\n      actual: err,\r\n      expected: null,\r\n      operator: 'ifError',\r\n      message,\r\n      stackStartFn: ifError,\r\n    });\r\n\r\n    // Make sure we actually have a stack trace!\r\n    const origStack = err.stack;\r\n\r\n    if (typeof origStack === 'string') {\r\n      // This will remove any duplicated frames from the error frames taken\r\n      // from within `ifError` and add the original error frames to the newly\r\n      // created ones.\r\n      const origStackStart = StringPrototypeIndexOf(origStack, '\\n    at');\r\n      if (origStackStart !== -1) {\r\n        const originalFrames = StringPrototypeSplit(\r\n          StringPrototypeSlice(origStack, origStackStart + 1),\r\n          '\\n',\r\n        );\r\n        // Filter all frames existing in err.stack.\r\n        let newFrames = StringPrototypeSplit(newErr.stack, '\\n');\r\n        for (const errFrame of originalFrames) {\r\n          // Find the first occurrence of the frame.\r\n          const pos = ArrayPrototypeIndexOf(newFrames, errFrame);\r\n          if (pos !== -1) {\r\n            // Only keep new frames.\r\n            newFrames = ArrayPrototypeSlice(newFrames, 0, pos);\r\n            break;\r\n          }\r\n        }\r\n        const stackStart = ArrayPrototypeJoin(newFrames, '\\n');\r\n        const stackEnd = ArrayPrototypeJoin(originalFrames, '\\n');\r\n        newErr.stack = `${stackStart}\\n${stackEnd}`;\r\n      }\r\n    }\r\n\r\n    throw newErr;\r\n  }\r\n};\r\n\r\nfunction internalMatch(string, regexp, message, fn) {\r\n  if (!isRegExp(regexp)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'regexp', 'RegExp', regexp,\r\n    );\r\n  }\r\n  const match = fn === assert.match;\r\n  if (typeof string !== 'string' ||\r\n      RegExpPrototypeExec(regexp, string) !== null !== match) {\r\n    if (message instanceof Error) {\r\n      throw message;\r\n    }\r\n\r\n    const generatedMessage = !message;\r\n\r\n    // 'The input was expected to not match the regular expression ' +\r\n    message = message || (typeof string !== 'string' ?\r\n      'The \"string\" argument must be of type string. Received type ' +\r\n        `${typeof string} (${inspect(string)})` :\r\n      (match ?\r\n        'The input did not match the regular expression ' :\r\n        'The input was expected to not match the regular expression ') +\r\n          `${inspect(regexp)}. Input:\\n\\n${inspect(string)}\\n`);\r\n    const err = new AssertionError({\r\n      actual: string,\r\n      expected: regexp,\r\n      message,\r\n      operator: fn.name,\r\n      stackStartFn: fn,\r\n    });\r\n    err.generatedMessage = generatedMessage;\r\n    throw err;\r\n  }\r\n}\r\n\r\n/**\r\n * Expects the `string` input to match the regular expression.\r\n * @param {string} string\r\n * @param {RegExp} regexp\r\n * @param {string | Error} [message]\r\n * @returns {void}\r\n */\r\nassert.match = function match(string, regexp, message) {\r\n  internalMatch(string, regexp, message, match);\r\n};\r\n\r\n/**\r\n * Expects the `string` input not to match the regular expression.\r\n * @param {string} string\r\n * @param {RegExp} regexp\r\n * @param {string | Error} [message]\r\n * @returns {void}\r\n */\r\nassert.doesNotMatch = function doesNotMatch(string, regexp, message) {\r\n  internalMatch(string, regexp, message, doesNotMatch);\r\n};\r\n\r\nassert.CallTracker = deprecate(CallTracker, 'assert.CallTracker is deprecated.', 'DEP0173');\r\n\r\n/**\r\n * Expose a strict only variant of assert.\r\n * @param {...any} args\r\n * @returns {void}\r\n */\r\nfunction strict(...args) {\r\n  innerOk(strict, args.length, ...args);\r\n}\r\n\r\nassert.strict = ObjectAssign(strict, assert, {\r\n  equal: assert.strictEqual,\r\n  deepEqual: assert.deepStrictEqual,\r\n  notEqual: assert.notStrictEqual,\r\n  notDeepEqual: assert.notDeepStrictEqual,\r\n});\r\n\r\nassert.strict.strict = assert.strict;\r\n"
  },
  "140": {
    "metadata": {
      "scriptId": "140",
      "url": "node:internal/assert/assertion_error",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 492,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "f1e99fffabd04e230392f5db51b3068694b779a5b4fe46b62842afd0c9e896a8",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 17596,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/assert/assertion_error"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypePop,\r\n  Error,\r\n  ErrorCaptureStackTrace,\r\n  MathMax,\r\n  ObjectDefineProperty,\r\n  ObjectGetPrototypeOf,\r\n  ObjectKeys,\r\n  String,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeRepeat,\r\n  StringPrototypeSlice,\r\n  StringPrototypeSplit,\r\n} = primordials;\r\n\r\nconst { inspect } = require('internal/util/inspect');\r\nconst {\r\n  removeColors,\r\n} = require('internal/util');\r\nconst colors = require('internal/util/colors');\r\nconst {\r\n  validateObject,\r\n} = require('internal/validators');\r\nconst { isErrorStackTraceLimitWritable } = require('internal/errors');\r\n\r\n\r\nconst kReadableOperator = {\r\n  deepStrictEqual: 'Expected values to be strictly deep-equal:',\r\n  strictEqual: 'Expected values to be strictly equal:',\r\n  strictEqualObject: 'Expected \"actual\" to be reference-equal to \"expected\":',\r\n  deepEqual: 'Expected values to be loosely deep-equal:',\r\n  notDeepStrictEqual: 'Expected \"actual\" not to be strictly deep-equal to:',\r\n  notStrictEqual: 'Expected \"actual\" to be strictly unequal to:',\r\n  notStrictEqualObject:\r\n    'Expected \"actual\" not to be reference-equal to \"expected\":',\r\n  notDeepEqual: 'Expected \"actual\" not to be loosely deep-equal to:',\r\n  notIdentical: 'Values have same structure but are not reference-equal:',\r\n  notDeepEqualUnequal: 'Expected values not to be loosely deep-equal:',\r\n};\r\n\r\n// Comparing short primitives should just show === / !== instead of using the\r\n// diff.\r\nconst kMaxShortLength = 12;\r\n\r\nfunction copyError(source) {\r\n  const keys = ObjectKeys(source);\r\n  const target = { __proto__: ObjectGetPrototypeOf(source) };\r\n  for (const key of keys) {\r\n    target[key] = source[key];\r\n  }\r\n  ObjectDefineProperty(target, 'message', { __proto__: null, value: source.message });\r\n  return target;\r\n}\r\n\r\nfunction inspectValue(val) {\r\n  // The util.inspect default values could be changed. This makes sure the\r\n  // error messages contain the necessary information nevertheless.\r\n  return inspect(\r\n    val,\r\n    {\r\n      compact: false,\r\n      customInspect: false,\r\n      depth: 1000,\r\n      maxArrayLength: Infinity,\r\n      // Assert compares only enumerable properties (with a few exceptions).\r\n      showHidden: false,\r\n      // Assert does not detect proxies currently.\r\n      showProxy: false,\r\n      sorted: true,\r\n      // Inspect getters as we also check them when comparing entries.\r\n      getters: true,\r\n    },\r\n  );\r\n}\r\n\r\nfunction createErrDiff(actual, expected, operator) {\r\n  let other = '';\r\n  let res = '';\r\n  let end = '';\r\n  let skipped = false;\r\n  const actualInspected = inspectValue(actual);\r\n  const actualLines = StringPrototypeSplit(actualInspected, '\\n');\r\n  const expectedLines = StringPrototypeSplit(inspectValue(expected), '\\n');\r\n\r\n  let i = 0;\r\n  let indicator = '';\r\n\r\n  // In case both values are objects or functions explicitly mark them as not\r\n  // reference equal for the `strictEqual` operator.\r\n  if (operator === 'strictEqual' &&\r\n      ((typeof actual === 'object' && actual !== null &&\r\n        typeof expected === 'object' && expected !== null) ||\r\n       (typeof actual === 'function' && typeof expected === 'function'))) {\r\n    operator = 'strictEqualObject';\r\n  }\r\n\r\n  // If \"actual\" and \"expected\" fit on a single line and they are not strictly\r\n  // equal, check further special handling.\r\n  if (actualLines.length === 1 && expectedLines.length === 1 &&\r\n    actualLines[0] !== expectedLines[0]) {\r\n    // Check for the visible length using the `removeColors()` function, if\r\n    // appropriate.\r\n    const c = inspect.defaultOptions.colors;\r\n    const actualRaw = c ? removeColors(actualLines[0]) : actualLines[0];\r\n    const expectedRaw = c ? removeColors(expectedLines[0]) : expectedLines[0];\r\n    const inputLength = actualRaw.length + expectedRaw.length;\r\n    // If the character length of \"actual\" and \"expected\" together is less than\r\n    // kMaxShortLength and if neither is an object and at least one of them is\r\n    // not `zero`, use the strict equal comparison to visualize the output.\r\n    if (inputLength <= kMaxShortLength) {\r\n      if ((typeof actual !== 'object' || actual === null) &&\r\n          (typeof expected !== 'object' || expected === null) &&\r\n          (actual !== 0 || expected !== 0)) { // -0 === +0\r\n        return `${kReadableOperator[operator]}\\n\\n` +\r\n            `${actualLines[0]} !== ${expectedLines[0]}\\n`;\r\n      }\r\n    } else if (operator !== 'strictEqualObject') {\r\n      // If the stderr is a tty and the input length is lower than the current\r\n      // columns per line, add a mismatch indicator below the output. If it is\r\n      // not a tty, use a default value of 80 characters.\r\n      const maxLength = process.stderr.isTTY ? process.stderr.columns : 80;\r\n      if (inputLength < maxLength) {\r\n        while (actualRaw[i] === expectedRaw[i]) {\r\n          i++;\r\n        }\r\n        // Ignore the first characters.\r\n        if (i > 2) {\r\n          // Add position indicator for the first mismatch in case it is a\r\n          // single line and the input length is less than the column length.\r\n          indicator = `\\n  ${StringPrototypeRepeat(' ', i)}^`;\r\n          i = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove all ending lines that match (this optimizes the output for\r\n  // readability by reducing the number of total changed lines).\r\n  let a = actualLines[actualLines.length - 1];\r\n  let b = expectedLines[expectedLines.length - 1];\r\n  while (a === b) {\r\n    if (i++ < 3) {\r\n      end = `\\n  ${a}${end}`;\r\n    } else {\r\n      other = a;\r\n    }\r\n    ArrayPrototypePop(actualLines);\r\n    ArrayPrototypePop(expectedLines);\r\n    if (actualLines.length === 0 || expectedLines.length === 0)\r\n      break;\r\n    a = actualLines[actualLines.length - 1];\r\n    b = expectedLines[expectedLines.length - 1];\r\n  }\r\n\r\n  const maxLines = MathMax(actualLines.length, expectedLines.length);\r\n  // Strict equal with identical objects that are not identical by reference.\r\n  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })\r\n  if (maxLines === 0) {\r\n    // We have to get the result again. The lines were all removed before.\r\n    const actualLines = StringPrototypeSplit(actualInspected, '\\n');\r\n\r\n    // Only remove lines in case it makes sense to collapse those.\r\n    // TODO: Accept env to always show the full error.\r\n    if (actualLines.length > 50) {\r\n      actualLines[46] = `${colors.blue}...${colors.white}`;\r\n      while (actualLines.length > 47) {\r\n        ArrayPrototypePop(actualLines);\r\n      }\r\n    }\r\n\r\n    return `${kReadableOperator.notIdentical}\\n\\n` +\r\n           `${ArrayPrototypeJoin(actualLines, '\\n')}\\n`;\r\n  }\r\n\r\n  // There were at least five identical lines at the end. Mark a couple of\r\n  // skipped.\r\n  if (i >= 5) {\r\n    end = `\\n${colors.blue}...${colors.white}${end}`;\r\n    skipped = true;\r\n  }\r\n  if (other !== '') {\r\n    end = `\\n  ${other}${end}`;\r\n    other = '';\r\n  }\r\n\r\n  let printedLines = 0;\r\n  let identical = 0;\r\n  const msg = kReadableOperator[operator] +\r\n        `\\n${colors.green}+ actual${colors.white} ${colors.red}- expected${colors.white}`;\r\n  const skippedMsg = ` ${colors.blue}...${colors.white} Lines skipped`;\r\n\r\n  let lines = actualLines;\r\n  let plusMinus = `${colors.green}+${colors.white}`;\r\n  let maxLength = expectedLines.length;\r\n  if (actualLines.length < maxLines) {\r\n    lines = expectedLines;\r\n    plusMinus = `${colors.red}-${colors.white}`;\r\n    maxLength = actualLines.length;\r\n  }\r\n\r\n  for (i = 0; i < maxLines; i++) {\r\n    if (maxLength < i + 1) {\r\n      // If more than two former lines are identical, print them. Collapse them\r\n      // in case more than five lines were identical.\r\n      if (identical > 2) {\r\n        if (identical > 3) {\r\n          if (identical > 4) {\r\n            if (identical === 5) {\r\n              res += `\\n  ${lines[i - 3]}`;\r\n              printedLines++;\r\n            } else {\r\n              res += `\\n${colors.blue}...${colors.white}`;\r\n              skipped = true;\r\n            }\r\n          }\r\n          res += `\\n  ${lines[i - 2]}`;\r\n          printedLines++;\r\n        }\r\n        res += `\\n  ${lines[i - 1]}`;\r\n        printedLines++;\r\n      }\r\n      // No identical lines before.\r\n      identical = 0;\r\n      // Add the expected line to the cache.\r\n      if (lines === actualLines) {\r\n        res += `\\n${plusMinus} ${lines[i]}`;\r\n      } else {\r\n        other += `\\n${plusMinus} ${lines[i]}`;\r\n      }\r\n      printedLines++;\r\n    // Only extra actual lines exist\r\n    // Lines diverge\r\n    } else {\r\n      const expectedLine = expectedLines[i];\r\n      let actualLine = actualLines[i];\r\n      // If the lines diverge, specifically check for lines that only diverge by\r\n      // a trailing comma. In that case it is actually identical and we should\r\n      // mark it as such.\r\n      let divergingLines =\r\n        actualLine !== expectedLine &&\r\n        (!StringPrototypeEndsWith(actualLine, ',') ||\r\n         StringPrototypeSlice(actualLine, 0, -1) !== expectedLine);\r\n      // If the expected line has a trailing comma but is otherwise identical,\r\n      // add a comma at the end of the actual line. Otherwise the output could\r\n      // look weird as in:\r\n      //\r\n      //   [\r\n      //     1         // No comma at the end!\r\n      // +   2\r\n      //   ]\r\n      //\r\n      if (divergingLines &&\r\n          StringPrototypeEndsWith(expectedLine, ',') &&\r\n          StringPrototypeSlice(expectedLine, 0, -1) === actualLine) {\r\n        divergingLines = false;\r\n        actualLine += ',';\r\n      }\r\n      if (divergingLines) {\r\n        // If more than two former lines are identical, print them. Collapse\r\n        // them in case more than five lines were identical.\r\n        if (identical > 2) {\r\n          if (identical > 3) {\r\n            if (identical > 4) {\r\n              if (identical === 5) {\r\n                res += `\\n  ${actualLines[i - 3]}`;\r\n                printedLines++;\r\n              } else {\r\n                res += `\\n${colors.blue}...${colors.white}`;\r\n                skipped = true;\r\n              }\r\n            }\r\n            res += `\\n  ${actualLines[i - 2]}`;\r\n            printedLines++;\r\n          }\r\n          res += `\\n  ${actualLines[i - 1]}`;\r\n          printedLines++;\r\n        }\r\n        // No identical lines before.\r\n        identical = 0;\r\n        // Add the actual line to the result and cache the expected diverging\r\n        // line so consecutive diverging lines show up as +++--- and not +-+-+-.\r\n        res += `\\n${colors.green}+${colors.white} ${actualLine}`;\r\n        other += `\\n${colors.red}-${colors.white} ${expectedLine}`;\r\n        printedLines += 2;\r\n      // Lines are identical\r\n      } else {\r\n        // Add all cached information to the result before adding other things\r\n        // and reset the cache.\r\n        res += other;\r\n        other = '';\r\n        identical++;\r\n        // The very first identical line since the last diverging line is be\r\n        // added to the result.\r\n        if (identical <= 2) {\r\n          res += `\\n  ${actualLine}`;\r\n          printedLines++;\r\n        }\r\n      }\r\n    }\r\n    // Inspected object to big (Show ~50 rows max)\r\n    if (printedLines > 50 && i < maxLines - 2) {\r\n      return `${msg}${skippedMsg}\\n${res}\\n${colors.blue}...${colors.white}${other}\\n` +\r\n             `${colors.blue}...${colors.white}`;\r\n    }\r\n  }\r\n\r\n  return `${msg}${skipped ? skippedMsg : ''}\\n${res}${other}${end}${indicator}`;\r\n}\r\n\r\nfunction addEllipsis(string) {\r\n  const lines = StringPrototypeSplit(string, '\\n', 11);\r\n  if (lines.length > 10) {\r\n    lines.length = 10;\r\n    return `${ArrayPrototypeJoin(lines, '\\n')}\\n...`;\r\n  } else if (string.length > 512) {\r\n    return `${StringPrototypeSlice(string, 512)}...`;\r\n  }\r\n  return string;\r\n}\r\n\r\nclass AssertionError extends Error {\r\n  constructor(options) {\r\n    validateObject(options, 'options');\r\n    const {\r\n      message,\r\n      operator,\r\n      stackStartFn,\r\n      details,\r\n      // Compatibility with older versions.\r\n      stackStartFunction,\r\n    } = options;\r\n    let {\r\n      actual,\r\n      expected,\r\n    } = options;\r\n\r\n    const limit = Error.stackTraceLimit;\r\n    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;\r\n\r\n    if (message != null) {\r\n      super(String(message));\r\n    } else {\r\n      // Reset colors on each call to make sure we handle dynamically set environment\r\n      // variables correct.\r\n      colors.refresh();\r\n      // Prevent the error stack from being visible by duplicating the error\r\n      // in a very close way to the original in case both sides are actually\r\n      // instances of Error.\r\n      if (typeof actual === 'object' && actual !== null &&\r\n          typeof expected === 'object' && expected !== null &&\r\n          'stack' in actual && actual instanceof Error &&\r\n          'stack' in expected && expected instanceof Error) {\r\n        actual = copyError(actual);\r\n        expected = copyError(expected);\r\n      }\r\n\r\n      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {\r\n        super(createErrDiff(actual, expected, operator));\r\n      } else if (operator === 'notDeepStrictEqual' ||\r\n        operator === 'notStrictEqual') {\r\n        // In case the objects are equal but the operator requires unequal, show\r\n        // the first object and say A equals B\r\n        let base = kReadableOperator[operator];\r\n        const res = StringPrototypeSplit(inspectValue(actual), '\\n');\r\n\r\n        // In case \"actual\" is an object or a function, it should not be\r\n        // reference equal.\r\n        if (operator === 'notStrictEqual' &&\r\n            ((typeof actual === 'object' && actual !== null) ||\r\n             typeof actual === 'function')) {\r\n          base = kReadableOperator.notStrictEqualObject;\r\n        }\r\n\r\n        // Only remove lines in case it makes sense to collapse those.\r\n        // TODO: Accept env to always show the full error.\r\n        if (res.length > 50) {\r\n          res[46] = `${colors.blue}...${colors.white}`;\r\n          while (res.length > 47) {\r\n            ArrayPrototypePop(res);\r\n          }\r\n        }\r\n\r\n        // Only print a single input.\r\n        if (res.length === 1) {\r\n          super(`${base}${res[0].length > 5 ? '\\n\\n' : ' '}${res[0]}`);\r\n        } else {\r\n          super(`${base}\\n\\n${ArrayPrototypeJoin(res, '\\n')}\\n`);\r\n        }\r\n      } else {\r\n        let res = inspectValue(actual);\r\n        let other = inspectValue(expected);\r\n        const knownOperator = kReadableOperator[operator];\r\n        if (operator === 'notDeepEqual' && res === other) {\r\n          res = `${knownOperator}\\n\\n${res}`;\r\n          if (res.length > 1024) {\r\n            res = `${StringPrototypeSlice(res, 0, 1021)}...`;\r\n          }\r\n          super(res);\r\n        } else {\r\n          if (res.length > 512) {\r\n            res = `${StringPrototypeSlice(res, 0, 509)}...`;\r\n          }\r\n          if (other.length > 512) {\r\n            other = `${StringPrototypeSlice(other, 0, 509)}...`;\r\n          }\r\n          if (operator === 'deepEqual') {\r\n            res = `${knownOperator}\\n\\n${res}\\n\\nshould loosely deep-equal\\n\\n`;\r\n          } else {\r\n            const newOp = kReadableOperator[`${operator}Unequal`];\r\n            if (newOp) {\r\n              res = `${newOp}\\n\\n${res}\\n\\nshould not loosely deep-equal\\n\\n`;\r\n            } else {\r\n              other = ` ${operator} ${other}`;\r\n            }\r\n          }\r\n          super(`${res}${other}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = limit;\r\n\r\n    this.generatedMessage = !message;\r\n    ObjectDefineProperty(this, 'name', {\r\n      __proto__: null,\r\n      value: 'AssertionError [ERR_ASSERTION]',\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: true,\r\n    });\r\n    this.code = 'ERR_ASSERTION';\r\n    if (details) {\r\n      this.actual = undefined;\r\n      this.expected = undefined;\r\n      this.operator = undefined;\r\n      for (let i = 0; i < details.length; i++) {\r\n        this['message ' + i] = details[i].message;\r\n        this['actual ' + i] = details[i].actual;\r\n        this['expected ' + i] = details[i].expected;\r\n        this['operator ' + i] = details[i].operator;\r\n        this['stack trace ' + i] = details[i].stack;\r\n      }\r\n    } else {\r\n      this.actual = actual;\r\n      this.expected = expected;\r\n      this.operator = operator;\r\n    }\r\n    ErrorCaptureStackTrace(this, stackStartFn || stackStartFunction);\r\n    // Create error message including the error code in the name.\r\n    this.stack; // eslint-disable-line no-unused-expressions\r\n    // Reset the name.\r\n    this.name = 'AssertionError';\r\n  }\r\n\r\n  toString() {\r\n    return `${this.name} [${this.code}]: ${this.message}`;\r\n  }\r\n\r\n  [inspect.custom](recurseTimes, ctx) {\r\n    // Long strings should not be fully inspected.\r\n    const tmpActual = this.actual;\r\n    const tmpExpected = this.expected;\r\n\r\n    if (typeof this.actual === 'string') {\r\n      this.actual = addEllipsis(this.actual);\r\n    }\r\n    if (typeof this.expected === 'string') {\r\n      this.expected = addEllipsis(this.expected);\r\n    }\r\n\r\n    // This limits the `actual` and `expected` property default inspection to\r\n    // the minimum depth. Otherwise those values would be too verbose compared\r\n    // to the actual error message which contains a combined view of these two\r\n    // input values.\r\n    const result = inspect(this, {\r\n      ...ctx,\r\n      customInspect: false,\r\n      depth: 0,\r\n    });\r\n\r\n    // Reset the properties after inspection.\r\n    this.actual = tmpActual;\r\n    this.expected = tmpExpected;\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nmodule.exports = AssertionError;\r\n"
  },
  "141": {
    "metadata": {
      "scriptId": "141",
      "url": "node:internal/util/colors",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 40,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "88e2541ee5482f4bf913b77a3cbcdd67582903f02ebbfed889657299c979fab0",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1162,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/util/colors"
    },
    "source": "'use strict';\r\n\r\nlet internalTTy;\r\nfunction lazyInternalTTY() {\r\n  internalTTy ??= require('internal/tty');\r\n  return internalTTy;\r\n}\r\n\r\nmodule.exports = {\r\n  blue: '',\r\n  green: '',\r\n  white: '',\r\n  red: '',\r\n  gray: '',\r\n  clear: '',\r\n  hasColors: false,\r\n  shouldColorize(stream) {\r\n    if (process.env.FORCE_COLOR !== undefined) {\r\n      return lazyInternalTTY().getColorDepth() > 2;\r\n    }\r\n    return stream?.isTTY && (\r\n      typeof stream.getColorDepth === 'function' ?\r\n        stream.getColorDepth() > 2 : true);\r\n  },\r\n  refresh() {\r\n    if (process.stderr.isTTY) {\r\n      const hasColors = module.exports.shouldColorize(process.stderr);\r\n      module.exports.blue = hasColors ? '\\u001b[34m' : '';\r\n      module.exports.green = hasColors ? '\\u001b[32m' : '';\r\n      module.exports.white = hasColors ? '\\u001b[39m' : '';\r\n      module.exports.yellow = hasColors ? '\\u001b[33m' : '';\r\n      module.exports.red = hasColors ? '\\u001b[31m' : '';\r\n      module.exports.gray = hasColors ? '\\u001b[90m' : '';\r\n      module.exports.clear = hasColors ? '\\u001bc' : '';\r\n      module.exports.hasColors = hasColors;\r\n    }\r\n  },\r\n};\r\n\r\nmodule.exports.refresh();\r\n"
  },
  "142": {
    "metadata": {
      "scriptId": "142",
      "url": "node:internal/assert/calltracker",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 153,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "a1d68e8da7198b6da5ff55b2f7945132505b1c01adf145355c12e18f3654d96b",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3605,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/assert/calltracker"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  Error,\r\n  FunctionPrototype,\r\n  ObjectFreeze,\r\n  Proxy,\r\n  ReflectApply,\r\n  SafeSet,\r\n  SafeWeakMap,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_UNAVAILABLE_DURING_EXIT,\r\n  },\r\n} = require('internal/errors');\r\nconst AssertionError = require('internal/assert/assertion_error');\r\nconst {\r\n  validateUint32,\r\n} = require('internal/validators');\r\n\r\nconst noop = FunctionPrototype;\r\n\r\nclass CallTrackerContext {\r\n  #expected;\r\n  #calls;\r\n  #name;\r\n  #stackTrace;\r\n  constructor({ expected, stackTrace, name }) {\r\n    this.#calls = [];\r\n    this.#expected = expected;\r\n    this.#stackTrace = stackTrace;\r\n    this.#name = name;\r\n  }\r\n\r\n  track(thisArg, args) {\r\n    const argsClone = ObjectFreeze(ArrayPrototypeSlice(args));\r\n    ArrayPrototypePush(this.#calls, ObjectFreeze({ thisArg, arguments: argsClone }));\r\n  }\r\n\r\n  get delta() {\r\n    return this.#calls.length - this.#expected;\r\n  }\r\n\r\n  reset() {\r\n    this.#calls = [];\r\n  }\r\n  getCalls() {\r\n    return ObjectFreeze(ArrayPrototypeSlice(this.#calls));\r\n  }\r\n\r\n  report() {\r\n    if (this.delta !== 0) {\r\n      const message = `Expected the ${this.#name} function to be ` +\r\n                      `executed ${this.#expected} time(s) but was ` +\r\n                      `executed ${this.#calls.length} time(s).`;\r\n      return {\r\n        message,\r\n        actual: this.#calls.length,\r\n        expected: this.#expected,\r\n        operator: this.#name,\r\n        stack: this.#stackTrace,\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nclass CallTracker {\r\n\r\n  #callChecks = new SafeSet();\r\n  #trackedFunctions = new SafeWeakMap();\r\n\r\n  #getTrackedFunction(tracked) {\r\n    if (!this.#trackedFunctions.has(tracked)) {\r\n      throw new ERR_INVALID_ARG_VALUE('tracked', tracked, 'is not a tracked function');\r\n    }\r\n    return this.#trackedFunctions.get(tracked);\r\n  }\r\n\r\n  reset(tracked) {\r\n    if (tracked === undefined) {\r\n      this.#callChecks.forEach((check) => check.reset());\r\n      return;\r\n    }\r\n\r\n    this.#getTrackedFunction(tracked).reset();\r\n  }\r\n\r\n  getCalls(tracked) {\r\n    return this.#getTrackedFunction(tracked).getCalls();\r\n  }\r\n\r\n  calls(fn, expected = 1) {\r\n    if (process._exiting)\r\n      throw new ERR_UNAVAILABLE_DURING_EXIT();\r\n    if (typeof fn === 'number') {\r\n      expected = fn;\r\n      fn = noop;\r\n    } else if (fn === undefined) {\r\n      fn = noop;\r\n    }\r\n\r\n    validateUint32(expected, 'expected', true);\r\n\r\n    const context = new CallTrackerContext({\r\n      expected,\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      stackTrace: new Error(),\r\n      name: fn.name || 'calls',\r\n    });\r\n    const tracked = new Proxy(fn, {\r\n      __proto__: null,\r\n      apply(fn, thisArg, argList) {\r\n        context.track(thisArg, argList);\r\n        return ReflectApply(fn, thisArg, argList);\r\n      },\r\n    });\r\n    this.#callChecks.add(context);\r\n    this.#trackedFunctions.set(tracked, context);\r\n    return tracked;\r\n  }\r\n\r\n  report() {\r\n    const errors = [];\r\n    for (const context of this.#callChecks) {\r\n      const message = context.report();\r\n      if (message !== undefined) {\r\n        ArrayPrototypePush(errors, message);\r\n      }\r\n    }\r\n    return errors;\r\n  }\r\n\r\n  verify() {\r\n    const errors = this.report();\r\n    if (errors.length === 0) {\r\n      return;\r\n    }\r\n    const message = errors.length === 1 ?\r\n      errors[0].message :\r\n      'Functions were not called the expected number of times';\r\n    throw new AssertionError({\r\n      message,\r\n      details: errors,\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CallTracker;\r\n"
  },
  "143": {
    "metadata": {
      "scriptId": "143",
      "url": "node:assert/strict",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 3,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "196c8284009305a4c998213be0381a8c638c8097b76020c936c9c9fb0210fbf7",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 61,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:assert/strict"
    },
    "source": "'use strict';\r\n\r\nmodule.exports = require('assert').strict;\r\n"
  },
  "144": {
    "metadata": {
      "scriptId": "144",
      "url": "node:child_process",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1020,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "e25197959fe7ba3eca10da14348352b4bd2ce4aa15ab61f286bc64a634037e79",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 28223,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:child_process"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeLastIndexOf,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypePushApply,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSort,\r\n  ArrayPrototypeSplice,\r\n  ArrayPrototypeUnshift,\r\n  NumberIsInteger,\r\n  ObjectAssign,\r\n  ObjectDefineProperty,\r\n  ObjectPrototypeHasOwnProperty,\r\n  RegExpPrototypeExec,\r\n  SafeSet,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeSlice,\r\n  StringPrototypeToUpperCase,\r\n  SymbolDispose,\r\n} = primordials;\r\n\r\nconst {\r\n  convertToValidSignal,\r\n  createDeferredPromise,\r\n  getSystemErrorName,\r\n  kEmptyObject,\r\n  promisify,\r\n} = require('internal/util');\r\nconst { isArrayBufferView } = require('internal/util/types');\r\nlet debug = require('internal/util/debuglog').debuglog(\r\n  'child_process',\r\n  (fn) => {\r\n    debug = fn;\r\n  },\r\n);\r\nconst { Buffer } = require('buffer');\r\nconst { Pipe, constants: PipeConstants } = internalBinding('pipe_wrap');\r\n\r\nconst {\r\n  AbortError,\r\n  codes: {\r\n    ERR_CHILD_PROCESS_IPC_REQUIRED,\r\n    ERR_CHILD_PROCESS_STDIO_MAXBUFFER,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_OUT_OF_RANGE,\r\n  },\r\n  genericNodeError,\r\n} = require('internal/errors');\r\nconst { clearTimeout, setTimeout } = require('timers');\r\nconst { getValidatedPath } = require('internal/fs/utils');\r\nconst {\r\n  isInt32,\r\n  validateAbortSignal,\r\n  validateArray,\r\n  validateBoolean,\r\n  validateFunction,\r\n  validateObject,\r\n  validateString,\r\n} = require('internal/validators');\r\nconst child_process = require('internal/child_process');\r\nconst {\r\n  getValidStdio,\r\n  setupChannel,\r\n  ChildProcess,\r\n  stdioStringToArray,\r\n} = child_process;\r\n\r\nconst MAX_BUFFER = 1024 * 1024;\r\n\r\nconst isZOS = process.platform === 'os390';\r\nlet addAbortListener;\r\n\r\n/**\r\n * Spawns a new Node.js process + fork.\r\n * @param {string|URL} modulePath\r\n * @param {string[]} [args]\r\n * @param {{\r\n *   cwd?: string | URL;\r\n *   detached?: boolean;\r\n *   env?: Record<string, string>;\r\n *   execPath?: string;\r\n *   execArgv?: string[];\r\n *   gid?: number;\r\n *   serialization?: string;\r\n *   signal?: AbortSignal;\r\n *   killSignal?: string | number;\r\n *   silent?: boolean;\r\n *   stdio?: Array | string;\r\n *   uid?: number;\r\n *   windowsVerbatimArguments?: boolean;\r\n *   timeout?: number;\r\n *   }} [options]\r\n * @returns {ChildProcess}\r\n */\r\nfunction fork(modulePath, args = [], options) {\r\n  modulePath = getValidatedPath(modulePath, 'modulePath');\r\n\r\n  // Get options and args arguments.\r\n  let execArgv;\r\n\r\n  if (args == null) {\r\n    args = [];\r\n  } else if (typeof args === 'object' && !ArrayIsArray(args)) {\r\n    options = args;\r\n    args = [];\r\n  } else {\r\n    validateArray(args, 'args');\r\n  }\r\n\r\n  if (options != null) {\r\n    validateObject(options, 'options');\r\n  }\r\n  options = { __proto__: null, ...options, shell: false };\r\n  options.execPath = options.execPath || process.execPath;\r\n  validateArgumentNullCheck(options.execPath, 'options.execPath');\r\n\r\n  // Prepare arguments for fork:\r\n  execArgv = options.execArgv || process.execArgv;\r\n  validateArgumentsNullCheck(execArgv, 'options.execArgv');\r\n\r\n  if (execArgv === process.execArgv && process._eval != null) {\r\n    const index = ArrayPrototypeLastIndexOf(execArgv, process._eval);\r\n    if (index > 0) {\r\n      // Remove the -e switch to avoid fork bombing ourselves.\r\n      execArgv = ArrayPrototypeSlice(execArgv);\r\n      ArrayPrototypeSplice(execArgv, index - 1, 2);\r\n    }\r\n  }\r\n\r\n  args = [...execArgv, modulePath, ...args];\r\n\r\n  if (typeof options.stdio === 'string') {\r\n    options.stdio = stdioStringToArray(options.stdio, 'ipc');\r\n  } else if (!ArrayIsArray(options.stdio)) {\r\n    // Use a separate fd=3 for the IPC channel. Inherit stdin, stdout,\r\n    // and stderr from the parent if silent isn't set.\r\n    options.stdio = stdioStringToArray(\r\n      options.silent ? 'pipe' : 'inherit',\r\n      'ipc');\r\n  } else if (!ArrayPrototypeIncludes(options.stdio, 'ipc')) {\r\n    throw new ERR_CHILD_PROCESS_IPC_REQUIRED('options.stdio');\r\n  }\r\n\r\n  return spawn(options.execPath, args, options);\r\n}\r\n\r\nfunction _forkChild(fd, serializationMode) {\r\n  // set process.send()\r\n  const p = new Pipe(PipeConstants.IPC);\r\n  p.open(fd);\r\n  p.unref();\r\n  const control = setupChannel(process, p, serializationMode);\r\n  process.on('newListener', function onNewListener(name) {\r\n    if (name === 'message' || name === 'disconnect') control.refCounted();\r\n  });\r\n  process.on('removeListener', function onRemoveListener(name) {\r\n    if (name === 'message' || name === 'disconnect') control.unrefCounted();\r\n  });\r\n}\r\n\r\nfunction normalizeExecArgs(command, options, callback) {\r\n  validateString(command, 'command');\r\n  validateArgumentNullCheck(command, 'command');\r\n\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n\r\n  // Make a shallow copy so we don't clobber the user's options object.\r\n  options = { __proto__: null, ...options };\r\n  options.shell = typeof options.shell === 'string' ? options.shell : true;\r\n\r\n  return {\r\n    file: command,\r\n    options: options,\r\n    callback: callback,\r\n  };\r\n}\r\n\r\n/**\r\n * Spawns a shell executing the given command.\r\n * @param {string} command\r\n * @param {{\r\n *   cmd?: string;\r\n *   env?: Record<string, string>;\r\n *   encoding?: string;\r\n *   shell?: string;\r\n *   signal?: AbortSignal;\r\n *   timeout?: number;\r\n *   maxBuffer?: number;\r\n *   killSignal?: string | number;\r\n *   uid?: number;\r\n *   gid?: number;\r\n *   windowsHide?: boolean;\r\n *   }} [options]\r\n * @param {(\r\n *   error?: Error,\r\n *   stdout?: string | Buffer,\r\n *   stderr?: string | Buffer\r\n *   ) => any} [callback]\r\n * @returns {ChildProcess}\r\n */\r\nfunction exec(command, options, callback) {\r\n  const opts = normalizeExecArgs(command, options, callback);\r\n  return module.exports.execFile(opts.file,\r\n                                 opts.options,\r\n                                 opts.callback);\r\n}\r\n\r\nconst customPromiseExecFunction = (orig) => {\r\n  return (...args) => {\r\n    const { promise, resolve, reject } = createDeferredPromise();\r\n\r\n    promise.child = orig(...args, (err, stdout, stderr) => {\r\n      if (err !== null) {\r\n        err.stdout = stdout;\r\n        err.stderr = stderr;\r\n        reject(err);\r\n      } else {\r\n        resolve({ stdout, stderr });\r\n      }\r\n    });\r\n\r\n    return promise;\r\n  };\r\n};\r\n\r\nObjectDefineProperty(exec, promisify.custom, {\r\n  __proto__: null,\r\n  enumerable: false,\r\n  value: customPromiseExecFunction(exec),\r\n});\r\n\r\nfunction normalizeExecFileArgs(file, args, options, callback) {\r\n  if (ArrayIsArray(args)) {\r\n    args = ArrayPrototypeSlice(args);\r\n  } else if (args != null && typeof args === 'object') {\r\n    callback = options;\r\n    options = args;\r\n    args = null;\r\n  } else if (typeof args === 'function') {\r\n    callback = args;\r\n    options = null;\r\n    args = null;\r\n  }\r\n\r\n  if (args == null) {\r\n    args = [];\r\n  }\r\n\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n  } else if (options != null) {\r\n    validateObject(options, 'options');\r\n  }\r\n\r\n  if (options == null) {\r\n    options = kEmptyObject;\r\n  }\r\n\r\n  if (callback != null) {\r\n    validateFunction(callback, 'callback');\r\n  }\r\n\r\n  // Validate argv0, if present.\r\n  if (options.argv0 != null) {\r\n    validateString(options.argv0, 'options.argv0');\r\n    validateArgumentNullCheck(options.argv0, 'options.argv0');\r\n  }\r\n\r\n  return { file, args, options, callback };\r\n}\r\n\r\n/**\r\n * Spawns the specified file as a shell.\r\n * @param {string} file\r\n * @param {string[]} [args]\r\n * @param {{\r\n *   cwd?: string | URL;\r\n *   env?: Record<string, string>;\r\n *   encoding?: string;\r\n *   timeout?: number;\r\n *   maxBuffer?: number;\r\n *   killSignal?: string | number;\r\n *   uid?: number;\r\n *   gid?: number;\r\n *   windowsHide?: boolean;\r\n *   windowsVerbatimArguments?: boolean;\r\n *   shell?: boolean | string;\r\n *   signal?: AbortSignal;\r\n *   }} [options]\r\n * @param {(\r\n *   error?: Error,\r\n *   stdout?: string | Buffer,\r\n *   stderr?: string | Buffer\r\n *   ) => any} [callback]\r\n * @returns {ChildProcess}\r\n */\r\nfunction execFile(file, args, options, callback) {\r\n  ({ file, args, options, callback } = normalizeExecFileArgs(file, args, options, callback));\r\n\r\n  options = {\r\n    __proto__: null,\r\n    encoding: 'utf8',\r\n    timeout: 0,\r\n    maxBuffer: MAX_BUFFER,\r\n    killSignal: 'SIGTERM',\r\n    cwd: null,\r\n    env: null,\r\n    shell: false,\r\n    ...options,\r\n  };\r\n\r\n  // Validate the timeout, if present.\r\n  validateTimeout(options.timeout);\r\n\r\n  // Validate maxBuffer, if present.\r\n  validateMaxBuffer(options.maxBuffer);\r\n\r\n  options.killSignal = sanitizeKillSignal(options.killSignal);\r\n\r\n  const child = spawn(file, args, {\r\n    cwd: options.cwd,\r\n    env: options.env,\r\n    gid: options.gid,\r\n    shell: options.shell,\r\n    signal: options.signal,\r\n    uid: options.uid,\r\n    windowsHide: !!options.windowsHide,\r\n    windowsVerbatimArguments: !!options.windowsVerbatimArguments,\r\n  });\r\n\r\n  let encoding;\r\n  const _stdout = [];\r\n  const _stderr = [];\r\n  if (options.encoding !== 'buffer' && Buffer.isEncoding(options.encoding)) {\r\n    encoding = options.encoding;\r\n  } else {\r\n    encoding = null;\r\n  }\r\n  let stdoutLen = 0;\r\n  let stderrLen = 0;\r\n  let killed = false;\r\n  let exited = false;\r\n  let timeoutId;\r\n\r\n  let ex = null;\r\n\r\n  let cmd = file;\r\n\r\n  function exithandler(code, signal) {\r\n    if (exited) return;\r\n    exited = true;\r\n\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n      timeoutId = null;\r\n    }\r\n\r\n    if (!callback) return;\r\n\r\n    // merge chunks\r\n    let stdout;\r\n    let stderr;\r\n    if (encoding ||\r\n      (\r\n        child.stdout &&\r\n        child.stdout.readableEncoding\r\n      )) {\r\n      stdout = ArrayPrototypeJoin(_stdout, '');\r\n    } else {\r\n      stdout = Buffer.concat(_stdout);\r\n    }\r\n    if (encoding ||\r\n      (\r\n        child.stderr &&\r\n        child.stderr.readableEncoding\r\n      )) {\r\n      stderr = ArrayPrototypeJoin(_stderr, '');\r\n    } else {\r\n      stderr = Buffer.concat(_stderr);\r\n    }\r\n\r\n    if (!ex && code === 0 && signal === null) {\r\n      callback(null, stdout, stderr);\r\n      return;\r\n    }\r\n\r\n    if (args?.length)\r\n      cmd += ` ${ArrayPrototypeJoin(args, ' ')}`;\r\n\r\n    if (!ex) {\r\n      ex = genericNodeError(`Command failed: ${cmd}\\n${stderr}`, {\r\n        code: code < 0 ? getSystemErrorName(code) : code,\r\n        killed: child.killed || killed,\r\n        signal: signal,\r\n      });\r\n    }\r\n\r\n    ex.cmd = cmd;\r\n    callback(ex, stdout, stderr);\r\n  }\r\n\r\n  function errorhandler(e) {\r\n    ex = e;\r\n\r\n    if (child.stdout)\r\n      child.stdout.destroy();\r\n\r\n    if (child.stderr)\r\n      child.stderr.destroy();\r\n\r\n    exithandler();\r\n  }\r\n\r\n  function kill() {\r\n    if (child.stdout)\r\n      child.stdout.destroy();\r\n\r\n    if (child.stderr)\r\n      child.stderr.destroy();\r\n\r\n    killed = true;\r\n    try {\r\n      child.kill(options.killSignal);\r\n    } catch (e) {\r\n      ex = e;\r\n      exithandler();\r\n    }\r\n  }\r\n\r\n  if (options.timeout > 0) {\r\n    timeoutId = setTimeout(function delayedKill() {\r\n      kill();\r\n      timeoutId = null;\r\n    }, options.timeout);\r\n  }\r\n\r\n  if (child.stdout) {\r\n    if (encoding)\r\n      child.stdout.setEncoding(encoding);\r\n\r\n    child.stdout.on('data', function onChildStdout(chunk) {\r\n      // Do not need to count the length\r\n      if (options.maxBuffer === Infinity) {\r\n        ArrayPrototypePush(_stdout, chunk);\r\n        return;\r\n      }\r\n      const encoding = child.stdout.readableEncoding;\r\n      const length = encoding ?\r\n        Buffer.byteLength(chunk, encoding) :\r\n        chunk.length;\r\n      const slice = encoding ? StringPrototypeSlice :\r\n        (buf, ...args) => buf.slice(...args);\r\n      stdoutLen += length;\r\n\r\n      if (stdoutLen > options.maxBuffer) {\r\n        const truncatedLen = options.maxBuffer - (stdoutLen - length);\r\n        ArrayPrototypePush(_stdout, slice(chunk, 0, truncatedLen));\r\n\r\n        ex = new ERR_CHILD_PROCESS_STDIO_MAXBUFFER('stdout');\r\n        kill();\r\n      } else {\r\n        ArrayPrototypePush(_stdout, chunk);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (child.stderr) {\r\n    if (encoding)\r\n      child.stderr.setEncoding(encoding);\r\n\r\n    child.stderr.on('data', function onChildStderr(chunk) {\r\n      // Do not need to count the length\r\n      if (options.maxBuffer === Infinity) {\r\n        ArrayPrototypePush(_stderr, chunk);\r\n        return;\r\n      }\r\n      const encoding = child.stderr.readableEncoding;\r\n      const length = encoding ?\r\n        Buffer.byteLength(chunk, encoding) :\r\n        chunk.length;\r\n      stderrLen += length;\r\n\r\n      if (stderrLen > options.maxBuffer) {\r\n        const truncatedLen = options.maxBuffer - (stderrLen - length);\r\n        ArrayPrototypePush(_stderr,\r\n                           chunk.slice(0, truncatedLen));\r\n\r\n        ex = new ERR_CHILD_PROCESS_STDIO_MAXBUFFER('stderr');\r\n        kill();\r\n      } else {\r\n        ArrayPrototypePush(_stderr, chunk);\r\n      }\r\n    });\r\n  }\r\n\r\n  child.addListener('close', exithandler);\r\n  child.addListener('error', errorhandler);\r\n\r\n  return child;\r\n}\r\n\r\nObjectDefineProperty(execFile, promisify.custom, {\r\n  __proto__: null,\r\n  enumerable: false,\r\n  value: customPromiseExecFunction(execFile),\r\n});\r\n\r\nfunction copyProcessEnvToEnv(env, name, optionEnv) {\r\n  if (process.env[name] &&\r\n      (!optionEnv ||\r\n       !ObjectPrototypeHasOwnProperty(optionEnv, name))) {\r\n    env[name] = process.env[name];\r\n  }\r\n}\r\n\r\nfunction normalizeSpawnArguments(file, args, options) {\r\n  validateString(file, 'file');\r\n  validateArgumentNullCheck(file, 'file');\r\n\r\n  if (file.length === 0)\r\n    throw new ERR_INVALID_ARG_VALUE('file', file, 'cannot be empty');\r\n\r\n  if (ArrayIsArray(args)) {\r\n    args = ArrayPrototypeSlice(args);\r\n  } else if (args == null) {\r\n    args = [];\r\n  } else if (typeof args !== 'object') {\r\n    throw new ERR_INVALID_ARG_TYPE('args', 'object', args);\r\n  } else {\r\n    options = args;\r\n    args = [];\r\n  }\r\n\r\n  validateArgumentsNullCheck(args, 'args');\r\n\r\n  if (options === undefined)\r\n    options = kEmptyObject;\r\n  else\r\n    validateObject(options, 'options');\r\n\r\n  let cwd = options.cwd;\r\n\r\n  // Validate the cwd, if present.\r\n  if (cwd != null) {\r\n    cwd = getValidatedPath(cwd, 'options.cwd');\r\n  }\r\n\r\n  // Validate detached, if present.\r\n  if (options.detached != null) {\r\n    validateBoolean(options.detached, 'options.detached');\r\n  }\r\n\r\n  // Validate the uid, if present.\r\n  if (options.uid != null && !isInt32(options.uid)) {\r\n    throw new ERR_INVALID_ARG_TYPE('options.uid', 'int32', options.uid);\r\n  }\r\n\r\n  // Validate the gid, if present.\r\n  if (options.gid != null && !isInt32(options.gid)) {\r\n    throw new ERR_INVALID_ARG_TYPE('options.gid', 'int32', options.gid);\r\n  }\r\n\r\n  // Validate the shell, if present.\r\n  if (options.shell != null &&\r\n      typeof options.shell !== 'boolean' &&\r\n      typeof options.shell !== 'string') {\r\n    throw new ERR_INVALID_ARG_TYPE('options.shell',\r\n                                   ['boolean', 'string'], options.shell);\r\n  }\r\n\r\n  // Validate argv0, if present.\r\n  if (options.argv0 != null) {\r\n    validateString(options.argv0, 'options.argv0');\r\n    validateArgumentNullCheck(options.argv0, 'options.argv0');\r\n  }\r\n\r\n  // Validate windowsHide, if present.\r\n  if (options.windowsHide != null) {\r\n    validateBoolean(options.windowsHide, 'options.windowsHide');\r\n  }\r\n\r\n  // Validate windowsVerbatimArguments, if present.\r\n  let { windowsVerbatimArguments } = options;\r\n  if (windowsVerbatimArguments != null) {\r\n    validateBoolean(windowsVerbatimArguments,\r\n                    'options.windowsVerbatimArguments');\r\n  }\r\n\r\n  if (options.shell) {\r\n    validateArgumentNullCheck(options.shell, 'options.shell');\r\n    const command = ArrayPrototypeJoin([file, ...args], ' ');\r\n    // Set the shell, switches, and commands.\r\n    if (process.platform === 'win32') {\r\n      if (typeof options.shell === 'string')\r\n        file = options.shell;\r\n      else\r\n        file = process.env.comspec || 'cmd.exe';\r\n      // '/d /s /c' is used only for cmd.exe.\r\n      if (RegExpPrototypeExec(/^(?:.*\\\\)?cmd(?:\\.exe)?$/i, file) !== null) {\r\n        args = ['/d', '/s', '/c', `\"${command}\"`];\r\n        windowsVerbatimArguments = true;\r\n      } else {\r\n        args = ['-c', command];\r\n      }\r\n    } else {\r\n      if (typeof options.shell === 'string')\r\n        file = options.shell;\r\n      else if (process.platform === 'android')\r\n        file = '/system/bin/sh';\r\n      else\r\n        file = '/bin/sh';\r\n      args = ['-c', command];\r\n    }\r\n  }\r\n\r\n  if (typeof options.argv0 === 'string') {\r\n    ArrayPrototypeUnshift(args, options.argv0);\r\n  } else {\r\n    ArrayPrototypeUnshift(args, file);\r\n  }\r\n\r\n  const env = options.env || process.env;\r\n  const envPairs = [];\r\n\r\n  // process.env.NODE_V8_COVERAGE always propagates, making it possible to\r\n  // collect coverage for programs that spawn with white-listed environment.\r\n  copyProcessEnvToEnv(env, 'NODE_V8_COVERAGE', options.env);\r\n\r\n  if (isZOS) {\r\n    // The following environment variables must always propagate if set.\r\n    copyProcessEnvToEnv(env, '_BPXK_AUTOCVT', options.env);\r\n    copyProcessEnvToEnv(env, '_CEE_RUNOPTS', options.env);\r\n    copyProcessEnvToEnv(env, '_TAG_REDIR_ERR', options.env);\r\n    copyProcessEnvToEnv(env, '_TAG_REDIR_IN', options.env);\r\n    copyProcessEnvToEnv(env, '_TAG_REDIR_OUT', options.env);\r\n    copyProcessEnvToEnv(env, 'STEPLIB', options.env);\r\n    copyProcessEnvToEnv(env, 'LIBPATH', options.env);\r\n    copyProcessEnvToEnv(env, '_EDC_SIG_DFLT', options.env);\r\n    copyProcessEnvToEnv(env, '_EDC_SUSV3', options.env);\r\n  }\r\n\r\n  let envKeys = [];\r\n  // Prototype values are intentionally included.\r\n  for (const key in env) {\r\n    ArrayPrototypePush(envKeys, key);\r\n  }\r\n\r\n  if (process.platform === 'win32') {\r\n    // On Windows env keys are case insensitive. Filter out duplicates,\r\n    // keeping only the first one (in lexicographic order)\r\n    const sawKey = new SafeSet();\r\n    envKeys = ArrayPrototypeFilter(\r\n      ArrayPrototypeSort(envKeys),\r\n      (key) => {\r\n        const uppercaseKey = StringPrototypeToUpperCase(key);\r\n        if (sawKey.has(uppercaseKey)) {\r\n          return false;\r\n        }\r\n        sawKey.add(uppercaseKey);\r\n        return true;\r\n      },\r\n    );\r\n  }\r\n\r\n  for (const key of envKeys) {\r\n    const value = env[key];\r\n    if (value !== undefined) {\r\n      validateArgumentNullCheck(key, `options.env['${key}']`);\r\n      validateArgumentNullCheck(value, `options.env['${key}']`);\r\n      ArrayPrototypePush(envPairs, `${key}=${value}`);\r\n    }\r\n  }\r\n\r\n  return {\r\n    // Make a shallow copy so we don't clobber the user's options object.\r\n    __proto__: null,\r\n    ...options,\r\n    args,\r\n    cwd,\r\n    detached: !!options.detached,\r\n    envPairs,\r\n    file,\r\n    windowsHide: !!options.windowsHide,\r\n    windowsVerbatimArguments: !!windowsVerbatimArguments,\r\n  };\r\n}\r\n\r\nfunction abortChildProcess(child, killSignal, reason) {\r\n  if (!child)\r\n    return;\r\n  try {\r\n    if (child.kill(killSignal)) {\r\n      child.emit('error', new AbortError(undefined, { cause: reason }));\r\n    }\r\n  } catch (err) {\r\n    child.emit('error', err);\r\n  }\r\n}\r\n\r\n/**\r\n * Spawns a new process using the given `file`.\r\n * @param {string} file\r\n * @param {string[]} [args]\r\n * @param {{\r\n *   cwd?: string | URL;\r\n *   env?: Record<string, string>;\r\n *   argv0?: string;\r\n *   stdio?: Array | string;\r\n *   detached?: boolean;\r\n *   uid?: number;\r\n *   gid?: number;\r\n *   serialization?: string;\r\n *   shell?: boolean | string;\r\n *   windowsVerbatimArguments?: boolean;\r\n *   windowsHide?: boolean;\r\n *   signal?: AbortSignal;\r\n *   timeout?: number;\r\n *   killSignal?: string | number;\r\n *   }} [options]\r\n * @returns {ChildProcess}\r\n */\r\nfunction spawn(file, args, options) {\r\n  options = normalizeSpawnArguments(file, args, options);\r\n  validateTimeout(options.timeout);\r\n  validateAbortSignal(options.signal, 'options.signal');\r\n  const killSignal = sanitizeKillSignal(options.killSignal);\r\n  const child = new ChildProcess();\r\n\r\n  debug('spawn', options);\r\n  child.spawn(options);\r\n\r\n  if (options.timeout > 0) {\r\n    let timeoutId = setTimeout(() => {\r\n      if (timeoutId) {\r\n        try {\r\n          child.kill(killSignal);\r\n        } catch (err) {\r\n          child.emit('error', err);\r\n        }\r\n        timeoutId = null;\r\n      }\r\n    }, options.timeout);\r\n\r\n    child.once('exit', () => {\r\n      if (timeoutId) {\r\n        clearTimeout(timeoutId);\r\n        timeoutId = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  if (options.signal) {\r\n    const signal = options.signal;\r\n    if (signal.aborted) {\r\n      process.nextTick(onAbortListener);\r\n    } else {\r\n      addAbortListener ??= require('internal/events/abort_listener').addAbortListener;\r\n      const disposable = addAbortListener(signal, onAbortListener);\r\n      child.once('exit', disposable[SymbolDispose]);\r\n    }\r\n\r\n    function onAbortListener() {\r\n      abortChildProcess(child, killSignal, options.signal.reason);\r\n    }\r\n  }\r\n\r\n  return child;\r\n}\r\n\r\n/**\r\n * Spawns a new process synchronously using the given `file`.\r\n * @param {string} file\r\n * @param {string[]} [args]\r\n * @param {{\r\n *   cwd?: string | URL;\r\n *   input?: string | Buffer | TypedArray | DataView;\r\n *   argv0?: string;\r\n *   stdio?: string | Array;\r\n *   env?: Record<string, string>;\r\n *   uid?: number;\r\n *   gid?: number;\r\n *   timeout?: number;\r\n *   killSignal?: string | number;\r\n *   maxBuffer?: number;\r\n *   encoding?: string;\r\n *   shell?: boolean | string;\r\n *   windowsVerbatimArguments?: boolean;\r\n *   windowsHide?: boolean;\r\n *   }} [options]\r\n * @returns {{\r\n *   pid: number;\r\n *   output: Array;\r\n *   stdout: Buffer | string;\r\n *   stderr: Buffer | string;\r\n *   status: number | null;\r\n *   signal: string | null;\r\n *   error: Error;\r\n *   }}\r\n */\r\nfunction spawnSync(file, args, options) {\r\n  options = {\r\n    __proto__: null,\r\n    maxBuffer: MAX_BUFFER,\r\n    ...normalizeSpawnArguments(file, args, options),\r\n  };\r\n\r\n  debug('spawnSync', options);\r\n\r\n  // Validate the timeout, if present.\r\n  validateTimeout(options.timeout);\r\n\r\n  // Validate maxBuffer, if present.\r\n  validateMaxBuffer(options.maxBuffer);\r\n\r\n  // Validate and translate the kill signal, if present.\r\n  options.killSignal = sanitizeKillSignal(options.killSignal);\r\n\r\n  options.stdio = getValidStdio(options.stdio || 'pipe', true).stdio;\r\n\r\n  if (options.input) {\r\n    const stdin = options.stdio[0] = { ...options.stdio[0] };\r\n    stdin.input = options.input;\r\n  }\r\n\r\n  // We may want to pass data in on any given fd, ensure it is a valid buffer\r\n  for (let i = 0; i < options.stdio.length; i++) {\r\n    const input = options.stdio[i] && options.stdio[i].input;\r\n    if (input != null) {\r\n      const pipe = options.stdio[i] = { ...options.stdio[i] };\r\n      if (isArrayBufferView(input)) {\r\n        pipe.input = input;\r\n      } else if (typeof input === 'string') {\r\n        pipe.input = Buffer.from(input, options.encoding);\r\n      } else {\r\n        throw new ERR_INVALID_ARG_TYPE(`options.stdio[${i}]`,\r\n                                       ['Buffer',\r\n                                        'TypedArray',\r\n                                        'DataView',\r\n                                        'string'],\r\n                                       input);\r\n      }\r\n    }\r\n  }\r\n\r\n  return child_process.spawnSync(options);\r\n}\r\n\r\n\r\nfunction checkExecSyncError(ret, args, cmd) {\r\n  let err;\r\n  if (ret.error) {\r\n    err = ret.error;\r\n    ObjectAssign(err, ret);\r\n  } else if (ret.status !== 0) {\r\n    let msg = 'Command failed: ';\r\n    msg += cmd || ArrayPrototypeJoin(args, ' ');\r\n    if (ret.stderr && ret.stderr.length > 0)\r\n      msg += `\\n${ret.stderr.toString()}`;\r\n    err = genericNodeError(msg, ret);\r\n  }\r\n  return err;\r\n}\r\n\r\n/**\r\n * Spawns a file as a shell synchronously.\r\n * @param {string} file\r\n * @param {string[]} [args]\r\n * @param {{\r\n *   cwd?: string | URL;\r\n *   input?: string | Buffer | TypedArray | DataView;\r\n *   stdio?: string | Array;\r\n *   env?: Record<string, string>;\r\n *   uid?: number;\r\n *   gid?: number;\r\n *   timeout?: number;\r\n *   killSignal?: string | number;\r\n *   maxBuffer?: number;\r\n *   encoding?: string;\r\n *   windowsHide?: boolean;\r\n *   shell?: boolean | string;\r\n *   }} [options]\r\n * @returns {Buffer | string}\r\n */\r\nfunction execFileSync(file, args, options) {\r\n  ({ file, args, options } = normalizeExecFileArgs(file, args, options));\r\n\r\n  const inheritStderr = !options.stdio;\r\n  const ret = spawnSync(file, args, options);\r\n\r\n  if (inheritStderr && ret.stderr)\r\n    process.stderr.write(ret.stderr);\r\n\r\n  const errArgs = [options.argv0 || file];\r\n  ArrayPrototypePushApply(errArgs, args);\r\n  const err = checkExecSyncError(ret, errArgs);\r\n\r\n  if (err)\r\n    throw err;\r\n\r\n  return ret.stdout;\r\n}\r\n\r\n/**\r\n * Spawns a shell executing the given `command` synchronously.\r\n * @param {string} command\r\n * @param {{\r\n *   cwd?: string | URL;\r\n *   input?: string | Buffer | TypedArray | DataView;\r\n *   stdio?: string | Array;\r\n *   env?: Record<string, string>;\r\n *   shell?: string;\r\n *   uid?: number;\r\n *   gid?: number;\r\n *   timeout?: number;\r\n *   killSignal?: string | number;\r\n *   maxBuffer?: number;\r\n *   encoding?: string;\r\n *   windowsHide?: boolean;\r\n *   }} [options]\r\n * @returns {Buffer | string}\r\n */\r\nfunction execSync(command, options) {\r\n  const opts = normalizeExecArgs(command, options, null);\r\n  const inheritStderr = !opts.options.stdio;\r\n\r\n  const ret = spawnSync(opts.file, opts.options);\r\n\r\n  if (inheritStderr && ret.stderr)\r\n    process.stderr.write(ret.stderr);\r\n\r\n  const err = checkExecSyncError(ret, undefined, command);\r\n\r\n  if (err)\r\n    throw err;\r\n\r\n  return ret.stdout;\r\n}\r\n\r\n\r\nfunction validateArgumentNullCheck(arg, propName) {\r\n  if (typeof arg === 'string' && StringPrototypeIncludes(arg, '\\u0000')) {\r\n    throw new ERR_INVALID_ARG_VALUE(propName, arg, 'must be a string without null bytes');\r\n  }\r\n}\r\n\r\n\r\nfunction validateArgumentsNullCheck(args, propName) {\r\n  for (let i = 0; i < args.length; ++i) {\r\n    validateArgumentNullCheck(args[i], `${propName}[${i}]`);\r\n  }\r\n}\r\n\r\n\r\nfunction validateTimeout(timeout) {\r\n  if (timeout != null && !(NumberIsInteger(timeout) && timeout >= 0)) {\r\n    throw new ERR_OUT_OF_RANGE('timeout', 'an unsigned integer', timeout);\r\n  }\r\n}\r\n\r\n\r\nfunction validateMaxBuffer(maxBuffer) {\r\n  if (maxBuffer != null && !(typeof maxBuffer === 'number' && maxBuffer >= 0)) {\r\n    throw new ERR_OUT_OF_RANGE('options.maxBuffer',\r\n                               'a positive number',\r\n                               maxBuffer);\r\n  }\r\n}\r\n\r\n\r\nfunction sanitizeKillSignal(killSignal) {\r\n  if (typeof killSignal === 'string' || typeof killSignal === 'number') {\r\n    return convertToValidSignal(killSignal);\r\n  } else if (killSignal != null) {\r\n    throw new ERR_INVALID_ARG_TYPE('options.killSignal',\r\n                                   ['string', 'number'],\r\n                                   killSignal);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  _forkChild,\r\n  ChildProcess,\r\n  exec,\r\n  execFile,\r\n  execFileSync,\r\n  execSync,\r\n  fork,\r\n  spawn,\r\n  spawnSync,\r\n};\r\n"
  },
  "145": {
    "metadata": {
      "scriptId": "145",
      "url": "node:internal/child_process",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1139,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "5a3e7abca58271072780eafa454af1049af1445f8a2d332182f1cb0ce0fb5cbb",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 32940,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/child_process"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeReduce,\r\n  ArrayPrototypeSlice,\r\n  FunctionPrototype,\r\n  FunctionPrototypeCall,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n  StringPrototypeSlice,\r\n  Symbol,\r\n  SymbolDispose,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  ErrnoException,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_HANDLE_TYPE,\r\n    ERR_INVALID_SYNC_FORK_INPUT,\r\n    ERR_IPC_CHANNEL_CLOSED,\r\n    ERR_IPC_DISCONNECTED,\r\n    ERR_IPC_ONE_PIPE,\r\n    ERR_IPC_SYNC_FORK,\r\n    ERR_MISSING_ARGS,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  validateArray,\r\n  validateObject,\r\n  validateOneOf,\r\n  validateString,\r\n} = require('internal/validators');\r\nconst EventEmitter = require('events');\r\nconst net = require('net');\r\nconst dgram = require('dgram');\r\nconst inspect = require('internal/util/inspect').inspect;\r\nconst assert = require('internal/assert');\r\n\r\nconst { Process } = internalBinding('process_wrap');\r\nconst {\r\n  WriteWrap,\r\n  kReadBytesOrError,\r\n  kArrayBufferOffset,\r\n  kLastWriteWasAsync,\r\n  streamBaseState,\r\n} = internalBinding('stream_wrap');\r\nconst { Pipe, constants: PipeConstants } = internalBinding('pipe_wrap');\r\nconst { TCP } = internalBinding('tcp_wrap');\r\nconst { TTY } = internalBinding('tty_wrap');\r\nconst { UDP } = internalBinding('udp_wrap');\r\nconst SocketList = require('internal/socket_list');\r\nconst { owner_symbol } = require('internal/async_hooks').symbols;\r\nconst { convertToValidSignal, deprecate } = require('internal/util');\r\nconst { isArrayBufferView } = require('internal/util/types');\r\nconst spawn_sync = internalBinding('spawn_sync');\r\nconst { kStateSymbol } = require('internal/dgram');\r\nconst dc = require('diagnostics_channel');\r\nconst childProcessChannel = dc.channel('child_process');\r\n\r\nconst {\r\n  UV_EACCES,\r\n  UV_EAGAIN,\r\n  UV_EINVAL,\r\n  UV_EMFILE,\r\n  UV_ENFILE,\r\n  UV_ENOENT,\r\n  UV_ENOSYS,\r\n  UV_ESRCH,\r\n} = internalBinding('uv');\r\n\r\nconst { SocketListSend, SocketListReceive } = SocketList;\r\n\r\n// Lazy loaded for startup performance and to allow monkey patching of\r\n// internalBinding('http_parser').HTTPParser.\r\nlet freeParser;\r\nlet HTTPParser;\r\n\r\nconst MAX_HANDLE_RETRANSMISSIONS = 3;\r\nconst kChannelHandle = Symbol('kChannelHandle');\r\nconst kIsUsedAsStdio = Symbol('kIsUsedAsStdio');\r\nconst kPendingMessages = Symbol('kPendingMessages');\r\n\r\n// This object contain function to convert TCP objects to native handle objects\r\n// and back again.\r\nconst handleConversion = {\r\n  'net.Native': {\r\n    simultaneousAccepts: true,\r\n\r\n    send(message, handle, options) {\r\n      return handle;\r\n    },\r\n\r\n    got(message, handle, emit) {\r\n      emit(handle);\r\n    },\r\n  },\r\n\r\n  'net.Server': {\r\n    simultaneousAccepts: true,\r\n\r\n    send(message, server, options) {\r\n      return server._handle;\r\n    },\r\n\r\n    got(message, handle, emit) {\r\n      const server = new net.Server();\r\n      server.listen(handle, () => {\r\n        emit(server);\r\n      });\r\n    },\r\n  },\r\n\r\n  'net.Socket': {\r\n    send(message, socket, options) {\r\n      if (!socket._handle)\r\n        return;\r\n\r\n      // If the socket was created by net.Server\r\n      if (socket.server) {\r\n        // The worker should keep track of the socket\r\n        message.key = socket.server._connectionKey;\r\n\r\n        const firstTime = !this[kChannelHandle].sockets.send[message.key];\r\n        const socketList = getSocketList('send', this, message.key);\r\n\r\n        // The server should no longer expose a .connection property\r\n        // and when asked to close it should query the socket status from\r\n        // the workers\r\n        if (firstTime) socket.server._setupWorker(socketList);\r\n\r\n        // Act like socket is detached\r\n        if (!options.keepOpen)\r\n          socket.server._connections--;\r\n      }\r\n\r\n      const handle = socket._handle;\r\n\r\n      // Remove handle from socket object, it will be closed when the socket\r\n      // will be sent\r\n      if (!options.keepOpen) {\r\n        handle.onread = nop;\r\n        socket._handle = null;\r\n        socket.setTimeout(0);\r\n\r\n        if (freeParser === undefined)\r\n          freeParser = require('_http_common').freeParser;\r\n        if (HTTPParser === undefined)\r\n          HTTPParser = require('_http_common').HTTPParser;\r\n\r\n        // In case of an HTTP connection socket, release the associated\r\n        // resources\r\n        if (socket.parser && socket.parser instanceof HTTPParser) {\r\n          freeParser(socket.parser, null, socket);\r\n          if (socket._httpMessage)\r\n            socket._httpMessage.detachSocket(socket);\r\n        }\r\n      }\r\n\r\n      return handle;\r\n    },\r\n\r\n    postSend(message, handle, options, callback, target) {\r\n      // Store the handle after successfully sending it, so it can be closed\r\n      // when the NODE_HANDLE_ACK is received. If the handle could not be sent,\r\n      // just close it.\r\n      if (handle && !options.keepOpen) {\r\n        if (target) {\r\n          // There can only be one _pendingMessage as passing handles are\r\n          // processed one at a time: handles are stored in _handleQueue while\r\n          // waiting for the NODE_HANDLE_ACK of the current passing handle.\r\n          assert(!target._pendingMessage);\r\n          target._pendingMessage =\r\n              { callback, message, handle, options, retransmissions: 0 };\r\n        } else {\r\n          handle.close();\r\n        }\r\n      }\r\n    },\r\n\r\n    got(message, handle, emit) {\r\n      const socket = new net.Socket({\r\n        handle: handle,\r\n        readable: true,\r\n        writable: true,\r\n      });\r\n\r\n      // If the socket was created by net.Server we will track the socket\r\n      if (message.key) {\r\n\r\n        // Add socket to connections list\r\n        const socketList = getSocketList('got', this, message.key);\r\n        socketList.add({\r\n          socket: socket,\r\n        });\r\n      }\r\n\r\n      emit(socket);\r\n    },\r\n  },\r\n\r\n  'dgram.Native': {\r\n    simultaneousAccepts: false,\r\n\r\n    send(message, handle, options) {\r\n      return handle;\r\n    },\r\n\r\n    got(message, handle, emit) {\r\n      emit(handle);\r\n    },\r\n  },\r\n\r\n  'dgram.Socket': {\r\n    simultaneousAccepts: false,\r\n\r\n    send(message, socket, options) {\r\n      message.dgramType = socket.type;\r\n\r\n      return socket[kStateSymbol].handle;\r\n    },\r\n\r\n    got(message, handle, emit) {\r\n      const socket = new dgram.Socket(message.dgramType);\r\n\r\n      socket.bind(handle, () => {\r\n        emit(socket);\r\n      });\r\n    },\r\n  },\r\n};\r\n\r\nfunction stdioStringToArray(stdio, channel) {\r\n  const options = [];\r\n\r\n  switch (stdio) {\r\n    case 'ignore':\r\n    case 'overlapped':\r\n    case 'pipe': ArrayPrototypePush(options, stdio, stdio, stdio); break;\r\n    case 'inherit': ArrayPrototypePush(options, 0, 1, 2); break;\r\n    default:\r\n      throw new ERR_INVALID_ARG_VALUE('stdio', stdio);\r\n  }\r\n\r\n  if (channel) ArrayPrototypePush(options, channel);\r\n\r\n  return options;\r\n}\r\n\r\nfunction ChildProcess() {\r\n  FunctionPrototypeCall(EventEmitter, this);\r\n\r\n  this._closesNeeded = 1;\r\n  this._closesGot = 0;\r\n  this.connected = false;\r\n\r\n  this.signalCode = null;\r\n  this.exitCode = null;\r\n  this.killed = false;\r\n  this.spawnfile = null;\r\n\r\n  this._handle = new Process();\r\n  this._handle[owner_symbol] = this;\r\n\r\n  this._handle.onexit = (exitCode, signalCode) => {\r\n    if (signalCode) {\r\n      this.signalCode = signalCode;\r\n    } else {\r\n      this.exitCode = exitCode;\r\n    }\r\n\r\n    if (this.stdin) {\r\n      this.stdin.destroy();\r\n    }\r\n\r\n    this._handle.close();\r\n    this._handle = null;\r\n\r\n    if (exitCode < 0) {\r\n      const syscall = this.spawnfile ? 'spawn ' + this.spawnfile : 'spawn';\r\n      const err = new ErrnoException(exitCode, syscall);\r\n\r\n      if (this.spawnfile)\r\n        err.path = this.spawnfile;\r\n\r\n      err.spawnargs = ArrayPrototypeSlice(this.spawnargs, 1);\r\n      this.emit('error', err);\r\n    } else {\r\n      this.emit('exit', this.exitCode, this.signalCode);\r\n    }\r\n\r\n    // If any of the stdio streams have not been touched,\r\n    // then pull all the data through so that it can get the\r\n    // eof and emit a 'close' event.\r\n    // Do it on nextTick so that the user has one last chance\r\n    // to consume the output, if for example they only want to\r\n    // start reading the data once the process exits.\r\n    process.nextTick(flushStdio, this);\r\n\r\n    maybeClose(this);\r\n  };\r\n  if (childProcessChannel.hasSubscribers) {\r\n    childProcessChannel.publish({\r\n      process: this,\r\n    });\r\n  }\r\n}\r\nObjectSetPrototypeOf(ChildProcess.prototype, EventEmitter.prototype);\r\nObjectSetPrototypeOf(ChildProcess, EventEmitter);\r\n\r\n\r\nfunction flushStdio(subprocess) {\r\n  const stdio = subprocess.stdio;\r\n\r\n  if (stdio == null) return;\r\n\r\n  for (let i = 0; i < stdio.length; i++) {\r\n    const stream = stdio[i];\r\n    // TODO(addaleax): This doesn't necessarily account for all the ways in\r\n    // which data can be read from a stream, e.g. being consumed on the\r\n    // native layer directly as a StreamBase.\r\n    if (!stream || !stream.readable || stream[kIsUsedAsStdio]) {\r\n      continue;\r\n    }\r\n    stream.resume();\r\n  }\r\n}\r\n\r\n\r\nfunction createSocket(pipe, readable) {\r\n  return net.Socket({ handle: pipe, readable });\r\n}\r\n\r\n\r\nfunction getHandleWrapType(stream) {\r\n  if (stream instanceof Pipe) return 'pipe';\r\n  if (stream instanceof TTY) return 'tty';\r\n  if (stream instanceof TCP) return 'tcp';\r\n  if (stream instanceof UDP) return 'udp';\r\n\r\n  return false;\r\n}\r\n\r\nfunction closePendingHandle(target) {\r\n  target._pendingMessage.handle.close();\r\n  target._pendingMessage = null;\r\n}\r\n\r\n\r\nChildProcess.prototype.spawn = function(options) {\r\n  let i = 0;\r\n\r\n  validateObject(options, 'options');\r\n\r\n  // If no `stdio` option was given - use default\r\n  let stdio = options.stdio || 'pipe';\r\n\r\n  stdio = getValidStdio(stdio, false);\r\n\r\n  const ipc = stdio.ipc;\r\n  const ipcFd = stdio.ipcFd;\r\n  stdio = options.stdio = stdio.stdio;\r\n\r\n\r\n  validateOneOf(options.serialization, 'options.serialization',\r\n                [undefined, 'json', 'advanced']);\r\n  const serialization = options.serialization || 'json';\r\n\r\n  if (ipc !== undefined) {\r\n    // Let child process know about opened IPC channel\r\n    if (options.envPairs === undefined)\r\n      options.envPairs = [];\r\n    else\r\n      validateArray(options.envPairs, 'options.envPairs');\r\n\r\n    ArrayPrototypePush(options.envPairs, `NODE_CHANNEL_FD=${ipcFd}`);\r\n    ArrayPrototypePush(options.envPairs,\r\n                       `NODE_CHANNEL_SERIALIZATION_MODE=${serialization}`);\r\n  }\r\n\r\n  validateString(options.file, 'options.file');\r\n  this.spawnfile = options.file;\r\n\r\n  if (options.args === undefined) {\r\n    this.spawnargs = [];\r\n  } else {\r\n    validateArray(options.args, 'options.args');\r\n    this.spawnargs = options.args;\r\n  }\r\n\r\n  const err = this._handle.spawn(options);\r\n\r\n  // Run-time errors should emit an error, not throw an exception.\r\n  if (err === UV_EACCES ||\r\n      err === UV_EAGAIN ||\r\n      err === UV_EMFILE ||\r\n      err === UV_ENFILE ||\r\n      err === UV_ENOENT) {\r\n    process.nextTick(onErrorNT, this, err);\r\n\r\n    // There is no point in continuing when we've hit EMFILE or ENFILE\r\n    // because we won't be able to set up the stdio file descriptors.\r\n    if (err === UV_EMFILE || err === UV_ENFILE)\r\n      return err;\r\n  } else if (err) {\r\n    // Close all opened fds on error\r\n    for (i = 0; i < stdio.length; i++) {\r\n      const stream = stdio[i];\r\n      if (stream.type === 'pipe') {\r\n        stream.handle.close();\r\n      }\r\n    }\r\n\r\n    this._handle.close();\r\n    this._handle = null;\r\n    throw new ErrnoException(err, 'spawn');\r\n  } else {\r\n    process.nextTick(onSpawnNT, this);\r\n  }\r\n\r\n  this.pid = this._handle.pid;\r\n\r\n  for (i = 0; i < stdio.length; i++) {\r\n    const stream = stdio[i];\r\n    if (stream.type === 'ignore') continue;\r\n\r\n    if (stream.ipc) {\r\n      this._closesNeeded++;\r\n      continue;\r\n    }\r\n\r\n    // The stream is already cloned and piped, thus stop its readable side,\r\n    // otherwise we might attempt to read from the stream when at the same time\r\n    // the child process does.\r\n    if (stream.type === 'wrap') {\r\n      stream.handle.reading = false;\r\n      stream.handle.readStop();\r\n      stream._stdio.pause();\r\n      stream._stdio.readableFlowing = false;\r\n      stream._stdio._readableState.reading = false;\r\n      stream._stdio[kIsUsedAsStdio] = true;\r\n      continue;\r\n    }\r\n\r\n    if (stream.handle) {\r\n      stream.socket = createSocket(this.pid !== 0 ?\r\n        stream.handle : null, i > 0);\r\n\r\n      if (i > 0 && this.pid !== 0) {\r\n        this._closesNeeded++;\r\n        stream.socket.on('close', () => {\r\n          maybeClose(this);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  this.stdin = stdio.length >= 1 && stdio[0].socket !== undefined ?\r\n    stdio[0].socket : null;\r\n  this.stdout = stdio.length >= 2 && stdio[1].socket !== undefined ?\r\n    stdio[1].socket : null;\r\n  this.stderr = stdio.length >= 3 && stdio[2].socket !== undefined ?\r\n    stdio[2].socket : null;\r\n\r\n  this.stdio = [];\r\n\r\n  for (i = 0; i < stdio.length; i++)\r\n    ArrayPrototypePush(this.stdio,\r\n                       stdio[i].socket === undefined ? null : stdio[i].socket);\r\n\r\n  // Add .send() method and start listening for IPC data\r\n  if (ipc !== undefined) setupChannel(this, ipc, serialization);\r\n\r\n  return err;\r\n};\r\n\r\n\r\nfunction onErrorNT(self, err) {\r\n  self._handle.onexit(err);\r\n}\r\n\r\n\r\nfunction onSpawnNT(self) {\r\n  self.emit('spawn');\r\n}\r\n\r\n\r\nChildProcess.prototype.kill = function(sig) {\r\n\r\n  const signal = sig === 0 ? sig :\r\n    convertToValidSignal(sig === undefined ? 'SIGTERM' : sig);\r\n\r\n  if (this._handle) {\r\n    const err = this._handle.kill(signal);\r\n    if (err === 0) {\r\n      /* Success. */\r\n      this.killed = true;\r\n      return true;\r\n    }\r\n    if (err === UV_ESRCH) {\r\n      /* Already dead. */\r\n    } else if (err === UV_EINVAL || err === UV_ENOSYS) {\r\n      /* The underlying platform doesn't support this signal. */\r\n      throw new ErrnoException(err, 'kill');\r\n    } else {\r\n      /* Other error, almost certainly EPERM. */\r\n      this.emit('error', new ErrnoException(err, 'kill'));\r\n    }\r\n  }\r\n\r\n  /* Kill didn't succeed. */\r\n  return false;\r\n};\r\n\r\nChildProcess.prototype[SymbolDispose] = function() {\r\n  if (!this.killed) {\r\n    this.kill();\r\n  }\r\n};\r\n\r\n\r\nChildProcess.prototype.ref = function() {\r\n  if (this._handle) this._handle.ref();\r\n};\r\n\r\n\r\nChildProcess.prototype.unref = function() {\r\n  if (this._handle) this._handle.unref();\r\n};\r\n\r\nclass Control extends EventEmitter {\r\n  #channel = null;\r\n  #refs = 0;\r\n  #refExplicitlySet = false;\r\n\r\n  constructor(channel) {\r\n    super();\r\n    this.#channel = channel;\r\n    this[kPendingMessages] = [];\r\n  }\r\n\r\n  // The methods keeping track of the counter are being used to track the\r\n  // listener count on the child process object as well as when writes are\r\n  // in progress. Once the user has explicitly requested a certain state, these\r\n  // methods become no-ops in order to not interfere with the user's intentions.\r\n  refCounted() {\r\n    if (++this.#refs === 1 && !this.#refExplicitlySet) {\r\n      this.#channel.ref();\r\n    }\r\n  }\r\n\r\n  unrefCounted() {\r\n    if (--this.#refs === 0 && !this.#refExplicitlySet) {\r\n      this.#channel.unref();\r\n      this.emit('unref');\r\n    }\r\n  }\r\n\r\n  ref() {\r\n    this.#refExplicitlySet = true;\r\n    this.#channel.ref();\r\n  }\r\n\r\n  unref() {\r\n    this.#refExplicitlySet = true;\r\n    this.#channel.unref();\r\n  }\r\n\r\n  get fd() {\r\n    return this.#channel ? this.#channel.fd : undefined;\r\n  }\r\n}\r\n\r\nconst channelDeprecationMsg = '_channel is deprecated. ' +\r\n                              'Use ChildProcess.channel instead.';\r\n\r\nlet serialization;\r\nfunction setupChannel(target, channel, serializationMode) {\r\n  const control = new Control(channel);\r\n  target.channel = control;\r\n  target[kChannelHandle] = channel;\r\n\r\n  ObjectDefineProperty(target, '_channel', {\r\n    __proto__: null,\r\n    get: deprecate(() => {\r\n      return target.channel;\r\n    }, channelDeprecationMsg, 'DEP0129'),\r\n    set: deprecate((val) => {\r\n      target.channel = val;\r\n    }, channelDeprecationMsg, 'DEP0129'),\r\n    configurable: true,\r\n    enumerable: false,\r\n  });\r\n\r\n  target._handleQueue = null;\r\n  target._pendingMessage = null;\r\n\r\n  if (serialization === undefined)\r\n    serialization = require('internal/child_process/serialization');\r\n  const {\r\n    initMessageChannel,\r\n    parseChannelMessages,\r\n    writeChannelMessage,\r\n  } = serialization[serializationMode];\r\n\r\n  let pendingHandle = null;\r\n  initMessageChannel(channel);\r\n  channel.pendingHandle = null;\r\n  channel.onread = function(arrayBuffer) {\r\n    const recvHandle = channel.pendingHandle;\r\n    channel.pendingHandle = null;\r\n    if (arrayBuffer) {\r\n      const nread = streamBaseState[kReadBytesOrError];\r\n      const offset = streamBaseState[kArrayBufferOffset];\r\n      const pool = new Uint8Array(arrayBuffer, offset, nread);\r\n      if (recvHandle)\r\n        pendingHandle = recvHandle;\r\n\r\n      for (const message of parseChannelMessages(channel, pool)) {\r\n        // There will be at most one NODE_HANDLE message in every chunk we\r\n        // read because SCM_RIGHTS messages don't get coalesced. Make sure\r\n        // that we deliver the handle with the right message however.\r\n        if (isInternal(message)) {\r\n          if (message.cmd === 'NODE_HANDLE') {\r\n            handleMessage(message, pendingHandle, true);\r\n            pendingHandle = null;\r\n          } else {\r\n            handleMessage(message, undefined, true);\r\n          }\r\n        } else {\r\n          handleMessage(message, undefined, false);\r\n        }\r\n      }\r\n    } else {\r\n      this.buffering = false;\r\n      target.disconnect();\r\n      channel.onread = nop;\r\n      channel.close();\r\n      target.channel = null;\r\n      maybeClose(target);\r\n    }\r\n  };\r\n\r\n  // Object where socket lists will live\r\n  channel.sockets = { got: {}, send: {} };\r\n\r\n  // Handlers will go through this\r\n  target.on('internalMessage', function(message, handle) {\r\n    // Once acknowledged - continue sending handles.\r\n    if (message.cmd === 'NODE_HANDLE_ACK' ||\r\n        message.cmd === 'NODE_HANDLE_NACK') {\r\n\r\n      if (target._pendingMessage) {\r\n        if (message.cmd === 'NODE_HANDLE_ACK') {\r\n          closePendingHandle(target);\r\n        } else if (target._pendingMessage.retransmissions++ ===\r\n                   MAX_HANDLE_RETRANSMISSIONS) {\r\n          closePendingHandle(target);\r\n          process.emitWarning('Handle did not reach the receiving process ' +\r\n                              'correctly', 'SentHandleNotReceivedWarning');\r\n        }\r\n      }\r\n\r\n      assert(ArrayIsArray(target._handleQueue));\r\n      const queue = target._handleQueue;\r\n      target._handleQueue = null;\r\n\r\n      if (target._pendingMessage) {\r\n        target._send(target._pendingMessage.message,\r\n                     target._pendingMessage.handle,\r\n                     target._pendingMessage.options,\r\n                     target._pendingMessage.callback);\r\n      }\r\n\r\n      for (let i = 0; i < queue.length; i++) {\r\n        const args = queue[i];\r\n        target._send(args.message, args.handle, args.options, args.callback);\r\n      }\r\n\r\n      // Process a pending disconnect (if any).\r\n      if (!target.connected && target.channel && !target._handleQueue)\r\n        target._disconnect();\r\n\r\n      return;\r\n    }\r\n\r\n    if (message.cmd !== 'NODE_HANDLE') return;\r\n\r\n    // It is possible that the handle is not received because of some error on\r\n    // ancillary data reception such as MSG_CTRUNC. In this case, report the\r\n    // sender about it by sending a NODE_HANDLE_NACK message.\r\n    if (!handle)\r\n      return target._send({ cmd: 'NODE_HANDLE_NACK' }, null, true);\r\n\r\n    // Acknowledge handle receival. Don't emit error events (for example if\r\n    // the other side has disconnected) because this call to send() is not\r\n    // initiated by the user and it shouldn't be fatal to be unable to ACK\r\n    // a message.\r\n    target._send({ cmd: 'NODE_HANDLE_ACK' }, null, true);\r\n\r\n    const obj = handleConversion[message.type];\r\n\r\n    // Update simultaneous accepts on Windows\r\n    if (process.platform === 'win32') {\r\n      handle.setSimultaneousAccepts(false);\r\n    }\r\n\r\n    // Convert handle object\r\n    obj.got.call(this, message, handle, (handle) => {\r\n      handleMessage(message.msg, handle, isInternal(message.msg));\r\n    });\r\n  });\r\n\r\n  target.on('newListener', function() {\r\n\r\n    process.nextTick(() => {\r\n      if (!target.channel || !target.listenerCount('message'))\r\n        return;\r\n\r\n      const messages = target.channel[kPendingMessages];\r\n      const { length } = messages;\r\n      if (!length) return;\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        ReflectApply(target.emit, target, messages[i]);\r\n      }\r\n\r\n      target.channel[kPendingMessages] = [];\r\n    });\r\n  });\r\n\r\n  target.send = function(message, handle, options, callback) {\r\n    if (typeof handle === 'function') {\r\n      callback = handle;\r\n      handle = undefined;\r\n      options = undefined;\r\n    } else if (typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    } else if (options !== undefined) {\r\n      validateObject(options, 'options');\r\n    }\r\n\r\n    options = { swallowErrors: false, ...options };\r\n\r\n    if (this.connected) {\r\n      return this._send(message, handle, options, callback);\r\n    }\r\n    const ex = new ERR_IPC_CHANNEL_CLOSED();\r\n    if (typeof callback === 'function') {\r\n      process.nextTick(callback, ex);\r\n    } else {\r\n      process.nextTick(() => this.emit('error', ex));\r\n    }\r\n    return false;\r\n  };\r\n\r\n  target._send = function(message, handle, options, callback) {\r\n    assert(this.connected || this.channel);\r\n\r\n    if (message === undefined)\r\n      throw new ERR_MISSING_ARGS('message');\r\n\r\n    // Non-serializable messages should not reach the remote\r\n    // end point; as any failure in the stringification there\r\n    // will result in error message that is weakly consumable.\r\n    // So perform a final check on message prior to sending.\r\n    if (typeof message !== 'string' &&\r\n        typeof message !== 'object' &&\r\n        typeof message !== 'number' &&\r\n        typeof message !== 'boolean') {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'message', ['string', 'object', 'number', 'boolean'], message);\r\n    }\r\n\r\n    // Support legacy function signature\r\n    if (typeof options === 'boolean') {\r\n      options = { swallowErrors: options };\r\n    }\r\n\r\n    let obj;\r\n\r\n    // Package messages with a handle object\r\n    if (handle) {\r\n      // This message will be handled by an internalMessage event handler\r\n      message = {\r\n        cmd: 'NODE_HANDLE',\r\n        type: null,\r\n        msg: message,\r\n      };\r\n\r\n      if (handle instanceof net.Socket) {\r\n        message.type = 'net.Socket';\r\n      } else if (handle instanceof net.Server) {\r\n        message.type = 'net.Server';\r\n      } else if (handle instanceof TCP || handle instanceof Pipe) {\r\n        message.type = 'net.Native';\r\n      } else if (handle instanceof dgram.Socket) {\r\n        message.type = 'dgram.Socket';\r\n      } else if (handle instanceof UDP) {\r\n        message.type = 'dgram.Native';\r\n      } else {\r\n        throw new ERR_INVALID_HANDLE_TYPE();\r\n      }\r\n\r\n      // Queue-up message and handle if we haven't received ACK yet.\r\n      if (this._handleQueue) {\r\n        ArrayPrototypePush(this._handleQueue, {\r\n          callback: callback,\r\n          handle: handle,\r\n          options: options,\r\n          message: message.msg,\r\n        });\r\n        return this._handleQueue.length === 1;\r\n      }\r\n\r\n      obj = handleConversion[message.type];\r\n\r\n      // convert TCP object to native handle object\r\n      handle = ReflectApply(handleConversion[message.type].send,\r\n                            target, [message, handle, options]);\r\n\r\n      // If handle was sent twice, or it is impossible to get native handle\r\n      // out of it - just send a text without the handle.\r\n      if (!handle)\r\n        message = message.msg;\r\n\r\n      // Update simultaneous accepts on Windows\r\n      if (obj.simultaneousAccepts && process.platform === 'win32') {\r\n        handle.setSimultaneousAccepts(true);\r\n      }\r\n    } else if (this._handleQueue &&\r\n               !(message && (message.cmd === 'NODE_HANDLE_ACK' ||\r\n                             message.cmd === 'NODE_HANDLE_NACK'))) {\r\n      // Queue request anyway to avoid out-of-order messages.\r\n      ArrayPrototypePush(this._handleQueue, {\r\n        callback: callback,\r\n        handle: null,\r\n        options: options,\r\n        message: message,\r\n      });\r\n      return this._handleQueue.length === 1;\r\n    }\r\n\r\n    const req = new WriteWrap();\r\n\r\n    const err = writeChannelMessage(channel, req, message, handle);\r\n    const wasAsyncWrite = streamBaseState[kLastWriteWasAsync];\r\n\r\n    if (err === 0) {\r\n      if (handle) {\r\n        if (!this._handleQueue)\r\n          this._handleQueue = [];\r\n        if (obj && obj.postSend)\r\n          obj.postSend(message, handle, options, callback, target);\r\n      }\r\n\r\n      if (wasAsyncWrite) {\r\n        req.oncomplete = () => {\r\n          control.unrefCounted();\r\n          if (typeof callback === 'function')\r\n            callback(null);\r\n        };\r\n        control.refCounted();\r\n      } else if (typeof callback === 'function') {\r\n        process.nextTick(callback, null);\r\n      }\r\n    } else {\r\n      // Cleanup handle on error\r\n      if (obj && obj.postSend)\r\n        obj.postSend(message, handle, options, callback);\r\n\r\n      if (!options.swallowErrors) {\r\n        const ex = new ErrnoException(err, 'write');\r\n        if (typeof callback === 'function') {\r\n          process.nextTick(callback, ex);\r\n        } else {\r\n          process.nextTick(() => this.emit('error', ex));\r\n        }\r\n      }\r\n    }\r\n\r\n    /* If the primary is > 2 read() calls behind, please stop sending. */\r\n    return channel.writeQueueSize < (65536 * 2);\r\n  };\r\n\r\n  // Connected will be set to false immediately when a disconnect() is\r\n  // requested, even though the channel might still be alive internally to\r\n  // process queued messages. The three states are distinguished as follows:\r\n  // - disconnect() never requested: channel is not null and connected\r\n  //   is true\r\n  // - disconnect() requested, messages in the queue: channel is not null\r\n  //   and connected is false\r\n  // - disconnect() requested, channel actually disconnected: channel is\r\n  //   null and connected is false\r\n  target.connected = true;\r\n\r\n  target.disconnect = function() {\r\n    if (!this.connected) {\r\n      this.emit('error', new ERR_IPC_DISCONNECTED());\r\n      return;\r\n    }\r\n\r\n    // Do not allow any new messages to be written.\r\n    this.connected = false;\r\n\r\n    // If there are no queued messages, disconnect immediately. Otherwise,\r\n    // postpone the disconnect so that it happens internally after the\r\n    // queue is flushed.\r\n    if (!this._handleQueue)\r\n      this._disconnect();\r\n  };\r\n\r\n  target._disconnect = function() {\r\n    assert(this.channel);\r\n\r\n    // This marks the fact that the channel is actually disconnected.\r\n    this.channel = null;\r\n    this[kChannelHandle] = null;\r\n\r\n    if (this._pendingMessage)\r\n      closePendingHandle(this);\r\n\r\n    let fired = false;\r\n    function finish() {\r\n      if (fired) return;\r\n      fired = true;\r\n\r\n      channel.close();\r\n      target.emit('disconnect');\r\n    }\r\n\r\n    // If a message is being read, then wait for it to complete.\r\n    if (channel.buffering) {\r\n      this.once('message', finish);\r\n      this.once('internalMessage', finish);\r\n\r\n      return;\r\n    }\r\n\r\n    process.nextTick(finish);\r\n  };\r\n\r\n  function emit(event, message, handle) {\r\n    if ('internalMessage' === event || target.listenerCount('message')) {\r\n      target.emit(event, message, handle);\r\n      return;\r\n    }\r\n\r\n    ArrayPrototypePush(\r\n      target.channel[kPendingMessages],\r\n      [event, message, handle],\r\n    );\r\n  }\r\n\r\n  function handleMessage(message, handle, internal) {\r\n    if (!target.channel)\r\n      return;\r\n\r\n    const eventName = (internal ? 'internalMessage' : 'message');\r\n\r\n    process.nextTick(emit, eventName, message, handle);\r\n  }\r\n\r\n  channel.readStart();\r\n  return control;\r\n}\r\n\r\nconst INTERNAL_PREFIX = 'NODE_';\r\nfunction isInternal(message) {\r\n  return (message !== null &&\r\n          typeof message === 'object' &&\r\n          typeof message.cmd === 'string' &&\r\n          message.cmd.length > INTERNAL_PREFIX.length &&\r\n          StringPrototypeSlice(message.cmd, 0, INTERNAL_PREFIX.length) ===\r\n            INTERNAL_PREFIX);\r\n}\r\n\r\nconst nop = FunctionPrototype;\r\n\r\nfunction getValidStdio(stdio, sync) {\r\n  let ipc;\r\n  let ipcFd;\r\n\r\n  // Replace shortcut with an array\r\n  if (typeof stdio === 'string') {\r\n    stdio = stdioStringToArray(stdio);\r\n  } else if (!ArrayIsArray(stdio)) {\r\n    throw new ERR_INVALID_ARG_VALUE('stdio', stdio);\r\n  }\r\n\r\n  // At least 3 stdio will be created\r\n  // Don't concat() a new Array() because it would be sparse, and\r\n  // stdio.reduce() would skip the sparse elements of stdio.\r\n  // See https://stackoverflow.com/a/5501711/3561\r\n  while (stdio.length < 3) ArrayPrototypePush(stdio, undefined);\r\n\r\n  // Translate stdio into C++-readable form\r\n  // (i.e. PipeWraps or fds)\r\n  stdio = ArrayPrototypeReduce(stdio, (acc, stdio, i) => {\r\n    function cleanup() {\r\n      for (let i = 0; i < acc.length; i++) {\r\n        if ((acc[i].type === 'pipe' || acc[i].type === 'ipc') && acc[i].handle)\r\n          acc[i].handle.close();\r\n      }\r\n    }\r\n\r\n    // Defaults\r\n    if (stdio == null) {\r\n      stdio = i < 3 ? 'pipe' : 'ignore';\r\n    }\r\n\r\n    if (stdio === 'ignore') {\r\n      ArrayPrototypePush(acc, { type: 'ignore' });\r\n    } else if (stdio === 'pipe' || stdio === 'overlapped' ||\r\n               (typeof stdio === 'number' && stdio < 0)) {\r\n      const a = {\r\n        type: stdio === 'overlapped' ? 'overlapped' : 'pipe',\r\n        readable: i === 0,\r\n        writable: i !== 0,\r\n      };\r\n\r\n      if (!sync)\r\n        a.handle = new Pipe(PipeConstants.SOCKET);\r\n\r\n      ArrayPrototypePush(acc, a);\r\n    } else if (stdio === 'ipc') {\r\n      if (sync || ipc !== undefined) {\r\n        // Cleanup previously created pipes\r\n        cleanup();\r\n        if (!sync)\r\n          throw new ERR_IPC_ONE_PIPE();\r\n        else\r\n          throw new ERR_IPC_SYNC_FORK();\r\n      }\r\n\r\n      ipc = new Pipe(PipeConstants.IPC);\r\n      ipcFd = i;\r\n\r\n      ArrayPrototypePush(acc, {\r\n        type: 'pipe',\r\n        handle: ipc,\r\n        ipc: true,\r\n      });\r\n    } else if (stdio === 'inherit') {\r\n      ArrayPrototypePush(acc, {\r\n        type: 'inherit',\r\n        fd: i,\r\n      });\r\n    } else if (typeof stdio === 'number' || typeof stdio.fd === 'number') {\r\n      ArrayPrototypePush(acc, {\r\n        type: 'fd',\r\n        fd: typeof stdio === 'number' ? stdio : stdio.fd,\r\n      });\r\n    } else if (getHandleWrapType(stdio) || getHandleWrapType(stdio.handle) ||\r\n               getHandleWrapType(stdio._handle)) {\r\n      const handle = getHandleWrapType(stdio) ?\r\n        stdio :\r\n        getHandleWrapType(stdio.handle) ? stdio.handle : stdio._handle;\r\n\r\n      ArrayPrototypePush(acc, {\r\n        type: 'wrap',\r\n        wrapType: getHandleWrapType(handle),\r\n        handle: handle,\r\n        _stdio: stdio,\r\n      });\r\n    } else if (isArrayBufferView(stdio) || typeof stdio === 'string') {\r\n      if (!sync) {\r\n        cleanup();\r\n        throw new ERR_INVALID_SYNC_FORK_INPUT(inspect(stdio));\r\n      }\r\n    } else {\r\n      // Cleanup\r\n      cleanup();\r\n      throw new ERR_INVALID_ARG_VALUE('stdio', stdio);\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  return { stdio, ipc, ipcFd };\r\n}\r\n\r\n\r\nfunction getSocketList(type, worker, key) {\r\n  const sockets = worker[kChannelHandle].sockets[type];\r\n  let socketList = sockets[key];\r\n  if (!socketList) {\r\n    const Construct = type === 'send' ? SocketListSend : SocketListReceive;\r\n    socketList = sockets[key] = new Construct(worker, key);\r\n  }\r\n  return socketList;\r\n}\r\n\r\n\r\nfunction maybeClose(subprocess) {\r\n  subprocess._closesGot++;\r\n\r\n  if (subprocess._closesGot === subprocess._closesNeeded) {\r\n    subprocess.emit('close', subprocess.exitCode, subprocess.signalCode);\r\n  }\r\n}\r\n\r\nfunction spawnSync(options) {\r\n  const result = spawn_sync.spawn(options);\r\n\r\n  if (result.output && options.encoding && options.encoding !== 'buffer') {\r\n    for (let i = 0; i < result.output.length; i++) {\r\n      if (!result.output[i])\r\n        continue;\r\n      result.output[i] = result.output[i].toString(options.encoding);\r\n    }\r\n  }\r\n\r\n  result.stdout = result.output && result.output[1];\r\n  result.stderr = result.output && result.output[2];\r\n\r\n  if (result.error) {\r\n    result.error = new ErrnoException(result.error, 'spawnSync ' + options.file);\r\n    result.error.path = options.file;\r\n    result.error.spawnargs = ArrayPrototypeSlice(options.args, 1);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports = {\r\n  ChildProcess,\r\n  kChannelHandle,\r\n  setupChannel,\r\n  getValidStdio,\r\n  stdioStringToArray,\r\n  spawnSync,\r\n};\r\n"
  },
  "146": {
    "metadata": {
      "scriptId": "146",
      "url": "node:dgram",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1084,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "335ed0d64a24f0f47d6d551e9e953180a20aacea8c6eebdc24cfb803505c4899",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 29500,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:dgram"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  Array,\r\n  ArrayIsArray,\r\n  ArrayPrototypePush,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeCall,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n  SymbolAsyncDispose,\r\n  SymbolDispose,\r\n} = primordials;\r\n\r\nconst {\r\n  ErrnoException,\r\n  ExceptionWithHostPort,\r\n  codes: {\r\n    ERR_BUFFER_OUT_OF_BOUNDS,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_FD_TYPE,\r\n    ERR_MISSING_ARGS,\r\n    ERR_SOCKET_ALREADY_BOUND,\r\n    ERR_SOCKET_BAD_BUFFER_SIZE,\r\n    ERR_SOCKET_BUFFER_SIZE,\r\n    ERR_SOCKET_DGRAM_IS_CONNECTED,\r\n    ERR_SOCKET_DGRAM_NOT_CONNECTED,\r\n    ERR_SOCKET_DGRAM_NOT_RUNNING,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  kStateSymbol,\r\n  _createSocketHandle,\r\n  newHandle,\r\n} = require('internal/dgram');\r\nconst {\r\n  isInt32,\r\n  validateAbortSignal,\r\n  validateString,\r\n  validateNumber,\r\n  validatePort,\r\n} = require('internal/validators');\r\nconst { Buffer } = require('buffer');\r\nconst { deprecate, guessHandleType, promisify } = require('internal/util');\r\nconst { isArrayBufferView } = require('internal/util/types');\r\nconst EventEmitter = require('events');\r\nconst { addAbortListener } = require('internal/events/abort_listener');\r\nconst {\r\n  defaultTriggerAsyncIdScope,\r\n  symbols: { async_id_symbol, owner_symbol },\r\n} = require('internal/async_hooks');\r\nconst { UV_UDP_REUSEADDR } = internalBinding('constants').os;\r\n\r\nconst {\r\n  constants: { UV_UDP_IPV6ONLY },\r\n  UDP,\r\n  SendWrap,\r\n} = internalBinding('udp_wrap');\r\n\r\nconst dc = require('diagnostics_channel');\r\nconst udpSocketChannel = dc.channel('udp.socket');\r\n\r\nconst BIND_STATE_UNBOUND = 0;\r\nconst BIND_STATE_BINDING = 1;\r\nconst BIND_STATE_BOUND = 2;\r\n\r\nconst CONNECT_STATE_DISCONNECTED = 0;\r\nconst CONNECT_STATE_CONNECTING = 1;\r\nconst CONNECT_STATE_CONNECTED = 2;\r\n\r\nconst RECV_BUFFER = true;\r\nconst SEND_BUFFER = false;\r\n\r\n// Lazily loaded\r\nlet _cluster = null;\r\nfunction lazyLoadCluster() {\r\n  if (!_cluster) _cluster = require('cluster');\r\n  return _cluster;\r\n}\r\n\r\nfunction Socket(type, listener) {\r\n  FunctionPrototypeCall(EventEmitter, this);\r\n  let lookup;\r\n  let recvBufferSize;\r\n  let sendBufferSize;\r\n\r\n  let options;\r\n  if (type !== null && typeof type === 'object') {\r\n    options = type;\r\n    type = options.type;\r\n    lookup = options.lookup;\r\n    recvBufferSize = options.recvBufferSize;\r\n    sendBufferSize = options.sendBufferSize;\r\n  }\r\n\r\n  const handle = newHandle(type, lookup);\r\n  handle[owner_symbol] = this;\r\n\r\n  this[async_id_symbol] = handle.getAsyncId();\r\n  this.type = type;\r\n\r\n  if (typeof listener === 'function')\r\n    this.on('message', listener);\r\n\r\n  this[kStateSymbol] = {\r\n    handle,\r\n    receiving: false,\r\n    bindState: BIND_STATE_UNBOUND,\r\n    connectState: CONNECT_STATE_DISCONNECTED,\r\n    queue: undefined,\r\n    reuseAddr: options && options.reuseAddr, // Use UV_UDP_REUSEADDR if true.\r\n    ipv6Only: options && options.ipv6Only,\r\n    recvBufferSize,\r\n    sendBufferSize,\r\n  };\r\n\r\n  if (options?.signal !== undefined) {\r\n    const { signal } = options;\r\n    validateAbortSignal(signal, 'options.signal');\r\n    const onAborted = () => {\r\n      if (this[kStateSymbol].handle) this.close();\r\n    };\r\n    if (signal.aborted) {\r\n      onAborted();\r\n    } else {\r\n      const disposable = addAbortListener(signal, onAborted);\r\n      this.once('close', disposable[SymbolDispose]);\r\n    }\r\n  }\r\n  if (udpSocketChannel.hasSubscribers) {\r\n    udpSocketChannel.publish({\r\n      socket: this,\r\n    });\r\n  }\r\n}\r\nObjectSetPrototypeOf(Socket.prototype, EventEmitter.prototype);\r\nObjectSetPrototypeOf(Socket, EventEmitter);\r\n\r\n\r\nfunction createSocket(type, listener) {\r\n  return new Socket(type, listener);\r\n}\r\n\r\n\r\nfunction startListening(socket) {\r\n  const state = socket[kStateSymbol];\r\n\r\n  state.handle.onmessage = onMessage;\r\n  state.handle.onerror = onError;\r\n  state.handle.recvStart();\r\n  state.receiving = true;\r\n  state.bindState = BIND_STATE_BOUND;\r\n\r\n  if (state.recvBufferSize)\r\n    bufferSize(socket, state.recvBufferSize, RECV_BUFFER);\r\n\r\n  if (state.sendBufferSize)\r\n    bufferSize(socket, state.sendBufferSize, SEND_BUFFER);\r\n\r\n  socket.emit('listening');\r\n}\r\n\r\nfunction replaceHandle(self, newHandle) {\r\n  const state = self[kStateSymbol];\r\n  const oldHandle = state.handle;\r\n  // Sync the old handle state to new handle\r\n  if (!oldHandle.hasRef() && typeof newHandle.unref === 'function') {\r\n    newHandle.unref();\r\n  }\r\n  // Set up the handle that we got from primary.\r\n  newHandle.lookup = oldHandle.lookup;\r\n  newHandle.bind = oldHandle.bind;\r\n  newHandle.send = oldHandle.send;\r\n  newHandle[owner_symbol] = self;\r\n\r\n  // Replace the existing handle by the handle we got from primary.\r\n  oldHandle.close();\r\n  state.handle = newHandle;\r\n}\r\n\r\nfunction bufferSize(self, size, buffer) {\r\n  if (size >>> 0 !== size)\r\n    throw new ERR_SOCKET_BAD_BUFFER_SIZE();\r\n\r\n  const ctx = {};\r\n  const ret = self[kStateSymbol].handle.bufferSize(size, buffer, ctx);\r\n  if (ret === undefined) {\r\n    throw new ERR_SOCKET_BUFFER_SIZE(ctx);\r\n  }\r\n  return ret;\r\n}\r\n\r\n// Query primary process to get the server handle and utilize it.\r\nfunction bindServerHandle(self, options, errCb) {\r\n  const cluster = lazyLoadCluster();\r\n\r\n  const state = self[kStateSymbol];\r\n  cluster._getServer(self, options, (err, handle) => {\r\n    if (err) {\r\n      // Do not call callback if socket is closed\r\n      if (state.handle) {\r\n        errCb(err);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (!state.handle) {\r\n      // Handle has been closed in the mean time.\r\n      return handle.close();\r\n    }\r\n\r\n    replaceHandle(self, handle);\r\n    startListening(self);\r\n  });\r\n}\r\n\r\nSocket.prototype.bind = function(port_, address_ /* , callback */) {\r\n  let port = port_;\r\n\r\n  healthCheck(this);\r\n  const state = this[kStateSymbol];\r\n\r\n  if (state.bindState !== BIND_STATE_UNBOUND)\r\n    throw new ERR_SOCKET_ALREADY_BOUND();\r\n\r\n  state.bindState = BIND_STATE_BINDING;\r\n\r\n  const cb = arguments.length && arguments[arguments.length - 1];\r\n  if (typeof cb === 'function') {\r\n    function removeListeners() {\r\n      this.removeListener('error', removeListeners);\r\n      this.removeListener('listening', onListening);\r\n    }\r\n\r\n    function onListening() {\r\n      FunctionPrototypeCall(removeListeners, this);\r\n      FunctionPrototypeCall(cb, this);\r\n    }\r\n\r\n    this.on('error', removeListeners);\r\n    this.on('listening', onListening);\r\n  }\r\n\r\n  if (port !== null &&\r\n      typeof port === 'object' &&\r\n      typeof port.recvStart === 'function') {\r\n    replaceHandle(this, port);\r\n    startListening(this);\r\n    return this;\r\n  }\r\n\r\n  // Open an existing fd instead of creating a new one.\r\n  if (port !== null && typeof port === 'object' &&\r\n      isInt32(port.fd) && port.fd > 0) {\r\n    const fd = port.fd;\r\n    const exclusive = !!port.exclusive;\r\n    const state = this[kStateSymbol];\r\n\r\n    const cluster = lazyLoadCluster();\r\n\r\n    if (cluster.isWorker && !exclusive) {\r\n      bindServerHandle(this, {\r\n        address: null,\r\n        port: null,\r\n        addressType: this.type,\r\n        fd,\r\n        flags: null,\r\n      }, (err) => {\r\n        // Callback to handle error.\r\n        const ex = new ErrnoException(err, 'open');\r\n        state.bindState = BIND_STATE_UNBOUND;\r\n        this.emit('error', ex);\r\n      });\r\n      return this;\r\n    }\r\n\r\n    const type = guessHandleType(fd);\r\n    if (type !== 'UDP')\r\n      throw new ERR_INVALID_FD_TYPE(type);\r\n    const err = state.handle.open(fd);\r\n\r\n    if (err)\r\n      throw new ErrnoException(err, 'open');\r\n\r\n    startListening(this);\r\n    return this;\r\n  }\r\n\r\n  let address;\r\n  let exclusive;\r\n\r\n  if (port !== null && typeof port === 'object') {\r\n    address = port.address || '';\r\n    exclusive = !!port.exclusive;\r\n    port = port.port;\r\n  } else {\r\n    address = typeof address_ === 'function' ? '' : address_;\r\n    exclusive = false;\r\n  }\r\n\r\n  // Defaulting address for bind to all interfaces\r\n  if (!address) {\r\n    if (this.type === 'udp4')\r\n      address = '0.0.0.0';\r\n    else\r\n      address = '::';\r\n  }\r\n\r\n  // Resolve address first\r\n  state.handle.lookup(address, (err, ip) => {\r\n    if (!state.handle)\r\n      return; // Handle has been closed in the mean time\r\n\r\n    if (err) {\r\n      state.bindState = BIND_STATE_UNBOUND;\r\n      this.emit('error', err);\r\n      return;\r\n    }\r\n\r\n    const cluster = lazyLoadCluster();\r\n\r\n    let flags = 0;\r\n    if (state.reuseAddr)\r\n      flags |= UV_UDP_REUSEADDR;\r\n    if (state.ipv6Only)\r\n      flags |= UV_UDP_IPV6ONLY;\r\n\r\n    if (cluster.isWorker && !exclusive) {\r\n      bindServerHandle(this, {\r\n        address: ip,\r\n        port: port,\r\n        addressType: this.type,\r\n        fd: -1,\r\n        flags: flags,\r\n      }, (err) => {\r\n        // Callback to handle error.\r\n        const ex = new ExceptionWithHostPort(err, 'bind', ip, port);\r\n        state.bindState = BIND_STATE_UNBOUND;\r\n        this.emit('error', ex);\r\n      });\r\n    } else {\r\n      const err = state.handle.bind(ip, port || 0, flags);\r\n      if (err) {\r\n        const ex = new ExceptionWithHostPort(err, 'bind', ip, port);\r\n        state.bindState = BIND_STATE_UNBOUND;\r\n        this.emit('error', ex);\r\n        // Todo: close?\r\n        return;\r\n      }\r\n\r\n      startListening(this);\r\n    }\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\nSocket.prototype.connect = function(port, address, callback) {\r\n  port = validatePort(port, 'Port', false);\r\n  if (typeof address === 'function') {\r\n    callback = address;\r\n    address = '';\r\n  } else if (address === undefined) {\r\n    address = '';\r\n  }\r\n\r\n  validateString(address, 'address');\r\n\r\n  const state = this[kStateSymbol];\r\n\r\n  if (state.connectState !== CONNECT_STATE_DISCONNECTED)\r\n    throw new ERR_SOCKET_DGRAM_IS_CONNECTED();\r\n\r\n  state.connectState = CONNECT_STATE_CONNECTING;\r\n  if (state.bindState === BIND_STATE_UNBOUND)\r\n    this.bind({ port: 0, exclusive: true }, null);\r\n\r\n  if (state.bindState !== BIND_STATE_BOUND) {\r\n    enqueue(this, FunctionPrototypeBind(_connect, this,\r\n                                        port, address, callback));\r\n    return;\r\n  }\r\n\r\n  ReflectApply(_connect, this, [port, address, callback]);\r\n};\r\n\r\n\r\nfunction _connect(port, address, callback) {\r\n  const state = this[kStateSymbol];\r\n  if (callback)\r\n    this.once('connect', callback);\r\n\r\n  const afterDns = (ex, ip) => {\r\n    defaultTriggerAsyncIdScope(\r\n      this[async_id_symbol],\r\n      doConnect,\r\n      ex, this, ip, address, port, callback,\r\n    );\r\n  };\r\n\r\n  state.handle.lookup(address, afterDns);\r\n}\r\n\r\n\r\nfunction doConnect(ex, self, ip, address, port, callback) {\r\n  const state = self[kStateSymbol];\r\n  if (!state.handle)\r\n    return;\r\n\r\n  if (!ex) {\r\n    const err = state.handle.connect(ip, port);\r\n    if (err) {\r\n      ex = new ExceptionWithHostPort(err, 'connect', address, port);\r\n    }\r\n  }\r\n\r\n  if (ex) {\r\n    state.connectState = CONNECT_STATE_DISCONNECTED;\r\n    return process.nextTick(() => {\r\n      if (callback) {\r\n        self.removeListener('connect', callback);\r\n        callback(ex);\r\n      } else {\r\n        self.emit('error', ex);\r\n      }\r\n    });\r\n  }\r\n\r\n  state.connectState = CONNECT_STATE_CONNECTED;\r\n  process.nextTick(() => self.emit('connect'));\r\n}\r\n\r\n\r\nSocket.prototype.disconnect = function() {\r\n  const state = this[kStateSymbol];\r\n  if (state.connectState !== CONNECT_STATE_CONNECTED)\r\n    throw new ERR_SOCKET_DGRAM_NOT_CONNECTED();\r\n\r\n  const err = state.handle.disconnect();\r\n  if (err)\r\n    throw new ErrnoException(err, 'connect');\r\n  else\r\n    state.connectState = CONNECT_STATE_DISCONNECTED;\r\n};\r\n\r\n\r\n// Thin wrapper around `send`, here for compatibility with dgram_legacy.js\r\nSocket.prototype.sendto = function(buffer,\r\n                                   offset,\r\n                                   length,\r\n                                   port,\r\n                                   address,\r\n                                   callback) {\r\n  validateNumber(offset, 'offset');\r\n  validateNumber(length, 'length');\r\n  validateNumber(port, 'port');\r\n  validateString(address, 'address');\r\n\r\n  this.send(buffer, offset, length, port, address, callback);\r\n};\r\n\r\n\r\nfunction sliceBuffer(buffer, offset, length) {\r\n  if (typeof buffer === 'string') {\r\n    buffer = Buffer.from(buffer);\r\n  } else if (!isArrayBufferView(buffer)) {\r\n    throw new ERR_INVALID_ARG_TYPE('buffer',\r\n                                   ['Buffer',\r\n                                    'TypedArray',\r\n                                    'DataView',\r\n                                    'string'],\r\n                                   buffer);\r\n  }\r\n\r\n  offset = offset >>> 0;\r\n  length = length >>> 0;\r\n  if (offset > buffer.byteLength) {\r\n    throw new ERR_BUFFER_OUT_OF_BOUNDS('offset');\r\n  }\r\n\r\n  if (offset + length > buffer.byteLength) {\r\n    throw new ERR_BUFFER_OUT_OF_BOUNDS('length');\r\n  }\r\n\r\n  return Buffer.from(buffer.buffer, buffer.byteOffset + offset, length);\r\n}\r\n\r\n\r\nfunction fixBufferList(list) {\r\n  const newlist = new Array(list.length);\r\n\r\n  for (let i = 0, l = list.length; i < l; i++) {\r\n    const buf = list[i];\r\n    if (typeof buf === 'string')\r\n      newlist[i] = Buffer.from(buf);\r\n    else if (!isArrayBufferView(buf))\r\n      return null;\r\n    else\r\n      newlist[i] = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);\r\n  }\r\n\r\n  return newlist;\r\n}\r\n\r\n\r\nfunction enqueue(self, toEnqueue) {\r\n  const state = self[kStateSymbol];\r\n\r\n  // If the send queue hasn't been initialized yet, do it, and install an\r\n  // event handler that flushes the send queue after binding is done.\r\n  if (state.queue === undefined) {\r\n    state.queue = [];\r\n    self.once(EventEmitter.errorMonitor, onListenError);\r\n    self.once('listening', onListenSuccess);\r\n  }\r\n  ArrayPrototypePush(state.queue, toEnqueue);\r\n}\r\n\r\n\r\nfunction onListenSuccess() {\r\n  this.removeListener(EventEmitter.errorMonitor, onListenError);\r\n  FunctionPrototypeCall(clearQueue, this);\r\n}\r\n\r\n\r\nfunction onListenError(err) {\r\n  this.removeListener('listening', onListenSuccess);\r\n  this[kStateSymbol].queue = undefined;\r\n}\r\n\r\n\r\nfunction clearQueue() {\r\n  const state = this[kStateSymbol];\r\n  const queue = state.queue;\r\n  state.queue = undefined;\r\n\r\n  // Flush the send queue.\r\n  for (const queueEntry of queue)\r\n    queueEntry();\r\n}\r\n\r\n// valid combinations\r\n// For connectionless sockets\r\n// send(buffer, offset, length, port, address, callback)\r\n// send(buffer, offset, length, port, address)\r\n// send(buffer, offset, length, port, callback)\r\n// send(buffer, offset, length, port)\r\n// send(bufferOrList, port, address, callback)\r\n// send(bufferOrList, port, address)\r\n// send(bufferOrList, port, callback)\r\n// send(bufferOrList, port)\r\n// For connected sockets\r\n// send(buffer, offset, length, callback)\r\n// send(buffer, offset, length)\r\n// send(bufferOrList, callback)\r\n// send(bufferOrList)\r\nSocket.prototype.send = function(buffer,\r\n                                 offset,\r\n                                 length,\r\n                                 port,\r\n                                 address,\r\n                                 callback) {\r\n\r\n  let list;\r\n  const state = this[kStateSymbol];\r\n  const connected = state.connectState === CONNECT_STATE_CONNECTED;\r\n  if (!connected) {\r\n    if (address || (port && typeof port !== 'function')) {\r\n      buffer = sliceBuffer(buffer, offset, length);\r\n    } else {\r\n      callback = port;\r\n      port = offset;\r\n      address = length;\r\n    }\r\n  } else {\r\n    if (typeof length === 'number') {\r\n      buffer = sliceBuffer(buffer, offset, length);\r\n      if (typeof port === 'function') {\r\n        callback = port;\r\n        port = null;\r\n      }\r\n    } else {\r\n      callback = offset;\r\n    }\r\n\r\n    if (port || address)\r\n      throw new ERR_SOCKET_DGRAM_IS_CONNECTED();\r\n  }\r\n\r\n  if (!ArrayIsArray(buffer)) {\r\n    if (typeof buffer === 'string') {\r\n      list = [ Buffer.from(buffer) ];\r\n    } else if (!isArrayBufferView(buffer)) {\r\n      throw new ERR_INVALID_ARG_TYPE('buffer',\r\n                                     ['Buffer',\r\n                                      'TypedArray',\r\n                                      'DataView',\r\n                                      'string'],\r\n                                     buffer);\r\n    } else {\r\n      list = [ buffer ];\r\n    }\r\n  } else if (!(list = fixBufferList(buffer))) {\r\n    throw new ERR_INVALID_ARG_TYPE('buffer list arguments',\r\n                                   ['Buffer',\r\n                                    'TypedArray',\r\n                                    'DataView',\r\n                                    'string'],\r\n                                   buffer);\r\n  }\r\n\r\n  if (!connected)\r\n    port = validatePort(port, 'Port', false);\r\n\r\n  // Normalize callback so it's either a function or undefined but not anything\r\n  // else.\r\n  if (typeof callback !== 'function')\r\n    callback = undefined;\r\n\r\n  if (typeof address === 'function') {\r\n    callback = address;\r\n    address = undefined;\r\n  } else if (address != null) {\r\n    validateString(address, 'address');\r\n  }\r\n\r\n  healthCheck(this);\r\n\r\n  if (state.bindState === BIND_STATE_UNBOUND)\r\n    this.bind({ port: 0, exclusive: true }, null);\r\n\r\n  if (list.length === 0)\r\n    ArrayPrototypePush(list, Buffer.alloc(0));\r\n\r\n  // If the socket hasn't been bound yet, push the outbound packet onto the\r\n  // send queue and send after binding is complete.\r\n  if (state.bindState !== BIND_STATE_BOUND) {\r\n    enqueue(this, FunctionPrototypeBind(this.send, this,\r\n                                        list, port, address, callback));\r\n    return;\r\n  }\r\n\r\n  const afterDns = (ex, ip) => {\r\n    defaultTriggerAsyncIdScope(\r\n      this[async_id_symbol],\r\n      doSend,\r\n      ex, this, ip, list, address, port, callback,\r\n    );\r\n  };\r\n\r\n  if (!connected) {\r\n    state.handle.lookup(address, afterDns);\r\n  } else {\r\n    afterDns(null, null);\r\n  }\r\n};\r\n\r\nfunction doSend(ex, self, ip, list, address, port, callback) {\r\n  const state = self[kStateSymbol];\r\n\r\n  if (ex) {\r\n    if (typeof callback === 'function') {\r\n      process.nextTick(callback, ex);\r\n      return;\r\n    }\r\n\r\n    process.nextTick(() => self.emit('error', ex));\r\n    return;\r\n  } else if (!state.handle) {\r\n    return;\r\n  }\r\n\r\n  const req = new SendWrap();\r\n  req.list = list;  // Keep reference alive.\r\n  req.address = address;\r\n  req.port = port;\r\n  if (callback) {\r\n    req.callback = callback;\r\n    req.oncomplete = afterSend;\r\n  }\r\n\r\n  let err;\r\n  if (port)\r\n    err = state.handle.send(req, list, list.length, port, ip, !!callback);\r\n  else\r\n    err = state.handle.send(req, list, list.length, !!callback);\r\n\r\n  if (err >= 1) {\r\n    // Synchronous finish. The return code is msg_length + 1 so that we can\r\n    // distinguish between synchronous success and asynchronous success.\r\n    if (callback)\r\n      process.nextTick(callback, null, err - 1);\r\n    return;\r\n  }\r\n\r\n  if (err && callback) {\r\n    // Don't emit as error, dgram_legacy.js compatibility\r\n    const ex = new ExceptionWithHostPort(err, 'send', address, port);\r\n    process.nextTick(callback, ex);\r\n  }\r\n}\r\n\r\nfunction afterSend(err, sent) {\r\n  if (err) {\r\n    err = new ExceptionWithHostPort(err, 'send', this.address, this.port);\r\n  } else {\r\n    err = null;\r\n  }\r\n\r\n  this.callback(err, sent);\r\n}\r\n\r\nSocket.prototype.close = function(callback) {\r\n  const state = this[kStateSymbol];\r\n  const queue = state.queue;\r\n\r\n  if (typeof callback === 'function')\r\n    this.on('close', callback);\r\n\r\n  if (queue !== undefined) {\r\n    ArrayPrototypePush(queue, FunctionPrototypeBind(this.close, this));\r\n    return this;\r\n  }\r\n\r\n  healthCheck(this);\r\n  stopReceiving(this);\r\n  state.handle.close();\r\n  state.handle = null;\r\n  defaultTriggerAsyncIdScope(this[async_id_symbol],\r\n                             process.nextTick,\r\n                             socketCloseNT,\r\n                             this);\r\n\r\n  return this;\r\n};\r\n\r\nSocket.prototype[SymbolAsyncDispose] = async function() {\r\n  if (!this[kStateSymbol].handle) {\r\n    return;\r\n  }\r\n  return FunctionPrototypeCall(promisify(this.close), this);\r\n};\r\n\r\n\r\nfunction socketCloseNT(self) {\r\n  self.emit('close');\r\n}\r\n\r\n\r\nSocket.prototype.address = function() {\r\n  healthCheck(this);\r\n\r\n  const out = {};\r\n  const err = this[kStateSymbol].handle.getsockname(out);\r\n  if (err) {\r\n    throw new ErrnoException(err, 'getsockname');\r\n  }\r\n\r\n  return out;\r\n};\r\n\r\nSocket.prototype.remoteAddress = function() {\r\n  healthCheck(this);\r\n\r\n  const state = this[kStateSymbol];\r\n  if (state.connectState !== CONNECT_STATE_CONNECTED)\r\n    throw new ERR_SOCKET_DGRAM_NOT_CONNECTED();\r\n\r\n  const out = {};\r\n  const err = state.handle.getpeername(out);\r\n  if (err)\r\n    throw new ErrnoException(err, 'getpeername');\r\n\r\n  return out;\r\n};\r\n\r\n\r\nSocket.prototype.setBroadcast = function(arg) {\r\n  const err = this[kStateSymbol].handle.setBroadcast(arg ? 1 : 0);\r\n  if (err) {\r\n    throw new ErrnoException(err, 'setBroadcast');\r\n  }\r\n};\r\n\r\n\r\nSocket.prototype.setTTL = function(ttl) {\r\n  validateNumber(ttl, 'ttl');\r\n\r\n  const err = this[kStateSymbol].handle.setTTL(ttl);\r\n  if (err) {\r\n    throw new ErrnoException(err, 'setTTL');\r\n  }\r\n\r\n  return ttl;\r\n};\r\n\r\n\r\nSocket.prototype.setMulticastTTL = function(ttl) {\r\n  validateNumber(ttl, 'ttl');\r\n\r\n  const err = this[kStateSymbol].handle.setMulticastTTL(ttl);\r\n  if (err) {\r\n    throw new ErrnoException(err, 'setMulticastTTL');\r\n  }\r\n\r\n  return ttl;\r\n};\r\n\r\n\r\nSocket.prototype.setMulticastLoopback = function(arg) {\r\n  const err = this[kStateSymbol].handle.setMulticastLoopback(arg ? 1 : 0);\r\n  if (err) {\r\n    throw new ErrnoException(err, 'setMulticastLoopback');\r\n  }\r\n\r\n  return arg; // 0.4 compatibility\r\n};\r\n\r\n\r\nSocket.prototype.setMulticastInterface = function(interfaceAddress) {\r\n  healthCheck(this);\r\n  validateString(interfaceAddress, 'interfaceAddress');\r\n\r\n  const err = this[kStateSymbol].handle.setMulticastInterface(interfaceAddress);\r\n  if (err) {\r\n    throw new ErrnoException(err, 'setMulticastInterface');\r\n  }\r\n};\r\n\r\nSocket.prototype.addMembership = function(multicastAddress,\r\n                                          interfaceAddress) {\r\n  healthCheck(this);\r\n\r\n  if (!multicastAddress) {\r\n    throw new ERR_MISSING_ARGS('multicastAddress');\r\n  }\r\n\r\n  const { handle } = this[kStateSymbol];\r\n  const err = handle.addMembership(multicastAddress, interfaceAddress);\r\n  if (err) {\r\n    throw new ErrnoException(err, 'addMembership');\r\n  }\r\n};\r\n\r\n\r\nSocket.prototype.dropMembership = function(multicastAddress,\r\n                                           interfaceAddress) {\r\n  healthCheck(this);\r\n\r\n  if (!multicastAddress) {\r\n    throw new ERR_MISSING_ARGS('multicastAddress');\r\n  }\r\n\r\n  const { handle } = this[kStateSymbol];\r\n  const err = handle.dropMembership(multicastAddress, interfaceAddress);\r\n  if (err) {\r\n    throw new ErrnoException(err, 'dropMembership');\r\n  }\r\n};\r\n\r\nSocket.prototype.addSourceSpecificMembership = function(sourceAddress,\r\n                                                        groupAddress,\r\n                                                        interfaceAddress) {\r\n  healthCheck(this);\r\n\r\n  validateString(sourceAddress, 'sourceAddress');\r\n  validateString(groupAddress, 'groupAddress');\r\n\r\n  const err =\r\n    this[kStateSymbol].handle.addSourceSpecificMembership(sourceAddress,\r\n                                                          groupAddress,\r\n                                                          interfaceAddress);\r\n  if (err) {\r\n    throw new ErrnoException(err, 'addSourceSpecificMembership');\r\n  }\r\n};\r\n\r\n\r\nSocket.prototype.dropSourceSpecificMembership = function(sourceAddress,\r\n                                                         groupAddress,\r\n                                                         interfaceAddress) {\r\n  healthCheck(this);\r\n\r\n  validateString(sourceAddress, 'sourceAddress');\r\n  validateString(groupAddress, 'groupAddress');\r\n\r\n  const err =\r\n    this[kStateSymbol].handle.dropSourceSpecificMembership(sourceAddress,\r\n                                                           groupAddress,\r\n                                                           interfaceAddress);\r\n  if (err) {\r\n    throw new ErrnoException(err, 'dropSourceSpecificMembership');\r\n  }\r\n};\r\n\r\n\r\nfunction healthCheck(socket) {\r\n  if (!socket[kStateSymbol].handle) {\r\n    // Error message from dgram_legacy.js.\r\n    throw new ERR_SOCKET_DGRAM_NOT_RUNNING();\r\n  }\r\n}\r\n\r\n\r\nfunction stopReceiving(socket) {\r\n  const state = socket[kStateSymbol];\r\n\r\n  if (!state.receiving)\r\n    return;\r\n\r\n  state.handle.recvStop();\r\n  state.receiving = false;\r\n}\r\n\r\n\r\nfunction onMessage(nread, handle, buf, rinfo) {\r\n  const self = handle[owner_symbol];\r\n  if (nread < 0) {\r\n    return self.emit('error', new ErrnoException(nread, 'recvmsg'));\r\n  }\r\n  rinfo.size = buf.length; // compatibility\r\n  self.emit('message', buf, rinfo);\r\n}\r\n\r\n\r\nfunction onError(nread, handle, error) {\r\n  const self = handle[owner_symbol];\r\n  return self.emit('error', error);\r\n}\r\n\r\n\r\nSocket.prototype.ref = function() {\r\n  const handle = this[kStateSymbol].handle;\r\n\r\n  if (handle)\r\n    handle.ref();\r\n\r\n  return this;\r\n};\r\n\r\n\r\nSocket.prototype.unref = function() {\r\n  const handle = this[kStateSymbol].handle;\r\n\r\n  if (handle)\r\n    handle.unref();\r\n\r\n  return this;\r\n};\r\n\r\n\r\nSocket.prototype.setRecvBufferSize = function(size) {\r\n  bufferSize(this, size, RECV_BUFFER);\r\n};\r\n\r\n\r\nSocket.prototype.setSendBufferSize = function(size) {\r\n  bufferSize(this, size, SEND_BUFFER);\r\n};\r\n\r\n\r\nSocket.prototype.getRecvBufferSize = function() {\r\n  return bufferSize(this, 0, RECV_BUFFER);\r\n};\r\n\r\n\r\nSocket.prototype.getSendBufferSize = function() {\r\n  return bufferSize(this, 0, SEND_BUFFER);\r\n};\r\n\r\nSocket.prototype.getSendQueueSize = function() {\r\n  return this[kStateSymbol].handle.getSendQueueSize();\r\n};\r\n\r\nSocket.prototype.getSendQueueCount = function() {\r\n  return this[kStateSymbol].handle.getSendQueueCount();\r\n};\r\n\r\n// Deprecated private APIs.\r\nObjectDefineProperty(Socket.prototype, '_handle', {\r\n  __proto__: null,\r\n  get: deprecate(function() {\r\n    return this[kStateSymbol].handle;\r\n  }, 'Socket.prototype._handle is deprecated', 'DEP0112'),\r\n  set: deprecate(function(val) {\r\n    this[kStateSymbol].handle = val;\r\n  }, 'Socket.prototype._handle is deprecated', 'DEP0112'),\r\n});\r\n\r\n\r\nObjectDefineProperty(Socket.prototype, '_receiving', {\r\n  __proto__: null,\r\n  get: deprecate(function() {\r\n    return this[kStateSymbol].receiving;\r\n  }, 'Socket.prototype._receiving is deprecated', 'DEP0112'),\r\n  set: deprecate(function(val) {\r\n    this[kStateSymbol].receiving = val;\r\n  }, 'Socket.prototype._receiving is deprecated', 'DEP0112'),\r\n});\r\n\r\n\r\nObjectDefineProperty(Socket.prototype, '_bindState', {\r\n  __proto__: null,\r\n  get: deprecate(function() {\r\n    return this[kStateSymbol].bindState;\r\n  }, 'Socket.prototype._bindState is deprecated', 'DEP0112'),\r\n  set: deprecate(function(val) {\r\n    this[kStateSymbol].bindState = val;\r\n  }, 'Socket.prototype._bindState is deprecated', 'DEP0112'),\r\n});\r\n\r\n\r\nObjectDefineProperty(Socket.prototype, '_queue', {\r\n  __proto__: null,\r\n  get: deprecate(function() {\r\n    return this[kStateSymbol].queue;\r\n  }, 'Socket.prototype._queue is deprecated', 'DEP0112'),\r\n  set: deprecate(function(val) {\r\n    this[kStateSymbol].queue = val;\r\n  }, 'Socket.prototype._queue is deprecated', 'DEP0112'),\r\n});\r\n\r\n\r\nObjectDefineProperty(Socket.prototype, '_reuseAddr', {\r\n  __proto__: null,\r\n  get: deprecate(function() {\r\n    return this[kStateSymbol].reuseAddr;\r\n  }, 'Socket.prototype._reuseAddr is deprecated', 'DEP0112'),\r\n  set: deprecate(function(val) {\r\n    this[kStateSymbol].reuseAddr = val;\r\n  }, 'Socket.prototype._reuseAddr is deprecated', 'DEP0112'),\r\n});\r\n\r\n\r\nSocket.prototype._healthCheck = deprecate(function() {\r\n  healthCheck(this);\r\n}, 'Socket.prototype._healthCheck() is deprecated', 'DEP0112');\r\n\r\n\r\nSocket.prototype._stopReceiving = deprecate(function() {\r\n  stopReceiving(this);\r\n}, 'Socket.prototype._stopReceiving() is deprecated', 'DEP0112');\r\n\r\n\r\n// Legacy alias on the C++ wrapper object. This is not public API, so we may\r\n// want to runtime-deprecate it at some point. There's no hurry, though.\r\nObjectDefineProperty(UDP.prototype, 'owner', {\r\n  __proto__: null,\r\n  get() { return this[owner_symbol]; },\r\n  set(v) { return this[owner_symbol] = v; },\r\n});\r\n\r\n\r\nmodule.exports = {\r\n  _createSocketHandle: deprecate(\r\n    _createSocketHandle,\r\n    'dgram._createSocketHandle() is deprecated',\r\n    'DEP0112',\r\n  ),\r\n  createSocket,\r\n  Socket,\r\n};\r\n"
  },
  "147": {
    "metadata": {
      "scriptId": "147",
      "url": "node:internal/dgram",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 91,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "5be44cbe16ee822b5d9aa48a12227db5879c08daa1eff03808554de0159dfb8e",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1928,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/dgram"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeBind,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst { codes: {\r\n  ERR_SOCKET_BAD_TYPE,\r\n} } = require('internal/errors');\r\nconst { UDP } = internalBinding('udp_wrap');\r\nconst { guessHandleType } = require('internal/util');\r\nconst {\r\n  isInt32,\r\n  validateFunction,\r\n} = require('internal/validators');\r\nconst { UV_EINVAL } = internalBinding('uv');\r\nconst kStateSymbol = Symbol('state symbol');\r\nlet dns;  // Lazy load for startup performance.\r\n\r\n\r\nfunction lookup4(lookup, address, callback) {\r\n  return lookup(address || '127.0.0.1', 4, callback);\r\n}\r\n\r\n\r\nfunction lookup6(lookup, address, callback) {\r\n  return lookup(address || '::1', 6, callback);\r\n}\r\n\r\nfunction newHandle(type, lookup) {\r\n  if (lookup === undefined) {\r\n    if (dns === undefined) {\r\n      dns = require('dns');\r\n    }\r\n\r\n    lookup = dns.lookup;\r\n  } else {\r\n    validateFunction(lookup, 'lookup');\r\n  }\r\n\r\n  if (type === 'udp4') {\r\n    const handle = new UDP();\r\n\r\n    handle.lookup = FunctionPrototypeBind(lookup4, handle, lookup);\r\n    return handle;\r\n  }\r\n\r\n  if (type === 'udp6') {\r\n    const handle = new UDP();\r\n\r\n    handle.lookup = FunctionPrototypeBind(lookup6, handle, lookup);\r\n    handle.bind = handle.bind6;\r\n    handle.connect = handle.connect6;\r\n    handle.send = handle.send6;\r\n    return handle;\r\n  }\r\n\r\n  throw new ERR_SOCKET_BAD_TYPE();\r\n}\r\n\r\n\r\nfunction _createSocketHandle(address, port, addressType, fd, flags) {\r\n  const handle = newHandle(addressType);\r\n  let err;\r\n\r\n  if (isInt32(fd) && fd > 0) {\r\n    const type = guessHandleType(fd);\r\n    if (type !== 'UDP') {\r\n      err = UV_EINVAL;\r\n    } else {\r\n      err = handle.open(fd);\r\n    }\r\n  } else if (port || address) {\r\n    err = handle.bind(address, port || 0, flags);\r\n  }\r\n\r\n  if (err) {\r\n    handle.close();\r\n    return err;\r\n  }\r\n\r\n  return handle;\r\n}\r\n\r\n\r\nmodule.exports = {\r\n  kStateSymbol,\r\n  _createSocketHandle,\r\n  newHandle,\r\n};\r\n"
  },
  "148": {
    "metadata": {
      "scriptId": "148",
      "url": "node:internal/socket_list",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 108,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "e16a0df2cb463f66229c7061ffa0022f57df33e496ac51e4417a178e8d4cf4c1",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2817,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/socket_list"
    },
    "source": "'use strict';\r\n\r\nconst { ERR_CHILD_CLOSED_BEFORE_REPLY } = require('internal/errors').codes;\r\n\r\nconst EventEmitter = require('events');\r\n\r\n// This object keeps track of the sockets that are sent\r\nclass SocketListSend extends EventEmitter {\r\n  constructor(child, key) {\r\n    super();\r\n    this.key = key;\r\n    this.child = child;\r\n    child.once('exit', () => this.emit('exit', this));\r\n  }\r\n\r\n  _request(msg, cmd, swallowErrors, callback) {\r\n    const self = this;\r\n\r\n    if (!this.child.connected) return onclose();\r\n    this.child._send(msg, undefined, swallowErrors);\r\n\r\n    function onclose() {\r\n      self.child.removeListener('internalMessage', onreply);\r\n      callback(new ERR_CHILD_CLOSED_BEFORE_REPLY());\r\n    }\r\n\r\n    function onreply(msg) {\r\n      if (!(msg.cmd === cmd && msg.key === self.key)) return;\r\n      self.child.removeListener('disconnect', onclose);\r\n      self.child.removeListener('internalMessage', onreply);\r\n\r\n      callback(null, msg);\r\n    }\r\n\r\n    this.child.once('disconnect', onclose);\r\n    this.child.on('internalMessage', onreply);\r\n  }\r\n\r\n  close(callback) {\r\n    this._request({\r\n      cmd: 'NODE_SOCKET_NOTIFY_CLOSE',\r\n      key: this.key,\r\n    }, 'NODE_SOCKET_ALL_CLOSED', true, callback);\r\n  }\r\n\r\n  getConnections(callback) {\r\n    this._request({\r\n      cmd: 'NODE_SOCKET_GET_COUNT',\r\n      key: this.key,\r\n    }, 'NODE_SOCKET_COUNT', false, (err, msg) => {\r\n      if (err) return callback(err);\r\n      callback(null, msg.count);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n// This object keeps track of the sockets that are received\r\nclass SocketListReceive extends EventEmitter {\r\n  constructor(child, key) {\r\n    super();\r\n\r\n    this.connections = 0;\r\n    this.key = key;\r\n    this.child = child;\r\n\r\n    function onempty(self) {\r\n      if (!self.child.connected) return;\r\n\r\n      self.child._send({\r\n        cmd: 'NODE_SOCKET_ALL_CLOSED',\r\n        key: self.key,\r\n      }, undefined, true);\r\n    }\r\n\r\n    this.child.on('internalMessage', (msg) => {\r\n      if (msg.key !== this.key) return;\r\n\r\n      if (msg.cmd === 'NODE_SOCKET_NOTIFY_CLOSE') {\r\n        // Already empty\r\n        if (this.connections === 0) return onempty(this);\r\n\r\n        // Wait for sockets to get closed\r\n        this.once('empty', onempty);\r\n      } else if (msg.cmd === 'NODE_SOCKET_GET_COUNT') {\r\n        if (!this.child.connected) return;\r\n        this.child._send({\r\n          cmd: 'NODE_SOCKET_COUNT',\r\n          key: this.key,\r\n          count: this.connections,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  add(obj) {\r\n    this.connections++;\r\n\r\n    // Notify the previous owner of the socket about its state change\r\n    obj.socket.once('close', () => {\r\n      this.connections--;\r\n\r\n      if (this.connections === 0) this.emit('empty', this);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = { SocketListSend, SocketListReceive };\r\n"
  },
  "149": {
    "metadata": {
      "scriptId": "149",
      "url": "node:cluster",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 29,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "15b852bdd6dcbade2beda0fe4cd297fbb4837e9d3b33d0f5da6902c3d617823f",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1405,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:cluster"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ObjectPrototypeHasOwnProperty: ObjectHasOwn,\r\n} = primordials;\r\n\r\nconst childOrPrimary = ObjectHasOwn(process.env, 'NODE_UNIQUE_ID') ? 'child' : 'primary';\r\nmodule.exports = require(`internal/cluster/${childOrPrimary}`);\r\n"
  },
  "150": {
    "metadata": {
      "scriptId": "150",
      "url": "node:internal/cluster/primary",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 365,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "8c3d6767cf4deacf7e87737349550c4281a39846f6f307b05059085a2a8f2736",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10502,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/cluster/primary"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSome,\r\n  ObjectKeys,\r\n  ObjectValues,\r\n  SafeMap,\r\n  StringPrototypeStartsWith,\r\n} = primordials;\r\nconst {\r\n  codes: {\r\n    ERR_SOCKET_BAD_PORT,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst assert = require('internal/assert');\r\nconst { fork } = require('child_process');\r\nconst path = require('path');\r\nconst EventEmitter = require('events');\r\nconst RoundRobinHandle = require('internal/cluster/round_robin_handle');\r\nconst SharedHandle = require('internal/cluster/shared_handle');\r\nconst Worker = require('internal/cluster/worker');\r\nconst { getInspectPort, isUsingInspector } = require('internal/util/inspector');\r\nconst { internal, sendHelper } = require('internal/cluster/utils');\r\nconst cluster = new EventEmitter();\r\nconst intercom = new EventEmitter();\r\nconst SCHED_NONE = 1;\r\nconst SCHED_RR = 2;\r\n\r\nmodule.exports = cluster;\r\n\r\nconst handles = new SafeMap();\r\ncluster.isWorker = false;\r\ncluster.isMaster = true; // Deprecated alias. Must be same as isPrimary.\r\ncluster.isPrimary = true;\r\ncluster.Worker = Worker;\r\ncluster.workers = {};\r\ncluster.settings = {};\r\ncluster.SCHED_NONE = SCHED_NONE;  // Leave it to the operating system.\r\ncluster.SCHED_RR = SCHED_RR;      // Primary distributes connections.\r\n\r\nlet ids = 0;\r\nlet initialized = false;\r\n\r\n// XXX(bnoordhuis) Fold cluster.schedulingPolicy into cluster.settings?\r\nlet schedulingPolicy = process.env.NODE_CLUSTER_SCHED_POLICY;\r\nif (schedulingPolicy === 'rr')\r\n  schedulingPolicy = SCHED_RR;\r\nelse if (schedulingPolicy === 'none')\r\n  schedulingPolicy = SCHED_NONE;\r\nelse if (process.platform === 'win32') {\r\n  // Round-robin doesn't perform well on\r\n  // Windows due to the way IOCP is wired up.\r\n  schedulingPolicy = SCHED_NONE;\r\n} else\r\n  schedulingPolicy = SCHED_RR;\r\n\r\ncluster.schedulingPolicy = schedulingPolicy;\r\n\r\ncluster.setupPrimary = function(options) {\r\n  const settings = {\r\n    args: ArrayPrototypeSlice(process.argv, 2),\r\n    exec: process.argv[1],\r\n    execArgv: process.execArgv,\r\n    silent: false,\r\n    ...cluster.settings,\r\n    ...options,\r\n  };\r\n\r\n  // Tell V8 to write profile data for each process to a separate file.\r\n  // Without --logfile=v8-%p.log, everything ends up in a single, unusable\r\n  // file. (Unusable because what V8 logs are memory addresses and each\r\n  // process has its own memory mappings.)\r\n  if (ArrayPrototypeSome(settings.execArgv,\r\n                         (s) => StringPrototypeStartsWith(s, '--prof')) &&\r\n      !ArrayPrototypeSome(settings.execArgv,\r\n                          (s) => StringPrototypeStartsWith(s, '--logfile='))) {\r\n    settings.execArgv = [...settings.execArgv, '--logfile=v8-%p.log'];\r\n  }\r\n\r\n  cluster.settings = settings;\r\n\r\n  if (initialized === true)\r\n    return process.nextTick(setupSettingsNT, settings);\r\n\r\n  initialized = true;\r\n  schedulingPolicy = cluster.schedulingPolicy;  // Freeze policy.\r\n  assert(schedulingPolicy === SCHED_NONE || schedulingPolicy === SCHED_RR,\r\n         `Bad cluster.schedulingPolicy: ${schedulingPolicy}`);\r\n\r\n  process.nextTick(setupSettingsNT, settings);\r\n\r\n  process.on('internalMessage', (message) => {\r\n    if (message.cmd !== 'NODE_DEBUG_ENABLED')\r\n      return;\r\n\r\n    for (const worker of ObjectValues(cluster.workers)) {\r\n      if (worker.state === 'online' || worker.state === 'listening') {\r\n        process._debugProcess(worker.process.pid);\r\n      } else {\r\n        worker.once('online', function() {\r\n          process._debugProcess(this.process.pid);\r\n        });\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n// Deprecated alias must be same as setupPrimary\r\ncluster.setupMaster = cluster.setupPrimary;\r\n\r\nfunction setupSettingsNT(settings) {\r\n  cluster.emit('setup', settings);\r\n}\r\n\r\nfunction createWorkerProcess(id, env) {\r\n  const workerEnv = { ...process.env, ...env, NODE_UNIQUE_ID: `${id}` };\r\n  const execArgv = [...cluster.settings.execArgv];\r\n\r\n  if (cluster.settings.inspectPort === null) {\r\n    throw new ERR_SOCKET_BAD_PORT('Port', null, true);\r\n  }\r\n  if (isUsingInspector(cluster.settings.execArgv)) {\r\n    ArrayPrototypePush(execArgv, `--inspect-port=${getInspectPort(cluster.settings.inspectPort)}`);\r\n  }\r\n\r\n  return fork(cluster.settings.exec, cluster.settings.args, {\r\n    cwd: cluster.settings.cwd,\r\n    env: workerEnv,\r\n    serialization: cluster.settings.serialization,\r\n    silent: cluster.settings.silent,\r\n    windowsHide: cluster.settings.windowsHide,\r\n    execArgv: execArgv,\r\n    stdio: cluster.settings.stdio,\r\n    gid: cluster.settings.gid,\r\n    uid: cluster.settings.uid,\r\n  });\r\n}\r\n\r\nfunction removeWorker(worker) {\r\n  assert(worker);\r\n  delete cluster.workers[worker.id];\r\n\r\n  if (ObjectKeys(cluster.workers).length === 0) {\r\n    assert(handles.size === 0, 'Resource leak detected.');\r\n    intercom.emit('disconnect');\r\n  }\r\n}\r\n\r\nfunction removeHandlesForWorker(worker) {\r\n  assert(worker);\r\n\r\n  for (const { 0: key, 1: handle } of handles) {\r\n    if (handle.remove(worker))\r\n      handles.delete(key);\r\n  }\r\n}\r\n\r\ncluster.fork = function(env) {\r\n  cluster.setupPrimary();\r\n  const id = ++ids;\r\n  const workerProcess = createWorkerProcess(id, env);\r\n  const worker = new Worker({\r\n    id: id,\r\n    process: workerProcess,\r\n  });\r\n\r\n  worker.on('message', function(message, handle) {\r\n    cluster.emit('message', this, message, handle);\r\n  });\r\n\r\n  worker.process.once('exit', (exitCode, signalCode) => {\r\n    /*\r\n     * Remove the worker from the workers list only\r\n     * if it has disconnected, otherwise we might\r\n     * still want to access it.\r\n     */\r\n    if (!worker.isConnected()) {\r\n      removeHandlesForWorker(worker);\r\n      removeWorker(worker);\r\n    }\r\n\r\n    worker.exitedAfterDisconnect = !!worker.exitedAfterDisconnect;\r\n    worker.state = 'dead';\r\n    worker.emit('exit', exitCode, signalCode);\r\n    cluster.emit('exit', worker, exitCode, signalCode);\r\n  });\r\n\r\n  worker.process.once('disconnect', () => {\r\n    /*\r\n     * Now is a good time to remove the handles\r\n     * associated with this worker because it is\r\n     * not connected to the primary anymore.\r\n     */\r\n    removeHandlesForWorker(worker);\r\n\r\n    /*\r\n     * Remove the worker from the workers list only\r\n     * if its process has exited. Otherwise, we might\r\n     * still want to access it.\r\n     */\r\n    if (worker.isDead())\r\n      removeWorker(worker);\r\n\r\n    worker.exitedAfterDisconnect = !!worker.exitedAfterDisconnect;\r\n    worker.state = 'disconnected';\r\n    worker.emit('disconnect');\r\n    cluster.emit('disconnect', worker);\r\n  });\r\n\r\n  worker.process.on('internalMessage', internal(worker, onmessage));\r\n  process.nextTick(emitForkNT, worker);\r\n  cluster.workers[worker.id] = worker;\r\n  return worker;\r\n};\r\n\r\nfunction emitForkNT(worker) {\r\n  cluster.emit('fork', worker);\r\n}\r\n\r\ncluster.disconnect = function(cb) {\r\n  const workers = ObjectKeys(cluster.workers);\r\n\r\n  if (workers.length === 0) {\r\n    process.nextTick(() => intercom.emit('disconnect'));\r\n  } else {\r\n    for (const worker of ObjectValues(cluster.workers)) {\r\n      if (worker.isConnected()) {\r\n        worker.disconnect();\r\n      }\r\n    }\r\n  }\r\n\r\n  if (typeof cb === 'function')\r\n    intercom.once('disconnect', cb);\r\n};\r\n\r\nconst methodMessageMapping = {\r\n  close,\r\n  exitedAfterDisconnect,\r\n  listening,\r\n  online,\r\n  queryServer,\r\n};\r\n\r\nfunction onmessage(message, handle) {\r\n  const worker = this;\r\n\r\n  const fn = methodMessageMapping[message.act];\r\n\r\n  if (typeof fn === 'function')\r\n    fn(worker, message);\r\n}\r\n\r\nfunction online(worker) {\r\n  worker.state = 'online';\r\n  worker.emit('online');\r\n  cluster.emit('online', worker);\r\n}\r\n\r\nfunction exitedAfterDisconnect(worker, message) {\r\n  worker.exitedAfterDisconnect = true;\r\n  send(worker, { ack: message.seq });\r\n}\r\n\r\nfunction queryServer(worker, message) {\r\n  // Stop processing if worker already disconnecting\r\n  if (worker.exitedAfterDisconnect)\r\n    return;\r\n\r\n  const key = `${message.address}:${message.port}:${message.addressType}:` +\r\n              `${message.fd}:${message.index}`;\r\n  let handle = handles.get(key);\r\n\r\n  if (handle === undefined) {\r\n    let address = message.address;\r\n\r\n    // Find shortest path for unix sockets because of the ~100 byte limit\r\n    if (message.port < 0 && typeof address === 'string' &&\r\n        process.platform !== 'win32') {\r\n\r\n      address = path.relative(process.cwd(), address);\r\n\r\n      if (message.address.length < address.length)\r\n        address = message.address;\r\n    }\r\n\r\n    // UDP is exempt from round-robin connection balancing for what should\r\n    // be obvious reasons: it's connectionless. There is nothing to send to\r\n    // the workers except raw datagrams and that's pointless.\r\n    if (schedulingPolicy !== SCHED_RR ||\r\n        message.addressType === 'udp4' ||\r\n        message.addressType === 'udp6') {\r\n      handle = new SharedHandle(key, address, message);\r\n    } else {\r\n      handle = new RoundRobinHandle(key, address, message);\r\n    }\r\n\r\n    handles.set(key, handle);\r\n  }\r\n\r\n  if (!handle.data)\r\n    handle.data = message.data;\r\n\r\n  // Set custom server data\r\n  handle.add(worker, (errno, reply, handle) => {\r\n    const { data } = handles.get(key);\r\n\r\n    if (errno)\r\n      handles.delete(key);  // Gives other workers a chance to retry.\r\n\r\n    send(worker, {\r\n      errno,\r\n      key,\r\n      ack: message.seq,\r\n      data,\r\n      ...reply,\r\n    }, handle);\r\n  });\r\n}\r\n\r\nfunction listening(worker, message) {\r\n  const info = {\r\n    addressType: message.addressType,\r\n    address: message.address,\r\n    port: message.port,\r\n    fd: message.fd,\r\n  };\r\n\r\n  worker.state = 'listening';\r\n  worker.emit('listening', info);\r\n  cluster.emit('listening', worker, info);\r\n}\r\n\r\n// Server in worker is closing, remove from list. The handle may have been\r\n// removed by a prior call to removeHandlesForWorker() so guard against that.\r\nfunction close(worker, message) {\r\n  const key = message.key;\r\n  const handle = handles.get(key);\r\n\r\n  if (handle && handle.remove(worker))\r\n    handles.delete(key);\r\n}\r\n\r\nfunction send(worker, message, handle, cb) {\r\n  return sendHelper(worker.process, message, handle, cb);\r\n}\r\n\r\n// Extend generic Worker with methods specific to the primary process.\r\nWorker.prototype.disconnect = function() {\r\n  this.exitedAfterDisconnect = true;\r\n  send(this, { act: 'disconnect' });\r\n  removeHandlesForWorker(this);\r\n  removeWorker(this);\r\n  return this;\r\n};\r\n\r\nWorker.prototype.destroy = function(signo) {\r\n  const proc = this.process;\r\n  const signal = signo || 'SIGTERM';\r\n\r\n  proc.kill(signal);\r\n};\r\n"
  },
  "151": {
    "metadata": {
      "scriptId": "151",
      "url": "node:internal/cluster/round_robin_handle",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 139,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "4f9bcbdd908432dfce870aa621153db0faf16147879677c3719a24390624e38c",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3592,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/cluster/round_robin_handle"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  Boolean,\r\n  SafeMap,\r\n} = primordials;\r\n\r\nconst assert = require('internal/assert');\r\nconst net = require('net');\r\nconst { sendHelper } = require('internal/cluster/utils');\r\nconst { append, init, isEmpty, peek, remove } = require('internal/linkedlist');\r\nconst { constants } = internalBinding('tcp_wrap');\r\n\r\nmodule.exports = RoundRobinHandle;\r\n\r\nfunction RoundRobinHandle(key, address, { port, fd, flags, backlog, readableAll, writableAll }) {\r\n  this.key = key;\r\n  this.all = new SafeMap();\r\n  this.free = new SafeMap();\r\n  this.handles = init({ __proto__: null });\r\n  this.handle = null;\r\n  this.server = net.createServer(assert.fail);\r\n\r\n  if (fd >= 0)\r\n    this.server.listen({ fd, backlog });\r\n  else if (port >= 0) {\r\n    this.server.listen({\r\n      port,\r\n      host: address,\r\n      // Currently, net module only supports `ipv6Only` option in `flags`.\r\n      ipv6Only: Boolean(flags & constants.UV_TCP_IPV6ONLY),\r\n      backlog,\r\n    });\r\n  } else\r\n    this.server.listen({\r\n      path: address,\r\n      backlog,\r\n      readableAll,\r\n      writableAll,\r\n    });  // UNIX socket path.\r\n  this.server.once('listening', () => {\r\n    this.handle = this.server._handle;\r\n    this.handle.onconnection = (err, handle) => this.distribute(err, handle);\r\n    this.server._handle = null;\r\n    this.server = null;\r\n  });\r\n}\r\n\r\nRoundRobinHandle.prototype.add = function(worker, send) {\r\n  assert(this.all.has(worker.id) === false);\r\n  this.all.set(worker.id, worker);\r\n\r\n  const done = () => {\r\n    if (this.handle.getsockname) {\r\n      const out = {};\r\n      this.handle.getsockname(out);\r\n      // TODO(bnoordhuis) Check err.\r\n      send(null, { sockname: out }, null);\r\n    } else {\r\n      send(null, null, null);  // UNIX socket.\r\n    }\r\n\r\n    this.handoff(worker);  // In case there are connections pending.\r\n  };\r\n\r\n  if (this.server === null)\r\n    return done();\r\n\r\n  // Still busy binding.\r\n  this.server.once('listening', done);\r\n  this.server.once('error', (err) => {\r\n    send(err.errno, null);\r\n  });\r\n};\r\n\r\nRoundRobinHandle.prototype.remove = function(worker) {\r\n  const existed = this.all.delete(worker.id);\r\n\r\n  if (!existed)\r\n    return false;\r\n\r\n  this.free.delete(worker.id);\r\n\r\n  if (this.all.size !== 0)\r\n    return false;\r\n\r\n  while (!isEmpty(this.handles)) {\r\n    const handle = peek(this.handles);\r\n    handle.close();\r\n    remove(handle);\r\n  }\r\n\r\n  this.handle.close();\r\n  this.handle = null;\r\n  return true;\r\n};\r\n\r\nRoundRobinHandle.prototype.distribute = function(err, handle) {\r\n  // If `accept` fails just skip it (handle is undefined)\r\n  if (err) {\r\n    return;\r\n  }\r\n  append(this.handles, handle);\r\n  // eslint-disable-next-line node-core/no-array-destructuring\r\n  const [ workerEntry ] = this.free; // this.free is a SafeMap\r\n\r\n  if (ArrayIsArray(workerEntry)) {\r\n    const { 0: workerId, 1: worker } = workerEntry;\r\n    this.free.delete(workerId);\r\n    this.handoff(worker);\r\n  }\r\n};\r\n\r\nRoundRobinHandle.prototype.handoff = function(worker) {\r\n  if (!this.all.has(worker.id)) {\r\n    return;  // Worker is closing (or has closed) the server.\r\n  }\r\n\r\n  const handle = peek(this.handles);\r\n\r\n  if (handle === null) {\r\n    this.free.set(worker.id, worker);  // Add to ready queue again.\r\n    return;\r\n  }\r\n\r\n  remove(handle);\r\n\r\n  const message = { act: 'newconn', key: this.key };\r\n\r\n  sendHelper(worker.process, message, handle, (reply) => {\r\n    if (reply.accepted)\r\n      handle.close();\r\n    else\r\n      this.distribute(0, handle);  // Worker is shutting down. Send to another.\r\n\r\n    this.handoff(worker);\r\n  });\r\n};\r\n"
  },
  "152": {
    "metadata": {
      "scriptId": "152",
      "url": "node:internal/cluster/utils",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 51,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "f9cb094d1f89c06fb815790cb1e39e6f1ec5a3e62d10bd6e0414b30ab0180e7f",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1105,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/cluster/utils"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ReflectApply,\r\n  SafeMap,\r\n} = primordials;\r\n\r\nmodule.exports = {\r\n  sendHelper,\r\n  internal,\r\n};\r\n\r\nconst callbacks = new SafeMap();\r\nlet seq = 0;\r\n\r\nfunction sendHelper(proc, message, handle, cb) {\r\n  if (!proc.connected)\r\n    return false;\r\n\r\n  // Mark message as internal. See INTERNAL_PREFIX\r\n  // in lib/internal/child_process.js\r\n  message = { cmd: 'NODE_CLUSTER', ...message, seq };\r\n\r\n  if (typeof cb === 'function')\r\n    callbacks.set(seq, cb);\r\n\r\n  seq += 1;\r\n  return proc.send(message, handle);\r\n}\r\n\r\n// Returns an internalMessage listener that hands off normal messages\r\n// to the callback but intercepts and redirects ACK messages.\r\nfunction internal(worker, cb) {\r\n  return function onInternalMessage(message, handle) {\r\n    if (message.cmd !== 'NODE_CLUSTER')\r\n      return;\r\n\r\n    let fn = cb;\r\n\r\n    if (message.ack !== undefined) {\r\n      const callback = callbacks.get(message.ack);\r\n\r\n      if (callback !== undefined) {\r\n        fn = callback;\r\n        callbacks.delete(message.ack);\r\n      }\r\n    }\r\n\r\n    ReflectApply(fn, worker, arguments);\r\n  };\r\n}\r\n"
  },
  "153": {
    "metadata": {
      "scriptId": "153",
      "url": "node:internal/cluster/shared_handle",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 49,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "f0cf6e93c4a69f350f37de3168f460292bd5744fdf3bfa56d9a71d6fcf7e624d",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1156,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/cluster/shared_handle"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  SafeMap,\r\n} = primordials;\r\n\r\nconst assert = require('internal/assert');\r\nconst dgram = require('internal/dgram');\r\nconst net = require('net');\r\n\r\nmodule.exports = SharedHandle;\r\n\r\nfunction SharedHandle(key, address, { port, addressType, fd, flags }) {\r\n  this.key = key;\r\n  this.workers = new SafeMap();\r\n  this.handle = null;\r\n  this.errno = 0;\r\n\r\n  let rval;\r\n  if (addressType === 'udp4' || addressType === 'udp6')\r\n    rval = dgram._createSocketHandle(address, port, addressType, fd, flags);\r\n  else\r\n    rval = net._createServerHandle(address, port, addressType, fd, flags);\r\n\r\n  if (typeof rval === 'number')\r\n    this.errno = rval;\r\n  else\r\n    this.handle = rval;\r\n}\r\n\r\nSharedHandle.prototype.add = function(worker, send) {\r\n  assert(!this.workers.has(worker.id));\r\n  this.workers.set(worker.id, worker);\r\n  send(this.errno, null, this.handle);\r\n};\r\n\r\nSharedHandle.prototype.remove = function(worker) {\r\n  if (!this.workers.has(worker.id))\r\n    return false;\r\n\r\n  this.workers.delete(worker.id);\r\n\r\n  if (this.workers.size !== 0)\r\n    return false;\r\n\r\n  this.handle.close();\r\n  this.handle = null;\r\n  return true;\r\n};\r\n"
  },
  "154": {
    "metadata": {
      "scriptId": "154",
      "url": "node:internal/cluster/worker",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 57,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "3c388cf54aac3f3dd31c5aa4dc312409aca556d055b27e1d2c78fb0dd57981d1",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1436,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/cluster/worker"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n} = primordials;\r\n\r\nconst EventEmitter = require('events');\r\n\r\nconst { kEmptyObject } = require('internal/util');\r\n\r\nmodule.exports = Worker;\r\n\r\n// Common Worker implementation shared between the cluster primary and workers.\r\nfunction Worker(options) {\r\n  if (!(this instanceof Worker))\r\n    return new Worker(options);\r\n\r\n  ReflectApply(EventEmitter, this, []);\r\n\r\n  if (options === null || typeof options !== 'object')\r\n    options = kEmptyObject;\r\n\r\n  this.exitedAfterDisconnect = undefined;\r\n\r\n  this.state = options.state || 'none';\r\n  this.id = options.id | 0;\r\n\r\n  if (options.process) {\r\n    this.process = options.process;\r\n    this.process.on('error', (code, signal) =>\r\n      this.emit('error', code, signal),\r\n    );\r\n    this.process.on('message', (message, handle) =>\r\n      this.emit('message', message, handle),\r\n    );\r\n  }\r\n}\r\n\r\nObjectSetPrototypeOf(Worker.prototype, EventEmitter.prototype);\r\nObjectSetPrototypeOf(Worker, EventEmitter);\r\n\r\nWorker.prototype.kill = function() {\r\n  ReflectApply(this.destroy, this, arguments);\r\n};\r\n\r\nWorker.prototype.send = function() {\r\n  return ReflectApply(this.process.send, this.process, arguments);\r\n};\r\n\r\nWorker.prototype.isDead = function() {\r\n  return this.process.exitCode != null || this.process.signalCode != null;\r\n};\r\n\r\nWorker.prototype.isConnected = function() {\r\n  return this.process.connected;\r\n};\r\n"
  },
  "155": {
    "metadata": {
      "scriptId": "155",
      "url": "node:console",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 24,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "b7a433662c24be1f9f51b8403ba0e16c25741bf0018537eee16a854aa79c1d50",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1226,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:console"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nmodule.exports = require('internal/console/global');\r\n"
  },
  "156": {
    "metadata": {
      "scriptId": "156",
      "url": "node:constants",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 41,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "9736aa7526f56034aad7c21b1df930c60f53db7bab90a759bfd253442286cfa0",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1754,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:constants"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ObjectAssign,\r\n  ObjectFreeze,\r\n} = primordials;\r\n\r\n// This module is deprecated in documentation only. Users should be directed\r\n// towards using the specific constants exposed by the individual modules on\r\n// which they are most relevant.\r\n// Deprecation Code: DEP0008\r\nconst constants = internalBinding('constants');\r\nObjectAssign(exports,\r\n             constants.os.dlopen,\r\n             constants.os.errno,\r\n             constants.os.priority,\r\n             constants.os.signals,\r\n             constants.fs,\r\n             constants.crypto);\r\nObjectFreeze(exports);\r\n"
  },
  "157": {
    "metadata": {
      "scriptId": "157",
      "url": "node:dns",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 374,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "e87faa9d5bc5c9ae84b5826986510d9d96ae8dea32aa5d56f84b81dbf16aa530",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 9727,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:dns"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst cares = internalBinding('cares_wrap');\r\nconst { isIP } = require('internal/net');\r\nconst { customPromisifyArgs } = require('internal/util');\r\nconst {\r\n  DNSException,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_MISSING_ARGS,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  bindDefaultResolver,\r\n  setDefaultResolver,\r\n  validateHints,\r\n  emitInvalidHostnameWarning,\r\n  getDefaultResultOrder,\r\n  setDefaultResultOrder,\r\n  errorCodes: dnsErrorCodes,\r\n} = require('internal/dns/utils');\r\nconst {\r\n  Resolver,\r\n} = require('internal/dns/callback_resolver');\r\nconst {\r\n  NODATA,\r\n  FORMERR,\r\n  SERVFAIL,\r\n  NOTFOUND,\r\n  NOTIMP,\r\n  REFUSED,\r\n  BADQUERY,\r\n  BADNAME,\r\n  BADFAMILY,\r\n  BADRESP,\r\n  CONNREFUSED,\r\n  TIMEOUT,\r\n  EOF,\r\n  FILE,\r\n  NOMEM,\r\n  DESTRUCTION,\r\n  BADSTR,\r\n  BADFLAGS,\r\n  NONAME,\r\n  BADHINTS,\r\n  NOTINITIALIZED,\r\n  LOADIPHLPAPI,\r\n  ADDRGETNETWORKPARAMS,\r\n  CANCELLED,\r\n} = dnsErrorCodes;\r\nconst {\r\n  validateBoolean,\r\n  validateFunction,\r\n  validateNumber,\r\n  validateOneOf,\r\n  validatePort,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  GetAddrInfoReqWrap,\r\n  GetNameInfoReqWrap,\r\n  DNS_ORDER_VERBATIM,\r\n  DNS_ORDER_IPV4_FIRST,\r\n  DNS_ORDER_IPV6_FIRST,\r\n} = cares;\r\n\r\nconst kPerfHooksDnsLookupContext = Symbol('kPerfHooksDnsLookupContext');\r\nconst kPerfHooksDnsLookupServiceContext = Symbol('kPerfHooksDnsLookupServiceContext');\r\n\r\nconst {\r\n  hasObserver,\r\n  startPerf,\r\n  stopPerf,\r\n} = require('internal/perf/observe');\r\n\r\nlet promises = null; // Lazy loaded\r\n\r\nfunction onlookup(err, addresses) {\r\n  if (err) {\r\n    return this.callback(new DNSException(err, 'getaddrinfo', this.hostname));\r\n  }\r\n  this.callback(null, addresses[0], this.family || isIP(addresses[0]));\r\n  if (this[kPerfHooksDnsLookupContext] && hasObserver('dns')) {\r\n    stopPerf(this, kPerfHooksDnsLookupContext, { detail: { addresses } });\r\n  }\r\n}\r\n\r\n\r\nfunction onlookupall(err, addresses) {\r\n  if (err) {\r\n    return this.callback(new DNSException(err, 'getaddrinfo', this.hostname));\r\n  }\r\n\r\n  const family = this.family;\r\n  for (let i = 0; i < addresses.length; i++) {\r\n    const addr = addresses[i];\r\n    addresses[i] = {\r\n      address: addr,\r\n      family: family || isIP(addr),\r\n    };\r\n  }\r\n\r\n  this.callback(null, addresses);\r\n  if (this[kPerfHooksDnsLookupContext] && hasObserver('dns')) {\r\n    stopPerf(this, kPerfHooksDnsLookupContext, { detail: { addresses } });\r\n  }\r\n}\r\n\r\n\r\n// Easy DNS A/AAAA look up\r\n// lookup(hostname, [options,] callback)\r\nconst validFamilies = [0, 4, 6];\r\nfunction lookup(hostname, options, callback) {\r\n  let hints = 0;\r\n  let family = 0;\r\n  let all = false;\r\n  let dnsOrder = getDefaultResultOrder();\r\n\r\n  // Parse arguments\r\n  if (hostname) {\r\n    validateString(hostname, 'hostname');\r\n  }\r\n\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    family = 0;\r\n  } else if (typeof options === 'number') {\r\n    validateFunction(callback, 'callback');\r\n\r\n    validateOneOf(options, 'family', validFamilies);\r\n    family = options;\r\n  } else if (options !== undefined && typeof options !== 'object') {\r\n    validateFunction(arguments.length === 2 ? options : callback, 'callback');\r\n    throw new ERR_INVALID_ARG_TYPE('options', ['integer', 'object'], options);\r\n  } else {\r\n    validateFunction(callback, 'callback');\r\n\r\n    if (options?.hints != null) {\r\n      validateNumber(options.hints, 'options.hints');\r\n      hints = options.hints >>> 0;\r\n      validateHints(hints);\r\n    }\r\n    if (options?.family != null) {\r\n      switch (options.family) {\r\n        case 'IPv4':\r\n          family = 4;\r\n          break;\r\n        case 'IPv6':\r\n          family = 6;\r\n          break;\r\n        default:\r\n          validateOneOf(options.family, 'options.family', validFamilies);\r\n          family = options.family;\r\n          break;\r\n      }\r\n    }\r\n    if (options?.all != null) {\r\n      validateBoolean(options.all, 'options.all');\r\n      all = options.all;\r\n    }\r\n    if (options?.verbatim != null) {\r\n      validateBoolean(options.verbatim, 'options.verbatim');\r\n      dnsOrder = options.verbatim ? 'verbatim' : 'ipv4first';\r\n    }\r\n    if (options?.order != null) {\r\n      validateOneOf(options.order, 'options.order', ['ipv4first', 'ipv6first', 'verbatim']);\r\n      dnsOrder = options.dnsOrder;\r\n    }\r\n  }\r\n\r\n  if (!hostname) {\r\n    emitInvalidHostnameWarning(hostname);\r\n    if (all) {\r\n      process.nextTick(callback, null, []);\r\n    } else {\r\n      process.nextTick(callback, null, null, family === 6 ? 6 : 4);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  const matchedFamily = isIP(hostname);\r\n  if (matchedFamily) {\r\n    if (all) {\r\n      process.nextTick(\r\n        callback, null, [{ address: hostname, family: matchedFamily }]);\r\n    } else {\r\n      process.nextTick(callback, null, hostname, matchedFamily);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  const req = new GetAddrInfoReqWrap();\r\n  req.callback = callback;\r\n  req.family = family;\r\n  req.hostname = hostname;\r\n  req.oncomplete = all ? onlookupall : onlookup;\r\n\r\n  let order = DNS_ORDER_VERBATIM;\r\n\r\n  if (dnsOrder === 'ipv4first') {\r\n    order = DNS_ORDER_IPV4_FIRST;\r\n  } else if (dnsOrder === 'ipv6first') {\r\n    order = DNS_ORDER_IPV6_FIRST;\r\n  }\r\n\r\n  const err = cares.getaddrinfo(\r\n    req, hostname, family, hints, order,\r\n  );\r\n  if (err) {\r\n    process.nextTick(callback, new DNSException(err, 'getaddrinfo', hostname));\r\n    return {};\r\n  }\r\n  if (hasObserver('dns')) {\r\n    const detail = {\r\n      hostname,\r\n      family,\r\n      hints,\r\n      verbatim: order === DNS_ORDER_VERBATIM,\r\n      order: dnsOrder,\r\n    };\r\n\r\n    startPerf(req, kPerfHooksDnsLookupContext, { type: 'dns', name: 'lookup', detail });\r\n  }\r\n  return req;\r\n}\r\n\r\nObjectDefineProperty(lookup, customPromisifyArgs,\r\n                     { __proto__: null, value: ['address', 'family'], enumerable: false });\r\n\r\n\r\nfunction onlookupservice(err, hostname, service) {\r\n  if (err)\r\n    return this.callback(new DNSException(err, 'getnameinfo', this.hostname));\r\n\r\n  this.callback(null, hostname, service);\r\n  if (this[kPerfHooksDnsLookupServiceContext] && hasObserver('dns')) {\r\n    stopPerf(this, kPerfHooksDnsLookupServiceContext, { detail: { hostname, service } });\r\n  }\r\n}\r\n\r\n\r\nfunction lookupService(address, port, callback) {\r\n  if (arguments.length !== 3)\r\n    throw new ERR_MISSING_ARGS('address', 'port', 'callback');\r\n\r\n  if (isIP(address) === 0)\r\n    throw new ERR_INVALID_ARG_VALUE('address', address);\r\n\r\n  validatePort(port);\r\n\r\n  validateFunction(callback, 'callback');\r\n\r\n  port = +port;\r\n\r\n  const req = new GetNameInfoReqWrap();\r\n  req.callback = callback;\r\n  req.hostname = address;\r\n  req.port = port;\r\n  req.oncomplete = onlookupservice;\r\n\r\n  const err = cares.getnameinfo(req, address, port);\r\n  if (err) throw new DNSException(err, 'getnameinfo', address);\r\n  if (hasObserver('dns')) {\r\n    startPerf(req, kPerfHooksDnsLookupServiceContext, {\r\n      type: 'dns',\r\n      name: 'lookupService',\r\n      detail: {\r\n        host: address,\r\n        port,\r\n      },\r\n    });\r\n  }\r\n  return req;\r\n}\r\n\r\nObjectDefineProperty(lookupService, customPromisifyArgs,\r\n                     { __proto__: null, value: ['hostname', 'service'], enumerable: false });\r\n\r\nfunction defaultResolverSetServers(servers) {\r\n  const resolver = new Resolver();\r\n\r\n  resolver.setServers(servers);\r\n  setDefaultResolver(resolver);\r\n  bindDefaultResolver(module.exports, Resolver.prototype);\r\n\r\n  if (promises !== null)\r\n    bindDefaultResolver(promises, promises.Resolver.prototype);\r\n}\r\n\r\nmodule.exports = {\r\n  lookup,\r\n  lookupService,\r\n\r\n  Resolver,\r\n  getDefaultResultOrder,\r\n  setDefaultResultOrder,\r\n  setServers: defaultResolverSetServers,\r\n\r\n  // uv_getaddrinfo flags\r\n  ADDRCONFIG: cares.AI_ADDRCONFIG,\r\n  ALL: cares.AI_ALL,\r\n  V4MAPPED: cares.AI_V4MAPPED,\r\n\r\n  // ERROR CODES\r\n  NODATA,\r\n  FORMERR,\r\n  SERVFAIL,\r\n  NOTFOUND,\r\n  NOTIMP,\r\n  REFUSED,\r\n  BADQUERY,\r\n  BADNAME,\r\n  BADFAMILY,\r\n  BADRESP,\r\n  CONNREFUSED,\r\n  TIMEOUT,\r\n  EOF,\r\n  FILE,\r\n  NOMEM,\r\n  DESTRUCTION,\r\n  BADSTR,\r\n  BADFLAGS,\r\n  NONAME,\r\n  BADHINTS,\r\n  NOTINITIALIZED,\r\n  LOADIPHLPAPI,\r\n  ADDRGETNETWORKPARAMS,\r\n  CANCELLED,\r\n};\r\n\r\nbindDefaultResolver(module.exports, Resolver.prototype);\r\n\r\nObjectDefineProperties(module.exports, {\r\n  promises: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      if (promises === null) {\r\n        promises = require('internal/dns/promises');\r\n      }\r\n      return promises;\r\n    },\r\n  },\r\n});\r\n"
  },
  "158": {
    "metadata": {
      "scriptId": "158",
      "url": "node:internal/dns/callback_resolver",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 114,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "643f60cb20237f8029f646bd0f83597b881bc55bac8164e1726f608e41dfa9ba",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2899,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/dns/callback_resolver"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeMap,\r\n  ObjectDefineProperty,\r\n  ReflectApply,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  DNSException,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  createResolverClass,\r\n} = require('internal/dns/utils');\r\n\r\nconst {\r\n  validateFunction,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  QueryReqWrap,\r\n} = internalBinding('cares_wrap');\r\n\r\nconst {\r\n  hasObserver,\r\n  startPerf,\r\n  stopPerf,\r\n} = require('internal/perf/observe');\r\n\r\nconst kPerfHooksDnsLookupResolveContext = Symbol('kPerfHooksDnsLookupResolveContext');\r\n\r\nfunction onresolve(err, result, ttls) {\r\n  if (ttls && this.ttl)\r\n    result = ArrayPrototypeMap(\r\n      result, (address, index) => ({ address, ttl: ttls[index] }));\r\n\r\n  if (err)\r\n    this.callback(new DNSException(err, this.bindingName, this.hostname));\r\n  else {\r\n    this.callback(null, result);\r\n    if (this[kPerfHooksDnsLookupResolveContext] && hasObserver('dns')) {\r\n      stopPerf(this, kPerfHooksDnsLookupResolveContext, { detail: { result } });\r\n    }\r\n  }\r\n}\r\n\r\nfunction resolver(bindingName) {\r\n  function query(name, /* options, */ callback) {\r\n    let options;\r\n    if (arguments.length > 2) {\r\n      options = callback;\r\n      callback = arguments[2];\r\n    }\r\n\r\n    validateString(name, 'name');\r\n    validateFunction(callback, 'callback');\r\n\r\n    const req = new QueryReqWrap();\r\n    req.bindingName = bindingName;\r\n    req.callback = callback;\r\n    req.hostname = name;\r\n    req.oncomplete = onresolve;\r\n    req.ttl = !!(options && options.ttl);\r\n    const err = this._handle[bindingName](req, name);\r\n    if (err) throw new DNSException(err, bindingName, name);\r\n    if (hasObserver('dns')) {\r\n      startPerf(req, kPerfHooksDnsLookupResolveContext, {\r\n        type: 'dns',\r\n        name: bindingName,\r\n        detail: {\r\n          host: name,\r\n          ttl: req.ttl,\r\n        },\r\n      });\r\n    }\r\n    return req;\r\n  }\r\n  ObjectDefineProperty(query, 'name', { __proto__: null, value: bindingName });\r\n  return query;\r\n}\r\n\r\n// This is the callback-based resolver. There is another similar\r\n// resolver in dns/promises.js with resolve methods that are based\r\n// on promises instead.\r\nconst { Resolver, resolveMap } = createResolverClass(resolver);\r\nResolver.prototype.resolve = resolve;\r\n\r\nfunction resolve(hostname, rrtype, callback) {\r\n  let resolver;\r\n  if (typeof rrtype === 'string') {\r\n    resolver = resolveMap[rrtype];\r\n  } else if (typeof rrtype === 'function') {\r\n    resolver = resolveMap.A;\r\n    callback = rrtype;\r\n  } else {\r\n    throw new ERR_INVALID_ARG_TYPE('rrtype', 'string', rrtype);\r\n  }\r\n\r\n  if (typeof resolver === 'function') {\r\n    return ReflectApply(resolver, this, [hostname, callback]);\r\n  }\r\n  throw new ERR_INVALID_ARG_VALUE('rrtype', rrtype);\r\n}\r\n\r\nmodule.exports = {\r\n  Resolver,\r\n};\r\n"
  },
  "159": {
    "metadata": {
      "scriptId": "159",
      "url": "node:dns/promises",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 3,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "9fab753d8cdb4512ec319fabf0abbd8158b8b8551f67f529d33ce6de4649aae7",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 69,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:dns/promises"
    },
    "source": "'use strict';\r\n\r\nmodule.exports = require('internal/dns/promises');\r\n"
  },
  "160": {
    "metadata": {
      "scriptId": "160",
      "url": "node:internal/dns/promises",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 410,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "9a757e5d8ec35974986628337dc5b181157e449a8663178359a8338202c9af8d",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10925,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/dns/promises"
    },
    "source": "'use strict';\r\nconst {\r\n  ArrayPrototypeMap,\r\n  ObjectDefineProperty,\r\n  Promise,\r\n  ReflectApply,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  bindDefaultResolver,\r\n  createResolverClass,\r\n  validateHints,\r\n  emitInvalidHostnameWarning,\r\n  errorCodes: dnsErrorCodes,\r\n  getDefaultResultOrder,\r\n  setDefaultResultOrder,\r\n  setDefaultResolver,\r\n} = require('internal/dns/utils');\r\n\r\nconst {\r\n  NODATA,\r\n  FORMERR,\r\n  SERVFAIL,\r\n  NOTFOUND,\r\n  NOTIMP,\r\n  REFUSED,\r\n  BADQUERY,\r\n  BADNAME,\r\n  BADFAMILY,\r\n  BADRESP,\r\n  CONNREFUSED,\r\n  TIMEOUT,\r\n  EOF,\r\n  FILE,\r\n  NOMEM,\r\n  DESTRUCTION,\r\n  BADSTR,\r\n  BADFLAGS,\r\n  NONAME,\r\n  BADHINTS,\r\n  NOTINITIALIZED,\r\n  LOADIPHLPAPI,\r\n  ADDRGETNETWORKPARAMS,\r\n  CANCELLED,\r\n} = dnsErrorCodes;\r\nconst {\r\n  DNSException,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_MISSING_ARGS,\r\n  },\r\n} = require('internal/errors');\r\nconst { isIP } = require('internal/net');\r\nconst {\r\n  getaddrinfo,\r\n  getnameinfo,\r\n  GetAddrInfoReqWrap,\r\n  GetNameInfoReqWrap,\r\n  QueryReqWrap,\r\n  DNS_ORDER_VERBATIM,\r\n  DNS_ORDER_IPV4_FIRST,\r\n  DNS_ORDER_IPV6_FIRST,\r\n} = internalBinding('cares_wrap');\r\nconst {\r\n  validateBoolean,\r\n  validateNumber,\r\n  validateOneOf,\r\n  validatePort,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst kPerfHooksDnsLookupContext = Symbol('kPerfHooksDnsLookupContext');\r\nconst kPerfHooksDnsLookupServiceContext = Symbol('kPerfHooksDnsLookupServiceContext');\r\nconst kPerfHooksDnsLookupResolveContext = Symbol('kPerfHooksDnsLookupResolveContext');\r\n\r\nconst {\r\n  hasObserver,\r\n  startPerf,\r\n  stopPerf,\r\n} = require('internal/perf/observe');\r\n\r\nfunction onlookup(err, addresses) {\r\n  if (err) {\r\n    this.reject(new DNSException(err, 'getaddrinfo', this.hostname));\r\n    return;\r\n  }\r\n\r\n  const family = this.family || isIP(addresses[0]);\r\n  this.resolve({ address: addresses[0], family });\r\n  if (this[kPerfHooksDnsLookupContext] && hasObserver('dns')) {\r\n    stopPerf(this, kPerfHooksDnsLookupContext, { detail: { addresses } });\r\n  }\r\n}\r\n\r\nfunction onlookupall(err, addresses) {\r\n  if (err) {\r\n    this.reject(new DNSException(err, 'getaddrinfo', this.hostname));\r\n    return;\r\n  }\r\n\r\n  const family = this.family;\r\n\r\n  for (let i = 0; i < addresses.length; i++) {\r\n    const address = addresses[i];\r\n\r\n    addresses[i] = {\r\n      address,\r\n      family: family || isIP(addresses[i]),\r\n    };\r\n  }\r\n\r\n  this.resolve(addresses);\r\n  if (this[kPerfHooksDnsLookupContext] && hasObserver('dns')) {\r\n    stopPerf(this, kPerfHooksDnsLookupContext, { detail: { addresses } });\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a promise that resolves with the IP address of the given hostname.\r\n * @param {0 | 4 | 6} family - The IP address family (4 or 6, or 0 for both).\r\n * @param {string} hostname - The hostname to resolve.\r\n * @param {boolean} all - Whether to resolve with all IP addresses for the hostname.\r\n * @param {number} hints - One or more supported getaddrinfo flags (supply multiple via\r\n * bitwise OR).\r\n * @param {number} dnsOrder - How to sort results. Must be `ipv4first`, `ipv6first` or `verbatim`.\r\n * @returns {Promise<DNSLookupResult | DNSLookupResult[]>} The IP address(es) of the hostname.\r\n * @typedef {object} DNSLookupResult\r\n * @property {string} address - The IP address.\r\n * @property {0 | 4 | 6} family - The IP address type. 4 for IPv4 or 6 for IPv6, or 0 (for both).\r\n */\r\nfunction createLookupPromise(family, hostname, all, hints, dnsOrder) {\r\n  return new Promise((resolve, reject) => {\r\n    if (!hostname) {\r\n      emitInvalidHostnameWarning(hostname);\r\n      resolve(all ? [] : { address: null, family: family === 6 ? 6 : 4 });\r\n      return;\r\n    }\r\n\r\n    const matchedFamily = isIP(hostname);\r\n\r\n    if (matchedFamily !== 0) {\r\n      const result = { address: hostname, family: matchedFamily };\r\n      resolve(all ? [result] : result);\r\n      return;\r\n    }\r\n\r\n    const req = new GetAddrInfoReqWrap();\r\n\r\n    req.family = family;\r\n    req.hostname = hostname;\r\n    req.oncomplete = all ? onlookupall : onlookup;\r\n    req.resolve = resolve;\r\n    req.reject = reject;\r\n\r\n    let order = DNS_ORDER_VERBATIM;\r\n\r\n    if (dnsOrder === 'ipv4first') {\r\n      order = DNS_ORDER_IPV4_FIRST;\r\n    } else if (dnsOrder === 'ipv6first') {\r\n      order = DNS_ORDER_IPV6_FIRST;\r\n    }\r\n\r\n    const err = getaddrinfo(req, hostname, family, hints, order);\r\n\r\n    if (err) {\r\n      reject(new DNSException(err, 'getaddrinfo', hostname));\r\n    } else if (hasObserver('dns')) {\r\n      const detail = {\r\n        hostname,\r\n        family,\r\n        hints,\r\n        verbatim: order === DNS_ORDER_VERBATIM,\r\n        order: dnsOrder,\r\n      };\r\n      startPerf(req, kPerfHooksDnsLookupContext, { type: 'dns', name: 'lookup', detail });\r\n    }\r\n  });\r\n}\r\n\r\nconst validFamilies = [0, 4, 6];\r\n/**\r\n * Get the IP address for a given hostname.\r\n * @param {string} hostname - The hostname to resolve (ex. 'nodejs.org').\r\n * @param {object} [options] - Optional settings.\r\n * @param {boolean} [options.all=false] - Whether to return all or just the first resolved address.\r\n * @param {0 | 4 | 6} [options.family=0] - The record family. Must be 4, 6, or 0 (for both).\r\n * @param {number} [options.hints] - One or more supported getaddrinfo flags (supply multiple via\r\n * bitwise OR).\r\n * @param {string} [options.order='verbatim'] - Return results in same order DNS resolved them;\r\n * Must be `ipv4first`, `ipv6first` or `verbatim`.\r\n * New code should supply `verbatim`.\r\n */\r\nfunction lookup(hostname, options) {\r\n  let hints = 0;\r\n  let family = 0;\r\n  let all = false;\r\n  let dnsOrder = getDefaultResultOrder();\r\n\r\n  // Parse arguments\r\n  if (hostname) {\r\n    validateString(hostname, 'hostname');\r\n  }\r\n\r\n  if (typeof options === 'number') {\r\n    validateOneOf(options, 'family', validFamilies);\r\n    family = options;\r\n  } else if (options !== undefined && typeof options !== 'object') {\r\n    throw new ERR_INVALID_ARG_TYPE('options', ['integer', 'object'], options);\r\n  } else {\r\n    if (options?.hints != null) {\r\n      validateNumber(options.hints, 'options.hints');\r\n      hints = options.hints >>> 0;\r\n      validateHints(hints);\r\n    }\r\n    if (options?.family != null) {\r\n      validateOneOf(options.family, 'options.family', validFamilies);\r\n      family = options.family;\r\n    }\r\n    if (options?.all != null) {\r\n      validateBoolean(options.all, 'options.all');\r\n      all = options.all;\r\n    }\r\n    if (options?.verbatim != null) {\r\n      validateBoolean(options.verbatim, 'options.verbatim');\r\n      dnsOrder = options.verbatim ? 'verbatim' : 'ipv4first';\r\n    }\r\n    if (options?.order != null) {\r\n      validateOneOf(options.order, 'options.order', ['ipv4first', 'ipv6first', 'verbatim']);\r\n      dnsOrder = options.order;\r\n    }\r\n  }\r\n\r\n  return createLookupPromise(family, hostname, all, hints, dnsOrder);\r\n}\r\n\r\n\r\nfunction onlookupservice(err, hostname, service) {\r\n  if (err) {\r\n    this.reject(new DNSException(err, 'getnameinfo', this.host));\r\n    return;\r\n  }\r\n\r\n  this.resolve({ hostname, service });\r\n  if (this[kPerfHooksDnsLookupServiceContext] && hasObserver('dns')) {\r\n    stopPerf(this, kPerfHooksDnsLookupServiceContext, { detail: { hostname, service } });\r\n  }\r\n}\r\n\r\nfunction createLookupServicePromise(hostname, port) {\r\n  return new Promise((resolve, reject) => {\r\n    const req = new GetNameInfoReqWrap();\r\n\r\n    req.hostname = hostname;\r\n    req.port = port;\r\n    req.oncomplete = onlookupservice;\r\n    req.resolve = resolve;\r\n    req.reject = reject;\r\n\r\n    const err = getnameinfo(req, hostname, port);\r\n\r\n    if (err)\r\n      reject(new DNSException(err, 'getnameinfo', hostname));\r\n    else if (hasObserver('dns')) {\r\n      startPerf(req, kPerfHooksDnsLookupServiceContext, {\r\n        type: 'dns',\r\n        name: 'lookupService',\r\n        detail: {\r\n          host: hostname,\r\n          port,\r\n        },\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nfunction lookupService(address, port) {\r\n  if (arguments.length !== 2)\r\n    throw new ERR_MISSING_ARGS('address', 'port');\r\n\r\n  if (isIP(address) === 0)\r\n    throw new ERR_INVALID_ARG_VALUE('address', address);\r\n\r\n  validatePort(port);\r\n\r\n  return createLookupServicePromise(address, +port);\r\n}\r\n\r\n\r\nfunction onresolve(err, result, ttls) {\r\n  if (err) {\r\n    this.reject(new DNSException(err, this.bindingName, this.hostname));\r\n    return;\r\n  }\r\n\r\n  if (ttls && this.ttl)\r\n    result = ArrayPrototypeMap(\r\n      result, (address, index) => ({ address, ttl: ttls[index] }));\r\n\r\n  this.resolve(result);\r\n  if (this[kPerfHooksDnsLookupResolveContext] && hasObserver('dns')) {\r\n    stopPerf(this, kPerfHooksDnsLookupResolveContext, { detail: { result } });\r\n  }\r\n}\r\n\r\nfunction createResolverPromise(resolver, bindingName, hostname, ttl) {\r\n  return new Promise((resolve, reject) => {\r\n    const req = new QueryReqWrap();\r\n\r\n    req.bindingName = bindingName;\r\n    req.hostname = hostname;\r\n    req.oncomplete = onresolve;\r\n    req.resolve = resolve;\r\n    req.reject = reject;\r\n    req.ttl = ttl;\r\n\r\n    const err = resolver._handle[bindingName](req, hostname);\r\n\r\n    if (err)\r\n      reject(new DNSException(err, bindingName, hostname));\r\n    else if (hasObserver('dns')) {\r\n      startPerf(req, kPerfHooksDnsLookupResolveContext, {\r\n        type: 'dns',\r\n        name: bindingName,\r\n        detail: {\r\n          host: hostname,\r\n          ttl,\r\n        },\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nfunction resolver(bindingName) {\r\n  function query(name, options) {\r\n    validateString(name, 'name');\r\n\r\n    const ttl = !!(options && options.ttl);\r\n    return createResolverPromise(this, bindingName, name, ttl);\r\n  }\r\n\r\n  ObjectDefineProperty(query, 'name', { __proto__: null, value: bindingName });\r\n  return query;\r\n}\r\n\r\nfunction resolve(hostname, rrtype) {\r\n  let resolver;\r\n\r\n  if (rrtype !== undefined) {\r\n    validateString(rrtype, 'rrtype');\r\n\r\n    resolver = resolveMap[rrtype];\r\n\r\n    if (typeof resolver !== 'function')\r\n      throw new ERR_INVALID_ARG_VALUE('rrtype', rrtype);\r\n  } else {\r\n    resolver = resolveMap.A;\r\n  }\r\n\r\n  return ReflectApply(resolver, this, [hostname]);\r\n}\r\n\r\n// Promise-based resolver.\r\nconst { Resolver, resolveMap } = createResolverClass(resolver);\r\nResolver.prototype.resolve = resolve;\r\n\r\nfunction defaultResolverSetServers(servers) {\r\n  const resolver = new Resolver();\r\n\r\n  resolver.setServers(servers);\r\n  setDefaultResolver(resolver);\r\n  bindDefaultResolver(module.exports, Resolver.prototype);\r\n}\r\n\r\nmodule.exports = {\r\n  lookup,\r\n  lookupService,\r\n  Resolver,\r\n  getDefaultResultOrder,\r\n  setDefaultResultOrder,\r\n  setServers: defaultResolverSetServers,\r\n\r\n  // ERROR CODES\r\n  NODATA,\r\n  FORMERR,\r\n  SERVFAIL,\r\n  NOTFOUND,\r\n  NOTIMP,\r\n  REFUSED,\r\n  BADQUERY,\r\n  BADNAME,\r\n  BADFAMILY,\r\n  BADRESP,\r\n  CONNREFUSED,\r\n  TIMEOUT,\r\n  EOF,\r\n  FILE,\r\n  NOMEM,\r\n  DESTRUCTION,\r\n  BADSTR,\r\n  BADFLAGS,\r\n  NONAME,\r\n  BADHINTS,\r\n  NOTINITIALIZED,\r\n  LOADIPHLPAPI,\r\n  ADDRGETNETWORKPARAMS,\r\n  CANCELLED,\r\n};\r\nbindDefaultResolver(module.exports, Resolver.prototype);\r\n"
  },
  "161": {
    "metadata": {
      "scriptId": "161",
      "url": "node:domain",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 555,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "2341203396c417ea02b04ddf009c8d49d1aacae245df845e304f2089e051137d",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 17268,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:domain"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\n// WARNING: THIS MODULE IS PENDING DEPRECATION.\r\n//\r\n// No new pull requests targeting this module will be accepted\r\n// unless they address existing, critical bugs.\r\n\r\nconst {\r\n  ArrayPrototypeEvery,\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypeLastIndexOf,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSplice,\r\n  Error,\r\n  FunctionPrototypeCall,\r\n  ObjectDefineProperty,\r\n  Promise,\r\n  ReflectApply,\r\n  SafeMap,\r\n  SafeWeakMap,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst EventEmitter = require('events');\r\nconst {\r\n  ERR_DOMAIN_CALLBACK_NOT_AVAILABLE,\r\n  ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE,\r\n  ERR_UNHANDLED_ERROR,\r\n} = require('internal/errors').codes;\r\nconst { createHook } = require('async_hooks');\r\nconst { useDomainTrampoline } = require('internal/async_hooks');\r\n\r\nconst kWeak = Symbol('kWeak');\r\nconst { WeakReference } = require('internal/util');\r\n\r\n// Overwrite process.domain with a getter/setter that will allow for more\r\n// effective optimizations\r\nconst _domain = [null];\r\nObjectDefineProperty(process, 'domain', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get: function() {\r\n    return _domain[0];\r\n  },\r\n  set: function(arg) {\r\n    return _domain[0] = arg;\r\n  },\r\n});\r\n\r\nconst vmPromises = new SafeWeakMap();\r\nconst pairing = new SafeMap();\r\nconst asyncHook = createHook({\r\n  init(asyncId, type, triggerAsyncId, resource) {\r\n    if (process.domain !== null && process.domain !== undefined) {\r\n      // If this operation is created while in a domain, let's mark it\r\n      pairing.set(asyncId, process.domain[kWeak]);\r\n      // Promises from other contexts, such as with the VM module, should not\r\n      // have a domain property as it can be used to escape the sandbox.\r\n      if (type !== 'PROMISE' || resource instanceof Promise) {\r\n        ObjectDefineProperty(resource, 'domain', {\r\n          __proto__: null,\r\n          configurable: true,\r\n          enumerable: false,\r\n          value: process.domain,\r\n          writable: true,\r\n        });\r\n      // Because promises from other contexts don't get a domain field,\r\n      // the domain needs to be held alive another way. Stuffing it in a\r\n      // weakmap connected to the promise lifetime can fix that.\r\n      } else {\r\n        vmPromises.set(resource, process.domain);\r\n      }\r\n    }\r\n  },\r\n  before(asyncId) {\r\n    const current = pairing.get(asyncId);\r\n    if (current !== undefined) { // Enter domain for this cb\r\n      // We will get the domain through current.get(), because the resource\r\n      // object's .domain property makes sure it is not garbage collected.\r\n      // However, we do need to make the reference to the domain non-weak,\r\n      // so that it cannot be garbage collected before the after() hook.\r\n      current.incRef();\r\n      current.get().enter();\r\n    }\r\n  },\r\n  after(asyncId) {\r\n    const current = pairing.get(asyncId);\r\n    if (current !== undefined) { // Exit domain for this cb\r\n      const domain = current.get();\r\n      current.decRef();\r\n      domain.exit();\r\n    }\r\n  },\r\n  destroy(asyncId) {\r\n    pairing.delete(asyncId); // cleaning up\r\n  },\r\n});\r\n\r\n// When domains are in use, they claim full ownership of the\r\n// uncaught exception capture callback.\r\nif (process.hasUncaughtExceptionCaptureCallback()) {\r\n  throw new ERR_DOMAIN_CALLBACK_NOT_AVAILABLE();\r\n}\r\n\r\n// Get the stack trace at the point where `domain` was required.\r\n// eslint-disable-next-line no-restricted-syntax\r\nconst domainRequireStack = new Error('require(`domain`) at this point').stack;\r\n\r\nconst { setUncaughtExceptionCaptureCallback } = process;\r\nprocess.setUncaughtExceptionCaptureCallback = function(fn) {\r\n  const err = new ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE();\r\n  err.stack = err.stack + '\\n' + '-'.repeat(40) + '\\n' + domainRequireStack;\r\n  throw err;\r\n};\r\n\r\n\r\nlet sendMakeCallbackDeprecation = false;\r\nfunction emitMakeCallbackDeprecation({ target, method }) {\r\n  if (!sendMakeCallbackDeprecation) {\r\n    process.emitWarning(\r\n      'Using a domain property in MakeCallback is deprecated. Use the ' +\r\n      'async_context variant of MakeCallback or the AsyncResource class ' +\r\n      'instead. ' +\r\n      `(Triggered by calling ${method?.name || '<anonymous>'} ` +\r\n      `on ${target?.constructor?.name}.)`,\r\n      'DeprecationWarning', 'DEP0097');\r\n    sendMakeCallbackDeprecation = true;\r\n  }\r\n}\r\n\r\nfunction topLevelDomainCallback(cb, ...args) {\r\n  const domain = this.domain;\r\n  if (exports.active && domain)\r\n    emitMakeCallbackDeprecation({ target: this, method: cb });\r\n\r\n  if (domain)\r\n    domain.enter();\r\n  const ret = ReflectApply(cb, this, args);\r\n  if (domain)\r\n    domain.exit();\r\n\r\n  return ret;\r\n}\r\n\r\n// It's possible to enter one domain while already inside\r\n// another one. The stack is each entered domain.\r\nlet stack = [];\r\nexports._stack = stack;\r\nuseDomainTrampoline(topLevelDomainCallback);\r\n\r\nfunction updateExceptionCapture() {\r\n  if (ArrayPrototypeEvery(stack,\r\n                          (domain) => domain.listenerCount('error') === 0)) {\r\n    setUncaughtExceptionCaptureCallback(null);\r\n  } else {\r\n    setUncaughtExceptionCaptureCallback(null);\r\n    setUncaughtExceptionCaptureCallback((er) => {\r\n      return process.domain._errorHandler(er);\r\n    });\r\n  }\r\n}\r\n\r\n\r\nprocess.on('newListener', (name, listener) => {\r\n  if (name === 'uncaughtException' &&\r\n      listener !== domainUncaughtExceptionClear) {\r\n    // Make sure the first listener for `uncaughtException` always clears\r\n    // the domain stack.\r\n    process.removeListener(name, domainUncaughtExceptionClear);\r\n    process.prependListener(name, domainUncaughtExceptionClear);\r\n  }\r\n});\r\n\r\nprocess.on('removeListener', (name, listener) => {\r\n  if (name === 'uncaughtException' &&\r\n      listener !== domainUncaughtExceptionClear) {\r\n    // If the domain listener would be the only remaining one, remove it.\r\n    const listeners = process.listeners('uncaughtException');\r\n    if (listeners.length === 1 && listeners[0] === domainUncaughtExceptionClear)\r\n      process.removeListener(name, domainUncaughtExceptionClear);\r\n  }\r\n});\r\n\r\nfunction domainUncaughtExceptionClear() {\r\n  stack.length = 0;\r\n  exports.active = process.domain = null;\r\n  updateExceptionCapture();\r\n}\r\n\r\n\r\nclass Domain extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n\r\n    this.members = [];\r\n    this[kWeak] = new WeakReference(this);\r\n    asyncHook.enable();\r\n\r\n    this.on('removeListener', updateExceptionCapture);\r\n    this.on('newListener', updateExceptionCapture);\r\n  }\r\n}\r\n\r\nexports.Domain = Domain;\r\n\r\nexports.create = exports.createDomain = function createDomain() {\r\n  return new Domain();\r\n};\r\n\r\n// The active domain is always the one that we're currently in.\r\nexports.active = null;\r\nDomain.prototype.members = undefined;\r\n\r\n// Called by process._fatalException in case an error was thrown.\r\nDomain.prototype._errorHandler = function(er) {\r\n  let caught = false;\r\n\r\n  if ((typeof er === 'object' && er !== null) || typeof er === 'function') {\r\n    ObjectDefineProperty(er, 'domain', {\r\n      __proto__: null,\r\n      configurable: true,\r\n      enumerable: false,\r\n      value: this,\r\n      writable: true,\r\n    });\r\n    er.domainThrown = true;\r\n  }\r\n  // Pop all adjacent duplicates of the currently active domain from the stack.\r\n  // This is done to prevent a domain's error handler to run within the context\r\n  // of itself, and re-entering itself recursively handler as a result of an\r\n  // exception thrown in its context.\r\n  while (exports.active === this) {\r\n    this.exit();\r\n  }\r\n\r\n  // The top-level domain-handler is handled separately.\r\n  //\r\n  // The reason is that if V8 was passed a command line option\r\n  // asking it to abort on an uncaught exception (currently\r\n  // \"--abort-on-uncaught-exception\"), we want an uncaught exception\r\n  // in the top-level domain error handler to make the\r\n  // process abort. Using try/catch here would always make V8 think\r\n  // that these exceptions are caught, and thus would prevent it from\r\n  // aborting in these cases.\r\n  if (stack.length === 0) {\r\n    // If there's no error handler, do not emit an 'error' event\r\n    // as this would throw an error, make the process exit, and thus\r\n    // prevent the process 'uncaughtException' event from being emitted\r\n    // if a listener is set.\r\n    if (EventEmitter.listenerCount(this, 'error') > 0) {\r\n      // Clear the uncaughtExceptionCaptureCallback so that we know that, since\r\n      // the top-level domain is not active anymore, it would be ok to abort on\r\n      // an uncaught exception at this point\r\n      setUncaughtExceptionCaptureCallback(null);\r\n      try {\r\n        caught = this.emit('error', er);\r\n      } finally {\r\n        updateExceptionCapture();\r\n      }\r\n    }\r\n  } else {\r\n    // Wrap this in a try/catch so we don't get infinite throwing\r\n    try {\r\n      // One of three things will happen here.\r\n      //\r\n      // 1. There is a handler, caught = true\r\n      // 2. There is no handler, caught = false\r\n      // 3. It throws, caught = false\r\n      //\r\n      // If caught is false after this, then there's no need to exit()\r\n      // the domain, because we're going to crash the process anyway.\r\n      caught = this.emit('error', er);\r\n    } catch (er2) {\r\n      // The domain error handler threw!  oh no!\r\n      // See if another domain can catch THIS error,\r\n      // or else crash on the original one.\r\n      updateExceptionCapture();\r\n      if (stack.length) {\r\n        exports.active = process.domain = stack[stack.length - 1];\r\n        caught = process.domain._errorHandler(er2);\r\n      } else {\r\n        // Pass on to the next exception handler.\r\n        throw er2;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Exit all domains on the stack.  Uncaught exceptions end the\r\n  // current tick and no domains should be left on the stack\r\n  // between ticks.\r\n  domainUncaughtExceptionClear();\r\n\r\n  return caught;\r\n};\r\n\r\n\r\nDomain.prototype.enter = function() {\r\n  // Note that this might be a no-op, but we still need\r\n  // to push it onto the stack so that we can pop it later.\r\n  exports.active = process.domain = this;\r\n  ArrayPrototypePush(stack, this);\r\n  updateExceptionCapture();\r\n};\r\n\r\n\r\nDomain.prototype.exit = function() {\r\n  // Don't do anything if this domain is not on the stack.\r\n  const index = ArrayPrototypeLastIndexOf(stack, this);\r\n  if (index === -1) return;\r\n\r\n  // Exit all domains until this one.\r\n  ArrayPrototypeSplice(stack, index);\r\n\r\n  exports.active = stack.length === 0 ? undefined : stack[stack.length - 1];\r\n  process.domain = exports.active;\r\n  updateExceptionCapture();\r\n};\r\n\r\n\r\n// note: this works for timers as well.\r\nDomain.prototype.add = function(ee) {\r\n  // If the domain is already added, then nothing left to do.\r\n  if (ee.domain === this)\r\n    return;\r\n\r\n  // Has a domain already - remove it first.\r\n  if (ee.domain)\r\n    ee.domain.remove(ee);\r\n\r\n  // Check for circular Domain->Domain links.\r\n  // They cause big issues.\r\n  //\r\n  // For example:\r\n  // var d = domain.create();\r\n  // var e = domain.create();\r\n  // d.add(e);\r\n  // e.add(d);\r\n  // e.emit('error', er); // RangeError, stack overflow!\r\n  if (this.domain && (ee instanceof Domain)) {\r\n    for (let d = this.domain; d; d = d.domain) {\r\n      if (ee === d) return;\r\n    }\r\n  }\r\n\r\n  ObjectDefineProperty(ee, 'domain', {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: false,\r\n    value: this,\r\n    writable: true,\r\n  });\r\n  ArrayPrototypePush(this.members, ee);\r\n};\r\n\r\n\r\nDomain.prototype.remove = function(ee) {\r\n  ee.domain = null;\r\n  const index = ArrayPrototypeIndexOf(this.members, ee);\r\n  if (index !== -1)\r\n    ArrayPrototypeSplice(this.members, index, 1);\r\n};\r\n\r\n\r\nDomain.prototype.run = function(fn) {\r\n  this.enter();\r\n  const ret = ReflectApply(fn, this, ArrayPrototypeSlice(arguments, 1));\r\n  this.exit();\r\n\r\n  return ret;\r\n};\r\n\r\n\r\nfunction intercepted(_this, self, cb, fnargs) {\r\n  if (fnargs[0] && fnargs[0] instanceof Error) {\r\n    const er = fnargs[0];\r\n    er.domainBound = cb;\r\n    er.domainThrown = false;\r\n    ObjectDefineProperty(er, 'domain', {\r\n      __proto__: null,\r\n      configurable: true,\r\n      enumerable: false,\r\n      value: self,\r\n      writable: true,\r\n    });\r\n    self.emit('error', er);\r\n    return;\r\n  }\r\n\r\n  self.enter();\r\n  const ret = ReflectApply(cb, _this, ArrayPrototypeSlice(fnargs, 1));\r\n  self.exit();\r\n\r\n  return ret;\r\n}\r\n\r\n\r\nDomain.prototype.intercept = function(cb) {\r\n  const self = this;\r\n\r\n  function runIntercepted() {\r\n    return intercepted(this, self, cb, arguments);\r\n  }\r\n\r\n  return runIntercepted;\r\n};\r\n\r\n\r\nfunction bound(_this, self, cb, fnargs) {\r\n  self.enter();\r\n  const ret = ReflectApply(cb, _this, fnargs);\r\n  self.exit();\r\n\r\n  return ret;\r\n}\r\n\r\n\r\nDomain.prototype.bind = function(cb) {\r\n  const self = this;\r\n\r\n  function runBound() {\r\n    return bound(this, self, cb, arguments);\r\n  }\r\n\r\n  ObjectDefineProperty(runBound, 'domain', {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: false,\r\n    value: this,\r\n    writable: true,\r\n  });\r\n\r\n  return runBound;\r\n};\r\n\r\n// Override EventEmitter methods to make it domain-aware.\r\nEventEmitter.usingDomains = true;\r\n\r\nconst eventInit = EventEmitter.init;\r\nEventEmitter.init = function(opts) {\r\n  ObjectDefineProperty(this, 'domain', {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: false,\r\n    value: null,\r\n    writable: true,\r\n  });\r\n  if (exports.active && !(this instanceof exports.Domain)) {\r\n    this.domain = exports.active;\r\n  }\r\n\r\n  return FunctionPrototypeCall(eventInit, this, opts);\r\n};\r\n\r\nconst eventEmit = EventEmitter.prototype.emit;\r\nEventEmitter.prototype.emit = function emit(...args) {\r\n  const domain = this.domain;\r\n\r\n  const type = args[0];\r\n  const shouldEmitError = type === 'error' &&\r\n                          this.listenerCount(type) > 0;\r\n\r\n  // Just call original `emit` if current EE instance has `error`\r\n  // handler, there's no active domain or this is process\r\n  if (shouldEmitError || domain === null || domain === undefined ||\r\n      this === process) {\r\n    return ReflectApply(eventEmit, this, args);\r\n  }\r\n\r\n  if (type === 'error') {\r\n    const er = args.length > 1 && args[1] ?\r\n      args[1] : new ERR_UNHANDLED_ERROR();\r\n\r\n    if (typeof er === 'object') {\r\n      er.domainEmitter = this;\r\n      ObjectDefineProperty(er, 'domain', {\r\n        __proto__: null,\r\n        configurable: true,\r\n        enumerable: false,\r\n        value: domain,\r\n        writable: true,\r\n      });\r\n      er.domainThrown = false;\r\n    }\r\n\r\n    // Remove the current domain (and its duplicates) from the domains stack and\r\n    // set the active domain to its parent (if any) so that the domain's error\r\n    // handler doesn't run in its own context. This prevents any event emitter\r\n    // created or any exception thrown in that error handler from recursively\r\n    // executing that error handler.\r\n    const origDomainsStack = ArrayPrototypeSlice(stack);\r\n    const origActiveDomain = process.domain;\r\n\r\n    // Travel the domains stack from top to bottom to find the first domain\r\n    // instance that is not a duplicate of the current active domain.\r\n    let idx = stack.length - 1;\r\n    while (idx > -1 && process.domain === stack[idx]) {\r\n      --idx;\r\n    }\r\n\r\n    // Change the stack to not contain the current active domain, and only the\r\n    // domains above it on the stack.\r\n    if (idx < 0) {\r\n      stack.length = 0;\r\n    } else {\r\n      ArrayPrototypeSplice(stack, idx + 1);\r\n    }\r\n\r\n    // Change the current active domain\r\n    if (stack.length > 0) {\r\n      exports.active = process.domain = stack[stack.length - 1];\r\n    } else {\r\n      exports.active = process.domain = null;\r\n    }\r\n\r\n    updateExceptionCapture();\r\n\r\n    domain.emit('error', er);\r\n\r\n    // Now that the domain's error handler has completed, restore the domains\r\n    // stack and the active domain to their original values.\r\n    exports._stack = stack = origDomainsStack;\r\n    exports.active = process.domain = origActiveDomain;\r\n    updateExceptionCapture();\r\n\r\n    return false;\r\n  }\r\n\r\n  domain.enter();\r\n  const ret = ReflectApply(eventEmit, this, args);\r\n  domain.exit();\r\n\r\n  return ret;\r\n};\r\n"
  },
  "162": {
    "metadata": {
      "scriptId": "162",
      "url": "node:fs/promises",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 3,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "20be55032a0d7535f2c89d5fec2b89dc1401a4af1aeb50307ae913b4d4ca23f7",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 76,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:fs/promises"
    },
    "source": "'use strict';\r\n\r\nmodule.exports = require('internal/fs/promises').exports;\r\n"
  },
  "163": {
    "metadata": {
      "scriptId": "163",
      "url": "node:internal/fs/promises",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1324,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "b7a071c9c378f681e08223a0fdae8be32c4af8fccfe9f5991b1398f996660522",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 36162,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/fs/promises"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePop,\r\n  ArrayPrototypePush,\r\n  Error,\r\n  ErrorCaptureStackTrace,\r\n  FunctionPrototypeBind,\r\n  MathMax,\r\n  MathMin,\r\n  Promise,\r\n  PromisePrototypeThen,\r\n  PromiseReject,\r\n  PromiseResolve,\r\n  SafeArrayIterator,\r\n  SafePromisePrototypeFinally,\r\n  Symbol,\r\n  SymbolAsyncDispose,\r\n  Uint8Array,\r\n  uncurryThis,\r\n} = primordials;\r\n\r\nconst { fs: constants } = internalBinding('constants');\r\nconst {\r\n  F_OK,\r\n  O_SYMLINK,\r\n  O_WRONLY,\r\n  S_IFMT,\r\n  S_IFREG,\r\n} = constants;\r\n\r\nconst binding = internalBinding('fs');\r\nconst { Buffer } = require('buffer');\r\nconst { isBuffer: BufferIsBuffer } = Buffer;\r\nconst BufferToString = uncurryThis(Buffer.prototype.toString);\r\n\r\nconst {\r\n  AbortError,\r\n  aggregateTwoErrors,\r\n  codes: {\r\n    ERR_ACCESS_DENIED,\r\n    ERR_FS_FILE_TOO_LARGE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_STATE,\r\n    ERR_METHOD_NOT_IMPLEMENTED,\r\n  },\r\n} = require('internal/errors');\r\nconst { isArrayBufferView } = require('internal/util/types');\r\n\r\nconst {\r\n  constants: {\r\n    kIoMaxLength,\r\n    kMaxUserId,\r\n    kReadFileBufferLength,\r\n    kReadFileUnknownBufferLength,\r\n    kWriteFileMaxChunkSize,\r\n  },\r\n  copyObject,\r\n  emitRecursiveRmdirWarning,\r\n  getDirents,\r\n  getOptions,\r\n  getStatFsFromBinding,\r\n  getStatsFromBinding,\r\n  getValidatedPath,\r\n  preprocessSymlinkDestination,\r\n  stringToFlags,\r\n  stringToSymlinkType,\r\n  toUnixTimestamp,\r\n  validateBufferArray,\r\n  validateCpOptions,\r\n  validateOffsetLengthRead,\r\n  validateOffsetLengthWrite,\r\n  validatePosition,\r\n  validateRmOptions,\r\n  validateRmdirOptions,\r\n  validateStringAfterArrayBufferView,\r\n  warnOnNonPortableTemplate,\r\n} = require('internal/fs/utils');\r\nconst { opendir } = require('internal/fs/dir');\r\nconst {\r\n  parseFileMode,\r\n  validateAbortSignal,\r\n  validateBoolean,\r\n  validateBuffer,\r\n  validateEncoding,\r\n  validateInteger,\r\n  validateObject,\r\n  validateString,\r\n  kValidateObjectAllowNullable,\r\n} = require('internal/validators');\r\nconst pathModule = require('path');\r\nconst { isAbsolute } = pathModule;\r\nconst { toPathIfFileURL } = require('internal/url');\r\nconst {\r\n  emitExperimentalWarning,\r\n  getLazy,\r\n  kEmptyObject,\r\n  lazyDOMException,\r\n  promisify,\r\n} = require('internal/util');\r\nconst EventEmitter = require('events');\r\nconst { StringDecoder } = require('string_decoder');\r\nconst { kFSWatchStart, watch } = require('internal/fs/watchers');\r\nconst nonNativeWatcher = require('internal/fs/recursive_watch');\r\nconst { isIterable } = require('internal/streams/utils');\r\nconst assert = require('internal/assert');\r\n\r\nconst permission = require('internal/process/permission');\r\n\r\nconst kHandle = Symbol('kHandle');\r\nconst kFd = Symbol('kFd');\r\nconst kRefs = Symbol('kRefs');\r\nconst kClosePromise = Symbol('kClosePromise');\r\nconst kCloseResolve = Symbol('kCloseResolve');\r\nconst kCloseReject = Symbol('kCloseReject');\r\nconst kRef = Symbol('kRef');\r\nconst kUnref = Symbol('kUnref');\r\nconst kLocked = Symbol('kLocked');\r\n\r\nconst { kUsePromises } = binding;\r\nconst { Interface } = require('internal/readline/interface');\r\nconst {\r\n  kDeserialize, kTransfer, kTransferList, markTransferMode,\r\n} = require('internal/worker/js_transferable');\r\n\r\nconst getDirectoryEntriesPromise = promisify(getDirents);\r\nconst validateRmOptionsPromise = promisify(validateRmOptions);\r\n\r\nconst isWindows = process.platform === 'win32';\r\nconst isOSX = process.platform === 'darwin';\r\n\r\nlet cpPromises;\r\nfunction lazyLoadCpPromises() {\r\n  return cpPromises ??= require('internal/fs/cp/cp').cpFn;\r\n}\r\n\r\n// Lazy loaded to avoid circular dependency.\r\nlet fsStreams;\r\nfunction lazyFsStreams() {\r\n  return fsStreams ??= require('internal/fs/streams');\r\n}\r\n\r\nconst lazyRimRaf = getLazy(() => require('internal/fs/rimraf').rimrafPromises);\r\n\r\n// By the time the C++ land creates an error for a promise rejection (likely from a\r\n// libuv callback), there is already no JS frames on the stack. So we need to\r\n// wait until V8 resumes execution back to JS land before we have enough information\r\n// to re-capture the stack trace.\r\nfunction handleErrorFromBinding(error) {\r\n  ErrorCaptureStackTrace(error, handleErrorFromBinding);\r\n  return PromiseReject(error);\r\n}\r\n\r\nclass FileHandle extends EventEmitter {\r\n  /**\r\n   * @param {InternalFSBinding.FileHandle | undefined} filehandle\r\n   */\r\n  constructor(filehandle) {\r\n    super();\r\n    markTransferMode(this, false, true);\r\n    this[kHandle] = filehandle;\r\n    this[kFd] = filehandle ? filehandle.fd : -1;\r\n\r\n    this[kRefs] = 1;\r\n    this[kClosePromise] = null;\r\n  }\r\n\r\n  getAsyncId() {\r\n    return this[kHandle].getAsyncId();\r\n  }\r\n\r\n  get fd() {\r\n    return this[kFd];\r\n  }\r\n\r\n  appendFile(data, options) {\r\n    return fsCall(writeFile, this, data, options);\r\n  }\r\n\r\n  chmod(mode) {\r\n    return fsCall(fchmod, this, mode);\r\n  }\r\n\r\n  chown(uid, gid) {\r\n    return fsCall(fchown, this, uid, gid);\r\n  }\r\n\r\n  datasync() {\r\n    return fsCall(fdatasync, this);\r\n  }\r\n\r\n  sync() {\r\n    return fsCall(fsync, this);\r\n  }\r\n\r\n  read(buffer, offset, length, position) {\r\n    return fsCall(read, this, buffer, offset, length, position);\r\n  }\r\n\r\n  readv(buffers, position) {\r\n    return fsCall(readv, this, buffers, position);\r\n  }\r\n\r\n  readFile(options) {\r\n    return fsCall(readFile, this, options);\r\n  }\r\n\r\n  readLines(options = undefined) {\r\n    return new Interface({\r\n      input: this.createReadStream(options),\r\n      crlfDelay: Infinity,\r\n    });\r\n  }\r\n\r\n  stat(options) {\r\n    return fsCall(fstat, this, options);\r\n  }\r\n\r\n  truncate(len = 0) {\r\n    return fsCall(ftruncate, this, len);\r\n  }\r\n\r\n  utimes(atime, mtime) {\r\n    return fsCall(futimes, this, atime, mtime);\r\n  }\r\n\r\n  write(buffer, offset, length, position) {\r\n    return fsCall(write, this, buffer, offset, length, position);\r\n  }\r\n\r\n  writev(buffers, position) {\r\n    return fsCall(writev, this, buffers, position);\r\n  }\r\n\r\n  writeFile(data, options) {\r\n    return fsCall(writeFile, this, data, options);\r\n  }\r\n\r\n  close = () => {\r\n    if (this[kFd] === -1) {\r\n      return PromiseResolve();\r\n    }\r\n\r\n    if (this[kClosePromise]) {\r\n      return this[kClosePromise];\r\n    }\r\n\r\n    this[kRefs]--;\r\n    if (this[kRefs] === 0) {\r\n      this[kFd] = -1;\r\n      this[kClosePromise] = SafePromisePrototypeFinally(\r\n        this[kHandle].close(),\r\n        () => { this[kClosePromise] = undefined; },\r\n      );\r\n    } else {\r\n      this[kClosePromise] = SafePromisePrototypeFinally(\r\n        new Promise((resolve, reject) => {\r\n          this[kCloseResolve] = resolve;\r\n          this[kCloseReject] = reject;\r\n        }), () => {\r\n          this[kClosePromise] = undefined;\r\n          this[kCloseReject] = undefined;\r\n          this[kCloseResolve] = undefined;\r\n        },\r\n      );\r\n    }\r\n\r\n    this.emit('close');\r\n    return this[kClosePromise];\r\n  };\r\n\r\n  async [SymbolAsyncDispose]() {\r\n    return this.close();\r\n  }\r\n\r\n  /**\r\n   * @typedef {import('../webstreams/readablestream').ReadableStream\r\n   * } ReadableStream\r\n   * @param {{\r\n   *   type?: string;\r\n   *   }} [options]\r\n   * @returns {ReadableStream}\r\n   */\r\n  readableWebStream(options = kEmptyObject) {\r\n    if (this[kFd] === -1)\r\n      throw new ERR_INVALID_STATE('The FileHandle is closed');\r\n    if (this[kClosePromise])\r\n      throw new ERR_INVALID_STATE('The FileHandle is closing');\r\n    if (this[kLocked])\r\n      throw new ERR_INVALID_STATE('The FileHandle is locked');\r\n    this[kLocked] = true;\r\n\r\n    if (options.type !== undefined) {\r\n      validateString(options.type, 'options.type');\r\n    }\r\n\r\n    let readable;\r\n\r\n    if (options.type !== 'bytes') {\r\n      const {\r\n        newReadableStreamFromStreamBase,\r\n      } = require('internal/webstreams/adapters');\r\n      readable = newReadableStreamFromStreamBase(\r\n        this[kHandle],\r\n        undefined,\r\n        { ondone: () => this[kUnref]() });\r\n    } else {\r\n      const {\r\n        ReadableStream,\r\n      } = require('internal/webstreams/readablestream');\r\n\r\n      const readFn = FunctionPrototypeBind(this.read, this);\r\n      const ondone = FunctionPrototypeBind(this[kUnref], this);\r\n\r\n      readable = new ReadableStream({\r\n        type: 'bytes',\r\n        autoAllocateChunkSize: 16384,\r\n\r\n        async pull(controller) {\r\n          const view = controller.byobRequest.view;\r\n          const { bytesRead } = await readFn(view, view.byteOffset, view.byteLength);\r\n\r\n          if (bytesRead === 0) {\r\n            ondone();\r\n            controller.close();\r\n          }\r\n\r\n          controller.byobRequest.respond(bytesRead);\r\n        },\r\n\r\n        cancel() {\r\n          ondone();\r\n        },\r\n      });\r\n    }\r\n\r\n    const {\r\n      readableStreamCancel,\r\n    } = require('internal/webstreams/readablestream');\r\n    this[kRef]();\r\n    this.once('close', () => {\r\n      readableStreamCancel(readable);\r\n    });\r\n\r\n    return readable;\r\n  }\r\n\r\n  /**\r\n   * @typedef {import('./streams').ReadStream\r\n   * } ReadStream\r\n   * @param {{\r\n   *   encoding?: string;\r\n   *   autoClose?: boolean;\r\n   *   emitClose?: boolean;\r\n   *   start: number;\r\n   *   end?: number;\r\n   *   highWaterMark?: number;\r\n   *   }} [options]\r\n   * @returns {ReadStream}\r\n   */\r\n  createReadStream(options = undefined) {\r\n    const { ReadStream } = lazyFsStreams();\r\n    return new ReadStream(undefined, { ...options, fd: this });\r\n  }\r\n\r\n  /**\r\n   * @typedef {import('./streams').WriteStream\r\n   * } WriteStream\r\n   * @param {{\r\n   *   encoding?: string;\r\n   *   autoClose?: boolean;\r\n   *   emitClose?: boolean;\r\n   *   start: number;\r\n   *   highWaterMark?: number;\r\n   *   flush?: boolean;\r\n   *   }} [options]\r\n   * @returns {WriteStream}\r\n   */\r\n  createWriteStream(options = undefined) {\r\n    const { WriteStream } = lazyFsStreams();\r\n    return new WriteStream(undefined, { ...options, fd: this });\r\n  }\r\n\r\n  [kTransfer]() {\r\n    if (this[kClosePromise] || this[kRefs] > 1) {\r\n      throw lazyDOMException('Cannot transfer FileHandle while in use',\r\n                             'DataCloneError');\r\n    }\r\n\r\n    const handle = this[kHandle];\r\n    this[kFd] = -1;\r\n    this[kHandle] = null;\r\n    this[kRefs] = 0;\r\n\r\n    return {\r\n      data: { handle },\r\n      deserializeInfo: 'internal/fs/promises:FileHandle',\r\n    };\r\n  }\r\n\r\n  [kTransferList]() {\r\n    return [ this[kHandle] ];\r\n  }\r\n\r\n  [kDeserialize]({ handle }) {\r\n    this[kHandle] = handle;\r\n    this[kFd] = handle.fd;\r\n  }\r\n\r\n  [kRef]() {\r\n    this[kRefs]++;\r\n  }\r\n\r\n  [kUnref]() {\r\n    this[kRefs]--;\r\n    if (this[kRefs] === 0) {\r\n      this[kFd] = -1;\r\n      PromisePrototypeThen(\r\n        this[kHandle].close(),\r\n        this[kCloseResolve],\r\n        this[kCloseReject],\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nasync function handleFdClose(fileOpPromise, closeFunc) {\r\n  return PromisePrototypeThen(\r\n    fileOpPromise,\r\n    (result) => PromisePrototypeThen(closeFunc(), () => result),\r\n    (opError) =>\r\n      PromisePrototypeThen(\r\n        closeFunc(),\r\n        () => PromiseReject(opError),\r\n        (closeError) => PromiseReject(aggregateTwoErrors(closeError, opError)),\r\n      ),\r\n  );\r\n}\r\n\r\nasync function handleFdSync(fileOpPromise, handle) {\r\n  return PromisePrototypeThen(\r\n    fileOpPromise,\r\n    (result) => PromisePrototypeThen(\r\n      handle.sync(),\r\n      () => result,\r\n      (syncError) => PromiseReject(syncError),\r\n    ),\r\n    (opError) => PromiseReject(opError),\r\n  );\r\n}\r\n\r\nasync function fsCall(fn, handle, ...args) {\r\n  assert(handle[kRefs] !== undefined,\r\n         'handle must be an instance of FileHandle');\r\n\r\n  if (handle.fd === -1) {\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    const err = new Error('file closed');\r\n    err.code = 'EBADF';\r\n    err.syscall = fn.name;\r\n    throw err;\r\n  }\r\n\r\n  try {\r\n    handle[kRef]();\r\n    return await fn(handle, ...new SafeArrayIterator(args));\r\n  } finally {\r\n    handle[kUnref]();\r\n  }\r\n}\r\n\r\nfunction checkAborted(signal) {\r\n  if (signal?.aborted)\r\n    throw new AbortError(undefined, { cause: signal?.reason });\r\n}\r\n\r\nasync function writeFileHandle(filehandle, data, signal, encoding) {\r\n  checkAborted(signal);\r\n  if (isCustomIterable(data)) {\r\n    for await (const buf of data) {\r\n      checkAborted(signal);\r\n      const toWrite =\r\n        isArrayBufferView(buf) ? buf : Buffer.from(buf, encoding || 'utf8');\r\n      let remaining = toWrite.byteLength;\r\n      while (remaining > 0) {\r\n        const writeSize = MathMin(kWriteFileMaxChunkSize, remaining);\r\n        const { bytesWritten } = await write(\r\n          filehandle, toWrite, toWrite.byteLength - remaining, writeSize);\r\n        remaining -= bytesWritten;\r\n        checkAborted(signal);\r\n      }\r\n    }\r\n    return;\r\n  }\r\n  data = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n  let remaining = data.byteLength;\r\n  if (remaining === 0) return;\r\n  do {\r\n    checkAborted(signal);\r\n    const { bytesWritten } =\r\n      await write(filehandle, data, 0,\r\n                  MathMin(kWriteFileMaxChunkSize, data.byteLength));\r\n    remaining -= bytesWritten;\r\n    data = new Uint8Array(\r\n      data.buffer,\r\n      data.byteOffset + bytesWritten,\r\n      data.byteLength - bytesWritten,\r\n    );\r\n  } while (remaining > 0);\r\n}\r\n\r\nasync function readFileHandle(filehandle, options) {\r\n  const signal = options?.signal;\r\n  const encoding = options?.encoding;\r\n  const decoder = encoding && new StringDecoder(encoding);\r\n\r\n  checkAborted(signal);\r\n\r\n  const statFields = await PromisePrototypeThen(\r\n    binding.fstat(filehandle.fd, false, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n\r\n  checkAborted(signal);\r\n\r\n  let size = 0;\r\n  let length = 0;\r\n  if ((statFields[1/* mode */] & S_IFMT) === S_IFREG) {\r\n    size = statFields[8/* size */];\r\n    length = encoding ? MathMin(size, kReadFileBufferLength) : size;\r\n  }\r\n  if (length === 0) {\r\n    length = kReadFileUnknownBufferLength;\r\n  }\r\n\r\n  if (size > kIoMaxLength)\r\n    throw new ERR_FS_FILE_TOO_LARGE(size);\r\n\r\n  let totalRead = 0;\r\n  const noSize = size === 0;\r\n  let buffer = Buffer.allocUnsafeSlow(length);\r\n  let result = '';\r\n  let offset = 0;\r\n  let buffers;\r\n  const chunkedRead = length > kReadFileBufferLength;\r\n\r\n  while (true) {\r\n    checkAborted(signal);\r\n\r\n    if (chunkedRead) {\r\n      length = MathMin(size - totalRead, kReadFileBufferLength);\r\n    }\r\n\r\n    const bytesRead = (await PromisePrototypeThen(\r\n      binding.read(filehandle.fd, buffer, offset, length, -1, kUsePromises),\r\n      undefined,\r\n      handleErrorFromBinding,\r\n    )) ?? 0;\r\n    totalRead += bytesRead;\r\n\r\n    if (bytesRead === 0 ||\r\n        totalRead === size ||\r\n        (bytesRead !== buffer.length && !chunkedRead && !noSize)) {\r\n      const singleRead = bytesRead === totalRead;\r\n\r\n      const bytesToCheck = chunkedRead ? totalRead : bytesRead;\r\n\r\n      if (bytesToCheck !== buffer.length) {\r\n        buffer = buffer.subarray(0, bytesToCheck);\r\n      }\r\n\r\n      if (!encoding) {\r\n        if (noSize && !singleRead) {\r\n          ArrayPrototypePush(buffers, buffer);\r\n          return Buffer.concat(buffers, totalRead);\r\n        }\r\n        return buffer;\r\n      }\r\n\r\n      if (singleRead) {\r\n        return buffer.toString(encoding);\r\n      }\r\n      result += decoder.end(buffer);\r\n      return result;\r\n    }\r\n    const readBuffer = bytesRead !== buffer.length ?\r\n      buffer.subarray(0, bytesRead) :\r\n      buffer;\r\n    if (encoding) {\r\n      result += decoder.write(readBuffer);\r\n    } else if (size !== 0) {\r\n      offset = totalRead;\r\n    } else {\r\n      buffers ??= [];\r\n      // Unknown file size requires chunks.\r\n      ArrayPrototypePush(buffers, readBuffer);\r\n      buffer = Buffer.allocUnsafeSlow(kReadFileUnknownBufferLength);\r\n    }\r\n  }\r\n}\r\n\r\n// All of the functions are defined as async in order to ensure that errors\r\n// thrown cause promise rejections rather than being thrown synchronously.\r\nasync function access(path, mode = F_OK) {\r\n  path = getValidatedPath(path);\r\n\r\n  return await PromisePrototypeThen(\r\n    binding.access(pathModule.toNamespacedPath(path), mode, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function cp(src, dest, options) {\r\n  options = validateCpOptions(options);\r\n  src = pathModule.toNamespacedPath(getValidatedPath(src, 'src'));\r\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest, 'dest'));\r\n  return lazyLoadCpPromises()(src, dest, options);\r\n}\r\n\r\nasync function copyFile(src, dest, mode) {\r\n  src = getValidatedPath(src, 'src');\r\n  dest = getValidatedPath(dest, 'dest');\r\n  return await PromisePrototypeThen(\r\n    binding.copyFile(pathModule.toNamespacedPath(src),\r\n                     pathModule.toNamespacedPath(dest),\r\n                     mode,\r\n                     kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\n// Note that unlike fs.open() which uses numeric file descriptors,\r\n// fsPromises.open() uses the fs.FileHandle class.\r\nasync function open(path, flags, mode) {\r\n  path = getValidatedPath(path);\r\n  const flagsNumber = stringToFlags(flags);\r\n  mode = parseFileMode(mode, 'mode', 0o666);\r\n  return new FileHandle(await PromisePrototypeThen(\r\n    binding.openFileHandle(pathModule.toNamespacedPath(path),\r\n                           flagsNumber, mode, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  ));\r\n}\r\n\r\nasync function read(handle, bufferOrParams, offset, length, position) {\r\n  let buffer = bufferOrParams;\r\n  if (!isArrayBufferView(buffer)) {\r\n    // This is fh.read(params)\r\n    if (bufferOrParams !== undefined) {\r\n      validateObject(bufferOrParams, 'options', kValidateObjectAllowNullable);\r\n    }\r\n    ({\r\n      buffer = Buffer.alloc(16384),\r\n      offset = 0,\r\n      length = buffer.byteLength - offset,\r\n      position = null,\r\n    } = bufferOrParams ?? kEmptyObject);\r\n\r\n    validateBuffer(buffer);\r\n  }\r\n\r\n  if (offset !== null && typeof offset === 'object') {\r\n    // This is fh.read(buffer, options)\r\n    ({\r\n      offset = 0,\r\n      length = buffer.byteLength - offset,\r\n      position = null,\r\n    } = offset);\r\n  }\r\n\r\n  if (offset == null) {\r\n    offset = 0;\r\n  } else {\r\n    validateInteger(offset, 'offset', 0);\r\n  }\r\n\r\n  length ??= buffer.byteLength - offset;\r\n\r\n  if (length === 0)\r\n    return { __proto__: null, bytesRead: length, buffer };\r\n\r\n  if (buffer.byteLength === 0) {\r\n    throw new ERR_INVALID_ARG_VALUE('buffer', buffer,\r\n                                    'is empty and cannot be written');\r\n  }\r\n\r\n  validateOffsetLengthRead(offset, length, buffer.byteLength);\r\n\r\n  if (position == null) {\r\n    position = -1;\r\n  } else {\r\n    validatePosition(position, 'position', length);\r\n  }\r\n\r\n  const bytesRead = (await PromisePrototypeThen(\r\n    binding.read(handle.fd, buffer, offset, length, position, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  )) || 0;\r\n\r\n  return { __proto__: null, bytesRead, buffer };\r\n}\r\n\r\nasync function readv(handle, buffers, position) {\r\n  validateBufferArray(buffers);\r\n\r\n  if (typeof position !== 'number')\r\n    position = null;\r\n\r\n  const bytesRead = (await PromisePrototypeThen(\r\n    binding.readBuffers(handle.fd, buffers, position, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  )) || 0;\r\n  return { __proto__: null, bytesRead, buffers };\r\n}\r\n\r\nasync function write(handle, buffer, offsetOrOptions, length, position) {\r\n  if (buffer?.byteLength === 0)\r\n    return { __proto__: null, bytesWritten: 0, buffer };\r\n\r\n  let offset = offsetOrOptions;\r\n  if (isArrayBufferView(buffer)) {\r\n    if (typeof offset === 'object') {\r\n      ({\r\n        offset = 0,\r\n        length = buffer.byteLength - offset,\r\n        position = null,\r\n      } = offsetOrOptions ?? kEmptyObject);\r\n    }\r\n\r\n    if (offset == null) {\r\n      offset = 0;\r\n    } else {\r\n      validateInteger(offset, 'offset', 0);\r\n    }\r\n    if (typeof length !== 'number')\r\n      length = buffer.byteLength - offset;\r\n    if (typeof position !== 'number')\r\n      position = null;\r\n    validateOffsetLengthWrite(offset, length, buffer.byteLength);\r\n    const bytesWritten =\r\n      (await PromisePrototypeThen(\r\n        binding.writeBuffer(handle.fd, buffer, offset,\r\n                            length, position, kUsePromises),\r\n        undefined,\r\n        handleErrorFromBinding,\r\n      )) || 0;\r\n    return { __proto__: null, bytesWritten, buffer };\r\n  }\r\n\r\n  validateStringAfterArrayBufferView(buffer, 'buffer');\r\n  validateEncoding(buffer, length);\r\n  const bytesWritten = (await PromisePrototypeThen(\r\n    binding.writeString(handle.fd, buffer, offset, length, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  )) || 0;\r\n  return { __proto__: null, bytesWritten, buffer };\r\n}\r\n\r\nasync function writev(handle, buffers, position) {\r\n  validateBufferArray(buffers);\r\n\r\n  if (typeof position !== 'number')\r\n    position = null;\r\n\r\n  if (buffers.length === 0) {\r\n    return { __proto__: null, bytesWritten: 0, buffers };\r\n  }\r\n\r\n  const bytesWritten = (await PromisePrototypeThen(\r\n    binding.writeBuffers(handle.fd, buffers, position, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  )) || 0;\r\n  return { __proto__: null, bytesWritten, buffers };\r\n}\r\n\r\nasync function rename(oldPath, newPath) {\r\n  oldPath = getValidatedPath(oldPath, 'oldPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n  return await PromisePrototypeThen(\r\n    binding.rename(pathModule.toNamespacedPath(oldPath),\r\n                   pathModule.toNamespacedPath(newPath),\r\n                   kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function truncate(path, len = 0) {\r\n  const fd = await open(path, 'r+');\r\n  return handleFdClose(ftruncate(fd, len), fd.close);\r\n}\r\n\r\nasync function ftruncate(handle, len = 0) {\r\n  validateInteger(len, 'len');\r\n  len = MathMax(0, len);\r\n  return await PromisePrototypeThen(\r\n    binding.ftruncate(handle.fd, len, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function rm(path, options) {\r\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\r\n  options = await validateRmOptionsPromise(path, options, false);\r\n  return lazyRimRaf()(path, options);\r\n}\r\n\r\nasync function rmdir(path, options) {\r\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\r\n  options = validateRmdirOptions(options);\r\n\r\n  if (options.recursive) {\r\n    emitRecursiveRmdirWarning();\r\n    const stats = await stat(path);\r\n    if (stats.isDirectory()) {\r\n      return lazyRimRaf()(path, options);\r\n    }\r\n  }\r\n\r\n  return await PromisePrototypeThen(\r\n    binding.rmdir(path, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function fdatasync(handle) {\r\n  return await PromisePrototypeThen(\r\n    binding.fdatasync(handle.fd, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function fsync(handle) {\r\n  return await PromisePrototypeThen(\r\n    binding.fsync(handle.fd, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function mkdir(path, options) {\r\n  if (typeof options === 'number' || typeof options === 'string') {\r\n    options = { mode: options };\r\n  }\r\n  const {\r\n    recursive = false,\r\n    mode = 0o777,\r\n  } = options || kEmptyObject;\r\n  path = getValidatedPath(path);\r\n  validateBoolean(recursive, 'options.recursive');\r\n\r\n  return await PromisePrototypeThen(\r\n    binding.mkdir(pathModule.toNamespacedPath(path),\r\n                  parseFileMode(mode, 'mode', 0o777), recursive,\r\n                  kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function readdirRecursive(originalPath, options) {\r\n  const result = [];\r\n  const queue = [\r\n    [\r\n      originalPath,\r\n      await PromisePrototypeThen(\r\n        binding.readdir(\r\n          pathModule.toNamespacedPath(originalPath),\r\n          options.encoding,\r\n          !!options.withFileTypes,\r\n          kUsePromises,\r\n        ),\r\n        undefined,\r\n        handleErrorFromBinding,\r\n      ),\r\n    ],\r\n  ];\r\n\r\n\r\n  if (options.withFileTypes) {\r\n    while (queue.length > 0) {\r\n      // If we want to implement BFS make this a `shift` call instead of `pop`\r\n      const { 0: path, 1: readdir } = ArrayPrototypePop(queue);\r\n      for (const dirent of getDirents(path, readdir)) {\r\n        ArrayPrototypePush(result, dirent);\r\n        if (dirent.isDirectory()) {\r\n          const direntPath = pathModule.join(path, dirent.name);\r\n          ArrayPrototypePush(queue, [\r\n            direntPath,\r\n            await PromisePrototypeThen(\r\n              binding.readdir(\r\n                direntPath,\r\n                options.encoding,\r\n                true,\r\n                kUsePromises,\r\n              ),\r\n              undefined,\r\n              handleErrorFromBinding,\r\n            ),\r\n          ]);\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    while (queue.length > 0) {\r\n      const { 0: path, 1: readdir } = ArrayPrototypePop(queue);\r\n      for (const ent of readdir) {\r\n        const direntPath = pathModule.join(path, ent);\r\n        const stat = binding.internalModuleStat(direntPath);\r\n        ArrayPrototypePush(\r\n          result,\r\n          pathModule.relative(originalPath, direntPath),\r\n        );\r\n        if (stat === 1) {\r\n          ArrayPrototypePush(queue, [\r\n            direntPath,\r\n            await PromisePrototypeThen(\r\n              binding.readdir(\r\n                pathModule.toNamespacedPath(direntPath),\r\n                options.encoding,\r\n                false,\r\n                kUsePromises,\r\n              ),\r\n              undefined,\r\n              handleErrorFromBinding,\r\n            ),\r\n          ]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nasync function readdir(path, options) {\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path);\r\n  if (options.recursive) {\r\n    return readdirRecursive(path, options);\r\n  }\r\n  const result = await PromisePrototypeThen(\r\n    binding.readdir(\r\n      pathModule.toNamespacedPath(path),\r\n      options.encoding,\r\n      !!options.withFileTypes,\r\n      kUsePromises,\r\n    ),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n  return options.withFileTypes ?\r\n    getDirectoryEntriesPromise(path, result) :\r\n    result;\r\n}\r\n\r\nasync function readlink(path, options) {\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path, 'oldPath');\r\n  return await PromisePrototypeThen(\r\n    binding.readlink(pathModule.toNamespacedPath(path),\r\n                     options.encoding, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function symlink(target, path, type_) {\r\n  let type = (typeof type_ === 'string' ? type_ : null);\r\n  if (isWindows && type === null) {\r\n    try {\r\n      const absoluteTarget = pathModule.resolve(`${path}`, '..', `${target}`);\r\n      type = (await stat(absoluteTarget)).isDirectory() ? 'dir' : 'file';\r\n    } catch {\r\n      // Default to 'file' if path is invalid or file does not exist\r\n      type = 'file';\r\n    }\r\n  }\r\n\r\n  if (permission.isEnabled()) {\r\n    // The permission model's security guarantees fall apart in the presence of\r\n    // relative symbolic links. Thus, we have to prevent their creation.\r\n    if (BufferIsBuffer(target)) {\r\n      if (!isAbsolute(BufferToString(target))) {\r\n        throw new ERR_ACCESS_DENIED('relative symbolic link target');\r\n      }\r\n    } else if (typeof target !== 'string' || !isAbsolute(toPathIfFileURL(target))) {\r\n      throw new ERR_ACCESS_DENIED('relative symbolic link target');\r\n    }\r\n  }\r\n\r\n  target = getValidatedPath(target, 'target');\r\n  path = getValidatedPath(path);\r\n  return await PromisePrototypeThen(\r\n    binding.symlink(preprocessSymlinkDestination(target, type, path),\r\n                    pathModule.toNamespacedPath(path),\r\n                    stringToSymlinkType(type),\r\n                    kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function fstat(handle, options = { bigint: false }) {\r\n  const result = await PromisePrototypeThen(\r\n    binding.fstat(handle.fd, options.bigint, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n  return getStatsFromBinding(result);\r\n}\r\n\r\nasync function lstat(path, options = { bigint: false }) {\r\n  path = getValidatedPath(path);\r\n  const result = await PromisePrototypeThen(\r\n    binding.lstat(pathModule.toNamespacedPath(path),\r\n                  options.bigint, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n  return getStatsFromBinding(result);\r\n}\r\n\r\nasync function stat(path, options = { bigint: false }) {\r\n  path = getValidatedPath(path);\r\n  const result = await PromisePrototypeThen(\r\n    binding.stat(pathModule.toNamespacedPath(path),\r\n                 options.bigint, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n  return getStatsFromBinding(result);\r\n}\r\n\r\nasync function statfs(path, options = { bigint: false }) {\r\n  path = getValidatedPath(path);\r\n  const result = await PromisePrototypeThen(\r\n    binding.statfs(pathModule.toNamespacedPath(path),\r\n                   options.bigint, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n  return getStatFsFromBinding(result);\r\n}\r\n\r\nasync function link(existingPath, newPath) {\r\n  existingPath = getValidatedPath(existingPath, 'existingPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n  return await PromisePrototypeThen(\r\n    binding.link(pathModule.toNamespacedPath(existingPath),\r\n                 pathModule.toNamespacedPath(newPath),\r\n                 kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function unlink(path) {\r\n  path = getValidatedPath(path);\r\n  return await PromisePrototypeThen(\r\n    binding.unlink(pathModule.toNamespacedPath(path), kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function fchmod(handle, mode) {\r\n  mode = parseFileMode(mode, 'mode');\r\n  return await PromisePrototypeThen(\r\n    binding.fchmod(handle.fd, mode, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function chmod(path, mode) {\r\n  path = getValidatedPath(path);\r\n  mode = parseFileMode(mode, 'mode');\r\n  return await PromisePrototypeThen(\r\n    binding.chmod(pathModule.toNamespacedPath(path), mode, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function lchmod(path, mode) {\r\n  if (O_SYMLINK === undefined)\r\n    throw new ERR_METHOD_NOT_IMPLEMENTED('lchmod()');\r\n\r\n  const fd = await open(path, O_WRONLY | O_SYMLINK);\r\n  return handleFdClose(fchmod(fd, mode), fd.close);\r\n}\r\n\r\nasync function lchown(path, uid, gid) {\r\n  path = getValidatedPath(path);\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n  return await PromisePrototypeThen(\r\n    binding.lchown(pathModule.toNamespacedPath(path), uid, gid, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function fchown(handle, uid, gid) {\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n  return await PromisePrototypeThen(\r\n    binding.fchown(handle.fd, uid, gid, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function chown(path, uid, gid) {\r\n  path = getValidatedPath(path);\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n  return await PromisePrototypeThen(\r\n    binding.chown(pathModule.toNamespacedPath(path), uid, gid, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function utimes(path, atime, mtime) {\r\n  path = getValidatedPath(path);\r\n  return await PromisePrototypeThen(\r\n    binding.utimes(pathModule.toNamespacedPath(path),\r\n                   toUnixTimestamp(atime),\r\n                   toUnixTimestamp(mtime),\r\n                   kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function futimes(handle, atime, mtime) {\r\n  atime = toUnixTimestamp(atime, 'atime');\r\n  mtime = toUnixTimestamp(mtime, 'mtime');\r\n  return await PromisePrototypeThen(\r\n    binding.futimes(handle.fd, atime, mtime, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function lutimes(path, atime, mtime) {\r\n  path = getValidatedPath(path);\r\n  return await PromisePrototypeThen(\r\n    binding.lutimes(pathModule.toNamespacedPath(path),\r\n                    toUnixTimestamp(atime),\r\n                    toUnixTimestamp(mtime),\r\n                    kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function realpath(path, options) {\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path);\r\n  return await PromisePrototypeThen(\r\n    binding.realpath(pathModule.toNamespacedPath(path), options.encoding, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function mkdtemp(prefix, options) {\r\n  options = getOptions(options);\r\n\r\n  prefix = getValidatedPath(prefix, 'prefix');\r\n  warnOnNonPortableTemplate(prefix);\r\n\r\n  let path;\r\n  if (typeof prefix === 'string') {\r\n    path = `${prefix}XXXXXX`;\r\n  } else {\r\n    path = Buffer.concat([prefix, Buffer.from('XXXXXX')]);\r\n  }\r\n\r\n  return await PromisePrototypeThen(\r\n    binding.mkdtemp(path, options.encoding, kUsePromises),\r\n    undefined,\r\n    handleErrorFromBinding,\r\n  );\r\n}\r\n\r\nasync function writeFile(path, data, options) {\r\n  options = getOptions(options, {\r\n    encoding: 'utf8',\r\n    mode: 0o666,\r\n    flag: 'w',\r\n    flush: false,\r\n  });\r\n  const flag = options.flag || 'w';\r\n  const flush = options.flush ?? false;\r\n\r\n  validateBoolean(flush, 'options.flush');\r\n\r\n  if (!isArrayBufferView(data) && !isCustomIterable(data)) {\r\n    validateStringAfterArrayBufferView(data, 'data');\r\n    data = Buffer.from(data, options.encoding || 'utf8');\r\n  }\r\n\r\n  validateAbortSignal(options.signal);\r\n  if (path instanceof FileHandle)\r\n    return writeFileHandle(path, data, options.signal, options.encoding);\r\n\r\n  checkAborted(options.signal);\r\n\r\n  const fd = await open(path, flag, options.mode);\r\n  let writeOp = writeFileHandle(fd, data, options.signal, options.encoding);\r\n\r\n  if (flush) {\r\n    writeOp = handleFdSync(writeOp, fd);\r\n  }\r\n\r\n  return handleFdClose(writeOp, fd.close);\r\n}\r\n\r\nfunction isCustomIterable(obj) {\r\n  return isIterable(obj) && !isArrayBufferView(obj) && typeof obj !== 'string';\r\n}\r\n\r\nasync function appendFile(path, data, options) {\r\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' });\r\n  options = copyObject(options);\r\n  options.flag = options.flag || 'a';\r\n  return writeFile(path, data, options);\r\n}\r\n\r\nasync function readFile(path, options) {\r\n  options = getOptions(options, { flag: 'r' });\r\n  const flag = options.flag || 'r';\r\n\r\n  if (path instanceof FileHandle)\r\n    return readFileHandle(path, options);\r\n\r\n  checkAborted(options.signal);\r\n\r\n  const fd = await open(path, flag, 0o666);\r\n  return handleFdClose(readFileHandle(fd, options), fd.close);\r\n}\r\n\r\nasync function* _watch(filename, options = kEmptyObject) {\r\n  validateObject(options, 'options');\r\n\r\n  if (options.recursive != null) {\r\n    validateBoolean(options.recursive, 'options.recursive');\r\n\r\n    // TODO(anonrig): Remove non-native watcher when/if libuv supports recursive.\r\n    // As of November 2022, libuv does not support recursive file watch on all platforms,\r\n    // e.g. Linux due to the limitations of inotify.\r\n    if (options.recursive && !isOSX && !isWindows) {\r\n      const watcher = new nonNativeWatcher.FSWatcher(options);\r\n      watcher[kFSWatchStart](filename);\r\n      yield* watcher;\r\n      return;\r\n    }\r\n  }\r\n\r\n  yield* watch(filename, options);\r\n}\r\n\r\nconst lazyGlob = getLazy(() => require('internal/fs/glob').Glob);\r\nasync function* glob(pattern, options) {\r\n  emitExperimentalWarning('glob');\r\n  const Glob = lazyGlob();\r\n  yield* new Glob(pattern, options).glob();\r\n}\r\n\r\nmodule.exports = {\r\n  exports: {\r\n    access,\r\n    copyFile,\r\n    cp,\r\n    glob,\r\n    open,\r\n    opendir: promisify(opendir),\r\n    rename,\r\n    truncate,\r\n    rm,\r\n    rmdir,\r\n    mkdir,\r\n    readdir,\r\n    readlink,\r\n    symlink,\r\n    lstat,\r\n    stat,\r\n    statfs,\r\n    link,\r\n    unlink,\r\n    chmod,\r\n    lchmod,\r\n    lchown,\r\n    chown,\r\n    utimes,\r\n    lutimes,\r\n    realpath,\r\n    mkdtemp,\r\n    writeFile,\r\n    appendFile,\r\n    readFile,\r\n    watch: !isOSX && !isWindows ? _watch : watch,\r\n    constants,\r\n  },\r\n\r\n  FileHandle,\r\n  kRef,\r\n  kUnref,\r\n};\r\n"
  },
  "164": {
    "metadata": {
      "scriptId": "164",
      "url": "node:internal/fs/dir",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 331,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "aa4e1b380576477031a2073a39c3769491e13ef9ca74aeef7fd5791c0566e3a8",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 7760,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/fs/dir"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeShift,\r\n  FunctionPrototypeBind,\r\n  ObjectDefineProperty,\r\n  PromiseReject,\r\n  SymbolAsyncIterator,\r\n} = primordials;\r\n\r\nconst pathModule = require('path');\r\nconst binding = internalBinding('fs');\r\nconst dirBinding = internalBinding('fs_dir');\r\nconst {\r\n  codes: {\r\n    ERR_DIR_CLOSED,\r\n    ERR_DIR_CONCURRENT_OPERATION,\r\n    ERR_MISSING_ARGS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst { FSReqCallback } = binding;\r\nconst internalUtil = require('internal/util');\r\nconst {\r\n  getDirent,\r\n  getOptions,\r\n  getValidatedPath,\r\n  handleErrorFromBinding,\r\n} = require('internal/fs/utils');\r\nconst {\r\n  validateFunction,\r\n  validateUint32,\r\n} = require('internal/validators');\r\n\r\nclass Dir {\r\n  #handle;\r\n  #path;\r\n  #bufferedEntries = [];\r\n  #closed = false;\r\n  #options;\r\n  #readPromisified;\r\n  #closePromisified;\r\n  // Either `null` or an Array of pending operations (= functions to be called\r\n  // once the current operation is done).\r\n  #operationQueue = null;\r\n\r\n  constructor(handle, path, options) {\r\n    if (handle == null) throw new ERR_MISSING_ARGS('handle');\r\n    this.#handle = handle;\r\n    this.#path = path;\r\n    this.#options = {\r\n      bufferSize: 32,\r\n      ...getOptions(options, {\r\n        encoding: 'utf8',\r\n      }),\r\n    };\r\n\r\n    validateUint32(this.#options.bufferSize, 'options.bufferSize', true);\r\n\r\n    this.#readPromisified = FunctionPrototypeBind(\r\n      internalUtil.promisify(this.#readImpl), this, false);\r\n    this.#closePromisified = FunctionPrototypeBind(\r\n      internalUtil.promisify(this.close), this);\r\n  }\r\n\r\n  get path() {\r\n    return this.#path;\r\n  }\r\n\r\n  read(callback) {\r\n    return this.#readImpl(true, callback);\r\n  }\r\n\r\n  #readImpl(maybeSync, callback) {\r\n    if (this.#closed === true) {\r\n      throw new ERR_DIR_CLOSED();\r\n    }\r\n\r\n    if (callback === undefined) {\r\n      return this.#readPromisified();\r\n    }\r\n\r\n    validateFunction(callback, 'callback');\r\n\r\n    if (this.#operationQueue !== null) {\r\n      ArrayPrototypePush(this.#operationQueue, () => {\r\n        this.#readImpl(maybeSync, callback);\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (this.#bufferedEntries.length > 0) {\r\n      try {\r\n        const dirent = ArrayPrototypeShift(this.#bufferedEntries);\r\n\r\n        if (this.#options.recursive && dirent.isDirectory()) {\r\n          this.readSyncRecursive(dirent);\r\n        }\r\n\r\n        if (maybeSync)\r\n          process.nextTick(callback, null, dirent);\r\n        else\r\n          callback(null, dirent);\r\n        return;\r\n      } catch (error) {\r\n        return callback(error);\r\n      }\r\n    }\r\n\r\n    const req = new FSReqCallback();\r\n    req.oncomplete = (err, result) => {\r\n      process.nextTick(() => {\r\n        const queue = this.#operationQueue;\r\n        this.#operationQueue = null;\r\n        for (const op of queue) op();\r\n      });\r\n\r\n      if (err || result === null) {\r\n        return callback(err, result);\r\n      }\r\n\r\n      try {\r\n        this.processReadResult(this.#path, result);\r\n        const dirent = ArrayPrototypeShift(this.#bufferedEntries);\r\n        if (this.#options.recursive && dirent.isDirectory()) {\r\n          this.readSyncRecursive(dirent);\r\n        }\r\n        callback(null, dirent);\r\n      } catch (error) {\r\n        callback(error);\r\n      }\r\n    };\r\n\r\n    this.#operationQueue = [];\r\n    this.#handle.read(\r\n      this.#options.encoding,\r\n      this.#options.bufferSize,\r\n      req,\r\n    );\r\n  }\r\n\r\n  processReadResult(path, result) {\r\n    for (let i = 0; i < result.length; i += 2) {\r\n      ArrayPrototypePush(\r\n        this.#bufferedEntries,\r\n        getDirent(\r\n          path,\r\n          result[i],\r\n          result[i + 1],\r\n        ),\r\n      );\r\n    }\r\n  }\r\n\r\n  readSyncRecursive(dirent) {\r\n    const path = pathModule.join(dirent.parentPath, dirent.name);\r\n    const ctx = { path };\r\n    const handle = dirBinding.opendir(\r\n      pathModule.toNamespacedPath(path),\r\n      this.#options.encoding,\r\n      undefined,\r\n      ctx,\r\n    );\r\n    handleErrorFromBinding(ctx);\r\n    const result = handle.read(\r\n      this.#options.encoding,\r\n      this.#options.bufferSize,\r\n      undefined,\r\n      ctx,\r\n    );\r\n\r\n    if (result) {\r\n      this.processReadResult(path, result);\r\n    }\r\n\r\n    handle.close(undefined, ctx);\r\n    handleErrorFromBinding(ctx);\r\n  }\r\n\r\n  readSync() {\r\n    if (this.#closed === true) {\r\n      throw new ERR_DIR_CLOSED();\r\n    }\r\n\r\n    if (this.#operationQueue !== null) {\r\n      throw new ERR_DIR_CONCURRENT_OPERATION();\r\n    }\r\n\r\n    if (this.#bufferedEntries.length > 0) {\r\n      const dirent = ArrayPrototypeShift(this.#bufferedEntries);\r\n      if (this.#options.recursive && dirent.isDirectory()) {\r\n        this.readSyncRecursive(dirent);\r\n      }\r\n      return dirent;\r\n    }\r\n\r\n    const ctx = { path: this.#path };\r\n    const result = this.#handle.read(\r\n      this.#options.encoding,\r\n      this.#options.bufferSize,\r\n      undefined,\r\n      ctx,\r\n    );\r\n    handleErrorFromBinding(ctx);\r\n\r\n    if (result === null) {\r\n      return result;\r\n    }\r\n\r\n    this.processReadResult(this.#path, result);\r\n\r\n    const dirent = ArrayPrototypeShift(this.#bufferedEntries);\r\n    if (this.#options.recursive && dirent.isDirectory()) {\r\n      this.readSyncRecursive(dirent);\r\n    }\r\n    return dirent;\r\n  }\r\n\r\n  close(callback) {\r\n    // Promise\r\n    if (callback === undefined) {\r\n      if (this.#closed === true) {\r\n        return PromiseReject(new ERR_DIR_CLOSED());\r\n      }\r\n      return this.#closePromisified();\r\n    }\r\n\r\n    // callback\r\n    validateFunction(callback, 'callback');\r\n\r\n    if (this.#closed === true) {\r\n      process.nextTick(callback, new ERR_DIR_CLOSED());\r\n      return;\r\n    }\r\n\r\n    if (this.#operationQueue !== null) {\r\n      ArrayPrototypePush(this.#operationQueue, () => {\r\n        this.close(callback);\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.#closed = true;\r\n    const req = new FSReqCallback();\r\n    req.oncomplete = callback;\r\n    this.#handle.close(req);\r\n  }\r\n\r\n  closeSync() {\r\n    if (this.#closed === true) {\r\n      throw new ERR_DIR_CLOSED();\r\n    }\r\n\r\n    if (this.#operationQueue !== null) {\r\n      throw new ERR_DIR_CONCURRENT_OPERATION();\r\n    }\r\n\r\n    this.#closed = true;\r\n    const ctx = { path: this.#path };\r\n    const result = this.#handle.close(undefined, ctx);\r\n    handleErrorFromBinding(ctx);\r\n    return result;\r\n  }\r\n\r\n  async* entries() {\r\n    try {\r\n      while (true) {\r\n        const result = await this.#readPromisified();\r\n        if (result === null) {\r\n          break;\r\n        }\r\n        yield result;\r\n      }\r\n    } finally {\r\n      await this.#closePromisified();\r\n    }\r\n  }\r\n}\r\n\r\nObjectDefineProperty(Dir.prototype, SymbolAsyncIterator, {\r\n  __proto__: null,\r\n  value: Dir.prototype.entries,\r\n  enumerable: false,\r\n  writable: true,\r\n  configurable: true,\r\n});\r\n\r\nfunction opendir(path, options, callback) {\r\n  callback = typeof options === 'function' ? options : callback;\r\n  validateFunction(callback, 'callback');\r\n\r\n  path = getValidatedPath(path);\r\n  options = getOptions(options, {\r\n    encoding: 'utf8',\r\n  });\r\n\r\n  function opendirCallback(error, handle) {\r\n    if (error) {\r\n      callback(error);\r\n    } else {\r\n      callback(null, new Dir(handle, path, options));\r\n    }\r\n  }\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = opendirCallback;\r\n\r\n  dirBinding.opendir(\r\n    pathModule.toNamespacedPath(path),\r\n    options.encoding,\r\n    req,\r\n  );\r\n}\r\n\r\nfunction opendirSync(path, options) {\r\n  path = getValidatedPath(path);\r\n  options = getOptions(options, { encoding: 'utf8' });\r\n\r\n  const handle = dirBinding.opendirSync(\r\n    pathModule.toNamespacedPath(path),\r\n  );\r\n\r\n  return new Dir(handle, path, options);\r\n}\r\n\r\nmodule.exports = {\r\n  Dir,\r\n  opendir,\r\n  opendirSync,\r\n};\r\n"
  },
  "165": {
    "metadata": {
      "scriptId": "165",
      "url": "node:internal/fs/watchers",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 387,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "26357bfdda0b4b6b329df7629957d99563799bed958c4e41a1a454db2cc31140",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 11649,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/fs/watchers"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeCall,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  AbortError,\r\n  UVException,\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  createDeferredPromise,\r\n  kEmptyObject,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  kFsStatsFieldsNumber,\r\n  StatWatcher: _StatWatcher,\r\n} = internalBinding('fs');\r\n\r\nconst { FSEvent } = internalBinding('fs_event_wrap');\r\nconst { UV_ENOSPC } = internalBinding('uv');\r\nconst { EventEmitter } = require('events');\r\n\r\nconst {\r\n  getStatsFromBinding,\r\n  getValidatedPath,\r\n} = require('internal/fs/utils');\r\n\r\nconst {\r\n  defaultTriggerAsyncIdScope,\r\n  symbols: { owner_symbol },\r\n} = require('internal/async_hooks');\r\n\r\nconst { toNamespacedPath } = require('path');\r\n\r\nconst {\r\n  validateAbortSignal,\r\n  validateBoolean,\r\n  validateObject,\r\n  validateUint32,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  Buffer: {\r\n    isEncoding,\r\n  },\r\n} = require('buffer');\r\n\r\nconst assert = require('internal/assert');\r\n\r\nconst kOldStatus = Symbol('kOldStatus');\r\nconst kUseBigint = Symbol('kUseBigint');\r\n\r\nconst kFSWatchStart = Symbol('kFSWatchStart');\r\nconst kFSStatWatcherStart = Symbol('kFSStatWatcherStart');\r\nconst KFSStatWatcherRefCount = Symbol('KFSStatWatcherRefCount');\r\nconst KFSStatWatcherMaxRefCount = Symbol('KFSStatWatcherMaxRefCount');\r\nconst kFSStatWatcherAddOrCleanRef = Symbol('kFSStatWatcherAddOrCleanRef');\r\n\r\nfunction emitStop(self) {\r\n  self.emit('stop');\r\n}\r\n\r\nfunction StatWatcher(bigint) {\r\n  FunctionPrototypeCall(EventEmitter, this);\r\n\r\n  this._handle = null;\r\n  this[kOldStatus] = -1;\r\n  this[kUseBigint] = bigint;\r\n  this[KFSStatWatcherRefCount] = 1;\r\n  this[KFSStatWatcherMaxRefCount] = 1;\r\n}\r\nObjectSetPrototypeOf(StatWatcher.prototype, EventEmitter.prototype);\r\nObjectSetPrototypeOf(StatWatcher, EventEmitter);\r\n\r\nfunction onchange(newStatus, stats) {\r\n  const self = this[owner_symbol];\r\n  if (self[kOldStatus] === -1 &&\r\n      newStatus === -1 &&\r\n      stats[2/* new nlink */] === stats[16/* old nlink */]) {\r\n    return;\r\n  }\r\n\r\n  self[kOldStatus] = newStatus;\r\n  self.emit('change', getStatsFromBinding(stats),\r\n            getStatsFromBinding(stats, kFsStatsFieldsNumber));\r\n}\r\n\r\n// At the moment if filename is undefined, we\r\n// 1. Throw an Error if it's the first\r\n//    time Symbol('kFSStatWatcherStart') is called\r\n// 2. Return silently if Symbol('kFSStatWatcherStart') has already been called\r\n//    on a valid filename and the wrap has been initialized\r\n// This method is a noop if the watcher has already been started.\r\nStatWatcher.prototype[kFSStatWatcherStart] = function(filename,\r\n                                                      persistent,\r\n                                                      interval) {\r\n  if (this._handle !== null)\r\n    return;\r\n\r\n  this._handle = new _StatWatcher(this[kUseBigint]);\r\n  this._handle[owner_symbol] = this;\r\n  this._handle.onchange = onchange;\r\n  if (!persistent)\r\n    this.unref();\r\n\r\n  // uv_fs_poll is a little more powerful than ev_stat but we curb it for\r\n  // the sake of backwards compatibility.\r\n  this[kOldStatus] = -1;\r\n\r\n  filename = getValidatedPath(filename, 'filename');\r\n  validateUint32(interval, 'interval');\r\n  const err = this._handle.start(toNamespacedPath(filename), interval);\r\n  if (err) {\r\n    const error = new UVException({\r\n      errno: err,\r\n      syscall: 'watch',\r\n      path: filename,\r\n    });\r\n    error.filename = filename;\r\n    throw error;\r\n  }\r\n};\r\n\r\n// To maximize backward-compatibility for the end user,\r\n// a no-op stub method has been added instead of\r\n// totally removing StatWatcher.prototype.start.\r\n// This should not be documented.\r\nStatWatcher.prototype.start = () => {};\r\n\r\n// FIXME(joyeecheung): this method is not documented while there is\r\n// another documented fs.unwatchFile(). The counterpart in\r\n// FSWatcher is .close()\r\n// This method is a noop if the watcher has not been started.\r\nStatWatcher.prototype.stop = function() {\r\n  if (this._handle === null)\r\n    return;\r\n\r\n  defaultTriggerAsyncIdScope(this._handle.getAsyncId(),\r\n                             process.nextTick,\r\n                             emitStop,\r\n                             this);\r\n  this._handle.close();\r\n  this._handle = null;\r\n};\r\n\r\n// Clean up or add ref counters.\r\nStatWatcher.prototype[kFSStatWatcherAddOrCleanRef] = function(operate) {\r\n  if (operate === 'add') {\r\n    // Add a Ref\r\n    this[KFSStatWatcherRefCount]++;\r\n    this[KFSStatWatcherMaxRefCount]++;\r\n  } else if (operate === 'clean') {\r\n    // Clean up a single\r\n    this[KFSStatWatcherMaxRefCount]--;\r\n    this.unref();\r\n  } else if (operate === 'cleanAll') {\r\n    // Clean up all\r\n    this[KFSStatWatcherMaxRefCount] = 0;\r\n    this[KFSStatWatcherRefCount] = 0;\r\n    this._handle?.unref();\r\n  }\r\n};\r\n\r\nStatWatcher.prototype.ref = function() {\r\n  // Avoid refCount calling ref multiple times causing unref to have no effect.\r\n  if (this[KFSStatWatcherRefCount] === this[KFSStatWatcherMaxRefCount])\r\n    return this;\r\n  if (this._handle && this[KFSStatWatcherRefCount]++ === 0)\r\n    this._handle.ref();\r\n  return this;\r\n};\r\n\r\nStatWatcher.prototype.unref = function() {\r\n  // Avoid refCount calling unref multiple times causing ref to have no effect.\r\n  if (this[KFSStatWatcherRefCount] === 0) return this;\r\n  if (this._handle && --this[KFSStatWatcherRefCount] === 0)\r\n    this._handle.unref();\r\n  return this;\r\n};\r\n\r\n\r\nfunction FSWatcher() {\r\n  FunctionPrototypeCall(EventEmitter, this);\r\n\r\n  this._handle = new FSEvent();\r\n  this._handle[owner_symbol] = this;\r\n\r\n  this._handle.onchange = (status, eventType, filename) => {\r\n    // TODO(joyeecheung): we may check self._handle.initialized here\r\n    // and return if that is false. This allows us to avoid firing the event\r\n    // after the handle is closed, and to fire both UV_RENAME and UV_CHANGE\r\n    // if they are set by libuv at the same time.\r\n    if (status < 0) {\r\n      if (this._handle !== null) {\r\n        // We don't use this.close() here to avoid firing the close event.\r\n        this._handle.close();\r\n        this._handle = null;  // Make the handle garbage collectable.\r\n      }\r\n      const error = new UVException({\r\n        errno: status,\r\n        syscall: 'watch',\r\n        path: filename,\r\n      });\r\n      error.filename = filename;\r\n      this.emit('error', error);\r\n    } else {\r\n      this.emit('change', eventType, filename);\r\n    }\r\n  };\r\n}\r\nObjectSetPrototypeOf(FSWatcher.prototype, EventEmitter.prototype);\r\nObjectSetPrototypeOf(FSWatcher, EventEmitter);\r\n\r\n// At the moment if filename is undefined, we\r\n// 1. Throw an Error if it's the first time Symbol('kFSWatchStart') is called\r\n// 2. Return silently if Symbol('kFSWatchStart') has already been called\r\n//    on a valid filename and the wrap has been initialized\r\n// 3. Return silently if the watcher has already been closed\r\n// This method is a noop if the watcher has already been started.\r\nFSWatcher.prototype[kFSWatchStart] = function(filename,\r\n                                              persistent,\r\n                                              recursive,\r\n                                              encoding) {\r\n  if (this._handle === null) {  // closed\r\n    return;\r\n  }\r\n  assert(this._handle instanceof FSEvent, 'handle must be a FSEvent');\r\n  if (this._handle.initialized) {  // already started\r\n    return;\r\n  }\r\n\r\n  filename = getValidatedPath(filename, 'filename');\r\n\r\n  const err = this._handle.start(toNamespacedPath(filename),\r\n                                 persistent,\r\n                                 recursive,\r\n                                 encoding);\r\n  if (err) {\r\n    const error = new UVException({\r\n      errno: err,\r\n      syscall: 'watch',\r\n      path: filename,\r\n      message: err === UV_ENOSPC ?\r\n        'System limit for number of file watchers reached' : '',\r\n    });\r\n    error.filename = filename;\r\n    throw error;\r\n  }\r\n};\r\n\r\n// To maximize backward-compatibility for the end user,\r\n// a no-op stub method has been added instead of\r\n// totally removing FSWatcher.prototype.start.\r\n// This should not be documented.\r\nFSWatcher.prototype.start = () => {};\r\n\r\n// This method is a noop if the watcher has not been started or\r\n// has already been closed.\r\nFSWatcher.prototype.close = function() {\r\n  if (this._handle === null) {  // closed\r\n    return;\r\n  }\r\n  assert(this._handle instanceof FSEvent, 'handle must be a FSEvent');\r\n  if (!this._handle.initialized) {  // not started\r\n    return;\r\n  }\r\n  this._handle.close();\r\n  this._handle = null;  // Make the handle garbage collectable.\r\n  process.nextTick(emitCloseNT, this);\r\n};\r\n\r\nFSWatcher.prototype.ref = function() {\r\n  if (this._handle) this._handle.ref();\r\n  return this;\r\n};\r\n\r\nFSWatcher.prototype.unref = function() {\r\n  if (this._handle) this._handle.unref();\r\n  return this;\r\n};\r\n\r\nfunction emitCloseNT(self) {\r\n  self.emit('close');\r\n}\r\n\r\n// Legacy alias on the C++ wrapper object. This is not public API, so we may\r\n// want to runtime-deprecate it at some point. There's no hurry, though.\r\nObjectDefineProperty(FSEvent.prototype, 'owner', {\r\n  __proto__: null,\r\n  get() { return this[owner_symbol]; },\r\n  set(v) { return this[owner_symbol] = v; },\r\n});\r\n\r\nlet kResistStopPropagation;\r\n\r\nasync function* watch(filename, options = kEmptyObject) {\r\n  const path = toNamespacedPath(getValidatedPath(filename));\r\n  validateObject(options, 'options');\r\n\r\n  const {\r\n    persistent = true,\r\n    recursive = false,\r\n    encoding = 'utf8',\r\n    signal,\r\n  } = options;\r\n\r\n  validateBoolean(persistent, 'options.persistent');\r\n  validateBoolean(recursive, 'options.recursive');\r\n  validateAbortSignal(signal, 'options.signal');\r\n\r\n  if (encoding && !isEncoding(encoding)) {\r\n    const reason = 'is invalid encoding';\r\n    throw new ERR_INVALID_ARG_VALUE(encoding, 'encoding', reason);\r\n  }\r\n\r\n  if (signal?.aborted)\r\n    throw new AbortError(undefined, { cause: signal?.reason });\r\n\r\n  const handle = new FSEvent();\r\n  let { promise, resolve, reject } = createDeferredPromise();\r\n  const oncancel = () => {\r\n    handle.close();\r\n    reject(new AbortError(undefined, { cause: signal?.reason }));\r\n  };\r\n\r\n  try {\r\n    if (signal) {\r\n      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;\r\n      signal.addEventListener('abort', oncancel, { __proto__: null, once: true, [kResistStopPropagation]: true });\r\n    }\r\n    handle.onchange = (status, eventType, filename) => {\r\n      if (status < 0) {\r\n        const error = new UVException({\r\n          errno: status,\r\n          syscall: 'watch',\r\n          path: filename,\r\n        });\r\n        error.filename = filename;\r\n        handle.close();\r\n        reject(error);\r\n        return;\r\n      }\r\n\r\n      resolve({ eventType, filename });\r\n    };\r\n\r\n    const err = handle.start(path, persistent, recursive, encoding);\r\n    if (err) {\r\n      const error = new UVException({\r\n        errno: err,\r\n        syscall: 'watch',\r\n        path: filename,\r\n        message: err === UV_ENOSPC ?\r\n          'System limit for number of file watchers reached' : '',\r\n      });\r\n      error.filename = filename;\r\n      handle.close();\r\n      throw error;\r\n    }\r\n\r\n    while (!signal?.aborted) {\r\n      yield await promise;\r\n      ({ promise, resolve, reject } = createDeferredPromise());\r\n    }\r\n    throw new AbortError(undefined, { cause: signal?.reason });\r\n  } finally {\r\n    handle.close();\r\n    signal?.removeEventListener('abort', oncancel);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  FSWatcher,\r\n  StatWatcher,\r\n  kFSWatchStart,\r\n  kFSStatWatcherStart,\r\n  kFSStatWatcherAddOrCleanRef,\r\n  watch,\r\n};\r\n"
  },
  "166": {
    "metadata": {
      "scriptId": "166",
      "url": "node:internal/fs/recursive_watch",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 268,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "b818058b20af3a0444c9c7eb20056b6745c5c005fb8ac10e93beb53021635921",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 7311,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/fs/recursive_watch"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Promise,\r\n  SafeMap,\r\n  SafeSet,\r\n  StringPrototypeStartsWith,\r\n  SymbolAsyncIterator,\r\n} = primordials;\r\n\r\nconst { EventEmitter } = require('events');\r\nconst assert = require('internal/assert');\r\nconst {\r\n  AbortError,\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\nconst { getValidatedPath } = require('internal/fs/utils');\r\nconst { kFSWatchStart, StatWatcher } = require('internal/fs/watchers');\r\nconst { kEmptyObject } = require('internal/util');\r\nconst { validateBoolean, validateAbortSignal } = require('internal/validators');\r\nconst {\r\n  basename: pathBasename,\r\n  join: pathJoin,\r\n  relative: pathRelative,\r\n  resolve: pathResolve,\r\n} = require('path');\r\n\r\nlet internalSync;\r\n\r\nfunction lazyLoadFsSync() {\r\n  internalSync ??= require('fs');\r\n  return internalSync;\r\n}\r\n\r\nlet kResistStopPropagation;\r\n\r\nclass FSWatcher extends EventEmitter {\r\n  #options = null;\r\n  #closed = false;\r\n  #files = new SafeMap();\r\n  #watchers = new SafeMap();\r\n  #symbolicFiles = new SafeSet();\r\n  #rootPath = pathResolve();\r\n  #watchingFile = false;\r\n\r\n  constructor(options = kEmptyObject) {\r\n    super();\r\n\r\n    assert(typeof options === 'object');\r\n\r\n    const { persistent, recursive, signal, encoding } = options;\r\n\r\n    // TODO(anonrig): Add non-recursive support to non-native-watcher for IBMi & AIX support.\r\n    if (recursive != null) {\r\n      validateBoolean(recursive, 'options.recursive');\r\n    }\r\n\r\n    if (persistent != null) {\r\n      validateBoolean(persistent, 'options.persistent');\r\n    }\r\n\r\n    if (signal != null) {\r\n      validateAbortSignal(signal, 'options.signal');\r\n    }\r\n\r\n    if (encoding != null) {\r\n      // This is required since on macOS and Windows it throws ERR_INVALID_ARG_VALUE\r\n      if (typeof encoding !== 'string') {\r\n        throw new ERR_INVALID_ARG_VALUE(encoding, 'options.encoding');\r\n      }\r\n    }\r\n\r\n    this.#options = { persistent, recursive, signal, encoding };\r\n  }\r\n\r\n  close() {\r\n    if (this.#closed) {\r\n      return;\r\n    }\r\n\r\n    this.#closed = true;\r\n\r\n    for (const file of this.#files.keys()) {\r\n      this.#watchers.get(file).close();\r\n      this.#watchers.delete(file);\r\n    }\r\n\r\n    this.#files.clear();\r\n    this.#symbolicFiles.clear();\r\n    this.emit('close');\r\n  }\r\n\r\n  #unwatchFiles(file) {\r\n    this.#symbolicFiles.delete(file);\r\n\r\n    for (const filename of this.#files.keys()) {\r\n      if (StringPrototypeStartsWith(filename, file)) {\r\n        this.#files.delete(filename);\r\n        this.#watchers.get(filename).close();\r\n        this.#watchers.delete(filename);\r\n      }\r\n    }\r\n  }\r\n\r\n  #watchFolder(folder) {\r\n    const { readdirSync } = lazyLoadFsSync();\r\n\r\n    try {\r\n      const files = readdirSync(folder, {\r\n        withFileTypes: true,\r\n      });\r\n\r\n      for (const file of files) {\r\n        if (this.#closed) {\r\n          break;\r\n        }\r\n\r\n        const f = pathJoin(folder, file.name);\r\n\r\n        if (!this.#files.has(f)) {\r\n          this.emit('change', 'rename', pathRelative(this.#rootPath, f));\r\n\r\n          if (file.isSymbolicLink()) {\r\n            this.#symbolicFiles.add(f);\r\n          }\r\n\r\n          this.#watchFile(f);\r\n          if (file.isDirectory() && !file.isSymbolicLink()) {\r\n            this.#watchFolder(f);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.emit('error', error);\r\n    }\r\n  }\r\n\r\n  #watchFile(file) {\r\n    if (this.#closed) {\r\n      return;\r\n    }\r\n\r\n    const { watch, statSync } = lazyLoadFsSync();\r\n\r\n    if (this.#files.has(file)) {\r\n      return;\r\n    }\r\n\r\n    {\r\n      const existingStat = statSync(file);\r\n      this.#files.set(file, existingStat);\r\n    }\r\n\r\n    const watcher = watch(file, {\r\n      persistent: this.#options.persistent,\r\n    }, (eventType, filename) => {\r\n      const existingStat = this.#files.get(file);\r\n      let currentStats;\r\n\r\n      try {\r\n        currentStats = statSync(file);\r\n        this.#files.set(file, currentStats);\r\n      } catch {\r\n        // This happens if the file was removed\r\n      }\r\n\r\n      if (currentStats === undefined || (currentStats.birthtimeMs === 0 && existingStat.birthtimeMs !== 0)) {\r\n        // The file is now deleted\r\n        this.#files.delete(file);\r\n        this.#watchers.delete(file);\r\n        watcher.close();\r\n        this.emit('change', 'rename', pathRelative(this.#rootPath, file));\r\n        this.#unwatchFiles(file);\r\n      } else if (file === this.#rootPath && this.#watchingFile) {\r\n        // This case will only be triggered when watching a file with fs.watch\r\n        this.emit('change', 'change', pathBasename(file));\r\n      } else if (this.#symbolicFiles.has(file)) {\r\n        // Stats from watchFile does not return correct value for currentStats.isSymbolicLink()\r\n        // Since it is only valid when using fs.lstat(). Therefore, check the existing symbolic files.\r\n        this.emit('change', 'rename', pathRelative(this.#rootPath, file));\r\n      } else if (currentStats.isDirectory()) {\r\n        this.#watchFolder(file);\r\n      } else {\r\n        // Watching a directory will trigger a change event for child files)\r\n        this.emit('change', 'change', pathRelative(this.#rootPath, file));\r\n      }\r\n    });\r\n    this.#watchers.set(file, watcher);\r\n  }\r\n\r\n  [kFSWatchStart](filename) {\r\n    filename = pathResolve(getValidatedPath(filename));\r\n\r\n    try {\r\n      const file = lazyLoadFsSync().statSync(filename);\r\n\r\n      this.#rootPath = filename;\r\n      this.#closed = false;\r\n      this.#watchingFile = file.isFile();\r\n\r\n      this.#watchFile(filename);\r\n      if (file.isDirectory()) {\r\n        this.#watchFolder(filename);\r\n      }\r\n    } catch (error) {\r\n      if (error.code === 'ENOENT') {\r\n        error.filename = filename;\r\n        throw error;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  ref() {\r\n    this.#files.forEach((file) => {\r\n      if (file instanceof StatWatcher) {\r\n        file.ref();\r\n      }\r\n    });\r\n  }\r\n\r\n  unref() {\r\n    this.#files.forEach((file) => {\r\n      if (file instanceof StatWatcher) {\r\n        file.unref();\r\n      }\r\n    });\r\n  }\r\n\r\n  [SymbolAsyncIterator]() {\r\n    const { signal } = this.#options;\r\n    const promiseExecutor = signal == null ?\r\n      (resolve) => {\r\n        this.once('change', (eventType, filename) => {\r\n          resolve({ __proto__: null, value: { eventType, filename } });\r\n        });\r\n      } : (resolve, reject) => {\r\n        const onAbort = () => {\r\n          this.close();\r\n          reject(new AbortError(undefined, { cause: signal.reason }));\r\n        };\r\n        if (signal.aborted) return onAbort();\r\n        kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;\r\n        signal.addEventListener('abort', onAbort, { __proto__: null, once: true, [kResistStopPropagation]: true });\r\n        this.once('change', (eventType, filename) => {\r\n          signal.removeEventListener('abort', onAbort);\r\n          resolve({ __proto__: null, value: { eventType, filename } });\r\n        });\r\n      };\r\n    return {\r\n      next: () => (this.#closed ?\r\n        { __proto__: null, done: true } :\r\n        new Promise(promiseExecutor)),\r\n      return: () => {\r\n        this.close();\r\n        return { __proto__: null, done: true };\r\n      },\r\n      [SymbolAsyncIterator]() { return this; },\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  FSWatcher,\r\n  kFSWatchStart,\r\n};\r\n"
  },
  "167": {
    "metadata": {
      "scriptId": "167",
      "url": "node:internal/readline/interface",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1405,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "0776f5eea392735690e8c55a5a9f16952e92b03aa2f856d887a4b2a2f9620b0f",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 40480,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/readline/interface"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayFrom,\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePop,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeReverse,\r\n  ArrayPrototypeShift,\r\n  ArrayPrototypeSplice,\r\n  ArrayPrototypeUnshift,\r\n  DateNow,\r\n  FunctionPrototypeCall,\r\n  MathCeil,\r\n  MathFloor,\r\n  MathMax,\r\n  MathMaxApply,\r\n  NumberIsFinite,\r\n  ObjectSetPrototypeOf,\r\n  RegExpPrototypeExec,\r\n  SafeStringIterator,\r\n  StringPrototypeCodePointAt,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeRepeat,\r\n  StringPrototypeSlice,\r\n  StringPrototypeStartsWith,\r\n  StringPrototypeTrim,\r\n  Symbol,\r\n  SymbolAsyncIterator,\r\n  SymbolDispose,\r\n} = primordials;\r\n\r\nconst { codes: {\r\n  ERR_INVALID_ARG_VALUE,\r\n  ERR_USE_AFTER_CLOSE,\r\n} } = require('internal/errors');\r\n\r\nconst {\r\n  validateAbortSignal,\r\n  validateArray,\r\n  validateNumber,\r\n  validateString,\r\n  validateUint32,\r\n} = require('internal/validators');\r\nconst { kEmptyObject } = require('internal/util');\r\nconst {\r\n  inspect,\r\n  getStringWidth,\r\n  stripVTControlCharacters,\r\n} = require('internal/util/inspect');\r\nconst EventEmitter = require('events');\r\nconst { addAbortListener } = require('internal/events/abort_listener');\r\nconst {\r\n  charLengthAt,\r\n  charLengthLeft,\r\n  commonPrefix,\r\n  kSubstringSearch,\r\n} = require('internal/readline/utils');\r\nlet emitKeypressEvents;\r\nlet kFirstEventParam;\r\nconst {\r\n  clearScreenDown,\r\n  cursorTo,\r\n  moveCursor,\r\n} = require('internal/readline/callbacks');\r\n\r\nconst { StringDecoder } = require('string_decoder');\r\n\r\nconst kHistorySize = 30;\r\nconst kMaxUndoRedoStackSize = 2048;\r\nconst kMincrlfDelay = 100;\r\n// \\r\\n, \\n, or \\r followed by something other than \\n\r\nconst lineEnding = /\\r?\\n|\\r(?!\\n)/g;\r\n\r\nconst kLineObjectStream = Symbol('line object stream');\r\nconst kQuestionCancel = Symbol('kQuestionCancel');\r\nconst kQuestion = Symbol('kQuestion');\r\n\r\n// GNU readline library - keyseq-timeout is 500ms (default)\r\nconst ESCAPE_CODE_TIMEOUT = 500;\r\n\r\n// Max length of the kill ring\r\nconst kMaxLengthOfKillRing = 32;\r\n\r\nconst kAddHistory = Symbol('_addHistory');\r\nconst kBeforeEdit = Symbol('_beforeEdit');\r\nconst kDecoder = Symbol('_decoder');\r\nconst kDeleteLeft = Symbol('_deleteLeft');\r\nconst kDeleteLineLeft = Symbol('_deleteLineLeft');\r\nconst kDeleteLineRight = Symbol('_deleteLineRight');\r\nconst kDeleteRight = Symbol('_deleteRight');\r\nconst kDeleteWordLeft = Symbol('_deleteWordLeft');\r\nconst kDeleteWordRight = Symbol('_deleteWordRight');\r\nconst kGetDisplayPos = Symbol('_getDisplayPos');\r\nconst kHistoryNext = Symbol('_historyNext');\r\nconst kHistoryPrev = Symbol('_historyPrev');\r\nconst kInsertString = Symbol('_insertString');\r\nconst kLine = Symbol('_line');\r\nconst kLine_buffer = Symbol('_line_buffer');\r\nconst kKillRing = Symbol('_killRing');\r\nconst kKillRingCursor = Symbol('_killRingCursor');\r\nconst kMoveCursor = Symbol('_moveCursor');\r\nconst kNormalWrite = Symbol('_normalWrite');\r\nconst kOldPrompt = Symbol('_oldPrompt');\r\nconst kOnLine = Symbol('_onLine');\r\nconst kPreviousKey = Symbol('_previousKey');\r\nconst kPrompt = Symbol('_prompt');\r\nconst kPushToKillRing = Symbol('_pushToKillRing');\r\nconst kPushToUndoStack = Symbol('_pushToUndoStack');\r\nconst kQuestionCallback = Symbol('_questionCallback');\r\nconst kRedo = Symbol('_redo');\r\nconst kRedoStack = Symbol('_redoStack');\r\nconst kRefreshLine = Symbol('_refreshLine');\r\nconst kSawKeyPress = Symbol('_sawKeyPress');\r\nconst kSawReturnAt = Symbol('_sawReturnAt');\r\nconst kSetRawMode = Symbol('_setRawMode');\r\nconst kTabComplete = Symbol('_tabComplete');\r\nconst kTabCompleter = Symbol('_tabCompleter');\r\nconst kTtyWrite = Symbol('_ttyWrite');\r\nconst kUndo = Symbol('_undo');\r\nconst kUndoStack = Symbol('_undoStack');\r\nconst kWordLeft = Symbol('_wordLeft');\r\nconst kWordRight = Symbol('_wordRight');\r\nconst kWriteToOutput = Symbol('_writeToOutput');\r\nconst kYank = Symbol('_yank');\r\nconst kYanking = Symbol('_yanking');\r\nconst kYankPop = Symbol('_yankPop');\r\n\r\nfunction InterfaceConstructor(input, output, completer, terminal) {\r\n  this[kSawReturnAt] = 0;\r\n  // TODO(BridgeAR): Document this property. The name is not ideal, so we\r\n  // might want to expose an alias and document that instead.\r\n  this.isCompletionEnabled = true;\r\n  this[kSawKeyPress] = false;\r\n  this[kPreviousKey] = null;\r\n  this.escapeCodeTimeout = ESCAPE_CODE_TIMEOUT;\r\n  this.tabSize = 8;\r\n\r\n  FunctionPrototypeCall(EventEmitter, this);\r\n\r\n  let history;\r\n  let historySize;\r\n  let removeHistoryDuplicates = false;\r\n  let crlfDelay;\r\n  let prompt = '> ';\r\n  let signal;\r\n\r\n  if (input?.input) {\r\n    // An options object was given\r\n    output = input.output;\r\n    completer = input.completer;\r\n    terminal = input.terminal;\r\n    history = input.history;\r\n    historySize = input.historySize;\r\n    signal = input.signal;\r\n    if (input.tabSize !== undefined) {\r\n      validateUint32(input.tabSize, 'tabSize', true);\r\n      this.tabSize = input.tabSize;\r\n    }\r\n    removeHistoryDuplicates = input.removeHistoryDuplicates;\r\n    if (input.prompt !== undefined) {\r\n      prompt = input.prompt;\r\n    }\r\n    if (input.escapeCodeTimeout !== undefined) {\r\n      if (NumberIsFinite(input.escapeCodeTimeout)) {\r\n        this.escapeCodeTimeout = input.escapeCodeTimeout;\r\n      } else {\r\n        throw new ERR_INVALID_ARG_VALUE(\r\n          'input.escapeCodeTimeout',\r\n          this.escapeCodeTimeout,\r\n        );\r\n      }\r\n    }\r\n\r\n    if (signal) {\r\n      validateAbortSignal(signal, 'options.signal');\r\n    }\r\n\r\n    crlfDelay = input.crlfDelay;\r\n    input = input.input;\r\n  }\r\n\r\n  if (completer !== undefined && typeof completer !== 'function') {\r\n    throw new ERR_INVALID_ARG_VALUE('completer', completer);\r\n  }\r\n\r\n  if (history === undefined) {\r\n    history = [];\r\n  } else {\r\n    validateArray(history, 'history');\r\n  }\r\n\r\n  if (historySize === undefined) {\r\n    historySize = kHistorySize;\r\n  }\r\n\r\n  validateNumber(historySize, 'historySize', 0);\r\n\r\n  // Backwards compat; check the isTTY prop of the output stream\r\n  //  when `terminal` was not specified\r\n  if (terminal === undefined && !(output === null || output === undefined)) {\r\n    terminal = !!output.isTTY;\r\n  }\r\n\r\n  const self = this;\r\n\r\n  this.line = '';\r\n  this[kSubstringSearch] = null;\r\n  this.output = output;\r\n  this.input = input;\r\n  this[kUndoStack] = [];\r\n  this[kRedoStack] = [];\r\n  this.history = history;\r\n  this.historySize = historySize;\r\n\r\n  // The kill ring is a global list of blocks of text that were previously\r\n  // killed (deleted). If its size exceeds kMaxLengthOfKillRing, the oldest\r\n  // element will be removed to make room for the latest deletion. With kill\r\n  // ring, users are able to recall (yank) or cycle (yank pop) among previously\r\n  // killed texts, quite similar to the behavior of Emacs.\r\n  this[kKillRing] = [];\r\n  this[kKillRingCursor] = 0;\r\n\r\n  this.removeHistoryDuplicates = !!removeHistoryDuplicates;\r\n  this.crlfDelay = crlfDelay ?\r\n    MathMax(kMincrlfDelay, crlfDelay) :\r\n    kMincrlfDelay;\r\n  this.completer = completer;\r\n\r\n  this.setPrompt(prompt);\r\n\r\n  this.terminal = !!terminal;\r\n\r\n\r\n  function onerror(err) {\r\n    self.emit('error', err);\r\n  }\r\n\r\n  function ondata(data) {\r\n    self[kNormalWrite](data);\r\n  }\r\n\r\n  function onend() {\r\n    if (\r\n      typeof self[kLine_buffer] === 'string' &&\r\n        self[kLine_buffer].length > 0\r\n    ) {\r\n      self.emit('line', self[kLine_buffer]);\r\n    }\r\n    self.close();\r\n  }\r\n\r\n  function ontermend() {\r\n    if (typeof self.line === 'string' && self.line.length > 0) {\r\n      self.emit('line', self.line);\r\n    }\r\n    self.close();\r\n  }\r\n\r\n  function onkeypress(s, key) {\r\n    self[kTtyWrite](s, key);\r\n    if (key && key.sequence) {\r\n      // If the key.sequence is half of a surrogate pair\r\n      // (>= 0xd800 and <= 0xdfff), refresh the line so\r\n      // the character is displayed appropriately.\r\n      const ch = StringPrototypeCodePointAt(key.sequence, 0);\r\n      if (ch >= 0xd800 && ch <= 0xdfff) self[kRefreshLine]();\r\n    }\r\n  }\r\n\r\n  function onresize() {\r\n    self[kRefreshLine]();\r\n  }\r\n\r\n  this[kLineObjectStream] = undefined;\r\n\r\n  input.on('error', onerror);\r\n\r\n  if (!this.terminal) {\r\n    function onSelfCloseWithoutTerminal() {\r\n      input.removeListener('data', ondata);\r\n      input.removeListener('error', onerror);\r\n      input.removeListener('end', onend);\r\n    }\r\n\r\n    input.on('data', ondata);\r\n    input.on('end', onend);\r\n    self.once('close', onSelfCloseWithoutTerminal);\r\n    this[kDecoder] = new StringDecoder('utf8');\r\n  } else {\r\n    function onSelfCloseWithTerminal() {\r\n      input.removeListener('keypress', onkeypress);\r\n      input.removeListener('error', onerror);\r\n      input.removeListener('end', ontermend);\r\n      if (output !== null && output !== undefined) {\r\n        output.removeListener('resize', onresize);\r\n      }\r\n    }\r\n\r\n    emitKeypressEvents ??= require('internal/readline/emitKeypressEvents');\r\n    emitKeypressEvents(input, this);\r\n\r\n    // `input` usually refers to stdin\r\n    input.on('keypress', onkeypress);\r\n    input.on('end', ontermend);\r\n\r\n    this[kSetRawMode](true);\r\n    this.terminal = true;\r\n\r\n    // Cursor position on the line.\r\n    this.cursor = 0;\r\n\r\n    this.historyIndex = -1;\r\n\r\n    if (output !== null && output !== undefined)\r\n      output.on('resize', onresize);\r\n\r\n    self.once('close', onSelfCloseWithTerminal);\r\n  }\r\n\r\n  if (signal) {\r\n    const onAborted = () => self.close();\r\n    if (signal.aborted) {\r\n      process.nextTick(onAborted);\r\n    } else {\r\n      const disposable = addAbortListener(signal, onAborted);\r\n      self.once('close', disposable[SymbolDispose]);\r\n    }\r\n  }\r\n\r\n  // Current line\r\n  this.line = '';\r\n\r\n  input.resume();\r\n}\r\n\r\nObjectSetPrototypeOf(InterfaceConstructor.prototype, EventEmitter.prototype);\r\nObjectSetPrototypeOf(InterfaceConstructor, EventEmitter);\r\n\r\nclass Interface extends InterfaceConstructor {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(input, output, completer, terminal) {\r\n    super(input, output, completer, terminal);\r\n  }\r\n  get columns() {\r\n    if (this.output && this.output.columns) return this.output.columns;\r\n    return Infinity;\r\n  }\r\n\r\n  /**\r\n   * Sets the prompt written to the output.\r\n   * @param {string} prompt\r\n   * @returns {void}\r\n   */\r\n  setPrompt(prompt) {\r\n    this[kPrompt] = prompt;\r\n  }\r\n\r\n  /**\r\n   * Returns the current prompt used by `rl.prompt()`.\r\n   * @returns {string}\r\n   */\r\n  getPrompt() {\r\n    return this[kPrompt];\r\n  }\r\n\r\n  [kSetRawMode](mode) {\r\n    const wasInRawMode = this.input.isRaw;\r\n\r\n    if (typeof this.input.setRawMode === 'function') {\r\n      this.input.setRawMode(mode);\r\n    }\r\n\r\n    return wasInRawMode;\r\n  }\r\n\r\n  /**\r\n   * Writes the configured `prompt` to a new line in `output`.\r\n   * @param {boolean} [preserveCursor]\r\n   * @returns {void}\r\n   */\r\n  prompt(preserveCursor) {\r\n    if (this.paused) this.resume();\r\n    if (this.terminal && process.env.TERM !== 'dumb') {\r\n      if (!preserveCursor) this.cursor = 0;\r\n      this[kRefreshLine]();\r\n    } else {\r\n      this[kWriteToOutput](this[kPrompt]);\r\n    }\r\n  }\r\n\r\n  [kQuestion](query, cb) {\r\n    if (this.closed) {\r\n      throw new ERR_USE_AFTER_CLOSE('readline');\r\n    }\r\n    if (this[kQuestionCallback]) {\r\n      this.prompt();\r\n    } else {\r\n      this[kOldPrompt] = this[kPrompt];\r\n      this.setPrompt(query);\r\n      this[kQuestionCallback] = cb;\r\n      this.prompt();\r\n    }\r\n  }\r\n\r\n  [kOnLine](line) {\r\n    if (this[kQuestionCallback]) {\r\n      const cb = this[kQuestionCallback];\r\n      this[kQuestionCallback] = null;\r\n      this.setPrompt(this[kOldPrompt]);\r\n      cb(line);\r\n    } else {\r\n      this.emit('line', line);\r\n    }\r\n  }\r\n\r\n  [kBeforeEdit](oldText, oldCursor) {\r\n    this[kPushToUndoStack](oldText, oldCursor);\r\n  }\r\n\r\n  [kQuestionCancel]() {\r\n    if (this[kQuestionCallback]) {\r\n      this[kQuestionCallback] = null;\r\n      this.setPrompt(this[kOldPrompt]);\r\n      this.clearLine();\r\n    }\r\n  }\r\n\r\n  [kWriteToOutput](stringToWrite) {\r\n    validateString(stringToWrite, 'stringToWrite');\r\n\r\n    if (this.output !== null && this.output !== undefined) {\r\n      this.output.write(stringToWrite);\r\n    }\r\n  }\r\n\r\n  [kAddHistory]() {\r\n    if (this.line.length === 0) return '';\r\n\r\n    // If the history is disabled then return the line\r\n    if (this.historySize === 0) return this.line;\r\n\r\n    // If the trimmed line is empty then return the line\r\n    if (StringPrototypeTrim(this.line).length === 0) return this.line;\r\n\r\n    if (this.history.length === 0 || this.history[0] !== this.line) {\r\n      if (this.removeHistoryDuplicates) {\r\n        // Remove older history line if identical to new one\r\n        const dupIndex = ArrayPrototypeIndexOf(this.history, this.line);\r\n        if (dupIndex !== -1) ArrayPrototypeSplice(this.history, dupIndex, 1);\r\n      }\r\n\r\n      ArrayPrototypeUnshift(this.history, this.line);\r\n\r\n      // Only store so many\r\n      if (this.history.length > this.historySize)\r\n        ArrayPrototypePop(this.history);\r\n    }\r\n\r\n    this.historyIndex = -1;\r\n\r\n    // The listener could change the history object, possibly\r\n    // to remove the last added entry if it is sensitive and should\r\n    // not be persisted in the history, like a password\r\n    const line = this.history[0];\r\n\r\n    // Emit history event to notify listeners of update\r\n    this.emit('history', this.history);\r\n\r\n    return line;\r\n  }\r\n\r\n  [kRefreshLine]() {\r\n    // line length\r\n    const line = this[kPrompt] + this.line;\r\n    const dispPos = this[kGetDisplayPos](line);\r\n    const lineCols = dispPos.cols;\r\n    const lineRows = dispPos.rows;\r\n\r\n    // cursor position\r\n    const cursorPos = this.getCursorPos();\r\n\r\n    // First move to the bottom of the current line, based on cursor pos\r\n    const prevRows = this.prevRows || 0;\r\n    if (prevRows > 0) {\r\n      moveCursor(this.output, 0, -prevRows);\r\n    }\r\n\r\n    // Cursor to left edge.\r\n    cursorTo(this.output, 0);\r\n    // erase data\r\n    clearScreenDown(this.output);\r\n\r\n    // Write the prompt and the current buffer content.\r\n    this[kWriteToOutput](line);\r\n\r\n    // Force terminal to allocate a new line\r\n    if (lineCols === 0) {\r\n      this[kWriteToOutput](' ');\r\n    }\r\n\r\n    // Move cursor to original position.\r\n    cursorTo(this.output, cursorPos.cols);\r\n\r\n    const diff = lineRows - cursorPos.rows;\r\n    if (diff > 0) {\r\n      moveCursor(this.output, 0, -diff);\r\n    }\r\n\r\n    this.prevRows = cursorPos.rows;\r\n  }\r\n\r\n  /**\r\n   * Closes the `readline.Interface` instance.\r\n   * @returns {void}\r\n   */\r\n  close() {\r\n    if (this.closed) return;\r\n    this.pause();\r\n    if (this.terminal) {\r\n      this[kSetRawMode](false);\r\n    }\r\n    this.closed = true;\r\n    this.emit('close');\r\n  }\r\n\r\n  /**\r\n   * Pauses the `input` stream.\r\n   * @returns {void | Interface}\r\n   */\r\n  pause() {\r\n    if (this.paused) return;\r\n    this.input.pause();\r\n    this.paused = true;\r\n    this.emit('pause');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Resumes the `input` stream if paused.\r\n   * @returns {void | Interface}\r\n   */\r\n  resume() {\r\n    if (!this.paused) return;\r\n    this.input.resume();\r\n    this.paused = false;\r\n    this.emit('resume');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Writes either `data` or a `key` sequence identified by\r\n   * `key` to the `output`.\r\n   * @param {string} d\r\n   * @param {{\r\n   *   ctrl?: boolean;\r\n   *   meta?: boolean;\r\n   *   shift?: boolean;\r\n   *   name?: string;\r\n   *   }} [key]\r\n   * @returns {void}\r\n   */\r\n  write(d, key) {\r\n    if (this.paused) this.resume();\r\n    if (this.terminal) {\r\n      this[kTtyWrite](d, key);\r\n    } else {\r\n      this[kNormalWrite](d);\r\n    }\r\n  }\r\n\r\n  [kNormalWrite](b) {\r\n    if (b === undefined) {\r\n      return;\r\n    }\r\n    let string = this[kDecoder].write(b);\r\n    if (\r\n      this[kSawReturnAt] &&\r\n      DateNow() - this[kSawReturnAt] <= this.crlfDelay\r\n    ) {\r\n      if (StringPrototypeCodePointAt(string) === 10) string = StringPrototypeSlice(string, 1);\r\n      this[kSawReturnAt] = 0;\r\n    }\r\n\r\n    // Run test() on the new string chunk, not on the entire line buffer.\r\n    let newPartContainsEnding = RegExpPrototypeExec(lineEnding, string);\r\n    if (newPartContainsEnding !== null) {\r\n      if (this[kLine_buffer]) {\r\n        string = this[kLine_buffer] + string;\r\n        this[kLine_buffer] = null;\r\n        lineEnding.lastIndex = 0; // Start the search from the beginning of the string.\r\n        newPartContainsEnding = RegExpPrototypeExec(lineEnding, string);\r\n      }\r\n      this[kSawReturnAt] = StringPrototypeEndsWith(string, '\\r') ?\r\n        DateNow() :\r\n        0;\r\n\r\n      const indexes = [0, newPartContainsEnding.index, lineEnding.lastIndex];\r\n      let nextMatch;\r\n      while ((nextMatch = RegExpPrototypeExec(lineEnding, string)) !== null) {\r\n        ArrayPrototypePush(indexes, nextMatch.index, lineEnding.lastIndex);\r\n      }\r\n      const lastIndex = indexes.length - 1;\r\n      // Either '' or (conceivably) the unfinished portion of the next line\r\n      this[kLine_buffer] = StringPrototypeSlice(string, indexes[lastIndex]);\r\n      for (let i = 1; i < lastIndex; i += 2) {\r\n        this[kOnLine](StringPrototypeSlice(string, indexes[i - 1], indexes[i]));\r\n      }\r\n    } else if (string) {\r\n      // No newlines this time, save what we have for next time\r\n      if (this[kLine_buffer]) {\r\n        this[kLine_buffer] += string;\r\n      } else {\r\n        this[kLine_buffer] = string;\r\n      }\r\n    }\r\n  }\r\n\r\n  [kInsertString](c) {\r\n    this[kBeforeEdit](this.line, this.cursor);\r\n    if (this.cursor < this.line.length) {\r\n      const beg = StringPrototypeSlice(this.line, 0, this.cursor);\r\n      const end = StringPrototypeSlice(\r\n        this.line,\r\n        this.cursor,\r\n        this.line.length,\r\n      );\r\n      this.line = beg + c + end;\r\n      this.cursor += c.length;\r\n      this[kRefreshLine]();\r\n    } else {\r\n      const oldPos = this.getCursorPos();\r\n      this.line += c;\r\n      this.cursor += c.length;\r\n      const newPos = this.getCursorPos();\r\n\r\n      if (oldPos.rows < newPos.rows) {\r\n        this[kRefreshLine]();\r\n      } else {\r\n        this[kWriteToOutput](c);\r\n      }\r\n    }\r\n  }\r\n\r\n  async [kTabComplete](lastKeypressWasTab) {\r\n    this.pause();\r\n    const string = StringPrototypeSlice(this.line, 0, this.cursor);\r\n    let value;\r\n    try {\r\n      value = await this.completer(string);\r\n    } catch (err) {\r\n      this[kWriteToOutput](`Tab completion error: ${inspect(err)}`);\r\n      return;\r\n    } finally {\r\n      this.resume();\r\n    }\r\n    this[kTabCompleter](lastKeypressWasTab, value);\r\n  }\r\n\r\n  [kTabCompleter](lastKeypressWasTab, { 0: completions, 1: completeOn }) {\r\n    // Result and the text that was completed.\r\n\r\n    if (!completions || completions.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // If there is a common prefix to all matches, then apply that portion.\r\n    const prefix = commonPrefix(\r\n      ArrayPrototypeFilter(completions, (e) => e !== ''),\r\n    );\r\n    if (StringPrototypeStartsWith(prefix, completeOn) &&\r\n        prefix.length > completeOn.length) {\r\n      this[kInsertString](StringPrototypeSlice(prefix, completeOn.length));\r\n      return;\r\n    } else if (!StringPrototypeStartsWith(completeOn, prefix)) {\r\n      this.line = StringPrototypeSlice(this.line,\r\n                                       0,\r\n                                       this.cursor - completeOn.length) +\r\n                  prefix +\r\n                  StringPrototypeSlice(this.line,\r\n                                       this.cursor,\r\n                                       this.line.length);\r\n      this.cursor = this.cursor - completeOn.length + prefix.length;\r\n      this[kRefreshLine]();\r\n      return;\r\n    }\r\n\r\n    if (!lastKeypressWasTab) {\r\n      return;\r\n    }\r\n\r\n    this[kBeforeEdit](this.line, this.cursor);\r\n\r\n    // Apply/show completions.\r\n    const completionsWidth = ArrayPrototypeMap(completions, (e) =>\r\n      getStringWidth(e),\r\n    );\r\n    const width = MathMaxApply(completionsWidth) + 2; // 2 space padding\r\n    let maxColumns = MathFloor(this.columns / width) || 1;\r\n    if (maxColumns === Infinity) {\r\n      maxColumns = 1;\r\n    }\r\n    let output = '\\r\\n';\r\n    let lineIndex = 0;\r\n    let whitespace = 0;\r\n    for (let i = 0; i < completions.length; i++) {\r\n      const completion = completions[i];\r\n      if (completion === '' || lineIndex === maxColumns) {\r\n        output += '\\r\\n';\r\n        lineIndex = 0;\r\n        whitespace = 0;\r\n      } else {\r\n        output += StringPrototypeRepeat(' ', whitespace);\r\n      }\r\n      if (completion !== '') {\r\n        output += completion;\r\n        whitespace = width - completionsWidth[i];\r\n        lineIndex++;\r\n      } else {\r\n        output += '\\r\\n';\r\n      }\r\n    }\r\n    if (lineIndex !== 0) {\r\n      output += '\\r\\n\\r\\n';\r\n    }\r\n    this[kWriteToOutput](output);\r\n    this[kRefreshLine]();\r\n  }\r\n\r\n  [kWordLeft]() {\r\n    if (this.cursor > 0) {\r\n      // Reverse the string and match a word near beginning\r\n      // to avoid quadratic time complexity\r\n      const leading = StringPrototypeSlice(this.line, 0, this.cursor);\r\n      const reversed = ArrayPrototypeJoin(\r\n        ArrayPrototypeReverse(ArrayFrom(leading)),\r\n        '',\r\n      );\r\n      const match = RegExpPrototypeExec(/^\\s*(?:[^\\w\\s]+|\\w+)?/, reversed);\r\n      this[kMoveCursor](-match[0].length);\r\n    }\r\n  }\r\n\r\n  [kWordRight]() {\r\n    if (this.cursor < this.line.length) {\r\n      const trailing = StringPrototypeSlice(this.line, this.cursor);\r\n      const match = RegExpPrototypeExec(/^(?:\\s+|[^\\w\\s]+|\\w+)\\s*/, trailing);\r\n      this[kMoveCursor](match[0].length);\r\n    }\r\n  }\r\n\r\n  [kDeleteLeft]() {\r\n    if (this.cursor > 0 && this.line.length > 0) {\r\n      this[kBeforeEdit](this.line, this.cursor);\r\n      // The number of UTF-16 units comprising the character to the left\r\n      const charSize = charLengthLeft(this.line, this.cursor);\r\n      this.line =\r\n        StringPrototypeSlice(this.line, 0, this.cursor - charSize) +\r\n        StringPrototypeSlice(this.line, this.cursor, this.line.length);\r\n\r\n      this.cursor -= charSize;\r\n      this[kRefreshLine]();\r\n    }\r\n  }\r\n\r\n  [kDeleteRight]() {\r\n    if (this.cursor < this.line.length) {\r\n      this[kBeforeEdit](this.line, this.cursor);\r\n      // The number of UTF-16 units comprising the character to the left\r\n      const charSize = charLengthAt(this.line, this.cursor);\r\n      this.line =\r\n        StringPrototypeSlice(this.line, 0, this.cursor) +\r\n        StringPrototypeSlice(\r\n          this.line,\r\n          this.cursor + charSize,\r\n          this.line.length,\r\n        );\r\n      this[kRefreshLine]();\r\n    }\r\n  }\r\n\r\n  [kDeleteWordLeft]() {\r\n    if (this.cursor > 0) {\r\n      this[kBeforeEdit](this.line, this.cursor);\r\n      // Reverse the string and match a word near beginning\r\n      // to avoid quadratic time complexity\r\n      let leading = StringPrototypeSlice(this.line, 0, this.cursor);\r\n      const reversed = ArrayPrototypeJoin(\r\n        ArrayPrototypeReverse(ArrayFrom(leading)),\r\n        '',\r\n      );\r\n      const match = RegExpPrototypeExec(/^\\s*(?:[^\\w\\s]+|\\w+)?/, reversed);\r\n      leading = StringPrototypeSlice(\r\n        leading,\r\n        0,\r\n        leading.length - match[0].length,\r\n      );\r\n      this.line =\r\n        leading +\r\n        StringPrototypeSlice(this.line, this.cursor, this.line.length);\r\n      this.cursor = leading.length;\r\n      this[kRefreshLine]();\r\n    }\r\n  }\r\n\r\n  [kDeleteWordRight]() {\r\n    if (this.cursor < this.line.length) {\r\n      this[kBeforeEdit](this.line, this.cursor);\r\n      const trailing = StringPrototypeSlice(this.line, this.cursor);\r\n      const match = RegExpPrototypeExec(/^(?:\\s+|\\W+|\\w+)\\s*/, trailing);\r\n      this.line =\r\n        StringPrototypeSlice(this.line, 0, this.cursor) +\r\n        StringPrototypeSlice(trailing, match[0].length);\r\n      this[kRefreshLine]();\r\n    }\r\n  }\r\n\r\n  [kDeleteLineLeft]() {\r\n    this[kBeforeEdit](this.line, this.cursor);\r\n    const del = StringPrototypeSlice(this.line, 0, this.cursor);\r\n    this.line = StringPrototypeSlice(this.line, this.cursor);\r\n    this.cursor = 0;\r\n    this[kPushToKillRing](del);\r\n    this[kRefreshLine]();\r\n  }\r\n\r\n  [kDeleteLineRight]() {\r\n    this[kBeforeEdit](this.line, this.cursor);\r\n    const del = StringPrototypeSlice(this.line, this.cursor);\r\n    this.line = StringPrototypeSlice(this.line, 0, this.cursor);\r\n    this[kPushToKillRing](del);\r\n    this[kRefreshLine]();\r\n  }\r\n\r\n  [kPushToKillRing](del) {\r\n    if (!del || del === this[kKillRing][0]) return;\r\n    ArrayPrototypeUnshift(this[kKillRing], del);\r\n    this[kKillRingCursor] = 0;\r\n    while (this[kKillRing].length > kMaxLengthOfKillRing)\r\n      ArrayPrototypePop(this[kKillRing]);\r\n  }\r\n\r\n  [kYank]() {\r\n    if (this[kKillRing].length > 0) {\r\n      this[kYanking] = true;\r\n      this[kInsertString](this[kKillRing][this[kKillRingCursor]]);\r\n    }\r\n  }\r\n\r\n  [kYankPop]() {\r\n    if (!this[kYanking]) {\r\n      return;\r\n    }\r\n    if (this[kKillRing].length > 1) {\r\n      const lastYank = this[kKillRing][this[kKillRingCursor]];\r\n      this[kKillRingCursor]++;\r\n      if (this[kKillRingCursor] >= this[kKillRing].length) {\r\n        this[kKillRingCursor] = 0;\r\n      }\r\n      const currentYank = this[kKillRing][this[kKillRingCursor]];\r\n      const head =\r\n            StringPrototypeSlice(this.line, 0, this.cursor - lastYank.length);\r\n      const tail =\r\n            StringPrototypeSlice(this.line, this.cursor);\r\n      this.line = head + currentYank + tail;\r\n      this.cursor = head.length + currentYank.length;\r\n      this[kRefreshLine]();\r\n    }\r\n  }\r\n\r\n  clearLine() {\r\n    this[kMoveCursor](+Infinity);\r\n    this[kWriteToOutput]('\\r\\n');\r\n    this.line = '';\r\n    this.cursor = 0;\r\n    this.prevRows = 0;\r\n  }\r\n\r\n  [kLine]() {\r\n    const line = this[kAddHistory]();\r\n    this[kUndoStack] = [];\r\n    this[kRedoStack] = [];\r\n    this.clearLine();\r\n    this[kOnLine](line);\r\n  }\r\n\r\n  [kPushToUndoStack](text, cursor) {\r\n    if (ArrayPrototypePush(this[kUndoStack], { text, cursor }) >\r\n        kMaxUndoRedoStackSize) {\r\n      ArrayPrototypeShift(this[kUndoStack]);\r\n    }\r\n  }\r\n\r\n  [kUndo]() {\r\n    if (this[kUndoStack].length <= 0) return;\r\n\r\n    ArrayPrototypePush(\r\n      this[kRedoStack],\r\n      { text: this.line, cursor: this.cursor },\r\n    );\r\n\r\n    const entry = ArrayPrototypePop(this[kUndoStack]);\r\n    this.line = entry.text;\r\n    this.cursor = entry.cursor;\r\n\r\n    this[kRefreshLine]();\r\n  }\r\n\r\n  [kRedo]() {\r\n    if (this[kRedoStack].length <= 0) return;\r\n\r\n    ArrayPrototypePush(\r\n      this[kUndoStack],\r\n      { text: this.line, cursor: this.cursor },\r\n    );\r\n\r\n    const entry = ArrayPrototypePop(this[kRedoStack]);\r\n    this.line = entry.text;\r\n    this.cursor = entry.cursor;\r\n\r\n    this[kRefreshLine]();\r\n  }\r\n\r\n  // TODO(BridgeAR): Add underscores to the search part and a red background in\r\n  // case no match is found. This should only be the visual part and not the\r\n  // actual line content!\r\n  // TODO(BridgeAR): In case the substring based search is active and the end is\r\n  // reached, show a comment how to search the history as before. E.g., using\r\n  // <ctrl> + N. Only show this after two/three UPs or DOWNs, not on the first\r\n  // one.\r\n  [kHistoryNext]() {\r\n    if (this.historyIndex >= 0) {\r\n      this[kBeforeEdit](this.line, this.cursor);\r\n      const search = this[kSubstringSearch] || '';\r\n      let index = this.historyIndex - 1;\r\n      while (\r\n        index >= 0 &&\r\n        (!StringPrototypeStartsWith(this.history[index], search) ||\r\n          this.line === this.history[index])\r\n      ) {\r\n        index--;\r\n      }\r\n      if (index === -1) {\r\n        this.line = search;\r\n      } else {\r\n        this.line = this.history[index];\r\n      }\r\n      this.historyIndex = index;\r\n      this.cursor = this.line.length; // Set cursor to end of line.\r\n      this[kRefreshLine]();\r\n    }\r\n  }\r\n\r\n  [kHistoryPrev]() {\r\n    if (this.historyIndex < this.history.length && this.history.length) {\r\n      this[kBeforeEdit](this.line, this.cursor);\r\n      const search = this[kSubstringSearch] || '';\r\n      let index = this.historyIndex + 1;\r\n      while (\r\n        index < this.history.length &&\r\n        (!StringPrototypeStartsWith(this.history[index], search) ||\r\n          this.line === this.history[index])\r\n      ) {\r\n        index++;\r\n      }\r\n      if (index === this.history.length) {\r\n        this.line = search;\r\n      } else {\r\n        this.line = this.history[index];\r\n      }\r\n      this.historyIndex = index;\r\n      this.cursor = this.line.length; // Set cursor to end of line.\r\n      this[kRefreshLine]();\r\n    }\r\n  }\r\n\r\n  // Returns the last character's display position of the given string\r\n  [kGetDisplayPos](str) {\r\n    let offset = 0;\r\n    const col = this.columns;\r\n    let rows = 0;\r\n    str = stripVTControlCharacters(str);\r\n    for (const char of new SafeStringIterator(str)) {\r\n      if (char === '\\n') {\r\n        // Rows must be incremented by 1 even if offset = 0 or col = +Infinity.\r\n        rows += MathCeil(offset / col) || 1;\r\n        offset = 0;\r\n        continue;\r\n      }\r\n      // Tabs must be aligned by an offset of the tab size.\r\n      if (char === '\\t') {\r\n        offset += this.tabSize - (offset % this.tabSize);\r\n        continue;\r\n      }\r\n      const width = getStringWidth(char, false /* stripVTControlCharacters */);\r\n      if (width === 0 || width === 1) {\r\n        offset += width;\r\n      } else {\r\n        // width === 2\r\n        if ((offset + 1) % col === 0) {\r\n          offset++;\r\n        }\r\n        offset += 2;\r\n      }\r\n    }\r\n    const cols = offset % col;\r\n    rows += (offset - cols) / col;\r\n    return { cols, rows };\r\n  }\r\n\r\n  /**\r\n   * Returns the real position of the cursor in relation\r\n   * to the input prompt + string.\r\n   * @returns {{\r\n   *   rows: number;\r\n   *   cols: number;\r\n   *   }}\r\n   */\r\n  getCursorPos() {\r\n    const strBeforeCursor =\r\n      this[kPrompt] + StringPrototypeSlice(this.line, 0, this.cursor);\r\n    return this[kGetDisplayPos](strBeforeCursor);\r\n  }\r\n\r\n  // This function moves cursor dx places to the right\r\n  // (-dx for left) and refreshes the line if it is needed.\r\n  [kMoveCursor](dx) {\r\n    if (dx === 0) {\r\n      return;\r\n    }\r\n    const oldPos = this.getCursorPos();\r\n    this.cursor += dx;\r\n\r\n    // Bounds check\r\n    if (this.cursor < 0) {\r\n      this.cursor = 0;\r\n    } else if (this.cursor > this.line.length) {\r\n      this.cursor = this.line.length;\r\n    }\r\n\r\n    const newPos = this.getCursorPos();\r\n\r\n    // Check if cursor stayed on the line.\r\n    if (oldPos.rows === newPos.rows) {\r\n      const diffWidth = newPos.cols - oldPos.cols;\r\n      moveCursor(this.output, diffWidth, 0);\r\n    } else {\r\n      this[kRefreshLine]();\r\n    }\r\n  }\r\n\r\n  // Handle a write from the tty\r\n  [kTtyWrite](s, key) {\r\n    const previousKey = this[kPreviousKey];\r\n    key = key || kEmptyObject;\r\n    this[kPreviousKey] = key;\r\n\r\n    if (!key.meta || key.name !== 'y') {\r\n      // Reset yanking state unless we are doing yank pop.\r\n      this[kYanking] = false;\r\n    }\r\n\r\n    // Activate or deactivate substring search.\r\n    if (\r\n      (key.name === 'up' || key.name === 'down') &&\r\n      !key.ctrl &&\r\n      !key.meta &&\r\n      !key.shift\r\n    ) {\r\n      if (this[kSubstringSearch] === null) {\r\n        this[kSubstringSearch] = StringPrototypeSlice(\r\n          this.line,\r\n          0,\r\n          this.cursor,\r\n        );\r\n      }\r\n    } else if (this[kSubstringSearch] !== null) {\r\n      this[kSubstringSearch] = null;\r\n      // Reset the index in case there's no match.\r\n      if (this.history.length === this.historyIndex) {\r\n        this.historyIndex = -1;\r\n      }\r\n    }\r\n\r\n    // Undo & Redo\r\n    if (typeof key.sequence === 'string') {\r\n      switch (StringPrototypeCodePointAt(key.sequence, 0)) {\r\n        case 0x1f:\r\n          this[kUndo]();\r\n          return;\r\n        case 0x1e:\r\n          this[kRedo]();\r\n          return;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Ignore escape key, fixes\r\n    // https://github.com/nodejs/node-v0.x-archive/issues/2876.\r\n    if (key.name === 'escape') return;\r\n\r\n    if (key.ctrl && key.shift) {\r\n      /* Control and shift pressed */\r\n      switch (key.name) {\r\n        // TODO(BridgeAR): The transmitted escape sequence is `\\b` and that is\r\n        // identical to <ctrl>-h. It should have a unique escape sequence.\r\n        case 'backspace':\r\n          this[kDeleteLineLeft]();\r\n          break;\r\n\r\n        case 'delete':\r\n          this[kDeleteLineRight]();\r\n          break;\r\n      }\r\n    } else if (key.ctrl) {\r\n      /* Control key pressed */\r\n\r\n      switch (key.name) {\r\n        case 'c':\r\n          if (this.listenerCount('SIGINT') > 0) {\r\n            this.emit('SIGINT');\r\n          } else {\r\n            // This readline instance is finished\r\n            this.close();\r\n          }\r\n          break;\r\n\r\n        case 'h': // delete left\r\n          this[kDeleteLeft]();\r\n          break;\r\n\r\n        case 'd': // delete right or EOF\r\n          if (this.cursor === 0 && this.line.length === 0) {\r\n            // This readline instance is finished\r\n            this.close();\r\n          } else if (this.cursor < this.line.length) {\r\n            this[kDeleteRight]();\r\n          }\r\n          break;\r\n\r\n        case 'u': // Delete from current to start of line\r\n          this[kDeleteLineLeft]();\r\n          break;\r\n\r\n        case 'k': // Delete from current to end of line\r\n          this[kDeleteLineRight]();\r\n          break;\r\n\r\n        case 'a': // Go to the start of the line\r\n          this[kMoveCursor](-Infinity);\r\n          break;\r\n\r\n        case 'e': // Go to the end of the line\r\n          this[kMoveCursor](+Infinity);\r\n          break;\r\n\r\n        case 'b': // back one character\r\n          this[kMoveCursor](-charLengthLeft(this.line, this.cursor));\r\n          break;\r\n\r\n        case 'f': // Forward one character\r\n          this[kMoveCursor](+charLengthAt(this.line, this.cursor));\r\n          break;\r\n\r\n        case 'l': // Clear the whole screen\r\n          cursorTo(this.output, 0, 0);\r\n          clearScreenDown(this.output);\r\n          this[kRefreshLine]();\r\n          break;\r\n\r\n        case 'n': // next history item\r\n          this[kHistoryNext]();\r\n          break;\r\n\r\n        case 'p': // Previous history item\r\n          this[kHistoryPrev]();\r\n          break;\r\n\r\n        case 'y': // Yank killed string\r\n          this[kYank]();\r\n          break;\r\n\r\n        case 'z':\r\n          if (process.platform === 'win32') break;\r\n          if (this.listenerCount('SIGTSTP') > 0) {\r\n            this.emit('SIGTSTP');\r\n          } else {\r\n            process.once('SIGCONT', () => {\r\n              // Don't raise events if stream has already been abandoned.\r\n              if (!this.paused) {\r\n                // Stream must be paused and resumed after SIGCONT to catch\r\n                // SIGINT, SIGTSTP, and EOF.\r\n                this.pause();\r\n                this.emit('SIGCONT');\r\n              }\r\n              // Explicitly re-enable \"raw mode\" and move the cursor to\r\n              // the correct position.\r\n              // See https://github.com/joyent/node/issues/3295.\r\n              this[kSetRawMode](true);\r\n              this[kRefreshLine]();\r\n            });\r\n            this[kSetRawMode](false);\r\n            process.kill(process.pid, 'SIGTSTP');\r\n          }\r\n          break;\r\n\r\n        case 'w': // Delete backwards to a word boundary\r\n        // TODO(BridgeAR): The transmitted escape sequence is `\\b` and that is\r\n        // identical to <ctrl>-h. It should have a unique escape sequence.\r\n        // Falls through\r\n        case 'backspace':\r\n          this[kDeleteWordLeft]();\r\n          break;\r\n\r\n        case 'delete': // Delete forward to a word boundary\r\n          this[kDeleteWordRight]();\r\n          break;\r\n\r\n        case 'left':\r\n          this[kWordLeft]();\r\n          break;\r\n\r\n        case 'right':\r\n          this[kWordRight]();\r\n          break;\r\n      }\r\n    } else if (key.meta) {\r\n      /* Meta key pressed */\r\n\r\n      switch (key.name) {\r\n        case 'b': // backward word\r\n          this[kWordLeft]();\r\n          break;\r\n\r\n        case 'f': // forward word\r\n          this[kWordRight]();\r\n          break;\r\n\r\n        case 'd': // delete forward word\r\n        case 'delete':\r\n          this[kDeleteWordRight]();\r\n          break;\r\n\r\n        case 'backspace': // Delete backwards to a word boundary\r\n          this[kDeleteWordLeft]();\r\n          break;\r\n\r\n        case 'y': // Doing yank pop\r\n          this[kYankPop]();\r\n          break;\r\n      }\r\n    } else {\r\n      /* No modifier keys used */\r\n\r\n      // \\r bookkeeping is only relevant if a \\n comes right after.\r\n      if (this[kSawReturnAt] && key.name !== 'enter') this[kSawReturnAt] = 0;\r\n\r\n      switch (key.name) {\r\n        case 'return': // Carriage return, i.e. \\r\r\n          this[kSawReturnAt] = DateNow();\r\n          this[kLine]();\r\n          break;\r\n\r\n        case 'enter':\r\n          // When key interval > crlfDelay\r\n          if (\r\n            this[kSawReturnAt] === 0 ||\r\n            DateNow() - this[kSawReturnAt] > this.crlfDelay\r\n          ) {\r\n            this[kLine]();\r\n          }\r\n          this[kSawReturnAt] = 0;\r\n          break;\r\n\r\n        case 'backspace':\r\n          this[kDeleteLeft]();\r\n          break;\r\n\r\n        case 'delete':\r\n          this[kDeleteRight]();\r\n          break;\r\n\r\n        case 'left':\r\n          // Obtain the code point to the left\r\n          this[kMoveCursor](-charLengthLeft(this.line, this.cursor));\r\n          break;\r\n\r\n        case 'right':\r\n          this[kMoveCursor](+charLengthAt(this.line, this.cursor));\r\n          break;\r\n\r\n        case 'home':\r\n          this[kMoveCursor](-Infinity);\r\n          break;\r\n\r\n        case 'end':\r\n          this[kMoveCursor](+Infinity);\r\n          break;\r\n\r\n        case 'up':\r\n          this[kHistoryPrev]();\r\n          break;\r\n\r\n        case 'down':\r\n          this[kHistoryNext]();\r\n          break;\r\n\r\n        case 'tab':\r\n          // If tab completion enabled, do that...\r\n          if (\r\n            typeof this.completer === 'function' &&\r\n            this.isCompletionEnabled\r\n          ) {\r\n            const lastKeypressWasTab =\r\n              previousKey && previousKey.name === 'tab';\r\n            this[kTabComplete](lastKeypressWasTab);\r\n            break;\r\n          }\r\n        // falls through\r\n        default:\r\n          if (typeof s === 'string' && s) {\r\n            // Erase state of previous searches.\r\n            lineEnding.lastIndex = 0;\r\n            let nextMatch;\r\n            // Keep track of the end of the last match.\r\n            let lastIndex = 0;\r\n            while ((nextMatch = RegExpPrototypeExec(lineEnding, s)) !== null) {\r\n              this[kInsertString](StringPrototypeSlice(s, lastIndex, nextMatch.index));\r\n              ({ lastIndex } = lineEnding);\r\n              this[kLine]();\r\n              // Restore lastIndex as the call to kLine could have mutated it.\r\n              lineEnding.lastIndex = lastIndex;\r\n            }\r\n            // This ensures that the last line is written if it doesn't end in a newline.\r\n            // Note that the last line may be the first line, in which case this still works.\r\n            this[kInsertString](StringPrototypeSlice(s, lastIndex));\r\n          }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates an `AsyncIterator` object that iterates through\r\n   * each line in the input stream as a string.\r\n   * @typedef {{\r\n   *   [Symbol.asyncIterator]: () => InterfaceAsyncIterator,\r\n   *   next: () => Promise<string>\r\n   * }} InterfaceAsyncIterator\r\n   * @returns {InterfaceAsyncIterator}\r\n   */\r\n  [SymbolAsyncIterator]() {\r\n    if (this[kLineObjectStream] === undefined) {\r\n      kFirstEventParam ??= require('internal/events/symbols').kFirstEventParam;\r\n      this[kLineObjectStream] = EventEmitter.on(\r\n        this, 'line', {\r\n          close: ['close'],\r\n          highWaterMark: 1024,\r\n          [kFirstEventParam]: true,\r\n        });\r\n    }\r\n    return this[kLineObjectStream];\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  Interface,\r\n  InterfaceConstructor,\r\n  kAddHistory,\r\n  kDecoder,\r\n  kDeleteLeft,\r\n  kDeleteLineLeft,\r\n  kDeleteLineRight,\r\n  kDeleteRight,\r\n  kDeleteWordLeft,\r\n  kDeleteWordRight,\r\n  kGetDisplayPos,\r\n  kHistoryNext,\r\n  kHistoryPrev,\r\n  kInsertString,\r\n  kLine,\r\n  kLine_buffer,\r\n  kMoveCursor,\r\n  kNormalWrite,\r\n  kOldPrompt,\r\n  kOnLine,\r\n  kPreviousKey,\r\n  kPrompt,\r\n  kQuestion,\r\n  kQuestionCallback,\r\n  kQuestionCancel,\r\n  kRefreshLine,\r\n  kSawKeyPress,\r\n  kSawReturnAt,\r\n  kSetRawMode,\r\n  kTabComplete,\r\n  kTabCompleter,\r\n  kTtyWrite,\r\n  kWordLeft,\r\n  kWordRight,\r\n  kWriteToOutput,\r\n};\r\n"
  },
  "168": {
    "metadata": {
      "scriptId": "168",
      "url": "node:internal/readline/utils",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 406,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "fbaf7b8fab6a33b9a788f8bada34de295dc9dac5c8d36190c2aeeae445b0b8e1",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 12802,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/readline/utils"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSort,\r\n  RegExpPrototypeExec,\r\n  StringFromCharCode,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeCodePointAt,\r\n  StringPrototypeSlice,\r\n  StringPrototypeToLowerCase,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst kUTF16SurrogateThreshold = 0x10000; // 2 ** 16\r\nconst kEscape = '\\x1b';\r\nconst kSubstringSearch = Symbol('kSubstringSearch');\r\n\r\nfunction CSI(strings, ...args) {\r\n  let ret = `${kEscape}[`;\r\n  for (let n = 0; n < strings.length; n++) {\r\n    ret += strings[n];\r\n    if (n < args.length)\r\n      ret += args[n];\r\n  }\r\n  return ret;\r\n}\r\n\r\nCSI.kEscape = kEscape;\r\nCSI.kClearToLineBeginning = CSI`1K`;\r\nCSI.kClearToLineEnd = CSI`0K`;\r\nCSI.kClearLine = CSI`2K`;\r\nCSI.kClearScreenDown = CSI`0J`;\r\n\r\n// TODO(BridgeAR): Treat combined characters as single character, i.e,\r\n// 'a\\u0301' and '\\u0301a' (both have the same visual output).\r\n// Check Canonical_Combining_Class in\r\n// http://userguide.icu-project.org/strings/properties\r\nfunction charLengthLeft(str, i) {\r\n  if (i <= 0)\r\n    return 0;\r\n  if ((i > 1 &&\r\n      StringPrototypeCodePointAt(str, i - 2) >= kUTF16SurrogateThreshold) ||\r\n      StringPrototypeCodePointAt(str, i - 1) >= kUTF16SurrogateThreshold) {\r\n    return 2;\r\n  }\r\n  return 1;\r\n}\r\n\r\nfunction charLengthAt(str, i) {\r\n  if (str.length <= i) {\r\n    // Pretend to move to the right. This is necessary to autocomplete while\r\n    // moving to the right.\r\n    return 1;\r\n  }\r\n  return StringPrototypeCodePointAt(str, i) >= kUTF16SurrogateThreshold ? 2 : 1;\r\n}\r\n\r\n/*\r\n  Some patterns seen in terminal key escape codes, derived from combos seen\r\n  at http://www.midnight-commander.org/browser/lib/tty/key.c\r\n\r\n  ESC letter\r\n  ESC [ letter\r\n  ESC [ modifier letter\r\n  ESC [ 1 ; modifier letter\r\n  ESC [ num char\r\n  ESC [ num ; modifier char\r\n  ESC O letter\r\n  ESC O modifier letter\r\n  ESC O 1 ; modifier letter\r\n  ESC N letter\r\n  ESC [ [ num ; modifier char\r\n  ESC [ [ 1 ; modifier letter\r\n  ESC ESC [ num char\r\n  ESC ESC O letter\r\n\r\n  - char is usually ~ but $ and ^ also happen with rxvt\r\n  - modifier is 1 +\r\n                (shift     * 1) +\r\n                (left_alt  * 2) +\r\n                (ctrl      * 4) +\r\n                (right_alt * 8)\r\n  - two leading ESCs apparently mean the same as one leading ESC\r\n*/\r\nfunction* emitKeys(stream) {\r\n  while (true) {\r\n    let ch = yield;\r\n    let s = ch;\r\n    let escaped = false;\r\n    const key = {\r\n      sequence: null,\r\n      name: undefined,\r\n      ctrl: false,\r\n      meta: false,\r\n      shift: false,\r\n    };\r\n\r\n    if (ch === kEscape) {\r\n      escaped = true;\r\n      s += (ch = yield);\r\n\r\n      if (ch === kEscape) {\r\n        s += (ch = yield);\r\n      }\r\n    }\r\n\r\n    if (escaped && (ch === 'O' || ch === '[')) {\r\n      // ANSI escape sequence\r\n      let code = ch;\r\n      let modifier = 0;\r\n\r\n      if (ch === 'O') {\r\n        // ESC O letter\r\n        // ESC O modifier letter\r\n        s += (ch = yield);\r\n\r\n        if (ch >= '0' && ch <= '9') {\r\n          modifier = (ch >> 0) - 1;\r\n          s += (ch = yield);\r\n        }\r\n\r\n        code += ch;\r\n      } else if (ch === '[') {\r\n        // ESC [ letter\r\n        // ESC [ modifier letter\r\n        // ESC [ [ modifier letter\r\n        // ESC [ [ num char\r\n        s += (ch = yield);\r\n\r\n        if (ch === '[') {\r\n          // \\x1b[[A\r\n          //      ^--- escape codes might have a second bracket\r\n          code += ch;\r\n          s += (ch = yield);\r\n        }\r\n\r\n        /*\r\n         * Here and later we try to buffer just enough data to get\r\n         * a complete ascii sequence.\r\n         *\r\n         * We have basically two classes of ascii characters to process:\r\n         *\r\n         *\r\n         * 1. `\\x1b[24;5~` should be parsed as { code: '[24~', modifier: 5 }\r\n         *\r\n         * This particular example is featuring Ctrl+F12 in xterm.\r\n         *\r\n         *  - `;5` part is optional, e.g. it could be `\\x1b[24~`\r\n         *  - first part can contain one or two digits\r\n         *  - there is also special case when there can be 3 digits\r\n         *    but without modifier. They are the case of paste bracket mode\r\n         *\r\n         * So the generic regexp is like /^(?:\\d\\d?(;\\d)?[~^$]|\\d{3}~)$/\r\n         *\r\n         *\r\n         * 2. `\\x1b[1;5H` should be parsed as { code: '[H', modifier: 5 }\r\n         *\r\n         * This particular example is featuring Ctrl+Home in xterm.\r\n         *\r\n         *  - `1;5` part is optional, e.g. it could be `\\x1b[H`\r\n         *  - `1;` part is optional, e.g. it could be `\\x1b[5H`\r\n         *\r\n         * So the generic regexp is like /^((\\d;)?\\d)?[A-Za-z]$/\r\n         *\r\n         */\r\n        const cmdStart = s.length - 1;\r\n\r\n        // Skip one or two leading digits\r\n        if (ch >= '0' && ch <= '9') {\r\n          s += (ch = yield);\r\n\r\n          if (ch >= '0' && ch <= '9') {\r\n            s += (ch = yield);\r\n\r\n            if (ch >= '0' && ch <= '9') {\r\n              s += (ch = yield);\r\n            }\r\n          }\r\n        }\r\n\r\n        // skip modifier\r\n        if (ch === ';') {\r\n          s += (ch = yield);\r\n\r\n          if (ch >= '0' && ch <= '9') {\r\n            s += yield;\r\n          }\r\n        }\r\n\r\n        /*\r\n         * We buffered enough data, now trying to extract code\r\n         * and modifier from it\r\n         */\r\n        const cmd = StringPrototypeSlice(s, cmdStart);\r\n        let match;\r\n\r\n        if ((match = RegExpPrototypeExec(/^(?:(\\d\\d?)(?:;(\\d))?([~^$])|(\\d{3}~))$/, cmd))) {\r\n          if (match[4]) {\r\n            code += match[4];\r\n          } else {\r\n            code += match[1] + match[3];\r\n            modifier = (match[2] || 1) - 1;\r\n          }\r\n        } else if (\r\n          (match = RegExpPrototypeExec(/^((\\d;)?(\\d))?([A-Za-z])$/, cmd))\r\n        ) {\r\n          code += match[4];\r\n          modifier = (match[3] || 1) - 1;\r\n        } else {\r\n          code += cmd;\r\n        }\r\n      }\r\n\r\n      // Parse the key modifier\r\n      key.ctrl = !!(modifier & 4);\r\n      key.meta = !!(modifier & 10);\r\n      key.shift = !!(modifier & 1);\r\n      key.code = code;\r\n\r\n      // Parse the key itself\r\n      switch (code) {\r\n        /* xterm/gnome ESC [ letter (with modifier) */\r\n        case '[P': key.name = 'f1'; break;\r\n        case '[Q': key.name = 'f2'; break;\r\n        case '[R': key.name = 'f3'; break;\r\n        case '[S': key.name = 'f4'; break;\r\n\r\n        /* xterm/gnome ESC O letter (without modifier) */\r\n        case 'OP': key.name = 'f1'; break;\r\n        case 'OQ': key.name = 'f2'; break;\r\n        case 'OR': key.name = 'f3'; break;\r\n        case 'OS': key.name = 'f4'; break;\r\n\r\n        /* xterm/rxvt ESC [ number ~ */\r\n        case '[11~': key.name = 'f1'; break;\r\n        case '[12~': key.name = 'f2'; break;\r\n        case '[13~': key.name = 'f3'; break;\r\n        case '[14~': key.name = 'f4'; break;\r\n\r\n        /* paste bracket mode */\r\n        case '[200~': key.name = 'paste-start'; break;\r\n        case '[201~': key.name = 'paste-end'; break;\r\n\r\n        /* from Cygwin and used in libuv */\r\n        case '[[A': key.name = 'f1'; break;\r\n        case '[[B': key.name = 'f2'; break;\r\n        case '[[C': key.name = 'f3'; break;\r\n        case '[[D': key.name = 'f4'; break;\r\n        case '[[E': key.name = 'f5'; break;\r\n\r\n        /* common */\r\n        case '[15~': key.name = 'f5'; break;\r\n        case '[17~': key.name = 'f6'; break;\r\n        case '[18~': key.name = 'f7'; break;\r\n        case '[19~': key.name = 'f8'; break;\r\n        case '[20~': key.name = 'f9'; break;\r\n        case '[21~': key.name = 'f10'; break;\r\n        case '[23~': key.name = 'f11'; break;\r\n        case '[24~': key.name = 'f12'; break;\r\n\r\n        /* xterm ESC [ letter */\r\n        case '[A': key.name = 'up'; break;\r\n        case '[B': key.name = 'down'; break;\r\n        case '[C': key.name = 'right'; break;\r\n        case '[D': key.name = 'left'; break;\r\n        case '[E': key.name = 'clear'; break;\r\n        case '[F': key.name = 'end'; break;\r\n        case '[H': key.name = 'home'; break;\r\n\r\n        /* xterm/gnome ESC O letter */\r\n        case 'OA': key.name = 'up'; break;\r\n        case 'OB': key.name = 'down'; break;\r\n        case 'OC': key.name = 'right'; break;\r\n        case 'OD': key.name = 'left'; break;\r\n        case 'OE': key.name = 'clear'; break;\r\n        case 'OF': key.name = 'end'; break;\r\n        case 'OH': key.name = 'home'; break;\r\n\r\n        /* xterm/rxvt ESC [ number ~ */\r\n        case '[1~': key.name = 'home'; break;\r\n        case '[2~': key.name = 'insert'; break;\r\n        case '[3~': key.name = 'delete'; break;\r\n        case '[4~': key.name = 'end'; break;\r\n        case '[5~': key.name = 'pageup'; break;\r\n        case '[6~': key.name = 'pagedown'; break;\r\n\r\n        /* putty */\r\n        case '[[5~': key.name = 'pageup'; break;\r\n        case '[[6~': key.name = 'pagedown'; break;\r\n\r\n        /* rxvt */\r\n        case '[7~': key.name = 'home'; break;\r\n        case '[8~': key.name = 'end'; break;\r\n\r\n        /* rxvt keys with modifiers */\r\n        case '[a': key.name = 'up'; key.shift = true; break;\r\n        case '[b': key.name = 'down'; key.shift = true; break;\r\n        case '[c': key.name = 'right'; key.shift = true; break;\r\n        case '[d': key.name = 'left'; key.shift = true; break;\r\n        case '[e': key.name = 'clear'; key.shift = true; break;\r\n\r\n        case '[2$': key.name = 'insert'; key.shift = true; break;\r\n        case '[3$': key.name = 'delete'; key.shift = true; break;\r\n        case '[5$': key.name = 'pageup'; key.shift = true; break;\r\n        case '[6$': key.name = 'pagedown'; key.shift = true; break;\r\n        case '[7$': key.name = 'home'; key.shift = true; break;\r\n        case '[8$': key.name = 'end'; key.shift = true; break;\r\n\r\n        case 'Oa': key.name = 'up'; key.ctrl = true; break;\r\n        case 'Ob': key.name = 'down'; key.ctrl = true; break;\r\n        case 'Oc': key.name = 'right'; key.ctrl = true; break;\r\n        case 'Od': key.name = 'left'; key.ctrl = true; break;\r\n        case 'Oe': key.name = 'clear'; key.ctrl = true; break;\r\n\r\n        case '[2^': key.name = 'insert'; key.ctrl = true; break;\r\n        case '[3^': key.name = 'delete'; key.ctrl = true; break;\r\n        case '[5^': key.name = 'pageup'; key.ctrl = true; break;\r\n        case '[6^': key.name = 'pagedown'; key.ctrl = true; break;\r\n        case '[7^': key.name = 'home'; key.ctrl = true; break;\r\n        case '[8^': key.name = 'end'; key.ctrl = true; break;\r\n\r\n        /* misc. */\r\n        case '[Z': key.name = 'tab'; key.shift = true; break;\r\n        default: key.name = 'undefined'; break;\r\n      }\r\n    } else if (ch === '\\r') {\r\n      // carriage return\r\n      key.name = 'return';\r\n      key.meta = escaped;\r\n    } else if (ch === '\\n') {\r\n      // Enter, should have been called linefeed\r\n      key.name = 'enter';\r\n      key.meta = escaped;\r\n    } else if (ch === '\\t') {\r\n      // tab\r\n      key.name = 'tab';\r\n      key.meta = escaped;\r\n    } else if (ch === '\\b' || ch === '\\x7f') {\r\n      // backspace or ctrl+h\r\n      key.name = 'backspace';\r\n      key.meta = escaped;\r\n    } else if (ch === kEscape) {\r\n      // escape key\r\n      key.name = 'escape';\r\n      key.meta = escaped;\r\n    } else if (ch === ' ') {\r\n      key.name = 'space';\r\n      key.meta = escaped;\r\n    } else if (!escaped && ch <= '\\x1a') {\r\n      // ctrl+letter\r\n      key.name = StringFromCharCode(\r\n        StringPrototypeCharCodeAt(ch) + StringPrototypeCharCodeAt('a') - 1,\r\n      );\r\n      key.ctrl = true;\r\n    } else if (RegExpPrototypeExec(/^[0-9A-Za-z]$/, ch) !== null) {\r\n      // Letter, number, shift+letter\r\n      key.name = StringPrototypeToLowerCase(ch);\r\n      key.shift = RegExpPrototypeExec(/^[A-Z]$/, ch) !== null;\r\n      key.meta = escaped;\r\n    } else if (escaped) {\r\n      // Escape sequence timeout\r\n      key.name = ch.length ? undefined : 'escape';\r\n      key.meta = true;\r\n    }\r\n\r\n    key.sequence = s;\r\n\r\n    if (s.length !== 0 && (key.name !== undefined || escaped)) {\r\n      /* Named character or sequence */\r\n      stream.emit('keypress', escaped ? undefined : s, key);\r\n    } else if (charLengthAt(s, 0) === s.length) {\r\n      /* Single unnamed character, e.g. \".\" */\r\n      stream.emit('keypress', s, key);\r\n    }\r\n    /* Unrecognized or broken escape sequence, don't emit anything */\r\n  }\r\n}\r\n\r\n// This runs in O(n log n).\r\nfunction commonPrefix(strings) {\r\n  if (strings.length === 0) {\r\n    return '';\r\n  }\r\n  if (strings.length === 1) {\r\n    return strings[0];\r\n  }\r\n  const sorted = ArrayPrototypeSort(ArrayPrototypeSlice(strings));\r\n  const min = sorted[0];\r\n  const max = sorted[sorted.length - 1];\r\n  for (let i = 0; i < min.length; i++) {\r\n    if (min[i] !== max[i]) {\r\n      return StringPrototypeSlice(min, 0, i);\r\n    }\r\n  }\r\n  return min;\r\n}\r\n\r\nmodule.exports = {\r\n  charLengthAt,\r\n  charLengthLeft,\r\n  commonPrefix,\r\n  emitKeys,\r\n  kSubstringSearch,\r\n  CSI,\r\n};\r\n"
  },
  "169": {
    "metadata": {
      "scriptId": "169",
      "url": "node:internal/readline/callbacks",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 132,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "8ef3d16b9e166ef8db1bf05e570d6a9ff70f3b558155a8479cd78613d0d35cb1",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2886,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/readline/callbacks"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  NumberIsNaN,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_CURSOR_POS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateFunction,\r\n} = require('internal/validators');\r\nconst {\r\n  CSI,\r\n} = require('internal/readline/utils');\r\n\r\nconst {\r\n  kClearLine,\r\n  kClearScreenDown,\r\n  kClearToLineBeginning,\r\n  kClearToLineEnd,\r\n} = CSI;\r\n\r\n\r\n/**\r\n * moves the cursor to the x and y coordinate on the given stream\r\n */\r\n\r\nfunction cursorTo(stream, x, y, callback) {\r\n  if (callback !== undefined) {\r\n    validateFunction(callback, 'callback');\r\n  }\r\n\r\n  if (typeof y === 'function') {\r\n    callback = y;\r\n    y = undefined;\r\n  }\r\n\r\n  if (NumberIsNaN(x)) throw new ERR_INVALID_ARG_VALUE('x', x);\r\n  if (NumberIsNaN(y)) throw new ERR_INVALID_ARG_VALUE('y', y);\r\n\r\n  if (stream == null || (typeof x !== 'number' && typeof y !== 'number')) {\r\n    if (typeof callback === 'function') process.nextTick(callback, null);\r\n    return true;\r\n  }\r\n\r\n  if (typeof x !== 'number') throw new ERR_INVALID_CURSOR_POS();\r\n\r\n  const data = typeof y !== 'number' ? CSI`${x + 1}G` : CSI`${y + 1};${x + 1}H`;\r\n  return stream.write(data, callback);\r\n}\r\n\r\n/**\r\n * moves the cursor relative to its current location\r\n */\r\n\r\nfunction moveCursor(stream, dx, dy, callback) {\r\n  if (callback !== undefined) {\r\n    validateFunction(callback, 'callback');\r\n  }\r\n\r\n  if (stream == null || !(dx || dy)) {\r\n    if (typeof callback === 'function') process.nextTick(callback, null);\r\n    return true;\r\n  }\r\n\r\n  let data = '';\r\n\r\n  if (dx < 0) {\r\n    data += CSI`${-dx}D`;\r\n  } else if (dx > 0) {\r\n    data += CSI`${dx}C`;\r\n  }\r\n\r\n  if (dy < 0) {\r\n    data += CSI`${-dy}A`;\r\n  } else if (dy > 0) {\r\n    data += CSI`${dy}B`;\r\n  }\r\n\r\n  return stream.write(data, callback);\r\n}\r\n\r\n/**\r\n * clears the current line the cursor is on:\r\n *   -1 for left of the cursor\r\n *   +1 for right of the cursor\r\n *    0 for the entire line\r\n */\r\n\r\nfunction clearLine(stream, dir, callback) {\r\n  if (callback !== undefined) {\r\n    validateFunction(callback, 'callback');\r\n  }\r\n\r\n  if (stream === null || stream === undefined) {\r\n    if (typeof callback === 'function') process.nextTick(callback, null);\r\n    return true;\r\n  }\r\n\r\n  const type =\r\n    dir < 0 ? kClearToLineBeginning : dir > 0 ? kClearToLineEnd : kClearLine;\r\n  return stream.write(type, callback);\r\n}\r\n\r\n/**\r\n * clears the screen from the current position of the cursor down\r\n */\r\n\r\nfunction clearScreenDown(stream, callback) {\r\n  if (callback !== undefined) {\r\n    validateFunction(callback, 'callback');\r\n  }\r\n\r\n  if (stream === null || stream === undefined) {\r\n    if (typeof callback === 'function') process.nextTick(callback, null);\r\n    return true;\r\n  }\r\n\r\n  return stream.write(kClearScreenDown, callback);\r\n}\r\n\r\nmodule.exports = {\r\n  clearLine,\r\n  clearScreenDown,\r\n  cursorTo,\r\n  moveCursor,\r\n};\r\n"
  },
  "170": {
    "metadata": {
      "scriptId": "170",
      "url": "node:http",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 164,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "5eee63f3e687f448941ca47906a88a3ea6a1919d7a0caf55187bb5c0e2546f43",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 5878,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:http"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSort,\r\n  ObjectDefineProperty,\r\n} = primordials;\r\n\r\nconst { validateInteger } = require('internal/validators');\r\nconst httpAgent = require('_http_agent');\r\nconst { ClientRequest } = require('_http_client');\r\nconst { methods, parsers } = require('_http_common');\r\nconst { IncomingMessage } = require('_http_incoming');\r\nconst {\r\n  validateHeaderName,\r\n  validateHeaderValue,\r\n  OutgoingMessage,\r\n} = require('_http_outgoing');\r\nconst {\r\n  _connectionListener,\r\n  STATUS_CODES,\r\n  Server,\r\n  ServerResponse,\r\n} = require('_http_server');\r\nlet maxHeaderSize;\r\n\r\n/**\r\n * Returns a new instance of `http.Server`.\r\n * @param {{\r\n *   IncomingMessage?: IncomingMessage;\r\n *   ServerResponse?: ServerResponse;\r\n *   insecureHTTPParser?: boolean;\r\n *   maxHeaderSize?: number;\r\n *   requireHostHeader?: boolean;\r\n *   joinDuplicateHeaders?: boolean;\r\n *   highWaterMark?: number;\r\n *   rejectNonStandardBodyWrites?: boolean;\r\n *   }} [opts]\r\n * @param {Function} [requestListener]\r\n * @returns {Server}\r\n */\r\nfunction createServer(opts, requestListener) {\r\n  return new Server(opts, requestListener);\r\n}\r\n\r\n/**\r\n * @typedef {object} HTTPRequestOptions\r\n * @property {httpAgent.Agent | boolean} [agent] Controls Agent behavior.\r\n * @property {string} [auth] Basic authentication ('user:password') to compute an Authorization header.\r\n * @property {Function} [createConnection] Produces a socket/stream to use when the agent option is not used.\r\n * @property {number} [defaultPort] Default port for the protocol.\r\n * @property {number} [family] IP address family to use when resolving host or hostname.\r\n * @property {object} [headers] An object containing request headers.\r\n * @property {number} [hints] Optional dns.lookup() hints.\r\n * @property {string} [host] A domain name or IP address of the server to issue the request to.\r\n * @property {string} [hostname] Alias for host.\r\n * @property {boolean} [insecureHTTPParser] Use an insecure HTTP parser that accepts invalid HTTP headers when true.\r\n * @property {boolean} [joinDuplicateHeaders] Multiple header that joined with `,` field line values.\r\n * @property {string} [localAddress] Local interface to bind for network connections.\r\n * @property {number} [localPort] Local port to connect from.\r\n * @property {Function} [lookup] Custom lookup function. Default: dns.lookup().\r\n * @property {number} [maxHeaderSize] Overrides the --max-http-header-size value for responses received from the server.\r\n * @property {string} [method] A string specifying the HTTP request method.\r\n * @property {string} [path] Request path.\r\n * @property {number} [port] Port of remote server.\r\n * @property {string} [protocol] Protocol to use.\r\n * @property {boolean} [setHost] Specifies whether or not to automatically add the Host header.\r\n * @property {AbortSignal} [signal] An AbortSignal that may be used to abort an ongoing request.\r\n * @property {string} [socketPath] Unix domain socket.\r\n * @property {number} [timeout] A number specifying the socket timeout in milliseconds.\r\n * @property {Array} [uniqueHeaders] A list of request headers that should be sent only once.\r\n */\r\n\r\n/**\r\n * Makes an HTTP request.\r\n * @param {string | URL} url\r\n * @param {HTTPRequestOptions} [options]\r\n * @param {Function} [cb]\r\n * @returns {ClientRequest}\r\n */\r\nfunction request(url, options, cb) {\r\n  return new ClientRequest(url, options, cb);\r\n}\r\n\r\n/**\r\n * Makes a `GET` HTTP request.\r\n * @param {string | URL} url\r\n * @param {HTTPRequestOptions} [options]\r\n * @param {Function} [cb]\r\n * @returns {ClientRequest}\r\n */\r\nfunction get(url, options, cb) {\r\n  const req = request(url, options, cb);\r\n  req.end();\r\n  return req;\r\n}\r\n\r\nmodule.exports = {\r\n  _connectionListener,\r\n  METHODS: ArrayPrototypeSort(ArrayPrototypeSlice(methods)),\r\n  STATUS_CODES,\r\n  Agent: httpAgent.Agent,\r\n  ClientRequest,\r\n  IncomingMessage,\r\n  OutgoingMessage,\r\n  Server,\r\n  ServerResponse,\r\n  createServer,\r\n  validateHeaderName,\r\n  validateHeaderValue,\r\n  get,\r\n  request,\r\n  setMaxIdleHTTPParsers(max) {\r\n    validateInteger(max, 'max', 1);\r\n    parsers.max = max;\r\n  },\r\n};\r\n\r\nObjectDefineProperty(module.exports, 'maxHeaderSize', {\r\n  __proto__: null,\r\n  configurable: true,\r\n  enumerable: true,\r\n  get() {\r\n    if (maxHeaderSize === undefined) {\r\n      const { getOptionValue } = require('internal/options');\r\n      maxHeaderSize = getOptionValue('--max-http-header-size');\r\n    }\r\n\r\n    return maxHeaderSize;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(module.exports, 'globalAgent', {\r\n  __proto__: null,\r\n  configurable: true,\r\n  enumerable: true,\r\n  get() {\r\n    return httpAgent.globalAgent;\r\n  },\r\n  set(value) {\r\n    httpAgent.globalAgent = value;\r\n  },\r\n});\r\n"
  },
  "171": {
    "metadata": {
      "scriptId": "171",
      "url": "node:http2",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 29,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "b6254b8a2a461ed55945907bffb46391a65e1cef3b968c3904f7e1da74ad4c16",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 549,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:http2"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  connect,\r\n  constants,\r\n  createServer,\r\n  createSecureServer,\r\n  getDefaultSettings,\r\n  getPackedSettings,\r\n  getUnpackedSettings,\r\n  performServerHandshake,\r\n  sensitiveHeaders,\r\n  Http2ServerRequest,\r\n  Http2ServerResponse,\r\n} = require('internal/http2/core');\r\n\r\nmodule.exports = {\r\n  connect,\r\n  constants,\r\n  createServer,\r\n  createSecureServer,\r\n  getDefaultSettings,\r\n  getPackedSettings,\r\n  getUnpackedSettings,\r\n  performServerHandshake,\r\n  sensitiveHeaders,\r\n  Http2ServerRequest,\r\n  Http2ServerResponse,\r\n};\r\n"
  },
  "172": {
    "metadata": {
      "scriptId": "172",
      "url": "node:internal/http2/core",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 3494,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "29416a271cb2c27f29552f6383f1ccc951e15e22ef385b7a3962f526bedb3f53",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 114421,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/http2/core"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayFrom,\r\n  ArrayIsArray,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeUnshift,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeCall,\r\n  MathMin,\r\n  Number,\r\n  ObjectAssign,\r\n  ObjectDefineProperty,\r\n  ObjectEntries,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  Promise,\r\n  PromisePrototypeThen,\r\n  Proxy,\r\n  ReflectApply,\r\n  ReflectGet,\r\n  ReflectGetPrototypeOf,\r\n  ReflectSet,\r\n  RegExpPrototypeExec,\r\n  SafeArrayIterator,\r\n  SafeMap,\r\n  SafeSet,\r\n  StringPrototypeSlice,\r\n  Symbol,\r\n  SymbolAsyncDispose,\r\n  SymbolDispose,\r\n  TypedArrayPrototypeGetLength,\r\n  Uint32Array,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  assertCrypto,\r\n  customInspectSymbol: kInspect,\r\n  kEmptyObject,\r\n  promisify,\r\n} = require('internal/util');\r\n\r\nassertCrypto();\r\n\r\nconst assert = require('assert');\r\nconst EventEmitter = require('events');\r\nconst { addAbortListener } = require('internal/events/abort_listener');\r\nconst fs = require('fs');\r\nconst http = require('http');\r\nconst { readUInt16BE, readUInt32BE } = require('internal/buffer');\r\nconst { URL, getURLOrigin } = require('internal/url');\r\nconst net = require('net');\r\nconst { Duplex } = require('stream');\r\nconst tls = require('tls');\r\nconst { setImmediate, setTimeout, clearTimeout } = require('timers');\r\n\r\nconst {\r\n  kIncomingMessage,\r\n  _checkIsHttpToken: checkIsHttpToken,\r\n} = require('_http_common');\r\nconst { kServerResponse, Server: HttpServer, httpServerPreClose, setupConnectionsTracking } = require('_http_server');\r\nconst JSStreamSocket = require('internal/js_stream_socket');\r\n\r\nconst {\r\n  defaultTriggerAsyncIdScope,\r\n  symbols: {\r\n    async_id_symbol,\r\n    owner_symbol,\r\n  },\r\n} = require('internal/async_hooks');\r\nconst {\r\n  AbortError,\r\n  aggregateTwoErrors,\r\n  codes: {\r\n    ERR_HTTP2_ALTSVC_INVALID_ORIGIN,\r\n    ERR_HTTP2_ALTSVC_LENGTH,\r\n    ERR_HTTP2_CONNECT_AUTHORITY,\r\n    ERR_HTTP2_CONNECT_PATH,\r\n    ERR_HTTP2_CONNECT_SCHEME,\r\n    ERR_HTTP2_GOAWAY_SESSION,\r\n    ERR_HTTP2_HEADERS_AFTER_RESPOND,\r\n    ERR_HTTP2_HEADERS_SENT,\r\n    ERR_HTTP2_INVALID_INFO_STATUS,\r\n    ERR_HTTP2_INVALID_ORIGIN,\r\n    ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH,\r\n    ERR_HTTP2_INVALID_SESSION,\r\n    ERR_HTTP2_INVALID_SETTING_VALUE,\r\n    ERR_HTTP2_INVALID_STREAM,\r\n    ERR_HTTP2_MAX_PENDING_SETTINGS_ACK,\r\n    ERR_HTTP2_NESTED_PUSH,\r\n    ERR_HTTP2_NO_MEM,\r\n    ERR_HTTP2_NO_SOCKET_MANIPULATION,\r\n    ERR_HTTP2_ORIGIN_LENGTH,\r\n    ERR_HTTP2_OUT_OF_STREAMS,\r\n    ERR_HTTP2_PAYLOAD_FORBIDDEN,\r\n    ERR_HTTP2_PING_CANCEL,\r\n    ERR_HTTP2_PING_LENGTH,\r\n    ERR_HTTP2_PUSH_DISABLED,\r\n    ERR_HTTP2_SEND_FILE,\r\n    ERR_HTTP2_SEND_FILE_NOSEEK,\r\n    ERR_HTTP2_SESSION_ERROR,\r\n    ERR_HTTP2_SETTINGS_CANCEL,\r\n    ERR_HTTP2_SOCKET_BOUND,\r\n    ERR_HTTP2_SOCKET_UNBOUND,\r\n    ERR_HTTP2_STATUS_101,\r\n    ERR_HTTP2_STATUS_INVALID,\r\n    ERR_HTTP2_STREAM_CANCEL,\r\n    ERR_HTTP2_STREAM_ERROR,\r\n    ERR_HTTP2_STREAM_SELF_DEPENDENCY,\r\n    ERR_HTTP2_TOO_MANY_CUSTOM_SETTINGS,\r\n    ERR_HTTP2_TRAILERS_ALREADY_SENT,\r\n    ERR_HTTP2_TRAILERS_NOT_READY,\r\n    ERR_HTTP2_UNSUPPORTED_PROTOCOL,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_CHAR,\r\n    ERR_INVALID_HTTP_TOKEN,\r\n    ERR_OUT_OF_RANGE,\r\n    ERR_SOCKET_CLOSED,\r\n  },\r\n  hideStackFrames,\r\n} = require('internal/errors');\r\nconst {\r\n  isUint32,\r\n  validateAbortSignal,\r\n  validateBoolean,\r\n  validateBuffer,\r\n  validateFunction,\r\n  validateInt32,\r\n  validateInteger,\r\n  validateNumber,\r\n  validateString,\r\n  validateUint32,\r\n} = require('internal/validators');\r\nconst fsPromisesInternal = require('internal/fs/promises');\r\nconst { utcDate } = require('internal/http');\r\nconst {\r\n  Http2ServerRequest,\r\n  Http2ServerResponse,\r\n  onServerStream,\r\n} = require('internal/http2/compat');\r\n\r\nconst {\r\n  assertIsObject,\r\n  assertIsArray,\r\n  assertValidPseudoHeader,\r\n  assertValidPseudoHeaderResponse,\r\n  assertValidPseudoHeaderTrailer,\r\n  assertWithinRange,\r\n  getAuthority,\r\n  getDefaultSettings,\r\n  getSessionState,\r\n  getSettings,\r\n  getStreamState,\r\n  isPayloadMeaningless,\r\n  kSensitiveHeaders,\r\n  kSocket,\r\n  kRequest,\r\n  kProxySocket,\r\n  mapToHeaders,\r\n  MAX_ADDITIONAL_SETTINGS,\r\n  NghttpError,\r\n  remoteCustomSettingsToBuffer,\r\n  sessionName,\r\n  toHeaderObject,\r\n  updateOptionsBuffer,\r\n  updateSettingsBuffer,\r\n} = require('internal/http2/util');\r\nconst {\r\n  writeGeneric,\r\n  writevGeneric,\r\n  onStreamRead,\r\n  kAfterAsyncWrite,\r\n  kMaybeDestroy,\r\n  kUpdateTimer,\r\n  kHandle,\r\n  kSession,\r\n  kBoundSession,\r\n  setStreamTimeout,\r\n} = require('internal/stream_base_commons');\r\nconst { kTimeout } = require('internal/timers');\r\nconst { isArrayBufferView } = require('internal/util/types');\r\nconst { format } = require('internal/util/inspect');\r\n\r\nconst { FileHandle } = internalBinding('fs');\r\nconst binding = internalBinding('http2');\r\nconst {\r\n  ShutdownWrap,\r\n  kReadBytesOrError,\r\n  streamBaseState,\r\n} = internalBinding('stream_wrap');\r\nconst { UV_EOF } = internalBinding('uv');\r\n\r\nconst { StreamPipe } = internalBinding('stream_pipe');\r\nconst { _connectionListener: httpConnectionListener } = http;\r\nlet debug = require('internal/util/debuglog').debuglog('http2', (fn) => {\r\n  debug = fn;\r\n});\r\nconst debugEnabled = debug.enabled;\r\n\r\nfunction debugStream(id, sessionType, message, ...args) {\r\n  if (!debugEnabled) {\r\n    return;\r\n  }\r\n  debug('Http2Stream %s [Http2Session %s]: ' + message,\r\n        id, sessionName(sessionType), ...new SafeArrayIterator(args));\r\n}\r\n\r\nfunction debugStreamObj(stream, message, ...args) {\r\n  const session = stream[kSession];\r\n  const type = session ? session[kType] : undefined;\r\n  debugStream(stream[kID], type, message, ...new SafeArrayIterator(args));\r\n}\r\n\r\nfunction debugSession(sessionType, message, ...args) {\r\n  debug('Http2Session %s: ' + message, sessionName(sessionType),\r\n        ...new SafeArrayIterator(args));\r\n}\r\n\r\nfunction debugSessionObj(session, message, ...args) {\r\n  debugSession(session[kType], message, ...new SafeArrayIterator(args));\r\n}\r\n\r\nconst kMaxFrameSize = (2 ** 24) - 1;\r\nconst kMaxInt = (2 ** 32) - 1;\r\nconst kMaxStreams = (2 ** 32) - 1;\r\nconst kMaxALTSVC = (2 ** 14) - 2;\r\n\r\n// eslint-disable-next-line no-control-regex\r\nconst kQuotedString = /^[\\x09\\x20-\\x5b\\x5d-\\x7e\\x80-\\xff]*$/;\r\n\r\nconst { constants, nameForErrorCode } = binding;\r\n\r\nconst NETServer = net.Server;\r\nconst TLSServer = tls.Server;\r\n\r\nconst kAlpnProtocol = Symbol('alpnProtocol');\r\nconst kAuthority = Symbol('authority');\r\nconst kEncrypted = Symbol('encrypted');\r\nconst kID = Symbol('id');\r\nconst kInit = Symbol('init');\r\nconst kInfoHeaders = Symbol('sent-info-headers');\r\nconst kLocalSettings = Symbol('local-settings');\r\nconst kNativeFields = Symbol('kNativeFields');\r\nconst kOptions = Symbol('options');\r\nconst kOwner = owner_symbol;\r\nconst kOrigin = Symbol('origin');\r\nconst kPendingRequestCalls = Symbol('kPendingRequestCalls');\r\nconst kProceed = Symbol('proceed');\r\nconst kProtocol = Symbol('protocol');\r\nconst kRemoteSettings = Symbol('remote-settings');\r\nconst kSelectPadding = Symbol('select-padding');\r\nconst kSentHeaders = Symbol('sent-headers');\r\nconst kSentTrailers = Symbol('sent-trailers');\r\nconst kServer = Symbol('server');\r\nconst kState = Symbol('state');\r\nconst kType = Symbol('type');\r\nconst kWriteGeneric = Symbol('write-generic');\r\n\r\nconst {\r\n  kBitfield,\r\n  kSessionPriorityListenerCount,\r\n  kSessionFrameErrorListenerCount,\r\n  kSessionMaxInvalidFrames,\r\n  kSessionMaxRejectedStreams,\r\n  kSessionUint8FieldCount,\r\n  kSessionHasRemoteSettingsListeners,\r\n  kSessionRemoteSettingsIsUpToDate,\r\n  kSessionHasPingListeners,\r\n  kSessionHasAltsvcListeners,\r\n} = binding;\r\n\r\nconst {\r\n  NGHTTP2_CANCEL,\r\n  NGHTTP2_REFUSED_STREAM,\r\n  NGHTTP2_DEFAULT_WEIGHT,\r\n  NGHTTP2_FLAG_END_STREAM,\r\n  NGHTTP2_HCAT_PUSH_RESPONSE,\r\n  NGHTTP2_HCAT_RESPONSE,\r\n  NGHTTP2_INTERNAL_ERROR,\r\n  NGHTTP2_NO_ERROR,\r\n  NGHTTP2_SESSION_CLIENT,\r\n  NGHTTP2_SESSION_SERVER,\r\n  NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE,\r\n  NGHTTP2_ERR_INVALID_ARGUMENT,\r\n  NGHTTP2_ERR_STREAM_CLOSED,\r\n  NGHTTP2_ERR_NOMEM,\r\n\r\n  HTTP2_HEADER_AUTHORITY,\r\n  HTTP2_HEADER_DATE,\r\n  HTTP2_HEADER_METHOD,\r\n  HTTP2_HEADER_PATH,\r\n  HTTP2_HEADER_PROTOCOL,\r\n  HTTP2_HEADER_SCHEME,\r\n  HTTP2_HEADER_STATUS,\r\n  HTTP2_HEADER_CONTENT_LENGTH,\r\n\r\n  NGHTTP2_SETTINGS_HEADER_TABLE_SIZE,\r\n  NGHTTP2_SETTINGS_ENABLE_PUSH,\r\n  NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS,\r\n  NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE,\r\n  NGHTTP2_SETTINGS_MAX_FRAME_SIZE,\r\n  NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE,\r\n  NGHTTP2_SETTINGS_ENABLE_CONNECT_PROTOCOL,\r\n\r\n  HTTP2_METHOD_GET,\r\n  HTTP2_METHOD_HEAD,\r\n  HTTP2_METHOD_CONNECT,\r\n\r\n  HTTP_STATUS_CONTINUE,\r\n  HTTP_STATUS_RESET_CONTENT,\r\n  HTTP_STATUS_OK,\r\n  HTTP_STATUS_NO_CONTENT,\r\n  HTTP_STATUS_NOT_MODIFIED,\r\n  HTTP_STATUS_SWITCHING_PROTOCOLS,\r\n  HTTP_STATUS_MISDIRECTED_REQUEST,\r\n\r\n  STREAM_OPTION_EMPTY_PAYLOAD,\r\n  STREAM_OPTION_GET_TRAILERS,\r\n} = constants;\r\n\r\nconst STREAM_FLAGS_PENDING = 0x0;\r\nconst STREAM_FLAGS_READY = 0x1;\r\nconst STREAM_FLAGS_CLOSED = 0x2;\r\nconst STREAM_FLAGS_HEADERS_SENT = 0x4;\r\nconst STREAM_FLAGS_HEAD_REQUEST = 0x8;\r\nconst STREAM_FLAGS_ABORTED = 0x10;\r\nconst STREAM_FLAGS_HAS_TRAILERS = 0x20;\r\n\r\nconst SESSION_FLAGS_PENDING = 0x0;\r\nconst SESSION_FLAGS_READY = 0x1;\r\nconst SESSION_FLAGS_CLOSED = 0x2;\r\nconst SESSION_FLAGS_DESTROYED = 0x4;\r\n\r\n// Top level to avoid creating a closure\r\nfunction emit(self, ...args) {\r\n  ReflectApply(self.emit, self, args);\r\n}\r\n\r\n// Called when a new block of headers has been received for a given\r\n// stream. The stream may or may not be new. If the stream is new,\r\n// create the associated Http2Stream instance and emit the 'stream'\r\n// event. If the stream is not new, emit the 'headers' event to pass\r\n// the block of headers on.\r\nfunction onSessionHeaders(handle, id, cat, flags, headers, sensitiveHeaders) {\r\n  const session = this[kOwner];\r\n  if (session.destroyed)\r\n    return;\r\n\r\n  const type = session[kType];\r\n  session[kUpdateTimer]();\r\n  debugStream(id, type, 'headers received');\r\n  const streams = session[kState].streams;\r\n\r\n  const endOfStream = !!(flags & NGHTTP2_FLAG_END_STREAM);\r\n  let stream = streams.get(id);\r\n\r\n  // Convert the array of header name value pairs into an object\r\n  const obj = toHeaderObject(headers, sensitiveHeaders);\r\n\r\n  if (stream === undefined) {\r\n    if (session.closed) {\r\n      // We are not accepting any new streams at this point. This callback\r\n      // should not be invoked at this point in time, but just in case it is,\r\n      // refuse the stream using an RST_STREAM and destroy the handle.\r\n      handle.rstStream(NGHTTP2_REFUSED_STREAM);\r\n      handle.destroy();\r\n      return;\r\n    }\r\n    // session[kType] can be only one of two possible values\r\n    if (type === NGHTTP2_SESSION_SERVER) {\r\n      // eslint-disable-next-line no-use-before-define\r\n      stream = new ServerHttp2Stream(session, handle, id, {}, obj);\r\n      if (endOfStream) {\r\n        stream.push(null);\r\n      }\r\n      if (obj[HTTP2_HEADER_METHOD] === HTTP2_METHOD_HEAD) {\r\n        // For head requests, there must not be a body...\r\n        // end the writable side immediately.\r\n        stream.end();\r\n        stream[kState].flags |= STREAM_FLAGS_HEAD_REQUEST;\r\n      }\r\n    } else {\r\n      // eslint-disable-next-line no-use-before-define\r\n      stream = new ClientHttp2Stream(session, handle, id, {});\r\n      if (endOfStream) {\r\n        stream.push(null);\r\n      }\r\n      stream.end();\r\n    }\r\n    if (endOfStream)\r\n      stream[kState].endAfterHeaders = true;\r\n    process.nextTick(emit, session, 'stream', stream, obj, flags, headers);\r\n  } else {\r\n    let event;\r\n    const status = obj[HTTP2_HEADER_STATUS];\r\n    if (cat === NGHTTP2_HCAT_RESPONSE) {\r\n      if (!endOfStream &&\r\n          status !== undefined &&\r\n          status >= 100 &&\r\n          status < 200) {\r\n        event = 'headers';\r\n      } else {\r\n        event = 'response';\r\n      }\r\n    } else if (cat === NGHTTP2_HCAT_PUSH_RESPONSE) {\r\n      event = 'push';\r\n    } else if (status !== undefined && status >= 200) {\r\n      event = 'response';\r\n    } else {\r\n      event = endOfStream ? 'trailers' : 'headers';\r\n    }\r\n    const session = stream.session;\r\n    if (status === HTTP_STATUS_MISDIRECTED_REQUEST) {\r\n      const originSet = session[kState].originSet = initOriginSet(session);\r\n      originSet.delete(stream[kOrigin]);\r\n    }\r\n    debugStream(id, type, \"emitting stream '%s' event\", event);\r\n    process.nextTick(emit, stream, event, obj, flags, headers);\r\n  }\r\n  if (endOfStream) {\r\n    stream.push(null);\r\n  }\r\n}\r\n\r\nfunction tryClose(fd) {\r\n  // Try to close the file descriptor. If closing fails, assert because\r\n  // an error really should not happen at this point.\r\n  fs.close(fd, assert.ifError);\r\n}\r\n\r\n// Called when the Http2Stream has finished sending data and is ready for\r\n// trailers to be sent. This will only be called if the { hasOptions: true }\r\n// option is set.\r\nfunction onStreamTrailers() {\r\n  const stream = this[kOwner];\r\n  stream[kState].trailersReady = true;\r\n  if (stream.destroyed || stream.closed)\r\n    return;\r\n  if (!stream.emit('wantTrailers')) {\r\n    // There are no listeners, send empty trailing HEADERS frame and close.\r\n    stream.sendTrailers({});\r\n  }\r\n}\r\n\r\n// Submit an RST-STREAM frame to be sent to the remote peer.\r\n// This will cause the Http2Stream to be closed.\r\nfunction submitRstStream(code) {\r\n  if (this[kHandle] !== undefined) {\r\n    this[kHandle].rstStream(code);\r\n  }\r\n}\r\n\r\n// Keep track of the number/presence of JS event listeners. Knowing that there\r\n// are no listeners allows the C++ code to skip calling into JS for an event.\r\nfunction sessionListenerAdded(name) {\r\n  switch (name) {\r\n    case 'ping':\r\n      this[kNativeFields][kBitfield] |= 1 << kSessionHasPingListeners;\r\n      break;\r\n    case 'altsvc':\r\n      this[kNativeFields][kBitfield] |= 1 << kSessionHasAltsvcListeners;\r\n      break;\r\n    case 'remoteSettings':\r\n      this[kNativeFields][kBitfield] |= 1 << kSessionHasRemoteSettingsListeners;\r\n      break;\r\n    case 'priority':\r\n      this[kNativeFields][kSessionPriorityListenerCount]++;\r\n      break;\r\n    case 'frameError':\r\n      this[kNativeFields][kSessionFrameErrorListenerCount]++;\r\n      break;\r\n  }\r\n}\r\n\r\nfunction sessionListenerRemoved(name) {\r\n  switch (name) {\r\n    case 'ping':\r\n      if (this.listenerCount(name) > 0) return;\r\n      this[kNativeFields][kBitfield] &= ~(1 << kSessionHasPingListeners);\r\n      break;\r\n    case 'altsvc':\r\n      if (this.listenerCount(name) > 0) return;\r\n      this[kNativeFields][kBitfield] &= ~(1 << kSessionHasAltsvcListeners);\r\n      break;\r\n    case 'remoteSettings':\r\n      if (this.listenerCount(name) > 0) return;\r\n      this[kNativeFields][kBitfield] &=\r\n          ~(1 << kSessionHasRemoteSettingsListeners);\r\n      break;\r\n    case 'priority':\r\n      this[kNativeFields][kSessionPriorityListenerCount]--;\r\n      break;\r\n    case 'frameError':\r\n      this[kNativeFields][kSessionFrameErrorListenerCount]--;\r\n      break;\r\n  }\r\n}\r\n\r\n// Also keep track of listeners for the Http2Stream instances, as some events\r\n// are emitted on those objects.\r\nfunction streamListenerAdded(name) {\r\n  const session = this[kSession];\r\n  if (!session) return;\r\n  switch (name) {\r\n    case 'priority':\r\n      session[kNativeFields][kSessionPriorityListenerCount]++;\r\n      break;\r\n    case 'frameError':\r\n      session[kNativeFields][kSessionFrameErrorListenerCount]++;\r\n      break;\r\n  }\r\n}\r\n\r\nfunction streamListenerRemoved(name) {\r\n  const session = this[kSession];\r\n  if (!session) return;\r\n  switch (name) {\r\n    case 'priority':\r\n      session[kNativeFields][kSessionPriorityListenerCount]--;\r\n      break;\r\n    case 'frameError':\r\n      session[kNativeFields][kSessionFrameErrorListenerCount]--;\r\n      break;\r\n  }\r\n}\r\n\r\nfunction onPing(payload) {\r\n  const session = this[kOwner];\r\n  if (session.destroyed)\r\n    return;\r\n  session[kUpdateTimer]();\r\n  debugSessionObj(session, 'new ping received');\r\n  session.emit('ping', payload);\r\n}\r\n\r\n// Called when the stream is closed either by sending or receiving an\r\n// RST_STREAM frame, or through a natural end-of-stream.\r\n// If the writable and readable sides of the stream are still open at this\r\n// point, close them. If there is an open fd for file send, close that also.\r\n// At this point the underlying node::http2:Http2Stream handle is no\r\n// longer usable so destroy it also.\r\nfunction onStreamClose(code) {\r\n  const stream = this[kOwner];\r\n  if (!stream || stream.destroyed)\r\n    return false;\r\n\r\n  debugStreamObj(\r\n    stream, 'closed with code %d, closed %s, readable %s',\r\n    code, stream.closed, stream.readable,\r\n  );\r\n\r\n  if (!stream.closed)\r\n    closeStream(stream, code, kNoRstStream);\r\n\r\n  stream[kState].fd = -1;\r\n  // Defer destroy we actually emit end.\r\n  if (!stream.readable || code !== NGHTTP2_NO_ERROR) {\r\n    // If errored or ended, we can destroy immediately.\r\n    stream.destroy();\r\n  } else {\r\n    // Wait for end to destroy.\r\n    stream.on('end', stream[kMaybeDestroy]);\r\n    // Push a null so the stream can end whenever the client consumes\r\n    // it completely.\r\n    stream.push(null);\r\n\r\n    // If the user hasn't tried to consume the stream (and this is a server\r\n    // session) then just dump the incoming data so that the stream can\r\n    // be destroyed.\r\n    if (stream[kSession][kType] === NGHTTP2_SESSION_SERVER &&\r\n        !stream[kState].didRead &&\r\n        stream.readableFlowing === null)\r\n      stream.resume();\r\n    else\r\n      stream.read(0);\r\n  }\r\n  return true;\r\n}\r\n\r\n// Called when the remote peer settings have been updated.\r\n// Resets the cached settings.\r\nfunction onSettings() {\r\n  const session = this[kOwner];\r\n  if (session.destroyed)\r\n    return;\r\n  session[kUpdateTimer]();\r\n  debugSessionObj(session, 'new settings received');\r\n  session[kRemoteSettings] = undefined;\r\n  session.emit('remoteSettings', session.remoteSettings);\r\n}\r\n\r\n// If the stream exists, an attempt will be made to emit an event\r\n// on the stream object itself. Otherwise, forward it on to the\r\n// session (which may, in turn, forward it on to the server)\r\nfunction onPriority(id, parent, weight, exclusive) {\r\n  const session = this[kOwner];\r\n  if (session.destroyed)\r\n    return;\r\n  debugStream(id, session[kType],\r\n              'priority [parent: %d, weight: %d, exclusive: %s]',\r\n              parent, weight, exclusive);\r\n  const emitter = session[kState].streams.get(id) || session;\r\n  if (!emitter.destroyed) {\r\n    emitter[kUpdateTimer]();\r\n    emitter.emit('priority', id, parent, weight, exclusive);\r\n  }\r\n}\r\n\r\n// Called by the native layer when an error has occurred sending a\r\n// frame. This should be exceedingly rare.\r\nfunction onFrameError(id, type, code) {\r\n  const session = this[kOwner];\r\n  if (session.destroyed)\r\n    return;\r\n  debugSessionObj(session, 'error sending frame type %d on stream %d, code: %d',\r\n                  type, id, code);\r\n  const emitter = session[kState].streams.get(id) || session;\r\n  emitter[kUpdateTimer]();\r\n  emitter.emit('frameError', type, code, id);\r\n  session[kState].streams.get(id).close(code);\r\n  session.close();\r\n}\r\n\r\nfunction onAltSvc(stream, origin, alt) {\r\n  const session = this[kOwner];\r\n  if (session.destroyed)\r\n    return;\r\n  debugSessionObj(session, 'altsvc received: stream: %d, origin: %s, alt: %s',\r\n                  stream, origin, alt);\r\n  session[kUpdateTimer]();\r\n  session.emit('altsvc', alt, origin, stream);\r\n}\r\n\r\nfunction initOriginSet(session) {\r\n  let originSet = session[kState].originSet;\r\n  if (originSet === undefined) {\r\n    const socket = session[kSocket];\r\n    session[kState].originSet = originSet = new SafeSet();\r\n    if (socket.servername != null) {\r\n      let originString = `https://${socket.servername}`;\r\n      if (socket.remotePort != null)\r\n        originString += `:${socket.remotePort}`;\r\n      // We have to ensure that it is a properly serialized\r\n      // ASCII origin string. The socket.servername might not\r\n      // be properly ASCII encoded.\r\n      originSet.add(getURLOrigin(originString));\r\n    }\r\n  }\r\n  return originSet;\r\n}\r\n\r\nfunction onOrigin(origins) {\r\n  const session = this[kOwner];\r\n  if (session.destroyed)\r\n    return;\r\n  debugSessionObj(session, 'origin received: %j', origins);\r\n  session[kUpdateTimer]();\r\n  if (!session.encrypted || session.destroyed)\r\n    return undefined;\r\n  const originSet = initOriginSet(session);\r\n  for (let n = 0; n < origins.length; n++)\r\n    originSet.add(origins[n]);\r\n  session.emit('origin', origins);\r\n}\r\n\r\n// Receiving a GOAWAY frame from the connected peer is a signal that no\r\n// new streams should be created. If the code === NGHTTP2_NO_ERROR, we\r\n// are going to send our close, but allow existing frames to close\r\n// normally. If code !== NGHTTP2_NO_ERROR, we are going to send our own\r\n// close using the same code then destroy the session with an error.\r\n// The goaway event will be emitted on next tick.\r\nfunction onGoawayData(code, lastStreamID, buf) {\r\n  const session = this[kOwner];\r\n  if (session.destroyed)\r\n    return;\r\n  debugSessionObj(session, 'goaway %d received [last stream id: %d]',\r\n                  code, lastStreamID);\r\n\r\n  const state = session[kState];\r\n  state.goawayCode = code;\r\n  state.goawayLastStreamID = lastStreamID;\r\n\r\n  session.emit('goaway', code, lastStreamID, buf);\r\n  if (code === NGHTTP2_NO_ERROR) {\r\n    // If this is a no error goaway, begin shutting down.\r\n    // No new streams permitted, but existing streams may\r\n    // close naturally on their own.\r\n    session.close();\r\n  } else {\r\n    // However, if the code is not NGHTTP_NO_ERROR, destroy the\r\n    // session immediately. We destroy with an error but send a\r\n    // goaway using NGHTTP2_NO_ERROR because there was no error\r\n    // condition on this side of the session that caused the\r\n    // shutdown.\r\n    session.destroy(new ERR_HTTP2_SESSION_ERROR(code), NGHTTP2_NO_ERROR);\r\n  }\r\n}\r\n\r\n// When a ClientHttp2Session is first created, the socket may not yet be\r\n// connected. If request() is called during this time, the actual request\r\n// will be deferred until the socket is ready to go.\r\nfunction requestOnConnect(headers, options) {\r\n  const session = this[kSession];\r\n\r\n  // At this point, the stream should have already been destroyed during\r\n  // the session.destroy() method. Do nothing else.\r\n  if (session === undefined || session.destroyed)\r\n    return;\r\n\r\n  // If the session was closed while waiting for the connect, destroy\r\n  // the stream and do not continue with the request.\r\n  if (session.closed) {\r\n    const err = new ERR_HTTP2_GOAWAY_SESSION();\r\n    this.destroy(err);\r\n    return;\r\n  }\r\n\r\n  debugSessionObj(session, 'connected, initializing request');\r\n\r\n  let streamOptions = 0;\r\n  if (options.endStream)\r\n    streamOptions |= STREAM_OPTION_EMPTY_PAYLOAD;\r\n\r\n  if (options.waitForTrailers)\r\n    streamOptions |= STREAM_OPTION_GET_TRAILERS;\r\n\r\n  // `ret` will be either the reserved stream ID (if positive)\r\n  // or an error code (if negative)\r\n  const ret = session[kHandle].request(headers,\r\n                                       streamOptions,\r\n                                       options.parent | 0,\r\n                                       options.weight | 0,\r\n                                       !!options.exclusive);\r\n\r\n  // In an error condition, one of three possible response codes will be\r\n  // possible:\r\n  // * NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE - Maximum stream ID is reached, this\r\n  //   is fatal for the session\r\n  // * NGHTTP2_ERR_INVALID_ARGUMENT - Stream was made dependent on itself, this\r\n  //   impacts on this stream.\r\n  // For the first two, emit the error on the session,\r\n  // For the third, emit the error on the stream, it will bubble up to the\r\n  // session if not handled.\r\n  if (typeof ret === 'number') {\r\n    let err;\r\n    switch (ret) {\r\n      case NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE:\r\n        err = new ERR_HTTP2_OUT_OF_STREAMS();\r\n        this.destroy(err);\r\n        break;\r\n      case NGHTTP2_ERR_INVALID_ARGUMENT:\r\n        err = new ERR_HTTP2_STREAM_SELF_DEPENDENCY();\r\n        this.destroy(err);\r\n        break;\r\n      default:\r\n        session.destroy(new NghttpError(ret));\r\n    }\r\n    return;\r\n  }\r\n  this[kInit](ret.id(), ret);\r\n}\r\n\r\n// Validates that priority options are correct, specifically:\r\n// 1. options.weight must be a number\r\n// 2. options.parent must be a positive number\r\n// 3. options.exclusive must be a boolean\r\n// 4. if specified, options.silent must be a boolean\r\n//\r\n// Also sets the default priority options if they are not set.\r\nconst setAndValidatePriorityOptions = hideStackFrames((options) => {\r\n  if (options.weight === undefined) {\r\n    options.weight = NGHTTP2_DEFAULT_WEIGHT;\r\n  } else {\r\n    validateNumber.withoutStackTrace(options.weight, 'options.weight');\r\n  }\r\n\r\n  if (options.parent === undefined) {\r\n    options.parent = 0;\r\n  } else {\r\n    validateNumber.withoutStackTrace(options.parent, 'options.parent', 0);\r\n  }\r\n\r\n  if (options.exclusive === undefined) {\r\n    options.exclusive = false;\r\n  } else {\r\n    validateBoolean.withoutStackTrace(options.exclusive, 'options.exclusive');\r\n  }\r\n\r\n  if (options.silent === undefined) {\r\n    options.silent = false;\r\n  } else {\r\n    validateBoolean.withoutStackTrace(options.silent, 'options.silent');\r\n  }\r\n});\r\n\r\n// When an error occurs internally at the binding level, immediately\r\n// destroy the session.\r\nfunction onSessionInternalError(integerCode, customErrorCode) {\r\n  if (this[kOwner] !== undefined)\r\n    this[kOwner].destroy(new NghttpError(integerCode, customErrorCode));\r\n}\r\n\r\nfunction settingsCallback(cb, ack, duration) {\r\n  this[kState].pendingAck--;\r\n  this[kLocalSettings] = undefined;\r\n  if (ack) {\r\n    debugSessionObj(this, 'settings received');\r\n    const settings = this.localSettings;\r\n    if (typeof cb === 'function')\r\n      cb(null, settings, duration);\r\n    this.emit('localSettings', settings);\r\n  } else {\r\n    debugSessionObj(this, 'settings canceled');\r\n    if (typeof cb === 'function')\r\n      cb(new ERR_HTTP2_SETTINGS_CANCEL());\r\n  }\r\n}\r\n\r\n// Submits a SETTINGS frame to be sent to the remote peer.\r\nfunction submitSettings(settings, callback) {\r\n  if (this.destroyed)\r\n    return;\r\n  debugSessionObj(this, 'submitting settings');\r\n  this[kUpdateTimer]();\r\n  updateSettingsBuffer(settings);\r\n  if (!this[kHandle].settings(FunctionPrototypeBind(settingsCallback,\r\n                                                    this, callback))) {\r\n    this.destroy(new ERR_HTTP2_MAX_PENDING_SETTINGS_ACK());\r\n  }\r\n}\r\n\r\n// Submits a PRIORITY frame to be sent to the remote peer\r\n// Note: If the silent option is true, the change will be made\r\n// locally with no PRIORITY frame sent.\r\nfunction submitPriority(options) {\r\n  if (this.destroyed)\r\n    return;\r\n  this[kUpdateTimer]();\r\n\r\n  // If the parent is the id, do nothing because a\r\n  // stream cannot be made to depend on itself.\r\n  if (options.parent === this[kID])\r\n    return;\r\n\r\n  this[kHandle].priority(options.parent | 0,\r\n                         options.weight | 0,\r\n                         !!options.exclusive,\r\n                         !!options.silent);\r\n}\r\n\r\n// Submit a GOAWAY frame to be sent to the remote peer.\r\n// If the lastStreamID is set to <= 0, then the lastProcStreamID will\r\n// be used. The opaqueData must either be a typed array or undefined\r\n// (which will be checked elsewhere).\r\nfunction submitGoaway(code, lastStreamID, opaqueData) {\r\n  if (this.destroyed)\r\n    return;\r\n  debugSessionObj(this, 'submitting goaway');\r\n  this[kUpdateTimer]();\r\n  this[kHandle].goaway(code, lastStreamID, opaqueData);\r\n}\r\n\r\nconst proxySocketHandler = {\r\n  get(session, prop) {\r\n    switch (prop) {\r\n      case 'setTimeout':\r\n      case 'ref':\r\n      case 'unref':\r\n        return FunctionPrototypeBind(session[prop], session);\r\n      case 'destroy':\r\n      case 'emit':\r\n      case 'end':\r\n      case 'pause':\r\n      case 'read':\r\n      case 'resume':\r\n      case 'write':\r\n      case 'setEncoding':\r\n      case 'setKeepAlive':\r\n      case 'setNoDelay':\r\n        throw new ERR_HTTP2_NO_SOCKET_MANIPULATION();\r\n      default: {\r\n        const socket = session[kSocket];\r\n        if (socket === undefined)\r\n          throw new ERR_HTTP2_SOCKET_UNBOUND();\r\n        const value = socket[prop];\r\n        return typeof value === 'function' ?\r\n          FunctionPrototypeBind(value, socket) :\r\n          value;\r\n      }\r\n    }\r\n  },\r\n  getPrototypeOf(session) {\r\n    const socket = session[kSocket];\r\n    if (socket === undefined)\r\n      throw new ERR_HTTP2_SOCKET_UNBOUND();\r\n    return ReflectGetPrototypeOf(socket);\r\n  },\r\n  set(session, prop, value) {\r\n    switch (prop) {\r\n      case 'setTimeout':\r\n      case 'ref':\r\n      case 'unref':\r\n        session[prop] = value;\r\n        return true;\r\n      case 'destroy':\r\n      case 'emit':\r\n      case 'end':\r\n      case 'pause':\r\n      case 'read':\r\n      case 'resume':\r\n      case 'write':\r\n      case 'setEncoding':\r\n      case 'setKeepAlive':\r\n      case 'setNoDelay':\r\n        throw new ERR_HTTP2_NO_SOCKET_MANIPULATION();\r\n      default: {\r\n        const socket = session[kSocket];\r\n        if (socket === undefined)\r\n          throw new ERR_HTTP2_SOCKET_UNBOUND();\r\n        socket[prop] = value;\r\n        return true;\r\n      }\r\n    }\r\n  },\r\n};\r\n\r\n// pingCallback() returns a function that is invoked when an HTTP2 PING\r\n// frame acknowledgement is received. The ack is either true or false to\r\n// indicate if the ping was successful or not. The duration indicates the\r\n// number of milliseconds elapsed since the ping was sent and the ack\r\n// received. The payload is a Buffer containing the 8 bytes of payload\r\n// data received on the PING acknowledgement.\r\nfunction pingCallback(cb) {\r\n  return function pingCallback(ack, duration, payload) {\r\n    if (ack) {\r\n      cb(null, duration, payload);\r\n    } else {\r\n      cb(new ERR_HTTP2_PING_CANCEL());\r\n    }\r\n  };\r\n}\r\n\r\n// Validates the values in a settings object. Specifically:\r\n// 1. headerTableSize must be a number in the range 0 <= n <= kMaxInt\r\n// 2. initialWindowSize must be a number in the range 0 <= n <= kMaxInt\r\n// 3. maxFrameSize must be a number in the range 16384 <= n <= kMaxFrameSize\r\n// 4. maxConcurrentStreams must be a number in the range 0 <= n <= kMaxStreams\r\n// 5. maxHeaderListSize must be a number in the range 0 <= n <= kMaxInt\r\n// 6. enablePush must be a boolean\r\n// 7. enableConnectProtocol must be a boolean\r\n// All settings are optional and may be left undefined\r\nconst validateSettings = hideStackFrames((settings) => {\r\n  if (settings === undefined) return;\r\n  assertIsObject.withoutStackTrace(settings.customSettings, 'customSettings', 'Number');\r\n  if (settings.customSettings) {\r\n    const entries = ObjectEntries(settings.customSettings);\r\n    if (entries.length > MAX_ADDITIONAL_SETTINGS)\r\n      throw new ERR_HTTP2_TOO_MANY_CUSTOM_SETTINGS();\r\n    for (const { 0: key, 1: value } of entries) {\r\n      assertWithinRange.withoutStackTrace('customSettings:id', Number(key), 0, 0xffff);\r\n      assertWithinRange.withoutStackTrace('customSettings:value', Number(value), 0, kMaxInt);\r\n    }\r\n  }\r\n\r\n  assertWithinRange.withoutStackTrace('headerTableSize',\r\n                                      settings.headerTableSize,\r\n                                      0, kMaxInt);\r\n  assertWithinRange.withoutStackTrace('initialWindowSize',\r\n                                      settings.initialWindowSize,\r\n                                      0, kMaxInt);\r\n  assertWithinRange.withoutStackTrace('maxFrameSize',\r\n                                      settings.maxFrameSize,\r\n                                      16384, kMaxFrameSize);\r\n  assertWithinRange.withoutStackTrace('maxConcurrentStreams',\r\n                                      settings.maxConcurrentStreams,\r\n                                      0, kMaxStreams);\r\n  assertWithinRange.withoutStackTrace('maxHeaderListSize',\r\n                                      settings.maxHeaderListSize,\r\n                                      0, kMaxInt);\r\n  assertWithinRange.withoutStackTrace('maxHeaderSize',\r\n                                      settings.maxHeaderSize,\r\n                                      0, kMaxInt);\r\n  if (settings.enablePush !== undefined &&\r\n      typeof settings.enablePush !== 'boolean') {\r\n    throw new ERR_HTTP2_INVALID_SETTING_VALUE.HideStackFramesError('enablePush',\r\n                                                                   settings.enablePush);\r\n  }\r\n  if (settings.enableConnectProtocol !== undefined &&\r\n      typeof settings.enableConnectProtocol !== 'boolean') {\r\n    throw new ERR_HTTP2_INVALID_SETTING_VALUE.HideStackFramesError('enableConnectProtocol',\r\n                                                                   settings.enableConnectProtocol);\r\n  }\r\n});\r\n\r\n// Wrap a typed array in a proxy, and allow selectively copying the entries\r\n// that have explicitly been set to another typed array.\r\nfunction trackAssignmentsTypedArray(typedArray) {\r\n  const typedArrayLength = TypedArrayPrototypeGetLength(typedArray);\r\n  const modifiedEntries = new Uint8Array(typedArrayLength);\r\n\r\n  function copyAssigned(target) {\r\n    for (let i = 0; i < typedArrayLength; i++) {\r\n      if (modifiedEntries[i]) {\r\n        target[i] = typedArray[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Proxy(typedArray, {\r\n    __proto__: null,\r\n    get(obj, prop, receiver) {\r\n      if (prop === 'copyAssigned') {\r\n        return copyAssigned;\r\n      }\r\n      return ReflectGet(obj, prop, receiver);\r\n    },\r\n    set(obj, prop, value) {\r\n      if (`${+prop}` === prop) {\r\n        modifiedEntries[prop] = 1;\r\n      }\r\n      return ReflectSet(obj, prop, value);\r\n    },\r\n  });\r\n}\r\n\r\n// Creates the internal binding.Http2Session handle for an Http2Session\r\n// instance. This occurs only after the socket connection has been\r\n// established. Note: the binding.Http2Session will take over ownership\r\n// of the socket. No other code should read from or write to the socket.\r\nfunction setupHandle(socket, type, options) {\r\n  // If the session has been destroyed, go ahead and emit 'connect',\r\n  // but do nothing else. The various on('connect') handlers set by\r\n  // core will check for session.destroyed before progressing, this\r\n  // ensures that those at l`east get cleared out.\r\n  if (this.destroyed) {\r\n    process.nextTick(emit, this, 'connect', this, socket);\r\n    return;\r\n  }\r\n\r\n  assert(socket._handle !== undefined,\r\n         'Internal HTTP/2 Failure. The socket is not connected. Please ' +\r\n         'report this as a bug in Node.js');\r\n\r\n  debugSession(type, 'setting up session handle');\r\n  this[kState].flags |= SESSION_FLAGS_READY;\r\n\r\n  updateOptionsBuffer(options);\r\n  if (options.remoteCustomSettings) {\r\n    remoteCustomSettingsToBuffer(options.remoteCustomSettings);\r\n  }\r\n  const handle = new binding.Http2Session(type);\r\n  handle[kOwner] = this;\r\n\r\n  if (typeof options.selectPadding === 'function')\r\n    this[kSelectPadding] = options.selectPadding;\r\n  handle.consume(socket._handle);\r\n\r\n  this[kHandle] = handle;\r\n  if (this[kNativeFields]) {\r\n    // If some options have already been set before the handle existed, copy\r\n    // those (and only those) that have manually been set over.\r\n    this[kNativeFields].copyAssigned(handle.fields);\r\n  }\r\n\r\n  this[kNativeFields] = handle.fields;\r\n\r\n  if (socket.encrypted) {\r\n    this[kAlpnProtocol] = socket.alpnProtocol;\r\n    this[kEncrypted] = true;\r\n  } else {\r\n    // 'h2c' is the protocol identifier for HTTP/2 over plain-text. We use\r\n    // it here to identify any session that is not explicitly using an\r\n    // encrypted socket.\r\n    this[kAlpnProtocol] = 'h2c';\r\n    this[kEncrypted] = false;\r\n  }\r\n\r\n  if (isUint32(options.maxSessionInvalidFrames)) {\r\n    const uint32 = new Uint32Array(\r\n      this[kNativeFields].buffer, kSessionMaxInvalidFrames, 1);\r\n    uint32[0] = options.maxSessionInvalidFrames;\r\n  }\r\n\r\n  if (isUint32(options.maxSessionRejectedStreams)) {\r\n    const uint32 = new Uint32Array(\r\n      this[kNativeFields].buffer, kSessionMaxRejectedStreams, 1);\r\n    uint32[0] = options.maxSessionRejectedStreams;\r\n  }\r\n\r\n  const settings = typeof options.settings === 'object' ?\r\n    options.settings : {};\r\n\r\n  this.settings(settings);\r\n\r\n  if (type === NGHTTP2_SESSION_SERVER &&\r\n      ArrayIsArray(options.origins)) {\r\n    ReflectApply(this.origin, this, options.origins);\r\n  }\r\n\r\n  process.nextTick(emit, this, 'connect', this, socket);\r\n}\r\n\r\n// Emits a close event followed by an error event if err is truthy. Used\r\n// by Http2Session.prototype.destroy()\r\nfunction emitClose(self, error) {\r\n  if (error)\r\n    self.emit('error', error);\r\n  self.emit('close');\r\n}\r\n\r\nfunction cleanupSession(session) {\r\n  const socket = session[kSocket];\r\n  const handle = session[kHandle];\r\n  session[kProxySocket] = undefined;\r\n  session[kSocket] = undefined;\r\n  session[kHandle] = undefined;\r\n  session[kNativeFields] = trackAssignmentsTypedArray(\r\n    new Uint8Array(kSessionUint8FieldCount));\r\n  if (handle)\r\n    handle.ondone = null;\r\n  if (socket) {\r\n    socket[kBoundSession] = undefined;\r\n    socket[kServer] = undefined;\r\n  }\r\n}\r\n\r\nfunction finishSessionClose(session, error) {\r\n  debugSessionObj(session, 'finishSessionClose');\r\n\r\n  const socket = session[kSocket];\r\n  cleanupSession(session);\r\n\r\n  if (socket && !socket.destroyed) {\r\n    socket.on('close', () => {\r\n      emitClose(session, error);\r\n    });\r\n    if (session.closed) {\r\n      // If we're gracefully closing the socket, call resume() so we can detect\r\n      // the peer closing in case binding.Http2Session is already gone.\r\n      socket.resume();\r\n    }\r\n\r\n    // Always wait for writable side to finish.\r\n    socket.end((err) => {\r\n      debugSessionObj(session, 'finishSessionClose socket end', err, error);\r\n      // If session.destroy() was called, destroy the underlying socket. Delay\r\n      // it a bit to try to avoid ECONNRESET on Windows.\r\n      if (!session.closed) {\r\n        setImmediate(() => {\r\n          socket.destroy(error);\r\n        });\r\n      }\r\n    });\r\n  } else {\r\n    process.nextTick(emitClose, session, error);\r\n  }\r\n}\r\n\r\nfunction closeSession(session, code, error) {\r\n  debugSessionObj(session, 'start closing/destroying', error);\r\n\r\n  const state = session[kState];\r\n  state.flags |= SESSION_FLAGS_DESTROYED;\r\n  state.destroyCode = code;\r\n\r\n  // Clear timeout and remove timeout listeners.\r\n  session.setTimeout(0);\r\n  session.removeAllListeners('timeout');\r\n\r\n  // Destroy any pending and open streams\r\n  if (state.pendingStreams.size > 0 || state.streams.size > 0) {\r\n    const cancel = new ERR_HTTP2_STREAM_CANCEL(error);\r\n    state.pendingStreams.forEach((stream) => stream.destroy(cancel));\r\n    state.streams.forEach((stream) => stream.destroy(error));\r\n  }\r\n\r\n  // Disassociate from the socket and server.\r\n  const socket = session[kSocket];\r\n  const handle = session[kHandle];\r\n\r\n  // Destroy the handle if it exists at this point.\r\n  if (handle !== undefined) {\r\n    handle.ondone = FunctionPrototypeBind(finishSessionClose,\r\n                                          null, session, error);\r\n    handle.destroy(code, socket.destroyed);\r\n  } else {\r\n    finishSessionClose(session, error);\r\n  }\r\n}\r\n\r\n// Upon creation, the Http2Session takes ownership of the socket. The session\r\n// may not be ready to use immediately if the socket is not yet fully connected.\r\n// In that case, the Http2Session will wait for the socket to connect. Once\r\n// the Http2Session is ready, it will emit its own 'connect' event.\r\n//\r\n// The Http2Session.goaway() method will send a GOAWAY frame, signalling\r\n// to the connected peer that a shutdown is in progress. Sending a goaway\r\n// frame has no other effect, however.\r\n//\r\n// Receiving a GOAWAY frame will cause the Http2Session to first emit a 'goaway'\r\n// event notifying the user that a shutdown is in progress. If the goaway\r\n// error code equals 0 (NGHTTP2_NO_ERROR), session.close() will be called,\r\n// causing the Http2Session to send its own GOAWAY frame and switch itself\r\n// into a graceful closing state. In this state, new inbound or outbound\r\n// Http2Streams will be rejected. Existing *pending* streams (those created\r\n// but without an assigned stream ID or handle) will be destroyed with a\r\n// cancel error. Existing open streams will be permitted to complete on their\r\n// own. Once all existing streams close, session.destroy() will be called\r\n// automatically.\r\n//\r\n// Calling session.destroy() will tear down the Http2Session immediately,\r\n// making it no longer usable. Pending and existing streams will be destroyed.\r\n// The bound socket will be destroyed. Once all resources have been freed up,\r\n// the 'close' event will be emitted. Note that pending streams will be\r\n// destroyed using a specific \"ERR_HTTP2_STREAM_CANCEL\" error. Existing open\r\n// streams will be destroyed using the same error passed to session.destroy()\r\n//\r\n// If destroy is called with an error, an 'error' event will be emitted\r\n// immediately following the 'close' event.\r\n//\r\n// The socket and Http2Session lifecycles are tightly bound. Once one is\r\n// destroyed, the other should also be destroyed. When the socket is destroyed\r\n// with an error, session.destroy() will be called with that same error.\r\n// Likewise, when session.destroy() is called with an error, the same error\r\n// will be sent to the socket.\r\nclass Http2Session extends EventEmitter {\r\n  constructor(type, options, socket) {\r\n    super();\r\n\r\n    // No validation is performed on the input parameters because this\r\n    // constructor is not exported directly for users.\r\n\r\n    // If the session property already exists on the socket,\r\n    // then it has already been bound to an Http2Session instance\r\n    // and cannot be attached again.\r\n    if (socket[kBoundSession] !== undefined)\r\n      throw new ERR_HTTP2_SOCKET_BOUND();\r\n\r\n    socket[kBoundSession] = this;\r\n\r\n    if (!socket._handle || !socket._handle.isStreamBase) {\r\n      socket = new JSStreamSocket(socket);\r\n    }\r\n    socket.on('error', socketOnError);\r\n    socket.on('close', socketOnClose);\r\n\r\n    this[kState] = {\r\n      destroyCode: NGHTTP2_NO_ERROR,\r\n      flags: SESSION_FLAGS_PENDING,\r\n      goawayCode: null,\r\n      goawayLastStreamID: null,\r\n      streams: new SafeMap(),\r\n      pendingStreams: new SafeSet(),\r\n      pendingAck: 0,\r\n      shutdownWritableCalled: false,\r\n      writeQueueSize: 0,\r\n      originSet: undefined,\r\n    };\r\n\r\n    this[kEncrypted] = undefined;\r\n    this[kAlpnProtocol] = undefined;\r\n    this[kType] = type;\r\n    this[kProxySocket] = null;\r\n    this[kSocket] = socket;\r\n    this[kTimeout] = null;\r\n    this[kHandle] = undefined;\r\n\r\n    // Do not use nagle's algorithm\r\n    if (typeof socket.setNoDelay === 'function')\r\n      socket.setNoDelay();\r\n\r\n    // Disable TLS renegotiation on the socket\r\n    if (typeof socket.disableRenegotiation === 'function')\r\n      socket.disableRenegotiation();\r\n\r\n    const setupFn = FunctionPrototypeBind(setupHandle, this,\r\n                                          socket, type, options);\r\n    if (socket.connecting || socket.secureConnecting) {\r\n      const connectEvent =\r\n        socket instanceof tls.TLSSocket ? 'secureConnect' : 'connect';\r\n      socket.once(connectEvent, () => {\r\n        try {\r\n          setupFn();\r\n        } catch (error) {\r\n          socket.destroy(error);\r\n        }\r\n      });\r\n    } else {\r\n      setupFn();\r\n    }\r\n\r\n    if (!this[kNativeFields]) {\r\n      this[kNativeFields] = trackAssignmentsTypedArray(\r\n        new Uint8Array(kSessionUint8FieldCount));\r\n    }\r\n    this.on('newListener', sessionListenerAdded);\r\n    this.on('removeListener', sessionListenerRemoved);\r\n\r\n    // Process data on the next tick - a remoteSettings handler may be attached.\r\n    // https://github.com/nodejs/node/issues/35981\r\n    process.nextTick(() => {\r\n      // Socket already has some buffered data - emulate receiving it\r\n      // https://github.com/nodejs/node/issues/35475\r\n      // https://github.com/nodejs/node/issues/34532\r\n      if (socket.readableLength) {\r\n        let buf;\r\n        while ((buf = socket.read()) !== null) {\r\n          debugSession(type, `${buf.length} bytes already in buffer`);\r\n          this[kHandle].receive(buf);\r\n        }\r\n      }\r\n    });\r\n\r\n    debugSession(type, 'created');\r\n  }\r\n\r\n  // Returns undefined if the socket is not yet connected, true if the\r\n  // socket is a TLSSocket, and false if it is not.\r\n  get encrypted() {\r\n    return this[kEncrypted];\r\n  }\r\n\r\n  // Returns undefined if the socket is not yet connected, `h2` if the\r\n  // socket is a TLSSocket and the alpnProtocol is `h2`, or `h2c` if the\r\n  // socket is not a TLSSocket.\r\n  get alpnProtocol() {\r\n    return this[kAlpnProtocol];\r\n  }\r\n\r\n  // TODO(jasnell): originSet is being added in preparation for ORIGIN frame\r\n  // support. At the current time, the ORIGIN frame specification is awaiting\r\n  // publication as an RFC and is awaiting implementation in nghttp2. Once\r\n  // added, an ORIGIN frame will add to the origins included in the origin\r\n  // set. 421 responses will remove origins from the set.\r\n  get originSet() {\r\n    if (!this.encrypted || this.destroyed)\r\n      return undefined;\r\n    return ArrayFrom(initOriginSet(this));\r\n  }\r\n\r\n  // True if the Http2Session is still waiting for the socket to connect\r\n  get connecting() {\r\n    return (this[kState].flags & SESSION_FLAGS_READY) === 0;\r\n  }\r\n\r\n  // True if Http2Session.prototype.close() has been called\r\n  get closed() {\r\n    return !!(this[kState].flags & SESSION_FLAGS_CLOSED);\r\n  }\r\n\r\n  // True if Http2Session.prototype.destroy() has been called\r\n  get destroyed() {\r\n    return !!(this[kState].flags & SESSION_FLAGS_DESTROYED);\r\n  }\r\n\r\n  // Resets the timeout counter\r\n  [kUpdateTimer]() {\r\n    if (this.destroyed)\r\n      return;\r\n    if (this[kTimeout]) this[kTimeout].refresh();\r\n  }\r\n\r\n  // Sets the id of the next stream to be created by this Http2Session.\r\n  // The value must be a number in the range 0 <= n <= kMaxStreams. The\r\n  // value also needs to be larger than the current next stream ID.\r\n  setNextStreamID(id) {\r\n    if (this.destroyed)\r\n      throw new ERR_HTTP2_INVALID_SESSION();\r\n\r\n    validateNumber(id, 'id');\r\n    if (id <= 0 || id > kMaxStreams)\r\n      throw new ERR_OUT_OF_RANGE('id', `> 0 and <= ${kMaxStreams}`, id);\r\n    this[kHandle].setNextStreamID(id);\r\n  }\r\n\r\n  // Sets the local window size (local endpoints's window size)\r\n  // Returns 0 if success or throw an exception if NGHTTP2_ERR_NOMEM\r\n  // if the window allocation fails\r\n  setLocalWindowSize(windowSize) {\r\n    if (this.destroyed)\r\n      throw new ERR_HTTP2_INVALID_SESSION();\r\n\r\n    validateInt32(windowSize, 'windowSize', 0);\r\n    const ret = this[kHandle].setLocalWindowSize(windowSize);\r\n\r\n    if (ret === NGHTTP2_ERR_NOMEM) {\r\n      this.destroy(new ERR_HTTP2_NO_MEM());\r\n    }\r\n  }\r\n\r\n  // If ping is called while we are still connecting, or after close() has\r\n  // been called, the ping callback will be invoked immediately with a ping\r\n  // cancelled error and a duration of 0.0.\r\n  ping(payload, callback) {\r\n    if (this.destroyed)\r\n      throw new ERR_HTTP2_INVALID_SESSION();\r\n\r\n    if (typeof payload === 'function') {\r\n      callback = payload;\r\n      payload = undefined;\r\n    }\r\n    if (payload) {\r\n      validateBuffer(payload, 'payload');\r\n    }\r\n    if (payload && payload.length !== 8) {\r\n      throw new ERR_HTTP2_PING_LENGTH();\r\n    }\r\n    validateFunction(callback, 'callback');\r\n\r\n    const cb = pingCallback(callback);\r\n    if (this.connecting || this.closed) {\r\n      process.nextTick(cb, false, 0.0, payload);\r\n      return;\r\n    }\r\n\r\n    return this[kHandle].ping(payload, cb);\r\n  }\r\n\r\n  [kInspect](depth, opts) {\r\n    if (typeof depth === 'number' && depth < 0)\r\n      return this;\r\n\r\n    const obj = {\r\n      type: this[kType],\r\n      closed: this.closed,\r\n      destroyed: this.destroyed,\r\n      state: this.state,\r\n      localSettings: this.localSettings,\r\n      remoteSettings: this.remoteSettings,\r\n    };\r\n    return `Http2Session ${format(obj)}`;\r\n  }\r\n\r\n  // The socket owned by this session\r\n  get socket() {\r\n    const proxySocket = this[kProxySocket];\r\n    if (proxySocket === null)\r\n      return this[kProxySocket] = new Proxy(this, proxySocketHandler);\r\n    return proxySocket;\r\n  }\r\n\r\n  // The session type\r\n  get type() {\r\n    return this[kType];\r\n  }\r\n\r\n  // If a GOAWAY frame has been received, gives the error code specified\r\n  get goawayCode() {\r\n    return this[kState].goawayCode || NGHTTP2_NO_ERROR;\r\n  }\r\n\r\n  // If a GOAWAY frame has been received, gives the last stream ID reported\r\n  get goawayLastStreamID() {\r\n    return this[kState].goawayLastStreamID || 0;\r\n  }\r\n\r\n  // True if the Http2Session is waiting for a settings acknowledgement\r\n  get pendingSettingsAck() {\r\n    return this[kState].pendingAck > 0;\r\n  }\r\n\r\n  // Retrieves state information for the Http2Session\r\n  get state() {\r\n    return this.connecting || this.destroyed ?\r\n      {} : getSessionState(this[kHandle]);\r\n  }\r\n\r\n  // The settings currently in effect for the local peer. These will\r\n  // be updated only when a settings acknowledgement has been received.\r\n  get localSettings() {\r\n    const settings = this[kLocalSettings];\r\n    if (settings !== undefined)\r\n      return settings;\r\n\r\n    if (this.destroyed || this.connecting)\r\n      return {};\r\n\r\n    return this[kLocalSettings] = getSettings(this[kHandle], false); // Local\r\n  }\r\n\r\n  // The settings currently in effect for the remote peer.\r\n  get remoteSettings() {\r\n    if (this[kNativeFields][kBitfield] &\r\n        (1 << kSessionRemoteSettingsIsUpToDate)) {\r\n      const settings = this[kRemoteSettings];\r\n      if (settings !== undefined) {\r\n        return settings;\r\n      }\r\n    }\r\n\r\n    if (this.destroyed || this.connecting)\r\n      return {};\r\n\r\n    this[kNativeFields][kBitfield] |= (1 << kSessionRemoteSettingsIsUpToDate);\r\n    return this[kRemoteSettings] = getSettings(this[kHandle], true); // Remote\r\n  }\r\n\r\n  // Submits a SETTINGS frame to be sent to the remote peer.\r\n  settings(settings, callback) {\r\n    if (this.destroyed)\r\n      throw new ERR_HTTP2_INVALID_SESSION();\r\n    assertIsObject(settings, 'settings');\r\n    validateSettings(settings);\r\n\r\n    if (callback) {\r\n      validateFunction(callback, 'callback');\r\n    }\r\n    debugSessionObj(this, 'sending settings');\r\n\r\n    this[kState].pendingAck++;\r\n\r\n    const settingsFn = FunctionPrototypeBind(submitSettings, this,\r\n                                             { ...settings }, callback);\r\n    if (this.connecting) {\r\n      this.once('connect', settingsFn);\r\n      return;\r\n    }\r\n    settingsFn();\r\n  }\r\n\r\n  // Submits a GOAWAY frame to be sent to the remote peer. Note that this\r\n  // is only a notification, and does not affect the usable state of the\r\n  // session with the notable exception that new incoming streams will\r\n  // be rejected automatically.\r\n  goaway(code = NGHTTP2_NO_ERROR, lastStreamID = 0, opaqueData) {\r\n    if (this.destroyed)\r\n      throw new ERR_HTTP2_INVALID_SESSION();\r\n\r\n    if (opaqueData !== undefined) {\r\n      validateBuffer(opaqueData, 'opaqueData');\r\n    }\r\n    validateNumber(code, 'code');\r\n    validateNumber(lastStreamID, 'lastStreamID');\r\n\r\n    const goawayFn = FunctionPrototypeBind(submitGoaway,\r\n                                           this,\r\n                                           code, lastStreamID, opaqueData);\r\n    if (this.connecting) {\r\n      this.once('connect', goawayFn);\r\n      return;\r\n    }\r\n    goawayFn();\r\n  }\r\n\r\n  // Destroy the Http2Session, making it no longer usable and cancelling\r\n  // any pending activity.\r\n  destroy(error = NGHTTP2_NO_ERROR, code) {\r\n    if (this.destroyed)\r\n      return;\r\n\r\n    debugSessionObj(this, 'destroying');\r\n\r\n    if (typeof error === 'number') {\r\n      code = error;\r\n      error =\r\n        code !== NGHTTP2_NO_ERROR ?\r\n          new ERR_HTTP2_SESSION_ERROR(code) : undefined;\r\n    }\r\n    if (code === undefined && error != null)\r\n      code = NGHTTP2_INTERNAL_ERROR;\r\n\r\n    closeSession(this, code, error);\r\n  }\r\n\r\n  // Closing the session will:\r\n  // 1. Send a goaway frame\r\n  // 2. Mark the session as closed\r\n  // 3. Prevent new inbound or outbound streams from being opened\r\n  // 4. Optionally register a 'close' event handler\r\n  // 5. Will cause the session to automatically destroy after the\r\n  //    last currently open Http2Stream closes.\r\n  //\r\n  // Close always assumes a good, non-error shutdown (NGHTTP_NO_ERROR)\r\n  //\r\n  // If the session has not connected yet, the closed flag will still be\r\n  // set but the goaway will not be sent until after the connect event\r\n  // is emitted.\r\n  close(callback) {\r\n    if (this.closed || this.destroyed)\r\n      return;\r\n    debugSessionObj(this, 'marking session closed');\r\n    this[kState].flags |= SESSION_FLAGS_CLOSED;\r\n    if (typeof callback === 'function')\r\n      this.once('close', callback);\r\n    this.goaway();\r\n    this[kMaybeDestroy]();\r\n  }\r\n\r\n  [EventEmitter.captureRejectionSymbol](err, event, ...args) {\r\n    switch (event) {\r\n      case 'stream': {\r\n        const stream = args[0];\r\n        stream.destroy(err);\r\n        break;\r\n      }\r\n      default:\r\n        this.destroy(err);\r\n    }\r\n  }\r\n\r\n  // Destroy the session if:\r\n  // * error is not undefined/null\r\n  // * session is closed and there are no more pending or open streams\r\n  [kMaybeDestroy](error) {\r\n    if (error == null) {\r\n      const state = this[kState];\r\n      // Do not destroy if we're not closed and there are pending/open streams\r\n      if (!this.closed ||\r\n          state.streams.size > 0 ||\r\n          state.pendingStreams.size > 0) {\r\n        return;\r\n      }\r\n    }\r\n    this.destroy(error);\r\n  }\r\n\r\n  _onTimeout() {\r\n    callTimeout(this, this);\r\n  }\r\n\r\n  ref() {\r\n    if (this[kSocket]) {\r\n      this[kSocket].ref();\r\n    }\r\n  }\r\n\r\n  unref() {\r\n    if (this[kSocket]) {\r\n      this[kSocket].unref();\r\n    }\r\n  }\r\n}\r\n\r\n// ServerHttp2Session instances should never have to wait for the socket\r\n// to connect as they are always created after the socket has already been\r\n// established.\r\nclass ServerHttp2Session extends Http2Session {\r\n  constructor(options, socket, server) {\r\n    super(NGHTTP2_SESSION_SERVER, options, socket);\r\n    this[kServer] = server;\r\n    // This is a bit inaccurate because it does not reflect changes to\r\n    // number of listeners made after the session was created. This should\r\n    // not be an issue in practice. Additionally, the 'priority' event on\r\n    // server instances (or any other object) is fully undocumented.\r\n    this[kNativeFields][kSessionPriorityListenerCount] =\r\n      server ? server.listenerCount('priority') : 0;\r\n  }\r\n\r\n  get server() {\r\n    return this[kServer];\r\n  }\r\n\r\n  // Submits an altsvc frame to be sent to the client. `stream` is a\r\n  // numeric Stream ID. origin is a URL string that will be used to get\r\n  // the origin. alt is a string containing the altsvc details. No fancy\r\n  // API is provided for that.\r\n  altsvc(alt, originOrStream) {\r\n    if (this.destroyed)\r\n      throw new ERR_HTTP2_INVALID_SESSION();\r\n\r\n    let stream = 0;\r\n    let origin;\r\n\r\n    if (typeof originOrStream === 'string') {\r\n      origin = getURLOrigin(originOrStream);\r\n      if (origin === 'null')\r\n        throw new ERR_HTTP2_ALTSVC_INVALID_ORIGIN();\r\n    } else if (typeof originOrStream === 'number') {\r\n      if (originOrStream >>> 0 !== originOrStream || originOrStream === 0) {\r\n        throw new ERR_OUT_OF_RANGE('originOrStream',\r\n                                   `> 0 && < ${2 ** 32}`, originOrStream);\r\n      }\r\n      stream = originOrStream;\r\n    } else if (originOrStream !== undefined) {\r\n      // Allow origin to be passed a URL or object with origin property\r\n      if (originOrStream !== null && typeof originOrStream === 'object')\r\n        origin = originOrStream.origin;\r\n      // Note: if originOrStream is an object with an origin property other\r\n      // than a URL, then it is possible that origin will be malformed.\r\n      // We do not verify that here. Users who go that route need to\r\n      // ensure they are doing the right thing or the payload data will\r\n      // be invalid.\r\n      if (typeof origin !== 'string') {\r\n        throw new ERR_INVALID_ARG_TYPE('originOrStream',\r\n                                       ['string', 'number', 'URL', 'object'],\r\n                                       originOrStream);\r\n      } else if (origin === 'null' || origin.length === 0) {\r\n        throw new ERR_HTTP2_ALTSVC_INVALID_ORIGIN();\r\n      }\r\n    }\r\n\r\n    validateString(alt, 'alt');\r\n    if (RegExpPrototypeExec(kQuotedString, alt) === null)\r\n      throw new ERR_INVALID_CHAR('alt');\r\n\r\n    // Max length permitted for ALTSVC\r\n    if ((alt.length + (origin !== undefined ? origin.length : 0)) > kMaxALTSVC)\r\n      throw new ERR_HTTP2_ALTSVC_LENGTH();\r\n\r\n    this[kHandle].altsvc(stream, origin || '', alt);\r\n  }\r\n\r\n  // Submits an origin frame to be sent.\r\n  origin(...origins) {\r\n    if (this.destroyed)\r\n      throw new ERR_HTTP2_INVALID_SESSION();\r\n\r\n    if (origins.length === 0)\r\n      return;\r\n\r\n    let arr = '';\r\n    let len = 0;\r\n    const count = origins.length;\r\n    for (let i = 0; i < count; i++) {\r\n      let origin = origins[i];\r\n      if (typeof origin === 'string') {\r\n        origin = getURLOrigin(origin);\r\n      } else if (origin != null && typeof origin === 'object') {\r\n        origin = origin.origin;\r\n      }\r\n      validateString(origin, 'origin');\r\n      if (origin === 'null')\r\n        throw new ERR_HTTP2_INVALID_ORIGIN();\r\n\r\n      arr += `${origin}\\0`;\r\n      len += origin.length;\r\n    }\r\n\r\n    if (len > kMaxALTSVC)\r\n      throw new ERR_HTTP2_ORIGIN_LENGTH();\r\n\r\n    this[kHandle].origin(arr, count);\r\n  }\r\n\r\n}\r\n\r\n// ClientHttp2Session instances have to wait for the socket to connect after\r\n// they have been created. Various operations such as request() may be used,\r\n// but the actual protocol communication will only occur after the socket\r\n// has been connected.\r\nclass ClientHttp2Session extends Http2Session {\r\n  constructor(options, socket) {\r\n    super(NGHTTP2_SESSION_CLIENT, options, socket);\r\n    this[kPendingRequestCalls] = null;\r\n  }\r\n\r\n  // Submits a new HTTP2 request to the connected peer. Returns the\r\n  // associated Http2Stream instance.\r\n  request(headers, options) {\r\n    debugSessionObj(this, 'initiating request');\r\n\r\n    if (this.destroyed)\r\n      throw new ERR_HTTP2_INVALID_SESSION();\r\n\r\n    if (this.closed)\r\n      throw new ERR_HTTP2_GOAWAY_SESSION();\r\n\r\n    this[kUpdateTimer]();\r\n\r\n    if (headers !== null && headers !== undefined) {\r\n      const keys = ObjectKeys(headers);\r\n      for (let i = 0; i < keys.length; i++) {\r\n        const header = keys[i];\r\n        if (header[0] === ':') {\r\n          assertValidPseudoHeader(header);\r\n        } else if (header && !checkIsHttpToken(header))\r\n          this.destroy(new ERR_INVALID_HTTP_TOKEN('Header name', header));\r\n      }\r\n    }\r\n\r\n    assertIsObject(headers, 'headers');\r\n    assertIsObject(options, 'options');\r\n\r\n    headers = ObjectAssign({ __proto__: null }, headers);\r\n    options = { ...options };\r\n\r\n    if (headers[HTTP2_HEADER_METHOD] === undefined)\r\n      headers[HTTP2_HEADER_METHOD] = HTTP2_METHOD_GET;\r\n\r\n    const connect = headers[HTTP2_HEADER_METHOD] === HTTP2_METHOD_CONNECT;\r\n\r\n    if (!connect || headers[HTTP2_HEADER_PROTOCOL] !== undefined) {\r\n      if (getAuthority(headers) === undefined)\r\n        headers[HTTP2_HEADER_AUTHORITY] = this[kAuthority];\r\n      if (headers[HTTP2_HEADER_SCHEME] === undefined)\r\n        headers[HTTP2_HEADER_SCHEME] = StringPrototypeSlice(this[kProtocol],\r\n                                                            0, -1);\r\n      if (headers[HTTP2_HEADER_PATH] === undefined)\r\n        headers[HTTP2_HEADER_PATH] = '/';\r\n    } else {\r\n      if (headers[HTTP2_HEADER_AUTHORITY] === undefined)\r\n        throw new ERR_HTTP2_CONNECT_AUTHORITY();\r\n      if (headers[HTTP2_HEADER_SCHEME] !== undefined)\r\n        throw new ERR_HTTP2_CONNECT_SCHEME();\r\n      if (headers[HTTP2_HEADER_PATH] !== undefined)\r\n        throw new ERR_HTTP2_CONNECT_PATH();\r\n    }\r\n\r\n    setAndValidatePriorityOptions(options);\r\n\r\n    if (options.endStream === undefined) {\r\n      // For some methods, we know that a payload is meaningless, so end the\r\n      // stream by default if the user has not specifically indicated a\r\n      // preference.\r\n      options.endStream = isPayloadMeaningless(headers[HTTP2_HEADER_METHOD]);\r\n    } else {\r\n      validateBoolean(options.endStream, 'options.endStream');\r\n    }\r\n\r\n    const headersList = mapToHeaders(headers);\r\n\r\n    // eslint-disable-next-line no-use-before-define\r\n    const stream = new ClientHttp2Stream(this, undefined, undefined, {});\r\n    stream[kSentHeaders] = headers;\r\n    stream[kOrigin] = `${headers[HTTP2_HEADER_SCHEME]}://` +\r\n                      `${getAuthority(headers)}`;\r\n\r\n    // Close the writable side of the stream if options.endStream is set.\r\n    if (options.endStream)\r\n      stream.end();\r\n\r\n    if (options.waitForTrailers)\r\n      stream[kState].flags |= STREAM_FLAGS_HAS_TRAILERS;\r\n\r\n    const { signal } = options;\r\n    if (signal) {\r\n      validateAbortSignal(signal, 'options.signal');\r\n      const aborter = () => {\r\n        stream.destroy(new AbortError(undefined, { cause: signal.reason }));\r\n      };\r\n      if (signal.aborted) {\r\n        aborter();\r\n      } else {\r\n        const disposable = addAbortListener(signal, aborter);\r\n        stream.once('close', disposable[SymbolDispose]);\r\n      }\r\n    }\r\n\r\n    const onConnect = FunctionPrototypeBind(requestOnConnect,\r\n                                            stream, headersList, options);\r\n    if (this.connecting) {\r\n      if (this[kPendingRequestCalls] !== null) {\r\n        ArrayPrototypePush(this[kPendingRequestCalls], onConnect);\r\n      } else {\r\n        this[kPendingRequestCalls] = [onConnect];\r\n        this.once('connect', () => {\r\n          ArrayPrototypeForEach(this[kPendingRequestCalls], (f) => f());\r\n          this[kPendingRequestCalls] = null;\r\n        });\r\n      }\r\n    } else {\r\n      onConnect();\r\n    }\r\n    return stream;\r\n  }\r\n}\r\n\r\nfunction trackWriteState(stream, bytes) {\r\n  const session = stream[kSession];\r\n  stream[kState].writeQueueSize += bytes;\r\n  session[kState].writeQueueSize += bytes;\r\n  session[kHandle].chunksSentSinceLastWrite = 0;\r\n}\r\n\r\nfunction streamOnResume() {\r\n  if (!this.destroyed)\r\n    this[kHandle].readStart();\r\n}\r\n\r\nfunction streamOnPause() {\r\n  if (!this.destroyed && !this.pending)\r\n    this[kHandle].readStop();\r\n}\r\n\r\nfunction afterShutdown(status) {\r\n  const stream = this.handle[kOwner];\r\n  if (stream) {\r\n    stream.on('finish', () => {\r\n      stream[kMaybeDestroy]();\r\n    });\r\n  }\r\n  // Currently this status value is unused\r\n  this.callback();\r\n}\r\n\r\nfunction shutdownWritable(callback) {\r\n  const handle = this[kHandle];\r\n  if (!handle) return callback();\r\n  const state = this[kState];\r\n  if (state.shutdownWritableCalled) {\r\n    debugStreamObj(this, 'shutdownWritable() already called');\r\n    return callback();\r\n  }\r\n  state.shutdownWritableCalled = true;\r\n\r\n  const req = new ShutdownWrap();\r\n  req.oncomplete = afterShutdown;\r\n  req.callback = callback;\r\n  req.handle = handle;\r\n  const err = handle.shutdown(req);\r\n  if (err === 1)  // synchronous finish\r\n    return ReflectApply(afterShutdown, req, [0]);\r\n}\r\n\r\nfunction finishSendTrailers(stream, headersList) {\r\n  // The stream might be destroyed and in that case\r\n  // there is nothing to do.\r\n  // This can happen because finishSendTrailers is\r\n  // scheduled via setImmediate.\r\n  if (stream.destroyed) {\r\n    return;\r\n  }\r\n\r\n  stream[kState].flags &= ~STREAM_FLAGS_HAS_TRAILERS;\r\n\r\n  const ret = stream[kHandle].trailers(headersList);\r\n  if (ret < 0)\r\n    stream.destroy(new NghttpError(ret));\r\n  else\r\n    stream[kMaybeDestroy]();\r\n}\r\n\r\nconst kNoRstStream = 0;\r\nconst kSubmitRstStream = 1;\r\nconst kForceRstStream = 2;\r\n\r\nfunction closeStream(stream, code, rstStreamStatus = kSubmitRstStream) {\r\n  const state = stream[kState];\r\n  state.flags |= STREAM_FLAGS_CLOSED;\r\n  state.rstCode = code;\r\n\r\n  // Clear timeout and remove timeout listeners\r\n  stream.setTimeout(0);\r\n  stream.removeAllListeners('timeout');\r\n\r\n  const { ending } = stream._writableState;\r\n\r\n  if (!ending) {\r\n    // If the writable side of the Http2Stream is still open, emit the\r\n    // 'aborted' event and set the aborted flag.\r\n    if (!stream.aborted) {\r\n      state.flags |= STREAM_FLAGS_ABORTED;\r\n      stream.emit('aborted');\r\n    }\r\n\r\n    // Close the writable side.\r\n    stream.end();\r\n  }\r\n\r\n  if (rstStreamStatus !== kNoRstStream) {\r\n    const finishFn = FunctionPrototypeBind(finishCloseStream, stream, code);\r\n    if (!ending || stream.writableFinished || code !== NGHTTP2_NO_ERROR ||\r\n        rstStreamStatus === kForceRstStream)\r\n      finishFn();\r\n    else\r\n      stream.once('finish', finishFn);\r\n  }\r\n}\r\n\r\nfunction finishCloseStream(code) {\r\n  const rstStreamFn = FunctionPrototypeBind(submitRstStream, this, code);\r\n  // If the handle has not yet been assigned, queue up the request to\r\n  // ensure that the RST_STREAM frame is sent after the stream ID has\r\n  // been determined.\r\n  if (this.pending) {\r\n    this.push(null);\r\n    this.once('ready', rstStreamFn);\r\n    return;\r\n  }\r\n  rstStreamFn();\r\n}\r\n\r\n// An Http2Stream is a Duplex stream that is backed by a\r\n// node::http2::Http2Stream handle implementing StreamBase.\r\nclass Http2Stream extends Duplex {\r\n  constructor(session, options) {\r\n    options.allowHalfOpen = true;\r\n    options.decodeStrings = false;\r\n    options.autoDestroy = false;\r\n    super(options);\r\n    this[async_id_symbol] = -1;\r\n\r\n    // Corking the stream automatically allows writes to happen\r\n    // but ensures that those are buffered until the handle has\r\n    // been assigned.\r\n    this.cork();\r\n    this[kSession] = session;\r\n    session[kState].pendingStreams.add(this);\r\n\r\n    // Allow our logic for determining whether any reads have happened to\r\n    // work in all situations. This is similar to what we do in _http_incoming.\r\n    this._readableState.readingMore = true;\r\n\r\n    this[kTimeout] = null;\r\n\r\n    this[kState] = {\r\n      didRead: false,\r\n      flags: STREAM_FLAGS_PENDING,\r\n      rstCode: NGHTTP2_NO_ERROR,\r\n      writeQueueSize: 0,\r\n      trailersReady: false,\r\n      endAfterHeaders: false,\r\n    };\r\n\r\n    // Fields used by the compat API to avoid megamorphisms.\r\n    this[kRequest] = null;\r\n    this[kProxySocket] = null;\r\n\r\n    this.on('pause', streamOnPause);\r\n\r\n    this.on('newListener', streamListenerAdded);\r\n    this.on('removeListener', streamListenerRemoved);\r\n  }\r\n\r\n  [kUpdateTimer]() {\r\n    if (this.destroyed)\r\n      return;\r\n    if (this[kTimeout])\r\n      this[kTimeout].refresh();\r\n    if (this[kSession])\r\n      this[kSession][kUpdateTimer]();\r\n  }\r\n\r\n  [kInit](id, handle) {\r\n    const state = this[kState];\r\n    state.flags |= STREAM_FLAGS_READY;\r\n\r\n    const session = this[kSession];\r\n    session[kState].pendingStreams.delete(this);\r\n    session[kState].streams.set(id, this);\r\n\r\n    this[kID] = id;\r\n    this[async_id_symbol] = handle.getAsyncId();\r\n    handle[kOwner] = this;\r\n    this[kHandle] = handle;\r\n    handle.onread = onStreamRead;\r\n    this.uncork();\r\n    this.emit('ready');\r\n  }\r\n\r\n  [kInspect](depth, opts) {\r\n    if (typeof depth === 'number' && depth < 0)\r\n      return this;\r\n\r\n    const obj = {\r\n      id: this[kID] || '<pending>',\r\n      closed: this.closed,\r\n      destroyed: this.destroyed,\r\n      state: this.state,\r\n      readableState: this._readableState,\r\n      writableState: this._writableState,\r\n    };\r\n    return `Http2Stream ${format(obj)}`;\r\n  }\r\n\r\n  get bufferSize() {\r\n    // `bufferSize` properties of `net.Socket` are `undefined` when\r\n    // their `_handle` are falsy. Here we avoid the behavior.\r\n    return this[kState].writeQueueSize + this.writableLength;\r\n  }\r\n\r\n  get endAfterHeaders() {\r\n    return this[kState].endAfterHeaders;\r\n  }\r\n\r\n  get sentHeaders() {\r\n    return this[kSentHeaders];\r\n  }\r\n\r\n  get sentTrailers() {\r\n    return this[kSentTrailers];\r\n  }\r\n\r\n  get sentInfoHeaders() {\r\n    return this[kInfoHeaders];\r\n  }\r\n\r\n  get pending() {\r\n    return this[kID] === undefined;\r\n  }\r\n\r\n  // The id of the Http2Stream, will be undefined if the socket is not\r\n  // yet connected.\r\n  get id() {\r\n    return this[kID];\r\n  }\r\n\r\n  // The Http2Session that owns this Http2Stream.\r\n  get session() {\r\n    return this[kSession];\r\n  }\r\n\r\n  _onTimeout() {\r\n    callTimeout(this, this[kSession]);\r\n  }\r\n\r\n  // True if the HEADERS frame has been sent\r\n  get headersSent() {\r\n    return !!(this[kState].flags & STREAM_FLAGS_HEADERS_SENT);\r\n  }\r\n\r\n  // True if the Http2Stream was aborted abnormally.\r\n  get aborted() {\r\n    return !!(this[kState].flags & STREAM_FLAGS_ABORTED);\r\n  }\r\n\r\n  // True if dealing with a HEAD request\r\n  get headRequest() {\r\n    return !!(this[kState].flags & STREAM_FLAGS_HEAD_REQUEST);\r\n  }\r\n\r\n  // The error code reported when this Http2Stream was closed.\r\n  get rstCode() {\r\n    return this[kState].rstCode;\r\n  }\r\n\r\n  // State information for the Http2Stream\r\n  get state() {\r\n    const id = this[kID];\r\n    if (this.destroyed || id === undefined)\r\n      return {};\r\n    return getStreamState(this[kHandle], id);\r\n  }\r\n\r\n  [kProceed]() {\r\n    assert.fail('Implementors MUST implement this. Please report this as a ' +\r\n                'bug in Node.js');\r\n  }\r\n\r\n  [kAfterAsyncWrite]({ bytes }) {\r\n    this[kState].writeQueueSize -= bytes;\r\n\r\n    if (this.session !== undefined)\r\n      this.session[kState].writeQueueSize -= bytes;\r\n  }\r\n\r\n  [kWriteGeneric](writev, data, encoding, cb) {\r\n    // When the Http2Stream is first created, it is corked until the\r\n    // handle and the stream ID is assigned. However, if the user calls\r\n    // uncork() before that happens, the Duplex will attempt to pass\r\n    // writes through. Those need to be queued up here.\r\n    if (this.pending) {\r\n      this.once(\r\n        'ready',\r\n        FunctionPrototypeBind(this[kWriteGeneric],\r\n                              this, writev, data, encoding, cb),\r\n      );\r\n      return;\r\n    }\r\n\r\n    // If the stream has been destroyed, there's nothing else we can do\r\n    // because the handle has been destroyed. This should only be an\r\n    // issue if a write occurs before the 'ready' event in the case where\r\n    // the duplex is uncorked before the stream is ready to go. In that\r\n    // case, drop the data on the floor. An error should have already been\r\n    // emitted.\r\n    if (this.destroyed)\r\n      return;\r\n\r\n    this[kUpdateTimer]();\r\n    if (!this.headersSent)\r\n      this[kProceed]();\r\n\r\n    let req;\r\n\r\n    let waitingForWriteCallback = true;\r\n    let waitingForEndCheck = true;\r\n    let writeCallbackErr;\r\n    let endCheckCallbackErr;\r\n    const done = () => {\r\n      if (waitingForEndCheck || waitingForWriteCallback) return;\r\n      const err = aggregateTwoErrors(endCheckCallbackErr, writeCallbackErr);\r\n      // writeGeneric does not destroy on error and\r\n      // we cannot enable autoDestroy,\r\n      // so make sure to destroy on error.\r\n      if (err) {\r\n        this.destroy(err);\r\n      }\r\n      cb(err);\r\n    };\r\n    const writeCallback = (err) => {\r\n      waitingForWriteCallback = false;\r\n      writeCallbackErr = err;\r\n      done();\r\n    };\r\n    const endCheckCallback = (err) => {\r\n      waitingForEndCheck = false;\r\n      endCheckCallbackErr = err;\r\n      done();\r\n    };\r\n    // Shutdown write stream right after last chunk is sent\r\n    // so final DATA frame can include END_STREAM flag\r\n    process.nextTick(() => {\r\n      if (writeCallbackErr ||\r\n        !this._writableState.ending ||\r\n        this._writableState.buffered.length ||\r\n        (this[kState].flags & STREAM_FLAGS_HAS_TRAILERS))\r\n        return endCheckCallback();\r\n      debugStreamObj(this, 'shutting down writable on last write');\r\n      shutdownWritable.call(this, endCheckCallback);\r\n    });\r\n\r\n    if (writev)\r\n      req = writevGeneric(this, data, writeCallback);\r\n    else\r\n      req = writeGeneric(this, data, encoding, writeCallback);\r\n\r\n    trackWriteState(this, req.bytes);\r\n  }\r\n\r\n  _write(data, encoding, cb) {\r\n    this[kWriteGeneric](false, data, encoding, cb);\r\n  }\r\n\r\n  _writev(data, cb) {\r\n    this[kWriteGeneric](true, data, '', cb);\r\n  }\r\n\r\n  _final(cb) {\r\n    if (this.pending) {\r\n      this.once('ready', () => this._final(cb));\r\n      return;\r\n    }\r\n    debugStreamObj(this, 'shutting down writable on _final');\r\n    ReflectApply(shutdownWritable, this, [cb]);\r\n  }\r\n\r\n  _read(nread) {\r\n    if (this.destroyed) {\r\n      this.push(null);\r\n      return;\r\n    }\r\n    if (!this[kState].didRead) {\r\n      this._readableState.readingMore = false;\r\n      this[kState].didRead = true;\r\n    }\r\n    if (!this.pending) {\r\n      FunctionPrototypeCall(streamOnResume, this);\r\n    } else {\r\n      this.once('ready', streamOnResume);\r\n    }\r\n  }\r\n\r\n  priority(options) {\r\n    if (this.destroyed)\r\n      throw new ERR_HTTP2_INVALID_STREAM();\r\n\r\n    assertIsObject(options, 'options');\r\n    options = { ...options };\r\n    setAndValidatePriorityOptions(options);\r\n\r\n    const priorityFn = FunctionPrototypeBind(submitPriority, this, options);\r\n\r\n    // If the handle has not yet been assigned, queue up the priority\r\n    // frame to be sent as soon as the ready event is emitted.\r\n    if (this.pending) {\r\n      this.once('ready', priorityFn);\r\n      return;\r\n    }\r\n    priorityFn();\r\n  }\r\n\r\n  sendTrailers(headers) {\r\n    if (this.destroyed || this.closed)\r\n      throw new ERR_HTTP2_INVALID_STREAM();\r\n    if (this[kSentTrailers])\r\n      throw new ERR_HTTP2_TRAILERS_ALREADY_SENT();\r\n    if (!this[kState].trailersReady)\r\n      throw new ERR_HTTP2_TRAILERS_NOT_READY();\r\n\r\n    assertIsObject(headers, 'headers');\r\n    headers = ObjectAssign({ __proto__: null }, headers);\r\n\r\n    debugStreamObj(this, 'sending trailers');\r\n\r\n    this[kUpdateTimer]();\r\n\r\n    const headersList = mapToHeaders(headers, assertValidPseudoHeaderTrailer);\r\n    this[kSentTrailers] = headers;\r\n\r\n    // Send the trailers in setImmediate so we don't do it on nghttp2 stack.\r\n    setImmediate(finishSendTrailers, this, headersList);\r\n  }\r\n\r\n  get closed() {\r\n    return !!(this[kState].flags & STREAM_FLAGS_CLOSED);\r\n  }\r\n\r\n  // Close initiates closing the Http2Stream instance by sending an RST_STREAM\r\n  // frame to the connected peer. The readable and writable sides of the\r\n  // Http2Stream duplex are closed and the timeout timer is cleared. If\r\n  // a callback is passed, it is registered to listen for the 'close' event.\r\n  //\r\n  // If the handle and stream ID have not been assigned yet, the close\r\n  // will be queued up to wait for the ready event. As soon as the stream ID\r\n  // is determined, the close will proceed.\r\n  //\r\n  // Submitting the RST_STREAM frame to the underlying handle will cause\r\n  // the Http2Stream to be closed and ultimately destroyed. After calling\r\n  // close, it is still possible to queue up PRIORITY and RST_STREAM frames,\r\n  // but no DATA and HEADERS frames may be sent.\r\n  close(code = NGHTTP2_NO_ERROR, callback) {\r\n    validateInteger(code, 'code', 0, kMaxInt);\r\n\r\n    if (callback !== undefined) {\r\n      validateFunction(callback, 'callback');\r\n    }\r\n\r\n    if (this.closed)\r\n      return;\r\n\r\n    if (callback !== undefined)\r\n      this.once('close', callback);\r\n\r\n    closeStream(this, code);\r\n  }\r\n\r\n  // Called by this.destroy().\r\n  // * Will submit an RST stream to shutdown the stream if necessary.\r\n  //   This will cause the internal resources to be released.\r\n  // * Then cleans up the resources on the js side\r\n  _destroy(err, callback) {\r\n    const session = this[kSession];\r\n    const handle = this[kHandle];\r\n    const id = this[kID];\r\n\r\n    debugStream(this[kID] || 'pending', session[kType], 'destroying stream');\r\n\r\n    const state = this[kState];\r\n    const sessionState = session[kState];\r\n    const sessionCode = sessionState.goawayCode || sessionState.destroyCode;\r\n\r\n    // If a stream has already closed successfully, there is no error\r\n    // to report from this stream, even if the session has errored.\r\n    // This can happen if the stream was already in process of destroying\r\n    // after a successful close, but the session had a error between\r\n    // this stream's close and destroy operations.\r\n    // Previously, this always overrode a successful close operation code\r\n    // NGHTTP2_NO_ERROR (0) with sessionCode because the use of the || operator.\r\n    let code = this.closed ? this.rstCode : sessionCode;\r\n    if (err != null) {\r\n      if (sessionCode) {\r\n        code = sessionCode;\r\n      } else if (err instanceof AbortError) {\r\n        // Enables using AbortController to cancel requests with RST code 8.\r\n        code = NGHTTP2_CANCEL;\r\n      } else {\r\n        code = NGHTTP2_INTERNAL_ERROR;\r\n      }\r\n    }\r\n    const hasHandle = handle !== undefined;\r\n\r\n    if (!this.closed)\r\n      closeStream(this, code, hasHandle ? kForceRstStream : kNoRstStream);\r\n    this.push(null);\r\n\r\n    if (hasHandle) {\r\n      handle.destroy();\r\n      sessionState.streams.delete(id);\r\n    } else {\r\n      sessionState.pendingStreams.delete(this);\r\n    }\r\n\r\n    // Adjust the write queue size for accounting\r\n    sessionState.writeQueueSize -= state.writeQueueSize;\r\n    state.writeQueueSize = 0;\r\n\r\n    // RST code 8 not emitted as an error as its used by clients to signify\r\n    // abort and is already covered by aborted event, also allows more\r\n    // seamless compatibility with http1\r\n    if (err == null && code !== NGHTTP2_NO_ERROR && code !== NGHTTP2_CANCEL)\r\n      err = new ERR_HTTP2_STREAM_ERROR(nameForErrorCode[code] || code);\r\n\r\n    this[kSession] = undefined;\r\n    this[kHandle] = undefined;\r\n\r\n    // This notifies the session that this stream has been destroyed and\r\n    // gives the session the opportunity to clean itself up. The session\r\n    // will destroy if it has been closed and there are no other open or\r\n    // pending streams. Delay with setImmediate so we don't do it on the\r\n    // nghttp2 stack.\r\n    setImmediate(() => {\r\n      session[kMaybeDestroy]();\r\n    });\r\n    callback(err);\r\n  }\r\n  // The Http2Stream can be destroyed if it has closed and if the readable\r\n  // side has received the final chunk.\r\n  [kMaybeDestroy](code = NGHTTP2_NO_ERROR) {\r\n    if (code !== NGHTTP2_NO_ERROR) {\r\n      this.destroy();\r\n      return;\r\n    }\r\n\r\n    if (this.writableFinished) {\r\n      if (!this.readable && this.closed) {\r\n        this.destroy();\r\n        return;\r\n      }\r\n\r\n      // We've submitted a response from our server session, have not attempted\r\n      // to process any incoming data, and have no trailers. This means we can\r\n      // attempt to gracefully close the session.\r\n      const state = this[kState];\r\n      if (this.headersSent &&\r\n          this[kSession] &&\r\n          this[kSession][kType] === NGHTTP2_SESSION_SERVER &&\r\n          !(state.flags & STREAM_FLAGS_HAS_TRAILERS) &&\r\n          !state.didRead &&\r\n          this.readableFlowing === null) {\r\n        // By using setImmediate we allow pushStreams to make it through\r\n        // before the stream is officially closed. This prevents a bug\r\n        // in most browsers where those pushStreams would be rejected.\r\n        setImmediate(callStreamClose, this);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction callTimeout(self, session) {\r\n  // If the session is destroyed, this should never actually be invoked,\r\n  // but just in case...\r\n  if (self.destroyed)\r\n    return;\r\n  // This checks whether a write is currently in progress and also whether\r\n  // that write is actually sending data across the write. The kHandle\r\n  // stored `chunksSentSinceLastWrite` is only updated when a timeout event\r\n  // happens, meaning that if a write is ongoing it should never equal the\r\n  // newly fetched, updated value.\r\n  if (self[kState].writeQueueSize > 0) {\r\n    const handle = session[kHandle];\r\n    const chunksSentSinceLastWrite = handle !== undefined ?\r\n      handle.chunksSentSinceLastWrite : null;\r\n    if (chunksSentSinceLastWrite !== null &&\r\n      chunksSentSinceLastWrite !== handle.updateChunksSent()) {\r\n      self[kUpdateTimer]();\r\n      return;\r\n    }\r\n  }\r\n\r\n  self.emit('timeout');\r\n}\r\n\r\nfunction callStreamClose(stream) {\r\n  stream.close();\r\n}\r\n\r\nfunction processHeaders(oldHeaders, options) {\r\n  assertIsObject(oldHeaders, 'headers');\r\n  const headers = { __proto__: null };\r\n\r\n  if (oldHeaders !== null && oldHeaders !== undefined) {\r\n    // This loop is here for performance reason. Do not change.\r\n    for (const key in oldHeaders) {\r\n      if (ObjectPrototypeHasOwnProperty(oldHeaders, key)) {\r\n        headers[key] = oldHeaders[key];\r\n      }\r\n    }\r\n    headers[kSensitiveHeaders] = oldHeaders[kSensitiveHeaders];\r\n  }\r\n\r\n  const statusCode =\r\n    headers[HTTP2_HEADER_STATUS] =\r\n      headers[HTTP2_HEADER_STATUS] | 0 || HTTP_STATUS_OK;\r\n\r\n  if (options.sendDate == null || options.sendDate) {\r\n    if (headers[HTTP2_HEADER_DATE] === null ||\r\n        headers[HTTP2_HEADER_DATE] === undefined) {\r\n      headers[HTTP2_HEADER_DATE] = utcDate();\r\n    }\r\n  }\r\n\r\n  // This is intentionally stricter than the HTTP/1 implementation, which\r\n  // allows values between 100 and 999 (inclusive) in order to allow for\r\n  // backwards compatibility with non-spec compliant code. With HTTP/2,\r\n  // we have the opportunity to start fresh with stricter spec compliance.\r\n  // This will have an impact on the compatibility layer for anyone using\r\n  // non-standard, non-compliant status codes.\r\n  if (statusCode < 200 || statusCode > 599)\r\n    throw new ERR_HTTP2_STATUS_INVALID(headers[HTTP2_HEADER_STATUS]);\r\n\r\n  const neverIndex = headers[kSensitiveHeaders];\r\n  if (neverIndex !== undefined && !ArrayIsArray(neverIndex))\r\n    throw new ERR_INVALID_ARG_VALUE('headers[http2.neverIndex]', neverIndex);\r\n\r\n  return headers;\r\n}\r\n\r\n\r\nfunction onFileUnpipe() {\r\n  const stream = this.sink[kOwner];\r\n  if (stream.ownsFd)\r\n    PromisePrototypeThen(this.source.close(), undefined,\r\n                         FunctionPrototypeBind(stream.destroy, stream));\r\n  else\r\n    this.source.releaseFD();\r\n}\r\n\r\n// This is only called once the pipe has returned back control, so\r\n// it only has to handle errors and End-of-File.\r\nfunction onPipedFileHandleRead() {\r\n  const err = streamBaseState[kReadBytesOrError];\r\n  if (err < 0 && err !== UV_EOF) {\r\n    this.stream.close(NGHTTP2_INTERNAL_ERROR);\r\n  }\r\n}\r\n\r\nfunction processRespondWithFD(self, fd, headers, offset = 0, length = -1,\r\n                              streamOptions = 0) {\r\n  const state = self[kState];\r\n  state.flags |= STREAM_FLAGS_HEADERS_SENT;\r\n\r\n  let headersList;\r\n  try {\r\n    headersList = mapToHeaders(headers, assertValidPseudoHeaderResponse);\r\n  } catch (err) {\r\n    self.destroy(err);\r\n    return;\r\n  }\r\n  self[kSentHeaders] = headers;\r\n\r\n  // Close the writable side of the stream, but only as far as the writable\r\n  // stream implementation is concerned.\r\n  self._final = null;\r\n  self.end();\r\n\r\n  const ret = self[kHandle].respond(headersList, streamOptions);\r\n\r\n  if (ret < 0) {\r\n    self.destroy(new NghttpError(ret));\r\n    return;\r\n  }\r\n\r\n  defaultTriggerAsyncIdScope(self[async_id_symbol], startFilePipe,\r\n                             self, fd, offset, length);\r\n}\r\n\r\nfunction startFilePipe(self, fd, offset, length) {\r\n  const handle = new FileHandle(fd, offset, length);\r\n  handle.onread = onPipedFileHandleRead;\r\n  handle.stream = self;\r\n\r\n  const pipe = new StreamPipe(handle, self[kHandle]);\r\n  pipe.onunpipe = onFileUnpipe;\r\n  pipe.start();\r\n\r\n  // Exact length of the file doesn't matter here, since the\r\n  // stream is closing anyway - just use 1 to signify that\r\n  // a write does exist\r\n  trackWriteState(self, 1);\r\n}\r\n\r\nfunction doSendFD(session, options, fd, headers, streamOptions, err, stat) {\r\n  if (err) {\r\n    this.destroy(err);\r\n    return;\r\n  }\r\n\r\n  // This can happen if the stream is destroyed or closed while we are waiting\r\n  // for the file descriptor to be opened or the stat call to be completed.\r\n  // In either case, we do not want to continue because the we are shutting\r\n  // down and should not attempt to send any data.\r\n  if (this.destroyed || this.closed) {\r\n    this.destroy(new ERR_HTTP2_INVALID_STREAM());\r\n    return;\r\n  }\r\n\r\n  const statOptions = {\r\n    offset: options.offset !== undefined ? options.offset : 0,\r\n    length: options.length !== undefined ? options.length : -1,\r\n  };\r\n\r\n  // options.statCheck is a user-provided function that can be used to\r\n  // verify stat values, override or set headers, or even cancel the\r\n  // response operation. If statCheck explicitly returns false, the\r\n  // response is canceled. The user code may also send a separate type\r\n  // of response so check again for the HEADERS_SENT flag\r\n  if ((typeof options.statCheck === 'function' &&\r\n       ReflectApply(options.statCheck, this,\r\n                    [stat, headers, statOptions]) === false) ||\r\n       (this[kState].flags & STREAM_FLAGS_HEADERS_SENT)) {\r\n    return;\r\n  }\r\n\r\n  processRespondWithFD(this, fd, headers,\r\n                       statOptions.offset | 0,\r\n                       statOptions.length | 0,\r\n                       streamOptions);\r\n}\r\n\r\nfunction doSendFileFD(session, options, fd, headers, streamOptions, err, stat) {\r\n  const onError = options.onError;\r\n\r\n  if (err) {\r\n    tryClose(fd);\r\n    if (onError)\r\n      onError(err);\r\n    else\r\n      this.destroy(err);\r\n    return;\r\n  }\r\n\r\n  if (!stat.isFile()) {\r\n    const isDirectory = stat.isDirectory();\r\n    if (options.offset !== undefined || options.offset > 0 ||\r\n        options.length !== undefined || options.length >= 0 ||\r\n        isDirectory) {\r\n      const err = isDirectory ?\r\n        new ERR_HTTP2_SEND_FILE() : new ERR_HTTP2_SEND_FILE_NOSEEK();\r\n      tryClose(fd);\r\n      if (onError)\r\n        onError(err);\r\n      else\r\n        this.destroy(err);\r\n      return;\r\n    }\r\n\r\n    options.offset = -1;\r\n    options.length = -1;\r\n  }\r\n\r\n  if (this.destroyed || this.closed) {\r\n    tryClose(fd);\r\n    this.destroy(new ERR_HTTP2_INVALID_STREAM());\r\n    return;\r\n  }\r\n\r\n  const statOptions = {\r\n    offset: options.offset !== undefined ? options.offset : 0,\r\n    length: options.length !== undefined ? options.length : -1,\r\n  };\r\n\r\n  // options.statCheck is a user-provided function that can be used to\r\n  // verify stat values, override or set headers, or even cancel the\r\n  // response operation. If statCheck explicitly returns false, the\r\n  // response is canceled. The user code may also send a separate type\r\n  // of response so check again for the HEADERS_SENT flag\r\n  if ((typeof options.statCheck === 'function' &&\r\n       ReflectApply(options.statCheck, this, [stat, headers]) === false) ||\r\n       (this[kState].flags & STREAM_FLAGS_HEADERS_SENT)) {\r\n    tryClose(fd);\r\n    return;\r\n  }\r\n\r\n  if (stat.isFile()) {\r\n    statOptions.length =\r\n      statOptions.length < 0 ? stat.size - (+statOptions.offset) :\r\n        MathMin(stat.size - (+statOptions.offset),\r\n                statOptions.length);\r\n\r\n    headers[HTTP2_HEADER_CONTENT_LENGTH] = statOptions.length;\r\n  }\r\n\r\n  processRespondWithFD(this, fd, headers,\r\n                       options.offset | 0,\r\n                       statOptions.length | 0,\r\n                       streamOptions);\r\n}\r\n\r\nfunction afterOpen(session, options, headers, streamOptions, err, fd) {\r\n  const state = this[kState];\r\n  const onError = options.onError;\r\n  if (err) {\r\n    if (onError)\r\n      onError(err);\r\n    else\r\n      this.destroy(err);\r\n    return;\r\n  }\r\n  if (this.destroyed || this.closed) {\r\n    tryClose(fd);\r\n    return;\r\n  }\r\n  state.fd = fd;\r\n\r\n  fs.fstat(fd,\r\n           FunctionPrototypeBind(doSendFileFD, this,\r\n                                 session, options, fd,\r\n                                 headers, streamOptions));\r\n}\r\n\r\nclass ServerHttp2Stream extends Http2Stream {\r\n  constructor(session, handle, id, options, headers) {\r\n    super(session, options);\r\n    handle.owner = this;\r\n    this[kInit](id, handle);\r\n    this[kProtocol] = headers[HTTP2_HEADER_SCHEME];\r\n    this[kAuthority] = getAuthority(headers);\r\n  }\r\n\r\n  // True if the remote peer accepts push streams\r\n  get pushAllowed() {\r\n    return !this.destroyed &&\r\n           !this.closed &&\r\n           !this.session.closed &&\r\n           !this.session.destroyed &&\r\n           this[kSession].remoteSettings.enablePush;\r\n  }\r\n\r\n  // Create a push stream, call the given callback with the created\r\n  // Http2Stream for the push stream.\r\n  pushStream(headers, options, callback) {\r\n    if (!this.pushAllowed)\r\n      throw new ERR_HTTP2_PUSH_DISABLED();\r\n    if (this[kID] % 2 === 0)\r\n      throw new ERR_HTTP2_NESTED_PUSH();\r\n\r\n    const session = this[kSession];\r\n\r\n    debugStreamObj(this, 'initiating push stream');\r\n\r\n    this[kUpdateTimer]();\r\n\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n\r\n    validateFunction(callback, 'callback');\r\n\r\n    assertIsObject(options, 'options');\r\n    options = { ...options };\r\n    options.endStream = !!options.endStream;\r\n\r\n    assertIsObject(headers, 'headers');\r\n    headers = ObjectAssign({ __proto__: null }, headers);\r\n\r\n    if (headers[HTTP2_HEADER_METHOD] === undefined)\r\n      headers[HTTP2_HEADER_METHOD] = HTTP2_METHOD_GET;\r\n    if (getAuthority(headers) === undefined)\r\n      headers[HTTP2_HEADER_AUTHORITY] = this[kAuthority];\r\n    if (headers[HTTP2_HEADER_SCHEME] === undefined)\r\n      headers[HTTP2_HEADER_SCHEME] = this[kProtocol];\r\n    if (headers[HTTP2_HEADER_PATH] === undefined)\r\n      headers[HTTP2_HEADER_PATH] = '/';\r\n\r\n    let headRequest = false;\r\n    if (headers[HTTP2_HEADER_METHOD] === HTTP2_METHOD_HEAD)\r\n      headRequest = options.endStream = true;\r\n\r\n    const headersList = mapToHeaders(headers);\r\n\r\n    const streamOptions = options.endStream ? STREAM_OPTION_EMPTY_PAYLOAD : 0;\r\n\r\n    const ret = this[kHandle].pushPromise(headersList, streamOptions);\r\n    let err;\r\n    if (typeof ret === 'number') {\r\n      switch (ret) {\r\n        case NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE:\r\n          err = new ERR_HTTP2_OUT_OF_STREAMS();\r\n          break;\r\n        case NGHTTP2_ERR_STREAM_CLOSED:\r\n          err = new ERR_HTTP2_INVALID_STREAM();\r\n          break;\r\n        default:\r\n          err = new NghttpError(ret);\r\n          break;\r\n      }\r\n      process.nextTick(callback, err);\r\n      return;\r\n    }\r\n\r\n    const id = ret.id();\r\n    const stream = new ServerHttp2Stream(session, ret, id, options, headers);\r\n    stream[kSentHeaders] = headers;\r\n\r\n    stream.push(null);\r\n\r\n    if (options.endStream)\r\n      stream.end();\r\n\r\n    if (headRequest)\r\n      stream[kState].flags |= STREAM_FLAGS_HEAD_REQUEST;\r\n\r\n    process.nextTick(callback, null, stream, headers, 0);\r\n  }\r\n\r\n  // Initiate a response on this Http2Stream\r\n  respond(headers, options) {\r\n    if (this.destroyed || this.closed)\r\n      throw new ERR_HTTP2_INVALID_STREAM();\r\n    if (this.headersSent)\r\n      throw new ERR_HTTP2_HEADERS_SENT();\r\n\r\n    const state = this[kState];\r\n\r\n    assertIsObject(options, 'options');\r\n    options = { ...options };\r\n\r\n    debugStreamObj(this, 'initiating response');\r\n    this[kUpdateTimer]();\r\n\r\n    options.endStream = !!options.endStream;\r\n\r\n    let streamOptions = 0;\r\n    if (options.endStream)\r\n      streamOptions |= STREAM_OPTION_EMPTY_PAYLOAD;\r\n\r\n    if (options.waitForTrailers) {\r\n      streamOptions |= STREAM_OPTION_GET_TRAILERS;\r\n      state.flags |= STREAM_FLAGS_HAS_TRAILERS;\r\n    }\r\n\r\n    headers = processHeaders(headers, options);\r\n    const headersList = mapToHeaders(headers, assertValidPseudoHeaderResponse);\r\n    this[kSentHeaders] = headers;\r\n\r\n    state.flags |= STREAM_FLAGS_HEADERS_SENT;\r\n\r\n    // Close the writable side if the endStream option is set or status\r\n    // is one of known codes with no payload, or it's a head request\r\n    const statusCode = headers[HTTP2_HEADER_STATUS] | 0;\r\n    if (!!options.endStream ||\r\n        statusCode === HTTP_STATUS_NO_CONTENT ||\r\n        statusCode === HTTP_STATUS_RESET_CONTENT ||\r\n        statusCode === HTTP_STATUS_NOT_MODIFIED ||\r\n        this.headRequest === true) {\r\n      options.endStream = true;\r\n      this.end();\r\n    }\r\n\r\n    const ret = this[kHandle].respond(headersList, streamOptions);\r\n    if (ret < 0)\r\n      this.destroy(new NghttpError(ret));\r\n  }\r\n\r\n  // Initiate a response using an open FD. Note that there are fewer\r\n  // protections with this approach. For one, the fd is not validated by\r\n  // default. In respondWithFile, the file is checked to make sure it is a\r\n  // regular file, here the fd is passed directly. If the underlying\r\n  // mechanism is not able to read from the fd, then the stream will be\r\n  // reset with an error code.\r\n  respondWithFD(fd, headers, options) {\r\n    if (this.destroyed || this.closed)\r\n      throw new ERR_HTTP2_INVALID_STREAM();\r\n    if (this.headersSent)\r\n      throw new ERR_HTTP2_HEADERS_SENT();\r\n\r\n    const session = this[kSession];\r\n\r\n    assertIsObject(options, 'options');\r\n    options = { ...options };\r\n\r\n    if (options.offset !== undefined && typeof options.offset !== 'number')\r\n      throw new ERR_INVALID_ARG_VALUE('options.offset', options.offset);\r\n\r\n    if (options.length !== undefined && typeof options.length !== 'number')\r\n      throw new ERR_INVALID_ARG_VALUE('options.length', options.length);\r\n\r\n    if (options.statCheck !== undefined &&\r\n        typeof options.statCheck !== 'function') {\r\n      throw new ERR_INVALID_ARG_VALUE('options.statCheck', options.statCheck);\r\n    }\r\n\r\n    let streamOptions = 0;\r\n    if (options.waitForTrailers) {\r\n      streamOptions |= STREAM_OPTION_GET_TRAILERS;\r\n      this[kState].flags |= STREAM_FLAGS_HAS_TRAILERS;\r\n    }\r\n\r\n    if (fd instanceof fsPromisesInternal.FileHandle)\r\n      fd = fd.fd;\r\n    else if (typeof fd !== 'number')\r\n      throw new ERR_INVALID_ARG_TYPE('fd', ['number', 'FileHandle'], fd);\r\n\r\n    debugStreamObj(this, 'initiating response from fd');\r\n    this[kUpdateTimer]();\r\n    this.ownsFd = false;\r\n\r\n    headers = processHeaders(headers, options);\r\n    const statusCode = headers[HTTP2_HEADER_STATUS] |= 0;\r\n    // Payload/DATA frames are not permitted in these cases\r\n    if (statusCode === HTTP_STATUS_NO_CONTENT ||\r\n        statusCode === HTTP_STATUS_RESET_CONTENT ||\r\n        statusCode === HTTP_STATUS_NOT_MODIFIED ||\r\n        this.headRequest) {\r\n      throw new ERR_HTTP2_PAYLOAD_FORBIDDEN(statusCode);\r\n    }\r\n\r\n    if (options.statCheck !== undefined) {\r\n      fs.fstat(fd,\r\n               FunctionPrototypeBind(doSendFD, this,\r\n                                     session, options, fd,\r\n                                     headers, streamOptions));\r\n      return;\r\n    }\r\n\r\n    processRespondWithFD(this, fd, headers,\r\n                         options.offset,\r\n                         options.length,\r\n                         streamOptions);\r\n  }\r\n\r\n  // Initiate a file response on this Http2Stream. The path is passed to\r\n  // fs.open() to acquire the fd with mode 'r', then the fd is passed to\r\n  // fs.fstat(). Assuming fstat is successful, a check is made to ensure\r\n  // that the file is a regular file, then options.statCheck is called,\r\n  // giving the user an opportunity to verify the details and set additional\r\n  // headers. If statCheck returns false, the operation is aborted and no\r\n  // file details are sent.\r\n  respondWithFile(path, headers, options) {\r\n    if (this.destroyed || this.closed)\r\n      throw new ERR_HTTP2_INVALID_STREAM();\r\n    if (this.headersSent)\r\n      throw new ERR_HTTP2_HEADERS_SENT();\r\n\r\n    assertIsObject(options, 'options');\r\n    options = { ...options };\r\n\r\n    if (options.offset !== undefined && typeof options.offset !== 'number')\r\n      throw new ERR_INVALID_ARG_VALUE('options.offset', options.offset);\r\n\r\n    if (options.length !== undefined && typeof options.length !== 'number')\r\n      throw new ERR_INVALID_ARG_VALUE('options.length', options.length);\r\n\r\n    if (options.statCheck !== undefined &&\r\n        typeof options.statCheck !== 'function') {\r\n      throw new ERR_INVALID_ARG_VALUE('options.statCheck', options.statCheck);\r\n    }\r\n\r\n    let streamOptions = 0;\r\n    if (options.waitForTrailers) {\r\n      streamOptions |= STREAM_OPTION_GET_TRAILERS;\r\n      this[kState].flags |= STREAM_FLAGS_HAS_TRAILERS;\r\n    }\r\n\r\n    const session = this[kSession];\r\n    debugStreamObj(this, 'initiating response from file');\r\n    this[kUpdateTimer]();\r\n    this.ownsFd = true;\r\n\r\n    headers = processHeaders(headers, options);\r\n    const statusCode = headers[HTTP2_HEADER_STATUS] |= 0;\r\n    // Payload/DATA frames are not permitted in these cases\r\n    if (statusCode === HTTP_STATUS_NO_CONTENT ||\r\n        statusCode === HTTP_STATUS_RESET_CONTENT ||\r\n        statusCode === HTTP_STATUS_NOT_MODIFIED ||\r\n        this.headRequest) {\r\n      throw new ERR_HTTP2_PAYLOAD_FORBIDDEN(statusCode);\r\n    }\r\n\r\n    fs.open(path, 'r',\r\n            FunctionPrototypeBind(afterOpen, this,\r\n                                  session, options, headers, streamOptions));\r\n  }\r\n\r\n  // Sends a block of informational headers. In theory, the HTTP/2 spec\r\n  // allows sending a HEADER block at any time during a streams lifecycle,\r\n  // but the HTTP request/response semantics defined in HTTP/2 places limits\r\n  // such that HEADERS may only be sent *before* or *after* DATA frames.\r\n  // If the block of headers being sent includes a status code, it MUST be\r\n  // a 1xx informational code and it MUST be sent before the request/response\r\n  // headers are sent, or an error will be thrown.\r\n  additionalHeaders(headers) {\r\n    if (this.destroyed || this.closed)\r\n      throw new ERR_HTTP2_INVALID_STREAM();\r\n    if (this.headersSent)\r\n      throw new ERR_HTTP2_HEADERS_AFTER_RESPOND();\r\n\r\n    assertIsObject(headers, 'headers');\r\n    headers = ObjectAssign({ __proto__: null }, headers);\r\n\r\n    debugStreamObj(this, 'sending additional headers');\r\n\r\n    if (headers[HTTP2_HEADER_STATUS] != null) {\r\n      const statusCode = headers[HTTP2_HEADER_STATUS] |= 0;\r\n      if (statusCode === HTTP_STATUS_SWITCHING_PROTOCOLS)\r\n        throw new ERR_HTTP2_STATUS_101();\r\n      if (statusCode < 100 || statusCode >= 200) {\r\n        throw new ERR_HTTP2_INVALID_INFO_STATUS(headers[HTTP2_HEADER_STATUS]);\r\n      }\r\n    }\r\n\r\n    this[kUpdateTimer]();\r\n\r\n    const headersList = mapToHeaders(headers, assertValidPseudoHeaderResponse);\r\n    if (!this[kInfoHeaders])\r\n      this[kInfoHeaders] = [headers];\r\n    else\r\n      ArrayPrototypePush(this[kInfoHeaders], headers);\r\n\r\n    const ret = this[kHandle].info(headersList);\r\n    if (ret < 0)\r\n      this.destroy(new NghttpError(ret));\r\n  }\r\n}\r\n\r\nServerHttp2Stream.prototype[kProceed] = ServerHttp2Stream.prototype.respond;\r\n\r\nclass ClientHttp2Stream extends Http2Stream {\r\n  constructor(session, handle, id, options) {\r\n    super(session, options);\r\n    this[kState].flags |= STREAM_FLAGS_HEADERS_SENT;\r\n    if (id !== undefined)\r\n      this[kInit](id, handle);\r\n    this.on('headers', handleHeaderContinue);\r\n  }\r\n}\r\n\r\nfunction handleHeaderContinue(headers) {\r\n  if (headers[HTTP2_HEADER_STATUS] === HTTP_STATUS_CONTINUE)\r\n    this.emit('continue');\r\n}\r\n\r\nconst setTimeoutValue = {\r\n  configurable: true,\r\n  enumerable: true,\r\n  writable: true,\r\n  value: setStreamTimeout,\r\n};\r\nObjectDefineProperty(Http2Stream.prototype, 'setTimeout', setTimeoutValue);\r\nObjectDefineProperty(Http2Session.prototype, 'setTimeout', setTimeoutValue);\r\n\r\n\r\n// When the socket emits an error, destroy the associated Http2Session and\r\n// forward it the same error.\r\nfunction socketOnError(error) {\r\n  const session = this[kBoundSession];\r\n  if (session !== undefined) {\r\n    // We can ignore ECONNRESET after GOAWAY was received as there's nothing\r\n    // we can do and the other side is fully within its rights to do so.\r\n    if (error.code === 'ECONNRESET' && session[kState].goawayCode !== null)\r\n      return session.destroy();\r\n    debugSessionObj(this, 'socket error [%s]', error.message);\r\n    session.destroy(error);\r\n  }\r\n}\r\n\r\n// Handles the on('stream') event for a session and forwards\r\n// it on to the server object.\r\nfunction sessionOnStream(stream, headers, flags, rawHeaders) {\r\n  if (this[kServer] !== undefined)\r\n    this[kServer].emit('stream', stream, headers, flags, rawHeaders);\r\n}\r\n\r\nfunction sessionOnPriority(stream, parent, weight, exclusive) {\r\n  if (this[kServer] !== undefined)\r\n    this[kServer].emit('priority', stream, parent, weight, exclusive);\r\n}\r\n\r\nfunction sessionOnError(error) {\r\n  if (this[kServer] !== undefined)\r\n    this[kServer].emit('sessionError', error, this);\r\n}\r\n\r\n// When the session times out on the server, try emitting a timeout event.\r\n// If no handler is registered, destroy the session.\r\nfunction sessionOnTimeout() {\r\n  // If destroyed or closed already, do nothing\r\n  if (this.destroyed || this.closed)\r\n    return;\r\n  const server = this[kServer];\r\n  if (!server.emit('timeout', this))\r\n    this.destroy();  // No error code, just things down.\r\n}\r\n\r\nfunction connectionListener(socket) {\r\n  debug('Http2Session server: received a connection');\r\n  const options = this[kOptions] || {};\r\n\r\n  if (socket.alpnProtocol === false || socket.alpnProtocol === 'http/1.1') {\r\n    // Fallback to HTTP/1.1\r\n    if (options.allowHTTP1 === true) {\r\n      socket.server[kIncomingMessage] = options.Http1IncomingMessage;\r\n      socket.server[kServerResponse] = options.Http1ServerResponse;\r\n      return FunctionPrototypeCall(httpConnectionListener, this, socket);\r\n    }\r\n    // Let event handler deal with the socket\r\n    debug('Unknown protocol from %s:%s',\r\n          socket.remoteAddress, socket.remotePort);\r\n    if (!this.emit('unknownProtocol', socket)) {\r\n      debug('Unknown protocol timeout:  %s', options.unknownProtocolTimeout);\r\n      // Install a timeout if the socket was not successfully closed, then\r\n      // destroy the socket to ensure that the underlying resources are\r\n      // released.\r\n      const timer = setTimeout(() => {\r\n        if (!socket.destroyed) {\r\n          debug('UnknownProtocol socket timeout, destroy socket');\r\n          socket.destroy();\r\n        }\r\n      }, options.unknownProtocolTimeout);\r\n      // Un-reference the timer to avoid blocking of application shutdown and\r\n      // clear the timeout if the socket was successfully closed.\r\n      timer.unref();\r\n\r\n      socket.once('close', () => clearTimeout(timer));\r\n\r\n      // We don't know what to do, so let's just tell the other side what's\r\n      // going on in a format that they *might* understand.\r\n      socket.end('HTTP/1.0 403 Forbidden\\r\\n' +\r\n                 'Content-Type: text/plain\\r\\n\\r\\n' +\r\n                 'Missing ALPN Protocol, expected `h2` to be available.\\n' +\r\n                 'If this is a HTTP request: The server was not ' +\r\n                 'configured with the `allowHTTP1` option or a ' +\r\n                 'listener for the `unknownProtocol` event.\\n');\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Set up the Session\r\n  const session = new ServerHttp2Session(options, socket, this);\r\n\r\n  session.on('stream', sessionOnStream);\r\n  session.on('error', sessionOnError);\r\n  // Don't count our own internal listener.\r\n  session.on('priority', sessionOnPriority);\r\n  session[kNativeFields][kSessionPriorityListenerCount]--;\r\n\r\n  if (this.timeout)\r\n    session.setTimeout(this.timeout, sessionOnTimeout);\r\n\r\n  socket[kServer] = this;\r\n\r\n  this.emit('session', session);\r\n}\r\n\r\nfunction initializeOptions(options) {\r\n  assertIsObject(options, 'options');\r\n  options = { ...options };\r\n  assertIsObject(options.settings, 'options.settings');\r\n  options.settings = { ...options.settings };\r\n\r\n  assertIsArray(options.remoteCustomSettings, 'options.remoteCustomSettings');\r\n  if (options.remoteCustomSettings) {\r\n    options.remoteCustomSettings = [ ...options.remoteCustomSettings ];\r\n    if (options.remoteCustomSettings.length > MAX_ADDITIONAL_SETTINGS)\r\n      throw new ERR_HTTP2_TOO_MANY_CUSTOM_SETTINGS();\r\n  }\r\n\r\n  if (options.maxSessionInvalidFrames !== undefined)\r\n    validateUint32(options.maxSessionInvalidFrames, 'maxSessionInvalidFrames');\r\n\r\n  if (options.maxSessionRejectedStreams !== undefined) {\r\n    validateUint32(\r\n      options.maxSessionRejectedStreams,\r\n      'maxSessionRejectedStreams',\r\n    );\r\n  }\r\n\r\n  if (options.unknownProtocolTimeout !== undefined)\r\n    validateUint32(options.unknownProtocolTimeout, 'unknownProtocolTimeout');\r\n  else\r\n    // TODO(danbev): is this a good default value?\r\n    options.unknownProtocolTimeout = 10000;\r\n\r\n\r\n  // Used only with allowHTTP1\r\n  options.Http1IncomingMessage = options.Http1IncomingMessage ||\r\n    http.IncomingMessage;\r\n  options.Http1ServerResponse = options.Http1ServerResponse ||\r\n    http.ServerResponse;\r\n\r\n  options.Http2ServerRequest = options.Http2ServerRequest ||\r\n                                       Http2ServerRequest;\r\n  options.Http2ServerResponse = options.Http2ServerResponse ||\r\n                                        Http2ServerResponse;\r\n  return options;\r\n}\r\n\r\nfunction initializeTLSOptions(options, servername) {\r\n  options = initializeOptions(options);\r\n  options.ALPNProtocols = ['h2'];\r\n  if (options.allowHTTP1 === true)\r\n    ArrayPrototypePush(options.ALPNProtocols, 'http/1.1');\r\n  if (servername !== undefined && !options.servername)\r\n    options.servername = servername;\r\n  return options;\r\n}\r\n\r\nfunction onErrorSecureServerSession(err, socket) {\r\n  if (!this.emit('clientError', err, socket))\r\n    socket.destroy(err);\r\n}\r\n\r\nclass Http2SecureServer extends TLSServer {\r\n  constructor(options, requestListener) {\r\n    options = initializeTLSOptions(options);\r\n    super(options, connectionListener);\r\n    this[kOptions] = options;\r\n    this.timeout = 0;\r\n    this.on('newListener', setupCompat);\r\n    if (options.allowHTTP1 === true) {\r\n      this.headersTimeout = 60_000; // Minimum between 60 seconds or requestTimeout\r\n      this.requestTimeout = 300_000; // 5 minutes\r\n      this.connectionsCheckingInterval = 30_000; // 30 seconds\r\n      this.on('listening', setupConnectionsTracking);\r\n    }\r\n    if (typeof requestListener === 'function')\r\n      this.on('request', requestListener);\r\n    this.on('tlsClientError', onErrorSecureServerSession);\r\n  }\r\n\r\n  setTimeout(msecs, callback) {\r\n    this.timeout = msecs;\r\n    if (callback !== undefined) {\r\n      validateFunction(callback, 'callback');\r\n      this.on('timeout', callback);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  updateSettings(settings) {\r\n    assertIsObject(settings, 'settings');\r\n    validateSettings(settings);\r\n    this[kOptions].settings = { ...this[kOptions].settings, ...settings };\r\n  }\r\n\r\n  close() {\r\n    if (this[kOptions].allowHTTP1 === true) {\r\n      httpServerPreClose(this);\r\n    }\r\n    ReflectApply(TLSServer.prototype.close, this, arguments);\r\n  }\r\n\r\n  closeIdleConnections() {\r\n    if (this[kOptions].allowHTTP1 === true) {\r\n      ReflectApply(HttpServer.prototype.closeIdleConnections, this, arguments);\r\n    }\r\n  }\r\n}\r\n\r\nclass Http2Server extends NETServer {\r\n  constructor(options, requestListener) {\r\n    options = initializeOptions(options);\r\n    super(options, connectionListener);\r\n    this[kOptions] = options;\r\n    this.timeout = 0;\r\n    this.on('newListener', setupCompat);\r\n    if (typeof requestListener === 'function')\r\n      this.on('request', requestListener);\r\n  }\r\n\r\n  setTimeout(msecs, callback) {\r\n    this.timeout = msecs;\r\n    if (callback !== undefined) {\r\n      validateFunction(callback, 'callback');\r\n      this.on('timeout', callback);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  updateSettings(settings) {\r\n    assertIsObject(settings, 'settings');\r\n    validateSettings(settings);\r\n    this[kOptions].settings = { ...this[kOptions].settings, ...settings };\r\n  }\r\n\r\n  async [SymbolAsyncDispose]() {\r\n    return FunctionPrototypeCall(promisify(super.close), this);\r\n  }\r\n}\r\n\r\nHttp2Server.prototype[EventEmitter.captureRejectionSymbol] = function(\r\n  err, event, ...args) {\r\n\r\n  switch (event) {\r\n    case 'stream': {\r\n      // TODO(mcollina): we might want to match this with what we do on\r\n      // the compat side.\r\n      const { 0: stream } = args;\r\n      if (stream.sentHeaders) {\r\n        stream.destroy(err);\r\n      } else {\r\n        stream.respond({ [HTTP2_HEADER_STATUS]: 500 });\r\n        stream.end();\r\n      }\r\n      break;\r\n    }\r\n    case 'request': {\r\n      const { 1: res } = args;\r\n      if (!res.headersSent && !res.finished) {\r\n        // Don't leak headers.\r\n        for (const name of res.getHeaderNames()) {\r\n          res.removeHeader(name);\r\n        }\r\n        res.statusCode = 500;\r\n        res.end(http.STATUS_CODES[500]);\r\n      } else {\r\n        res.destroy();\r\n      }\r\n      break;\r\n    }\r\n    default:\r\n      ArrayPrototypeUnshift(args, err, event);\r\n      ReflectApply(net.Server.prototype[EventEmitter.captureRejectionSymbol],\r\n                   this, args);\r\n  }\r\n};\r\n\r\nfunction setupCompat(ev) {\r\n  if (ev === 'request') {\r\n    this.removeListener('newListener', setupCompat);\r\n    this.on('stream', FunctionPrototypeBind(onServerStream,\r\n                                            this,\r\n                                            this[kOptions].Http2ServerRequest,\r\n                                            this[kOptions].Http2ServerResponse),\r\n    );\r\n  }\r\n}\r\n\r\nfunction socketOnClose() {\r\n  const session = this[kBoundSession];\r\n  if (session !== undefined) {\r\n    debugSessionObj(session, 'socket closed');\r\n    const err = session.connecting ? new ERR_SOCKET_CLOSED() : null;\r\n    const state = session[kState];\r\n    state.streams.forEach((stream) => stream.close(NGHTTP2_CANCEL));\r\n    state.pendingStreams.forEach((stream) => stream.close(NGHTTP2_CANCEL));\r\n    session.close();\r\n    session[kMaybeDestroy](err);\r\n  }\r\n}\r\n\r\nfunction connect(authority, options, listener) {\r\n  if (typeof options === 'function') {\r\n    listener = options;\r\n    options = undefined;\r\n  }\r\n\r\n  assertIsObject(options, 'options');\r\n  options = { ...options };\r\n\r\n  assertIsArray(options.remoteCustomSettings, 'options.remoteCustomSettings');\r\n  if (options.remoteCustomSettings) {\r\n    options.remoteCustomSettings = [ ...options.remoteCustomSettings ];\r\n    if (options.remoteCustomSettings.length > MAX_ADDITIONAL_SETTINGS)\r\n      throw new ERR_HTTP2_TOO_MANY_CUSTOM_SETTINGS();\r\n  }\r\n\r\n  if (typeof authority === 'string')\r\n    authority = new URL(authority);\r\n\r\n  assertIsObject(authority, 'authority', ['string', 'Object', 'URL']);\r\n\r\n  const protocol = authority.protocol || options.protocol || 'https:';\r\n  const port = '' + (authority.port !== '' ?\r\n    authority.port : (authority.protocol === 'http:' ? 80 : 443));\r\n  let host = 'localhost';\r\n\r\n  if (authority.hostname) {\r\n    host = authority.hostname;\r\n\r\n    if (host[0] === '[')\r\n      host = StringPrototypeSlice(host, 1, -1);\r\n  } else if (authority.host) {\r\n    host = authority.host;\r\n  }\r\n\r\n  let socket;\r\n  if (typeof options.createConnection === 'function') {\r\n    socket = options.createConnection(authority, options);\r\n  } else {\r\n    switch (protocol) {\r\n      case 'http:':\r\n        socket = net.connect({ port, host, ...options });\r\n        break;\r\n      case 'https:':\r\n        socket = tls.connect(port, host, initializeTLSOptions(options, host));\r\n        break;\r\n      default:\r\n        throw new ERR_HTTP2_UNSUPPORTED_PROTOCOL(protocol);\r\n    }\r\n  }\r\n\r\n  const session = new ClientHttp2Session(options, socket);\r\n\r\n  session[kAuthority] = `${options.servername || host}:${port}`;\r\n  session[kProtocol] = protocol;\r\n\r\n  if (typeof listener === 'function')\r\n    session.once('connect', listener);\r\n\r\n  return session;\r\n}\r\n\r\n// Support util.promisify\r\nObjectDefineProperty(connect, promisify.custom, {\r\n  __proto__: null,\r\n  value: (authority, options) => {\r\n    return new Promise((resolve) => {\r\n      const server = connect(authority, options, () => resolve(server));\r\n    });\r\n  },\r\n});\r\n\r\nfunction createSecureServer(options, handler) {\r\n  return new Http2SecureServer(options, handler);\r\n}\r\n\r\nfunction createServer(options, handler) {\r\n  if (typeof options === 'function') {\r\n    handler = options;\r\n    options = kEmptyObject;\r\n  }\r\n  return new Http2Server(options, handler);\r\n}\r\n\r\n// Returns a Base64 encoded settings frame payload from the given\r\n// object. The value is suitable for passing as the value of the\r\n// HTTP2-Settings header frame.\r\nfunction getPackedSettings(settings) {\r\n  assertIsObject(settings, 'settings');\r\n  validateSettings(settings);\r\n  updateSettingsBuffer({ ...settings });\r\n  return binding.packSettings();\r\n}\r\n\r\nfunction getUnpackedSettings(buf, options = kEmptyObject) {\r\n  if (!isArrayBufferView(buf) || buf.length === undefined) {\r\n    throw new ERR_INVALID_ARG_TYPE('buf',\r\n                                   ['Buffer', 'TypedArray'], buf);\r\n  }\r\n  if (buf.length % 6 !== 0)\r\n    throw new ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH();\r\n  const settings = {};\r\n  let offset = 0;\r\n  while (offset < buf.length) {\r\n    const id = ReflectApply(readUInt16BE, buf, [offset]);\r\n    offset += 2;\r\n    const value = ReflectApply(readUInt32BE, buf, [offset]);\r\n    switch (id) {\r\n      case NGHTTP2_SETTINGS_HEADER_TABLE_SIZE:\r\n        settings.headerTableSize = value;\r\n        break;\r\n      case NGHTTP2_SETTINGS_ENABLE_PUSH:\r\n        settings.enablePush = value !== 0;\r\n        break;\r\n      case NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS:\r\n        settings.maxConcurrentStreams = value;\r\n        break;\r\n      case NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE:\r\n        settings.initialWindowSize = value;\r\n        break;\r\n      case NGHTTP2_SETTINGS_MAX_FRAME_SIZE:\r\n        settings.maxFrameSize = value;\r\n        break;\r\n      case NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE:\r\n        settings.maxHeaderListSize = settings.maxHeaderSize = value;\r\n        break;\r\n      case NGHTTP2_SETTINGS_ENABLE_CONNECT_PROTOCOL:\r\n        settings.enableConnectProtocol = value !== 0;\r\n        break;\r\n      default:\r\n        if (!settings.customSettings) settings.customSettings = {};\r\n        settings.customSettings[id] = value;\r\n    }\r\n    offset += 4;\r\n  }\r\n\r\n  if (options != null && options.validate)\r\n    validateSettings(settings);\r\n\r\n  return settings;\r\n}\r\n\r\nfunction performServerHandshake(socket, options = {}) {\r\n  options = initializeOptions(options);\r\n  return new ServerHttp2Session(options, socket, undefined);\r\n}\r\n\r\nbinding.setCallbackFunctions(\r\n  onSessionInternalError,\r\n  onPriority,\r\n  onSettings,\r\n  onPing,\r\n  onSessionHeaders,\r\n  onFrameError,\r\n  onGoawayData,\r\n  onAltSvc,\r\n  onOrigin,\r\n  onStreamTrailers,\r\n  onStreamClose,\r\n);\r\n\r\n// Exports\r\nmodule.exports = {\r\n  connect,\r\n  constants,\r\n  createServer,\r\n  createSecureServer,\r\n  getDefaultSettings,\r\n  getPackedSettings,\r\n  getUnpackedSettings,\r\n  performServerHandshake,\r\n  sensitiveHeaders: kSensitiveHeaders,\r\n  Http2Session,\r\n  Http2Stream,\r\n  ServerHttp2Session,\r\n  Http2ServerRequest,\r\n  Http2ServerResponse,\r\n};\r\n"
  },
  "173": {
    "metadata": {
      "scriptId": "173",
      "url": "node:internal/http2/compat",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 988,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "39ee53b393f79ae4cc43662ee298af9610fbfcc23505babeaf1484c00d284462",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 25104,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/http2/compat"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ArrayPrototypePush,\r\n  Boolean,\r\n  FunctionPrototypeBind,\r\n  ObjectAssign,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  Proxy,\r\n  ReflectApply,\r\n  ReflectGetPrototypeOf,\r\n  SafeArrayIterator,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeToLowerCase,\r\n  StringPrototypeTrim,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst assert = require('internal/assert');\r\nconst Stream = require('stream');\r\nconst { Readable } = Stream;\r\nconst {\r\n  constants: {\r\n    HTTP2_HEADER_AUTHORITY,\r\n    HTTP2_HEADER_CONNECTION,\r\n    HTTP2_HEADER_METHOD,\r\n    HTTP2_HEADER_PATH,\r\n    HTTP2_HEADER_SCHEME,\r\n    HTTP2_HEADER_STATUS,\r\n\r\n    HTTP_STATUS_CONTINUE,\r\n    HTTP_STATUS_EARLY_HINTS,\r\n    HTTP_STATUS_EXPECTATION_FAILED,\r\n    HTTP_STATUS_METHOD_NOT_ALLOWED,\r\n    HTTP_STATUS_OK,\r\n  },\r\n} = internalBinding('http2');\r\nconst {\r\n  codes: {\r\n    ERR_HTTP2_HEADERS_SENT,\r\n    ERR_HTTP2_INFO_STATUS_NOT_ALLOWED,\r\n    ERR_HTTP2_INVALID_HEADER_VALUE,\r\n    ERR_HTTP2_INVALID_STREAM,\r\n    ERR_HTTP2_NO_SOCKET_MANIPULATION,\r\n    ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED,\r\n    ERR_HTTP2_STATUS_INVALID,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_HTTP_TOKEN,\r\n    ERR_STREAM_WRITE_AFTER_END,\r\n  },\r\n  hideStackFrames,\r\n} = require('internal/errors');\r\nconst {\r\n  validateFunction,\r\n  validateString,\r\n  validateLinkHeaderValue,\r\n  validateObject,\r\n} = require('internal/validators');\r\nconst {\r\n  kSocket,\r\n  kRequest,\r\n  kProxySocket,\r\n  assertValidPseudoHeader,\r\n  getAuthority,\r\n} = require('internal/http2/util');\r\nconst { _checkIsHttpToken: checkIsHttpToken } = require('_http_common');\r\n\r\nconst kBeginSend = Symbol('begin-send');\r\nconst kState = Symbol('state');\r\nconst kStream = Symbol('stream');\r\nconst kResponse = Symbol('response');\r\nconst kHeaders = Symbol('headers');\r\nconst kRawHeaders = Symbol('rawHeaders');\r\nconst kTrailers = Symbol('trailers');\r\nconst kRawTrailers = Symbol('rawTrailers');\r\nconst kSetHeader = Symbol('setHeader');\r\nconst kAppendHeader = Symbol('appendHeader');\r\nconst kAborted = Symbol('aborted');\r\n\r\nlet statusMessageWarned = false;\r\nlet statusConnectionHeaderWarned = false;\r\n\r\n// Defines and implements an API compatibility layer on top of the core\r\n// HTTP/2 implementation, intended to provide an interface that is as\r\n// close as possible to the current require('http') API\r\n\r\nconst assertValidHeader = hideStackFrames((name, value) => {\r\n  if (name === '' ||\r\n      typeof name !== 'string' ||\r\n      StringPrototypeIncludes(name, ' ')) {\r\n    throw new ERR_INVALID_HTTP_TOKEN.HideStackFramesError('Header name', name);\r\n  }\r\n  if (isPseudoHeader(name)) {\r\n    throw new ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED.HideStackFramesError();\r\n  }\r\n  if (value === undefined || value === null) {\r\n    throw new ERR_HTTP2_INVALID_HEADER_VALUE.HideStackFramesError(value, name);\r\n  }\r\n  if (!isConnectionHeaderAllowed(name, value)) {\r\n    connectionHeaderMessageWarn();\r\n  }\r\n});\r\n\r\nfunction isPseudoHeader(name) {\r\n  switch (name) {\r\n    case HTTP2_HEADER_STATUS:    // :status\r\n    case HTTP2_HEADER_METHOD:    // :method\r\n    case HTTP2_HEADER_PATH:      // :path\r\n    case HTTP2_HEADER_AUTHORITY: // :authority\r\n    case HTTP2_HEADER_SCHEME:    // :scheme\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nfunction statusMessageWarn() {\r\n  if (statusMessageWarned === false) {\r\n    process.emitWarning(\r\n      'Status message is not supported by HTTP/2 (RFC7540 8.1.2.4)',\r\n      'UnsupportedWarning',\r\n    );\r\n    statusMessageWarned = true;\r\n  }\r\n}\r\n\r\nfunction isConnectionHeaderAllowed(name, value) {\r\n  return name !== HTTP2_HEADER_CONNECTION ||\r\n         value === 'trailers';\r\n}\r\n\r\nfunction connectionHeaderMessageWarn() {\r\n  if (statusConnectionHeaderWarned === false) {\r\n    process.emitWarning(\r\n      'The provided connection header is not valid, ' +\r\n      'the value will be dropped from the header and ' +\r\n      'will never be in use.',\r\n      'UnsupportedWarning',\r\n    );\r\n    statusConnectionHeaderWarned = true;\r\n  }\r\n}\r\n\r\nfunction onStreamData(chunk) {\r\n  const request = this[kRequest];\r\n  if (request !== undefined && !request.push(chunk))\r\n    this.pause();\r\n}\r\n\r\nfunction onStreamTrailers(trailers, flags, rawTrailers) {\r\n  const request = this[kRequest];\r\n  if (request !== undefined) {\r\n    ObjectAssign(request[kTrailers], trailers);\r\n    ArrayPrototypePush(request[kRawTrailers],\r\n                       ...new SafeArrayIterator(rawTrailers));\r\n  }\r\n}\r\n\r\nfunction onStreamEnd() {\r\n  // Cause the request stream to end as well.\r\n  const request = this[kRequest];\r\n  if (request !== undefined)\r\n    this[kRequest].push(null);\r\n}\r\n\r\nfunction onStreamError(error) {\r\n  // This is purposefully left blank\r\n  //\r\n  // errors in compatibility mode are\r\n  // not forwarded to the request\r\n  // and response objects.\r\n}\r\n\r\nfunction onRequestPause() {\r\n  this[kStream].pause();\r\n}\r\n\r\nfunction onRequestResume() {\r\n  this[kStream].resume();\r\n}\r\n\r\nfunction onStreamDrain() {\r\n  const response = this[kResponse];\r\n  if (response !== undefined)\r\n    response.emit('drain');\r\n}\r\n\r\nfunction onStreamAbortedRequest() {\r\n  const request = this[kRequest];\r\n  if (request !== undefined && request[kState].closed === false) {\r\n    request[kAborted] = true;\r\n    request.emit('aborted');\r\n  }\r\n}\r\n\r\nfunction onStreamAbortedResponse() {\r\n  // non-op for now\r\n}\r\n\r\nfunction resumeStream(stream) {\r\n  stream.resume();\r\n}\r\n\r\nconst proxySocketHandler = {\r\n  has(stream, prop) {\r\n    const ref = stream.session !== undefined ? stream.session[kSocket] : stream;\r\n    return (prop in stream) || (prop in ref);\r\n  },\r\n\r\n  get(stream, prop) {\r\n    switch (prop) {\r\n      case 'on':\r\n      case 'once':\r\n      case 'end':\r\n      case 'emit':\r\n      case 'destroy':\r\n        return FunctionPrototypeBind(stream[prop], stream);\r\n      case 'writable':\r\n      case 'destroyed':\r\n        return stream[prop];\r\n      case 'readable': {\r\n        if (stream.destroyed)\r\n          return false;\r\n        const request = stream[kRequest];\r\n        return request ? request.readable : stream.readable;\r\n      }\r\n      case 'setTimeout': {\r\n        const session = stream.session;\r\n        if (session !== undefined)\r\n          return FunctionPrototypeBind(session.setTimeout, session);\r\n        return FunctionPrototypeBind(stream.setTimeout, stream);\r\n      }\r\n      case 'write':\r\n      case 'read':\r\n      case 'pause':\r\n      case 'resume':\r\n        throw new ERR_HTTP2_NO_SOCKET_MANIPULATION();\r\n      default: {\r\n        const ref = stream.session !== undefined ?\r\n          stream.session[kSocket] : stream;\r\n        const value = ref[prop];\r\n        return typeof value === 'function' ?\r\n          FunctionPrototypeBind(value, ref) :\r\n          value;\r\n      }\r\n    }\r\n  },\r\n  getPrototypeOf(stream) {\r\n    if (stream.session !== undefined)\r\n      return ReflectGetPrototypeOf(stream.session[kSocket]);\r\n    return ReflectGetPrototypeOf(stream);\r\n  },\r\n  set(stream, prop, value) {\r\n    switch (prop) {\r\n      case 'writable':\r\n      case 'readable':\r\n      case 'destroyed':\r\n      case 'on':\r\n      case 'once':\r\n      case 'end':\r\n      case 'emit':\r\n      case 'destroy':\r\n        stream[prop] = value;\r\n        return true;\r\n      case 'setTimeout': {\r\n        const session = stream.session;\r\n        if (session !== undefined)\r\n          session.setTimeout = value;\r\n        else\r\n          stream.setTimeout = value;\r\n        return true;\r\n      }\r\n      case 'write':\r\n      case 'read':\r\n      case 'pause':\r\n      case 'resume':\r\n        throw new ERR_HTTP2_NO_SOCKET_MANIPULATION();\r\n      default: {\r\n        const ref = stream.session !== undefined ?\r\n          stream.session[kSocket] : stream;\r\n        ref[prop] = value;\r\n        return true;\r\n      }\r\n    }\r\n  },\r\n};\r\n\r\nfunction onStreamCloseRequest() {\r\n  const req = this[kRequest];\r\n\r\n  if (req === undefined)\r\n    return;\r\n\r\n  const state = req[kState];\r\n  state.closed = true;\r\n\r\n  req.push(null);\r\n  // If the user didn't interact with incoming data and didn't pipe it,\r\n  // dump it for compatibility with http1\r\n  if (!state.didRead && !req._readableState.resumeScheduled)\r\n    req.resume();\r\n\r\n  this[kProxySocket] = null;\r\n  this[kRequest] = undefined;\r\n\r\n  req.emit('close');\r\n}\r\n\r\nfunction onStreamTimeout(kind) {\r\n  return function onStreamTimeout() {\r\n    const obj = this[kind];\r\n    obj.emit('timeout');\r\n  };\r\n}\r\n\r\nclass Http2ServerRequest extends Readable {\r\n  constructor(stream, headers, options, rawHeaders) {\r\n    super({ autoDestroy: false, ...options });\r\n    this[kState] = {\r\n      closed: false,\r\n      didRead: false,\r\n    };\r\n    // Headers in HTTP/1 are not initialized using Object.create(null) which,\r\n    // although preferable, would simply break too much code. Ergo header\r\n    // initialization using Object.create(null) in HTTP/2 is intentional.\r\n    this[kHeaders] = headers;\r\n    this[kRawHeaders] = rawHeaders;\r\n    this[kTrailers] = {};\r\n    this[kRawTrailers] = [];\r\n    this[kStream] = stream;\r\n    this[kAborted] = false;\r\n    stream[kProxySocket] = null;\r\n    stream[kRequest] = this;\r\n\r\n    // Pause the stream..\r\n    stream.on('trailers', onStreamTrailers);\r\n    stream.on('end', onStreamEnd);\r\n    stream.on('error', onStreamError);\r\n    stream.on('aborted', onStreamAbortedRequest);\r\n    stream.on('close', onStreamCloseRequest);\r\n    stream.on('timeout', onStreamTimeout(kRequest));\r\n    this.on('pause', onRequestPause);\r\n    this.on('resume', onRequestResume);\r\n  }\r\n\r\n  get aborted() {\r\n    return this[kAborted];\r\n  }\r\n\r\n  get complete() {\r\n    return this[kAborted] ||\r\n           this.readableEnded ||\r\n           this[kState].closed ||\r\n           this[kStream].destroyed;\r\n  }\r\n\r\n  get stream() {\r\n    return this[kStream];\r\n  }\r\n\r\n  get headers() {\r\n    return this[kHeaders];\r\n  }\r\n\r\n  get rawHeaders() {\r\n    return this[kRawHeaders];\r\n  }\r\n\r\n  get trailers() {\r\n    return this[kTrailers];\r\n  }\r\n\r\n  get rawTrailers() {\r\n    return this[kRawTrailers];\r\n  }\r\n\r\n  get httpVersionMajor() {\r\n    return 2;\r\n  }\r\n\r\n  get httpVersionMinor() {\r\n    return 0;\r\n  }\r\n\r\n  get httpVersion() {\r\n    return '2.0';\r\n  }\r\n\r\n  get socket() {\r\n    const stream = this[kStream];\r\n    const proxySocket = stream[kProxySocket];\r\n    if (proxySocket === null)\r\n      return stream[kProxySocket] = new Proxy(stream, proxySocketHandler);\r\n    return proxySocket;\r\n  }\r\n\r\n  get connection() {\r\n    return this.socket;\r\n  }\r\n\r\n  _read(nread) {\r\n    const state = this[kState];\r\n    assert(!state.closed);\r\n    if (!state.didRead) {\r\n      state.didRead = true;\r\n      this[kStream].on('data', onStreamData);\r\n    } else {\r\n      process.nextTick(resumeStream, this[kStream]);\r\n    }\r\n  }\r\n\r\n  get method() {\r\n    return this[kHeaders][HTTP2_HEADER_METHOD];\r\n  }\r\n\r\n  set method(method) {\r\n    validateString(method, 'method');\r\n    if (StringPrototypeTrim(method) === '')\r\n      throw new ERR_INVALID_ARG_VALUE('method', method);\r\n\r\n    this[kHeaders][HTTP2_HEADER_METHOD] = method;\r\n  }\r\n\r\n  get authority() {\r\n    return getAuthority(this[kHeaders]);\r\n  }\r\n\r\n  get scheme() {\r\n    return this[kHeaders][HTTP2_HEADER_SCHEME];\r\n  }\r\n\r\n  get url() {\r\n    return this[kHeaders][HTTP2_HEADER_PATH];\r\n  }\r\n\r\n  set url(url) {\r\n    this[kHeaders][HTTP2_HEADER_PATH] = url;\r\n  }\r\n\r\n  setTimeout(msecs, callback) {\r\n    if (!this[kState].closed)\r\n      this[kStream].setTimeout(msecs, callback);\r\n    return this;\r\n  }\r\n}\r\n\r\nfunction onStreamTrailersReady() {\r\n  this.sendTrailers(this[kResponse][kTrailers]);\r\n}\r\n\r\nfunction onStreamCloseResponse() {\r\n  const res = this[kResponse];\r\n\r\n  if (res === undefined)\r\n    return;\r\n\r\n  const state = res[kState];\r\n\r\n  if (this.headRequest !== state.headRequest)\r\n    return;\r\n\r\n  state.closed = true;\r\n\r\n  this[kProxySocket] = null;\r\n\r\n  this.removeListener('wantTrailers', onStreamTrailersReady);\r\n  this[kResponse] = undefined;\r\n\r\n  res.emit('finish');\r\n  res.emit('close');\r\n}\r\n\r\nclass Http2ServerResponse extends Stream {\r\n  constructor(stream, options) {\r\n    super(options);\r\n    this[kState] = {\r\n      closed: false,\r\n      ending: false,\r\n      destroyed: false,\r\n      headRequest: false,\r\n      sendDate: true,\r\n      statusCode: HTTP_STATUS_OK,\r\n    };\r\n    this[kHeaders] = { __proto__: null };\r\n    this[kTrailers] = { __proto__: null };\r\n    this[kStream] = stream;\r\n    stream[kProxySocket] = null;\r\n    stream[kResponse] = this;\r\n    this.writable = true;\r\n    this.req = stream[kRequest];\r\n    stream.on('drain', onStreamDrain);\r\n    stream.on('aborted', onStreamAbortedResponse);\r\n    stream.on('close', onStreamCloseResponse);\r\n    stream.on('wantTrailers', onStreamTrailersReady);\r\n    stream.on('timeout', onStreamTimeout(kResponse));\r\n  }\r\n\r\n  // User land modules such as finalhandler just check truthiness of this\r\n  // but if someone is actually trying to use this for more than that\r\n  // then we simply can't support such use cases\r\n  get _header() {\r\n    return this.headersSent;\r\n  }\r\n\r\n  get writableEnded() {\r\n    const state = this[kState];\r\n    return state.ending;\r\n  }\r\n\r\n  get finished() {\r\n    const state = this[kState];\r\n    return state.ending;\r\n  }\r\n\r\n  get socket() {\r\n    // This is compatible with http1 which removes socket reference\r\n    // only from ServerResponse but not IncomingMessage\r\n    if (this[kState].closed)\r\n      return undefined;\r\n\r\n    const stream = this[kStream];\r\n    const proxySocket = stream[kProxySocket];\r\n    if (proxySocket === null)\r\n      return stream[kProxySocket] = new Proxy(stream, proxySocketHandler);\r\n    return proxySocket;\r\n  }\r\n\r\n  get connection() {\r\n    return this.socket;\r\n  }\r\n\r\n  get stream() {\r\n    return this[kStream];\r\n  }\r\n\r\n  get headersSent() {\r\n    return this[kStream].headersSent;\r\n  }\r\n\r\n  get sendDate() {\r\n    return this[kState].sendDate;\r\n  }\r\n\r\n  set sendDate(bool) {\r\n    this[kState].sendDate = Boolean(bool);\r\n  }\r\n\r\n  get statusCode() {\r\n    return this[kState].statusCode;\r\n  }\r\n\r\n  get writableCorked() {\r\n    return this[kStream].writableCorked;\r\n  }\r\n\r\n  get writableHighWaterMark() {\r\n    return this[kStream].writableHighWaterMark;\r\n  }\r\n\r\n  get writableFinished() {\r\n    return this[kStream].writableFinished;\r\n  }\r\n\r\n  get writableLength() {\r\n    return this[kStream].writableLength;\r\n  }\r\n\r\n  set statusCode(code) {\r\n    code |= 0;\r\n    if (code >= 100 && code < 200)\r\n      throw new ERR_HTTP2_INFO_STATUS_NOT_ALLOWED();\r\n    if (code < 100 || code > 599)\r\n      throw new ERR_HTTP2_STATUS_INVALID(code);\r\n    this[kState].statusCode = code;\r\n  }\r\n\r\n  setTrailer(name, value) {\r\n    validateString(name, 'name');\r\n    name = StringPrototypeToLowerCase(StringPrototypeTrim(name));\r\n    assertValidHeader(name, value);\r\n    this[kTrailers][name] = value;\r\n  }\r\n\r\n  addTrailers(headers) {\r\n    const keys = ObjectKeys(headers);\r\n    let key = '';\r\n    for (let i = 0; i < keys.length; i++) {\r\n      key = keys[i];\r\n      this.setTrailer(key, headers[key]);\r\n    }\r\n  }\r\n\r\n  getHeader(name) {\r\n    validateString(name, 'name');\r\n    name = StringPrototypeToLowerCase(StringPrototypeTrim(name));\r\n    return this[kHeaders][name];\r\n  }\r\n\r\n  getHeaderNames() {\r\n    return ObjectKeys(this[kHeaders]);\r\n  }\r\n\r\n  getHeaders() {\r\n    const headers = { __proto__: null };\r\n    return ObjectAssign(headers, this[kHeaders]);\r\n  }\r\n\r\n  hasHeader(name) {\r\n    validateString(name, 'name');\r\n    name = StringPrototypeToLowerCase(StringPrototypeTrim(name));\r\n    return ObjectPrototypeHasOwnProperty(this[kHeaders], name);\r\n  }\r\n\r\n  removeHeader(name) {\r\n    validateString(name, 'name');\r\n    if (this[kStream].headersSent)\r\n      throw new ERR_HTTP2_HEADERS_SENT();\r\n\r\n    name = StringPrototypeToLowerCase(StringPrototypeTrim(name));\r\n\r\n    if (name === 'date') {\r\n      this[kState].sendDate = false;\r\n\r\n      return;\r\n    }\r\n\r\n    delete this[kHeaders][name];\r\n  }\r\n\r\n  setHeader(name, value) {\r\n    validateString(name, 'name');\r\n    if (this[kStream].headersSent)\r\n      throw new ERR_HTTP2_HEADERS_SENT();\r\n\r\n    this[kSetHeader](name, value);\r\n  }\r\n\r\n  [kSetHeader](name, value) {\r\n    name = StringPrototypeToLowerCase(StringPrototypeTrim(name));\r\n    assertValidHeader(name, value);\r\n\r\n    if (!isConnectionHeaderAllowed(name, value)) {\r\n      return;\r\n    }\r\n\r\n    if (name[0] === ':')\r\n      assertValidPseudoHeader(name);\r\n    else if (!checkIsHttpToken(name))\r\n      this.destroy(new ERR_INVALID_HTTP_TOKEN('Header name', name));\r\n\r\n    this[kHeaders][name] = value;\r\n  }\r\n\r\n  appendHeader(name, value) {\r\n    validateString(name, 'name');\r\n    if (this[kStream].headersSent)\r\n      throw new ERR_HTTP2_HEADERS_SENT();\r\n\r\n    this[kAppendHeader](name, value);\r\n  }\r\n\r\n  [kAppendHeader](name, value) {\r\n    name = StringPrototypeToLowerCase(StringPrototypeTrim(name));\r\n    assertValidHeader(name, value);\r\n\r\n    if (!isConnectionHeaderAllowed(name, value)) {\r\n      return;\r\n    }\r\n\r\n    if (name[0] === ':')\r\n      assertValidPseudoHeader(name);\r\n    else if (!checkIsHttpToken(name))\r\n      this.destroy(new ERR_INVALID_HTTP_TOKEN('Header name', name));\r\n\r\n    // Handle various possible cases the same as OutgoingMessage.appendHeader:\r\n    const headers = this[kHeaders];\r\n    if (headers === null || !headers[name]) {\r\n      return this.setHeader(name, value);\r\n    }\r\n\r\n    if (!ArrayIsArray(headers[name])) {\r\n      headers[name] = [headers[name]];\r\n    }\r\n\r\n    const existingValues = headers[name];\r\n    if (ArrayIsArray(value)) {\r\n      for (let i = 0, length = value.length; i < length; i++) {\r\n        existingValues.push(value[i]);\r\n      }\r\n    } else {\r\n      existingValues.push(value);\r\n    }\r\n  }\r\n\r\n  get statusMessage() {\r\n    statusMessageWarn();\r\n\r\n    return '';\r\n  }\r\n\r\n  set statusMessage(msg) {\r\n    statusMessageWarn();\r\n  }\r\n\r\n  flushHeaders() {\r\n    const state = this[kState];\r\n    if (!state.closed && !this[kStream].headersSent)\r\n      this.writeHead(state.statusCode);\r\n  }\r\n\r\n  writeHead(statusCode, statusMessage, headers) {\r\n    const state = this[kState];\r\n\r\n    if (state.closed || this.stream.destroyed)\r\n      return this;\r\n    if (this[kStream].headersSent)\r\n      throw new ERR_HTTP2_HEADERS_SENT();\r\n\r\n    if (typeof statusMessage === 'string')\r\n      statusMessageWarn();\r\n\r\n    if (headers === undefined && typeof statusMessage === 'object')\r\n      headers = statusMessage;\r\n\r\n    let i;\r\n    if (ArrayIsArray(headers)) {\r\n      if (this[kHeaders]) {\r\n        // Headers in obj should override previous headers but still\r\n        // allow explicit duplicates. To do so, we first remove any\r\n        // existing conflicts, then use appendHeader. This is the\r\n        // slow path, which only applies when you use setHeader and\r\n        // then pass headers in writeHead too.\r\n\r\n        // We need to handle both the tuple and flat array formats, just\r\n        // like the logic further below.\r\n        if (headers.length && ArrayIsArray(headers[0])) {\r\n          for (let n = 0; n < headers.length; n += 1) {\r\n            const key = headers[n + 0][0];\r\n            this.removeHeader(key);\r\n          }\r\n        } else {\r\n          for (let n = 0; n < headers.length; n += 2) {\r\n            const key = headers[n + 0];\r\n            this.removeHeader(key);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Append all the headers provided in the array:\r\n      if (headers.length && ArrayIsArray(headers[0])) {\r\n        for (i = 0; i < headers.length; i++) {\r\n          const header = headers[i];\r\n          this[kAppendHeader](header[0], header[1]);\r\n        }\r\n      } else {\r\n        if (headers.length % 2 !== 0) {\r\n          throw new ERR_INVALID_ARG_VALUE('headers', headers);\r\n        }\r\n\r\n        for (i = 0; i < headers.length; i += 2) {\r\n          this[kAppendHeader](headers[i], headers[i + 1]);\r\n        }\r\n      }\r\n    } else if (typeof headers === 'object') {\r\n      const keys = ObjectKeys(headers);\r\n      let key = '';\r\n      for (i = 0; i < keys.length; i++) {\r\n        key = keys[i];\r\n        this[kSetHeader](key, headers[key]);\r\n      }\r\n    }\r\n\r\n    state.statusCode = statusCode;\r\n    this[kBeginSend]();\r\n\r\n    return this;\r\n  }\r\n\r\n  cork() {\r\n    this[kStream].cork();\r\n  }\r\n\r\n  uncork() {\r\n    this[kStream].uncork();\r\n  }\r\n\r\n  write(chunk, encoding, cb) {\r\n    const state = this[kState];\r\n\r\n    if (typeof encoding === 'function') {\r\n      cb = encoding;\r\n      encoding = 'utf8';\r\n    }\r\n\r\n    let err;\r\n    if (state.ending) {\r\n      err = new ERR_STREAM_WRITE_AFTER_END();\r\n    } else if (state.closed) {\r\n      err = new ERR_HTTP2_INVALID_STREAM();\r\n    } else if (state.destroyed) {\r\n      return false;\r\n    }\r\n\r\n    if (err) {\r\n      if (typeof cb === 'function')\r\n        process.nextTick(cb, err);\r\n      this.destroy(err);\r\n      return false;\r\n    }\r\n\r\n    const stream = this[kStream];\r\n    if (!stream.headersSent)\r\n      this.writeHead(state.statusCode);\r\n    return stream.write(chunk, encoding, cb);\r\n  }\r\n\r\n  end(chunk, encoding, cb) {\r\n    const stream = this[kStream];\r\n    const state = this[kState];\r\n\r\n    if (typeof chunk === 'function') {\r\n      cb = chunk;\r\n      chunk = null;\r\n    } else if (typeof encoding === 'function') {\r\n      cb = encoding;\r\n      encoding = 'utf8';\r\n    }\r\n\r\n    if ((state.closed || state.ending) &&\r\n        state.headRequest === stream.headRequest) {\r\n      if (typeof cb === 'function') {\r\n        process.nextTick(cb);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    if (chunk !== null && chunk !== undefined)\r\n      this.write(chunk, encoding);\r\n\r\n    state.headRequest = stream.headRequest;\r\n    state.ending = true;\r\n\r\n    if (typeof cb === 'function') {\r\n      if (stream.writableEnded)\r\n        this.once('finish', cb);\r\n      else\r\n        stream.once('finish', cb);\r\n    }\r\n\r\n    if (!stream.headersSent)\r\n      this.writeHead(this[kState].statusCode);\r\n\r\n    if (this[kState].closed || stream.destroyed)\r\n      ReflectApply(onStreamCloseResponse, stream, []);\r\n    else\r\n      stream.end();\r\n\r\n    return this;\r\n  }\r\n\r\n  destroy(err) {\r\n    if (this[kState].destroyed)\r\n      return;\r\n\r\n    this[kState].destroyed = true;\r\n    this[kStream].destroy(err);\r\n  }\r\n\r\n  setTimeout(msecs, callback) {\r\n    if (this[kState].closed)\r\n      return;\r\n    this[kStream].setTimeout(msecs, callback);\r\n  }\r\n\r\n  createPushResponse(headers, callback) {\r\n    validateFunction(callback, 'callback');\r\n    if (this[kState].closed) {\r\n      process.nextTick(callback, new ERR_HTTP2_INVALID_STREAM());\r\n      return;\r\n    }\r\n    this[kStream].pushStream(headers, {}, (err, stream, headers, options) => {\r\n      if (err) {\r\n        callback(err);\r\n        return;\r\n      }\r\n      callback(null, new Http2ServerResponse(stream));\r\n    });\r\n  }\r\n\r\n  [kBeginSend]() {\r\n    const state = this[kState];\r\n    const headers = this[kHeaders];\r\n    headers[HTTP2_HEADER_STATUS] = state.statusCode;\r\n    const options = {\r\n      endStream: state.ending,\r\n      waitForTrailers: true,\r\n      sendDate: state.sendDate,\r\n    };\r\n    this[kStream].respond(headers, options);\r\n  }\r\n\r\n  // TODO doesn't support callbacks\r\n  writeContinue() {\r\n    const stream = this[kStream];\r\n    if (stream.headersSent || this[kState].closed)\r\n      return false;\r\n    stream.additionalHeaders({\r\n      [HTTP2_HEADER_STATUS]: HTTP_STATUS_CONTINUE,\r\n    });\r\n    return true;\r\n  }\r\n\r\n  writeEarlyHints(hints) {\r\n    validateObject(hints, 'hints');\r\n\r\n    const headers = { __proto__: null };\r\n\r\n    const linkHeaderValue = validateLinkHeaderValue(hints.link);\r\n\r\n    for (const key of ObjectKeys(hints)) {\r\n      if (key !== 'link') {\r\n        headers[key] = hints[key];\r\n      }\r\n    }\r\n\r\n    if (linkHeaderValue.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    const stream = this[kStream];\r\n\r\n    if (stream.headersSent || this[kState].closed)\r\n      return false;\r\n\r\n    stream.additionalHeaders({\r\n      ...headers,\r\n      [HTTP2_HEADER_STATUS]: HTTP_STATUS_EARLY_HINTS,\r\n      'Link': linkHeaderValue,\r\n    });\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction onServerStream(ServerRequest, ServerResponse,\r\n                        stream, headers, flags, rawHeaders) {\r\n  const server = this;\r\n  const request = new ServerRequest(stream, headers, undefined, rawHeaders);\r\n  const response = new ServerResponse(stream);\r\n\r\n  // Check for the CONNECT method\r\n  const method = headers[HTTP2_HEADER_METHOD];\r\n  if (method === 'CONNECT') {\r\n    if (!server.emit('connect', request, response)) {\r\n      response.statusCode = HTTP_STATUS_METHOD_NOT_ALLOWED;\r\n      response.end();\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Check for Expectations\r\n  if (headers.expect !== undefined) {\r\n    if (headers.expect === '100-continue') {\r\n      if (server.listenerCount('checkContinue')) {\r\n        server.emit('checkContinue', request, response);\r\n      } else {\r\n        response.writeContinue();\r\n        server.emit('request', request, response);\r\n      }\r\n    } else if (server.listenerCount('checkExpectation')) {\r\n      server.emit('checkExpectation', request, response);\r\n    } else {\r\n      response.statusCode = HTTP_STATUS_EXPECTATION_FAILED;\r\n      response.end();\r\n    }\r\n    return;\r\n  }\r\n\r\n  server.emit('request', request, response);\r\n}\r\n\r\nmodule.exports = {\r\n  onServerStream,\r\n  Http2ServerRequest,\r\n  Http2ServerResponse,\r\n};\r\n"
  },
  "174": {
    "metadata": {
      "scriptId": "174",
      "url": "node:internal/http2/util",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 809,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "5d4be790114244fa8d32a29c52bcd0a33edabd5ab500ee9f2dbd70ab2c48c08a",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 28041,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/http2/util"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  Error,\r\n  MathMax,\r\n  Number,\r\n  NumberIsNaN,\r\n  ObjectKeys,\r\n  SafeSet,\r\n  String,\r\n  StringFromCharCode,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeToLowerCase,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst binding = internalBinding('http2');\r\nconst {\r\n  codes: {\r\n    ERR_HTTP2_HEADER_SINGLE_VALUE,\r\n    ERR_HTTP2_INVALID_CONNECTION_HEADERS,\r\n    ERR_HTTP2_INVALID_PSEUDOHEADER: { HideStackFramesError: ERR_HTTP2_INVALID_PSEUDOHEADER },\r\n    ERR_HTTP2_INVALID_SETTING_VALUE,\r\n    ERR_HTTP2_TOO_MANY_CUSTOM_SETTINGS,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_HTTP_TOKEN,\r\n  },\r\n  getMessage,\r\n  hideStackFrames,\r\n  kIsNodeError,\r\n} = require('internal/errors');\r\n\r\nconst kSensitiveHeaders = Symbol('nodejs.http2.sensitiveHeaders');\r\nconst kSocket = Symbol('socket');\r\nconst kProxySocket = Symbol('proxySocket');\r\nconst kRequest = Symbol('request');\r\n\r\nconst {\r\n  NGHTTP2_NV_FLAG_NONE,\r\n  NGHTTP2_NV_FLAG_NO_INDEX,\r\n  NGHTTP2_SESSION_CLIENT,\r\n  NGHTTP2_SESSION_SERVER,\r\n\r\n  HTTP2_HEADER_STATUS,\r\n  HTTP2_HEADER_METHOD,\r\n  HTTP2_HEADER_AUTHORITY,\r\n  HTTP2_HEADER_SCHEME,\r\n  HTTP2_HEADER_PATH,\r\n  HTTP2_HEADER_PROTOCOL,\r\n  HTTP2_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS,\r\n  HTTP2_HEADER_ACCESS_CONTROL_MAX_AGE,\r\n  HTTP2_HEADER_ACCESS_CONTROL_REQUEST_METHOD,\r\n  HTTP2_HEADER_AGE,\r\n  HTTP2_HEADER_AUTHORIZATION,\r\n  HTTP2_HEADER_CONTENT_ENCODING,\r\n  HTTP2_HEADER_CONTENT_LANGUAGE,\r\n  HTTP2_HEADER_CONTENT_LENGTH,\r\n  HTTP2_HEADER_CONTENT_LOCATION,\r\n  HTTP2_HEADER_CONTENT_MD5,\r\n  HTTP2_HEADER_CONTENT_RANGE,\r\n  HTTP2_HEADER_CONTENT_TYPE,\r\n  HTTP2_HEADER_COOKIE,\r\n  HTTP2_HEADER_DATE,\r\n  HTTP2_HEADER_DNT,\r\n  HTTP2_HEADER_ETAG,\r\n  HTTP2_HEADER_EXPIRES,\r\n  HTTP2_HEADER_FROM,\r\n  HTTP2_HEADER_HOST,\r\n  HTTP2_HEADER_IF_MATCH,\r\n  HTTP2_HEADER_IF_NONE_MATCH,\r\n  HTTP2_HEADER_IF_MODIFIED_SINCE,\r\n  HTTP2_HEADER_IF_RANGE,\r\n  HTTP2_HEADER_IF_UNMODIFIED_SINCE,\r\n  HTTP2_HEADER_LAST_MODIFIED,\r\n  HTTP2_HEADER_LOCATION,\r\n  HTTP2_HEADER_MAX_FORWARDS,\r\n  HTTP2_HEADER_PROXY_AUTHORIZATION,\r\n  HTTP2_HEADER_RANGE,\r\n  HTTP2_HEADER_REFERER,\r\n  HTTP2_HEADER_RETRY_AFTER,\r\n  HTTP2_HEADER_SET_COOKIE,\r\n  HTTP2_HEADER_TK,\r\n  HTTP2_HEADER_UPGRADE_INSECURE_REQUESTS,\r\n  HTTP2_HEADER_USER_AGENT,\r\n  HTTP2_HEADER_X_CONTENT_TYPE_OPTIONS,\r\n\r\n  HTTP2_HEADER_CONNECTION,\r\n  HTTP2_HEADER_UPGRADE,\r\n  HTTP2_HEADER_HTTP2_SETTINGS,\r\n  HTTP2_HEADER_TE,\r\n  HTTP2_HEADER_TRANSFER_ENCODING,\r\n  HTTP2_HEADER_KEEP_ALIVE,\r\n  HTTP2_HEADER_PROXY_CONNECTION,\r\n\r\n  HTTP2_METHOD_DELETE,\r\n  HTTP2_METHOD_GET,\r\n  HTTP2_METHOD_HEAD,\r\n} = binding.constants;\r\n\r\n// This set is defined strictly by the HTTP/2 specification. Only\r\n// :-prefixed headers defined by that specification may be added to\r\n// this set.\r\nconst kValidPseudoHeaders = new SafeSet([\r\n  HTTP2_HEADER_STATUS,\r\n  HTTP2_HEADER_METHOD,\r\n  HTTP2_HEADER_AUTHORITY,\r\n  HTTP2_HEADER_SCHEME,\r\n  HTTP2_HEADER_PATH,\r\n  HTTP2_HEADER_PROTOCOL,\r\n]);\r\n\r\n// This set contains headers that are permitted to have only a single\r\n// value. Multiple instances must not be specified.\r\nconst kSingleValueHeaders = new SafeSet([\r\n  HTTP2_HEADER_STATUS,\r\n  HTTP2_HEADER_METHOD,\r\n  HTTP2_HEADER_AUTHORITY,\r\n  HTTP2_HEADER_SCHEME,\r\n  HTTP2_HEADER_PATH,\r\n  HTTP2_HEADER_PROTOCOL,\r\n  HTTP2_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS,\r\n  HTTP2_HEADER_ACCESS_CONTROL_MAX_AGE,\r\n  HTTP2_HEADER_ACCESS_CONTROL_REQUEST_METHOD,\r\n  HTTP2_HEADER_AGE,\r\n  HTTP2_HEADER_AUTHORIZATION,\r\n  HTTP2_HEADER_CONTENT_ENCODING,\r\n  HTTP2_HEADER_CONTENT_LANGUAGE,\r\n  HTTP2_HEADER_CONTENT_LENGTH,\r\n  HTTP2_HEADER_CONTENT_LOCATION,\r\n  HTTP2_HEADER_CONTENT_MD5,\r\n  HTTP2_HEADER_CONTENT_RANGE,\r\n  HTTP2_HEADER_CONTENT_TYPE,\r\n  HTTP2_HEADER_DATE,\r\n  HTTP2_HEADER_DNT,\r\n  HTTP2_HEADER_ETAG,\r\n  HTTP2_HEADER_EXPIRES,\r\n  HTTP2_HEADER_FROM,\r\n  HTTP2_HEADER_HOST,\r\n  HTTP2_HEADER_IF_MATCH,\r\n  HTTP2_HEADER_IF_MODIFIED_SINCE,\r\n  HTTP2_HEADER_IF_NONE_MATCH,\r\n  HTTP2_HEADER_IF_RANGE,\r\n  HTTP2_HEADER_IF_UNMODIFIED_SINCE,\r\n  HTTP2_HEADER_LAST_MODIFIED,\r\n  HTTP2_HEADER_LOCATION,\r\n  HTTP2_HEADER_MAX_FORWARDS,\r\n  HTTP2_HEADER_PROXY_AUTHORIZATION,\r\n  HTTP2_HEADER_RANGE,\r\n  HTTP2_HEADER_REFERER,\r\n  HTTP2_HEADER_RETRY_AFTER,\r\n  HTTP2_HEADER_TK,\r\n  HTTP2_HEADER_UPGRADE_INSECURE_REQUESTS,\r\n  HTTP2_HEADER_USER_AGENT,\r\n  HTTP2_HEADER_X_CONTENT_TYPE_OPTIONS,\r\n]);\r\n\r\n// The HTTP methods in this set are specifically defined as assigning no\r\n// meaning to the request payload. By default, unless the user explicitly\r\n// overrides the endStream option on the request method, the endStream\r\n// option will be defaulted to true when these methods are used.\r\nconst kNoPayloadMethods = new SafeSet([\r\n  HTTP2_METHOD_DELETE,\r\n  HTTP2_METHOD_GET,\r\n  HTTP2_METHOD_HEAD,\r\n]);\r\n\r\n// The following ArrayBuffer instances are used to share memory more efficiently\r\n// with the native binding side for a number of methods. These are not intended\r\n// to be used directly by users in any way. The ArrayBuffers are created on\r\n// the native side with values that are filled in on demand, the js code then\r\n// reads those values out. The set of IDX constants that follow identify the\r\n// relevant data positions within these buffers.\r\nconst { settingsBuffer, optionsBuffer } = binding;\r\n\r\n// Note that Float64Array is used here because there is no Int64Array available\r\n// and these deal with numbers that can be beyond the range of Uint32 and Int32.\r\n// The values set on the native side will always be integers. This is not a\r\n// unique example of this, this pattern can be found in use in other parts of\r\n// Node.js core as a performance optimization.\r\nconst { sessionState, streamState } = binding;\r\n\r\nconst IDX_SETTINGS_HEADER_TABLE_SIZE = 0;\r\nconst IDX_SETTINGS_ENABLE_PUSH = 1;\r\nconst IDX_SETTINGS_INITIAL_WINDOW_SIZE = 2;\r\nconst IDX_SETTINGS_MAX_FRAME_SIZE = 3;\r\nconst IDX_SETTINGS_MAX_CONCURRENT_STREAMS = 4;\r\nconst IDX_SETTINGS_MAX_HEADER_LIST_SIZE = 5;\r\nconst IDX_SETTINGS_ENABLE_CONNECT_PROTOCOL = 6;\r\nconst IDX_SETTINGS_FLAGS = 7;\r\n\r\n// Maximum number of allowed additional settings\r\nconst MAX_ADDITIONAL_SETTINGS = 10;\r\n\r\nconst IDX_SESSION_STATE_EFFECTIVE_LOCAL_WINDOW_SIZE = 0;\r\nconst IDX_SESSION_STATE_EFFECTIVE_RECV_DATA_LENGTH = 1;\r\nconst IDX_SESSION_STATE_NEXT_STREAM_ID = 2;\r\nconst IDX_SESSION_STATE_LOCAL_WINDOW_SIZE = 3;\r\nconst IDX_SESSION_STATE_LAST_PROC_STREAM_ID = 4;\r\nconst IDX_SESSION_STATE_REMOTE_WINDOW_SIZE = 5;\r\nconst IDX_SESSION_STATE_OUTBOUND_QUEUE_SIZE = 6;\r\nconst IDX_SESSION_STATE_HD_DEFLATE_DYNAMIC_TABLE_SIZE = 7;\r\nconst IDX_SESSION_STATE_HD_INFLATE_DYNAMIC_TABLE_SIZE = 8;\r\nconst IDX_STREAM_STATE = 0;\r\nconst IDX_STREAM_STATE_WEIGHT = 1;\r\nconst IDX_STREAM_STATE_SUM_DEPENDENCY_WEIGHT = 2;\r\nconst IDX_STREAM_STATE_LOCAL_CLOSE = 3;\r\nconst IDX_STREAM_STATE_REMOTE_CLOSE = 4;\r\nconst IDX_STREAM_STATE_LOCAL_WINDOW_SIZE = 5;\r\n\r\nconst IDX_OPTIONS_MAX_DEFLATE_DYNAMIC_TABLE_SIZE = 0;\r\nconst IDX_OPTIONS_MAX_RESERVED_REMOTE_STREAMS = 1;\r\nconst IDX_OPTIONS_MAX_SEND_HEADER_BLOCK_LENGTH = 2;\r\nconst IDX_OPTIONS_PEER_MAX_CONCURRENT_STREAMS = 3;\r\nconst IDX_OPTIONS_PADDING_STRATEGY = 4;\r\nconst IDX_OPTIONS_MAX_HEADER_LIST_PAIRS = 5;\r\nconst IDX_OPTIONS_MAX_OUTSTANDING_PINGS = 6;\r\nconst IDX_OPTIONS_MAX_OUTSTANDING_SETTINGS = 7;\r\nconst IDX_OPTIONS_MAX_SESSION_MEMORY = 8;\r\nconst IDX_OPTIONS_MAX_SETTINGS = 9;\r\nconst IDX_OPTIONS_FLAGS = 10;\r\n\r\nfunction updateOptionsBuffer(options) {\r\n  let flags = 0;\r\n  if (typeof options.maxDeflateDynamicTableSize === 'number') {\r\n    flags |= (1 << IDX_OPTIONS_MAX_DEFLATE_DYNAMIC_TABLE_SIZE);\r\n    optionsBuffer[IDX_OPTIONS_MAX_DEFLATE_DYNAMIC_TABLE_SIZE] =\r\n      options.maxDeflateDynamicTableSize;\r\n  }\r\n  if (typeof options.maxReservedRemoteStreams === 'number') {\r\n    flags |= (1 << IDX_OPTIONS_MAX_RESERVED_REMOTE_STREAMS);\r\n    optionsBuffer[IDX_OPTIONS_MAX_RESERVED_REMOTE_STREAMS] =\r\n      options.maxReservedRemoteStreams;\r\n  }\r\n  if (typeof options.maxSendHeaderBlockLength === 'number') {\r\n    flags |= (1 << IDX_OPTIONS_MAX_SEND_HEADER_BLOCK_LENGTH);\r\n    optionsBuffer[IDX_OPTIONS_MAX_SEND_HEADER_BLOCK_LENGTH] =\r\n      options.maxSendHeaderBlockLength;\r\n  }\r\n  if (typeof options.peerMaxConcurrentStreams === 'number') {\r\n    flags |= (1 << IDX_OPTIONS_PEER_MAX_CONCURRENT_STREAMS);\r\n    optionsBuffer[IDX_OPTIONS_PEER_MAX_CONCURRENT_STREAMS] =\r\n      options.peerMaxConcurrentStreams;\r\n  }\r\n  if (typeof options.paddingStrategy === 'number') {\r\n    flags |= (1 << IDX_OPTIONS_PADDING_STRATEGY);\r\n    optionsBuffer[IDX_OPTIONS_PADDING_STRATEGY] =\r\n      options.paddingStrategy;\r\n  }\r\n  if (typeof options.maxHeaderListPairs === 'number') {\r\n    flags |= (1 << IDX_OPTIONS_MAX_HEADER_LIST_PAIRS);\r\n    optionsBuffer[IDX_OPTIONS_MAX_HEADER_LIST_PAIRS] =\r\n      options.maxHeaderListPairs;\r\n  }\r\n  if (typeof options.maxOutstandingPings === 'number') {\r\n    flags |= (1 << IDX_OPTIONS_MAX_OUTSTANDING_PINGS);\r\n    optionsBuffer[IDX_OPTIONS_MAX_OUTSTANDING_PINGS] =\r\n      options.maxOutstandingPings;\r\n  }\r\n  if (typeof options.maxOutstandingSettings === 'number') {\r\n    flags |= (1 << IDX_OPTIONS_MAX_OUTSTANDING_SETTINGS);\r\n    optionsBuffer[IDX_OPTIONS_MAX_OUTSTANDING_SETTINGS] =\r\n      MathMax(1, options.maxOutstandingSettings);\r\n  }\r\n  if (typeof options.maxSessionMemory === 'number') {\r\n    flags |= (1 << IDX_OPTIONS_MAX_SESSION_MEMORY);\r\n    optionsBuffer[IDX_OPTIONS_MAX_SESSION_MEMORY] =\r\n      MathMax(1, options.maxSessionMemory);\r\n  }\r\n  if (typeof options.maxSettings === 'number') {\r\n    flags |= (1 << IDX_OPTIONS_MAX_SETTINGS);\r\n    optionsBuffer[IDX_OPTIONS_MAX_SETTINGS] =\r\n      MathMax(1, options.maxSettings);\r\n  }\r\n  optionsBuffer[IDX_OPTIONS_FLAGS] = flags;\r\n}\r\n\r\nfunction addCustomSettingsToObj() {\r\n  const toRet = {};\r\n  const num = settingsBuffer[IDX_SETTINGS_FLAGS + 1];\r\n  for (let i = 0; i < num; i++) {\r\n    toRet[settingsBuffer[IDX_SETTINGS_FLAGS + 1 + 2 * i + 1].toString()] =\r\n       Number(settingsBuffer[IDX_SETTINGS_FLAGS + 1 + 2 * i + 2]);\r\n  }\r\n  return toRet;\r\n}\r\n\r\nfunction getDefaultSettings() {\r\n  settingsBuffer[IDX_SETTINGS_FLAGS] = 0;\r\n  settingsBuffer[IDX_SETTINGS_FLAGS + 1] = 0; // Length of custom settings\r\n  binding.refreshDefaultSettings();\r\n  const holder = { __proto__: null };\r\n\r\n  const flags = settingsBuffer[IDX_SETTINGS_FLAGS];\r\n\r\n  if ((flags & (1 << IDX_SETTINGS_HEADER_TABLE_SIZE)) ===\r\n      (1 << IDX_SETTINGS_HEADER_TABLE_SIZE)) {\r\n    holder.headerTableSize =\r\n      settingsBuffer[IDX_SETTINGS_HEADER_TABLE_SIZE];\r\n  }\r\n\r\n  if ((flags & (1 << IDX_SETTINGS_ENABLE_PUSH)) ===\r\n      (1 << IDX_SETTINGS_ENABLE_PUSH)) {\r\n    holder.enablePush =\r\n      settingsBuffer[IDX_SETTINGS_ENABLE_PUSH] === 1;\r\n  }\r\n\r\n  if ((flags & (1 << IDX_SETTINGS_INITIAL_WINDOW_SIZE)) ===\r\n      (1 << IDX_SETTINGS_INITIAL_WINDOW_SIZE)) {\r\n    holder.initialWindowSize =\r\n      settingsBuffer[IDX_SETTINGS_INITIAL_WINDOW_SIZE];\r\n  }\r\n\r\n  if ((flags & (1 << IDX_SETTINGS_MAX_FRAME_SIZE)) ===\r\n      (1 << IDX_SETTINGS_MAX_FRAME_SIZE)) {\r\n    holder.maxFrameSize =\r\n      settingsBuffer[IDX_SETTINGS_MAX_FRAME_SIZE];\r\n  }\r\n\r\n  if ((flags & (1 << IDX_SETTINGS_MAX_CONCURRENT_STREAMS)) ===\r\n      (1 << IDX_SETTINGS_MAX_CONCURRENT_STREAMS)) {\r\n    holder.maxConcurrentStreams =\r\n      settingsBuffer[IDX_SETTINGS_MAX_CONCURRENT_STREAMS];\r\n  }\r\n\r\n  if ((flags & (1 << IDX_SETTINGS_MAX_HEADER_LIST_SIZE)) ===\r\n      (1 << IDX_SETTINGS_MAX_HEADER_LIST_SIZE)) {\r\n    holder.maxHeaderListSize = holder.maxHeaderSize =\r\n      settingsBuffer[IDX_SETTINGS_MAX_HEADER_LIST_SIZE];\r\n  }\r\n\r\n  if ((flags & (1 << IDX_SETTINGS_ENABLE_CONNECT_PROTOCOL)) ===\r\n      (1 << IDX_SETTINGS_ENABLE_CONNECT_PROTOCOL)) {\r\n    holder.enableConnectProtocol =\r\n      settingsBuffer[IDX_SETTINGS_ENABLE_CONNECT_PROTOCOL] === 1;\r\n  }\r\n\r\n  if (settingsBuffer[IDX_SETTINGS_FLAGS + 1]) holder.customSettings = addCustomSettingsToObj();\r\n\r\n  return holder;\r\n}\r\n\r\n// Remote is a boolean. true to fetch remote settings, false to fetch local.\r\n// this is only called internally\r\nfunction getSettings(session, remote) {\r\n  if (remote)\r\n    session.remoteSettings();\r\n  else\r\n    session.localSettings();\r\n\r\n  const toRet = {\r\n    headerTableSize: settingsBuffer[IDX_SETTINGS_HEADER_TABLE_SIZE],\r\n    enablePush: !!settingsBuffer[IDX_SETTINGS_ENABLE_PUSH],\r\n    initialWindowSize: settingsBuffer[IDX_SETTINGS_INITIAL_WINDOW_SIZE],\r\n    maxFrameSize: settingsBuffer[IDX_SETTINGS_MAX_FRAME_SIZE],\r\n    maxConcurrentStreams: settingsBuffer[IDX_SETTINGS_MAX_CONCURRENT_STREAMS],\r\n    maxHeaderListSize: settingsBuffer[IDX_SETTINGS_MAX_HEADER_LIST_SIZE],\r\n    maxHeaderSize: settingsBuffer[IDX_SETTINGS_MAX_HEADER_LIST_SIZE],\r\n    enableConnectProtocol:\r\n      !!settingsBuffer[IDX_SETTINGS_ENABLE_CONNECT_PROTOCOL],\r\n  };\r\n  if (settingsBuffer[IDX_SETTINGS_FLAGS + 1]) toRet.customSettings = addCustomSettingsToObj();\r\n  return toRet;\r\n}\r\n\r\nfunction updateSettingsBuffer(settings) {\r\n  let flags = 0;\r\n  let numCustomSettings = 0;\r\n\r\n  if (typeof settings.customSettings === 'object') {\r\n    const customSettings = settings.customSettings;\r\n    for (const setting in customSettings) {\r\n      const val = customSettings[setting];\r\n      if (typeof val === 'number') {\r\n        let set = false;\r\n        const nsetting = Number(setting);\r\n        if (NumberIsNaN(nsetting) ||\r\n          typeof nsetting !== 'number' ||\r\n          0 >= nsetting ||\r\n          nsetting > 0xffff)\r\n          throw new ERR_HTTP2_INVALID_SETTING_VALUE.RangeError(\r\n            'Range Error', nsetting, 0, 0xffff);\r\n        if (NumberIsNaN(val) ||\r\n            typeof val !== 'number' ||\r\n            0 >= val ||\r\n            val > 0xffffffff)\r\n          throw new ERR_HTTP2_INVALID_SETTING_VALUE.RangeError(\r\n            'Range Error', val, 0, 0xffffffff);\r\n        if (nsetting < IDX_SETTINGS_FLAGS) {\r\n          set = true;\r\n          switch (nsetting) {\r\n            case IDX_SETTINGS_HEADER_TABLE_SIZE:\r\n              flags |= (1 << IDX_SETTINGS_HEADER_TABLE_SIZE);\r\n              settingsBuffer[IDX_SETTINGS_HEADER_TABLE_SIZE] =\r\n                val;\r\n              break;\r\n            case IDX_SETTINGS_ENABLE_PUSH:\r\n              flags |= (1 << IDX_SETTINGS_ENABLE_PUSH);\r\n              settingsBuffer[IDX_SETTINGS_ENABLE_PUSH] = val;\r\n              break;\r\n            case IDX_SETTINGS_INITIAL_WINDOW_SIZE:\r\n              flags |= (1 << IDX_SETTINGS_INITIAL_WINDOW_SIZE);\r\n              settingsBuffer[IDX_SETTINGS_INITIAL_WINDOW_SIZE] =\r\n                val;\r\n              break;\r\n            case IDX_SETTINGS_MAX_FRAME_SIZE:\r\n              flags |= (1 << IDX_SETTINGS_MAX_FRAME_SIZE);\r\n              settingsBuffer[IDX_SETTINGS_MAX_FRAME_SIZE] =\r\n                val;\r\n              break;\r\n            case IDX_SETTINGS_MAX_CONCURRENT_STREAMS:\r\n              flags |= (1 << IDX_SETTINGS_MAX_CONCURRENT_STREAMS);\r\n              settingsBuffer[IDX_SETTINGS_MAX_CONCURRENT_STREAMS] = val;\r\n              break;\r\n            case IDX_SETTINGS_MAX_HEADER_LIST_SIZE:\r\n              flags |= (1 << IDX_SETTINGS_MAX_HEADER_LIST_SIZE);\r\n              settingsBuffer[IDX_SETTINGS_MAX_HEADER_LIST_SIZE] =\r\n                val;\r\n              break;\r\n            case IDX_SETTINGS_ENABLE_CONNECT_PROTOCOL:\r\n              flags |= (1 << IDX_SETTINGS_ENABLE_CONNECT_PROTOCOL);\r\n              settingsBuffer[IDX_SETTINGS_ENABLE_CONNECT_PROTOCOL] = val;\r\n              break;\r\n            default:\r\n              set = false;\r\n              break;\r\n          }\r\n        }\r\n        if (!set) { // not supported\r\n          let i = 0;\r\n          while (i < numCustomSettings) {\r\n            if (settingsBuffer[IDX_SETTINGS_FLAGS + 1 + 2 * i + 1] === nsetting) {\r\n              settingsBuffer[IDX_SETTINGS_FLAGS + 1 + 2 * i + 2] = val;\r\n              break;\r\n            }\r\n            i++;\r\n          }\r\n          if (i === numCustomSettings) {\r\n            if (numCustomSettings === MAX_ADDITIONAL_SETTINGS)\r\n              throw new ERR_HTTP2_TOO_MANY_CUSTOM_SETTINGS();\r\n\r\n            settingsBuffer[IDX_SETTINGS_FLAGS + 1 + 2 * numCustomSettings + 1] = nsetting;\r\n            settingsBuffer[IDX_SETTINGS_FLAGS + 1 + 2 * numCustomSettings + 2] = val;\r\n            numCustomSettings++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  settingsBuffer[IDX_SETTINGS_FLAGS + 1] = numCustomSettings;\r\n\r\n  if (typeof settings.headerTableSize === 'number') {\r\n    flags |= (1 << IDX_SETTINGS_HEADER_TABLE_SIZE);\r\n    settingsBuffer[IDX_SETTINGS_HEADER_TABLE_SIZE] =\r\n      settings.headerTableSize;\r\n  }\r\n  if (typeof settings.maxConcurrentStreams === 'number') {\r\n    flags |= (1 << IDX_SETTINGS_MAX_CONCURRENT_STREAMS);\r\n    settingsBuffer[IDX_SETTINGS_MAX_CONCURRENT_STREAMS] =\r\n      settings.maxConcurrentStreams;\r\n  }\r\n  if (typeof settings.initialWindowSize === 'number') {\r\n    flags |= (1 << IDX_SETTINGS_INITIAL_WINDOW_SIZE);\r\n    settingsBuffer[IDX_SETTINGS_INITIAL_WINDOW_SIZE] =\r\n      settings.initialWindowSize;\r\n  }\r\n  if (typeof settings.maxFrameSize === 'number') {\r\n    flags |= (1 << IDX_SETTINGS_MAX_FRAME_SIZE);\r\n    settingsBuffer[IDX_SETTINGS_MAX_FRAME_SIZE] =\r\n      settings.maxFrameSize;\r\n  }\r\n  if (typeof settings.maxHeaderListSize === 'number' ||\r\n      typeof settings.maxHeaderSize === 'number') {\r\n    flags |= (1 << IDX_SETTINGS_MAX_HEADER_LIST_SIZE);\r\n    if (settings.maxHeaderSize !== undefined &&\r\n      (settings.maxHeaderSize !== settings.maxHeaderListSize)) {\r\n      process.emitWarning(\r\n        'settings.maxHeaderSize overwrite settings.maxHeaderListSize',\r\n      );\r\n      settingsBuffer[IDX_SETTINGS_MAX_HEADER_LIST_SIZE] =\r\n        settings.maxHeaderSize;\r\n    } else {\r\n      settingsBuffer[IDX_SETTINGS_MAX_HEADER_LIST_SIZE] =\r\n        settings.maxHeaderListSize;\r\n    }\r\n  }\r\n  if (typeof settings.enablePush === 'boolean') {\r\n    flags |= (1 << IDX_SETTINGS_ENABLE_PUSH);\r\n    settingsBuffer[IDX_SETTINGS_ENABLE_PUSH] = Number(settings.enablePush);\r\n  }\r\n  if (typeof settings.enableConnectProtocol === 'boolean') {\r\n    flags |= (1 << IDX_SETTINGS_ENABLE_CONNECT_PROTOCOL);\r\n    settingsBuffer[IDX_SETTINGS_ENABLE_CONNECT_PROTOCOL] =\r\n      Number(settings.enableConnectProtocol);\r\n  }\r\n\r\n  settingsBuffer[IDX_SETTINGS_FLAGS] = flags;\r\n}\r\n\r\nfunction remoteCustomSettingsToBuffer(remoteCustomSettings) {\r\n  if (remoteCustomSettings.length > MAX_ADDITIONAL_SETTINGS)\r\n    throw new ERR_HTTP2_TOO_MANY_CUSTOM_SETTINGS();\r\n  let numCustomSettings = 0;\r\n  for (let i = 0; i < remoteCustomSettings.length; i++) {\r\n    const nsetting = remoteCustomSettings[i];\r\n    if (typeof nsetting === 'number' && nsetting <= 0xffff &&\r\n        nsetting >= 0) {\r\n      settingsBuffer[IDX_SETTINGS_FLAGS + 1 + 2 * numCustomSettings + 1] = nsetting;\r\n      numCustomSettings++;\r\n    } else\r\n      throw new ERR_HTTP2_INVALID_SETTING_VALUE.RangeError(\r\n        'Range Error', nsetting, 0, 0xffff);\r\n\r\n  }\r\n  settingsBuffer[IDX_SETTINGS_FLAGS + 1] = numCustomSettings;\r\n}\r\n\r\nfunction getSessionState(session) {\r\n  session.refreshState();\r\n  return {\r\n    effectiveLocalWindowSize:\r\n      sessionState[IDX_SESSION_STATE_EFFECTIVE_LOCAL_WINDOW_SIZE],\r\n    effectiveRecvDataLength:\r\n      sessionState[IDX_SESSION_STATE_EFFECTIVE_RECV_DATA_LENGTH],\r\n    nextStreamID:\r\n      sessionState[IDX_SESSION_STATE_NEXT_STREAM_ID],\r\n    localWindowSize:\r\n      sessionState[IDX_SESSION_STATE_LOCAL_WINDOW_SIZE],\r\n    lastProcStreamID:\r\n      sessionState[IDX_SESSION_STATE_LAST_PROC_STREAM_ID],\r\n    remoteWindowSize:\r\n      sessionState[IDX_SESSION_STATE_REMOTE_WINDOW_SIZE],\r\n    outboundQueueSize:\r\n      sessionState[IDX_SESSION_STATE_OUTBOUND_QUEUE_SIZE],\r\n    deflateDynamicTableSize:\r\n      sessionState[IDX_SESSION_STATE_HD_DEFLATE_DYNAMIC_TABLE_SIZE],\r\n    inflateDynamicTableSize:\r\n      sessionState[IDX_SESSION_STATE_HD_INFLATE_DYNAMIC_TABLE_SIZE],\r\n  };\r\n}\r\n\r\nfunction getStreamState(stream) {\r\n  stream.refreshState();\r\n  return {\r\n    state: streamState[IDX_STREAM_STATE],\r\n    weight: streamState[IDX_STREAM_STATE_WEIGHT],\r\n    sumDependencyWeight: streamState[IDX_STREAM_STATE_SUM_DEPENDENCY_WEIGHT],\r\n    localClose: streamState[IDX_STREAM_STATE_LOCAL_CLOSE],\r\n    remoteClose: streamState[IDX_STREAM_STATE_REMOTE_CLOSE],\r\n    localWindowSize: streamState[IDX_STREAM_STATE_LOCAL_WINDOW_SIZE],\r\n  };\r\n}\r\n\r\nfunction isIllegalConnectionSpecificHeader(name, value) {\r\n  switch (name) {\r\n    case HTTP2_HEADER_CONNECTION:\r\n    case HTTP2_HEADER_UPGRADE:\r\n    case HTTP2_HEADER_HTTP2_SETTINGS:\r\n    case HTTP2_HEADER_KEEP_ALIVE:\r\n    case HTTP2_HEADER_PROXY_CONNECTION:\r\n    case HTTP2_HEADER_TRANSFER_ENCODING:\r\n      return true;\r\n    case HTTP2_HEADER_TE:\r\n      return value !== 'trailers';\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nconst assertValidPseudoHeader = hideStackFrames((key) => {\r\n  if (!kValidPseudoHeaders.has(key)) {\r\n    throw new ERR_HTTP2_INVALID_PSEUDOHEADER(key);\r\n  }\r\n});\r\n\r\nconst assertValidPseudoHeaderResponse = hideStackFrames((key) => {\r\n  if (key !== ':status') {\r\n    throw new ERR_HTTP2_INVALID_PSEUDOHEADER(key);\r\n  }\r\n});\r\n\r\nconst assertValidPseudoHeaderTrailer = hideStackFrames((key) => {\r\n  throw new ERR_HTTP2_INVALID_PSEUDOHEADER(key);\r\n});\r\n\r\nconst emptyArray = [];\r\nconst kNeverIndexFlag = StringFromCharCode(NGHTTP2_NV_FLAG_NO_INDEX);\r\nconst kNoHeaderFlags = StringFromCharCode(NGHTTP2_NV_FLAG_NONE);\r\nfunction mapToHeaders(map,\r\n                      assertValuePseudoHeader = assertValidPseudoHeader) {\r\n  let headers = '';\r\n  let pseudoHeaders = '';\r\n  let count = 0;\r\n  const keys = ObjectKeys(map);\r\n  const singles = new SafeSet();\r\n  let i, j;\r\n  let isArray;\r\n  let key;\r\n  let value;\r\n  let isSingleValueHeader;\r\n  let err;\r\n  const neverIndex =\r\n    ArrayPrototypeMap(map[kSensitiveHeaders] || emptyArray,\r\n                      StringPrototypeToLowerCase);\r\n  for (i = 0; i < keys.length; ++i) {\r\n    key = keys[i];\r\n    value = map[key];\r\n    if (value === undefined || key === '')\r\n      continue;\r\n    key = StringPrototypeToLowerCase(key);\r\n    isSingleValueHeader = kSingleValueHeaders.has(key);\r\n    isArray = ArrayIsArray(value);\r\n    if (isArray) {\r\n      switch (value.length) {\r\n        case 0:\r\n          continue;\r\n        case 1:\r\n          value = String(value[0]);\r\n          isArray = false;\r\n          break;\r\n        default:\r\n          if (isSingleValueHeader)\r\n            throw new ERR_HTTP2_HEADER_SINGLE_VALUE(key);\r\n      }\r\n    } else {\r\n      value = String(value);\r\n    }\r\n    if (isSingleValueHeader) {\r\n      if (singles.has(key))\r\n        throw new ERR_HTTP2_HEADER_SINGLE_VALUE(key);\r\n      singles.add(key);\r\n    }\r\n    const flags = ArrayPrototypeIncludes(neverIndex, key) ?\r\n      kNeverIndexFlag :\r\n      kNoHeaderFlags;\r\n    if (key[0] === ':') {\r\n      err = assertValuePseudoHeader(key);\r\n      if (err !== undefined)\r\n        throw err;\r\n      pseudoHeaders += `${key}\\0${value}\\0${flags}`;\r\n      count++;\r\n      continue;\r\n    }\r\n    if (StringPrototypeIncludes(key, ' ')) {\r\n      throw new ERR_INVALID_HTTP_TOKEN('Header name', key);\r\n    }\r\n    if (isIllegalConnectionSpecificHeader(key, value)) {\r\n      throw new ERR_HTTP2_INVALID_CONNECTION_HEADERS(key);\r\n    }\r\n    if (isArray) {\r\n      for (j = 0; j < value.length; ++j) {\r\n        const val = String(value[j]);\r\n        headers += `${key}\\0${val}\\0${flags}`;\r\n      }\r\n      count += value.length;\r\n      continue;\r\n    }\r\n    headers += `${key}\\0${value}\\0${flags}`;\r\n    count++;\r\n  }\r\n\r\n  return [pseudoHeaders + headers, count];\r\n}\r\n\r\nclass NghttpError extends Error {\r\n  constructor(integerCode, customErrorCode) {\r\n    super(customErrorCode ?\r\n      getMessage(customErrorCode, [], null) :\r\n      binding.nghttp2ErrorString(integerCode));\r\n    this.code = customErrorCode || 'ERR_HTTP2_ERROR';\r\n    this.errno = integerCode;\r\n  }\r\n\r\n  get [kIsNodeError]() {\r\n    return true;\r\n  }\r\n\r\n  toString() {\r\n    return `${this.name} [${this.code}]: ${this.message}`;\r\n  }\r\n}\r\n\r\nconst assertIsObject = hideStackFrames((value, name, types) => {\r\n  if (value !== undefined &&\r\n      (value === null ||\r\n       typeof value !== 'object' ||\r\n       ArrayIsArray(value))) {\r\n    throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(name, types || 'Object', value);\r\n  }\r\n});\r\n\r\nconst assertIsArray = hideStackFrames((value, name, types) => {\r\n  if (value !== undefined &&\r\n      (value === null ||\r\n       !ArrayIsArray(value))) {\r\n    throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(name, types || 'Array', value);\r\n  }\r\n});\r\n\r\nconst assertWithinRange = hideStackFrames(\r\n  (name, value, min = 0, max = Infinity) => {\r\n    if (value !== undefined &&\r\n      (typeof value !== 'number' || value < min || value > max)) {\r\n      throw new ERR_HTTP2_INVALID_SETTING_VALUE.RangeError.HideStackFramesError(\r\n        name, value, min, max);\r\n    }\r\n  },\r\n);\r\n\r\nfunction toHeaderObject(headers, sensitiveHeaders) {\r\n  const obj = { __proto__: null };\r\n  for (let n = 0; n < headers.length; n += 2) {\r\n    const name = headers[n];\r\n    let value = headers[n + 1];\r\n    if (name === HTTP2_HEADER_STATUS)\r\n      value |= 0;\r\n    const existing = obj[name];\r\n    if (existing === undefined) {\r\n      obj[name] = name === HTTP2_HEADER_SET_COOKIE ? [value] : value;\r\n    } else if (!kSingleValueHeaders.has(name)) {\r\n      switch (name) {\r\n        case HTTP2_HEADER_COOKIE:\r\n          // https://tools.ietf.org/html/rfc7540#section-8.1.2.5\r\n          // \"...If there are multiple Cookie header fields after decompression,\r\n          //  these MUST be concatenated into a single octet string using the\r\n          //  two-octet delimiter of 0x3B, 0x20 (the ASCII string \"; \") before\r\n          //  being passed into a non-HTTP/2 context.\"\r\n          obj[name] = `${existing}; ${value}`;\r\n          break;\r\n        case HTTP2_HEADER_SET_COOKIE:\r\n          // https://tools.ietf.org/html/rfc7230#section-3.2.2\r\n          // \"Note: In practice, the \"Set-Cookie\" header field ([RFC6265]) often\r\n          // appears multiple times in a response message and does not use the\r\n          // list syntax, violating the above requirements on multiple header\r\n          // fields with the same name.  Since it cannot be combined into a\r\n          // single field-value, recipients ought to handle \"Set-Cookie\" as a\r\n          // special case while processing header fields.\"\r\n          ArrayPrototypePush(existing, value);\r\n          break;\r\n        default:\r\n          // https://tools.ietf.org/html/rfc7230#section-3.2.2\r\n          // \"A recipient MAY combine multiple header fields with the same field\r\n          // name into one \"field-name: field-value\" pair, without changing the\r\n          // semantics of the message, by appending each subsequent field value\r\n          // to the combined field value in order, separated by a comma.\"\r\n          obj[name] = `${existing}, ${value}`;\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  obj[kSensitiveHeaders] = sensitiveHeaders;\r\n  return obj;\r\n}\r\n\r\nfunction isPayloadMeaningless(method) {\r\n  return kNoPayloadMethods.has(method);\r\n}\r\n\r\nfunction sessionName(type) {\r\n  switch (type) {\r\n    case NGHTTP2_SESSION_CLIENT:\r\n      return 'client';\r\n    case NGHTTP2_SESSION_SERVER:\r\n      return 'server';\r\n    default:\r\n      return '<invalid>';\r\n  }\r\n}\r\n\r\nfunction getAuthority(headers) {\r\n  // For non-CONNECT requests, HTTP/2 allows either :authority\r\n  // or Host to be used equivalently. The first is preferred\r\n  // when making HTTP/2 requests, and the latter is preferred\r\n  // when converting from an HTTP/1 message.\r\n  if (headers[HTTP2_HEADER_AUTHORITY] !== undefined)\r\n    return headers[HTTP2_HEADER_AUTHORITY];\r\n  if (headers[HTTP2_HEADER_HOST] !== undefined)\r\n    return headers[HTTP2_HEADER_HOST];\r\n}\r\n\r\nmodule.exports = {\r\n  assertIsObject,\r\n  assertIsArray,\r\n  assertValidPseudoHeader,\r\n  assertValidPseudoHeaderResponse,\r\n  assertValidPseudoHeaderTrailer,\r\n  assertWithinRange,\r\n  getAuthority,\r\n  getDefaultSettings,\r\n  getSessionState,\r\n  getSettings,\r\n  getStreamState,\r\n  isPayloadMeaningless,\r\n  kSensitiveHeaders,\r\n  kSocket,\r\n  kProxySocket,\r\n  kRequest,\r\n  mapToHeaders,\r\n  MAX_ADDITIONAL_SETTINGS,\r\n  NghttpError,\r\n  remoteCustomSettingsToBuffer,\r\n  sessionName,\r\n  toHeaderObject,\r\n  updateOptionsBuffer,\r\n  updateSettingsBuffer,\r\n};\r\n"
  },
  "175": {
    "metadata": {
      "scriptId": "175",
      "url": "node:https",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 427,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "0c73e0febfc5072ed9266f47d6ab43ffb7043cacd36ffc3e71f79e18dcc8cdf3",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 11344,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:https"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeShift,\r\n  ArrayPrototypeSplice,\r\n  ArrayPrototypeUnshift,\r\n  FunctionPrototypeCall,\r\n  JSONStringify,\r\n  ObjectAssign,\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n  ReflectConstruct,\r\n  SymbolAsyncDispose,\r\n} = primordials;\r\n\r\nconst {\r\n  assertCrypto,\r\n  kEmptyObject,\r\n  promisify,\r\n} = require('internal/util');\r\nassertCrypto();\r\n\r\nconst tls = require('tls');\r\nconst { Agent: HttpAgent } = require('_http_agent');\r\nconst {\r\n  httpServerPreClose,\r\n  Server: HttpServer,\r\n  setupConnectionsTracking,\r\n  storeHTTPOptions,\r\n  _connectionListener,\r\n} = require('_http_server');\r\nconst { ClientRequest } = require('_http_client');\r\nlet debug = require('internal/util/debuglog').debuglog('https', (fn) => {\r\n  debug = fn;\r\n});\r\nconst { URL, urlToHttpOptions, isURL } = require('internal/url');\r\nconst { validateObject } = require('internal/validators');\r\n\r\nfunction Server(opts, requestListener) {\r\n  if (!(this instanceof Server)) return new Server(opts, requestListener);\r\n\r\n  if (typeof opts === 'function') {\r\n    requestListener = opts;\r\n    opts = kEmptyObject;\r\n  } else if (opts == null) {\r\n    opts = kEmptyObject;\r\n  } else {\r\n    validateObject(opts, 'options');\r\n  }\r\n\r\n  FunctionPrototypeCall(storeHTTPOptions, this, opts);\r\n  FunctionPrototypeCall(tls.Server, this,\r\n                        {\r\n                          noDelay: true,\r\n                          // http/1.0 is not defined as Protocol IDs in IANA\r\n                          // https://www.iana.org/assignments/tls-extensiontype-values\r\n                          //       /tls-extensiontype-values.xhtml#alpn-protocol-ids\r\n                          ALPNProtocols: ['http/1.1'],\r\n                          ...opts,\r\n                        },\r\n                        _connectionListener);\r\n\r\n  this.httpAllowHalfOpen = false;\r\n\r\n  if (requestListener) {\r\n    this.addListener('request', requestListener);\r\n  }\r\n\r\n  this.addListener('tlsClientError', function addListener(err, conn) {\r\n    if (!this.emit('clientError', err, conn))\r\n      conn.destroy(err);\r\n  });\r\n\r\n  this.timeout = 0;\r\n  this.maxHeadersCount = null;\r\n  this.on('listening', setupConnectionsTracking);\r\n}\r\n\r\nObjectSetPrototypeOf(Server.prototype, tls.Server.prototype);\r\nObjectSetPrototypeOf(Server, tls.Server);\r\n\r\nServer.prototype.closeAllConnections = HttpServer.prototype.closeAllConnections;\r\n\r\nServer.prototype.closeIdleConnections = HttpServer.prototype.closeIdleConnections;\r\n\r\nServer.prototype.setTimeout = HttpServer.prototype.setTimeout;\r\n\r\nServer.prototype.close = function() {\r\n  httpServerPreClose(this);\r\n  ReflectApply(tls.Server.prototype.close, this, arguments);\r\n  return this;\r\n};\r\n\r\nServer.prototype[SymbolAsyncDispose] = async function() {\r\n  return FunctionPrototypeCall(promisify(this.close), this);\r\n};\r\n\r\n/**\r\n * Creates a new `https.Server` instance.\r\n * @param {{\r\n *   IncomingMessage?: IncomingMessage;\r\n *   ServerResponse?: ServerResponse;\r\n *   insecureHTTPParser?: boolean;\r\n *   maxHeaderSize?: number;\r\n *   }} [opts]\r\n * @param {Function} [requestListener]\r\n * @returns {Server}\r\n */\r\nfunction createServer(opts, requestListener) {\r\n  return new Server(opts, requestListener);\r\n}\r\n\r\n\r\n// HTTPS agents.\r\n\r\nfunction createConnection(port, host, options) {\r\n  if (port !== null && typeof port === 'object') {\r\n    options = port;\r\n  } else if (host !== null && typeof host === 'object') {\r\n    options = { ...host };\r\n  } else if (options === null || typeof options !== 'object') {\r\n    options = {};\r\n  } else {\r\n    options = { ...options };\r\n  }\r\n\r\n  if (typeof port === 'number') {\r\n    options.port = port;\r\n  }\r\n\r\n  if (typeof host === 'string') {\r\n    options.host = host;\r\n  }\r\n\r\n  debug('createConnection', options);\r\n\r\n  if (options._agentKey) {\r\n    const session = this._getSession(options._agentKey);\r\n    if (session) {\r\n      debug('reuse session for %j', options._agentKey);\r\n      options = {\r\n        session,\r\n        ...options,\r\n      };\r\n    }\r\n  }\r\n\r\n  const socket = tls.connect(options);\r\n\r\n  if (options._agentKey) {\r\n    // Cache new session for reuse\r\n    socket.on('session', (session) => {\r\n      this._cacheSession(options._agentKey, session);\r\n    });\r\n\r\n    // Evict session on error\r\n    socket.once('close', (err) => {\r\n      if (err)\r\n        this._evictSession(options._agentKey);\r\n    });\r\n  }\r\n\r\n  return socket;\r\n}\r\n\r\n/**\r\n * Creates a new `HttpAgent` instance.\r\n * @param {{\r\n *   keepAlive?: boolean;\r\n *   keepAliveMsecs?: number;\r\n *   maxSockets?: number;\r\n *   maxTotalSockets?: number;\r\n *   maxFreeSockets?: number;\r\n *   scheduling?: string;\r\n *   timeout?: number;\r\n *   maxCachedSessions?: number;\r\n *   servername?: string;\r\n *   }} [options]\r\n * @constructor\r\n */\r\nfunction Agent(options) {\r\n  if (!(this instanceof Agent))\r\n    return new Agent(options);\r\n\r\n  FunctionPrototypeCall(HttpAgent, this, options);\r\n  this.defaultPort = 443;\r\n  this.protocol = 'https:';\r\n  this.maxCachedSessions = this.options.maxCachedSessions;\r\n  if (this.maxCachedSessions === undefined)\r\n    this.maxCachedSessions = 100;\r\n\r\n  this._sessionCache = {\r\n    map: {},\r\n    list: [],\r\n  };\r\n}\r\nObjectSetPrototypeOf(Agent.prototype, HttpAgent.prototype);\r\nObjectSetPrototypeOf(Agent, HttpAgent);\r\nAgent.prototype.createConnection = createConnection;\r\n\r\n/**\r\n * Gets a unique name for a set of options.\r\n * @param {{\r\n *   host: string;\r\n *   port: number;\r\n *   localAddress: string;\r\n *   family: number;\r\n *   }} [options]\r\n * @returns {string}\r\n */\r\nAgent.prototype.getName = function getName(options = kEmptyObject) {\r\n  let name = FunctionPrototypeCall(HttpAgent.prototype.getName, this, options);\r\n\r\n  name += ':';\r\n  if (options.ca)\r\n    name += options.ca;\r\n\r\n  name += ':';\r\n  if (options.cert)\r\n    name += options.cert;\r\n\r\n  name += ':';\r\n  if (options.clientCertEngine)\r\n    name += options.clientCertEngine;\r\n\r\n  name += ':';\r\n  if (options.ciphers)\r\n    name += options.ciphers;\r\n\r\n  name += ':';\r\n  if (options.key)\r\n    name += options.key;\r\n\r\n  name += ':';\r\n  if (options.pfx)\r\n    name += options.pfx;\r\n\r\n  name += ':';\r\n  if (options.rejectUnauthorized !== undefined)\r\n    name += options.rejectUnauthorized;\r\n\r\n  name += ':';\r\n  if (options.servername && options.servername !== options.host)\r\n    name += options.servername;\r\n\r\n  name += ':';\r\n  if (options.minVersion)\r\n    name += options.minVersion;\r\n\r\n  name += ':';\r\n  if (options.maxVersion)\r\n    name += options.maxVersion;\r\n\r\n  name += ':';\r\n  if (options.secureProtocol)\r\n    name += options.secureProtocol;\r\n\r\n  name += ':';\r\n  if (options.crl)\r\n    name += options.crl;\r\n\r\n  name += ':';\r\n  if (options.honorCipherOrder !== undefined)\r\n    name += options.honorCipherOrder;\r\n\r\n  name += ':';\r\n  if (options.ecdhCurve)\r\n    name += options.ecdhCurve;\r\n\r\n  name += ':';\r\n  if (options.dhparam)\r\n    name += options.dhparam;\r\n\r\n  name += ':';\r\n  if (options.secureOptions !== undefined)\r\n    name += options.secureOptions;\r\n\r\n  name += ':';\r\n  if (options.sessionIdContext)\r\n    name += options.sessionIdContext;\r\n\r\n  name += ':';\r\n  if (options.sigalgs)\r\n    name += JSONStringify(options.sigalgs);\r\n\r\n  name += ':';\r\n  if (options.privateKeyIdentifier)\r\n    name += options.privateKeyIdentifier;\r\n\r\n  name += ':';\r\n  if (options.privateKeyEngine)\r\n    name += options.privateKeyEngine;\r\n\r\n  return name;\r\n};\r\n\r\nAgent.prototype._getSession = function _getSession(key) {\r\n  return this._sessionCache.map[key];\r\n};\r\n\r\nAgent.prototype._cacheSession = function _cacheSession(key, session) {\r\n  // Cache is disabled\r\n  if (this.maxCachedSessions === 0)\r\n    return;\r\n\r\n  // Fast case - update existing entry\r\n  if (this._sessionCache.map[key]) {\r\n    this._sessionCache.map[key] = session;\r\n    return;\r\n  }\r\n\r\n  // Put new entry\r\n  if (this._sessionCache.list.length >= this.maxCachedSessions) {\r\n    const oldKey = ArrayPrototypeShift(this._sessionCache.list);\r\n    debug('evicting %j', oldKey);\r\n    delete this._sessionCache.map[oldKey];\r\n  }\r\n\r\n  ArrayPrototypePush(this._sessionCache.list, key);\r\n  this._sessionCache.map[key] = session;\r\n};\r\n\r\nAgent.prototype._evictSession = function _evictSession(key) {\r\n  const index = ArrayPrototypeIndexOf(this._sessionCache.list, key);\r\n  if (index === -1)\r\n    return;\r\n\r\n  ArrayPrototypeSplice(this._sessionCache.list, index, 1);\r\n  delete this._sessionCache.map[key];\r\n};\r\n\r\nconst globalAgent = new Agent({ keepAlive: true, scheduling: 'lifo', timeout: 5000 });\r\n\r\n/**\r\n * Makes a request to a secure web server.\r\n * @param {...any} args\r\n * @returns {ClientRequest}\r\n */\r\nfunction request(...args) {\r\n  let options = {};\r\n\r\n  if (typeof args[0] === 'string') {\r\n    const urlStr = ArrayPrototypeShift(args);\r\n    options = urlToHttpOptions(new URL(urlStr));\r\n  } else if (isURL(args[0])) {\r\n    options = urlToHttpOptions(ArrayPrototypeShift(args));\r\n  }\r\n\r\n  if (args[0] && typeof args[0] !== 'function') {\r\n    ObjectAssign(options, ArrayPrototypeShift(args));\r\n  }\r\n\r\n  options._defaultAgent = module.exports.globalAgent;\r\n  ArrayPrototypeUnshift(args, options);\r\n\r\n  return ReflectConstruct(ClientRequest, args);\r\n}\r\n\r\n/**\r\n * Makes a GET request to a secure web server.\r\n * @param {string | URL} input\r\n * @param {{\r\n *   agent?: Agent | boolean;\r\n *   auth?: string;\r\n *   createConnection?: Function;\r\n *   defaultPort?: number;\r\n *   family?: number;\r\n *   headers?: object;\r\n *   hints?: number;\r\n *   host?: string;\r\n *   hostname?: string;\r\n *   insecureHTTPParser?: boolean;\r\n *   joinDuplicateHeaders?: boolean;\r\n *   localAddress?: string;\r\n *   localPort?: number;\r\n *   lookup?: Function;\r\n *   maxHeaderSize?: number;\r\n *   method?: string;\r\n *   path?: string;\r\n *   port?: number;\r\n *   protocol?: string;\r\n *   setHost?: boolean;\r\n *   socketPath?: string;\r\n *   timeout?: number;\r\n *   signal?: AbortSignal;\r\n *   uniqueHeaders?: Array;\r\n *   } | string | URL} [options]\r\n * @param {Function} [cb]\r\n * @returns {ClientRequest}\r\n */\r\nfunction get(input, options, cb) {\r\n  const req = request(input, options, cb);\r\n  req.end();\r\n  return req;\r\n}\r\n\r\nmodule.exports = {\r\n  Agent,\r\n  globalAgent,\r\n  Server,\r\n  createServer,\r\n  get,\r\n  request,\r\n};\r\n"
  },
  "176": {
    "metadata": {
      "scriptId": "176",
      "url": "node:inspector",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 198,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "b64e21c7b5da662ba468fb48d0b747c663d87015ab0db9da69640285536f706e",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 5156,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:inspector"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  JSONParse,\r\n  JSONStringify,\r\n  SafeMap,\r\n  SymbolDispose,\r\n} = primordials;\r\n\r\nconst {\r\n  ERR_INSPECTOR_ALREADY_ACTIVATED,\r\n  ERR_INSPECTOR_ALREADY_CONNECTED,\r\n  ERR_INSPECTOR_CLOSED,\r\n  ERR_INSPECTOR_COMMAND,\r\n  ERR_INSPECTOR_NOT_AVAILABLE,\r\n  ERR_INSPECTOR_NOT_CONNECTED,\r\n  ERR_INSPECTOR_NOT_ACTIVE,\r\n  ERR_INSPECTOR_NOT_WORKER,\r\n} = require('internal/errors').codes;\r\n\r\nconst { hasInspector } = internalBinding('config');\r\nif (!hasInspector)\r\n  throw new ERR_INSPECTOR_NOT_AVAILABLE();\r\n\r\nconst EventEmitter = require('events');\r\nconst { queueMicrotask } = require('internal/process/task_queues');\r\nconst {\r\n  isUint32,\r\n  validateFunction,\r\n  validateInt32,\r\n  validateObject,\r\n  validateString,\r\n} = require('internal/validators');\r\nconst { isMainThread } = require('worker_threads');\r\nconst { _debugEnd } = internalBinding('process_methods');\r\n\r\nconst {\r\n  Connection,\r\n  MainThreadConnection,\r\n  open,\r\n  url,\r\n  isEnabled,\r\n  waitForDebugger,\r\n  console,\r\n} = internalBinding('inspector');\r\n\r\nclass Session extends EventEmitter {\r\n  #connection = null;\r\n  #nextId = 1;\r\n  #messageCallbacks = new SafeMap();\r\n\r\n  /**\r\n   * Connects the session to the inspector back-end.\r\n   * @returns {void}\r\n   */\r\n  connect() {\r\n    if (this.#connection)\r\n      throw new ERR_INSPECTOR_ALREADY_CONNECTED('The inspector session');\r\n    this.#connection = new Connection((message) => this.#onMessage(message));\r\n  }\r\n\r\n  /**\r\n   * Connects the session to the main thread\r\n   * inspector back-end.\r\n   * @returns {void}\r\n   */\r\n  connectToMainThread() {\r\n    if (isMainThread)\r\n      throw new ERR_INSPECTOR_NOT_WORKER();\r\n    if (this.#connection)\r\n      throw new ERR_INSPECTOR_ALREADY_CONNECTED('The inspector session');\r\n    this.#connection =\r\n      new MainThreadConnection(\r\n        (message) => queueMicrotask(() => this.#onMessage(message)));\r\n  }\r\n\r\n  #onMessage(message) {\r\n    const parsed = JSONParse(message);\r\n    try {\r\n      if (parsed.id) {\r\n        const callback = this.#messageCallbacks.get(parsed.id);\r\n        this.#messageCallbacks.delete(parsed.id);\r\n        if (callback) {\r\n          if (parsed.error) {\r\n            return callback(\r\n              new ERR_INSPECTOR_COMMAND(parsed.error.code, parsed.error.message),\r\n            );\r\n          }\r\n\r\n          callback(null, parsed.result);\r\n        }\r\n      } else {\r\n        this.emit(parsed.method, parsed);\r\n        this.emit('inspectorNotification', parsed);\r\n      }\r\n    } catch (error) {\r\n      process.emitWarning(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Posts a message to the inspector back-end.\r\n   * @param {string} method\r\n   * @param {Record<unknown, unknown>} [params]\r\n   * @param {Function} [callback]\r\n   * @returns {void}\r\n   */\r\n  post(method, params, callback) {\r\n    validateString(method, 'method');\r\n    if (!callback && typeof params === 'function') {\r\n      callback = params;\r\n      params = null;\r\n    }\r\n    if (params) {\r\n      validateObject(params, 'params');\r\n    }\r\n    if (callback) {\r\n      validateFunction(callback, 'callback');\r\n    }\r\n\r\n    if (!this.#connection) {\r\n      throw new ERR_INSPECTOR_NOT_CONNECTED();\r\n    }\r\n    const id = this.#nextId++;\r\n    const message = { id, method };\r\n    if (params) {\r\n      message.params = params;\r\n    }\r\n    if (callback) {\r\n      this.#messageCallbacks.set(id, callback);\r\n    }\r\n    this.#connection.dispatch(JSONStringify(message));\r\n  }\r\n\r\n  /**\r\n   * Immediately closes the session, all pending\r\n   * message callbacks will be called with an\r\n   * error.\r\n   * @returns {void}\r\n   */\r\n  disconnect() {\r\n    if (!this.#connection)\r\n      return;\r\n    this.#connection.disconnect();\r\n    this.#connection = null;\r\n    const remainingCallbacks = this.#messageCallbacks.values();\r\n    for (const callback of remainingCallbacks) {\r\n      process.nextTick(callback, new ERR_INSPECTOR_CLOSED());\r\n    }\r\n    this.#messageCallbacks.clear();\r\n    this.#nextId = 1;\r\n  }\r\n}\r\n\r\n/**\r\n * Activates inspector on host and port.\r\n * @param {number} [port]\r\n * @param {string} [host]\r\n * @param {boolean} [wait]\r\n * @returns {void}\r\n */\r\nfunction inspectorOpen(port, host, wait) {\r\n  if (isEnabled()) {\r\n    throw new ERR_INSPECTOR_ALREADY_ACTIVATED();\r\n  }\r\n  // inspectorOpen() currently does not typecheck its arguments and adding\r\n  // such checks would be a potentially breaking change. However, the native\r\n  // open() function requires the port to fit into a 16-bit unsigned integer,\r\n  // causing an integer overflow otherwise, so we at least need to prevent that.\r\n  if (isUint32(port)) {\r\n    validateInt32(port, 'port', 0, 65535);\r\n  }\r\n  open(port, host);\r\n  if (wait)\r\n    waitForDebugger();\r\n\r\n  return { __proto__: null, [SymbolDispose]() { _debugEnd(); } };\r\n}\r\n\r\n/**\r\n * Blocks until a client (existing or connected later)\r\n * has sent the `Runtime.runIfWaitingForDebugger`\r\n * command.\r\n * @returns {void}\r\n */\r\nfunction inspectorWaitForDebugger() {\r\n  if (!waitForDebugger())\r\n    throw new ERR_INSPECTOR_NOT_ACTIVE();\r\n}\r\n\r\nmodule.exports = {\r\n  open: inspectorOpen,\r\n  close: _debugEnd,\r\n  url,\r\n  waitForDebugger: inspectorWaitForDebugger,\r\n  console,\r\n  Session,\r\n};\r\n"
  },
  "177": {
    "metadata": {
      "scriptId": "177",
      "url": "node:worker_threads",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 43,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "f4c71864fe4c25e4e46526a8654eb60f4c453395371dc9bade93e98c49966f8e",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 786,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:worker_threads"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  isMainThread,\r\n  SHARE_ENV,\r\n  resourceLimits,\r\n  setEnvironmentData,\r\n  getEnvironmentData,\r\n  threadId,\r\n  Worker,\r\n} = require('internal/worker');\r\n\r\nconst {\r\n  MessagePort,\r\n  MessageChannel,\r\n  moveMessagePortToContext,\r\n  receiveMessageOnPort,\r\n  BroadcastChannel,\r\n} = require('internal/worker/io');\r\n\r\nconst {\r\n  markAsUntransferable,\r\n  isMarkedAsUntransferable,\r\n} = require('internal/buffer');\r\n\r\nmodule.exports = {\r\n  isMainThread,\r\n  MessagePort,\r\n  MessageChannel,\r\n  markAsUntransferable,\r\n  isMarkedAsUntransferable,\r\n  moveMessagePortToContext,\r\n  receiveMessageOnPort,\r\n  resourceLimits,\r\n  threadId,\r\n  SHARE_ENV,\r\n  Worker,\r\n  parentPort: null,\r\n  workerData: null,\r\n  BroadcastChannel,\r\n  setEnvironmentData,\r\n  getEnvironmentData,\r\n};\r\n"
  },
  "178": {
    "metadata": {
      "scriptId": "178",
      "url": "node:internal/worker",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 543,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "ca6cbb7cf8fda46254fdf4c73041c9f619adcf5925f5a611265ad9862b62c839",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 16567,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/worker"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  AtomicsAdd,\r\n  Float64Array,\r\n  FunctionPrototypeBind,\r\n  JSONStringify,\r\n  MathMax,\r\n  ObjectEntries,\r\n  Promise,\r\n  PromiseResolve,\r\n  ReflectApply,\r\n  RegExpPrototypeExec,\r\n  SafeArrayIterator,\r\n  SafeMap,\r\n  String,\r\n  StringPrototypeTrim,\r\n  Symbol,\r\n  SymbolFor,\r\n  TypedArrayPrototypeFill,\r\n  Uint32Array,\r\n  globalThis: { SharedArrayBuffer },\r\n} = primordials;\r\n\r\nconst EventEmitter = require('events');\r\nconst assert = require('internal/assert');\r\nconst path = require('path');\r\nconst {\r\n  internalEventLoopUtilization,\r\n} = require('internal/perf/event_loop_utilization');\r\n\r\nconst errorCodes = require('internal/errors').codes;\r\nconst {\r\n  ERR_WORKER_NOT_RUNNING,\r\n  ERR_WORKER_PATH,\r\n  ERR_WORKER_UNSERIALIZABLE_ERROR,\r\n  ERR_WORKER_INVALID_EXEC_ARGV,\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_INVALID_ARG_VALUE,\r\n} = errorCodes;\r\n\r\nconst workerIo = require('internal/worker/io');\r\nconst {\r\n  drainMessagePort,\r\n  receiveMessageOnPort,\r\n  MessageChannel,\r\n  messageTypes,\r\n  kPort,\r\n  kIncrementsPortRef,\r\n  kWaitingStreams,\r\n  kStdioWantsMoreDataCallback,\r\n  setupPortReferencing,\r\n  ReadableWorkerStdio,\r\n  WritableWorkerStdio,\r\n} = workerIo;\r\nconst { deserializeError } = require('internal/error_serdes');\r\nconst { fileURLToPath, isURL, pathToFileURL } = require('internal/url');\r\nconst { kEmptyObject } = require('internal/util');\r\nconst { validateArray, validateString } = require('internal/validators');\r\nconst {\r\n  throwIfBuildingSnapshot,\r\n} = require('internal/v8/startup_snapshot');\r\nconst {\r\n  ownsProcessState,\r\n  isMainThread,\r\n  resourceLimits: resourceLimitsRaw,\r\n  threadId,\r\n  Worker: WorkerImpl,\r\n  kMaxYoungGenerationSizeMb,\r\n  kMaxOldGenerationSizeMb,\r\n  kCodeRangeSizeMb,\r\n  kStackSizeMb,\r\n  kTotalResourceLimitCount,\r\n} = internalBinding('worker');\r\n\r\nconst kHandle = Symbol('kHandle');\r\nconst kPublicPort = Symbol('kPublicPort');\r\nconst kDispose = Symbol('kDispose');\r\nconst kOnExit = Symbol('kOnExit');\r\nconst kOnMessage = Symbol('kOnMessage');\r\nconst kOnCouldNotSerializeErr = Symbol('kOnCouldNotSerializeErr');\r\nconst kOnErrorMessage = Symbol('kOnErrorMessage');\r\nconst kParentSideStdio = Symbol('kParentSideStdio');\r\nconst kLoopStartTime = Symbol('kLoopStartTime');\r\nconst kIsInternal = Symbol('kIsInternal');\r\nconst kIsOnline = Symbol('kIsOnline');\r\n\r\nconst SHARE_ENV = SymbolFor('nodejs.worker_threads.SHARE_ENV');\r\nlet debug = require('internal/util/debuglog').debuglog('worker', (fn) => {\r\n  debug = fn;\r\n});\r\n\r\nconst dc = require('diagnostics_channel');\r\nconst workerThreadsChannel = dc.channel('worker_threads');\r\n\r\nlet cwdCounter;\r\n\r\nconst environmentData = new SafeMap();\r\n\r\n// SharedArrayBuffers can be disabled with --enable-sharedarraybuffer-per-context.\r\nif (isMainThread && SharedArrayBuffer !== undefined) {\r\n  cwdCounter = new Uint32Array(new SharedArrayBuffer(4));\r\n  const originalChdir = process.chdir;\r\n  process.chdir = function(path) {\r\n    AtomicsAdd(cwdCounter, 0, 1);\r\n    originalChdir(path);\r\n  };\r\n}\r\n\r\nfunction setEnvironmentData(key, value) {\r\n  if (value === undefined)\r\n    environmentData.delete(key);\r\n  else\r\n    environmentData.set(key, value);\r\n}\r\n\r\nfunction getEnvironmentData(key) {\r\n  return environmentData.get(key);\r\n}\r\n\r\nfunction assignEnvironmentData(data) {\r\n  if (data === undefined) return;\r\n  data.forEach((value, key) => {\r\n    environmentData.set(key, value);\r\n  });\r\n}\r\n\r\nclass Worker extends EventEmitter {\r\n  constructor(filename, options = kEmptyObject) {\r\n    throwIfBuildingSnapshot('Creating workers');\r\n    super();\r\n    const isInternal = arguments[2] === kIsInternal;\r\n    debug(\r\n      `[${threadId}] create new worker`,\r\n      filename,\r\n      options,\r\n      `isInternal: ${isInternal}`,\r\n    );\r\n    if (options.execArgv)\r\n      validateArray(options.execArgv, 'options.execArgv');\r\n\r\n    let argv;\r\n    if (options.argv) {\r\n      validateArray(options.argv, 'options.argv');\r\n      argv = ArrayPrototypeMap(options.argv, String);\r\n    }\r\n\r\n    let url, doEval;\r\n    if (isInternal) {\r\n      doEval = 'internal';\r\n      url = `node:${filename}`;\r\n    } else if (options.eval) {\r\n      if (typeof filename !== 'string') {\r\n        throw new ERR_INVALID_ARG_VALUE(\r\n          'options.eval',\r\n          options.eval,\r\n          'must be false when \\'filename\\' is not a string',\r\n        );\r\n      }\r\n      url = null;\r\n      doEval = 'classic';\r\n    } else if (isURL(filename) && filename.protocol === 'data:') {\r\n      url = null;\r\n      doEval = 'module';\r\n      filename = `import ${JSONStringify(`${filename}`)}`;\r\n    } else {\r\n      doEval = false;\r\n      if (isURL(filename)) {\r\n        url = filename;\r\n        filename = fileURLToPath(filename);\r\n      } else if (typeof filename !== 'string') {\r\n        throw new ERR_INVALID_ARG_TYPE(\r\n          'filename',\r\n          ['string', 'URL'],\r\n          filename,\r\n        );\r\n      } else if (path.isAbsolute(filename) ||\r\n                 RegExpPrototypeExec(/^\\.\\.?[\\\\/]/, filename) !== null) {\r\n        filename = path.resolve(filename);\r\n        url = pathToFileURL(filename);\r\n      } else {\r\n        throw new ERR_WORKER_PATH(filename);\r\n      }\r\n    }\r\n\r\n    let env;\r\n    if (typeof options.env === 'object' && options.env !== null) {\r\n      env = { __proto__: null };\r\n      ArrayPrototypeForEach(\r\n        ObjectEntries(options.env),\r\n        ({ 0: key, 1: value }) => { env[key] = `${value}`; },\r\n      );\r\n    } else if (options.env == null) {\r\n      env = process.env;\r\n    } else if (options.env !== SHARE_ENV) {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'options.env',\r\n        ['object', 'undefined', 'null', 'worker_threads.SHARE_ENV'],\r\n        options.env);\r\n    }\r\n\r\n    let name = '';\r\n    if (options.name) {\r\n      validateString(options.name, 'options.name');\r\n      name = StringPrototypeTrim(options.name);\r\n    }\r\n\r\n    debug('instantiating Worker.', `url: ${url}`, `doEval: ${doEval}`);\r\n    // Set up the C++ handle for the worker, as well as some internal wiring.\r\n    this[kHandle] = new WorkerImpl(url,\r\n                                   env === process.env ? null : env,\r\n                                   options.execArgv,\r\n                                   parseResourceLimits(options.resourceLimits),\r\n                                   !!(options.trackUnmanagedFds ?? true),\r\n                                   isInternal,\r\n                                   name);\r\n    if (this[kHandle].invalidExecArgv) {\r\n      throw new ERR_WORKER_INVALID_EXEC_ARGV(this[kHandle].invalidExecArgv);\r\n    }\r\n    if (this[kHandle].invalidNodeOptions) {\r\n      throw new ERR_WORKER_INVALID_EXEC_ARGV(\r\n        this[kHandle].invalidNodeOptions, 'invalid NODE_OPTIONS env variable');\r\n    }\r\n    this[kHandle].onexit = (code, customErr, customErrReason) => {\r\n      this[kOnExit](code, customErr, customErrReason);\r\n    };\r\n    this[kPort] = this[kHandle].messagePort;\r\n    this[kPort].on('message', (data) => this[kOnMessage](data));\r\n    this[kPort].start();\r\n    this[kPort].unref();\r\n    this[kPort][kWaitingStreams] = 0;\r\n    debug(`[${threadId}] created Worker with ID ${this.threadId}`);\r\n\r\n    let stdin = null;\r\n    if (options.stdin)\r\n      stdin = new WritableWorkerStdio(this[kPort], 'stdin');\r\n    const stdout = new ReadableWorkerStdio(this[kPort], 'stdout');\r\n    if (!options.stdout) {\r\n      stdout[kIncrementsPortRef] = false;\r\n      pipeWithoutWarning(stdout, process.stdout);\r\n    }\r\n    const stderr = new ReadableWorkerStdio(this[kPort], 'stderr');\r\n    if (!options.stderr) {\r\n      stderr[kIncrementsPortRef] = false;\r\n      pipeWithoutWarning(stderr, process.stderr);\r\n    }\r\n\r\n    this[kParentSideStdio] = { stdin, stdout, stderr };\r\n\r\n    const { port1, port2 } = new MessageChannel();\r\n    const transferList = [port2];\r\n    // If transferList is provided.\r\n    if (options.transferList)\r\n      ArrayPrototypePush(transferList,\r\n                         ...new SafeArrayIterator(options.transferList));\r\n\r\n    this[kPublicPort] = port1;\r\n    ArrayPrototypeForEach(['message', 'messageerror'], (event) => {\r\n      this[kPublicPort].on(event, (message) => this.emit(event, message));\r\n    });\r\n    setupPortReferencing(this[kPublicPort], this, 'message');\r\n    this[kPort].postMessage({\r\n      argv,\r\n      type: messageTypes.LOAD_SCRIPT,\r\n      filename,\r\n      doEval,\r\n      isInternal,\r\n      cwdCounter: cwdCounter || workerIo.sharedCwdCounter,\r\n      workerData: options.workerData,\r\n      environmentData,\r\n      publicPort: port2,\r\n      hasStdin: !!options.stdin,\r\n    }, transferList);\r\n    // Use this to cache the Worker's loopStart value once available.\r\n    this[kLoopStartTime] = -1;\r\n    this[kIsOnline] = false;\r\n    this.performance = {\r\n      eventLoopUtilization: FunctionPrototypeBind(eventLoopUtilization, this),\r\n    };\r\n    // Actually start the new thread now that everything is in place.\r\n    this[kHandle].startThread();\r\n\r\n    process.nextTick(() => process.emit('worker', this));\r\n    if (workerThreadsChannel.hasSubscribers) {\r\n      workerThreadsChannel.publish({\r\n        worker: this,\r\n      });\r\n    }\r\n  }\r\n\r\n  [kOnExit](code, customErr, customErrReason) {\r\n    debug(`[${threadId}] hears end event for Worker ${this.threadId}`);\r\n    drainMessagePort(this[kPublicPort]);\r\n    drainMessagePort(this[kPort]);\r\n    this.removeAllListeners('message');\r\n    this.removeAllListeners('messageerrors');\r\n    this[kPublicPort].unref();\r\n    this[kPort].unref();\r\n    this[kDispose]();\r\n    if (customErr) {\r\n      debug(`[${threadId}] failing with custom error ${customErr} \\\r\n        and with reason ${customErrReason}`);\r\n      this.emit('error', new errorCodes[customErr](customErrReason));\r\n    }\r\n    this.emit('exit', code);\r\n    this.removeAllListeners();\r\n  }\r\n\r\n  [kOnCouldNotSerializeErr]() {\r\n    this.emit('error', new ERR_WORKER_UNSERIALIZABLE_ERROR());\r\n  }\r\n\r\n  [kOnErrorMessage](serialized) {\r\n    // This is what is called for uncaught exceptions.\r\n    const error = deserializeError(serialized);\r\n    this.emit('error', error);\r\n  }\r\n\r\n  [kOnMessage](message) {\r\n    switch (message.type) {\r\n      case messageTypes.UP_AND_RUNNING:\r\n        this[kIsOnline] = true;\r\n        return this.emit('online');\r\n      case messageTypes.COULD_NOT_SERIALIZE_ERROR:\r\n        return this[kOnCouldNotSerializeErr]();\r\n      case messageTypes.ERROR_MESSAGE:\r\n        return this[kOnErrorMessage](message.error);\r\n      case messageTypes.STDIO_PAYLOAD:\r\n      {\r\n        const { stream, chunks } = message;\r\n        const readable = this[kParentSideStdio][stream];\r\n        ArrayPrototypeForEach(chunks, ({ chunk, encoding }) => {\r\n          readable.push(chunk, encoding);\r\n        });\r\n        return;\r\n      }\r\n      case messageTypes.STDIO_WANTS_MORE_DATA:\r\n      {\r\n        const { stream } = message;\r\n        return this[kParentSideStdio][stream][kStdioWantsMoreDataCallback]();\r\n      }\r\n    }\r\n\r\n    assert.fail(`Unknown worker message type ${message.type}`);\r\n  }\r\n\r\n  [kDispose]() {\r\n    this[kHandle].onexit = null;\r\n    this[kHandle] = null;\r\n    this[kPort] = null;\r\n    this[kPublicPort] = null;\r\n\r\n    const { stdout, stderr } = this[kParentSideStdio];\r\n\r\n    if (!stdout.readableEnded) {\r\n      debug(`[${threadId}] explicitly closes stdout for ${this.threadId}`);\r\n      stdout.push(null);\r\n    }\r\n    if (!stderr.readableEnded) {\r\n      debug(`[${threadId}] explicitly closes stderr for ${this.threadId}`);\r\n      stderr.push(null);\r\n    }\r\n  }\r\n\r\n  postMessage(...args) {\r\n    if (this[kPublicPort] === null) return;\r\n\r\n    ReflectApply(this[kPublicPort].postMessage, this[kPublicPort], args);\r\n  }\r\n\r\n  terminate(callback) {\r\n    debug(`[${threadId}] terminates Worker with ID ${this.threadId}`);\r\n\r\n    this.ref();\r\n\r\n    if (typeof callback === 'function') {\r\n      process.emitWarning(\r\n        'Passing a callback to worker.terminate() is deprecated. ' +\r\n        'It returns a Promise instead.',\r\n        'DeprecationWarning', 'DEP0132');\r\n      if (this[kHandle] === null) return PromiseResolve();\r\n      this.once('exit', (exitCode) => callback(null, exitCode));\r\n    }\r\n\r\n    if (this[kHandle] === null) return PromiseResolve();\r\n\r\n    this[kHandle].stopThread();\r\n\r\n    // Do not use events.once() here, because the 'exit' event will always be\r\n    // emitted regardless of any errors, and the point is to only resolve\r\n    // once the thread has actually stopped.\r\n    return new Promise((resolve) => {\r\n      this.once('exit', resolve);\r\n    });\r\n  }\r\n\r\n  ref() {\r\n    if (this[kHandle] === null) return;\r\n\r\n    this[kHandle].ref();\r\n    this[kPublicPort].ref();\r\n  }\r\n\r\n  unref() {\r\n    if (this[kHandle] === null) return;\r\n\r\n    this[kHandle].unref();\r\n    this[kPublicPort].unref();\r\n  }\r\n\r\n  get threadId() {\r\n    if (this[kHandle] === null) return -1;\r\n\r\n    return this[kHandle].threadId;\r\n  }\r\n\r\n  get stdin() {\r\n    return this[kParentSideStdio].stdin;\r\n  }\r\n\r\n  get stdout() {\r\n    return this[kParentSideStdio].stdout;\r\n  }\r\n\r\n  get stderr() {\r\n    return this[kParentSideStdio].stderr;\r\n  }\r\n\r\n  get resourceLimits() {\r\n    if (this[kHandle] === null) return {};\r\n\r\n    return makeResourceLimits(this[kHandle].getResourceLimits());\r\n  }\r\n\r\n  getHeapSnapshot(options) {\r\n    const {\r\n      HeapSnapshotStream,\r\n      getHeapSnapshotOptions,\r\n    } = require('internal/heap_utils');\r\n    const optionsArray = getHeapSnapshotOptions(options);\r\n    const heapSnapshotTaker = this[kHandle]?.takeHeapSnapshot(optionsArray);\r\n    return new Promise((resolve, reject) => {\r\n      if (!heapSnapshotTaker) return reject(new ERR_WORKER_NOT_RUNNING());\r\n      heapSnapshotTaker.ondone = (handle) => {\r\n        resolve(new HeapSnapshotStream(handle));\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * A worker which has an internal module for entry point (e.g. internal/module/esm/worker).\r\n * Internal workers bypass the permission model.\r\n */\r\nclass InternalWorker extends Worker {\r\n  constructor(filename, options) {\r\n    super(filename, options, kIsInternal);\r\n  }\r\n\r\n  receiveMessageSync() {\r\n    return receiveMessageOnPort(this[kPublicPort]);\r\n  }\r\n}\r\n\r\nfunction pipeWithoutWarning(source, dest) {\r\n  const sourceMaxListeners = source._maxListeners;\r\n  const destMaxListeners = dest._maxListeners;\r\n  source.setMaxListeners(Infinity);\r\n  dest.setMaxListeners(Infinity);\r\n\r\n  source.pipe(dest);\r\n\r\n  source._maxListeners = sourceMaxListeners;\r\n  dest._maxListeners = destMaxListeners;\r\n}\r\n\r\nconst resourceLimitsArray = new Float64Array(kTotalResourceLimitCount);\r\nfunction parseResourceLimits(obj) {\r\n  const ret = resourceLimitsArray;\r\n  TypedArrayPrototypeFill(ret, -1);\r\n  if (typeof obj !== 'object' || obj === null) return ret;\r\n\r\n  if (typeof obj.maxOldGenerationSizeMb === 'number')\r\n    ret[kMaxOldGenerationSizeMb] = MathMax(obj.maxOldGenerationSizeMb, 2);\r\n  if (typeof obj.maxYoungGenerationSizeMb === 'number')\r\n    ret[kMaxYoungGenerationSizeMb] = obj.maxYoungGenerationSizeMb;\r\n  if (typeof obj.codeRangeSizeMb === 'number')\r\n    ret[kCodeRangeSizeMb] = obj.codeRangeSizeMb;\r\n  if (typeof obj.stackSizeMb === 'number')\r\n    ret[kStackSizeMb] = obj.stackSizeMb;\r\n  return ret;\r\n}\r\n\r\nfunction makeResourceLimits(float64arr) {\r\n  return {\r\n    maxYoungGenerationSizeMb: float64arr[kMaxYoungGenerationSizeMb],\r\n    maxOldGenerationSizeMb: float64arr[kMaxOldGenerationSizeMb],\r\n    codeRangeSizeMb: float64arr[kCodeRangeSizeMb],\r\n    stackSizeMb: float64arr[kStackSizeMb],\r\n  };\r\n}\r\n\r\nfunction eventLoopUtilization(util1, util2) {\r\n  // TODO(trevnorris): Works to solve the thread-safe read/write issue of\r\n  // loopTime, but has the drawback that it can't be set until the event loop\r\n  // has had a chance to turn. So it will be impossible to read the ELU of\r\n  // a worker thread immediately after it's been created.\r\n  if (!this[kIsOnline] || !this[kHandle]) {\r\n    return { idle: 0, active: 0, utilization: 0 };\r\n  }\r\n\r\n  // Cache loopStart, since it's only written to once.\r\n  if (this[kLoopStartTime] === -1) {\r\n    this[kLoopStartTime] = this[kHandle].loopStartTime();\r\n    if (this[kLoopStartTime] === -1)\r\n      return { idle: 0, active: 0, utilization: 0 };\r\n  }\r\n\r\n  return internalEventLoopUtilization(\r\n    this[kLoopStartTime],\r\n    this[kHandle].loopIdleTime(),\r\n    util1,\r\n    util2,\r\n  );\r\n}\r\n\r\nmodule.exports = {\r\n  ownsProcessState,\r\n  kIsOnline,\r\n  isMainThread,\r\n  SHARE_ENV,\r\n  resourceLimits:\r\n    !isMainThread ? makeResourceLimits(resourceLimitsRaw) : {},\r\n  setEnvironmentData,\r\n  getEnvironmentData,\r\n  assignEnvironmentData,\r\n  threadId,\r\n  InternalWorker,\r\n  Worker,\r\n};\r\n"
  },
  "179": {
    "metadata": {
      "scriptId": "179",
      "url": "node:internal/perf/event_loop_utilization",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 60,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "9e38e014b41650123fbe9c1995fab90c45e2de1322d1ccedf25cde361ea2f16e",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1587,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/perf/event_loop_utilization"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  constants: {\r\n    NODE_PERFORMANCE_MILESTONE_LOOP_START,\r\n  },\r\n  loopIdleTime,\r\n  milestones,\r\n} = internalBinding('performance');\r\n\r\nfunction eventLoopUtilization(util1, util2) {\r\n  // Get the original milestone timestamps that calculated from the beginning\r\n  // of the process.\r\n  return internalEventLoopUtilization(\r\n    milestones[NODE_PERFORMANCE_MILESTONE_LOOP_START] / 1e6,\r\n    loopIdleTime(),\r\n    util1,\r\n    util2,\r\n  );\r\n}\r\n\r\nfunction internalEventLoopUtilization(loopStart, loopIdleTime, util1, util2) {\r\n  if (loopStart <= 0) {\r\n    return { idle: 0, active: 0, utilization: 0 };\r\n  }\r\n\r\n  if (util2) {\r\n    const idle = util1.idle - util2.idle;\r\n    const active = util1.active - util2.active;\r\n    return { idle, active, utilization: active / (idle + active) };\r\n  }\r\n\r\n  // Using process.hrtime() to get the time from the beginning of the process,\r\n  // and offset it by the loopStart time (which is also calculated from the\r\n  // beginning of the process).\r\n  const now = process.hrtime();\r\n  const active = now[0] * 1e3 + now[1] / 1e6 - loopStart - loopIdleTime;\r\n\r\n  if (!util1) {\r\n    return {\r\n      idle: loopIdleTime,\r\n      active,\r\n      utilization: active / (loopIdleTime + active),\r\n    };\r\n  }\r\n\r\n  const idleDelta = loopIdleTime - util1.idle;\r\n  const activeDelta = active - util1.active;\r\n  const utilization = activeDelta / (idleDelta + activeDelta);\r\n  return {\r\n    idle: idleDelta,\r\n    active: activeDelta,\r\n    utilization,\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  internalEventLoopUtilization,\r\n  eventLoopUtilization,\r\n};\r\n"
  },
  "180": {
    "metadata": {
      "scriptId": "180",
      "url": "node:internal/worker/io",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 463,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "e421bd0cb0e31f21389d78c47a05d4d59889b1429b84546edc4e9e29c0c518d1",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 13818,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/worker/io"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeCall,\r\n  ObjectAssign,\r\n  ObjectCreate,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectGetOwnPropertyDescriptors,\r\n  ObjectGetPrototypeOf,\r\n  ObjectSetPrototypeOf,\r\n  ObjectValues,\r\n  ReflectApply,\r\n  Symbol,\r\n  SymbolFor,\r\n} = primordials;\r\n\r\nconst {\r\n  kEnumerableProperty,\r\n  setOwnProperty,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  handle_onclose: handleOnCloseSymbol,\r\n  oninit: onInitSymbol,\r\n  no_message_symbol: noMessageSymbol,\r\n} = internalBinding('symbols');\r\nconst {\r\n  MessagePort,\r\n  MessageChannel,\r\n  broadcastChannel,\r\n  drainMessagePort,\r\n  moveMessagePortToContext,\r\n  receiveMessageOnPort: receiveMessageOnPort_,\r\n  stopMessagePort,\r\n  DOMException,\r\n} = internalBinding('messaging');\r\nconst {\r\n  getEnvMessagePort,\r\n} = internalBinding('worker');\r\n\r\nconst { Readable, Writable } = require('stream');\r\nconst {\r\n  Event,\r\n  EventTarget,\r\n  NodeEventTarget,\r\n  defineEventHandler,\r\n  initNodeEventTarget,\r\n  kCreateEvent,\r\n  kNewListener,\r\n  kRemoveListener,\r\n} = require('internal/event_target');\r\nconst { inspect } = require('internal/util/inspect');\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_THIS,\r\n    ERR_MISSING_ARGS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst kHandle = Symbol('kHandle');\r\nconst kIncrementsPortRef = Symbol('kIncrementsPortRef');\r\nconst kName = Symbol('kName');\r\nconst kOnMessage = Symbol('kOnMessage');\r\nconst kOnMessageError = Symbol('kOnMessageError');\r\nconst kPort = Symbol('kPort');\r\nconst kWaitingStreams = Symbol('kWaitingStreams');\r\nconst kWritableCallbacks = Symbol('kWritableCallbacks');\r\nconst kStartedReading = Symbol('kStartedReading');\r\nconst kStdioWantsMoreDataCallback = Symbol('kStdioWantsMoreDataCallback');\r\nconst kCurrentlyReceivingPorts =\r\n  SymbolFor('nodejs.internal.kCurrentlyReceivingPorts');\r\nconst kType = Symbol('kType');\r\n\r\nconst messageTypes = {\r\n  UP_AND_RUNNING: 'upAndRunning',\r\n  COULD_NOT_SERIALIZE_ERROR: 'couldNotSerializeError',\r\n  ERROR_MESSAGE: 'errorMessage',\r\n  STDIO_PAYLOAD: 'stdioPayload',\r\n  STDIO_WANTS_MORE_DATA: 'stdioWantsMoreData',\r\n  LOAD_SCRIPT: 'loadScript',\r\n};\r\n\r\nlet messageEvent;\r\nfunction lazyMessageEvent() {\r\n  return messageEvent ??= require('internal/deps/undici/undici').MessageEvent;\r\n}\r\n\r\n// We have to mess with the MessagePort prototype a bit, so that a) we can make\r\n// it inherit from NodeEventTarget, even though it is a C++ class, and b) we do\r\n// not provide methods that are not present in the Browser and not documented\r\n// on our side (e.g. stopMessagePort).\r\nconst messagePortPrototypePropertyDescriptors = ObjectGetOwnPropertyDescriptors(MessagePort.prototype);\r\nconst propertiesValues = ObjectValues(messagePortPrototypePropertyDescriptors);\r\nfor (let i = 0; i < propertiesValues.length; i++) {\r\n  // We want to use null-prototype objects to not rely on globally mutable\r\n  // %Object.prototype%.\r\n  ObjectSetPrototypeOf(propertiesValues[i], null);\r\n}\r\n// Save a copy of the original set of methods as a shallow clone.\r\nconst MessagePortPrototype = ObjectCreate(\r\n  ObjectGetPrototypeOf(MessagePort.prototype),\r\n  messagePortPrototypePropertyDescriptors);\r\n// Set up the new inheritance chain.\r\nObjectSetPrototypeOf(MessagePort, NodeEventTarget);\r\nObjectSetPrototypeOf(MessagePort.prototype, NodeEventTarget.prototype);\r\n// Copy methods that are inherited from HandleWrap, because\r\n// changing the prototype of MessagePort.prototype implicitly removed them.\r\nMessagePort.prototype.ref = MessagePortPrototype.ref;\r\nMessagePort.prototype.unref = MessagePortPrototype.unref;\r\nMessagePort.prototype.hasRef = function() {\r\n  return !!FunctionPrototypeCall(MessagePortPrototype.hasRef, this);\r\n};\r\n\r\nconst originalCreateEvent = EventTarget.prototype[kCreateEvent];\r\nObjectDefineProperty(\r\n  MessagePort.prototype,\r\n  kCreateEvent,\r\n  {\r\n    __proto__: null,\r\n    value: function(data, type) {\r\n      if (type !== 'message' && type !== 'messageerror') {\r\n        return ReflectApply(originalCreateEvent, this, arguments);\r\n      }\r\n      const ports = this[kCurrentlyReceivingPorts];\r\n      this[kCurrentlyReceivingPorts] = undefined;\r\n      return new (lazyMessageEvent())(type, { data, ports });\r\n    },\r\n    configurable: false,\r\n    writable: false,\r\n    enumerable: false,\r\n  });\r\n\r\n// This is called from inside the `MessagePort` constructor.\r\nfunction oninit() {\r\n  initNodeEventTarget(this);\r\n  setupPortReferencing(this, this, 'message');\r\n  this[kCurrentlyReceivingPorts] = undefined;\r\n}\r\n\r\ndefineEventHandler(MessagePort.prototype, 'message');\r\ndefineEventHandler(MessagePort.prototype, 'messageerror');\r\n\r\nObjectDefineProperty(MessagePort.prototype, onInitSymbol, {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  writable: false,\r\n  value: oninit,\r\n});\r\n\r\nclass MessagePortCloseEvent extends Event {\r\n  constructor() {\r\n    super('close');\r\n  }\r\n}\r\n\r\n// This is called after the underlying `uv_async_t` has been closed.\r\nfunction onclose() {\r\n  this.dispatchEvent(new MessagePortCloseEvent());\r\n}\r\n\r\nObjectDefineProperty(MessagePort.prototype, handleOnCloseSymbol, {\r\n  __proto__: null,\r\n  enumerable: false,\r\n  writable: false,\r\n  value: onclose,\r\n});\r\n\r\nMessagePort.prototype.close = function(cb) {\r\n  if (typeof cb === 'function')\r\n    this.once('close', cb);\r\n  FunctionPrototypeCall(MessagePortPrototype.close, this);\r\n};\r\n\r\nObjectDefineProperty(MessagePort.prototype, inspect.custom, {\r\n  __proto__: null,\r\n  enumerable: false,\r\n  writable: false,\r\n  value: function inspect() {  // eslint-disable-line func-name-matching\r\n    let ref;\r\n    try {\r\n      // This may throw when `this` does not refer to a native object,\r\n      // e.g. when accessing the prototype directly.\r\n      ref = FunctionPrototypeCall(MessagePortPrototype.hasRef, this);\r\n    } catch { return this; }\r\n    return ObjectAssign({ __proto__: MessagePort.prototype },\r\n                        ref === undefined ? {\r\n                          active: false,\r\n                        } : {\r\n                          active: true,\r\n                          refed: ref,\r\n                        },\r\n                        this);\r\n  },\r\n});\r\n\r\nfunction setupPortReferencing(port, eventEmitter, eventName) {\r\n  // Keep track of whether there are any workerMessage listeners:\r\n  // If there are some, ref() the channel so it keeps the event loop alive.\r\n  // If there are none or all are removed, unref() the channel so the worker\r\n  // can shutdown gracefully.\r\n  port.unref();\r\n  eventEmitter.on('newListener', function(name) {\r\n    if (name === eventName) newListener(eventEmitter.listenerCount(name));\r\n  });\r\n  eventEmitter.on('removeListener', function(name) {\r\n    if (name === eventName) removeListener(eventEmitter.listenerCount(name));\r\n  });\r\n  const origNewListener = eventEmitter[kNewListener];\r\n  setOwnProperty(eventEmitter, kNewListener, function(size, type, ...args) {\r\n    if (type === eventName) newListener(size - 1);\r\n    return ReflectApply(origNewListener, this, arguments);\r\n  });\r\n  const origRemoveListener = eventEmitter[kRemoveListener];\r\n  setOwnProperty(eventEmitter, kRemoveListener, function(size, type, ...args) {\r\n    if (type === eventName) removeListener(size);\r\n    return ReflectApply(origRemoveListener, this, arguments);\r\n  });\r\n\r\n  function newListener(size) {\r\n    if (size === 0) {\r\n      port.ref();\r\n      FunctionPrototypeCall(MessagePortPrototype.start, port);\r\n    }\r\n  }\r\n\r\n  function removeListener(size) {\r\n    if (size === 0) {\r\n      stopMessagePort(port);\r\n      port.unref();\r\n    }\r\n  }\r\n}\r\n\r\n\r\nclass ReadableWorkerStdio extends Readable {\r\n  constructor(port, name) {\r\n    super();\r\n    this[kPort] = port;\r\n    this[kName] = name;\r\n    this[kIncrementsPortRef] = true;\r\n    this[kStartedReading] = false;\r\n    this.on('end', () => {\r\n      if (this[kStartedReading] && this[kIncrementsPortRef]) {\r\n        if (--this[kPort][kWaitingStreams] === 0)\r\n          this[kPort].unref();\r\n      }\r\n    });\r\n  }\r\n\r\n  _read() {\r\n    if (!this[kStartedReading] && this[kIncrementsPortRef]) {\r\n      this[kStartedReading] = true;\r\n      if (this[kPort][kWaitingStreams]++ === 0)\r\n        this[kPort].ref();\r\n    }\r\n\r\n    this[kPort].postMessage({\r\n      type: messageTypes.STDIO_WANTS_MORE_DATA,\r\n      stream: this[kName],\r\n    });\r\n  }\r\n}\r\n\r\nclass WritableWorkerStdio extends Writable {\r\n  constructor(port, name) {\r\n    super({ decodeStrings: false });\r\n    this[kPort] = port;\r\n    this[kName] = name;\r\n    this[kWritableCallbacks] = [];\r\n  }\r\n\r\n  _writev(chunks, cb) {\r\n    this[kPort].postMessage({\r\n      type: messageTypes.STDIO_PAYLOAD,\r\n      stream: this[kName],\r\n      chunks: ArrayPrototypeMap(chunks,\r\n                                ({ chunk, encoding }) => ({ chunk, encoding })),\r\n    });\r\n    ArrayPrototypePush(this[kWritableCallbacks], cb);\r\n    if (this[kPort][kWaitingStreams]++ === 0)\r\n      this[kPort].ref();\r\n  }\r\n\r\n  _final(cb) {\r\n    this[kPort].postMessage({\r\n      type: messageTypes.STDIO_PAYLOAD,\r\n      stream: this[kName],\r\n      chunks: [ { chunk: null, encoding: '' } ],\r\n    });\r\n    cb();\r\n  }\r\n\r\n  [kStdioWantsMoreDataCallback]() {\r\n    const cbs = this[kWritableCallbacks];\r\n    this[kWritableCallbacks] = [];\r\n    ArrayPrototypeForEach(cbs, (cb) => cb());\r\n    if ((this[kPort][kWaitingStreams] -= cbs.length) === 0)\r\n      this[kPort].unref();\r\n  }\r\n}\r\n\r\nfunction createWorkerStdio() {\r\n  const port = getEnvMessagePort();\r\n  port[kWaitingStreams] = 0;\r\n  return {\r\n    stdin: new ReadableWorkerStdio(port, 'stdin'),\r\n    stdout: new WritableWorkerStdio(port, 'stdout'),\r\n    stderr: new WritableWorkerStdio(port, 'stderr'),\r\n  };\r\n}\r\n\r\nfunction receiveMessageOnPort(port) {\r\n  const message = receiveMessageOnPort_(port?.[kHandle] ?? port);\r\n  if (message === noMessageSymbol) return undefined;\r\n  return { message };\r\n}\r\n\r\nfunction onMessageEvent(type, data) {\r\n  this.dispatchEvent(new (lazyMessageEvent())(type, { data }));\r\n}\r\n\r\nfunction isBroadcastChannel(value) {\r\n  return value?.[kType] === 'BroadcastChannel';\r\n}\r\n\r\nclass BroadcastChannel extends EventTarget {\r\n  /**\r\n   * @param {string} name\r\n   */\r\n  constructor(name) {\r\n    if (arguments.length === 0)\r\n      throw new ERR_MISSING_ARGS('name');\r\n    super();\r\n    this[kType] = 'BroadcastChannel';\r\n    this[kName] = `${name}`;\r\n    this[kHandle] = broadcastChannel(this[kName]);\r\n    this[kOnMessage] = FunctionPrototypeBind(onMessageEvent, this, 'message');\r\n    this[kOnMessageError] =\r\n      FunctionPrototypeBind(onMessageEvent, this, 'messageerror');\r\n    this[kHandle].on('message', this[kOnMessage]);\r\n    this[kHandle].on('messageerror', this[kOnMessageError]);\r\n  }\r\n\r\n  [inspect.custom](depth, options) {\r\n    if (!isBroadcastChannel(this))\r\n      throw new ERR_INVALID_THIS('BroadcastChannel');\r\n    if (depth < 0)\r\n      return 'BroadcastChannel';\r\n\r\n    const opts = {\r\n      ...options,\r\n      depth: options.depth == null ? null : options.depth - 1,\r\n    };\r\n\r\n    return `BroadcastChannel ${inspect({\r\n      name: this[kName],\r\n      active: this[kHandle] !== undefined,\r\n    }, opts)}`;\r\n  }\r\n\r\n  /**\r\n   * @type {string}\r\n   */\r\n  get name() {\r\n    if (!isBroadcastChannel(this))\r\n      throw new ERR_INVALID_THIS('BroadcastChannel');\r\n    return this[kName];\r\n  }\r\n\r\n  /**\r\n   * @returns {void}\r\n   */\r\n  close() {\r\n    if (!isBroadcastChannel(this))\r\n      throw new ERR_INVALID_THIS('BroadcastChannel');\r\n    if (this[kHandle] === undefined)\r\n      return;\r\n    this[kHandle].off('message', this[kOnMessage]);\r\n    this[kHandle].off('messageerror', this[kOnMessageError]);\r\n    this[kOnMessage] = undefined;\r\n    this[kOnMessageError] = undefined;\r\n    this[kHandle].close();\r\n    this[kHandle] = undefined;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {any} message\r\n   * @returns {void}\r\n   */\r\n  postMessage(message) {\r\n    if (!isBroadcastChannel(this))\r\n      throw new ERR_INVALID_THIS('BroadcastChannel');\r\n    if (arguments.length === 0)\r\n      throw new ERR_MISSING_ARGS('message');\r\n    if (this[kHandle] === undefined)\r\n      throw new DOMException('BroadcastChannel is closed.');\r\n    if (this[kHandle].postMessage(message) === undefined)\r\n      throw new DOMException('Message could not be posted.');\r\n  }\r\n\r\n  // The ref() method is Node.js specific and not part of the standard\r\n  // BroadcastChannel API definition. Typically we shouldn't extend Web\r\n  // Platform APIs with Node.js specific methods but ref and unref\r\n  // are a bit special.\r\n  /**\r\n   * @returns {BroadcastChannel}\r\n   */\r\n  ref() {\r\n    if (!isBroadcastChannel(this))\r\n      throw new ERR_INVALID_THIS('BroadcastChannel');\r\n    if (this[kHandle])\r\n      this[kHandle].ref();\r\n    return this;\r\n  }\r\n\r\n  // The unref() method is Node.js specific and not part of the standard\r\n  // BroadcastChannel API definition. Typically we shouldn't extend Web\r\n  // Platform APIs with Node.js specific methods but ref and unref\r\n  // are a bit special.\r\n  /**\r\n   * @returns {BroadcastChannel}\r\n   */\r\n  unref() {\r\n    if (!isBroadcastChannel(this))\r\n      throw new ERR_INVALID_THIS('BroadcastChannel');\r\n    if (this[kHandle])\r\n      this[kHandle].unref();\r\n    return this;\r\n  }\r\n}\r\n\r\nObjectDefineProperties(BroadcastChannel.prototype, {\r\n  name: kEnumerableProperty,\r\n  close: kEnumerableProperty,\r\n  postMessage: kEnumerableProperty,\r\n});\r\n\r\ndefineEventHandler(BroadcastChannel.prototype, 'message');\r\ndefineEventHandler(BroadcastChannel.prototype, 'messageerror');\r\n\r\nmodule.exports = {\r\n  drainMessagePort,\r\n  messageTypes,\r\n  kPort,\r\n  kIncrementsPortRef,\r\n  kWaitingStreams,\r\n  kStdioWantsMoreDataCallback,\r\n  moveMessagePortToContext,\r\n  MessagePort,\r\n  MessageChannel,\r\n  receiveMessageOnPort,\r\n  setupPortReferencing,\r\n  ReadableWorkerStdio,\r\n  WritableWorkerStdio,\r\n  createWorkerStdio,\r\n  BroadcastChannel,\r\n};\r\n"
  },
  "181": {
    "metadata": {
      "scriptId": "181",
      "url": "node:internal/error_serdes",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 192,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "b23e742f3e6fdddeefc1ecfc28093487217e03a3fa7312294dcb3ca3521416dd",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 5913,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/error_serdes"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeForEach,\r\n  Error,\r\n  EvalError,\r\n  FunctionPrototypeCall,\r\n  ObjectAssign,\r\n  ObjectCreate,\r\n  ObjectDefineProperty,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ObjectGetOwnPropertyNames,\r\n  ObjectGetPrototypeOf,\r\n  ObjectKeys,\r\n  ObjectPrototypeToString,\r\n  RangeError,\r\n  ReferenceError,\r\n  SafeSet,\r\n  StringFromCharCode,\r\n  StringPrototypeSubstring,\r\n  SymbolFor,\r\n  SymbolToStringTag,\r\n  SyntaxError,\r\n  TypeError,\r\n  TypedArrayPrototypeGetBuffer,\r\n  TypedArrayPrototypeGetByteLength,\r\n  TypedArrayPrototypeGetByteOffset,\r\n  URIError,\r\n} = primordials;\r\n\r\nconst { Buffer } = require('buffer');\r\nconst { inspect: { custom: customInspectSymbol } } = require('util');\r\n\r\nconst kSerializedError = 0;\r\nconst kSerializedObject = 1;\r\nconst kInspectedError = 2;\r\nconst kInspectedSymbol = 3;\r\nconst kCustomInspectedObject = 4;\r\n\r\nconst kSymbolStringLength = 'Symbol('.length;\r\n\r\nconst errors = {\r\n  Error, TypeError, RangeError, URIError, SyntaxError, ReferenceError, EvalError,\r\n};\r\nconst errorConstructorNames = new SafeSet(ObjectKeys(errors));\r\n\r\nfunction TryGetAllProperties(object, target = object) {\r\n  const all = { __proto__: null };\r\n  if (object === null)\r\n    return all;\r\n  ObjectAssign(all,\r\n               TryGetAllProperties(ObjectGetPrototypeOf(object), target));\r\n  const keys = ObjectGetOwnPropertyNames(object);\r\n  ArrayPrototypeForEach(keys, (key) => {\r\n    let descriptor;\r\n    try {\r\n      // TODO: create a null-prototype descriptor with needed properties only\r\n      descriptor = ObjectGetOwnPropertyDescriptor(object, key);\r\n    } catch { return; }\r\n    const getter = descriptor.get;\r\n    if (getter && key !== '__proto__') {\r\n      try {\r\n        descriptor.value = FunctionPrototypeCall(getter, target);\r\n        delete descriptor.get;\r\n        delete descriptor.set;\r\n      } catch {\r\n        // Continue regardless of error.\r\n      }\r\n    }\r\n    if (key === 'cause') {\r\n      descriptor.value = serializeError(descriptor.value);\r\n      all[key] = descriptor;\r\n    } else if ('value' in descriptor &&\r\n            typeof descriptor.value !== 'function' && typeof descriptor.value !== 'symbol') {\r\n      all[key] = descriptor;\r\n    }\r\n  });\r\n  return all;\r\n}\r\n\r\nfunction GetConstructors(object) {\r\n  const constructors = [];\r\n\r\n  for (let current = object;\r\n    current !== null;\r\n    current = ObjectGetPrototypeOf(current)) {\r\n    const desc = ObjectGetOwnPropertyDescriptor(current, 'constructor');\r\n    if (desc && desc.value) {\r\n      ObjectDefineProperty(constructors, constructors.length, {\r\n        __proto__: null,\r\n        value: desc.value, enumerable: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  return constructors;\r\n}\r\n\r\nfunction GetName(object) {\r\n  const desc = ObjectGetOwnPropertyDescriptor(object, 'name');\r\n  return desc && desc.value;\r\n}\r\n\r\nlet internalUtilInspect;\r\nfunction inspect(...args) {\r\n  if (!internalUtilInspect) {\r\n    internalUtilInspect = require('internal/util/inspect');\r\n  }\r\n  return internalUtilInspect.inspect(...args);\r\n}\r\n\r\nlet serialize;\r\nfunction serializeError(error) {\r\n  if (!serialize) serialize = require('v8').serialize;\r\n  if (typeof error === 'symbol') {\r\n    return Buffer.from(StringFromCharCode(kInspectedSymbol) + inspect(error), 'utf8');\r\n  }\r\n  try {\r\n    if (typeof error === 'object' &&\r\n        ObjectPrototypeToString(error) === '[object Error]') {\r\n      const constructors = GetConstructors(error);\r\n      for (let i = 0; i < constructors.length; i++) {\r\n        const name = GetName(constructors[i]);\r\n        if (errorConstructorNames.has(name)) {\r\n          const serialized = serialize({\r\n            constructor: name,\r\n            properties: TryGetAllProperties(error),\r\n          });\r\n          return Buffer.concat([Buffer.from([kSerializedError]), serialized]);\r\n        }\r\n      }\r\n    }\r\n  } catch {\r\n    // Continue regardless of error.\r\n  }\r\n  try {\r\n    if (error != null && customInspectSymbol in error) {\r\n      return Buffer.from(StringFromCharCode(kCustomInspectedObject) + inspect(error), 'utf8');\r\n    }\r\n  } catch {\r\n    // Continue regardless of error.\r\n  }\r\n  try {\r\n    const serialized = serialize(error);\r\n    return Buffer.concat([Buffer.from([kSerializedObject]), serialized]);\r\n  } catch {\r\n    // Continue regardless of error.\r\n  }\r\n  return Buffer.from(StringFromCharCode(kInspectedError) + inspect(error), 'utf8');\r\n}\r\n\r\nfunction fromBuffer(error) {\r\n  return Buffer.from(TypedArrayPrototypeGetBuffer(error),\r\n                     TypedArrayPrototypeGetByteOffset(error) + 1,\r\n                     TypedArrayPrototypeGetByteLength(error) - 1);\r\n}\r\n\r\nlet deserialize;\r\nfunction deserializeError(error) {\r\n  if (!deserialize) deserialize = require('v8').deserialize;\r\n  switch (error[0]) {\r\n    case kSerializedError: {\r\n      const { constructor, properties } = deserialize(error.subarray(1));\r\n      const ctor = errors[constructor];\r\n      ObjectDefineProperty(properties, SymbolToStringTag, {\r\n        __proto__: null,\r\n        value: { __proto__: null, value: 'Error', configurable: true },\r\n        enumerable: true,\r\n      });\r\n      if ('cause' in properties && 'value' in properties.cause) {\r\n        properties.cause.value = deserializeError(properties.cause.value);\r\n      }\r\n      return ObjectCreate(ctor.prototype, properties);\r\n    }\r\n    case kSerializedObject:\r\n      return deserialize(error.subarray(1));\r\n    case kInspectedError:\r\n      return fromBuffer(error).toString('utf8');\r\n    case kInspectedSymbol: {\r\n      const buf = fromBuffer(error);\r\n      return SymbolFor(StringPrototypeSubstring(buf.toString('utf8'), kSymbolStringLength, buf.length - 1));\r\n    }\r\n    case kCustomInspectedObject:\r\n      return {\r\n        __proto__: null,\r\n        [customInspectSymbol]: () => fromBuffer(error).toString('utf8'),\r\n      };\r\n  }\r\n  require('assert').fail('This should not happen');\r\n}\r\n\r\nmodule.exports = { serializeError, deserializeError };\r\n"
  },
  "182": {
    "metadata": {
      "scriptId": "182",
      "url": "node:inspector/promises",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 14,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "c7913d3649d40ede5b6818412f0fa6dff33436cd3fe959502f1bb47c00fbbc0c",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 357,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:inspector/promises"
    },
    "source": "'use strict';\r\n\r\nconst inspector = require('inspector');\r\nconst { promisify } = require('internal/util');\r\n\r\nclass Session extends inspector.Session {\r\n  constructor() { super(); } // eslint-disable-line no-useless-constructor\r\n}\r\nSession.prototype.post = promisify(inspector.Session.prototype.post);\r\n\r\nmodule.exports = {\r\n  ...inspector,\r\n  Session,\r\n};\r\n"
  },
  "183": {
    "metadata": {
      "scriptId": "183",
      "url": "node:os",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 421,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "5ca7e6f652ec354394ca5be2d44415f3b1202aef00ec58d110f9ef9942b6b3d8",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10195,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:os"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePush,\r\n  Float64Array,\r\n  NumberParseInt,\r\n  ObjectDefineProperties,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeSlice,\r\n  SymbolToPrimitive,\r\n} = primordials;\r\n\r\nconst { safeGetenv } = internalBinding('credentials');\r\nconst constants = internalBinding('constants').os;\r\nconst isWindows = process.platform === 'win32';\r\n\r\nconst {\r\n  codes: {\r\n    ERR_SYSTEM_ERROR,\r\n  },\r\n  hideStackFrames,\r\n} = require('internal/errors');\r\nconst { validateInt32 } = require('internal/validators');\r\n\r\nconst {\r\n  getAvailableParallelism,\r\n  getCPUs,\r\n  getFreeMem,\r\n  getHomeDirectory: _getHomeDirectory,\r\n  getHostname: _getHostname,\r\n  getInterfaceAddresses: _getInterfaceAddresses,\r\n  getLoadAvg,\r\n  getPriority: _getPriority,\r\n  getOSInformation: _getOSInformation,\r\n  getTotalMem,\r\n  getUserInfo,\r\n  getUptime: _getUptime,\r\n  isBigEndian,\r\n  setPriority: _setPriority,\r\n} = internalBinding('os');\r\n\r\nfunction getCheckedFunction(fn) {\r\n  return hideStackFrames(function checkError() {\r\n    const ctx = {};\r\n    const ret = fn(ctx);\r\n    if (ret === undefined) {\r\n      throw new ERR_SYSTEM_ERROR.HideStackFramesError(ctx);\r\n    }\r\n    return ret;\r\n  });\r\n}\r\n\r\nconst {\r\n  0: type,\r\n  1: version,\r\n  2: release,\r\n  3: machine,\r\n} = _getOSInformation();\r\n\r\nconst getHomeDirectory = getCheckedFunction(_getHomeDirectory);\r\nconst getHostname = getCheckedFunction(_getHostname);\r\nconst getInterfaceAddresses = getCheckedFunction(_getInterfaceAddresses);\r\nconst getUptime = getCheckedFunction(_getUptime);\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nconst getOSRelease = () => release;\r\n/**\r\n * @returns {string}\r\n */\r\nconst getOSType = () => type;\r\n/**\r\n * @returns {string}\r\n */\r\nconst getOSVersion = () => version;\r\n/**\r\n * @returns {string}\r\n */\r\nconst getMachine = () => machine;\r\n\r\ngetAvailableParallelism[SymbolToPrimitive] = () => getAvailableParallelism();\r\ngetFreeMem[SymbolToPrimitive] = () => getFreeMem();\r\ngetHostname[SymbolToPrimitive] = () => getHostname();\r\ngetOSVersion[SymbolToPrimitive] = () => getOSVersion();\r\ngetOSType[SymbolToPrimitive] = () => getOSType();\r\ngetOSRelease[SymbolToPrimitive] = () => getOSRelease();\r\ngetMachine[SymbolToPrimitive] = () => getMachine();\r\ngetHomeDirectory[SymbolToPrimitive] = () => getHomeDirectory();\r\ngetTotalMem[SymbolToPrimitive] = () => getTotalMem();\r\ngetUptime[SymbolToPrimitive] = () => getUptime();\r\n\r\nconst kEndianness = isBigEndian ? 'BE' : 'LE';\r\n\r\nconst avgValues = new Float64Array(3);\r\n\r\n/**\r\n * @returns {[number, number, number]}\r\n */\r\nfunction loadavg() {\r\n  getLoadAvg(avgValues);\r\n  return [avgValues[0], avgValues[1], avgValues[2]];\r\n}\r\n\r\n/**\r\n * Returns an array of objects containing information about each\r\n * logical CPU core.\r\n * @returns {Array<{\r\n *  model: string,\r\n *  speed: number,\r\n *  times: {\r\n *    user: number,\r\n *    nice: number,\r\n *    sys: number,\r\n *    idle: number,\r\n *    irq: number,\r\n *  },\r\n * }>}\r\n */\r\nfunction cpus() {\r\n  // [] is a bugfix for a regression introduced in 51cea61\r\n  const data = getCPUs() || [];\r\n  const result = [];\r\n  let i = 0;\r\n  while (i < data.length) {\r\n    ArrayPrototypePush(result, {\r\n      model: data[i++],\r\n      speed: data[i++],\r\n      times: {\r\n        user: data[i++],\r\n        nice: data[i++],\r\n        sys: data[i++],\r\n        idle: data[i++],\r\n        irq: data[i++],\r\n      },\r\n    });\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction arch() {\r\n  return process.arch;\r\n}\r\narch[SymbolToPrimitive] = () => process.arch;\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction platform() {\r\n  return process.platform;\r\n}\r\nplatform[SymbolToPrimitive] = () => process.platform;\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction tmpdir() {\r\n  let path;\r\n  if (isWindows) {\r\n    path = process.env.TEMP ||\r\n           process.env.TMP ||\r\n           (process.env.SystemRoot || process.env.windir) + '\\\\temp';\r\n    if (path.length > 1 && StringPrototypeEndsWith(path, '\\\\') &&\r\n        !StringPrototypeEndsWith(path, ':\\\\'))\r\n      path = StringPrototypeSlice(path, 0, -1);\r\n  } else {\r\n    path = safeGetenv('TMPDIR') ||\r\n           safeGetenv('TMP') ||\r\n           safeGetenv('TEMP') ||\r\n           '/tmp';\r\n    if (path.length > 1 && StringPrototypeEndsWith(path, '/'))\r\n      path = StringPrototypeSlice(path, 0, -1);\r\n  }\r\n\r\n  return path;\r\n}\r\ntmpdir[SymbolToPrimitive] = () => tmpdir();\r\n\r\n/**\r\n * @returns {'BE' | 'LE'}\r\n */\r\nfunction endianness() {\r\n  return kEndianness;\r\n}\r\nendianness[SymbolToPrimitive] = () => kEndianness;\r\n\r\n// Returns the number of ones in the binary representation of the decimal\r\n// number.\r\nfunction countBinaryOnes(n) {\r\n  // Count the number of bits set in parallel, which is faster than looping\r\n  n = n - ((n >>> 1) & 0x55555555);\r\n  n = (n & 0x33333333) + ((n >>> 2) & 0x33333333);\r\n  return ((n + (n >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;\r\n}\r\n\r\nfunction getCIDR(address, netmask, family) {\r\n  let ones = 0;\r\n  let split = '.';\r\n  let range = 10;\r\n  let groupLength = 8;\r\n  let hasZeros = false;\r\n  let lastPos = 0;\r\n\r\n  if (family === 'IPv6') {\r\n    split = ':';\r\n    range = 16;\r\n    groupLength = 16;\r\n  }\r\n\r\n  for (let i = 0; i < netmask.length; i++) {\r\n    if (netmask[i] !== split) {\r\n      if (i + 1 < netmask.length) {\r\n        continue;\r\n      }\r\n      i++;\r\n    }\r\n    const part = StringPrototypeSlice(netmask, lastPos, i);\r\n    lastPos = i + 1;\r\n    if (part !== '') {\r\n      if (hasZeros) {\r\n        if (part !== '0') {\r\n          return null;\r\n        }\r\n      } else {\r\n        const binary = NumberParseInt(part, range);\r\n        const binaryOnes = countBinaryOnes(binary);\r\n        ones += binaryOnes;\r\n        if (binaryOnes !== groupLength) {\r\n          if ((binary & 1) !== 0) {\r\n            return null;\r\n          }\r\n          hasZeros = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return `${address}/${ones}`;\r\n}\r\n\r\n/**\r\n * @returns {Record<string, Array<{\r\n *  address: string,\r\n *  netmask: string,\r\n *  family: 'IPv4' | 'IPv6',\r\n *  mac: string,\r\n *  internal: boolean,\r\n *  scopeid: number,\r\n *  cidr: string | null,\r\n * }>>}\r\n */\r\nfunction networkInterfaces() {\r\n  const data = getInterfaceAddresses();\r\n  const result = {};\r\n\r\n  if (data === undefined)\r\n    return result;\r\n  for (let i = 0; i < data.length; i += 7) {\r\n    const name = data[i];\r\n    const entry = {\r\n      address: data[i + 1],\r\n      netmask: data[i + 2],\r\n      family: data[i + 3],\r\n      mac: data[i + 4],\r\n      internal: data[i + 5],\r\n      cidr: getCIDR(data[i + 1], data[i + 2], data[i + 3]),\r\n    };\r\n    const scopeid = data[i + 6];\r\n    if (scopeid !== -1)\r\n      entry.scopeid = scopeid;\r\n\r\n    const existing = result[name];\r\n    if (existing !== undefined)\r\n      ArrayPrototypePush(existing, entry);\r\n    else\r\n      result[name] = [entry];\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * @param {number} [pid=0]\r\n * @param {number} priority\r\n * @returns {void}\r\n */\r\nfunction setPriority(pid, priority) {\r\n  if (priority === undefined) {\r\n    priority = pid;\r\n    pid = 0;\r\n  }\r\n\r\n  validateInt32(pid, 'pid');\r\n  validateInt32(priority, 'priority', -20, 19);\r\n\r\n  const ctx = {};\r\n\r\n  if (_setPriority(pid, priority, ctx) !== 0)\r\n    throw new ERR_SYSTEM_ERROR(ctx);\r\n}\r\n\r\n/**\r\n * @param {number} [pid=0]\r\n * @returns {number}\r\n */\r\nfunction getPriority(pid) {\r\n  if (pid === undefined)\r\n    pid = 0;\r\n  else\r\n    validateInt32(pid, 'pid');\r\n\r\n  const ctx = {};\r\n  const priority = _getPriority(pid, ctx);\r\n\r\n  if (priority === undefined)\r\n    throw new ERR_SYSTEM_ERROR(ctx);\r\n\r\n  return priority;\r\n}\r\n\r\n/**\r\n * @param {{ encoding?: string }} [options=utf8] If `encoding` is set to\r\n * `'buffer'`, the `username`, `shell`, and `homedir` values will\r\n * be `Buffer` instances.\r\n * @returns {{\r\n *   uid: number,\r\n *   gid: number,\r\n *   username: string,\r\n *   homedir: string,\r\n *   shell: string | null,\r\n * }}\r\n */\r\nfunction userInfo(options) {\r\n  if (typeof options !== 'object')\r\n    options = null;\r\n\r\n  const ctx = {};\r\n  const user = getUserInfo(options, ctx);\r\n\r\n  if (user === undefined)\r\n    throw new ERR_SYSTEM_ERROR(ctx);\r\n\r\n  if (isWindows) {\r\n    user.uid |= 0;\r\n    user.gid |= 0;\r\n  }\r\n\r\n  return user;\r\n}\r\n\r\nmodule.exports = {\r\n  arch,\r\n  availableParallelism: getAvailableParallelism,\r\n  cpus,\r\n  endianness,\r\n  freemem: getFreeMem,\r\n  getPriority,\r\n  homedir: getHomeDirectory,\r\n  hostname: getHostname,\r\n  loadavg,\r\n  networkInterfaces,\r\n  platform,\r\n  release: getOSRelease,\r\n  setPriority,\r\n  tmpdir,\r\n  totalmem: getTotalMem,\r\n  type: getOSType,\r\n  userInfo,\r\n  uptime: getUptime,\r\n  version: getOSVersion,\r\n  machine: getMachine,\r\n};\r\n\r\nObjectDefineProperties(module.exports, {\r\n  constants: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    value: constants,\r\n  },\r\n\r\n  EOL: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    writable: false,\r\n    value: isWindows ? '\\r\\n' : '\\n',\r\n  },\r\n\r\n  devNull: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    writable: false,\r\n    value: isWindows ? '\\\\\\\\.\\\\nul' : '/dev/null',\r\n  },\r\n});\r\n"
  },
  "184": {
    "metadata": {
      "scriptId": "184",
      "url": "node:path/posix",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 3,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "2664c97c0df8634dc4e4f424b8356050d9074f10081241e78185babcc085769d",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 58,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:path/posix"
    },
    "source": "'use strict';\r\n\r\nmodule.exports = require('path').posix;\r\n"
  },
  "185": {
    "metadata": {
      "scriptId": "185",
      "url": "node:path/win32",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 3,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "f16d906bb56192cd1091af071075cde70bff7ffd132e94beda3395b7d520380f",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 58,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:path/win32"
    },
    "source": "'use strict';\r\n\r\nmodule.exports = require('path').win32;\r\n"
  },
  "186": {
    "metadata": {
      "scriptId": "186",
      "url": "node:perf_hooks",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 50,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "71e71634b5f26ed1cdcb8ba0e57fc43e11faa8575a24b90dda90452258da96f8",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1115,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:perf_hooks"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperty,\r\n} = primordials;\r\n\r\nconst {\r\n  constants,\r\n} = internalBinding('performance');\r\n\r\nconst { PerformanceEntry } = require('internal/perf/performance_entry');\r\nconst { PerformanceResourceTiming } = require('internal/perf/resource_timing');\r\nconst {\r\n  PerformanceObserver,\r\n  PerformanceObserverEntryList,\r\n} = require('internal/perf/observe');\r\nconst {\r\n  PerformanceMark,\r\n  PerformanceMeasure,\r\n} = require('internal/perf/usertiming');\r\nconst {\r\n  Performance,\r\n  performance,\r\n} = require('internal/perf/performance');\r\n\r\nconst {\r\n  createHistogram,\r\n} = require('internal/histogram');\r\n\r\nconst monitorEventLoopDelay = require('internal/perf/event_loop_delay');\r\n\r\nmodule.exports = {\r\n  Performance,\r\n  PerformanceEntry,\r\n  PerformanceMark,\r\n  PerformanceMeasure,\r\n  PerformanceObserver,\r\n  PerformanceObserverEntryList,\r\n  PerformanceResourceTiming,\r\n  monitorEventLoopDelay,\r\n  createHistogram,\r\n  performance,\r\n};\r\n\r\nObjectDefineProperty(module.exports, 'constants', {\r\n  __proto__: null,\r\n  configurable: false,\r\n  enumerable: true,\r\n  value: constants,\r\n});\r\n"
  },
  "187": {
    "metadata": {
      "scriptId": "187",
      "url": "node:internal/perf/resource_timing",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 267,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "610b23d69d6a4a0af12ef1acb8dbde7ae486101d222f1c31763bba473090cd84",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 8490,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/perf/resource_timing"
    },
    "source": "'use strict';\r\n// https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming\r\n\r\nconst {\r\n  ObjectDefineProperties,\r\n  Symbol,\r\n  SymbolToStringTag,\r\n} = primordials;\r\nconst {\r\n  codes: {\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n  },\r\n} = require('internal/errors');\r\nconst { PerformanceEntry, kSkipThrow } = require('internal/perf/performance_entry');\r\nconst assert = require('internal/assert');\r\nconst { enqueue, bufferResourceTiming } = require('internal/perf/observe');\r\nconst { validateInternalField } = require('internal/validators');\r\nconst { kEnumerableProperty } = require('internal/util');\r\n\r\nconst kCacheMode = Symbol('kCacheMode');\r\nconst kRequestedUrl = Symbol('kRequestedUrl');\r\nconst kTimingInfo = Symbol('kTimingInfo');\r\nconst kInitiatorType = Symbol('kInitiatorType');\r\nconst kDeliveryType = Symbol('kDeliveryType');\r\nconst kResponseStatus = Symbol('kResponseStatus');\r\n\r\nclass PerformanceResourceTiming extends PerformanceEntry {\r\n  constructor(skipThrowSymbol = undefined, name = undefined, type = undefined) {\r\n    if (skipThrowSymbol !== kSkipThrow) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n\r\n    super(skipThrowSymbol, name, type);\r\n  }\r\n\r\n  get name() {\r\n    validateInternalField(this, kRequestedUrl, 'PerformanceResourceTiming');\r\n    return this[kRequestedUrl];\r\n  }\r\n\r\n  get startTime() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].startTime;\r\n  }\r\n\r\n  get duration() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].endTime - this[kTimingInfo].startTime;\r\n  }\r\n\r\n  get initiatorType() {\r\n    validateInternalField(this, kInitiatorType, 'PerformanceResourceTiming');\r\n    return this[kInitiatorType];\r\n  }\r\n\r\n  get workerStart() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].finalServiceWorkerStartTime;\r\n  }\r\n\r\n  get redirectStart() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].redirectStartTime;\r\n  }\r\n\r\n  get redirectEnd() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].redirectEndTime;\r\n  }\r\n\r\n  get fetchStart() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].postRedirectStartTime;\r\n  }\r\n\r\n  get domainLookupStart() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].finalConnectionTimingInfo?.domainLookupStartTime;\r\n  }\r\n\r\n  get domainLookupEnd() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].finalConnectionTimingInfo?.domainLookupEndTime;\r\n  }\r\n\r\n  get connectStart() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].finalConnectionTimingInfo?.connectionStartTime;\r\n  }\r\n\r\n  get connectEnd() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].finalConnectionTimingInfo?.connectionEndTime;\r\n  }\r\n\r\n  get secureConnectionStart() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo]\r\n      .finalConnectionTimingInfo?.secureConnectionStartTime;\r\n  }\r\n\r\n  get nextHopProtocol() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo]\r\n      .finalConnectionTimingInfo?.ALPNNegotiatedProtocol;\r\n  }\r\n\r\n  get requestStart() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].finalNetworkRequestStartTime;\r\n  }\r\n\r\n  get responseStart() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].finalNetworkResponseStartTime;\r\n  }\r\n\r\n  get responseEnd() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].endTime;\r\n  }\r\n\r\n  get encodedBodySize() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].encodedBodySize;\r\n  }\r\n\r\n  get decodedBodySize() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kTimingInfo].decodedBodySize;\r\n  }\r\n\r\n  get transferSize() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    if (this[kCacheMode] === 'local') return 0;\r\n    if (this[kCacheMode] === 'validated') return 300;\r\n\r\n    return this[kTimingInfo].encodedBodySize + 300;\r\n  }\r\n\r\n  get deliveryType() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kDeliveryType];\r\n  }\r\n\r\n  get responseStatus() {\r\n    validateInternalField(this, kTimingInfo, 'PerformanceResourceTiming');\r\n    return this[kResponseStatus];\r\n  }\r\n\r\n  toJSON() {\r\n    validateInternalField(this, kInitiatorType, 'PerformanceResourceTiming');\r\n    return {\r\n      name: this.name,\r\n      entryType: this.entryType,\r\n      startTime: this.startTime,\r\n      duration: this.duration,\r\n      initiatorType: this[kInitiatorType],\r\n      nextHopProtocol: this.nextHopProtocol,\r\n      workerStart: this.workerStart,\r\n      redirectStart: this.redirectStart,\r\n      redirectEnd: this.redirectEnd,\r\n      fetchStart: this.fetchStart,\r\n      domainLookupStart: this.domainLookupStart,\r\n      domainLookupEnd: this.domainLookupEnd,\r\n      connectStart: this.connectStart,\r\n      connectEnd: this.connectEnd,\r\n      secureConnectionStart: this.secureConnectionStart,\r\n      requestStart: this.requestStart,\r\n      responseStart: this.responseStart,\r\n      responseEnd: this.responseEnd,\r\n      transferSize: this.transferSize,\r\n      encodedBodySize: this.encodedBodySize,\r\n      decodedBodySize: this.decodedBodySize,\r\n      deliveryType: this.deliveryType,\r\n      responseStatus: this.responseStatus,\r\n    };\r\n  }\r\n}\r\n\r\nObjectDefineProperties(PerformanceResourceTiming.prototype, {\r\n  initiatorType: kEnumerableProperty,\r\n  nextHopProtocol: kEnumerableProperty,\r\n  workerStart: kEnumerableProperty,\r\n  redirectStart: kEnumerableProperty,\r\n  redirectEnd: kEnumerableProperty,\r\n  fetchStart: kEnumerableProperty,\r\n  domainLookupStart: kEnumerableProperty,\r\n  domainLookupEnd: kEnumerableProperty,\r\n  connectStart: kEnumerableProperty,\r\n  connectEnd: kEnumerableProperty,\r\n  secureConnectionStart: kEnumerableProperty,\r\n  requestStart: kEnumerableProperty,\r\n  responseStart: kEnumerableProperty,\r\n  responseEnd: kEnumerableProperty,\r\n  transferSize: kEnumerableProperty,\r\n  encodedBodySize: kEnumerableProperty,\r\n  decodedBodySize: kEnumerableProperty,\r\n  deliveryType: kEnumerableProperty,\r\n  responseStatus: kEnumerableProperty,\r\n  toJSON: kEnumerableProperty,\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value: 'PerformanceResourceTiming',\r\n  },\r\n});\r\n\r\nfunction createPerformanceResourceTiming(\r\n  requestedUrl,\r\n  initiatorType,\r\n  timingInfo,\r\n  cacheMode = '',\r\n  bodyInfo,\r\n  responseStatus,\r\n  deliveryType,\r\n) {\r\n  const resourceTiming = new PerformanceResourceTiming(kSkipThrow, requestedUrl, 'resource');\r\n\r\n  resourceTiming[kInitiatorType] = initiatorType;\r\n  resourceTiming[kRequestedUrl] = requestedUrl;\r\n  // https://fetch.spec.whatwg.org/#fetch-timing-info\r\n  // This class is using timingInfo assuming it's already validated.\r\n  // The spec doesn't say to validate it in the class construction.\r\n  resourceTiming[kTimingInfo] = timingInfo;\r\n  resourceTiming[kCacheMode] = cacheMode;\r\n  resourceTiming[kDeliveryType] = deliveryType;\r\n  resourceTiming[kResponseStatus] = responseStatus;\r\n\r\n  return resourceTiming;\r\n}\r\n\r\n// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing\r\nfunction markResourceTiming(\r\n  timingInfo,\r\n  requestedUrl,\r\n  initiatorType,\r\n  global,\r\n  cacheMode,\r\n  bodyInfo,\r\n  responseStatus,\r\n  deliveryType = '',\r\n) {\r\n  // https://w3c.github.io/resource-timing/#dfn-setup-the-resource-timing-entry\r\n  assert(\r\n    cacheMode === '' || cacheMode === 'local',\r\n    'cache must be an empty string or \\'local\\'',\r\n  );\r\n  const resource = createPerformanceResourceTiming(\r\n    requestedUrl,\r\n    initiatorType,\r\n    timingInfo,\r\n    cacheMode,\r\n    bodyInfo,\r\n    responseStatus,\r\n    deliveryType,\r\n  );\r\n\r\n  enqueue(resource);\r\n  bufferResourceTiming(resource);\r\n  return resource;\r\n}\r\n\r\nmodule.exports = {\r\n  PerformanceResourceTiming,\r\n  markResourceTiming,\r\n};\r\n"
  },
  "188": {
    "metadata": {
      "scriptId": "188",
      "url": "node:internal/perf/usertiming",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 246,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "923b8290d10efc15db3eb8d78d4538857043fefb018f910ad14db16dded43160",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 6505,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/perf/usertiming"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperties,\r\n  SafeArrayIterator,\r\n  SafeMap,\r\n  SafeSet,\r\n  Symbol,\r\n  SymbolToStringTag,\r\n} = primordials;\r\n\r\nconst { PerformanceEntry, kSkipThrow } = require('internal/perf/performance_entry');\r\nconst { now } = require('internal/perf/utils');\r\nconst { enqueue, bufferUserTiming } = require('internal/perf/observe');\r\nconst nodeTiming = require('internal/perf/nodetiming');\r\n\r\nconst {\r\n  validateNumber,\r\n  validateObject,\r\n  validateString,\r\n  validateInternalField,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_MISSING_ARGS,\r\n    ERR_PERFORMANCE_INVALID_TIMESTAMP,\r\n    ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst { structuredClone } = internalBinding('messaging');\r\nconst {\r\n  lazyDOMException,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\n\r\nconst kDetail = Symbol('kDetail');\r\n\r\nconst markTimings = new SafeMap();\r\n\r\nconst nodeTimingReadOnlyAttributes = new SafeSet(new SafeArrayIterator([\r\n  'nodeStart',\r\n  'v8Start',\r\n  'environment',\r\n  'loopStart',\r\n  'loopExit',\r\n  'bootstrapComplete',\r\n]));\r\n\r\nfunction getMark(name) {\r\n  if (name === undefined) return;\r\n  if (typeof name === 'number') {\r\n    if (name < 0)\r\n      throw new ERR_PERFORMANCE_INVALID_TIMESTAMP(name);\r\n    return name;\r\n  }\r\n  name = `${name}`;\r\n  if (nodeTimingReadOnlyAttributes.has(name))\r\n    return nodeTiming[name];\r\n  const ts = markTimings.get(name);\r\n  if (ts === undefined)\r\n    throw lazyDOMException(`The \"${name}\" performance mark has not been set`, 'SyntaxError');\r\n  return ts;\r\n}\r\n\r\nclass PerformanceMark extends PerformanceEntry {\r\n  constructor(name, options = undefined) {\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n    name = `${name}`;\r\n    if (nodeTimingReadOnlyAttributes.has(name))\r\n      throw new ERR_INVALID_ARG_VALUE('name', name);\r\n    if (options != null) {\r\n      validateObject(options, 'options');\r\n    }\r\n    const startTime = options?.startTime ?? now();\r\n    validateNumber(startTime, 'startTime');\r\n    if (startTime < 0)\r\n      throw new ERR_PERFORMANCE_INVALID_TIMESTAMP(startTime);\r\n    markTimings.set(name, startTime);\r\n\r\n    let detail = options?.detail;\r\n    detail = detail != null ?\r\n      structuredClone(detail) :\r\n      null;\r\n\r\n    super(kSkipThrow, name, 'mark', startTime, 0);\r\n    this[kDetail] = detail;\r\n  }\r\n\r\n  get detail() {\r\n    validateInternalField(this, kDetail, 'PerformanceMark');\r\n    return this[kDetail];\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      name: this.name,\r\n      entryType: this.entryType,\r\n      startTime: this.startTime,\r\n      duration: this.duration,\r\n      detail: this[kDetail],\r\n    };\r\n  }\r\n}\r\n\r\nObjectDefineProperties(PerformanceMark.prototype, {\r\n  detail: kEnumerableProperty,\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value: 'PerformanceMark',\r\n  },\r\n});\r\n\r\nclass PerformanceMeasure extends PerformanceEntry {\r\n  constructor(\r\n    skipThrowSymbol = undefined,\r\n    name = undefined,\r\n    type = undefined,\r\n    start = undefined,\r\n    duration = undefined,\r\n  ) {\r\n    if (skipThrowSymbol !== kSkipThrow) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n\r\n    super(skipThrowSymbol, name, type, start, duration);\r\n  }\r\n\r\n  get detail() {\r\n    validateInternalField(this, kDetail, 'PerformanceMeasure');\r\n    return this[kDetail];\r\n  }\r\n}\r\nObjectDefineProperties(PerformanceMeasure.prototype, {\r\n  detail: kEnumerableProperty,\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value: 'PerformanceMeasure',\r\n  },\r\n});\r\n\r\nfunction createPerformanceMeasure(name, start, duration, detail) {\r\n  const measure = new PerformanceMeasure(kSkipThrow, name, 'measure', start, duration);\r\n\r\n  measure[kDetail] = detail;\r\n\r\n  return measure;\r\n}\r\n\r\nfunction mark(name, options) {\r\n  const mark = new PerformanceMark(name, options);\r\n  enqueue(mark);\r\n  bufferUserTiming(mark);\r\n  return mark;\r\n}\r\n\r\nfunction calculateStartDuration(startOrMeasureOptions, endMark) {\r\n  startOrMeasureOptions ??= 0;\r\n  let start;\r\n  let end;\r\n  let duration;\r\n  let optionsValid = false;\r\n  if (typeof startOrMeasureOptions === 'object') {\r\n    ({ start, end, duration } = startOrMeasureOptions);\r\n    optionsValid = start !== undefined || end !== undefined;\r\n  }\r\n  if (optionsValid) {\r\n    if (endMark !== undefined) {\r\n      throw new ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS(\r\n        'endMark must not be specified');\r\n    }\r\n\r\n    if (start === undefined && end === undefined) {\r\n      throw new ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS(\r\n        'One of options.start or options.end is required');\r\n    }\r\n    if (start !== undefined && end !== undefined && duration !== undefined) {\r\n      throw new ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS(\r\n        'Must not have options.start, options.end, and ' +\r\n        'options.duration specified');\r\n    }\r\n  }\r\n\r\n  if (endMark !== undefined) {\r\n    end = getMark(endMark);\r\n  } else if (optionsValid && end !== undefined) {\r\n    end = getMark(end);\r\n  } else if (optionsValid && start !== undefined && duration !== undefined) {\r\n    end = getMark(start) + getMark(duration);\r\n  } else {\r\n    end = now();\r\n  }\r\n\r\n  if (typeof startOrMeasureOptions === 'string') {\r\n    start = getMark(startOrMeasureOptions);\r\n  } else if (optionsValid && start !== undefined) {\r\n    start = getMark(start);\r\n  } else if (optionsValid && duration !== undefined && end !== undefined) {\r\n    start = end - getMark(duration);\r\n  } else {\r\n    start = 0;\r\n  }\r\n\r\n  duration = end - start;\r\n  return { start, duration };\r\n}\r\n\r\nfunction measure(name, startOrMeasureOptions, endMark) {\r\n  validateString(name, 'name');\r\n  const {\r\n    start,\r\n    duration,\r\n  } = calculateStartDuration(startOrMeasureOptions, endMark);\r\n  let detail = startOrMeasureOptions?.detail;\r\n  detail = detail != null ? structuredClone(detail) : null;\r\n  const measure = createPerformanceMeasure(name, start, duration, detail);\r\n  enqueue(measure);\r\n  bufferUserTiming(measure);\r\n  return measure;\r\n}\r\n\r\nfunction clearMarkTimings(name) {\r\n  if (name !== undefined) {\r\n    name = `${name}`;\r\n    if (nodeTimingReadOnlyAttributes.has(name))\r\n      throw new ERR_INVALID_ARG_VALUE('name', name);\r\n    markTimings.delete(name);\r\n    return;\r\n  }\r\n  markTimings.clear();\r\n}\r\n\r\nmodule.exports = {\r\n  PerformanceMark,\r\n  PerformanceMeasure,\r\n  clearMarkTimings,\r\n  mark,\r\n  measure,\r\n};\r\n"
  },
  "189": {
    "metadata": {
      "scriptId": "189",
      "url": "node:internal/perf/nodetiming",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 160,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "6ea59684a8a0118c4b9fe25dcd65ed6de29e8cbd19b325398e453ca83ec91f68",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3676,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/perf/nodetiming"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperties,\r\n  ObjectSetPrototypeOf,\r\n} = primordials;\r\n\r\nconst { PerformanceEntry } = require('internal/perf/performance_entry');\r\n\r\nconst {\r\n  now,\r\n  getMilestoneTimestamp,\r\n} = require('internal/perf/utils');\r\n\r\nconst {\r\n  customInspectSymbol: kInspect,\r\n} = require('internal/util');\r\n\r\nconst { inspect } = require('util');\r\n\r\nconst {\r\n  constants: {\r\n    NODE_PERFORMANCE_MILESTONE_NODE_START,\r\n    NODE_PERFORMANCE_MILESTONE_V8_START,\r\n    NODE_PERFORMANCE_MILESTONE_LOOP_START,\r\n    NODE_PERFORMANCE_MILESTONE_LOOP_EXIT,\r\n    NODE_PERFORMANCE_MILESTONE_BOOTSTRAP_COMPLETE,\r\n    NODE_PERFORMANCE_MILESTONE_ENVIRONMENT,\r\n  },\r\n  loopIdleTime,\r\n} = internalBinding('performance');\r\n\r\nclass PerformanceNodeTiming {\r\n  constructor() {\r\n    ObjectDefineProperties(this, {\r\n      name: {\r\n        __proto__: null,\r\n        enumerable: true,\r\n        configurable: true,\r\n        value: 'node',\r\n      },\r\n\r\n      entryType: {\r\n        __proto__: null,\r\n        enumerable: true,\r\n        configurable: true,\r\n        value: 'node',\r\n      },\r\n\r\n      startTime: {\r\n        __proto__: null,\r\n        enumerable: true,\r\n        configurable: true,\r\n        value: 0,\r\n      },\r\n\r\n      duration: {\r\n        __proto__: null,\r\n        enumerable: true,\r\n        configurable: true,\r\n        get: now,\r\n      },\r\n\r\n      nodeStart: {\r\n        __proto__: null,\r\n        enumerable: true,\r\n        configurable: true,\r\n        get() {\r\n          return getMilestoneTimestamp(NODE_PERFORMANCE_MILESTONE_NODE_START);\r\n        },\r\n      },\r\n\r\n      v8Start: {\r\n        __proto__: null,\r\n        enumerable: true,\r\n        configurable: true,\r\n        get() {\r\n          return getMilestoneTimestamp(NODE_PERFORMANCE_MILESTONE_V8_START);\r\n        },\r\n      },\r\n\r\n      environment: {\r\n        __proto__: null,\r\n        enumerable: true,\r\n        configurable: true,\r\n        get() {\r\n          return getMilestoneTimestamp(NODE_PERFORMANCE_MILESTONE_ENVIRONMENT);\r\n        },\r\n      },\r\n\r\n      loopStart: {\r\n        __proto__: null,\r\n        enumerable: true,\r\n        configurable: true,\r\n        get() {\r\n          return getMilestoneTimestamp(NODE_PERFORMANCE_MILESTONE_LOOP_START);\r\n        },\r\n      },\r\n\r\n      loopExit: {\r\n        __proto__: null,\r\n        enumerable: true,\r\n        configurable: true,\r\n        get() {\r\n          return getMilestoneTimestamp(NODE_PERFORMANCE_MILESTONE_LOOP_EXIT);\r\n        },\r\n      },\r\n\r\n      bootstrapComplete: {\r\n        __proto__: null,\r\n        enumerable: true,\r\n        configurable: true,\r\n        get() {\r\n          return getMilestoneTimestamp(\r\n            NODE_PERFORMANCE_MILESTONE_BOOTSTRAP_COMPLETE);\r\n        },\r\n      },\r\n\r\n      idleTime: {\r\n        __proto__: null,\r\n        enumerable: true,\r\n        configurable: true,\r\n        get: loopIdleTime,\r\n      },\r\n    });\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (depth < 0) return this;\r\n\r\n    const opts = {\r\n      ...options,\r\n      depth: options.depth == null ? null : options.depth - 1,\r\n    };\r\n\r\n    return `PerformanceNodeTiming ${inspect(this.toJSON(), opts)}`;\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      name: 'node',\r\n      entryType: 'node',\r\n      startTime: this.startTime,\r\n      duration: this.duration,\r\n      nodeStart: this.nodeStart,\r\n      v8Start: this.v8Start,\r\n      bootstrapComplete: this.bootstrapComplete,\r\n      environment: this.environment,\r\n      loopStart: this.loopStart,\r\n      loopExit: this.loopExit,\r\n      idleTime: this.idleTime,\r\n    };\r\n  }\r\n}\r\n\r\nObjectSetPrototypeOf(\r\n  PerformanceNodeTiming.prototype,\r\n  PerformanceEntry.prototype);\r\n\r\nmodule.exports = new PerformanceNodeTiming();\r\n"
  },
  "190": {
    "metadata": {
      "scriptId": "190",
      "url": "node:internal/perf/performance",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 243,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "0d41e2d695137b60cd75e12ff50e36e8e955be768473d520f2db0d30cceffd8b",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 6561,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/perf/performance"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperties,\r\n  ReflectConstruct,\r\n  Symbol,\r\n  SymbolToStringTag,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n    ERR_MISSING_ARGS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  EventTarget,\r\n  Event,\r\n  kTrustEvent,\r\n  initEventTarget,\r\n  defineEventHandler,\r\n} = require('internal/event_target');\r\n\r\nconst { now, getTimeOriginTimestamp } = require('internal/perf/utils');\r\n\r\nconst { markResourceTiming } = require('internal/perf/resource_timing');\r\n\r\nconst {\r\n  mark,\r\n  measure,\r\n  clearMarkTimings,\r\n} = require('internal/perf/usertiming');\r\nconst {\r\n  clearEntriesFromBuffer,\r\n  filterBufferMapByNameAndType,\r\n  setResourceTimingBufferSize,\r\n  setDispatchBufferFull,\r\n} = require('internal/perf/observe');\r\n\r\nconst { eventLoopUtilization } = require('internal/perf/event_loop_utilization');\r\nconst nodeTiming = require('internal/perf/nodetiming');\r\nconst timerify = require('internal/perf/timerify');\r\nconst { customInspectSymbol: kInspect, kEnumerableProperty, kEmptyObject } = require('internal/util');\r\nconst { inspect } = require('util');\r\nconst { validateInternalField } = require('internal/validators');\r\nconst { convertToInt } = require('internal/webidl');\r\n\r\nconst kPerformanceBrand = Symbol('performance');\r\n\r\nclass Performance extends EventTarget {\r\n  constructor() {\r\n    throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (depth < 0) return this;\r\n\r\n    const opts = {\r\n      ...options,\r\n      depth: options.depth == null ? null : options.depth - 1,\r\n    };\r\n\r\n    return `Performance ${inspect({\r\n      nodeTiming: this.nodeTiming,\r\n      timeOrigin: this.timeOrigin,\r\n    }, opts)}`;\r\n  }\r\n\r\n  clearMarks(name = undefined) {\r\n    validateInternalField(this, kPerformanceBrand, 'Performance');\r\n    if (name !== undefined) {\r\n      name = `${name}`;\r\n    }\r\n    clearMarkTimings(name);\r\n    clearEntriesFromBuffer('mark', name);\r\n  }\r\n\r\n  clearMeasures(name = undefined) {\r\n    validateInternalField(this, kPerformanceBrand, 'Performance');\r\n    if (name !== undefined) {\r\n      name = `${name}`;\r\n    }\r\n    clearEntriesFromBuffer('measure', name);\r\n  }\r\n\r\n  clearResourceTimings(name = undefined) {\r\n    validateInternalField(this, kPerformanceBrand, 'Performance');\r\n    if (name !== undefined) {\r\n      name = `${name}`;\r\n    }\r\n    clearEntriesFromBuffer('resource', name);\r\n  }\r\n\r\n  getEntries() {\r\n    validateInternalField(this, kPerformanceBrand, 'Performance');\r\n    return filterBufferMapByNameAndType();\r\n  }\r\n\r\n  getEntriesByName(name) {\r\n    validateInternalField(this, kPerformanceBrand, 'Performance');\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n    name = `${name}`;\r\n    return filterBufferMapByNameAndType(name, undefined);\r\n  }\r\n\r\n  getEntriesByType(type) {\r\n    validateInternalField(this, kPerformanceBrand, 'Performance');\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('type');\r\n    }\r\n    type = `${type}`;\r\n    return filterBufferMapByNameAndType(undefined, type);\r\n  }\r\n\r\n  mark(name, options = kEmptyObject) {\r\n    validateInternalField(this, kPerformanceBrand, 'Performance');\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n    return mark(name, options);\r\n  }\r\n\r\n  measure(name, startOrMeasureOptions = kEmptyObject, endMark = undefined) {\r\n    validateInternalField(this, kPerformanceBrand, 'Performance');\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n    return measure(name, startOrMeasureOptions, endMark);\r\n  }\r\n\r\n  now() {\r\n    validateInternalField(this, kPerformanceBrand, 'Performance');\r\n    return now();\r\n  }\r\n\r\n  setResourceTimingBufferSize(maxSize) {\r\n    validateInternalField(this, kPerformanceBrand, 'Performance');\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('maxSize');\r\n    }\r\n    // unsigned long\r\n    maxSize = convertToInt('maxSize', maxSize, 32);\r\n    return setResourceTimingBufferSize(maxSize);\r\n  }\r\n\r\n  get timeOrigin() {\r\n    validateInternalField(this, kPerformanceBrand, 'Performance');\r\n    return getTimeOriginTimestamp();\r\n  }\r\n\r\n  toJSON() {\r\n    validateInternalField(this, kPerformanceBrand, 'Performance');\r\n    return {\r\n      nodeTiming: this.nodeTiming,\r\n      timeOrigin: this.timeOrigin,\r\n      eventLoopUtilization: this.eventLoopUtilization(),\r\n    };\r\n  }\r\n}\r\n\r\nObjectDefineProperties(Performance.prototype, {\r\n  clearMarks: kEnumerableProperty,\r\n  clearMeasures: kEnumerableProperty,\r\n  clearResourceTimings: kEnumerableProperty,\r\n  getEntries: kEnumerableProperty,\r\n  getEntriesByName: kEnumerableProperty,\r\n  getEntriesByType: kEnumerableProperty,\r\n  mark: kEnumerableProperty,\r\n  measure: kEnumerableProperty,\r\n  now: kEnumerableProperty,\r\n  timeOrigin: kEnumerableProperty,\r\n  toJSON: kEnumerableProperty,\r\n  setResourceTimingBufferSize: kEnumerableProperty,\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    writable: false,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: 'Performance',\r\n  },\r\n\r\n  // Node.js specific extensions.\r\n  eventLoopUtilization: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    // Node.js specific extensions.\r\n    enumerable: false,\r\n    writable: true,\r\n    value: eventLoopUtilization,\r\n  },\r\n  nodeTiming: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    // Node.js specific extensions.\r\n    enumerable: false,\r\n    writable: true,\r\n    value: nodeTiming,\r\n  },\r\n  // In the browser, this function is not public.  However, it must be used inside fetch\r\n  // which is a Node.js dependency, not a internal module\r\n  markResourceTiming: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    // Node.js specific extensions.\r\n    enumerable: false,\r\n    writable: true,\r\n    value: markResourceTiming,\r\n  },\r\n  timerify: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    // Node.js specific extensions.\r\n    enumerable: false,\r\n    writable: true,\r\n    value: timerify,\r\n  },\r\n});\r\ndefineEventHandler(Performance.prototype, 'resourcetimingbufferfull');\r\n\r\nfunction createPerformance() {\r\n  return ReflectConstruct(function Performance() {\r\n    initEventTarget(this);\r\n    this[kPerformanceBrand] = true;\r\n  }, [], Performance);\r\n}\r\n\r\nconst performance = createPerformance();\r\n\r\nfunction dispatchBufferFull(type) {\r\n  const event = new Event(type, {\r\n    [kTrustEvent]: true,\r\n  });\r\n  performance.dispatchEvent(event);\r\n}\r\nsetDispatchBufferFull(dispatchBufferFull);\r\n\r\nmodule.exports = {\r\n  Performance,\r\n  performance,\r\n};\r\n"
  },
  "191": {
    "metadata": {
      "scriptId": "191",
      "url": "node:internal/perf/timerify",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 109,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "b885926bcfc13d56f32afba404708a9b0b5efd1392c5f4206cf5459a00bdeba4",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2389,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/perf/timerify"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeBind,\r\n  MathCeil,\r\n  ObjectDefineProperties,\r\n  ReflectApply,\r\n  ReflectConstruct,\r\n} = primordials;\r\n\r\nconst { createPerformanceNodeEntry } = require('internal/perf/performance_entry');\r\nconst { now } = require('internal/perf/utils');\r\n\r\nconst {\r\n  validateFunction,\r\n  validateObject,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  isHistogram,\r\n} = require('internal/histogram');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  enqueue,\r\n} = require('internal/perf/observe');\r\n\r\nconst {\r\n  kEmptyObject,\r\n} = require('internal/util');\r\n\r\nfunction processComplete(name, start, args, histogram) {\r\n  const duration = now() - start;\r\n  if (histogram !== undefined)\r\n    histogram.record(MathCeil(duration * 1e6));\r\n  const entry =\r\n    createPerformanceNodeEntry(\r\n      name,\r\n      'function',\r\n      start,\r\n      duration,\r\n      args);\r\n\r\n  for (let n = 0; n < args.length; n++)\r\n    entry[n] = args[n];\r\n\r\n  enqueue(entry);\r\n}\r\n\r\nfunction timerify(fn, options = kEmptyObject) {\r\n  validateFunction(fn, 'fn');\r\n\r\n  validateObject(options, 'options');\r\n  const {\r\n    histogram,\r\n  } = options;\r\n\r\n  if (histogram !== undefined &&\r\n      (!isHistogram(histogram) || typeof histogram.record !== 'function')) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'options.histogram',\r\n      'RecordableHistogram',\r\n      histogram);\r\n  }\r\n\r\n  function timerified(...args) {\r\n    const isConstructorCall = new.target !== undefined;\r\n    const start = now();\r\n    const result = isConstructorCall ?\r\n      ReflectConstruct(fn, args, fn) :\r\n      ReflectApply(fn, this, args);\r\n    if (!isConstructorCall && typeof result?.finally === 'function') {\r\n      return result.finally(\r\n        FunctionPrototypeBind(\r\n          processComplete,\r\n          result,\r\n          fn.name,\r\n          start,\r\n          args,\r\n          histogram));\r\n    }\r\n    processComplete(fn.name, start, args, histogram);\r\n    return result;\r\n  }\r\n\r\n  ObjectDefineProperties(timerified, {\r\n    length: {\r\n      __proto__: null,\r\n      configurable: false,\r\n      enumerable: true,\r\n      value: fn.length,\r\n    },\r\n    name: {\r\n      __proto__: null,\r\n      configurable: false,\r\n      enumerable: true,\r\n      value: `timerified ${fn.name}`,\r\n    },\r\n  });\r\n\r\n  return timerified;\r\n}\r\n\r\nmodule.exports = timerify;\r\n"
  },
  "192": {
    "metadata": {
      "scriptId": "192",
      "url": "node:internal/histogram",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 395,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "1c2babd72898dfa8531681ea7578c2438d5f349a5a0e9431bbb9143c5ecf9bb6",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 8862,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/histogram"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  MapPrototypeEntries,\r\n  NumberIsNaN,\r\n  NumberMAX_SAFE_INTEGER,\r\n  ObjectFromEntries,\r\n  ReflectConstruct,\r\n  SafeMap,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  Histogram: _Histogram,\r\n} = internalBinding('performance');\r\n\r\nconst {\r\n  customInspectSymbol: kInspect,\r\n  kEmptyObject,\r\n} = require('internal/util');\r\n\r\nconst { inspect } = require('util');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_THIS,\r\n    ERR_OUT_OF_RANGE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateInteger,\r\n  validateNumber,\r\n  validateObject,\r\n} = require('internal/validators');\r\n\r\nconst kDestroy = Symbol('kDestroy');\r\nconst kHandle = Symbol('kHandle');\r\nconst kMap = Symbol('kMap');\r\nconst kRecordable = Symbol('kRecordable');\r\n\r\nconst {\r\n  kClone,\r\n  kDeserialize,\r\n  markTransferMode,\r\n} = require('internal/worker/js_transferable');\r\n\r\nfunction isHistogram(object) {\r\n  return object?.[kHandle] !== undefined;\r\n}\r\n\r\nconst kSkipThrow = Symbol('kSkipThrow');\r\n\r\nclass Histogram {\r\n  constructor(skipThrowSymbol = undefined) {\r\n    if (skipThrowSymbol !== kSkipThrow) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (depth < 0)\r\n      return this;\r\n\r\n    const opts = {\r\n      ...options,\r\n      depth: options.depth == null ? null : options.depth - 1,\r\n    };\r\n\r\n    return `Histogram ${inspect({\r\n      min: this.min,\r\n      max: this.max,\r\n      mean: this.mean,\r\n      exceeds: this.exceeds,\r\n      stddev: this.stddev,\r\n      count: this.count,\r\n      percentiles: this.percentiles,\r\n    }, opts)}`;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get count() {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    return this[kHandle]?.count();\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {bigint}\r\n   */\r\n  get countBigInt() {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    return this[kHandle]?.countBigInt();\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get min() {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    return this[kHandle]?.min();\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {bigint}\r\n   */\r\n  get minBigInt() {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    return this[kHandle]?.minBigInt();\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get max() {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    return this[kHandle]?.max();\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {bigint}\r\n   */\r\n  get maxBigInt() {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    return this[kHandle]?.maxBigInt();\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get mean() {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    return this[kHandle]?.mean();\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get exceeds() {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    return this[kHandle]?.exceeds();\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {bigint}\r\n   */\r\n  get exceedsBigInt() {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    return this[kHandle]?.exceedsBigInt();\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get stddev() {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    return this[kHandle]?.stddev();\r\n  }\r\n\r\n  /**\r\n   * @param {number} percentile\r\n   * @returns {number}\r\n   */\r\n  percentile(percentile) {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    validateNumber(percentile, 'percentile');\r\n    if (NumberIsNaN(percentile) || percentile <= 0 || percentile > 100)\r\n      throw new ERR_OUT_OF_RANGE('percentile', '> 0 && <= 100', percentile);\r\n\r\n    return this[kHandle]?.percentile(percentile);\r\n  }\r\n\r\n  /**\r\n   * @param {number} percentile\r\n   * @returns {bigint}\r\n   */\r\n  percentileBigInt(percentile) {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    validateNumber(percentile, 'percentile');\r\n    if (NumberIsNaN(percentile) || percentile <= 0 || percentile > 100)\r\n      throw new ERR_OUT_OF_RANGE('percentile', '> 0 && <= 100', percentile);\r\n\r\n    return this[kHandle]?.percentileBigInt(percentile);\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {Map<number,number>}\r\n   */\r\n  get percentiles() {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    this[kMap].clear();\r\n    this[kHandle]?.percentiles(this[kMap]);\r\n    return this[kMap];\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {Map<number,bigint>}\r\n   */\r\n  get percentilesBigInt() {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    this[kMap].clear();\r\n    this[kHandle]?.percentilesBigInt(this[kMap]);\r\n    return this[kMap];\r\n  }\r\n\r\n  /**\r\n   * @returns {void}\r\n   */\r\n  reset() {\r\n    if (!isHistogram(this))\r\n      throw new ERR_INVALID_THIS('Histogram');\r\n    this[kHandle]?.reset();\r\n  }\r\n\r\n  [kClone]() {\r\n    const handle = this[kHandle];\r\n    return {\r\n      data: { handle },\r\n      deserializeInfo: 'internal/histogram:ClonedHistogram',\r\n    };\r\n  }\r\n\r\n  [kDeserialize]({ handle }) {\r\n    this[kHandle] = handle;\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      count: this.count,\r\n      min: this.min,\r\n      max: this.max,\r\n      mean: this.mean,\r\n      exceeds: this.exceeds,\r\n      stddev: this.stddev,\r\n      percentiles: ObjectFromEntries(MapPrototypeEntries(this.percentiles)),\r\n    };\r\n  }\r\n}\r\n\r\nclass RecordableHistogram extends Histogram {\r\n  constructor(skipThrowSymbol = undefined) {\r\n    if (skipThrowSymbol !== kSkipThrow) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n\r\n    super(skipThrowSymbol);\r\n  }\r\n\r\n  /**\r\n   * @param {number|bigint} val\r\n   * @returns {void}\r\n   */\r\n  record(val) {\r\n    if (this[kRecordable] === undefined)\r\n      throw new ERR_INVALID_THIS('RecordableHistogram');\r\n    if (typeof val === 'bigint') {\r\n      this[kHandle]?.record(val);\r\n      return;\r\n    }\r\n\r\n    validateInteger(val, 'val', 1);\r\n\r\n    this[kHandle]?.record(val);\r\n  }\r\n\r\n  /**\r\n   * @returns {void}\r\n   */\r\n  recordDelta() {\r\n    if (this[kRecordable] === undefined)\r\n      throw new ERR_INVALID_THIS('RecordableHistogram');\r\n    this[kHandle]?.recordDelta();\r\n  }\r\n\r\n  /**\r\n   * @param {RecordableHistogram} other\r\n   */\r\n  add(other) {\r\n    if (this[kRecordable] === undefined)\r\n      throw new ERR_INVALID_THIS('RecordableHistogram');\r\n    if (other[kRecordable] === undefined)\r\n      throw new ERR_INVALID_ARG_TYPE('other', 'RecordableHistogram', other);\r\n    this[kHandle]?.add(other[kHandle]);\r\n  }\r\n\r\n  [kClone]() {\r\n    const handle = this[kHandle];\r\n    return {\r\n      data: { handle },\r\n      deserializeInfo: 'internal/histogram:ClonedRecordableHistogram',\r\n    };\r\n  }\r\n\r\n  [kDeserialize]({ handle }) {\r\n    this[kHandle] = handle;\r\n  }\r\n}\r\n\r\nfunction ClonedHistogram(handle) {\r\n  return ReflectConstruct(\r\n    function() {\r\n      markTransferMode(this, true, false);\r\n      this[kHandle] = handle;\r\n      this[kMap] = new SafeMap();\r\n    }, [], Histogram);\r\n}\r\n\r\nClonedHistogram.prototype[kDeserialize] = () => { };\r\n\r\nfunction ClonedRecordableHistogram(handle) {\r\n  const histogram = new RecordableHistogram(kSkipThrow);\r\n\r\n  markTransferMode(histogram, true, false);\r\n  histogram[kRecordable] = true;\r\n  histogram[kMap] = new SafeMap();\r\n  histogram[kHandle] = handle;\r\n  histogram.constructor = RecordableHistogram;\r\n\r\n  return histogram;\r\n}\r\n\r\nClonedRecordableHistogram.prototype[kDeserialize] = () => { };\r\n\r\nfunction createRecordableHistogram(handle) {\r\n  return new ClonedRecordableHistogram(handle);\r\n}\r\n\r\n/**\r\n * @param {{\r\n *   lowest? : number,\r\n *   highest? : number,\r\n *   figures? : number\r\n * }} [options]\r\n * @returns {RecordableHistogram}\r\n */\r\nfunction createHistogram(options = kEmptyObject) {\r\n  validateObject(options, 'options');\r\n  const {\r\n    lowest = 1,\r\n    highest = NumberMAX_SAFE_INTEGER,\r\n    figures = 3,\r\n  } = options;\r\n  if (typeof lowest !== 'bigint')\r\n    validateInteger(lowest, 'options.lowest', 1, NumberMAX_SAFE_INTEGER);\r\n  if (typeof highest !== 'bigint') {\r\n    validateInteger(highest, 'options.highest',\r\n                    2 * lowest, NumberMAX_SAFE_INTEGER);\r\n  } else if (highest < 2n * lowest) {\r\n    throw new ERR_INVALID_ARG_VALUE.RangeError('options.highest', highest);\r\n  }\r\n  validateInteger(figures, 'options.figures', 1, 5);\r\n  return createRecordableHistogram(new _Histogram(lowest, highest, figures));\r\n}\r\n\r\nmodule.exports = {\r\n  Histogram,\r\n  RecordableHistogram,\r\n  ClonedHistogram,\r\n  ClonedRecordableHistogram,\r\n  isHistogram,\r\n  kDestroy,\r\n  kHandle,\r\n  kMap,\r\n  createHistogram,\r\n};\r\n"
  },
  "193": {
    "metadata": {
      "scriptId": "193",
      "url": "node:internal/perf/event_loop_delay",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 91,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "ad11d7bb91517a530af7b4bc90f7893115dae5a417bfa6c806a345143152e541",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1840,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/perf/event_loop_delay"
    },
    "source": "'use strict';\r\nconst {\r\n  ReflectConstruct,\r\n  SafeMap,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n    ERR_INVALID_THIS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  createELDHistogram,\r\n} = internalBinding('performance');\r\n\r\nconst {\r\n  validateInteger,\r\n  validateObject,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  Histogram,\r\n  kHandle,\r\n  kMap,\r\n} = require('internal/histogram');\r\n\r\nconst {\r\n  kEmptyObject,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  markTransferMode,\r\n} = require('internal/worker/js_transferable');\r\n\r\nconst kEnabled = Symbol('kEnabled');\r\n\r\nclass ELDHistogram extends Histogram {\r\n  constructor(i) {\r\n    throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean}\r\n   */\r\n  enable() {\r\n    if (this[kEnabled] === undefined)\r\n      throw new ERR_INVALID_THIS('ELDHistogram');\r\n    if (this[kEnabled]) return false;\r\n    this[kEnabled] = true;\r\n    this[kHandle].start();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean}\r\n   */\r\n  disable() {\r\n    if (this[kEnabled] === undefined)\r\n      throw new ERR_INVALID_THIS('ELDHistogram');\r\n    if (!this[kEnabled]) return false;\r\n    this[kEnabled] = false;\r\n    this[kHandle].stop();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {{\r\n *   resolution : number\r\n * }} [options]\r\n * @returns {ELDHistogram}\r\n */\r\nfunction monitorEventLoopDelay(options = kEmptyObject) {\r\n  validateObject(options, 'options');\r\n\r\n  const { resolution = 10 } = options;\r\n  validateInteger(resolution, 'options.resolution', 1);\r\n\r\n  return ReflectConstruct(\r\n    function() {\r\n      markTransferMode(this, true, false);\r\n      this[kEnabled] = false;\r\n      this[kHandle] = createELDHistogram(resolution);\r\n      this[kMap] = new SafeMap();\r\n    }, [], ELDHistogram);\r\n}\r\n\r\nmodule.exports = monitorEventLoopDelay;\r\n"
  },
  "194": {
    "metadata": {
      "scriptId": "194",
      "url": "node:process",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 4,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "76194fc2db5c2cf2c142a60b38b79c28a8b5ee8ac0c5bd4d51a3258e6585a207",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 87,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:process"
    },
    "source": "'use strict';\r\n\r\n// Re-export process as a built-in module\r\nmodule.exports = process;\r\n"
  },
  "195": {
    "metadata": {
      "scriptId": "195",
      "url": "node:punycode",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 450,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "fdcf4bf52562de286684fb332cbeb5c3ef9646d6d72b83a0bf50fab30eb2fbf2",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 13315,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:punycode"
    },
    "source": "'use strict';\r\n\r\nprocess.emitWarning(\r\n  'The `punycode` module is deprecated. Please use a userland ' +\r\n  'alternative instead.',\r\n  'DeprecationWarning',\r\n  'DEP0040',\r\n);\r\n\r\n/** Highest positive signed 32-bit float value */\r\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\r\n\r\n/** Bootstring parameters */\r\nconst base = 36;\r\nconst tMin = 1;\r\nconst tMax = 26;\r\nconst skew = 38;\r\nconst damp = 700;\r\nconst initialBias = 72;\r\nconst initialN = 128; // 0x80\r\nconst delimiter = '-'; // '\\x2D'\r\n\r\n/** Regular expressions */\r\nconst regexPunycode = /^xn--/;\r\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\r\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\r\n\r\n/** Error messages */\r\nconst errors = {\r\n\t'overflow': 'Overflow: input needs wider integers to process',\r\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\r\n\t'invalid-input': 'Invalid input'\r\n};\r\n\r\n/** Convenience shortcuts */\r\nconst baseMinusTMin = base - tMin;\r\nconst floor = Math.floor;\r\nconst stringFromCharCode = String.fromCharCode;\r\n\r\n/*--------------------------------------------------------------------------*/\r\n\r\n/**\r\n * A generic error utility function.\r\n * @private\r\n * @param {String} type The error type.\r\n * @returns {Error} Throws a `RangeError` with the applicable error message.\r\n */\r\nfunction error(type) {\r\n\tthrow new RangeError(errors[type]);\r\n}\r\n\r\n/**\r\n * A generic `Array#map` utility function.\r\n * @private\r\n * @param {Array} array The array to iterate over.\r\n * @param {Function} callback The function that gets called for every array\r\n * item.\r\n * @returns {Array} A new array of values returned by the callback function.\r\n */\r\nfunction map(array, callback) {\r\n\tconst result = [];\r\n\tlet length = array.length;\r\n\twhile (length--) {\r\n\t\tresult[length] = callback(array[length]);\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * A simple `Array#map`-like wrapper to work with domain name strings or email\r\n * addresses.\r\n * @private\r\n * @param {String} domain The domain name or email address.\r\n * @param {Function} callback The function that gets called for every\r\n * character.\r\n * @returns {String} A new string of characters returned by the callback\r\n * function.\r\n */\r\nfunction mapDomain(domain, callback) {\r\n\tconst parts = domain.split('@');\r\n\tlet result = '';\r\n\tif (parts.length > 1) {\r\n\t\t// In email addresses, only the domain name should be punycoded. Leave\r\n\t\t// the local part (i.e. everything up to `@`) intact.\r\n\t\tresult = parts[0] + '@';\r\n\t\tdomain = parts[1];\r\n\t}\r\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\r\n\tdomain = domain.replace(regexSeparators, '\\x2E');\r\n\tconst labels = domain.split('.');\r\n\tconst encoded = map(labels, callback).join('.');\r\n\treturn result + encoded;\r\n}\r\n\r\n/**\r\n * Creates an array containing the numeric code points of each Unicode\r\n * character in the string. While JavaScript uses UCS-2 internally,\r\n * this function will convert a pair of surrogate halves (each of which\r\n * UCS-2 exposes as separate characters) into a single code point,\r\n * matching UTF-16.\r\n * @see `punycode.ucs2.encode`\r\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\r\n * @memberOf punycode.ucs2\r\n * @name decode\r\n * @param {String} string The Unicode input string (UCS-2).\r\n * @returns {Array} The new array of code points.\r\n */\r\nfunction ucs2decode(string) {\r\n\tconst output = [];\r\n\tlet counter = 0;\r\n\tconst length = string.length;\r\n\twhile (counter < length) {\r\n\t\tconst value = string.charCodeAt(counter++);\r\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\r\n\t\t\t// It's a high surrogate, and there is a next character.\r\n\t\t\tconst extra = string.charCodeAt(counter++);\r\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\r\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\r\n\t\t\t} else {\r\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\r\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\r\n\t\t\t\toutput.push(value);\r\n\t\t\t\tcounter--;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\toutput.push(value);\r\n\t\t}\r\n\t}\r\n\treturn output;\r\n}\r\n\r\n/**\r\n * Creates a string based on an array of numeric code points.\r\n * @see `punycode.ucs2.decode`\r\n * @memberOf punycode.ucs2\r\n * @name encode\r\n * @param {Array} codePoints The array of numeric code points.\r\n * @returns {String} The new Unicode string (UCS-2).\r\n */\r\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\r\n\r\n/**\r\n * Converts a basic code point into a digit/integer.\r\n * @see `digitToBasic()`\r\n * @private\r\n * @param {Number} codePoint The basic numeric code point value.\r\n * @returns {Number} The numeric value of a basic code point (for use in\r\n * representing integers) in the range `0` to `base - 1`, or `base` if\r\n * the code point does not represent a value.\r\n */\r\nconst basicToDigit = function(codePoint) {\r\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\r\n\t\treturn 26 + (codePoint - 0x30);\r\n\t}\r\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\r\n\t\treturn codePoint - 0x41;\r\n\t}\r\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\r\n\t\treturn codePoint - 0x61;\r\n\t}\r\n\treturn base;\r\n};\r\n\r\n/**\r\n * Converts a digit/integer into a basic code point.\r\n * @see `basicToDigit()`\r\n * @private\r\n * @param {Number} digit The numeric value of a basic code point.\r\n * @returns {Number} The basic code point whose value (when used for\r\n * representing integers) is `digit`, which needs to be in the range\r\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\r\n * used; else, the lowercase form is used. The behavior is undefined\r\n * if `flag` is non-zero and `digit` has no uppercase form.\r\n */\r\nconst digitToBasic = function(digit, flag) {\r\n\t//  0..25 map to ASCII a..z or A..Z\r\n\t// 26..35 map to ASCII 0..9\r\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\r\n};\r\n\r\n/**\r\n * Bias adaptation function as per section 3.4 of RFC 3492.\r\n * https://tools.ietf.org/html/rfc3492#section-3.4\r\n * @private\r\n */\r\nconst adapt = function(delta, numPoints, firstTime) {\r\n\tlet k = 0;\r\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\r\n\tdelta += floor(delta / numPoints);\r\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\r\n\t\tdelta = floor(delta / baseMinusTMin);\r\n\t}\r\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\r\n};\r\n\r\n/**\r\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\r\n * symbols.\r\n * @memberOf punycode\r\n * @param {String} input The Punycode string of ASCII-only symbols.\r\n * @returns {String} The resulting string of Unicode symbols.\r\n */\r\nconst decode = function(input) {\r\n\t// Don't use UCS-2.\r\n\tconst output = [];\r\n\tconst inputLength = input.length;\r\n\tlet i = 0;\r\n\tlet n = initialN;\r\n\tlet bias = initialBias;\r\n\r\n\t// Handle the basic code points: let `basic` be the number of input code\r\n\t// points before the last delimiter, or `0` if there is none, then copy\r\n\t// the first basic code points to the output.\r\n\r\n\tlet basic = input.lastIndexOf(delimiter);\r\n\tif (basic < 0) {\r\n\t\tbasic = 0;\r\n\t}\r\n\r\n\tfor (let j = 0; j < basic; ++j) {\r\n\t\t// if it's not a basic code point\r\n\t\tif (input.charCodeAt(j) >= 0x80) {\r\n\t\t\terror('not-basic');\r\n\t\t}\r\n\t\toutput.push(input.charCodeAt(j));\r\n\t}\r\n\r\n\t// Main decoding loop: start just after the last delimiter if any basic code\r\n\t// points were copied; start at the beginning otherwise.\r\n\r\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\r\n\r\n\t\t// `index` is the index of the next character to be consumed.\r\n\t\t// Decode a generalized variable-length integer into `delta`,\r\n\t\t// which gets added to `i`. The overflow checking is easier\r\n\t\t// if we increase `i` as we go, then subtract off its starting\r\n\t\t// value at the end to obtain `delta`.\r\n\t\tconst oldi = i;\r\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\r\n\r\n\t\t\tif (index >= inputLength) {\r\n\t\t\t\terror('invalid-input');\r\n\t\t\t}\r\n\r\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\r\n\r\n\t\t\tif (digit >= base) {\r\n\t\t\t\terror('invalid-input');\r\n\t\t\t}\r\n\t\t\tif (digit > floor((maxInt - i) / w)) {\r\n\t\t\t\terror('overflow');\r\n\t\t\t}\r\n\r\n\t\t\ti += digit * w;\r\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\r\n\r\n\t\t\tif (digit < t) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tconst baseMinusT = base - t;\r\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\r\n\t\t\t\terror('overflow');\r\n\t\t\t}\r\n\r\n\t\t\tw *= baseMinusT;\r\n\r\n\t\t}\r\n\r\n\t\tconst out = output.length + 1;\r\n\t\tbias = adapt(i - oldi, out, oldi == 0);\r\n\r\n\t\t// `i` was supposed to wrap around from `out` to `0`,\r\n\t\t// incrementing `n` each time, so we'll fix that now:\r\n\t\tif (floor(i / out) > maxInt - n) {\r\n\t\t\terror('overflow');\r\n\t\t}\r\n\r\n\t\tn += floor(i / out);\r\n\t\ti %= out;\r\n\r\n\t\t// Insert `n` at position `i` of the output.\r\n\t\toutput.splice(i++, 0, n);\r\n\r\n\t}\r\n\r\n\treturn String.fromCodePoint(...output);\r\n};\r\n\r\n/**\r\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\r\n * Punycode string of ASCII-only symbols.\r\n * @memberOf punycode\r\n * @param {String} input The string of Unicode symbols.\r\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\r\n */\r\nconst encode = function(input) {\r\n\tconst output = [];\r\n\r\n\t// Convert the input in UCS-2 to an array of Unicode code points.\r\n\tinput = ucs2decode(input);\r\n\r\n\t// Cache the length.\r\n\tconst inputLength = input.length;\r\n\r\n\t// Initialize the state.\r\n\tlet n = initialN;\r\n\tlet delta = 0;\r\n\tlet bias = initialBias;\r\n\r\n\t// Handle the basic code points.\r\n\tfor (const currentValue of input) {\r\n\t\tif (currentValue < 0x80) {\r\n\t\t\toutput.push(stringFromCharCode(currentValue));\r\n\t\t}\r\n\t}\r\n\r\n\tconst basicLength = output.length;\r\n\tlet handledCPCount = basicLength;\r\n\r\n\t// `handledCPCount` is the number of code points that have been handled;\r\n\t// `basicLength` is the number of basic code points.\r\n\r\n\t// Finish the basic string with a delimiter unless it's empty.\r\n\tif (basicLength) {\r\n\t\toutput.push(delimiter);\r\n\t}\r\n\r\n\t// Main encoding loop:\r\n\twhile (handledCPCount < inputLength) {\r\n\r\n\t\t// All non-basic code points < n have been handled already. Find the next\r\n\t\t// larger one:\r\n\t\tlet m = maxInt;\r\n\t\tfor (const currentValue of input) {\r\n\t\t\tif (currentValue >= n && currentValue < m) {\r\n\t\t\t\tm = currentValue;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\r\n\t\t// but guard against overflow.\r\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\r\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\r\n\t\t\terror('overflow');\r\n\t\t}\r\n\r\n\t\tdelta += (m - n) * handledCPCountPlusOne;\r\n\t\tn = m;\r\n\r\n\t\tfor (const currentValue of input) {\r\n\t\t\tif (currentValue < n && ++delta > maxInt) {\r\n\t\t\t\terror('overflow');\r\n\t\t\t}\r\n\t\t\tif (currentValue === n) {\r\n\t\t\t\t// Represent delta as a generalized variable-length integer.\r\n\t\t\t\tlet q = delta;\r\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\r\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\r\n\t\t\t\t\tif (q < t) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst qMinusT = q - t;\r\n\t\t\t\t\tconst baseMinusT = base - t;\r\n\t\t\t\t\toutput.push(\r\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\r\n\t\t\t\t\t);\r\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\r\n\t\t\t\t}\r\n\r\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\r\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\r\n\t\t\t\tdelta = 0;\r\n\t\t\t\t++handledCPCount;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t++delta;\r\n\t\t++n;\r\n\r\n\t}\r\n\treturn output.join('');\r\n};\r\n\r\n/**\r\n * Converts a Punycode string representing a domain name or an email address\r\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\r\n * it doesn't matter if you call it on a string that has already been\r\n * converted to Unicode.\r\n * @memberOf punycode\r\n * @param {String} input The Punycoded domain name or email address to\r\n * convert to Unicode.\r\n * @returns {String} The Unicode representation of the given Punycode\r\n * string.\r\n */\r\nconst toUnicode = function(input) {\r\n\treturn mapDomain(input, function(string) {\r\n\t\treturn regexPunycode.test(string)\r\n\t\t\t? decode(string.slice(4).toLowerCase())\r\n\t\t\t: string;\r\n\t});\r\n};\r\n\r\n/**\r\n * Converts a Unicode string representing a domain name or an email address to\r\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\r\n * i.e. it doesn't matter if you call it with a domain that's already in\r\n * ASCII.\r\n * @memberOf punycode\r\n * @param {String} input The domain name or email address to convert, as a\r\n * Unicode string.\r\n * @returns {String} The Punycode representation of the given domain name or\r\n * email address.\r\n */\r\nconst toASCII = function(input) {\r\n\treturn mapDomain(input, function(string) {\r\n\t\treturn regexNonASCII.test(string)\r\n\t\t\t? 'xn--' + encode(string)\r\n\t\t\t: string;\r\n\t});\r\n};\r\n\r\n/*--------------------------------------------------------------------------*/\r\n\r\n/** Define the public API */\r\nconst punycode = {\r\n\t/**\r\n\t * A string representing the current Punycode.js version number.\r\n\t * @memberOf punycode\r\n\t * @type String\r\n\t */\r\n\t'version': '2.1.0',\r\n\t/**\r\n\t * An object of methods to convert from JavaScript's internal character\r\n\t * representation (UCS-2) to Unicode code points, and back.\r\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\r\n\t * @memberOf punycode\r\n\t * @type Object\r\n\t */\r\n\t'ucs2': {\r\n\t\t'decode': ucs2decode,\r\n\t\t'encode': ucs2encode\r\n\t},\r\n\t'decode': decode,\r\n\t'encode': encode,\r\n\t'toASCII': toASCII,\r\n\t'toUnicode': toUnicode\r\n};\r\n\r\nmodule.exports = punycode;\r\n"
  },
  "196": {
    "metadata": {
      "scriptId": "196",
      "url": "node:readline",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 524,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "2ab9b4ac77a5c973c34f54feba4e46e7978163698ff39019bff126f17564199c",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 13348,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:readline"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  DateNow,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeCall,\r\n  ObjectDefineProperties,\r\n  ObjectSetPrototypeOf,\r\n  Promise,\r\n  PromiseReject,\r\n  StringPrototypeSlice,\r\n  SymbolDispose,\r\n} = primordials;\r\n\r\nconst {\r\n  clearLine,\r\n  clearScreenDown,\r\n  cursorTo,\r\n  moveCursor,\r\n} = require('internal/readline/callbacks');\r\nconst emitKeypressEvents = require('internal/readline/emitKeypressEvents');\r\nconst promises = require('readline/promises');\r\n\r\nconst {\r\n  AbortError,\r\n} = require('internal/errors');\r\nconst {\r\n  inspect,\r\n} = require('internal/util/inspect');\r\nconst {\r\n  kEmptyObject,\r\n  promisify,\r\n} = require('internal/util');\r\nconst { validateAbortSignal } = require('internal/validators');\r\n\r\n/**\r\n * @typedef {import('./stream.js').Readable} Readable\r\n * @typedef {import('./stream.js').Writable} Writable\r\n */\r\n\r\nconst {\r\n  Interface: _Interface,\r\n  InterfaceConstructor,\r\n  kAddHistory,\r\n  kDecoder,\r\n  kDeleteLeft,\r\n  kDeleteLineLeft,\r\n  kDeleteLineRight,\r\n  kDeleteRight,\r\n  kDeleteWordLeft,\r\n  kDeleteWordRight,\r\n  kGetDisplayPos,\r\n  kHistoryNext,\r\n  kHistoryPrev,\r\n  kInsertString,\r\n  kLine,\r\n  kLine_buffer,\r\n  kMoveCursor,\r\n  kNormalWrite,\r\n  kOldPrompt,\r\n  kOnLine,\r\n  kPreviousKey,\r\n  kPrompt,\r\n  kQuestion,\r\n  kQuestionCallback,\r\n  kQuestionCancel,\r\n  kRefreshLine,\r\n  kSawKeyPress,\r\n  kSawReturnAt,\r\n  kSetRawMode,\r\n  kTabComplete,\r\n  kTabCompleter,\r\n  kTtyWrite,\r\n  kWordLeft,\r\n  kWordRight,\r\n  kWriteToOutput,\r\n} = require('internal/readline/interface');\r\nlet addAbortListener;\r\n\r\nfunction Interface(input, output, completer, terminal) {\r\n  if (!(this instanceof Interface)) {\r\n    return new Interface(input, output, completer, terminal);\r\n  }\r\n\r\n  if (input?.input &&\r\n      typeof input.completer === 'function' && input.completer.length !== 2) {\r\n    const { completer } = input;\r\n    input.completer = (v, cb) => cb(null, completer(v));\r\n  } else if (typeof completer === 'function' && completer.length !== 2) {\r\n    const realCompleter = completer;\r\n    completer = (v, cb) => cb(null, realCompleter(v));\r\n  }\r\n\r\n  FunctionPrototypeCall(InterfaceConstructor, this,\r\n                        input, output, completer, terminal);\r\n\r\n  if (process.env.TERM === 'dumb') {\r\n    this._ttyWrite = FunctionPrototypeBind(_ttyWriteDumb, this);\r\n  }\r\n}\r\n\r\nObjectSetPrototypeOf(Interface.prototype, _Interface.prototype);\r\nObjectSetPrototypeOf(Interface, _Interface);\r\n\r\n/**\r\n * Displays `query` by writing it to the `output`.\r\n * @param {string} query\r\n * @param {{ signal?: AbortSignal; }} [options]\r\n * @param {Function} cb\r\n * @returns {void}\r\n */\r\nInterface.prototype.question = function question(query, options, cb) {\r\n  cb = typeof options === 'function' ? options : cb;\r\n  if (options === null || typeof options !== 'object') {\r\n    options = kEmptyObject;\r\n  }\r\n\r\n  if (options.signal) {\r\n    validateAbortSignal(options.signal, 'options.signal');\r\n    if (options.signal.aborted) {\r\n      return;\r\n    }\r\n\r\n    const onAbort = () => {\r\n      this[kQuestionCancel]();\r\n    };\r\n    addAbortListener ??= require('internal/events/abort_listener').addAbortListener;\r\n    const disposable = addAbortListener(options.signal, onAbort);\r\n    const originalCb = cb;\r\n    cb = typeof cb === 'function' ? (answer) => {\r\n      disposable[SymbolDispose]();\r\n      return originalCb(answer);\r\n    } : disposable[SymbolDispose];\r\n  }\r\n\r\n  if (typeof cb === 'function') {\r\n    this[kQuestion](query, cb);\r\n  }\r\n};\r\nInterface.prototype.question[promisify.custom] = function question(query, options) {\r\n  if (options === null || typeof options !== 'object') {\r\n    options = kEmptyObject;\r\n  }\r\n\r\n  if (options.signal && options.signal.aborted) {\r\n    return PromiseReject(\r\n      new AbortError(undefined, { cause: options.signal.reason }));\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    let cb = resolve;\r\n\r\n    if (options.signal) {\r\n      const onAbort = () => {\r\n        reject(new AbortError(undefined, { cause: options.signal.reason }));\r\n      };\r\n      addAbortListener ??= require('internal/events/abort_listener').addAbortListener;\r\n      const disposable = addAbortListener(options.signal, onAbort);\r\n      cb = (answer) => {\r\n        disposable[SymbolDispose]();\r\n        resolve(answer);\r\n      };\r\n    }\r\n\r\n    this.question(query, options, cb);\r\n  });\r\n};\r\n\r\n/**\r\n * Creates a new `readline.Interface` instance.\r\n * @param {Readable | {\r\n *   input: Readable;\r\n *   output: Writable;\r\n *   completer?: Function;\r\n *   terminal?: boolean;\r\n *   history?: string[];\r\n *   historySize?: number;\r\n *   removeHistoryDuplicates?: boolean;\r\n *   prompt?: string;\r\n *   crlfDelay?: number;\r\n *   escapeCodeTimeout?: number;\r\n *   tabSize?: number;\r\n *   signal?: AbortSignal;\r\n *   }} input\r\n * @param {Writable} [output]\r\n * @param {Function} [completer]\r\n * @param {boolean} [terminal]\r\n * @returns {Interface}\r\n */\r\nfunction createInterface(input, output, completer, terminal) {\r\n  return new Interface(input, output, completer, terminal);\r\n}\r\n\r\nObjectDefineProperties(Interface.prototype, {\r\n  // Redirect internal prototype methods to the underscore notation for backward\r\n  // compatibility.\r\n  [kSetRawMode]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._setRawMode;\r\n    },\r\n  },\r\n  [kOnLine]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._onLine;\r\n    },\r\n  },\r\n  [kWriteToOutput]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._writeToOutput;\r\n    },\r\n  },\r\n  [kAddHistory]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._addHistory;\r\n    },\r\n  },\r\n  [kRefreshLine]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._refreshLine;\r\n    },\r\n  },\r\n  [kNormalWrite]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._normalWrite;\r\n    },\r\n  },\r\n  [kInsertString]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._insertString;\r\n    },\r\n  },\r\n  [kTabComplete]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._tabComplete;\r\n    },\r\n  },\r\n  [kWordLeft]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._wordLeft;\r\n    },\r\n  },\r\n  [kWordRight]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._wordRight;\r\n    },\r\n  },\r\n  [kDeleteLeft]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._deleteLeft;\r\n    },\r\n  },\r\n  [kDeleteRight]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._deleteRight;\r\n    },\r\n  },\r\n  [kDeleteWordLeft]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._deleteWordLeft;\r\n    },\r\n  },\r\n  [kDeleteWordRight]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._deleteWordRight;\r\n    },\r\n  },\r\n  [kDeleteLineLeft]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._deleteLineLeft;\r\n    },\r\n  },\r\n  [kDeleteLineRight]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._deleteLineRight;\r\n    },\r\n  },\r\n  [kLine]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._line;\r\n    },\r\n  },\r\n  [kHistoryNext]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._historyNext;\r\n    },\r\n  },\r\n  [kHistoryPrev]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._historyPrev;\r\n    },\r\n  },\r\n  [kGetDisplayPos]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._getDisplayPos;\r\n    },\r\n  },\r\n  [kMoveCursor]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._moveCursor;\r\n    },\r\n  },\r\n  [kTtyWrite]: {\r\n    __proto__: null,\r\n    get() {\r\n      return this._ttyWrite;\r\n    },\r\n  },\r\n\r\n  // Defining proxies for the internal instance properties for backward\r\n  // compatibility.\r\n  _decoder: {\r\n    __proto__: null,\r\n    get() {\r\n      return this[kDecoder];\r\n    },\r\n    set(value) {\r\n      this[kDecoder] = value;\r\n    },\r\n  },\r\n  _line_buffer: {\r\n    __proto__: null,\r\n    get() {\r\n      return this[kLine_buffer];\r\n    },\r\n    set(value) {\r\n      this[kLine_buffer] = value;\r\n    },\r\n  },\r\n  _oldPrompt: {\r\n    __proto__: null,\r\n    get() {\r\n      return this[kOldPrompt];\r\n    },\r\n    set(value) {\r\n      this[kOldPrompt] = value;\r\n    },\r\n  },\r\n  _previousKey: {\r\n    __proto__: null,\r\n    get() {\r\n      return this[kPreviousKey];\r\n    },\r\n    set(value) {\r\n      this[kPreviousKey] = value;\r\n    },\r\n  },\r\n  _prompt: {\r\n    __proto__: null,\r\n    get() {\r\n      return this[kPrompt];\r\n    },\r\n    set(value) {\r\n      this[kPrompt] = value;\r\n    },\r\n  },\r\n  _questionCallback: {\r\n    __proto__: null,\r\n    get() {\r\n      return this[kQuestionCallback];\r\n    },\r\n    set(value) {\r\n      this[kQuestionCallback] = value;\r\n    },\r\n  },\r\n  _sawKeyPress: {\r\n    __proto__: null,\r\n    get() {\r\n      return this[kSawKeyPress];\r\n    },\r\n    set(value) {\r\n      this[kSawKeyPress] = value;\r\n    },\r\n  },\r\n  _sawReturnAt: {\r\n    __proto__: null,\r\n    get() {\r\n      return this[kSawReturnAt];\r\n    },\r\n    set(value) {\r\n      this[kSawReturnAt] = value;\r\n    },\r\n  },\r\n});\r\n\r\n// Make internal methods public for backward compatibility.\r\nInterface.prototype._setRawMode = _Interface.prototype[kSetRawMode];\r\nInterface.prototype._onLine = _Interface.prototype[kOnLine];\r\nInterface.prototype._writeToOutput = _Interface.prototype[kWriteToOutput];\r\nInterface.prototype._addHistory = _Interface.prototype[kAddHistory];\r\nInterface.prototype._refreshLine = _Interface.prototype[kRefreshLine];\r\nInterface.prototype._normalWrite = _Interface.prototype[kNormalWrite];\r\nInterface.prototype._insertString = _Interface.prototype[kInsertString];\r\nInterface.prototype._tabComplete = function(lastKeypressWasTab) {\r\n  // Overriding parent method because `this.completer` in the legacy\r\n  // implementation takes a callback instead of being an async function.\r\n  this.pause();\r\n  const string = StringPrototypeSlice(this.line, 0, this.cursor);\r\n  this.completer(string, (err, value) => {\r\n    this.resume();\r\n\r\n    if (err) {\r\n      this._writeToOutput(`Tab completion error: ${inspect(err)}`);\r\n      return;\r\n    }\r\n\r\n    this[kTabCompleter](lastKeypressWasTab, value);\r\n  });\r\n};\r\nInterface.prototype._wordLeft = _Interface.prototype[kWordLeft];\r\nInterface.prototype._wordRight = _Interface.prototype[kWordRight];\r\nInterface.prototype._deleteLeft = _Interface.prototype[kDeleteLeft];\r\nInterface.prototype._deleteRight = _Interface.prototype[kDeleteRight];\r\nInterface.prototype._deleteWordLeft = _Interface.prototype[kDeleteWordLeft];\r\nInterface.prototype._deleteWordRight = _Interface.prototype[kDeleteWordRight];\r\nInterface.prototype._deleteLineLeft = _Interface.prototype[kDeleteLineLeft];\r\nInterface.prototype._deleteLineRight = _Interface.prototype[kDeleteLineRight];\r\nInterface.prototype._line = _Interface.prototype[kLine];\r\nInterface.prototype._historyNext = _Interface.prototype[kHistoryNext];\r\nInterface.prototype._historyPrev = _Interface.prototype[kHistoryPrev];\r\nInterface.prototype._getDisplayPos = _Interface.prototype[kGetDisplayPos];\r\nInterface.prototype._getCursorPos = _Interface.prototype.getCursorPos;\r\nInterface.prototype._moveCursor = _Interface.prototype[kMoveCursor];\r\nInterface.prototype._ttyWrite = _Interface.prototype[kTtyWrite];\r\n\r\nfunction _ttyWriteDumb(s, key) {\r\n  key = key || kEmptyObject;\r\n\r\n  if (key.name === 'escape') return;\r\n\r\n  if (this[kSawReturnAt] && key.name !== 'enter')\r\n    this[kSawReturnAt] = 0;\r\n\r\n  if (key.ctrl) {\r\n    if (key.name === 'c') {\r\n      if (this.listenerCount('SIGINT') > 0) {\r\n        this.emit('SIGINT');\r\n      } else {\r\n        // This readline instance is finished\r\n        this.close();\r\n      }\r\n\r\n      return;\r\n    } else if (key.name === 'd') {\r\n      this.close();\r\n      return;\r\n    }\r\n  }\r\n\r\n  switch (key.name) {\r\n    case 'return':  // Carriage return, i.e. \\r\r\n      this[kSawReturnAt] = DateNow();\r\n      this._line();\r\n      break;\r\n\r\n    case 'enter':\r\n      // When key interval > crlfDelay\r\n      if (this[kSawReturnAt] === 0 ||\r\n          DateNow() - this[kSawReturnAt] > this.crlfDelay) {\r\n        this._line();\r\n      }\r\n      this[kSawReturnAt] = 0;\r\n      break;\r\n\r\n    default:\r\n      if (typeof s === 'string' && s) {\r\n        this.line += s;\r\n        this.cursor += s.length;\r\n        this._writeToOutput(s);\r\n      }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  Interface,\r\n  clearLine,\r\n  clearScreenDown,\r\n  createInterface,\r\n  cursorTo,\r\n  emitKeypressEvents,\r\n  moveCursor,\r\n  promises,\r\n};\r\n"
  },
  "197": {
    "metadata": {
      "scriptId": "197",
      "url": "node:internal/readline/emitKeypressEvents",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 99,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "58aff4cddcbc33a8c6c52f472b0e66ea5a96375d043307636c2ea17a4d43ac8b",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2762,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/readline/emitKeypressEvents"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  SafeStringIterator,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  charLengthAt,\r\n  CSI,\r\n  emitKeys,\r\n} = require('internal/readline/utils');\r\nconst {\r\n  kSawKeyPress,\r\n} = require('internal/readline/interface');\r\n\r\nconst { clearTimeout, setTimeout } = require('timers');\r\nconst {\r\n  kEscape,\r\n} = CSI;\r\n\r\nconst { StringDecoder } = require('string_decoder');\r\n\r\nconst KEYPRESS_DECODER = Symbol('keypress-decoder');\r\nconst ESCAPE_DECODER = Symbol('escape-decoder');\r\n\r\n// GNU readline library - keyseq-timeout is 500ms (default)\r\nconst ESCAPE_CODE_TIMEOUT = 500;\r\n\r\n/**\r\n * accepts a readable Stream instance and makes it emit \"keypress\" events\r\n */\r\n\r\nfunction emitKeypressEvents(stream, iface = {}) {\r\n  if (stream[KEYPRESS_DECODER]) return;\r\n\r\n  stream[KEYPRESS_DECODER] = new StringDecoder('utf8');\r\n\r\n  stream[ESCAPE_DECODER] = emitKeys(stream);\r\n  stream[ESCAPE_DECODER].next();\r\n\r\n  const triggerEscape = () => stream[ESCAPE_DECODER].next('');\r\n  const { escapeCodeTimeout = ESCAPE_CODE_TIMEOUT } = iface;\r\n  let timeoutId;\r\n\r\n  function onData(input) {\r\n    if (stream.listenerCount('keypress') > 0) {\r\n      const string = stream[KEYPRESS_DECODER].write(input);\r\n      if (string) {\r\n        clearTimeout(timeoutId);\r\n\r\n        // This supports characters of length 2.\r\n        iface[kSawKeyPress] = charLengthAt(string, 0) === string.length;\r\n        iface.isCompletionEnabled = false;\r\n\r\n        let length = 0;\r\n        for (const character of new SafeStringIterator(string)) {\r\n          length += character.length;\r\n          if (length === string.length) {\r\n            iface.isCompletionEnabled = true;\r\n          }\r\n\r\n          try {\r\n            stream[ESCAPE_DECODER].next(character);\r\n            // Escape letter at the tail position\r\n            if (length === string.length && character === kEscape) {\r\n              timeoutId = setTimeout(triggerEscape, escapeCodeTimeout);\r\n            }\r\n          } catch (err) {\r\n            // If the generator throws (it could happen in the `keypress`\r\n            // event), we need to restart it.\r\n            stream[ESCAPE_DECODER] = emitKeys(stream);\r\n            stream[ESCAPE_DECODER].next();\r\n            throw err;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // Nobody's watching anyway\r\n      stream.removeListener('data', onData);\r\n      stream.on('newListener', onNewListener);\r\n    }\r\n  }\r\n\r\n  function onNewListener(event) {\r\n    if (event === 'keypress') {\r\n      stream.on('data', onData);\r\n      stream.removeListener('newListener', onNewListener);\r\n    }\r\n  }\r\n\r\n  if (stream.listenerCount('keypress') > 0) {\r\n    stream.on('data', onData);\r\n  } else {\r\n    stream.on('newListener', onNewListener);\r\n  }\r\n}\r\n\r\nmodule.exports = emitKeypressEvents;\r\n"
  },
  "198": {
    "metadata": {
      "scriptId": "198",
      "url": "node:readline/promises",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 70,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "ece4d73c6f7564f4dacc51415a2cffcb74c32e87444fa817d5a9d33dc2042e35",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1728,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:readline/promises"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Promise,\r\n  SymbolDispose,\r\n} = primordials;\r\n\r\nconst {\r\n  Readline,\r\n} = require('internal/readline/promises');\r\n\r\nconst {\r\n  Interface: _Interface,\r\n  kQuestion,\r\n  kQuestionCancel,\r\n} = require('internal/readline/interface');\r\n\r\nconst {\r\n  AbortError,\r\n} = require('internal/errors');\r\nconst { validateAbortSignal } = require('internal/validators');\r\n\r\nconst {\r\n  kEmptyObject,\r\n} = require('internal/util');\r\nlet addAbortListener;\r\n\r\nclass Interface extends _Interface {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(input, output, completer, terminal) {\r\n    super(input, output, completer, terminal);\r\n  }\r\n  question(query, options = kEmptyObject) {\r\n    return new Promise((resolve, reject) => {\r\n      let cb = resolve;\r\n\r\n      if (options?.signal) {\r\n        validateAbortSignal(options.signal, 'options.signal');\r\n        if (options.signal.aborted) {\r\n          return reject(\r\n            new AbortError(undefined, { cause: options.signal.reason }));\r\n        }\r\n\r\n        const onAbort = () => {\r\n          this[kQuestionCancel]();\r\n          reject(new AbortError(undefined, { cause: options.signal.reason }));\r\n        };\r\n        addAbortListener ??= require('internal/events/abort_listener').addAbortListener;\r\n        const disposable = addAbortListener(options.signal, onAbort);\r\n\r\n        cb = (answer) => {\r\n          disposable[SymbolDispose]();\r\n          resolve(answer);\r\n        };\r\n      }\r\n\r\n      this[kQuestion](query, cb);\r\n    });\r\n  }\r\n}\r\n\r\nfunction createInterface(input, output, completer, terminal) {\r\n  return new Interface(input, output, completer, terminal);\r\n}\r\n\r\nmodule.exports = {\r\n  Interface,\r\n  Readline,\r\n  createInterface,\r\n};\r\n"
  },
  "199": {
    "metadata": {
      "scriptId": "199",
      "url": "node:internal/readline/promises",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 144,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "3375245b54df1b4545f1176cda7f89167c5e05fe50c0b29ae2cba31c44305a9e",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3656,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/readline/promises"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypePush,\r\n  Promise,\r\n} = primordials;\r\n\r\nconst { CSI } = require('internal/readline/utils');\r\nconst { validateBoolean, validateInteger } = require('internal/validators');\r\nconst { isWritable } = require('internal/streams/utils');\r\nconst { codes: {\r\n  ERR_INVALID_ARG_TYPE,\r\n} } = require('internal/errors');\r\n\r\nconst {\r\n  kClearToLineBeginning,\r\n  kClearToLineEnd,\r\n  kClearLine,\r\n  kClearScreenDown,\r\n} = CSI;\r\n\r\nclass Readline {\r\n  #autoCommit = false;\r\n  #stream;\r\n  #todo = [];\r\n\r\n  constructor(stream, options = undefined) {\r\n    if (!isWritable(stream))\r\n      throw new ERR_INVALID_ARG_TYPE('stream', 'Writable', stream);\r\n    this.#stream = stream;\r\n    if (options?.autoCommit != null) {\r\n      validateBoolean(options.autoCommit, 'options.autoCommit');\r\n      this.#autoCommit = options.autoCommit;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor to the x and y coordinate on the given stream.\r\n   * @param {integer} x\r\n   * @param {integer} [y]\r\n   * @returns {Readline} this\r\n   */\r\n  cursorTo(x, y = undefined) {\r\n    validateInteger(x, 'x');\r\n    if (y != null) validateInteger(y, 'y');\r\n\r\n    const data = y == null ? CSI`${x + 1}G` : CSI`${y + 1};${x + 1}H`;\r\n    if (this.#autoCommit) process.nextTick(() => this.#stream.write(data));\r\n    else ArrayPrototypePush(this.#todo, data);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor relative to its current location.\r\n   * @param {integer} dx\r\n   * @param {integer} dy\r\n   * @returns {Readline} this\r\n   */\r\n  moveCursor(dx, dy) {\r\n    if (dx || dy) {\r\n      validateInteger(dx, 'dx');\r\n      validateInteger(dy, 'dy');\r\n\r\n      let data = '';\r\n\r\n      if (dx < 0) {\r\n        data += CSI`${-dx}D`;\r\n      } else if (dx > 0) {\r\n        data += CSI`${dx}C`;\r\n      }\r\n\r\n      if (dy < 0) {\r\n        data += CSI`${-dy}A`;\r\n      } else if (dy > 0) {\r\n        data += CSI`${dy}B`;\r\n      }\r\n      if (this.#autoCommit) process.nextTick(() => this.#stream.write(data));\r\n      else ArrayPrototypePush(this.#todo, data);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Clears the current line the cursor is on.\r\n   * @param {-1|0|1} dir Direction to clear:\r\n   *   -1 for left of the cursor\r\n   *   +1 for right of the cursor\r\n   *    0 for the entire line\r\n   * @returns {Readline} this\r\n   */\r\n  clearLine(dir) {\r\n    validateInteger(dir, 'dir', -1, 1);\r\n\r\n    const data =\r\n      dir < 0 ? kClearToLineBeginning :\r\n        dir > 0 ? kClearToLineEnd :\r\n          kClearLine;\r\n    if (this.#autoCommit) process.nextTick(() => this.#stream.write(data));\r\n    else ArrayPrototypePush(this.#todo, data);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Clears the screen from the current position of the cursor down.\r\n   * @returns {Readline} this\r\n   */\r\n  clearScreenDown() {\r\n    if (this.#autoCommit) {\r\n      process.nextTick(() => this.#stream.write(kClearScreenDown));\r\n    } else {\r\n      ArrayPrototypePush(this.#todo, kClearScreenDown);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sends all the pending actions to the associated `stream` and clears the\r\n   * internal list of pending actions.\r\n   * @returns {Promise<void>} Resolves when all pending actions have been\r\n   * flushed to the associated `stream`.\r\n   */\r\n  commit() {\r\n    return new Promise((resolve) => {\r\n      this.#stream.write(ArrayPrototypeJoin(this.#todo, ''), resolve);\r\n      this.#todo = [];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clears the internal list of pending actions without sending it to the\r\n   * associated `stream`.\r\n   * @returns {Readline} this\r\n   */\r\n  rollback() {\r\n    this.#todo = [];\r\n    return this;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  Readline,\r\n};\r\n"
  },
  "200": {
    "metadata": {
      "scriptId": "200",
      "url": "node:repl",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1888,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "09e8916d8195c731e61b6ce17eb346767f1220bfd5e0deb7585ba3fc40c9c1dd",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 63174,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:repl"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n/* A REPL library that you can include in your own code to get a runtime\r\n * interface to your program.\r\n *\r\n *   const repl = require(\"repl\");\r\n *   // start repl on stdin\r\n *   repl.start(\"prompt> \");\r\n *\r\n *   // listen for unix socket connections and start repl on them\r\n *   net.createServer(function(socket) {\r\n *     repl.start(\"node via Unix socket> \", socket);\r\n *   }).listen(\"/tmp/node-repl-sock\");\r\n *\r\n *   // listen for TCP socket connections and start repl on them\r\n *   net.createServer(function(socket) {\r\n *     repl.start(\"node via TCP socket> \", socket);\r\n *   }).listen(5001);\r\n *\r\n *   // expose foo to repl context\r\n *   repl.start(\"node > \").context.foo = \"stdin is fun\";\r\n */\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeAt,\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeFindLastIndex,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePop,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypePushApply,\r\n  ArrayPrototypeShift,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSome,\r\n  ArrayPrototypeSort,\r\n  ArrayPrototypeUnshift,\r\n  Boolean,\r\n  Error: MainContextError,\r\n  FunctionPrototypeBind,\r\n  JSONStringify,\r\n  MathMaxApply,\r\n  NumberIsNaN,\r\n  NumberParseFloat,\r\n  ObjectAssign,\r\n  ObjectDefineProperty,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ObjectGetOwnPropertyNames,\r\n  ObjectGetPrototypeOf,\r\n  ObjectKeys,\r\n  ObjectSetPrototypeOf,\r\n  Promise,\r\n  ReflectApply,\r\n  RegExp,\r\n  RegExpPrototypeExec,\r\n  SafePromiseRace,\r\n  SafeSet,\r\n  SafeWeakSet,\r\n  StringPrototypeCharAt,\r\n  StringPrototypeCodePointAt,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeRepeat,\r\n  StringPrototypeSlice,\r\n  StringPrototypeSplit,\r\n  StringPrototypeStartsWith,\r\n  StringPrototypeToLocaleLowerCase,\r\n  StringPrototypeTrim,\r\n  StringPrototypeTrimStart,\r\n  Symbol,\r\n  SyntaxError,\r\n  SyntaxErrorPrototype,\r\n  globalThis,\r\n} = primordials;\r\n\r\nconst { BuiltinModule } = require('internal/bootstrap/realm');\r\nconst {\r\n  makeRequireFunction,\r\n  addBuiltinLibsToObject,\r\n} = require('internal/modules/helpers');\r\nconst {\r\n  isIdentifierStart,\r\n  isIdentifierChar,\r\n  parse: acornParse,\r\n} = require('internal/deps/acorn/acorn/dist/acorn');\r\nconst acornWalk = require('internal/deps/acorn/acorn-walk/dist/walk');\r\nconst {\r\n  decorateErrorStack,\r\n  isError,\r\n  deprecate,\r\n  SideEffectFreeRegExpPrototypeSymbolReplace,\r\n  SideEffectFreeRegExpPrototypeSymbolSplit,\r\n} = require('internal/util');\r\nconst { inspect } = require('internal/util/inspect');\r\nconst vm = require('vm');\r\n\r\nconst { runInThisContext, runInContext } = vm.Script.prototype;\r\n\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst { Interface } = require('readline');\r\nconst {\r\n  commonPrefix,\r\n} = require('internal/readline/utils');\r\nconst { Console } = require('console');\r\nconst { shouldColorize } = require('internal/util/colors');\r\nconst CJSModule = require('internal/modules/cjs/loader').Module;\r\nlet _builtinLibs = ArrayPrototypeFilter(\r\n  CJSModule.builtinModules,\r\n  (e) => !StringPrototypeStartsWith(e, '_'),\r\n);\r\nconst nodeSchemeBuiltinLibs = ArrayPrototypeMap(\r\n  _builtinLibs, (lib) => `node:${lib}`);\r\nArrayPrototypeForEach(\r\n  BuiltinModule.getSchemeOnlyModuleNames(),\r\n  (lib) => ArrayPrototypePush(nodeSchemeBuiltinLibs, `node:${lib}`),\r\n);\r\nconst domain = require('domain');\r\nlet debug = require('internal/util/debuglog').debuglog('repl', (fn) => {\r\n  debug = fn;\r\n});\r\nconst {\r\n  ErrorPrepareStackTrace,\r\n  codes: {\r\n    ERR_CANNOT_WATCH_SIGINT,\r\n    ERR_INVALID_REPL_EVAL_CONFIG,\r\n    ERR_INVALID_REPL_INPUT,\r\n    ERR_MISSING_ARGS,\r\n    ERR_SCRIPT_EXECUTION_INTERRUPTED,\r\n  },\r\n  isErrorStackTraceLimitWritable,\r\n  overrideStackTrace,\r\n} = require('internal/errors');\r\nconst { sendInspectorCommand } = require('internal/util/inspector');\r\nconst { getOptionValue } = require('internal/options');\r\nconst {\r\n  validateFunction,\r\n  validateObject,\r\n} = require('internal/validators');\r\nconst experimentalREPLAwait = getOptionValue(\r\n  '--experimental-repl-await',\r\n);\r\nconst pendingDeprecation = getOptionValue('--pending-deprecation');\r\nconst {\r\n  REPL_MODE_SLOPPY,\r\n  REPL_MODE_STRICT,\r\n  isRecoverableError,\r\n  kStandaloneREPL,\r\n  setupPreview,\r\n  setupReverseSearch,\r\n} = require('internal/repl/utils');\r\nconst {\r\n  constants: {\r\n    ALL_PROPERTIES,\r\n    SKIP_SYMBOLS,\r\n  },\r\n  getOwnNonIndexProperties,\r\n} = internalBinding('util');\r\nconst {\r\n  startSigintWatchdog,\r\n  stopSigintWatchdog,\r\n} = internalBinding('contextify');\r\n\r\nconst history = require('internal/repl/history');\r\nconst {\r\n  extensionFormatMap,\r\n} = require('internal/modules/esm/formats');\r\nconst {\r\n  makeContextifyScript,\r\n} = require('internal/vm');\r\nlet nextREPLResourceNumber = 1;\r\n// This prevents v8 code cache from getting confused and using a different\r\n// cache from a resource of the same name\r\nfunction getREPLResourceName() {\r\n  return `REPL${nextREPLResourceNumber++}`;\r\n}\r\n\r\n// Lazy-loaded.\r\nlet processTopLevelAwait;\r\n\r\nconst globalBuiltins =\r\n  new SafeSet(vm.runInNewContext('Object.getOwnPropertyNames(globalThis)'));\r\n\r\nconst parentModule = module;\r\nconst domainSet = new SafeWeakSet();\r\n\r\nconst kBufferedCommandSymbol = Symbol('bufferedCommand');\r\nconst kContextId = Symbol('contextId');\r\nconst kLoadingSymbol = Symbol('loading');\r\n\r\nlet addedNewListener = false;\r\n\r\ntry {\r\n  // Hack for require.resolve(\"./relative\") to work properly.\r\n  module.filename = path.resolve('repl');\r\n} catch {\r\n  // path.resolve('repl') fails when the current working directory has been\r\n  // deleted.  Fall back to the directory name of the (absolute) executable\r\n  // path.  It's not really correct but what are the alternatives?\r\n  const dirname = path.dirname(process.execPath);\r\n  module.filename = path.resolve(dirname, 'repl');\r\n}\r\n\r\n// Hack for repl require to work properly with node_modules folders\r\nmodule.paths = CJSModule._nodeModulePaths(module.filename);\r\n\r\n// This is the default \"writer\" value, if none is passed in the REPL options,\r\n// and it can be overridden by custom print functions, such as `probe` or\r\n// `eyes.js`.\r\nconst writer = (obj) => inspect(obj, writer.options);\r\nwriter.options = { ...inspect.defaultOptions, showProxy: true };\r\n\r\n// Converts static import statement to dynamic import statement\r\nconst toDynamicImport = (codeLine) => {\r\n  let dynamicImportStatement = '';\r\n  const ast = acornParse(codeLine, { __proto__: null, sourceType: 'module', ecmaVersion: 'latest' });\r\n  acornWalk.ancestor(ast, {\r\n    ImportDeclaration(node) {\r\n      const awaitDynamicImport = `await import(${JSONStringify(node.source.value)});`;\r\n      if (node.specifiers.length === 0) {\r\n        dynamicImportStatement += awaitDynamicImport;\r\n      } else if (node.specifiers.length === 1 && node.specifiers[0].type === 'ImportNamespaceSpecifier') {\r\n        dynamicImportStatement += `const ${node.specifiers[0].local.name} = ${awaitDynamicImport}`;\r\n      } else {\r\n        const importNames = ArrayPrototypeJoin(ArrayPrototypeMap(node.specifiers, ({ local, imported }) =>\r\n          (local.name === imported?.name ? local.name : `${imported?.name ?? 'default'}: ${local.name}`),\r\n        ), ', ');\r\n        dynamicImportStatement += `const { ${importNames} } = ${awaitDynamicImport}`;\r\n      }\r\n    },\r\n  });\r\n  return dynamicImportStatement;\r\n};\r\n\r\nfunction REPLServer(prompt,\r\n                    stream,\r\n                    eval_,\r\n                    useGlobal,\r\n                    ignoreUndefined,\r\n                    replMode) {\r\n  if (!(this instanceof REPLServer)) {\r\n    return new REPLServer(prompt,\r\n                          stream,\r\n                          eval_,\r\n                          useGlobal,\r\n                          ignoreUndefined,\r\n                          replMode);\r\n  }\r\n\r\n  let options;\r\n  if (prompt !== null && typeof prompt === 'object') {\r\n    // An options object was given.\r\n    options = { ...prompt };\r\n    stream = options.stream || options.socket;\r\n    eval_ = options.eval;\r\n    useGlobal = options.useGlobal;\r\n    ignoreUndefined = options.ignoreUndefined;\r\n    prompt = options.prompt;\r\n    replMode = options.replMode;\r\n  } else {\r\n    options = {};\r\n  }\r\n\r\n  if (!options.input && !options.output) {\r\n    // Legacy API, passing a 'stream'/'socket' option.\r\n    if (!stream) {\r\n      // Use stdin and stdout as the default streams if none were given.\r\n      stream = process;\r\n    }\r\n    // We're given a duplex readable/writable Stream, like a `net.Socket`\r\n    // or a custom object with 2 streams, or the `process` object.\r\n    options.input = stream.stdin || stream;\r\n    options.output = stream.stdout || stream;\r\n  }\r\n\r\n  if (options.terminal === undefined) {\r\n    options.terminal = options.output.isTTY;\r\n  }\r\n  options.terminal = !!options.terminal;\r\n\r\n  if (options.terminal && options.useColors === undefined) {\r\n    // If possible, check if stdout supports colors or not.\r\n    options.useColors = shouldColorize(options.output);\r\n  }\r\n\r\n  // TODO(devsnek): Add a test case for custom eval functions.\r\n  const preview = options.terminal &&\r\n    (options.preview !== undefined ? !!options.preview : !eval_);\r\n\r\n  ObjectDefineProperty(this, 'inputStream', {\r\n    __proto__: null,\r\n    get: pendingDeprecation ?\r\n      deprecate(() => this.input,\r\n                'repl.inputStream and repl.outputStream are deprecated. ' +\r\n                  'Use repl.input and repl.output instead',\r\n                'DEP0141') :\r\n      () => this.input,\r\n    set: pendingDeprecation ?\r\n      deprecate((val) => this.input = val,\r\n                'repl.inputStream and repl.outputStream are deprecated. ' +\r\n                  'Use repl.input and repl.output instead',\r\n                'DEP0141') :\r\n      (val) => this.input = val,\r\n    enumerable: false,\r\n    configurable: true,\r\n  });\r\n  ObjectDefineProperty(this, 'outputStream', {\r\n    __proto__: null,\r\n    get: pendingDeprecation ?\r\n      deprecate(() => this.output,\r\n                'repl.inputStream and repl.outputStream are deprecated. ' +\r\n                  'Use repl.input and repl.output instead',\r\n                'DEP0141') :\r\n      () => this.output,\r\n    set: pendingDeprecation ?\r\n      deprecate((val) => this.output = val,\r\n                'repl.inputStream and repl.outputStream are deprecated. ' +\r\n                  'Use repl.input and repl.output instead',\r\n                'DEP0141') :\r\n      (val) => this.output = val,\r\n    enumerable: false,\r\n    configurable: true,\r\n  });\r\n\r\n  this.allowBlockingCompletions = !!options.allowBlockingCompletions;\r\n  this.useColors = !!options.useColors;\r\n  this._domain = options.domain || domain.create();\r\n  this.useGlobal = !!useGlobal;\r\n  this.ignoreUndefined = !!ignoreUndefined;\r\n  this.replMode = replMode || module.exports.REPL_MODE_SLOPPY;\r\n  this.underscoreAssigned = false;\r\n  this.last = undefined;\r\n  this.underscoreErrAssigned = false;\r\n  this.lastError = undefined;\r\n  this.breakEvalOnSigint = !!options.breakEvalOnSigint;\r\n  this.editorMode = false;\r\n  // Context id for use with the inspector protocol.\r\n  this[kContextId] = undefined;\r\n\r\n  if (this.breakEvalOnSigint && eval_) {\r\n    // Allowing this would not reflect user expectations.\r\n    // breakEvalOnSigint affects only the behavior of the default eval().\r\n    throw new ERR_INVALID_REPL_EVAL_CONFIG();\r\n  }\r\n\r\n  if (options[kStandaloneREPL]) {\r\n    // It is possible to introspect the running REPL accessing this variable\r\n    // from inside the REPL. This is useful for anyone working on the REPL.\r\n    module.exports.repl = this;\r\n  } else if (!addedNewListener) {\r\n    // Add this listener only once and use a WeakSet that contains the REPLs\r\n    // domains. Otherwise we'd have to add a single listener to each REPL\r\n    // instance and that could trigger the `MaxListenersExceededWarning`.\r\n    process.prependListener('newListener', (event, listener) => {\r\n      if (event === 'uncaughtException' &&\r\n          process.domain &&\r\n          listener.name !== 'domainUncaughtExceptionClear' &&\r\n          domainSet.has(process.domain)) {\r\n        // Throw an error so that the event will not be added and the current\r\n        // domain takes over. That way the user is notified about the error\r\n        // and the current code evaluation is stopped, just as any other code\r\n        // that contains an error.\r\n        throw new ERR_INVALID_REPL_INPUT(\r\n          'Listeners for `uncaughtException` cannot be used in the REPL');\r\n      }\r\n    });\r\n    addedNewListener = true;\r\n  }\r\n\r\n  domainSet.add(this._domain);\r\n\r\n  const savedRegExMatches = ['', '', '', '', '', '', '', '', '', ''];\r\n  const sep = '\\u0000\\u0000\\u0000';\r\n  const regExMatcher = new RegExp(`^${sep}(.*)${sep}(.*)${sep}(.*)${sep}(.*)` +\r\n                                  `${sep}(.*)${sep}(.*)${sep}(.*)${sep}(.*)` +\r\n                                  `${sep}(.*)$`);\r\n\r\n  eval_ = eval_ || defaultEval;\r\n\r\n  const self = this;\r\n\r\n  // Pause taking in new input, and store the keys in a buffer.\r\n  const pausedBuffer = [];\r\n  let paused = false;\r\n  function pause() {\r\n    paused = true;\r\n  }\r\n\r\n  function unpause() {\r\n    if (!paused) return;\r\n    paused = false;\r\n    let entry;\r\n    const tmpCompletionEnabled = self.isCompletionEnabled;\r\n    while ((entry = ArrayPrototypeShift(pausedBuffer)) !== undefined) {\r\n      const { 0: type, 1: payload, 2: isCompletionEnabled } = entry;\r\n      switch (type) {\r\n        case 'key': {\r\n          const { 0: d, 1: key } = payload;\r\n          self.isCompletionEnabled = isCompletionEnabled;\r\n          self._ttyWrite(d, key);\r\n          break;\r\n        }\r\n        case 'close':\r\n          self.emit('exit');\r\n          break;\r\n      }\r\n      if (paused) {\r\n        break;\r\n      }\r\n    }\r\n    self.isCompletionEnabled = tmpCompletionEnabled;\r\n  }\r\n\r\n  function defaultEval(code, context, file, cb) {\r\n    let result, script, wrappedErr;\r\n    let err = null;\r\n    let wrappedCmd = false;\r\n    let awaitPromise = false;\r\n    const input = code;\r\n\r\n    // It's confusing for `{ a : 1 }` to be interpreted as a block\r\n    // statement rather than an object literal.  So, we first try\r\n    // to wrap it in parentheses, so that it will be interpreted as\r\n    // an expression.  Note that if the above condition changes,\r\n    // lib/internal/repl/utils.js needs to be changed to match.\r\n    if (RegExpPrototypeExec(/^\\s*{/, code) !== null &&\r\n        RegExpPrototypeExec(/;\\s*$/, code) === null) {\r\n      code = `(${StringPrototypeTrim(code)})\\n`;\r\n      wrappedCmd = true;\r\n    }\r\n\r\n    const hostDefinedOptionId = Symbol(`eval:${file}`);\r\n    let parentURL;\r\n    try {\r\n      const { pathToFileURL } = require('internal/url');\r\n      // Adding `/repl` prevents dynamic imports from loading relative\r\n      // to the parent of `process.cwd()`.\r\n      parentURL = pathToFileURL(path.join(process.cwd(), 'repl')).href;\r\n    } catch {\r\n      // Continue regardless of error.\r\n    }\r\n    async function importModuleDynamically(specifier, _, importAttributes) {\r\n      const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n      return cascadedLoader.import(specifier, parentURL, importAttributes);\r\n    }\r\n    // `experimentalREPLAwait` is set to true by default.\r\n    // Shall be false in case `--no-experimental-repl-await` flag is used.\r\n    if (experimentalREPLAwait && StringPrototypeIncludes(code, 'await')) {\r\n      if (processTopLevelAwait === undefined) {\r\n        ({ processTopLevelAwait } = require('internal/repl/await'));\r\n      }\r\n\r\n      try {\r\n        const potentialWrappedCode = processTopLevelAwait(code);\r\n        if (potentialWrappedCode !== null) {\r\n          code = potentialWrappedCode;\r\n          wrappedCmd = true;\r\n          awaitPromise = true;\r\n        }\r\n      } catch (e) {\r\n        let recoverableError = false;\r\n        if (e.name === 'SyntaxError') {\r\n          // Remove all \"await\"s and attempt running the script\r\n          // in order to detect if error is truly non recoverable\r\n          const fallbackCode = SideEffectFreeRegExpPrototypeSymbolReplace(/\\bawait\\b/g, code, '');\r\n          try {\r\n            makeContextifyScript(\r\n              fallbackCode,            // code\r\n              file,                    // filename,\r\n              0,                       // lineOffset\r\n              0,                       // columnOffset,\r\n              undefined,               // cachedData\r\n              false,                   // produceCachedData\r\n              undefined,               // parsingContext\r\n              hostDefinedOptionId,     // hostDefinedOptionId\r\n              importModuleDynamically, // importModuleDynamically\r\n            );\r\n          } catch (fallbackError) {\r\n            if (isRecoverableError(fallbackError, fallbackCode)) {\r\n              recoverableError = true;\r\n              err = new Recoverable(e);\r\n            }\r\n          }\r\n        }\r\n        if (!recoverableError) {\r\n          decorateErrorStack(e);\r\n          err = e;\r\n        }\r\n      }\r\n    }\r\n\r\n    // First, create the Script object to check the syntax\r\n    if (code === '\\n')\r\n      return cb(null);\r\n\r\n    if (err === null) {\r\n      while (true) {\r\n        try {\r\n          if (self.replMode === module.exports.REPL_MODE_STRICT &&\r\n              RegExpPrototypeExec(/^\\s*$/, code) === null) {\r\n            // \"void 0\" keeps the repl from returning \"use strict\" as the result\r\n            // value for statements and declarations that don't return a value.\r\n            code = `'use strict'; void 0;\\n${code}`;\r\n          }\r\n          script = makeContextifyScript(\r\n            code,                    // code\r\n            file,                    // filename,\r\n            0,                       // lineOffset\r\n            0,                       // columnOffset,\r\n            undefined,               // cachedData\r\n            false,                   // produceCachedData\r\n            undefined,               // parsingContext\r\n            hostDefinedOptionId,     // hostDefinedOptionId\r\n            importModuleDynamically, // importModuleDynamically\r\n          );\r\n        } catch (e) {\r\n          debug('parse error %j', code, e);\r\n          if (wrappedCmd) {\r\n            // Unwrap and try again\r\n            wrappedCmd = false;\r\n            awaitPromise = false;\r\n            code = input;\r\n            wrappedErr = e;\r\n            continue;\r\n          }\r\n          // Preserve original error for wrapped command\r\n          const error = wrappedErr || e;\r\n          if (isRecoverableError(error, code))\r\n            err = new Recoverable(error);\r\n          else\r\n            err = error;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // This will set the values from `savedRegExMatches` to corresponding\r\n    // predefined RegExp properties `RegExp.$1`, `RegExp.$2` ... `RegExp.$9`\r\n    RegExpPrototypeExec(regExMatcher,\r\n                        ArrayPrototypeJoin(savedRegExMatches, sep));\r\n\r\n    let finished = false;\r\n    function finishExecution(err, result) {\r\n      if (finished) return;\r\n      finished = true;\r\n\r\n      // After executing the current expression, store the values of RegExp\r\n      // predefined properties back in `savedRegExMatches`\r\n      for (let idx = 1; idx < savedRegExMatches.length; idx += 1) {\r\n        savedRegExMatches[idx] = RegExp[`$${idx}`];\r\n      }\r\n\r\n      cb(err, result);\r\n    }\r\n\r\n    if (!err) {\r\n      // Unset raw mode during evaluation so that Ctrl+C raises a signal.\r\n      let previouslyInRawMode;\r\n      if (self.breakEvalOnSigint) {\r\n        // Start the SIGINT watchdog before entering raw mode so that a very\r\n        // quick Ctrl+C doesn't lead to aborting the process completely.\r\n        if (!startSigintWatchdog())\r\n          throw new ERR_CANNOT_WATCH_SIGINT();\r\n        previouslyInRawMode = self._setRawMode(false);\r\n      }\r\n\r\n      try {\r\n        try {\r\n          const scriptOptions = {\r\n            displayErrors: false,\r\n            breakOnSigint: self.breakEvalOnSigint,\r\n          };\r\n\r\n          if (self.useGlobal) {\r\n            result = ReflectApply(runInThisContext, script, [scriptOptions]);\r\n          } else {\r\n            result = ReflectApply(runInContext, script, [context, scriptOptions]);\r\n          }\r\n        } finally {\r\n          if (self.breakEvalOnSigint) {\r\n            // Reset terminal mode to its previous value.\r\n            self._setRawMode(previouslyInRawMode);\r\n\r\n            // Returns true if there were pending SIGINTs *after* the script\r\n            // has terminated without being interrupted itself.\r\n            if (stopSigintWatchdog()) {\r\n              self.emit('SIGINT');\r\n            }\r\n          }\r\n        }\r\n      } catch (e) {\r\n        err = e;\r\n\r\n        if (process.domain) {\r\n          debug('not recoverable, send to domain');\r\n          process.domain.emit('error', err);\r\n          process.domain.exit();\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (awaitPromise && !err) {\r\n        let sigintListener;\r\n        pause();\r\n        let promise = result;\r\n        if (self.breakEvalOnSigint) {\r\n          const interrupt = new Promise((resolve, reject) => {\r\n            sigintListener = () => {\r\n              const tmp = MainContextError.stackTraceLimit;\r\n              if (isErrorStackTraceLimitWritable()) MainContextError.stackTraceLimit = 0;\r\n              const err = new ERR_SCRIPT_EXECUTION_INTERRUPTED();\r\n              if (isErrorStackTraceLimitWritable()) MainContextError.stackTraceLimit = tmp;\r\n              reject(err);\r\n            };\r\n            prioritizedSigintQueue.add(sigintListener);\r\n          });\r\n          promise = SafePromiseRace([promise, interrupt]);\r\n        }\r\n\r\n        (async () => {\r\n          try {\r\n            const result = (await promise)?.value;\r\n            finishExecution(null, result);\r\n          } catch (err) {\r\n            if (err && process.domain) {\r\n              debug('not recoverable, send to domain');\r\n              process.domain.emit('error', err);\r\n              process.domain.exit();\r\n              return;\r\n            }\r\n            finishExecution(err);\r\n          } finally {\r\n            // Remove prioritized SIGINT listener if it was not called.\r\n            prioritizedSigintQueue.delete(sigintListener);\r\n            unpause();\r\n          }\r\n        })();\r\n      }\r\n    }\r\n\r\n    if (!awaitPromise || err) {\r\n      finishExecution(err, result);\r\n    }\r\n  }\r\n\r\n  self.eval = self._domain.bind(eval_);\r\n\r\n  self._domain.on('error', function debugDomainError(e) {\r\n    debug('domain error');\r\n    let errStack = '';\r\n\r\n    if (typeof e === 'object' && e !== null) {\r\n      overrideStackTrace.set(e, (error, stackFrames) => {\r\n        let frames;\r\n        if (typeof stackFrames === 'object') {\r\n          // Search from the bottom of the call stack to\r\n          // find the first frame with a null function name\r\n          const idx = ArrayPrototypeFindLastIndex(\r\n            stackFrames,\r\n            (frame) => frame.getFunctionName() === null,\r\n          );\r\n          // If found, get rid of it and everything below it\r\n          frames = ArrayPrototypeSlice(stackFrames, 0, idx);\r\n        } else {\r\n          frames = stackFrames;\r\n        }\r\n        // FIXME(devsnek): this is inconsistent with the checks\r\n        // that the real prepareStackTrace dispatch uses in\r\n        // lib/internal/errors.js.\r\n        if (typeof MainContextError.prepareStackTrace === 'function') {\r\n          return MainContextError.prepareStackTrace(error, frames);\r\n        }\r\n        return ErrorPrepareStackTrace(error, frames);\r\n      });\r\n      decorateErrorStack(e);\r\n\r\n      if (e.domainThrown) {\r\n        delete e.domain;\r\n        delete e.domainThrown;\r\n      }\r\n\r\n      if (isError(e)) {\r\n        if (e.stack) {\r\n          if (e.name === 'SyntaxError') {\r\n            // Remove stack trace.\r\n            e.stack = SideEffectFreeRegExpPrototypeSymbolReplace(\r\n              /^\\s+at\\s.*\\n?/gm,\r\n              SideEffectFreeRegExpPrototypeSymbolReplace(/^REPL\\d+:\\d+\\r?\\n/, e.stack, ''),\r\n              '');\r\n            const importErrorStr = 'Cannot use import statement outside a ' +\r\n              'module';\r\n            if (StringPrototypeIncludes(e.message, importErrorStr)) {\r\n              e.message = 'Cannot use import statement inside the Node.js ' +\r\n                'REPL, alternatively use dynamic import: ' + toDynamicImport(ArrayPrototypeAt(self.lines, -1));\r\n              e.stack = SideEffectFreeRegExpPrototypeSymbolReplace(\r\n                /SyntaxError:.*\\n/,\r\n                e.stack,\r\n                `SyntaxError: ${e.message}\\n`);\r\n            }\r\n          } else if (self.replMode === module.exports.REPL_MODE_STRICT) {\r\n            e.stack = SideEffectFreeRegExpPrototypeSymbolReplace(\r\n              /(\\s+at\\s+REPL\\d+:)(\\d+)/,\r\n              e.stack,\r\n              (_, pre, line) => pre + (line - 1),\r\n            );\r\n          }\r\n        }\r\n        errStack = self.writer(e);\r\n\r\n        // Remove one line error braces to keep the old style in place.\r\n        if (errStack[0] === '[' && errStack[errStack.length - 1] === ']') {\r\n          errStack = StringPrototypeSlice(errStack, 1, -1);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!self.underscoreErrAssigned) {\r\n      self.lastError = e;\r\n    }\r\n\r\n    if (options[kStandaloneREPL] &&\r\n        process.listenerCount('uncaughtException') !== 0) {\r\n      process.nextTick(() => {\r\n        process.emit('uncaughtException', e);\r\n        self.clearBufferedCommand();\r\n        self.lines.level = [];\r\n        self.displayPrompt();\r\n      });\r\n    } else {\r\n      if (errStack === '') {\r\n        errStack = self.writer(e);\r\n      }\r\n      const lines = SideEffectFreeRegExpPrototypeSymbolSplit(/(?<=\\n)/, errStack);\r\n      let matched = false;\r\n\r\n      errStack = '';\r\n      ArrayPrototypeForEach(lines, (line) => {\r\n        if (!matched &&\r\n            RegExpPrototypeExec(/^\\[?([A-Z][a-z0-9_]*)*Error/, line) !== null) {\r\n          errStack += writer.options.breakLength >= line.length ?\r\n            `Uncaught ${line}` :\r\n            `Uncaught:\\n${line}`;\r\n          matched = true;\r\n        } else {\r\n          errStack += line;\r\n        }\r\n      });\r\n      if (!matched) {\r\n        const ln = lines.length === 1 ? ' ' : ':\\n';\r\n        errStack = `Uncaught${ln}${errStack}`;\r\n      }\r\n      // Normalize line endings.\r\n      errStack += StringPrototypeEndsWith(errStack, '\\n') ? '' : '\\n';\r\n      self.output.write(errStack);\r\n      self.clearBufferedCommand();\r\n      self.lines.level = [];\r\n      self.displayPrompt();\r\n    }\r\n  });\r\n\r\n  self.clearBufferedCommand();\r\n\r\n  function completer(text, cb) {\r\n    ReflectApply(complete, self,\r\n                 [text, self.editorMode ? self.completeOnEditorMode(cb) : cb]);\r\n  }\r\n\r\n  ReflectApply(Interface, this, [{\r\n    input: options.input,\r\n    output: options.output,\r\n    completer: options.completer || completer,\r\n    terminal: options.terminal,\r\n    historySize: options.historySize,\r\n    prompt,\r\n  }]);\r\n\r\n  self.resetContext();\r\n\r\n  this.commands = { __proto__: null };\r\n  defineDefaultCommands(this);\r\n\r\n  // Figure out which \"writer\" function to use\r\n  self.writer = options.writer || module.exports.writer;\r\n\r\n  if (self.writer === writer) {\r\n    // Conditionally turn on ANSI coloring.\r\n    writer.options.colors = self.useColors;\r\n\r\n    if (options[kStandaloneREPL]) {\r\n      ObjectDefineProperty(inspect, 'replDefaults', {\r\n        __proto__: null,\r\n        get() {\r\n          return writer.options;\r\n        },\r\n        set(options) {\r\n          validateObject(options, 'options');\r\n          return ObjectAssign(writer.options, options);\r\n        },\r\n        enumerable: true,\r\n        configurable: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  function _parseREPLKeyword(keyword, rest) {\r\n    const cmd = this.commands[keyword];\r\n    if (cmd) {\r\n      ReflectApply(cmd.action, this, [rest]);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  self.on('close', function emitExit() {\r\n    if (paused) {\r\n      ArrayPrototypePush(pausedBuffer, ['close']);\r\n      return;\r\n    }\r\n    self.emit('exit');\r\n  });\r\n\r\n  let sawSIGINT = false;\r\n  let sawCtrlD = false;\r\n  const prioritizedSigintQueue = new SafeSet();\r\n  self.on('SIGINT', function onSigInt() {\r\n    if (prioritizedSigintQueue.size > 0) {\r\n      for (const task of prioritizedSigintQueue) {\r\n        task();\r\n      }\r\n      return;\r\n    }\r\n\r\n    const empty = self.line.length === 0;\r\n    self.clearLine();\r\n    _turnOffEditorMode(self);\r\n\r\n    const cmd = self[kBufferedCommandSymbol];\r\n    if (!(cmd && cmd.length > 0) && empty) {\r\n      if (sawSIGINT) {\r\n        self.close();\r\n        sawSIGINT = false;\r\n        return;\r\n      }\r\n      self.output.write(\r\n        '(To exit, press Ctrl+C again or Ctrl+D or type .exit)\\n',\r\n      );\r\n      sawSIGINT = true;\r\n    } else {\r\n      sawSIGINT = false;\r\n    }\r\n\r\n    self.clearBufferedCommand();\r\n    self.lines.level = [];\r\n    self.displayPrompt();\r\n  });\r\n\r\n  self.on('line', function onLine(cmd) {\r\n    debug('line %j', cmd);\r\n    cmd = cmd || '';\r\n    sawSIGINT = false;\r\n\r\n    if (self.editorMode) {\r\n      self[kBufferedCommandSymbol] += cmd + '\\n';\r\n\r\n      // code alignment\r\n      const matches = self._sawKeyPress && !self[kLoadingSymbol] ?\r\n        RegExpPrototypeExec(/^\\s+/, cmd) : null;\r\n      if (matches) {\r\n        const prefix = matches[0];\r\n        self.write(prefix);\r\n        self.line = prefix;\r\n        self.cursor = prefix.length;\r\n      }\r\n      ReflectApply(_memory, self, [cmd]);\r\n      return;\r\n    }\r\n\r\n    // Check REPL keywords and empty lines against a trimmed line input.\r\n    const trimmedCmd = StringPrototypeTrim(cmd);\r\n\r\n    // Check to see if a REPL keyword was used. If it returns true,\r\n    // display next prompt and return.\r\n    if (trimmedCmd) {\r\n      if (StringPrototypeCharAt(trimmedCmd, 0) === '.' &&\r\n          StringPrototypeCharAt(trimmedCmd, 1) !== '.' &&\r\n          NumberIsNaN(NumberParseFloat(trimmedCmd))) {\r\n        const matches = RegExpPrototypeExec(/^\\.([^\\s]+)\\s*(.*)$/, trimmedCmd);\r\n        const keyword = matches && matches[1];\r\n        const rest = matches && matches[2];\r\n        if (ReflectApply(_parseREPLKeyword, self, [keyword, rest]) === true) {\r\n          return;\r\n        }\r\n        if (!self[kBufferedCommandSymbol]) {\r\n          self.output.write('Invalid REPL keyword\\n');\r\n          finish(null);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    const evalCmd = self[kBufferedCommandSymbol] + cmd + '\\n';\r\n\r\n    debug('eval %j', evalCmd);\r\n    self.eval(evalCmd, self.context, getREPLResourceName(), finish);\r\n\r\n    function finish(e, ret) {\r\n      debug('finish', e, ret);\r\n      ReflectApply(_memory, self, [cmd]);\r\n\r\n      if (e && !self[kBufferedCommandSymbol] &&\r\n          StringPrototypeStartsWith(StringPrototypeTrim(cmd), 'npm ')) {\r\n        self.output.write('npm should be run outside of the ' +\r\n                                'Node.js REPL, in your normal shell.\\n' +\r\n                                '(Press Ctrl+D to exit.)\\n');\r\n        self.displayPrompt();\r\n        return;\r\n      }\r\n\r\n      // If error was SyntaxError and not JSON.parse error\r\n      if (e) {\r\n        if (e instanceof Recoverable && !sawCtrlD) {\r\n          // Start buffering data like that:\r\n          // {\r\n          // ...  x: 1\r\n          // ... }\r\n          self[kBufferedCommandSymbol] += cmd + '\\n';\r\n          self.displayPrompt();\r\n          return;\r\n        }\r\n        self._domain.emit('error', e.err || e);\r\n      }\r\n\r\n      // Clear buffer if no SyntaxErrors\r\n      self.clearBufferedCommand();\r\n      sawCtrlD = false;\r\n\r\n      // If we got any output - print it (if no error)\r\n      if (!e &&\r\n          // When an invalid REPL command is used, error message is printed\r\n          // immediately. We don't have to print anything else. So, only when\r\n          // the second argument to this function is there, print it.\r\n          arguments.length === 2 &&\r\n          (!self.ignoreUndefined || ret !== undefined)) {\r\n        if (!self.underscoreAssigned) {\r\n          self.last = ret;\r\n        }\r\n        self.output.write(self.writer(ret) + '\\n');\r\n      }\r\n\r\n      // Display prompt again (unless we already did by emitting the 'error'\r\n      // event on the domain instance).\r\n      if (!e) {\r\n        self.displayPrompt();\r\n      }\r\n    }\r\n  });\r\n\r\n  self.on('SIGCONT', function onSigCont() {\r\n    if (self.editorMode) {\r\n      self.output.write(`${self._initialPrompt}.editor\\n`);\r\n      self.output.write(\r\n        '// Entering editor mode (Ctrl+D to finish, Ctrl+C to cancel)\\n');\r\n      self.output.write(`${self[kBufferedCommandSymbol]}\\n`);\r\n      self.prompt(true);\r\n    } else {\r\n      self.displayPrompt(true);\r\n    }\r\n  });\r\n\r\n  const { reverseSearch } = setupReverseSearch(this);\r\n\r\n  const {\r\n    clearPreview,\r\n    showPreview,\r\n  } = setupPreview(\r\n    this,\r\n    kContextId,\r\n    kBufferedCommandSymbol,\r\n    preview,\r\n  );\r\n\r\n  // Wrap readline tty to enable editor mode and pausing.\r\n  const ttyWrite = FunctionPrototypeBind(self._ttyWrite, self);\r\n  self._ttyWrite = (d, key) => {\r\n    key = key || {};\r\n    if (paused && !(self.breakEvalOnSigint && key.ctrl && key.name === 'c')) {\r\n      ArrayPrototypePush(pausedBuffer,\r\n                         ['key', [d, key], self.isCompletionEnabled]);\r\n      return;\r\n    }\r\n    if (!self.editorMode || !self.terminal) {\r\n      // Before exiting, make sure to clear the line.\r\n      if (key.ctrl && key.name === 'd' &&\r\n          self.cursor === 0 && self.line.length === 0) {\r\n        self.clearLine();\r\n      }\r\n      clearPreview(key);\r\n      if (!reverseSearch(d, key)) {\r\n        ttyWrite(d, key);\r\n        const showCompletionPreview = key.name !== 'escape';\r\n        showPreview(showCompletionPreview);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Editor mode\r\n    if (key.ctrl && !key.shift) {\r\n      switch (key.name) {\r\n        // TODO(BridgeAR): There should not be a special mode necessary for full\r\n        // multiline support.\r\n        case 'd': // End editor mode\r\n          _turnOffEditorMode(self);\r\n          sawCtrlD = true;\r\n          ttyWrite(d, { name: 'return' });\r\n          break;\r\n        case 'n': // Override next history item\r\n        case 'p': // Override previous history item\r\n          break;\r\n        default:\r\n          ttyWrite(d, key);\r\n      }\r\n    } else {\r\n      switch (key.name) {\r\n        case 'up':   // Override previous history item\r\n        case 'down': // Override next history item\r\n          break;\r\n        case 'tab':\r\n          // Prevent double tab behavior\r\n          self._previousKey = null;\r\n          ttyWrite(d, key);\r\n          break;\r\n        default:\r\n          ttyWrite(d, key);\r\n      }\r\n    }\r\n  };\r\n\r\n  self.displayPrompt();\r\n}\r\nObjectSetPrototypeOf(REPLServer.prototype, Interface.prototype);\r\nObjectSetPrototypeOf(REPLServer, Interface);\r\n\r\n// Prompt is a string to print on each line for the prompt,\r\n// source is a stream to use for I/O, defaulting to stdin/stdout.\r\nfunction start(prompt, source, eval_, useGlobal, ignoreUndefined, replMode) {\r\n  return new REPLServer(\r\n    prompt, source, eval_, useGlobal, ignoreUndefined, replMode);\r\n}\r\n\r\nREPLServer.prototype.setupHistory = function setupHistory(historyFile, cb) {\r\n  history(this, historyFile, cb);\r\n};\r\n\r\nREPLServer.prototype.clearBufferedCommand = function clearBufferedCommand() {\r\n  this[kBufferedCommandSymbol] = '';\r\n};\r\n\r\nREPLServer.prototype.close = function close() {\r\n  if (this.terminal && this._flushing && !this._closingOnFlush) {\r\n    this._closingOnFlush = true;\r\n    this.once('flushHistory', () =>\r\n      ReflectApply(Interface.prototype.close, this, []),\r\n    );\r\n\r\n    return;\r\n  }\r\n  process.nextTick(() =>\r\n    ReflectApply(Interface.prototype.close, this, []),\r\n  );\r\n};\r\n\r\nREPLServer.prototype.createContext = function() {\r\n  let context;\r\n  if (this.useGlobal) {\r\n    context = globalThis;\r\n  } else {\r\n    sendInspectorCommand((session) => {\r\n      session.post('Runtime.enable');\r\n      session.once('Runtime.executionContextCreated', ({ params }) => {\r\n        this[kContextId] = params.context.id;\r\n      });\r\n      context = vm.createContext();\r\n      session.post('Runtime.disable');\r\n    }, () => {\r\n      context = vm.createContext();\r\n    });\r\n    ArrayPrototypeForEach(ObjectGetOwnPropertyNames(globalThis), (name) => {\r\n      // Only set properties that do not already exist as a global builtin.\r\n      if (!globalBuiltins.has(name)) {\r\n        ObjectDefineProperty(context, name,\r\n                             {\r\n                               __proto__: null,\r\n                               ...ObjectGetOwnPropertyDescriptor(globalThis, name),\r\n                             });\r\n      }\r\n    });\r\n    context.global = context;\r\n    const _console = new Console(this.output);\r\n    ObjectDefineProperty(context, 'console', {\r\n      __proto__: null,\r\n      configurable: true,\r\n      writable: true,\r\n      value: _console,\r\n    });\r\n  }\r\n\r\n  const replModule = new CJSModule('<repl>');\r\n  replModule.paths = CJSModule._resolveLookupPaths('<repl>', parentModule);\r\n\r\n  ObjectDefineProperty(context, 'module', {\r\n    __proto__: null,\r\n    configurable: true,\r\n    writable: true,\r\n    value: replModule,\r\n  });\r\n  ObjectDefineProperty(context, 'require', {\r\n    __proto__: null,\r\n    configurable: true,\r\n    writable: true,\r\n    value: makeRequireFunction(replModule),\r\n  });\r\n\r\n  addBuiltinLibsToObject(context, '<REPL>');\r\n\r\n  return context;\r\n};\r\n\r\nREPLServer.prototype.resetContext = function() {\r\n  this.context = this.createContext();\r\n  this.underscoreAssigned = false;\r\n  this.underscoreErrAssigned = false;\r\n  // TODO(BridgeAR): Deprecate the lines.\r\n  this.lines = [];\r\n  this.lines.level = [];\r\n\r\n  ObjectDefineProperty(this.context, '_', {\r\n    __proto__: null,\r\n    configurable: true,\r\n    get: () => this.last,\r\n    set: (value) => {\r\n      this.last = value;\r\n      if (!this.underscoreAssigned) {\r\n        this.underscoreAssigned = true;\r\n        this.output.write('Expression assignment to _ now disabled.\\n');\r\n      }\r\n    },\r\n  });\r\n\r\n  ObjectDefineProperty(this.context, '_error', {\r\n    __proto__: null,\r\n    configurable: true,\r\n    get: () => this.lastError,\r\n    set: (value) => {\r\n      this.lastError = value;\r\n      if (!this.underscoreErrAssigned) {\r\n        this.underscoreErrAssigned = true;\r\n        this.output.write(\r\n          'Expression assignment to _error now disabled.\\n');\r\n      }\r\n    },\r\n  });\r\n\r\n  // Allow REPL extensions to extend the new context\r\n  this.emit('reset', this.context);\r\n};\r\n\r\nREPLServer.prototype.displayPrompt = function(preserveCursor) {\r\n  let prompt = this._initialPrompt;\r\n  if (this[kBufferedCommandSymbol].length) {\r\n    prompt = '...';\r\n    const len = this.lines.level.length ? this.lines.level.length - 1 : 0;\r\n    const levelInd = StringPrototypeRepeat('..', len);\r\n    prompt += levelInd + ' ';\r\n  }\r\n\r\n  // Do not overwrite `_initialPrompt` here\r\n  ReflectApply(Interface.prototype.setPrompt, this, [prompt]);\r\n  this.prompt(preserveCursor);\r\n};\r\n\r\n// When invoked as an API method, overwrite _initialPrompt\r\nREPLServer.prototype.setPrompt = function setPrompt(prompt) {\r\n  this._initialPrompt = prompt;\r\n  ReflectApply(Interface.prototype.setPrompt, this, [prompt]);\r\n};\r\n\r\nconst importRE = /\\bimport\\s*\\(\\s*['\"`](([\\w@./:-]+\\/)?(?:[\\w@./:-]*))(?![^'\"`])$/;\r\nconst requireRE = /\\brequire\\s*\\(\\s*['\"`](([\\w@./:-]+\\/)?(?:[\\w@./:-]*))(?![^'\"`])$/;\r\nconst fsAutoCompleteRE = /fs(?:\\.promises)?\\.\\s*[a-z][a-zA-Z]+\\(\\s*[\"'](.*)/;\r\nconst simpleExpressionRE =\r\n    /(?:[\\w$'\"`[{(](?:\\w|\\$|['\"`\\]})])*\\??\\.)*[a-zA-Z_$](?:\\w|\\$)*\\??\\.?$/;\r\nconst versionedFileNamesRe = /-\\d+\\.\\d+/;\r\n\r\nfunction isIdentifier(str) {\r\n  if (str === '') {\r\n    return false;\r\n  }\r\n  const first = StringPrototypeCodePointAt(str, 0);\r\n  if (!isIdentifierStart(first)) {\r\n    return false;\r\n  }\r\n  const firstLen = first > 0xffff ? 2 : 1;\r\n  for (let i = firstLen; i < str.length; i += 1) {\r\n    const cp = StringPrototypeCodePointAt(str, i);\r\n    if (!isIdentifierChar(cp)) {\r\n      return false;\r\n    }\r\n    if (cp > 0xffff) {\r\n      i += 1;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction isNotLegacyObjectPrototypeMethod(str) {\r\n  return isIdentifier(str) &&\r\n    str !== '__defineGetter__' &&\r\n    str !== '__defineSetter__' &&\r\n    str !== '__lookupGetter__' &&\r\n    str !== '__lookupSetter__';\r\n}\r\n\r\nfunction filteredOwnPropertyNames(obj) {\r\n  if (!obj) return [];\r\n  // `Object.prototype` is the only non-contrived object that fulfills\r\n  // `Object.getPrototypeOf(X) === null &&\r\n  //  Object.getPrototypeOf(Object.getPrototypeOf(X.constructor)) === X`.\r\n  let isObjectPrototype = false;\r\n  if (ObjectGetPrototypeOf(obj) === null) {\r\n    const ctorDescriptor = ObjectGetOwnPropertyDescriptor(obj, 'constructor');\r\n    if (ctorDescriptor && ctorDescriptor.value) {\r\n      const ctorProto = ObjectGetPrototypeOf(ctorDescriptor.value);\r\n      isObjectPrototype = ctorProto && ObjectGetPrototypeOf(ctorProto) === obj;\r\n    }\r\n  }\r\n  const filter = ALL_PROPERTIES | SKIP_SYMBOLS;\r\n  return ArrayPrototypeFilter(\r\n    getOwnNonIndexProperties(obj, filter),\r\n    isObjectPrototype ? isNotLegacyObjectPrototypeMethod : isIdentifier);\r\n}\r\n\r\nfunction getGlobalLexicalScopeNames(contextId) {\r\n  return sendInspectorCommand((session) => {\r\n    let names = [];\r\n    session.post('Runtime.globalLexicalScopeNames', {\r\n      executionContextId: contextId,\r\n    }, (error, result) => {\r\n      if (!error) names = result.names;\r\n    });\r\n    return names;\r\n  }, () => []);\r\n}\r\n\r\nREPLServer.prototype.complete = function() {\r\n  ReflectApply(this.completer, this, arguments);\r\n};\r\n\r\nfunction gracefulReaddir(...args) {\r\n  try {\r\n    return ReflectApply(fs.readdirSync, null, args);\r\n  } catch {\r\n    // Continue regardless of error.\r\n  }\r\n}\r\n\r\nfunction completeFSFunctions(match) {\r\n  let baseName = '';\r\n  let filePath = match[1];\r\n  let fileList = gracefulReaddir(filePath, { withFileTypes: true });\r\n\r\n  if (!fileList) {\r\n    baseName = path.basename(filePath);\r\n    filePath = path.dirname(filePath);\r\n    fileList = gracefulReaddir(filePath, { withFileTypes: true }) || [];\r\n  }\r\n\r\n  const completions = ArrayPrototypeMap(\r\n    ArrayPrototypeFilter(\r\n      fileList,\r\n      (dirent) => StringPrototypeStartsWith(dirent.name, baseName),\r\n    ),\r\n    (d) => d.name,\r\n  );\r\n\r\n  return [[completions], baseName];\r\n}\r\n\r\n// Provide a list of completions for the given leading text. This is\r\n// given to the readline interface for handling tab completion.\r\n//\r\n// Example:\r\n//  complete('let foo = util.')\r\n//    -> [['util.print', 'util.debug', 'util.log', 'util.inspect'],\r\n//        'util.' ]\r\n//\r\n// Warning: This eval's code like \"foo.bar.baz\", so it will run property\r\n// getter code.\r\nfunction complete(line, callback) {\r\n  // List of completion lists, one for each inheritance \"level\"\r\n  let completionGroups = [];\r\n  let completeOn, group;\r\n\r\n  // Ignore right whitespace. It could change the outcome.\r\n  line = StringPrototypeTrimStart(line);\r\n\r\n  let filter = '';\r\n\r\n  let match;\r\n  // REPL commands (e.g. \".break\").\r\n  if ((match = RegExpPrototypeExec(/^\\s*\\.(\\w*)$/, line)) !== null) {\r\n    ArrayPrototypePush(completionGroups, ObjectKeys(this.commands));\r\n    completeOn = match[1];\r\n    if (completeOn.length) {\r\n      filter = completeOn;\r\n    }\r\n  } else if ((match = RegExpPrototypeExec(requireRE, line)) !== null) {\r\n    // require('...<Tab>')\r\n    completeOn = match[1];\r\n    filter = completeOn;\r\n    if (this.allowBlockingCompletions) {\r\n      const subdir = match[2] || '';\r\n      const extensions = ObjectKeys(this.context.require.extensions);\r\n      const indexes = ArrayPrototypeMap(extensions,\r\n                                        (extension) => `index${extension}`);\r\n      ArrayPrototypePush(indexes, 'package.json', 'index');\r\n\r\n      group = [];\r\n      let paths = [];\r\n\r\n      if (completeOn === '.') {\r\n        group = ['./', '../'];\r\n      } else if (completeOn === '..') {\r\n        group = ['../'];\r\n      } else if (RegExpPrototypeExec(/^\\.\\.?\\//, completeOn) !== null) {\r\n        paths = [process.cwd()];\r\n      } else {\r\n        paths = [];\r\n        ArrayPrototypePushApply(paths, module.paths);\r\n        ArrayPrototypePushApply(paths, CJSModule.globalPaths);\r\n      }\r\n\r\n      ArrayPrototypeForEach(paths, (dir) => {\r\n        dir = path.resolve(dir, subdir);\r\n        const dirents = gracefulReaddir(dir, { withFileTypes: true }) || [];\r\n        ArrayPrototypeForEach(dirents, (dirent) => {\r\n          if (RegExpPrototypeExec(versionedFileNamesRe, dirent.name) !== null ||\r\n              dirent.name === '.npm') {\r\n            // Exclude versioned names that 'npm' installs.\r\n            return;\r\n          }\r\n          const extension = path.extname(dirent.name);\r\n          const base = StringPrototypeSlice(dirent.name, 0, -extension.length);\r\n          if (!dirent.isDirectory()) {\r\n            if (StringPrototypeIncludes(extensions, extension) &&\r\n                (!subdir || base !== 'index')) {\r\n              ArrayPrototypePush(group, `${subdir}${base}`);\r\n            }\r\n            return;\r\n          }\r\n          ArrayPrototypePush(group, `${subdir}${dirent.name}/`);\r\n          const absolute = path.resolve(dir, dirent.name);\r\n          if (ArrayPrototypeSome(\r\n            gracefulReaddir(absolute) || [],\r\n            (subfile) => ArrayPrototypeIncludes(indexes, subfile),\r\n          )) {\r\n            ArrayPrototypePush(group, `${subdir}${dirent.name}`);\r\n          }\r\n        });\r\n      });\r\n      if (group.length) {\r\n        ArrayPrototypePush(completionGroups, group);\r\n      }\r\n    }\r\n\r\n    ArrayPrototypePush(completionGroups, _builtinLibs, nodeSchemeBuiltinLibs);\r\n  } else if ((match = RegExpPrototypeExec(importRE, line)) !== null) {\r\n    // import('...<Tab>')\r\n    completeOn = match[1];\r\n    filter = completeOn;\r\n    if (this.allowBlockingCompletions) {\r\n      const subdir = match[2] || '';\r\n      // File extensions that can be imported:\r\n      const extensions = ObjectKeys(extensionFormatMap);\r\n\r\n      // Only used when loading bare module specifiers from `node_modules`:\r\n      const indexes = ArrayPrototypeMap(extensions, (ext) => `index${ext}`);\r\n      ArrayPrototypePush(indexes, 'package.json');\r\n\r\n      group = [];\r\n      let paths = [];\r\n      if (completeOn === '.') {\r\n        group = ['./', '../'];\r\n      } else if (completeOn === '..') {\r\n        group = ['../'];\r\n      } else if (RegExpPrototypeExec(/^\\.\\.?\\//, completeOn) !== null) {\r\n        paths = [process.cwd()];\r\n      } else {\r\n        paths = ArrayPrototypeSlice(module.paths);\r\n      }\r\n\r\n      ArrayPrototypeForEach(paths, (dir) => {\r\n        dir = path.resolve(dir, subdir);\r\n        const isInNodeModules = path.basename(dir) === 'node_modules';\r\n        const dirents = gracefulReaddir(dir, { withFileTypes: true }) || [];\r\n        ArrayPrototypeForEach(dirents, (dirent) => {\r\n          const { name } = dirent;\r\n          if (RegExpPrototypeExec(versionedFileNamesRe, name) !== null ||\r\n              name === '.npm') {\r\n            // Exclude versioned names that 'npm' installs.\r\n            return;\r\n          }\r\n\r\n          if (!dirent.isDirectory()) {\r\n            const extension = path.extname(name);\r\n            if (StringPrototypeIncludes(extensions, extension)) {\r\n              ArrayPrototypePush(group, `${subdir}${name}`);\r\n            }\r\n            return;\r\n          }\r\n\r\n          ArrayPrototypePush(group, `${subdir}${name}/`);\r\n          if (!subdir && isInNodeModules) {\r\n            const absolute = path.resolve(dir, name);\r\n            const subfiles = gracefulReaddir(absolute) || [];\r\n            if (ArrayPrototypeSome(subfiles, (subfile) => {\r\n              return ArrayPrototypeIncludes(indexes, subfile);\r\n            })) {\r\n              ArrayPrototypePush(group, `${subdir}${name}`);\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      if (group.length) {\r\n        ArrayPrototypePush(completionGroups, group);\r\n      }\r\n    }\r\n\r\n    ArrayPrototypePush(completionGroups, _builtinLibs, nodeSchemeBuiltinLibs);\r\n  } else if ((match = RegExpPrototypeExec(fsAutoCompleteRE, line)) !== null &&\r\n             this.allowBlockingCompletions) {\r\n    ({ 0: completionGroups, 1: completeOn } = completeFSFunctions(match));\r\n  // Handle variable member lookup.\r\n  // We support simple chained expressions like the following (no function\r\n  // calls, etc.). That is for simplicity and also because we *eval* that\r\n  // leading expression so for safety (see WARNING above) don't want to\r\n  // eval function calls.\r\n  //\r\n  //   foo.bar<|>     # completions for 'foo' with filter 'bar'\r\n  //   spam.eggs.<|>  # completions for 'spam.eggs' with filter ''\r\n  //   foo<|>         # all scope vars with filter 'foo'\r\n  //   foo.<|>        # completions for 'foo' with filter ''\r\n  } else if (line.length === 0 ||\r\n             RegExpPrototypeExec(/\\w|\\.|\\$/, line[line.length - 1]) !== null) {\r\n    const { 0: match } = RegExpPrototypeExec(simpleExpressionRE, line) || [''];\r\n    if (line.length !== 0 && !match) {\r\n      completionGroupsLoaded();\r\n      return;\r\n    }\r\n    let expr = '';\r\n    completeOn = match;\r\n    if (StringPrototypeEndsWith(line, '.')) {\r\n      expr = StringPrototypeSlice(match, 0, -1);\r\n    } else if (line.length !== 0) {\r\n      const bits = StringPrototypeSplit(match, '.');\r\n      filter = ArrayPrototypePop(bits);\r\n      expr = ArrayPrototypeJoin(bits, '.');\r\n    }\r\n\r\n    // Resolve expr and get its completions.\r\n    if (!expr) {\r\n      // Get global vars synchronously\r\n      ArrayPrototypePush(completionGroups,\r\n                         getGlobalLexicalScopeNames(this[kContextId]));\r\n      let contextProto = this.context;\r\n      while ((contextProto = ObjectGetPrototypeOf(contextProto)) !== null) {\r\n        ArrayPrototypePush(completionGroups,\r\n                           filteredOwnPropertyNames(contextProto));\r\n      }\r\n      const contextOwnNames = filteredOwnPropertyNames(this.context);\r\n      if (!this.useGlobal) {\r\n        // When the context is not `global`, builtins are not own\r\n        // properties of it.\r\n        // `globalBuiltins` is a `SafeSet`, not an Array-like.\r\n        ArrayPrototypePush(contextOwnNames, ...globalBuiltins);\r\n      }\r\n      ArrayPrototypePush(completionGroups, contextOwnNames);\r\n      if (filter !== '') addCommonWords(completionGroups);\r\n      completionGroupsLoaded();\r\n      return;\r\n    }\r\n\r\n    let chaining = '.';\r\n    if (StringPrototypeEndsWith(expr, '?')) {\r\n      expr = StringPrototypeSlice(expr, 0, -1);\r\n      chaining = '?.';\r\n    }\r\n\r\n    const memberGroups = [];\r\n    const evalExpr = `try { ${expr} } catch {}`;\r\n    this.eval(evalExpr, this.context, getREPLResourceName(), (e, obj) => {\r\n      try {\r\n        let p;\r\n        if ((typeof obj === 'object' && obj !== null) ||\r\n            typeof obj === 'function') {\r\n          memberGroups.push(filteredOwnPropertyNames(obj));\r\n          p = ObjectGetPrototypeOf(obj);\r\n        } else {\r\n          p = obj.constructor ? obj.constructor.prototype : null;\r\n        }\r\n        // Circular refs possible? Let's guard against that.\r\n        let sentinel = 5;\r\n        while (p !== null && sentinel-- !== 0) {\r\n          memberGroups.push(filteredOwnPropertyNames(p));\r\n          p = ObjectGetPrototypeOf(p);\r\n        }\r\n      } catch {\r\n        // Maybe a Proxy object without `getOwnPropertyNames` trap.\r\n        // We simply ignore it here, as we don't want to break the\r\n        // autocompletion. Fixes the bug\r\n        // https://github.com/nodejs/node/issues/2119\r\n      }\r\n\r\n      if (memberGroups.length) {\r\n        expr += chaining;\r\n        ArrayPrototypeForEach(memberGroups, (group) => {\r\n          ArrayPrototypePush(completionGroups,\r\n                             ArrayPrototypeMap(group,\r\n                                               (member) => `${expr}${member}`));\r\n        });\r\n        if (filter) {\r\n          filter = `${expr}${filter}`;\r\n        }\r\n      }\r\n\r\n      completionGroupsLoaded();\r\n    });\r\n    return;\r\n  }\r\n\r\n  return completionGroupsLoaded();\r\n\r\n  // Will be called when all completionGroups are in place\r\n  // Useful for async autocompletion\r\n  function completionGroupsLoaded() {\r\n    // Filter, sort (within each group), uniq and merge the completion groups.\r\n    if (completionGroups.length && filter) {\r\n      const newCompletionGroups = [];\r\n      const lowerCaseFilter = StringPrototypeToLocaleLowerCase(filter);\r\n      ArrayPrototypeForEach(completionGroups, (group) => {\r\n        const filteredGroup = ArrayPrototypeFilter(group, (str) => {\r\n          // Filter is always case-insensitive following chromium autocomplete\r\n          // behavior.\r\n          return StringPrototypeStartsWith(\r\n            StringPrototypeToLocaleLowerCase(str),\r\n            lowerCaseFilter,\r\n          );\r\n        });\r\n        if (filteredGroup.length) {\r\n          ArrayPrototypePush(newCompletionGroups, filteredGroup);\r\n        }\r\n      });\r\n      completionGroups = newCompletionGroups;\r\n    }\r\n\r\n    const completions = [];\r\n    // Unique completions across all groups.\r\n    const uniqueSet = new SafeSet();\r\n    uniqueSet.add('');\r\n    // Completion group 0 is the \"closest\" (least far up the inheritance\r\n    // chain) so we put its completions last: to be closest in the REPL.\r\n    ArrayPrototypeForEach(completionGroups, (group) => {\r\n      ArrayPrototypeSort(group, (a, b) => (b > a ? 1 : -1));\r\n      const setSize = uniqueSet.size;\r\n      ArrayPrototypeForEach(group, (entry) => {\r\n        if (!uniqueSet.has(entry)) {\r\n          ArrayPrototypeUnshift(completions, entry);\r\n          uniqueSet.add(entry);\r\n        }\r\n      });\r\n      // Add a separator between groups.\r\n      if (uniqueSet.size !== setSize) {\r\n        ArrayPrototypeUnshift(completions, '');\r\n      }\r\n    });\r\n\r\n    // Remove obsolete group entry, if present.\r\n    if (completions[0] === '') {\r\n      ArrayPrototypeShift(completions);\r\n    }\r\n\r\n    callback(null, [completions, completeOn]);\r\n  }\r\n}\r\n\r\nREPLServer.prototype.completeOnEditorMode = (callback) => (err, results) => {\r\n  if (err) return callback(err);\r\n\r\n  const { 0: completions, 1: completeOn = '' } = results;\r\n  let result = ArrayPrototypeFilter(completions, Boolean);\r\n\r\n  if (completeOn && result.length !== 0) {\r\n    result = [commonPrefix(result)];\r\n  }\r\n\r\n  callback(null, [result, completeOn]);\r\n};\r\n\r\nREPLServer.prototype.defineCommand = function(keyword, cmd) {\r\n  if (typeof cmd === 'function') {\r\n    cmd = { action: cmd };\r\n  } else {\r\n    validateFunction(cmd.action, 'cmd.action');\r\n  }\r\n  this.commands[keyword] = cmd;\r\n};\r\n\r\n// TODO(BridgeAR): This should be replaced with acorn to build an AST. The\r\n// language became more complex and using a simple approach like this is not\r\n// sufficient anymore.\r\nfunction _memory(cmd) {\r\n  const self = this;\r\n  self.lines = self.lines || [];\r\n  self.lines.level = self.lines.level || [];\r\n\r\n  // Save the line so I can do magic later\r\n  if (cmd) {\r\n    const len = self.lines.level.length ? self.lines.level.length - 1 : 0;\r\n    ArrayPrototypePush(self.lines, StringPrototypeRepeat('  ', len) + cmd);\r\n  } else {\r\n    // I don't want to not change the format too much...\r\n    ArrayPrototypePush(self.lines, '');\r\n  }\r\n\r\n  if (!cmd) {\r\n    self.lines.level = [];\r\n    return;\r\n  }\r\n\r\n  // I need to know \"depth.\"\r\n  // Because I can not tell the difference between a } that\r\n  // closes an object literal and a } that closes a function\r\n  const countMatches = (regex, str) => {\r\n    let count = 0;\r\n    while (RegExpPrototypeExec(regex, str) !== null) count++;\r\n    return count;\r\n  };\r\n\r\n  // Going down is { and (   e.g. function() {\r\n  // going up is } and )\r\n  const dw = countMatches(/[{(]/g, cmd);\r\n  const up = countMatches(/[})]/g, cmd);\r\n  let depth = dw.length - up.length;\r\n\r\n  if (depth) {\r\n    (function workIt() {\r\n      if (depth > 0) {\r\n        // Going... down.\r\n        // Push the line#, depth count, and if the line is a function.\r\n        // Since JS only has functional scope I only need to remove\r\n        // \"function() {\" lines, clearly this will not work for\r\n        // \"function()\r\n        // {\" but nothing should break, only tab completion for local\r\n        // scope will not work for this function.\r\n        ArrayPrototypePush(self.lines.level, {\r\n          line: self.lines.length - 1,\r\n          depth: depth,\r\n        });\r\n      } else if (depth < 0) {\r\n        // Going... up.\r\n        const curr = ArrayPrototypePop(self.lines.level);\r\n        if (curr) {\r\n          const tmp = curr.depth + depth;\r\n          if (tmp < 0) {\r\n            // More to go, recurse\r\n            depth += curr.depth;\r\n            workIt();\r\n          } else if (tmp > 0) {\r\n            // Remove and push back\r\n            curr.depth += depth;\r\n            ArrayPrototypePush(self.lines.level, curr);\r\n          }\r\n        }\r\n      }\r\n    }());\r\n  }\r\n}\r\n\r\nfunction addCommonWords(completionGroups) {\r\n  // Only words which do not yet exist as global property should be added to\r\n  // this list.\r\n  ArrayPrototypePush(completionGroups, [\r\n    'async', 'await', 'break', 'case', 'catch', 'const', 'continue',\r\n    'debugger', 'default', 'delete', 'do', 'else', 'export', 'false',\r\n    'finally', 'for', 'function', 'if', 'import', 'in', 'instanceof', 'let',\r\n    'new', 'null', 'return', 'switch', 'this', 'throw', 'true', 'try',\r\n    'typeof', 'var', 'void', 'while', 'with', 'yield',\r\n  ]);\r\n}\r\n\r\nfunction _turnOnEditorMode(repl) {\r\n  repl.editorMode = true;\r\n  ReflectApply(Interface.prototype.setPrompt, repl, ['']);\r\n}\r\n\r\nfunction _turnOffEditorMode(repl) {\r\n  repl.editorMode = false;\r\n  repl.setPrompt(repl._initialPrompt);\r\n}\r\n\r\nfunction defineDefaultCommands(repl) {\r\n  repl.defineCommand('break', {\r\n    help: 'Sometimes you get stuck, this gets you out',\r\n    action: function() {\r\n      this.clearBufferedCommand();\r\n      this.displayPrompt();\r\n    },\r\n  });\r\n\r\n  let clearMessage;\r\n  if (repl.useGlobal) {\r\n    clearMessage = 'Alias for .break';\r\n  } else {\r\n    clearMessage = 'Break, and also clear the local context';\r\n  }\r\n  repl.defineCommand('clear', {\r\n    help: clearMessage,\r\n    action: function() {\r\n      this.clearBufferedCommand();\r\n      if (!this.useGlobal) {\r\n        this.output.write('Clearing context...\\n');\r\n        this.resetContext();\r\n      }\r\n      this.displayPrompt();\r\n    },\r\n  });\r\n\r\n  repl.defineCommand('exit', {\r\n    help: 'Exit the REPL',\r\n    action: function() {\r\n      this.close();\r\n    },\r\n  });\r\n\r\n  repl.defineCommand('help', {\r\n    help: 'Print this help message',\r\n    action: function() {\r\n      const names = ArrayPrototypeSort(ObjectKeys(this.commands));\r\n      const longestNameLength = MathMaxApply(\r\n        ArrayPrototypeMap(names, (name) => name.length),\r\n      );\r\n      ArrayPrototypeForEach(names, (name) => {\r\n        const cmd = this.commands[name];\r\n        const spaces =\r\n          StringPrototypeRepeat(' ', longestNameLength - name.length + 3);\r\n        const line = `.${name}${cmd.help ? spaces + cmd.help : ''}\\n`;\r\n        this.output.write(line);\r\n      });\r\n      this.output.write('\\nPress Ctrl+C to abort current expression, ' +\r\n        'Ctrl+D to exit the REPL\\n');\r\n      this.displayPrompt();\r\n    },\r\n  });\r\n\r\n  repl.defineCommand('save', {\r\n    help: 'Save all evaluated commands in this REPL session to a file',\r\n    action: function(file) {\r\n      try {\r\n        if (file === '') {\r\n          throw new ERR_MISSING_ARGS('file');\r\n        }\r\n        fs.writeFileSync(file, ArrayPrototypeJoin(this.lines, '\\n'));\r\n        this.output.write(`Session saved to: ${file}\\n`);\r\n      } catch (error) {\r\n        if (error instanceof ERR_MISSING_ARGS) {\r\n          this.output.write(`${error.message}\\n`);\r\n        } else {\r\n          this.output.write(`Failed to save: ${file}\\n`);\r\n        }\r\n      }\r\n      this.displayPrompt();\r\n    },\r\n  });\r\n\r\n  repl.defineCommand('load', {\r\n    help: 'Load JS from a file into the REPL session',\r\n    action: function(file) {\r\n      try {\r\n        if (file === '') {\r\n          throw new ERR_MISSING_ARGS('file');\r\n        }\r\n        const stats = fs.statSync(file);\r\n        if (stats && stats.isFile()) {\r\n          _turnOnEditorMode(this);\r\n          this[kLoadingSymbol] = true;\r\n          const data = fs.readFileSync(file, 'utf8');\r\n          this.write(data);\r\n          this[kLoadingSymbol] = false;\r\n          _turnOffEditorMode(this);\r\n          this.write('\\n');\r\n        } else {\r\n          this.output.write(\r\n            `Failed to load: ${file} is not a valid file\\n`,\r\n          );\r\n        }\r\n      } catch (error) {\r\n        if (error instanceof ERR_MISSING_ARGS) {\r\n          this.output.write(`${error.message}\\n`);\r\n        } else {\r\n          this.output.write(`Failed to load: ${file}\\n`);\r\n        }\r\n      }\r\n      this.displayPrompt();\r\n    },\r\n  });\r\n  if (repl.terminal) {\r\n    repl.defineCommand('editor', {\r\n      help: 'Enter editor mode',\r\n      action() {\r\n        _turnOnEditorMode(this);\r\n        this.output.write(\r\n          '// Entering editor mode (Ctrl+D to finish, Ctrl+C to cancel)\\n');\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nfunction Recoverable(err) {\r\n  this.err = err;\r\n}\r\nObjectSetPrototypeOf(Recoverable.prototype, SyntaxErrorPrototype);\r\nObjectSetPrototypeOf(Recoverable, SyntaxError);\r\n\r\nmodule.exports = {\r\n  start,\r\n  writer,\r\n  REPLServer,\r\n  REPL_MODE_SLOPPY,\r\n  REPL_MODE_STRICT,\r\n  Recoverable,\r\n};\r\n\r\nObjectDefineProperty(module.exports, 'builtinModules', {\r\n  __proto__: null,\r\n  get: () => _builtinLibs,\r\n  set: (val) => _builtinLibs = val,\r\n  enumerable: true,\r\n  configurable: true,\r\n});\r\n\r\nObjectDefineProperty(module.exports, '_builtinLibs', {\r\n  __proto__: null,\r\n  get: pendingDeprecation ? deprecate(\r\n    () => _builtinLibs,\r\n    'repl._builtinLibs is deprecated. Check module.builtinModules instead',\r\n    'DEP0142',\r\n  ) : () => _builtinLibs,\r\n  set: pendingDeprecation ? deprecate(\r\n    (val) => _builtinLibs = val,\r\n    'repl._builtinLibs is deprecated. Check module.builtinModules instead',\r\n    'DEP0142',\r\n  ) : (val) => _builtinLibs = val,\r\n  enumerable: false,\r\n  configurable: true,\r\n});\r\n"
  },
  "201": {
    "metadata": {
      "scriptId": "201",
      "url": "node:internal/deps/acorn/acorn/dist/acorn",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 6002,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "5b2359f5169dc6b880fd653f19eae3fe2250abf7531fb9d223a2d590dd11879e",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 237203,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/deps/acorn/acorn/dist/acorn"
    },
    "source": "(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\r\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\r\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.acorn = {}));\r\n})(this, (function (exports) { 'use strict';\r\n\r\n  // This file was generated. Do not modify manually!\r\n  var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\r\n\r\n  // This file was generated. Do not modify manually!\r\n  var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];\r\n\r\n  // This file was generated. Do not modify manually!\r\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\r\n\r\n  // This file was generated. Do not modify manually!\r\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\r\n\r\n  // These are a run-length and offset encoded representation of the\r\n  // >0xffff code points that are a valid part of identifiers. The\r\n  // offset starts at 0x10000, and each pair of numbers represents an\r\n  // offset to the next range, and then a size of the range.\r\n\r\n  // Reserved word lists for various dialects of the language\r\n\r\n  var reservedWords = {\r\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\r\n    5: \"class enum extends super const export import\",\r\n    6: \"enum\",\r\n    strict: \"implements interface let package private protected public static yield\",\r\n    strictBind: \"eval arguments\"\r\n  };\r\n\r\n  // And the keywords\r\n\r\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\r\n\r\n  var keywords$1 = {\r\n    5: ecma5AndLessKeywords,\r\n    \"5module\": ecma5AndLessKeywords + \" export import\",\r\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\r\n  };\r\n\r\n  var keywordRelationalOperator = /^in(stanceof)?$/;\r\n\r\n  // ## Character categories\r\n\r\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\r\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\r\n\r\n  // This has a complexity linear to the value of the code. The\r\n  // assumption is that looking up astral identifier characters is\r\n  // rare.\r\n  function isInAstralSet(code, set) {\r\n    var pos = 0x10000;\r\n    for (var i = 0; i < set.length; i += 2) {\r\n      pos += set[i];\r\n      if (pos > code) { return false }\r\n      pos += set[i + 1];\r\n      if (pos >= code) { return true }\r\n    }\r\n    return false\r\n  }\r\n\r\n  // Test whether a given character code starts an identifier.\r\n\r\n  function isIdentifierStart(code, astral) {\r\n    if (code < 65) { return code === 36 }\r\n    if (code < 91) { return true }\r\n    if (code < 97) { return code === 95 }\r\n    if (code < 123) { return true }\r\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\r\n    if (astral === false) { return false }\r\n    return isInAstralSet(code, astralIdentifierStartCodes)\r\n  }\r\n\r\n  // Test whether a given character is part of an identifier.\r\n\r\n  function isIdentifierChar(code, astral) {\r\n    if (code < 48) { return code === 36 }\r\n    if (code < 58) { return true }\r\n    if (code < 65) { return false }\r\n    if (code < 91) { return true }\r\n    if (code < 97) { return code === 95 }\r\n    if (code < 123) { return true }\r\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\r\n    if (astral === false) { return false }\r\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\r\n  }\r\n\r\n  // ## Token types\r\n\r\n  // The assignment of fine-grained, information-carrying type objects\r\n  // allows the tokenizer to store the information it has about a\r\n  // token in a way that is very cheap for the parser to look up.\r\n\r\n  // All token type variables start with an underscore, to make them\r\n  // easy to recognize.\r\n\r\n  // The `beforeExpr` property is used to disambiguate between regular\r\n  // expressions and divisions. It is set on all token types that can\r\n  // be followed by an expression (thus, a slash after them would be a\r\n  // regular expression).\r\n  //\r\n  // The `startsExpr` property is used to check if the token ends a\r\n  // `yield` expression. It is set on all token types that either can\r\n  // directly start an expression (like a quotation mark) or can\r\n  // continue an expression (like the body of a string).\r\n  //\r\n  // `isLoop` marks a keyword as starting a loop, which is important\r\n  // to know when parsing a label, in order to allow or disallow\r\n  // continue jumps to that label.\r\n\r\n  var TokenType = function TokenType(label, conf) {\r\n    if ( conf === void 0 ) conf = {};\r\n\r\n    this.label = label;\r\n    this.keyword = conf.keyword;\r\n    this.beforeExpr = !!conf.beforeExpr;\r\n    this.startsExpr = !!conf.startsExpr;\r\n    this.isLoop = !!conf.isLoop;\r\n    this.isAssign = !!conf.isAssign;\r\n    this.prefix = !!conf.prefix;\r\n    this.postfix = !!conf.postfix;\r\n    this.binop = conf.binop || null;\r\n    this.updateContext = null;\r\n  };\r\n\r\n  function binop(name, prec) {\r\n    return new TokenType(name, {beforeExpr: true, binop: prec})\r\n  }\r\n  var beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\r\n\r\n  // Map keyword names to token types.\r\n\r\n  var keywords = {};\r\n\r\n  // Succinct definitions of keyword token types\r\n  function kw(name, options) {\r\n    if ( options === void 0 ) options = {};\r\n\r\n    options.keyword = name;\r\n    return keywords[name] = new TokenType(name, options)\r\n  }\r\n\r\n  var types$1 = {\r\n    num: new TokenType(\"num\", startsExpr),\r\n    regexp: new TokenType(\"regexp\", startsExpr),\r\n    string: new TokenType(\"string\", startsExpr),\r\n    name: new TokenType(\"name\", startsExpr),\r\n    privateId: new TokenType(\"privateId\", startsExpr),\r\n    eof: new TokenType(\"eof\"),\r\n\r\n    // Punctuation token types.\r\n    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\r\n    bracketR: new TokenType(\"]\"),\r\n    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\r\n    braceR: new TokenType(\"}\"),\r\n    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\r\n    parenR: new TokenType(\")\"),\r\n    comma: new TokenType(\",\", beforeExpr),\r\n    semi: new TokenType(\";\", beforeExpr),\r\n    colon: new TokenType(\":\", beforeExpr),\r\n    dot: new TokenType(\".\"),\r\n    question: new TokenType(\"?\", beforeExpr),\r\n    questionDot: new TokenType(\"?.\"),\r\n    arrow: new TokenType(\"=>\", beforeExpr),\r\n    template: new TokenType(\"template\"),\r\n    invalidTemplate: new TokenType(\"invalidTemplate\"),\r\n    ellipsis: new TokenType(\"...\", beforeExpr),\r\n    backQuote: new TokenType(\"`\", startsExpr),\r\n    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\r\n\r\n    // Operators. These carry several kinds of properties to help the\r\n    // parser use them properly (the presence of these properties is\r\n    // what categorizes them as operators).\r\n    //\r\n    // `binop`, when present, specifies that this operator is a binary\r\n    // operator, and will refer to its precedence.\r\n    //\r\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\r\n    // unary operator.\r\n    //\r\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\r\n    // binary operators with a very low precedence, that should result\r\n    // in AssignmentExpression nodes.\r\n\r\n    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\r\n    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\r\n    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\r\n    prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\r\n    logicalOR: binop(\"||\", 1),\r\n    logicalAND: binop(\"&&\", 2),\r\n    bitwiseOR: binop(\"|\", 3),\r\n    bitwiseXOR: binop(\"^\", 4),\r\n    bitwiseAND: binop(\"&\", 5),\r\n    equality: binop(\"==/!=/===/!==\", 6),\r\n    relational: binop(\"</>/<=/>=\", 7),\r\n    bitShift: binop(\"<</>>/>>>\", 8),\r\n    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\r\n    modulo: binop(\"%\", 10),\r\n    star: binop(\"*\", 10),\r\n    slash: binop(\"/\", 10),\r\n    starstar: new TokenType(\"**\", {beforeExpr: true}),\r\n    coalesce: binop(\"??\", 1),\r\n\r\n    // Keyword token types.\r\n    _break: kw(\"break\"),\r\n    _case: kw(\"case\", beforeExpr),\r\n    _catch: kw(\"catch\"),\r\n    _continue: kw(\"continue\"),\r\n    _debugger: kw(\"debugger\"),\r\n    _default: kw(\"default\", beforeExpr),\r\n    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\r\n    _else: kw(\"else\", beforeExpr),\r\n    _finally: kw(\"finally\"),\r\n    _for: kw(\"for\", {isLoop: true}),\r\n    _function: kw(\"function\", startsExpr),\r\n    _if: kw(\"if\"),\r\n    _return: kw(\"return\", beforeExpr),\r\n    _switch: kw(\"switch\"),\r\n    _throw: kw(\"throw\", beforeExpr),\r\n    _try: kw(\"try\"),\r\n    _var: kw(\"var\"),\r\n    _const: kw(\"const\"),\r\n    _while: kw(\"while\", {isLoop: true}),\r\n    _with: kw(\"with\"),\r\n    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\r\n    _this: kw(\"this\", startsExpr),\r\n    _super: kw(\"super\", startsExpr),\r\n    _class: kw(\"class\", startsExpr),\r\n    _extends: kw(\"extends\", beforeExpr),\r\n    _export: kw(\"export\"),\r\n    _import: kw(\"import\", startsExpr),\r\n    _null: kw(\"null\", startsExpr),\r\n    _true: kw(\"true\", startsExpr),\r\n    _false: kw(\"false\", startsExpr),\r\n    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\r\n    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\r\n    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\r\n    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\r\n    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\r\n  };\r\n\r\n  // Matches a whole line break (where CRLF is considered a single\r\n  // line break). Used to count lines.\r\n\r\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\r\n  var lineBreakG = new RegExp(lineBreak.source, \"g\");\r\n\r\n  function isNewLine(code) {\r\n    return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\r\n  }\r\n\r\n  function nextLineBreak(code, from, end) {\r\n    if ( end === void 0 ) end = code.length;\r\n\r\n    for (var i = from; i < end; i++) {\r\n      var next = code.charCodeAt(i);\r\n      if (isNewLine(next))\r\n        { return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1 }\r\n    }\r\n    return -1\r\n  }\r\n\r\n  var nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\r\n\r\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\r\n\r\n  var ref = Object.prototype;\r\n  var hasOwnProperty = ref.hasOwnProperty;\r\n  var toString = ref.toString;\r\n\r\n  var hasOwn = Object.hasOwn || (function (obj, propName) { return (\r\n    hasOwnProperty.call(obj, propName)\r\n  ); });\r\n\r\n  var isArray = Array.isArray || (function (obj) { return (\r\n    toString.call(obj) === \"[object Array]\"\r\n  ); });\r\n\r\n  var regexpCache = Object.create(null);\r\n\r\n  function wordsRegexp(words) {\r\n    return regexpCache[words] || (regexpCache[words] = new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\"))\r\n  }\r\n\r\n  function codePointToString(code) {\r\n    // UTF-16 Decoding\r\n    if (code <= 0xFFFF) { return String.fromCharCode(code) }\r\n    code -= 0x10000;\r\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\r\n  }\r\n\r\n  var loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\r\n\r\n  // These are used when `options.locations` is on, for the\r\n  // `startLoc` and `endLoc` properties.\r\n\r\n  var Position = function Position(line, col) {\r\n    this.line = line;\r\n    this.column = col;\r\n  };\r\n\r\n  Position.prototype.offset = function offset (n) {\r\n    return new Position(this.line, this.column + n)\r\n  };\r\n\r\n  var SourceLocation = function SourceLocation(p, start, end) {\r\n    this.start = start;\r\n    this.end = end;\r\n    if (p.sourceFile !== null) { this.source = p.sourceFile; }\r\n  };\r\n\r\n  // The `getLineInfo` function is mostly useful when the\r\n  // `locations` option is off (for performance reasons) and you\r\n  // want to find the line/column position for a given character\r\n  // offset. `input` should be the code string that the offset refers\r\n  // into.\r\n\r\n  function getLineInfo(input, offset) {\r\n    for (var line = 1, cur = 0;;) {\r\n      var nextBreak = nextLineBreak(input, cur, offset);\r\n      if (nextBreak < 0) { return new Position(line, offset - cur) }\r\n      ++line;\r\n      cur = nextBreak;\r\n    }\r\n  }\r\n\r\n  // A second argument must be given to configure the parser process.\r\n  // These options are recognized (only `ecmaVersion` is required):\r\n\r\n  var defaultOptions = {\r\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must be\r\n    // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10\r\n    // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `\"latest\"`\r\n    // (the latest version the library supports). This influences\r\n    // support for strict mode, the set of reserved words, and support\r\n    // for new syntax features.\r\n    ecmaVersion: null,\r\n    // `sourceType` indicates the mode the code should be parsed in.\r\n    // Can be either `\"script\"` or `\"module\"`. This influences global\r\n    // strict mode and parsing of `import` and `export` declarations.\r\n    sourceType: \"script\",\r\n    // `onInsertedSemicolon` can be a callback that will be called when\r\n    // a semicolon is automatically inserted. It will be passed the\r\n    // position of the inserted semicolon as an offset, and if\r\n    // `locations` is enabled, it is given the location as a `{line,\r\n    // column}` object as second argument.\r\n    onInsertedSemicolon: null,\r\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\r\n    // trailing commas.\r\n    onTrailingComma: null,\r\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\r\n    // Set `allowReserved` to a boolean value to explicitly turn this on\r\n    // an off. When this option has the value \"never\", reserved words\r\n    // and keywords can also not be used as property names.\r\n    allowReserved: null,\r\n    // When enabled, a return at the top level is not considered an\r\n    // error.\r\n    allowReturnOutsideFunction: false,\r\n    // When enabled, import/export statements are not constrained to\r\n    // appearing at the top of the program, and an import.meta expression\r\n    // in a script isn't considered an error.\r\n    allowImportExportEverywhere: false,\r\n    // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.\r\n    // When enabled, await identifiers are allowed to appear at the top-level scope,\r\n    // but they are still not allowed in non-async functions.\r\n    allowAwaitOutsideFunction: null,\r\n    // When enabled, super identifiers are not constrained to\r\n    // appearing in methods and do not raise an error when they appear elsewhere.\r\n    allowSuperOutsideMethod: null,\r\n    // When enabled, hashbang directive in the beginning of file is\r\n    // allowed and treated as a line comment. Enabled by default when\r\n    // `ecmaVersion` >= 2023.\r\n    allowHashBang: false,\r\n    // By default, the parser will verify that private properties are\r\n    // only used in places where they are valid and have been declared.\r\n    // Set this to false to turn such checks off.\r\n    checkPrivateFields: true,\r\n    // When `locations` is on, `loc` properties holding objects with\r\n    // `start` and `end` properties in `{line, column}` form (with\r\n    // line being 1-based and column 0-based) will be attached to the\r\n    // nodes.\r\n    locations: false,\r\n    // A function can be passed as `onToken` option, which will\r\n    // cause Acorn to call that function with object in the same\r\n    // format as tokens returned from `tokenizer().getToken()`. Note\r\n    // that you are not allowed to call the parser from the\r\n    // callback—that will corrupt its internal state.\r\n    onToken: null,\r\n    // A function can be passed as `onComment` option, which will\r\n    // cause Acorn to call that function with `(block, text, start,\r\n    // end)` parameters whenever a comment is skipped. `block` is a\r\n    // boolean indicating whether this is a block (`/* */`) comment,\r\n    // `text` is the content of the comment, and `start` and `end` are\r\n    // character offsets that denote the start and end of the comment.\r\n    // When the `locations` option is on, two more parameters are\r\n    // passed, the full `{line, column}` locations of the start and\r\n    // end of the comments. Note that you are not allowed to call the\r\n    // parser from the callback—that will corrupt its internal state.\r\n    // When this option has an array as value, objects representing the\r\n    // comments are pushed to it.\r\n    onComment: null,\r\n    // Nodes have their start and end characters offsets recorded in\r\n    // `start` and `end` properties (directly on the node, rather than\r\n    // the `loc` object, which holds line/column data. To also add a\r\n    // [semi-standardized][range] `range` property holding a `[start,\r\n    // end]` array with the same numbers, set the `ranges` option to\r\n    // `true`.\r\n    //\r\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\r\n    ranges: false,\r\n    // It is possible to parse multiple files into a single AST by\r\n    // passing the tree produced by parsing the first file as\r\n    // `program` option in subsequent parses. This will add the\r\n    // toplevel forms of the parsed file to the `Program` (top) node\r\n    // of an existing parse tree.\r\n    program: null,\r\n    // When `locations` is on, you can pass this to record the source\r\n    // file in every node's `loc` object.\r\n    sourceFile: null,\r\n    // This value, if given, is stored in every node, whether\r\n    // `locations` is on or off.\r\n    directSourceFile: null,\r\n    // When enabled, parenthesized expressions are represented by\r\n    // (non-standard) ParenthesizedExpression nodes\r\n    preserveParens: false\r\n  };\r\n\r\n  // Interpret and default an options object\r\n\r\n  var warnedAboutEcmaVersion = false;\r\n\r\n  function getOptions(opts) {\r\n    var options = {};\r\n\r\n    for (var opt in defaultOptions)\r\n      { options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt]; }\r\n\r\n    if (options.ecmaVersion === \"latest\") {\r\n      options.ecmaVersion = 1e8;\r\n    } else if (options.ecmaVersion == null) {\r\n      if (!warnedAboutEcmaVersion && typeof console === \"object\" && console.warn) {\r\n        warnedAboutEcmaVersion = true;\r\n        console.warn(\"Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.\");\r\n      }\r\n      options.ecmaVersion = 11;\r\n    } else if (options.ecmaVersion >= 2015) {\r\n      options.ecmaVersion -= 2009;\r\n    }\r\n\r\n    if (options.allowReserved == null)\r\n      { options.allowReserved = options.ecmaVersion < 5; }\r\n\r\n    if (!opts || opts.allowHashBang == null)\r\n      { options.allowHashBang = options.ecmaVersion >= 14; }\r\n\r\n    if (isArray(options.onToken)) {\r\n      var tokens = options.onToken;\r\n      options.onToken = function (token) { return tokens.push(token); };\r\n    }\r\n    if (isArray(options.onComment))\r\n      { options.onComment = pushComment(options, options.onComment); }\r\n\r\n    return options\r\n  }\r\n\r\n  function pushComment(options, array) {\r\n    return function(block, text, start, end, startLoc, endLoc) {\r\n      var comment = {\r\n        type: block ? \"Block\" : \"Line\",\r\n        value: text,\r\n        start: start,\r\n        end: end\r\n      };\r\n      if (options.locations)\r\n        { comment.loc = new SourceLocation(this, startLoc, endLoc); }\r\n      if (options.ranges)\r\n        { comment.range = [start, end]; }\r\n      array.push(comment);\r\n    }\r\n  }\r\n\r\n  // Each scope gets a bitset that may contain these flags\r\n  var\r\n      SCOPE_TOP = 1,\r\n      SCOPE_FUNCTION = 2,\r\n      SCOPE_ASYNC = 4,\r\n      SCOPE_GENERATOR = 8,\r\n      SCOPE_ARROW = 16,\r\n      SCOPE_SIMPLE_CATCH = 32,\r\n      SCOPE_SUPER = 64,\r\n      SCOPE_DIRECT_SUPER = 128,\r\n      SCOPE_CLASS_STATIC_BLOCK = 256,\r\n      SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;\r\n\r\n  function functionFlags(async, generator) {\r\n    return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\r\n  }\r\n\r\n  // Used in checkLVal* and declareName to determine the type of a binding\r\n  var\r\n      BIND_NONE = 0, // Not a binding\r\n      BIND_VAR = 1, // Var-style binding\r\n      BIND_LEXICAL = 2, // Let- or const-style binding\r\n      BIND_FUNCTION = 3, // Function declaration\r\n      BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\r\n      BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\r\n\r\n  var Parser = function Parser(options, input, startPos) {\r\n    this.options = options = getOptions(options);\r\n    this.sourceFile = options.sourceFile;\r\n    this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\r\n    var reserved = \"\";\r\n    if (options.allowReserved !== true) {\r\n      reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];\r\n      if (options.sourceType === \"module\") { reserved += \" await\"; }\r\n    }\r\n    this.reservedWords = wordsRegexp(reserved);\r\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\r\n    this.reservedWordsStrict = wordsRegexp(reservedStrict);\r\n    this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\r\n    this.input = String(input);\r\n\r\n    // Used to signal to callers of `readWord1` whether the word\r\n    // contained any escape sequences. This is needed because words with\r\n    // escape sequences must not be interpreted as keywords.\r\n    this.containsEsc = false;\r\n\r\n    // Set up token state\r\n\r\n    // The current position of the tokenizer in the input.\r\n    if (startPos) {\r\n      this.pos = startPos;\r\n      this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\r\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\r\n    } else {\r\n      this.pos = this.lineStart = 0;\r\n      this.curLine = 1;\r\n    }\r\n\r\n    // Properties of the current token:\r\n    // Its type\r\n    this.type = types$1.eof;\r\n    // For tokens that include more information than their type, the value\r\n    this.value = null;\r\n    // Its start and end offset\r\n    this.start = this.end = this.pos;\r\n    // And, if locations are used, the {line, column} object\r\n    // corresponding to those offsets\r\n    this.startLoc = this.endLoc = this.curPosition();\r\n\r\n    // Position information for the previous token\r\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\r\n    this.lastTokStart = this.lastTokEnd = this.pos;\r\n\r\n    // The context stack is used to superficially track syntactic\r\n    // context to predict whether a regular expression is allowed in a\r\n    // given position.\r\n    this.context = this.initialContext();\r\n    this.exprAllowed = true;\r\n\r\n    // Figure out if it's a module code.\r\n    this.inModule = options.sourceType === \"module\";\r\n    this.strict = this.inModule || this.strictDirective(this.pos);\r\n\r\n    // Used to signify the start of a potential arrow function\r\n    this.potentialArrowAt = -1;\r\n    this.potentialArrowInForAwait = false;\r\n\r\n    // Positions to delayed-check that yield/await does not exist in default parameters.\r\n    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\r\n    // Labels in scope.\r\n    this.labels = [];\r\n    // Thus-far undefined exports.\r\n    this.undefinedExports = Object.create(null);\r\n\r\n    // If enabled, skip leading hashbang line.\r\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\r\n      { this.skipLineComment(2); }\r\n\r\n    // Scope tracking for duplicate variable names (see scope.js)\r\n    this.scopeStack = [];\r\n    this.enterScope(SCOPE_TOP);\r\n\r\n    // For RegExp validation\r\n    this.regexpState = null;\r\n\r\n    // The stack of private names.\r\n    // Each element has two properties: 'declared' and 'used'.\r\n    // When it exited from the outermost class definition, all used private names must be declared.\r\n    this.privateNameStack = [];\r\n  };\r\n\r\n  var prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },canAwait: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true },allowNewDotTarget: { configurable: true },inClassStaticBlock: { configurable: true } };\r\n\r\n  Parser.prototype.parse = function parse () {\r\n    var node = this.options.program || this.startNode();\r\n    this.nextToken();\r\n    return this.parseTopLevel(node)\r\n  };\r\n\r\n  prototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\r\n\r\n  prototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit };\r\n\r\n  prototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit };\r\n\r\n  prototypeAccessors.canAwait.get = function () {\r\n    for (var i = this.scopeStack.length - 1; i >= 0; i--) {\r\n      var scope = this.scopeStack[i];\r\n      if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) { return false }\r\n      if (scope.flags & SCOPE_FUNCTION) { return (scope.flags & SCOPE_ASYNC) > 0 }\r\n    }\r\n    return (this.inModule && this.options.ecmaVersion >= 13) || this.options.allowAwaitOutsideFunction\r\n  };\r\n\r\n  prototypeAccessors.allowSuper.get = function () {\r\n    var ref = this.currentThisScope();\r\n      var flags = ref.flags;\r\n      var inClassFieldInit = ref.inClassFieldInit;\r\n    return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod\r\n  };\r\n\r\n  prototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\r\n\r\n  prototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\r\n\r\n  prototypeAccessors.allowNewDotTarget.get = function () {\r\n    var ref = this.currentThisScope();\r\n      var flags = ref.flags;\r\n      var inClassFieldInit = ref.inClassFieldInit;\r\n    return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit\r\n  };\r\n\r\n  prototypeAccessors.inClassStaticBlock.get = function () {\r\n    return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0\r\n  };\r\n\r\n  Parser.extend = function extend () {\r\n      var plugins = [], len = arguments.length;\r\n      while ( len-- ) plugins[ len ] = arguments[ len ];\r\n\r\n    var cls = this;\r\n    for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\r\n    return cls\r\n  };\r\n\r\n  Parser.parse = function parse (input, options) {\r\n    return new this(options, input).parse()\r\n  };\r\n\r\n  Parser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\r\n    var parser = new this(options, input, pos);\r\n    parser.nextToken();\r\n    return parser.parseExpression()\r\n  };\r\n\r\n  Parser.tokenizer = function tokenizer (input, options) {\r\n    return new this(options, input)\r\n  };\r\n\r\n  Object.defineProperties( Parser.prototype, prototypeAccessors );\r\n\r\n  var pp$9 = Parser.prototype;\r\n\r\n  // ## Parser utilities\r\n\r\n  var literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;\r\n  pp$9.strictDirective = function(start) {\r\n    if (this.options.ecmaVersion < 5) { return false }\r\n    for (;;) {\r\n      // Try to find string literal.\r\n      skipWhiteSpace.lastIndex = start;\r\n      start += skipWhiteSpace.exec(this.input)[0].length;\r\n      var match = literal.exec(this.input.slice(start));\r\n      if (!match) { return false }\r\n      if ((match[1] || match[2]) === \"use strict\") {\r\n        skipWhiteSpace.lastIndex = start + match[0].length;\r\n        var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\r\n        var next = this.input.charAt(end);\r\n        return next === \";\" || next === \"}\" ||\r\n          (lineBreak.test(spaceAfter[0]) &&\r\n           !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\"))\r\n      }\r\n      start += match[0].length;\r\n\r\n      // Skip semicolon, if any.\r\n      skipWhiteSpace.lastIndex = start;\r\n      start += skipWhiteSpace.exec(this.input)[0].length;\r\n      if (this.input[start] === \";\")\r\n        { start++; }\r\n    }\r\n  };\r\n\r\n  // Predicate that tests whether the next token is of the given\r\n  // type, and if yes, consumes it as a side effect.\r\n\r\n  pp$9.eat = function(type) {\r\n    if (this.type === type) {\r\n      this.next();\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  };\r\n\r\n  // Tests whether parsed token is a contextual keyword.\r\n\r\n  pp$9.isContextual = function(name) {\r\n    return this.type === types$1.name && this.value === name && !this.containsEsc\r\n  };\r\n\r\n  // Consumes contextual keyword if possible.\r\n\r\n  pp$9.eatContextual = function(name) {\r\n    if (!this.isContextual(name)) { return false }\r\n    this.next();\r\n    return true\r\n  };\r\n\r\n  // Asserts that following token is given contextual keyword.\r\n\r\n  pp$9.expectContextual = function(name) {\r\n    if (!this.eatContextual(name)) { this.unexpected(); }\r\n  };\r\n\r\n  // Test whether a semicolon can be inserted at the current position.\r\n\r\n  pp$9.canInsertSemicolon = function() {\r\n    return this.type === types$1.eof ||\r\n      this.type === types$1.braceR ||\r\n      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\r\n  };\r\n\r\n  pp$9.insertSemicolon = function() {\r\n    if (this.canInsertSemicolon()) {\r\n      if (this.options.onInsertedSemicolon)\r\n        { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\r\n      return true\r\n    }\r\n  };\r\n\r\n  // Consume a semicolon, or, failing that, see if we are allowed to\r\n  // pretend that there is a semicolon at this position.\r\n\r\n  pp$9.semicolon = function() {\r\n    if (!this.eat(types$1.semi) && !this.insertSemicolon()) { this.unexpected(); }\r\n  };\r\n\r\n  pp$9.afterTrailingComma = function(tokType, notNext) {\r\n    if (this.type === tokType) {\r\n      if (this.options.onTrailingComma)\r\n        { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\r\n      if (!notNext)\r\n        { this.next(); }\r\n      return true\r\n    }\r\n  };\r\n\r\n  // Expect a token of a given type. If found, consume it, otherwise,\r\n  // raise an unexpected token error.\r\n\r\n  pp$9.expect = function(type) {\r\n    this.eat(type) || this.unexpected();\r\n  };\r\n\r\n  // Raise an unexpected token error.\r\n\r\n  pp$9.unexpected = function(pos) {\r\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\");\r\n  };\r\n\r\n  var DestructuringErrors = function DestructuringErrors() {\r\n    this.shorthandAssign =\r\n    this.trailingComma =\r\n    this.parenthesizedAssign =\r\n    this.parenthesizedBind =\r\n    this.doubleProto =\r\n      -1;\r\n  };\r\n\r\n  pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {\r\n    if (!refDestructuringErrors) { return }\r\n    if (refDestructuringErrors.trailingComma > -1)\r\n      { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\r\n    var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\r\n    if (parens > -1) { this.raiseRecoverable(parens, isAssign ? \"Assigning to rvalue\" : \"Parenthesized pattern\"); }\r\n  };\r\n\r\n  pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\r\n    if (!refDestructuringErrors) { return false }\r\n    var shorthandAssign = refDestructuringErrors.shorthandAssign;\r\n    var doubleProto = refDestructuringErrors.doubleProto;\r\n    if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\r\n    if (shorthandAssign >= 0)\r\n      { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\r\n    if (doubleProto >= 0)\r\n      { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\r\n  };\r\n\r\n  pp$9.checkYieldAwaitInDefaultParams = function() {\r\n    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\r\n      { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\r\n    if (this.awaitPos)\r\n      { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\r\n  };\r\n\r\n  pp$9.isSimpleAssignTarget = function(expr) {\r\n    if (expr.type === \"ParenthesizedExpression\")\r\n      { return this.isSimpleAssignTarget(expr.expression) }\r\n    return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\r\n  };\r\n\r\n  var pp$8 = Parser.prototype;\r\n\r\n  // ### Statement parsing\r\n\r\n  // Parse a program. Initializes the parser, reads any number of\r\n  // statements, and wraps them in a Program node.  Optionally takes a\r\n  // `program` argument.  If present, the statements will be appended\r\n  // to its body instead of creating a new node.\r\n\r\n  pp$8.parseTopLevel = function(node) {\r\n    var exports = Object.create(null);\r\n    if (!node.body) { node.body = []; }\r\n    while (this.type !== types$1.eof) {\r\n      var stmt = this.parseStatement(null, true, exports);\r\n      node.body.push(stmt);\r\n    }\r\n    if (this.inModule)\r\n      { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\r\n        {\r\n          var name = list[i];\r\n\r\n          this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\r\n        } }\r\n    this.adaptDirectivePrologue(node.body);\r\n    this.next();\r\n    node.sourceType = this.options.sourceType;\r\n    return this.finishNode(node, \"Program\")\r\n  };\r\n\r\n  var loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\r\n\r\n  pp$8.isLet = function(context) {\r\n    if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\r\n    skipWhiteSpace.lastIndex = this.pos;\r\n    var skip = skipWhiteSpace.exec(this.input);\r\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\r\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\r\n    // Statement) is allowed here. If context is not empty then only a Statement\r\n    // is allowed. However, `let [` is an explicit negative lookahead for\r\n    // ExpressionStatement, so special-case it first.\r\n    if (nextCh === 91 || nextCh === 92) { return true } // '[', '/'\r\n    if (context) { return false }\r\n\r\n    if (nextCh === 123 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true } // '{', astral\r\n    if (isIdentifierStart(nextCh, true)) {\r\n      var pos = next + 1;\r\n      while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) { ++pos; }\r\n      if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true }\r\n      var ident = this.input.slice(next, pos);\r\n      if (!keywordRelationalOperator.test(ident)) { return true }\r\n    }\r\n    return false\r\n  };\r\n\r\n  // check 'async [no LineTerminator here] function'\r\n  // - 'async /*foo*/ function' is OK.\r\n  // - 'async /*\\n*/ function' is invalid.\r\n  pp$8.isAsyncFunction = function() {\r\n    if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\r\n      { return false }\r\n\r\n    skipWhiteSpace.lastIndex = this.pos;\r\n    var skip = skipWhiteSpace.exec(this.input);\r\n    var next = this.pos + skip[0].length, after;\r\n    return !lineBreak.test(this.input.slice(this.pos, next)) &&\r\n      this.input.slice(next, next + 8) === \"function\" &&\r\n      (next + 8 === this.input.length ||\r\n       !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00))\r\n  };\r\n\r\n  // Parse a single statement.\r\n  //\r\n  // If expecting a statement and finding a slash operator, parse a\r\n  // regular expression literal. This is to handle cases like\r\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\r\n  // does not help.\r\n\r\n  pp$8.parseStatement = function(context, topLevel, exports) {\r\n    var starttype = this.type, node = this.startNode(), kind;\r\n\r\n    if (this.isLet(context)) {\r\n      starttype = types$1._var;\r\n      kind = \"let\";\r\n    }\r\n\r\n    // Most types of statements are recognized by the keyword they\r\n    // start with. Many are trivial to parse, some require a bit of\r\n    // complexity.\r\n\r\n    switch (starttype) {\r\n    case types$1._break: case types$1._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\r\n    case types$1._debugger: return this.parseDebuggerStatement(node)\r\n    case types$1._do: return this.parseDoStatement(node)\r\n    case types$1._for: return this.parseForStatement(node)\r\n    case types$1._function:\r\n      // Function as sole body of either an if statement or a labeled statement\r\n      // works, but not when it is part of a labeled statement that is the sole\r\n      // body of an if statement.\r\n      if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\r\n      return this.parseFunctionStatement(node, false, !context)\r\n    case types$1._class:\r\n      if (context) { this.unexpected(); }\r\n      return this.parseClass(node, true)\r\n    case types$1._if: return this.parseIfStatement(node)\r\n    case types$1._return: return this.parseReturnStatement(node)\r\n    case types$1._switch: return this.parseSwitchStatement(node)\r\n    case types$1._throw: return this.parseThrowStatement(node)\r\n    case types$1._try: return this.parseTryStatement(node)\r\n    case types$1._const: case types$1._var:\r\n      kind = kind || this.value;\r\n      if (context && kind !== \"var\") { this.unexpected(); }\r\n      return this.parseVarStatement(node, kind)\r\n    case types$1._while: return this.parseWhileStatement(node)\r\n    case types$1._with: return this.parseWithStatement(node)\r\n    case types$1.braceL: return this.parseBlock(true, node)\r\n    case types$1.semi: return this.parseEmptyStatement(node)\r\n    case types$1._export:\r\n    case types$1._import:\r\n      if (this.options.ecmaVersion > 10 && starttype === types$1._import) {\r\n        skipWhiteSpace.lastIndex = this.pos;\r\n        var skip = skipWhiteSpace.exec(this.input);\r\n        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\r\n        if (nextCh === 40 || nextCh === 46) // '(' or '.'\r\n          { return this.parseExpressionStatement(node, this.parseExpression()) }\r\n      }\r\n\r\n      if (!this.options.allowImportExportEverywhere) {\r\n        if (!topLevel)\r\n          { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\r\n        if (!this.inModule)\r\n          { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\r\n      }\r\n      return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports)\r\n\r\n      // If the statement does not start with a statement keyword or a\r\n      // brace, it's an ExpressionStatement or LabeledStatement. We\r\n      // simply start parsing an expression, and afterwards, if the\r\n      // next token is a colon and the expression was a simple\r\n      // Identifier node, we switch to interpreting it as a label.\r\n    default:\r\n      if (this.isAsyncFunction()) {\r\n        if (context) { this.unexpected(); }\r\n        this.next();\r\n        return this.parseFunctionStatement(node, true, !context)\r\n      }\r\n\r\n      var maybeName = this.value, expr = this.parseExpression();\r\n      if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon))\r\n        { return this.parseLabeledStatement(node, maybeName, expr, context) }\r\n      else { return this.parseExpressionStatement(node, expr) }\r\n    }\r\n  };\r\n\r\n  pp$8.parseBreakContinueStatement = function(node, keyword) {\r\n    var isBreak = keyword === \"break\";\r\n    this.next();\r\n    if (this.eat(types$1.semi) || this.insertSemicolon()) { node.label = null; }\r\n    else if (this.type !== types$1.name) { this.unexpected(); }\r\n    else {\r\n      node.label = this.parseIdent();\r\n      this.semicolon();\r\n    }\r\n\r\n    // Verify that there is an actual destination to break or\r\n    // continue to.\r\n    var i = 0;\r\n    for (; i < this.labels.length; ++i) {\r\n      var lab = this.labels[i];\r\n      if (node.label == null || lab.name === node.label.name) {\r\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\r\n        if (node.label && isBreak) { break }\r\n      }\r\n    }\r\n    if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\r\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\r\n  };\r\n\r\n  pp$8.parseDebuggerStatement = function(node) {\r\n    this.next();\r\n    this.semicolon();\r\n    return this.finishNode(node, \"DebuggerStatement\")\r\n  };\r\n\r\n  pp$8.parseDoStatement = function(node) {\r\n    this.next();\r\n    this.labels.push(loopLabel);\r\n    node.body = this.parseStatement(\"do\");\r\n    this.labels.pop();\r\n    this.expect(types$1._while);\r\n    node.test = this.parseParenExpression();\r\n    if (this.options.ecmaVersion >= 6)\r\n      { this.eat(types$1.semi); }\r\n    else\r\n      { this.semicolon(); }\r\n    return this.finishNode(node, \"DoWhileStatement\")\r\n  };\r\n\r\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\r\n  // loop is non-trivial. Basically, we have to parse the init `var`\r\n  // statement or expression, disallowing the `in` operator (see\r\n  // the second parameter to `parseExpression`), and then check\r\n  // whether the next token is `in` or `of`. When there is no init\r\n  // part (semicolon immediately after the opening parenthesis), it\r\n  // is a regular `for` loop.\r\n\r\n  pp$8.parseForStatement = function(node) {\r\n    this.next();\r\n    var awaitAt = (this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\r\n    this.labels.push(loopLabel);\r\n    this.enterScope(0);\r\n    this.expect(types$1.parenL);\r\n    if (this.type === types$1.semi) {\r\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\r\n      return this.parseFor(node, null)\r\n    }\r\n    var isLet = this.isLet();\r\n    if (this.type === types$1._var || this.type === types$1._const || isLet) {\r\n      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\r\n      this.next();\r\n      this.parseVar(init$1, true, kind);\r\n      this.finishNode(init$1, \"VariableDeclaration\");\r\n      if ((this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\r\n        if (this.options.ecmaVersion >= 9) {\r\n          if (this.type === types$1._in) {\r\n            if (awaitAt > -1) { this.unexpected(awaitAt); }\r\n          } else { node.await = awaitAt > -1; }\r\n        }\r\n        return this.parseForIn(node, init$1)\r\n      }\r\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\r\n      return this.parseFor(node, init$1)\r\n    }\r\n    var startsWithLet = this.isContextual(\"let\"), isForOf = false;\r\n    var refDestructuringErrors = new DestructuringErrors;\r\n    var init = this.parseExpression(awaitAt > -1 ? \"await\" : true, refDestructuringErrors);\r\n    if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\r\n      if (this.options.ecmaVersion >= 9) {\r\n        if (this.type === types$1._in) {\r\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\r\n        } else { node.await = awaitAt > -1; }\r\n      }\r\n      if (startsWithLet && isForOf) { this.raise(init.start, \"The left-hand side of a for-of loop may not start with 'let'.\"); }\r\n      this.toAssignable(init, false, refDestructuringErrors);\r\n      this.checkLValPattern(init);\r\n      return this.parseForIn(node, init)\r\n    } else {\r\n      this.checkExpressionErrors(refDestructuringErrors, true);\r\n    }\r\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\r\n    return this.parseFor(node, init)\r\n  };\r\n\r\n  pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {\r\n    this.next();\r\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\r\n  };\r\n\r\n  pp$8.parseIfStatement = function(node) {\r\n    this.next();\r\n    node.test = this.parseParenExpression();\r\n    // allow function declarations in branches, but only in non-strict mode\r\n    node.consequent = this.parseStatement(\"if\");\r\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\r\n    return this.finishNode(node, \"IfStatement\")\r\n  };\r\n\r\n  pp$8.parseReturnStatement = function(node) {\r\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\r\n      { this.raise(this.start, \"'return' outside of function\"); }\r\n    this.next();\r\n\r\n    // In `return` (and `break`/`continue`), the keywords with\r\n    // optional arguments, we eagerly look for a semicolon or the\r\n    // possibility to insert one.\r\n\r\n    if (this.eat(types$1.semi) || this.insertSemicolon()) { node.argument = null; }\r\n    else { node.argument = this.parseExpression(); this.semicolon(); }\r\n    return this.finishNode(node, \"ReturnStatement\")\r\n  };\r\n\r\n  pp$8.parseSwitchStatement = function(node) {\r\n    this.next();\r\n    node.discriminant = this.parseParenExpression();\r\n    node.cases = [];\r\n    this.expect(types$1.braceL);\r\n    this.labels.push(switchLabel);\r\n    this.enterScope(0);\r\n\r\n    // Statements under must be grouped (by label) in SwitchCase\r\n    // nodes. `cur` is used to keep the node that we are currently\r\n    // adding statements to.\r\n\r\n    var cur;\r\n    for (var sawDefault = false; this.type !== types$1.braceR;) {\r\n      if (this.type === types$1._case || this.type === types$1._default) {\r\n        var isCase = this.type === types$1._case;\r\n        if (cur) { this.finishNode(cur, \"SwitchCase\"); }\r\n        node.cases.push(cur = this.startNode());\r\n        cur.consequent = [];\r\n        this.next();\r\n        if (isCase) {\r\n          cur.test = this.parseExpression();\r\n        } else {\r\n          if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\r\n          sawDefault = true;\r\n          cur.test = null;\r\n        }\r\n        this.expect(types$1.colon);\r\n      } else {\r\n        if (!cur) { this.unexpected(); }\r\n        cur.consequent.push(this.parseStatement(null));\r\n      }\r\n    }\r\n    this.exitScope();\r\n    if (cur) { this.finishNode(cur, \"SwitchCase\"); }\r\n    this.next(); // Closing brace\r\n    this.labels.pop();\r\n    return this.finishNode(node, \"SwitchStatement\")\r\n  };\r\n\r\n  pp$8.parseThrowStatement = function(node) {\r\n    this.next();\r\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\r\n      { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\r\n    node.argument = this.parseExpression();\r\n    this.semicolon();\r\n    return this.finishNode(node, \"ThrowStatement\")\r\n  };\r\n\r\n  // Reused empty array added for node fields that are always empty.\r\n\r\n  var empty$1 = [];\r\n\r\n  pp$8.parseCatchClauseParam = function() {\r\n    var param = this.parseBindingAtom();\r\n    var simple = param.type === \"Identifier\";\r\n    this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\r\n    this.checkLValPattern(param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\r\n    this.expect(types$1.parenR);\r\n\r\n    return param\r\n  };\r\n\r\n  pp$8.parseTryStatement = function(node) {\r\n    this.next();\r\n    node.block = this.parseBlock();\r\n    node.handler = null;\r\n    if (this.type === types$1._catch) {\r\n      var clause = this.startNode();\r\n      this.next();\r\n      if (this.eat(types$1.parenL)) {\r\n        clause.param = this.parseCatchClauseParam();\r\n      } else {\r\n        if (this.options.ecmaVersion < 10) { this.unexpected(); }\r\n        clause.param = null;\r\n        this.enterScope(0);\r\n      }\r\n      clause.body = this.parseBlock(false);\r\n      this.exitScope();\r\n      node.handler = this.finishNode(clause, \"CatchClause\");\r\n    }\r\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\r\n    if (!node.handler && !node.finalizer)\r\n      { this.raise(node.start, \"Missing catch or finally clause\"); }\r\n    return this.finishNode(node, \"TryStatement\")\r\n  };\r\n\r\n  pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {\r\n    this.next();\r\n    this.parseVar(node, false, kind, allowMissingInitializer);\r\n    this.semicolon();\r\n    return this.finishNode(node, \"VariableDeclaration\")\r\n  };\r\n\r\n  pp$8.parseWhileStatement = function(node) {\r\n    this.next();\r\n    node.test = this.parseParenExpression();\r\n    this.labels.push(loopLabel);\r\n    node.body = this.parseStatement(\"while\");\r\n    this.labels.pop();\r\n    return this.finishNode(node, \"WhileStatement\")\r\n  };\r\n\r\n  pp$8.parseWithStatement = function(node) {\r\n    if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\r\n    this.next();\r\n    node.object = this.parseParenExpression();\r\n    node.body = this.parseStatement(\"with\");\r\n    return this.finishNode(node, \"WithStatement\")\r\n  };\r\n\r\n  pp$8.parseEmptyStatement = function(node) {\r\n    this.next();\r\n    return this.finishNode(node, \"EmptyStatement\")\r\n  };\r\n\r\n  pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {\r\n    for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\r\n      {\r\n      var label = list[i$1];\r\n\r\n      if (label.name === maybeName)\r\n        { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\r\n    } }\r\n    var kind = this.type.isLoop ? \"loop\" : this.type === types$1._switch ? \"switch\" : null;\r\n    for (var i = this.labels.length - 1; i >= 0; i--) {\r\n      var label$1 = this.labels[i];\r\n      if (label$1.statementStart === node.start) {\r\n        // Update information about previous labels on this node\r\n        label$1.statementStart = this.start;\r\n        label$1.kind = kind;\r\n      } else { break }\r\n    }\r\n    this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\r\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\r\n    this.labels.pop();\r\n    node.label = expr;\r\n    return this.finishNode(node, \"LabeledStatement\")\r\n  };\r\n\r\n  pp$8.parseExpressionStatement = function(node, expr) {\r\n    node.expression = expr;\r\n    this.semicolon();\r\n    return this.finishNode(node, \"ExpressionStatement\")\r\n  };\r\n\r\n  // Parse a semicolon-enclosed block of statements, handling `\"use\r\n  // strict\"` declarations when `allowStrict` is true (used for\r\n  // function bodies).\r\n\r\n  pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {\r\n    if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\r\n    if ( node === void 0 ) node = this.startNode();\r\n\r\n    node.body = [];\r\n    this.expect(types$1.braceL);\r\n    if (createNewLexicalScope) { this.enterScope(0); }\r\n    while (this.type !== types$1.braceR) {\r\n      var stmt = this.parseStatement(null);\r\n      node.body.push(stmt);\r\n    }\r\n    if (exitStrict) { this.strict = false; }\r\n    this.next();\r\n    if (createNewLexicalScope) { this.exitScope(); }\r\n    return this.finishNode(node, \"BlockStatement\")\r\n  };\r\n\r\n  // Parse a regular `for` loop. The disambiguation code in\r\n  // `parseStatement` will already have parsed the init statement or\r\n  // expression.\r\n\r\n  pp$8.parseFor = function(node, init) {\r\n    node.init = init;\r\n    this.expect(types$1.semi);\r\n    node.test = this.type === types$1.semi ? null : this.parseExpression();\r\n    this.expect(types$1.semi);\r\n    node.update = this.type === types$1.parenR ? null : this.parseExpression();\r\n    this.expect(types$1.parenR);\r\n    node.body = this.parseStatement(\"for\");\r\n    this.exitScope();\r\n    this.labels.pop();\r\n    return this.finishNode(node, \"ForStatement\")\r\n  };\r\n\r\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\r\n  // same from parser's perspective.\r\n\r\n  pp$8.parseForIn = function(node, init) {\r\n    var isForIn = this.type === types$1._in;\r\n    this.next();\r\n\r\n    if (\r\n      init.type === \"VariableDeclaration\" &&\r\n      init.declarations[0].init != null &&\r\n      (\r\n        !isForIn ||\r\n        this.options.ecmaVersion < 8 ||\r\n        this.strict ||\r\n        init.kind !== \"var\" ||\r\n        init.declarations[0].id.type !== \"Identifier\"\r\n      )\r\n    ) {\r\n      this.raise(\r\n        init.start,\r\n        ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\r\n      );\r\n    }\r\n    node.left = init;\r\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\r\n    this.expect(types$1.parenR);\r\n    node.body = this.parseStatement(\"for\");\r\n    this.exitScope();\r\n    this.labels.pop();\r\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\r\n  };\r\n\r\n  // Parse a list of variable declarations.\r\n\r\n  pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {\r\n    node.declarations = [];\r\n    node.kind = kind;\r\n    for (;;) {\r\n      var decl = this.startNode();\r\n      this.parseVarId(decl, kind);\r\n      if (this.eat(types$1.eq)) {\r\n        decl.init = this.parseMaybeAssign(isFor);\r\n      } else if (!allowMissingInitializer && kind === \"const\" && !(this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\r\n        this.unexpected();\r\n      } else if (!allowMissingInitializer && decl.id.type !== \"Identifier\" && !(isFor && (this.type === types$1._in || this.isContextual(\"of\")))) {\r\n        this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\r\n      } else {\r\n        decl.init = null;\r\n      }\r\n      node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\r\n      if (!this.eat(types$1.comma)) { break }\r\n    }\r\n    return node\r\n  };\r\n\r\n  pp$8.parseVarId = function(decl, kind) {\r\n    decl.id = this.parseBindingAtom();\r\n    this.checkLValPattern(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\r\n  };\r\n\r\n  var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\r\n\r\n  // Parse a function declaration or literal (depending on the\r\n  // `statement & FUNC_STATEMENT`).\r\n\r\n  // Remove `allowExpressionBody` for 7.0.0, as it is only called with false\r\n  pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {\r\n    this.initFunction(node);\r\n    if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\r\n      if (this.type === types$1.star && (statement & FUNC_HANGING_STATEMENT))\r\n        { this.unexpected(); }\r\n      node.generator = this.eat(types$1.star);\r\n    }\r\n    if (this.options.ecmaVersion >= 8)\r\n      { node.async = !!isAsync; }\r\n\r\n    if (statement & FUNC_STATEMENT) {\r\n      node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types$1.name ? null : this.parseIdent();\r\n      if (node.id && !(statement & FUNC_HANGING_STATEMENT))\r\n        // If it is a regular function declaration in sloppy mode, then it is\r\n        // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\r\n        // mode depends on properties of the current scope (see\r\n        // treatFunctionsAsVar).\r\n        { this.checkLValSimple(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\r\n    }\r\n\r\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\r\n    this.yieldPos = 0;\r\n    this.awaitPos = 0;\r\n    this.awaitIdentPos = 0;\r\n    this.enterScope(functionFlags(node.async, node.generator));\r\n\r\n    if (!(statement & FUNC_STATEMENT))\r\n      { node.id = this.type === types$1.name ? this.parseIdent() : null; }\r\n\r\n    this.parseFunctionParams(node);\r\n    this.parseFunctionBody(node, allowExpressionBody, false, forInit);\r\n\r\n    this.yieldPos = oldYieldPos;\r\n    this.awaitPos = oldAwaitPos;\r\n    this.awaitIdentPos = oldAwaitIdentPos;\r\n    return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\r\n  };\r\n\r\n  pp$8.parseFunctionParams = function(node) {\r\n    this.expect(types$1.parenL);\r\n    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\r\n    this.checkYieldAwaitInDefaultParams();\r\n  };\r\n\r\n  // Parse a class declaration or literal (depending on the\r\n  // `isStatement` parameter).\r\n\r\n  pp$8.parseClass = function(node, isStatement) {\r\n    this.next();\r\n\r\n    // ecma-262 14.6 Class Definitions\r\n    // A class definition is always strict mode code.\r\n    var oldStrict = this.strict;\r\n    this.strict = true;\r\n\r\n    this.parseClassId(node, isStatement);\r\n    this.parseClassSuper(node);\r\n    var privateNameMap = this.enterClassBody();\r\n    var classBody = this.startNode();\r\n    var hadConstructor = false;\r\n    classBody.body = [];\r\n    this.expect(types$1.braceL);\r\n    while (this.type !== types$1.braceR) {\r\n      var element = this.parseClassElement(node.superClass !== null);\r\n      if (element) {\r\n        classBody.body.push(element);\r\n        if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\r\n          if (hadConstructor) { this.raiseRecoverable(element.start, \"Duplicate constructor in the same class\"); }\r\n          hadConstructor = true;\r\n        } else if (element.key && element.key.type === \"PrivateIdentifier\" && isPrivateNameConflicted(privateNameMap, element)) {\r\n          this.raiseRecoverable(element.key.start, (\"Identifier '#\" + (element.key.name) + \"' has already been declared\"));\r\n        }\r\n      }\r\n    }\r\n    this.strict = oldStrict;\r\n    this.next();\r\n    node.body = this.finishNode(classBody, \"ClassBody\");\r\n    this.exitClassBody();\r\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\r\n  };\r\n\r\n  pp$8.parseClassElement = function(constructorAllowsSuper) {\r\n    if (this.eat(types$1.semi)) { return null }\r\n\r\n    var ecmaVersion = this.options.ecmaVersion;\r\n    var node = this.startNode();\r\n    var keyName = \"\";\r\n    var isGenerator = false;\r\n    var isAsync = false;\r\n    var kind = \"method\";\r\n    var isStatic = false;\r\n\r\n    if (this.eatContextual(\"static\")) {\r\n      // Parse static init block\r\n      if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {\r\n        this.parseClassStaticBlock(node);\r\n        return node\r\n      }\r\n      if (this.isClassElementNameStart() || this.type === types$1.star) {\r\n        isStatic = true;\r\n      } else {\r\n        keyName = \"static\";\r\n      }\r\n    }\r\n    node.static = isStatic;\r\n    if (!keyName && ecmaVersion >= 8 && this.eatContextual(\"async\")) {\r\n      if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {\r\n        isAsync = true;\r\n      } else {\r\n        keyName = \"async\";\r\n      }\r\n    }\r\n    if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {\r\n      isGenerator = true;\r\n    }\r\n    if (!keyName && !isAsync && !isGenerator) {\r\n      var lastValue = this.value;\r\n      if (this.eatContextual(\"get\") || this.eatContextual(\"set\")) {\r\n        if (this.isClassElementNameStart()) {\r\n          kind = lastValue;\r\n        } else {\r\n          keyName = lastValue;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Parse element name\r\n    if (keyName) {\r\n      // 'async', 'get', 'set', or 'static' were not a keyword contextually.\r\n      // The last token is any of those. Make it the element name.\r\n      node.computed = false;\r\n      node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);\r\n      node.key.name = keyName;\r\n      this.finishNode(node.key, \"Identifier\");\r\n    } else {\r\n      this.parseClassElementName(node);\r\n    }\r\n\r\n    // Parse element value\r\n    if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== \"method\" || isGenerator || isAsync) {\r\n      var isConstructor = !node.static && checkKeyName(node, \"constructor\");\r\n      var allowsDirectSuper = isConstructor && constructorAllowsSuper;\r\n      // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.\r\n      if (isConstructor && kind !== \"method\") { this.raise(node.key.start, \"Constructor can't have get/set modifier\"); }\r\n      node.kind = isConstructor ? \"constructor\" : kind;\r\n      this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);\r\n    } else {\r\n      this.parseClassField(node);\r\n    }\r\n\r\n    return node\r\n  };\r\n\r\n  pp$8.isClassElementNameStart = function() {\r\n    return (\r\n      this.type === types$1.name ||\r\n      this.type === types$1.privateId ||\r\n      this.type === types$1.num ||\r\n      this.type === types$1.string ||\r\n      this.type === types$1.bracketL ||\r\n      this.type.keyword\r\n    )\r\n  };\r\n\r\n  pp$8.parseClassElementName = function(element) {\r\n    if (this.type === types$1.privateId) {\r\n      if (this.value === \"constructor\") {\r\n        this.raise(this.start, \"Classes can't have an element named '#constructor'\");\r\n      }\r\n      element.computed = false;\r\n      element.key = this.parsePrivateIdent();\r\n    } else {\r\n      this.parsePropertyName(element);\r\n    }\r\n  };\r\n\r\n  pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\r\n    // Check key and flags\r\n    var key = method.key;\r\n    if (method.kind === \"constructor\") {\r\n      if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\r\n      if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\r\n    } else if (method.static && checkKeyName(method, \"prototype\")) {\r\n      this.raise(key.start, \"Classes may not have a static property named prototype\");\r\n    }\r\n\r\n    // Parse value\r\n    var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\r\n\r\n    // Check value\r\n    if (method.kind === \"get\" && value.params.length !== 0)\r\n      { this.raiseRecoverable(value.start, \"getter should have no params\"); }\r\n    if (method.kind === \"set\" && value.params.length !== 1)\r\n      { this.raiseRecoverable(value.start, \"setter should have exactly one param\"); }\r\n    if (method.kind === \"set\" && value.params[0].type === \"RestElement\")\r\n      { this.raiseRecoverable(value.params[0].start, \"Setter cannot use rest params\"); }\r\n\r\n    return this.finishNode(method, \"MethodDefinition\")\r\n  };\r\n\r\n  pp$8.parseClassField = function(field) {\r\n    if (checkKeyName(field, \"constructor\")) {\r\n      this.raise(field.key.start, \"Classes can't have a field named 'constructor'\");\r\n    } else if (field.static && checkKeyName(field, \"prototype\")) {\r\n      this.raise(field.key.start, \"Classes can't have a static field named 'prototype'\");\r\n    }\r\n\r\n    if (this.eat(types$1.eq)) {\r\n      // To raise SyntaxError if 'arguments' exists in the initializer.\r\n      var scope = this.currentThisScope();\r\n      var inClassFieldInit = scope.inClassFieldInit;\r\n      scope.inClassFieldInit = true;\r\n      field.value = this.parseMaybeAssign();\r\n      scope.inClassFieldInit = inClassFieldInit;\r\n    } else {\r\n      field.value = null;\r\n    }\r\n    this.semicolon();\r\n\r\n    return this.finishNode(field, \"PropertyDefinition\")\r\n  };\r\n\r\n  pp$8.parseClassStaticBlock = function(node) {\r\n    node.body = [];\r\n\r\n    var oldLabels = this.labels;\r\n    this.labels = [];\r\n    this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);\r\n    while (this.type !== types$1.braceR) {\r\n      var stmt = this.parseStatement(null);\r\n      node.body.push(stmt);\r\n    }\r\n    this.next();\r\n    this.exitScope();\r\n    this.labels = oldLabels;\r\n\r\n    return this.finishNode(node, \"StaticBlock\")\r\n  };\r\n\r\n  pp$8.parseClassId = function(node, isStatement) {\r\n    if (this.type === types$1.name) {\r\n      node.id = this.parseIdent();\r\n      if (isStatement)\r\n        { this.checkLValSimple(node.id, BIND_LEXICAL, false); }\r\n    } else {\r\n      if (isStatement === true)\r\n        { this.unexpected(); }\r\n      node.id = null;\r\n    }\r\n  };\r\n\r\n  pp$8.parseClassSuper = function(node) {\r\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;\r\n  };\r\n\r\n  pp$8.enterClassBody = function() {\r\n    var element = {declared: Object.create(null), used: []};\r\n    this.privateNameStack.push(element);\r\n    return element.declared\r\n  };\r\n\r\n  pp$8.exitClassBody = function() {\r\n    var ref = this.privateNameStack.pop();\r\n    var declared = ref.declared;\r\n    var used = ref.used;\r\n    if (!this.options.checkPrivateFields) { return }\r\n    var len = this.privateNameStack.length;\r\n    var parent = len === 0 ? null : this.privateNameStack[len - 1];\r\n    for (var i = 0; i < used.length; ++i) {\r\n      var id = used[i];\r\n      if (!hasOwn(declared, id.name)) {\r\n        if (parent) {\r\n          parent.used.push(id);\r\n        } else {\r\n          this.raiseRecoverable(id.start, (\"Private field '#\" + (id.name) + \"' must be declared in an enclosing class\"));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  function isPrivateNameConflicted(privateNameMap, element) {\r\n    var name = element.key.name;\r\n    var curr = privateNameMap[name];\r\n\r\n    var next = \"true\";\r\n    if (element.type === \"MethodDefinition\" && (element.kind === \"get\" || element.kind === \"set\")) {\r\n      next = (element.static ? \"s\" : \"i\") + element.kind;\r\n    }\r\n\r\n    // `class { get #a(){}; static set #a(_){} }` is also conflict.\r\n    if (\r\n      curr === \"iget\" && next === \"iset\" ||\r\n      curr === \"iset\" && next === \"iget\" ||\r\n      curr === \"sget\" && next === \"sset\" ||\r\n      curr === \"sset\" && next === \"sget\"\r\n    ) {\r\n      privateNameMap[name] = \"true\";\r\n      return false\r\n    } else if (!curr) {\r\n      privateNameMap[name] = next;\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  function checkKeyName(node, name) {\r\n    var computed = node.computed;\r\n    var key = node.key;\r\n    return !computed && (\r\n      key.type === \"Identifier\" && key.name === name ||\r\n      key.type === \"Literal\" && key.value === name\r\n    )\r\n  }\r\n\r\n  // Parses module export declaration.\r\n\r\n  pp$8.parseExportAllDeclaration = function(node, exports) {\r\n    if (this.options.ecmaVersion >= 11) {\r\n      if (this.eatContextual(\"as\")) {\r\n        node.exported = this.parseModuleExportName();\r\n        this.checkExport(exports, node.exported, this.lastTokStart);\r\n      } else {\r\n        node.exported = null;\r\n      }\r\n    }\r\n    this.expectContextual(\"from\");\r\n    if (this.type !== types$1.string) { this.unexpected(); }\r\n    node.source = this.parseExprAtom();\r\n    this.semicolon();\r\n    return this.finishNode(node, \"ExportAllDeclaration\")\r\n  };\r\n\r\n  pp$8.parseExport = function(node, exports) {\r\n    this.next();\r\n    // export * from '...'\r\n    if (this.eat(types$1.star)) {\r\n      return this.parseExportAllDeclaration(node, exports)\r\n    }\r\n    if (this.eat(types$1._default)) { // export default ...\r\n      this.checkExport(exports, \"default\", this.lastTokStart);\r\n      node.declaration = this.parseExportDefaultDeclaration();\r\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\r\n    }\r\n    // export var|const|let|function|class ...\r\n    if (this.shouldParseExportStatement()) {\r\n      node.declaration = this.parseExportDeclaration(node);\r\n      if (node.declaration.type === \"VariableDeclaration\")\r\n        { this.checkVariableExport(exports, node.declaration.declarations); }\r\n      else\r\n        { this.checkExport(exports, node.declaration.id, node.declaration.id.start); }\r\n      node.specifiers = [];\r\n      node.source = null;\r\n    } else { // export { x, y as z } [from '...']\r\n      node.declaration = null;\r\n      node.specifiers = this.parseExportSpecifiers(exports);\r\n      if (this.eatContextual(\"from\")) {\r\n        if (this.type !== types$1.string) { this.unexpected(); }\r\n        node.source = this.parseExprAtom();\r\n      } else {\r\n        for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\r\n          // check for keywords used as local names\r\n          var spec = list[i];\r\n\r\n          this.checkUnreserved(spec.local);\r\n          // check if export is defined\r\n          this.checkLocalExport(spec.local);\r\n\r\n          if (spec.local.type === \"Literal\") {\r\n            this.raise(spec.local.start, \"A string literal cannot be used as an exported binding without `from`.\");\r\n          }\r\n        }\r\n\r\n        node.source = null;\r\n      }\r\n      this.semicolon();\r\n    }\r\n    return this.finishNode(node, \"ExportNamedDeclaration\")\r\n  };\r\n\r\n  pp$8.parseExportDeclaration = function(node) {\r\n    return this.parseStatement(null)\r\n  };\r\n\r\n  pp$8.parseExportDefaultDeclaration = function() {\r\n    var isAsync;\r\n    if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {\r\n      var fNode = this.startNode();\r\n      this.next();\r\n      if (isAsync) { this.next(); }\r\n      return this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync)\r\n    } else if (this.type === types$1._class) {\r\n      var cNode = this.startNode();\r\n      return this.parseClass(cNode, \"nullableID\")\r\n    } else {\r\n      var declaration = this.parseMaybeAssign();\r\n      this.semicolon();\r\n      return declaration\r\n    }\r\n  };\r\n\r\n  pp$8.checkExport = function(exports, name, pos) {\r\n    if (!exports) { return }\r\n    if (typeof name !== \"string\")\r\n      { name = name.type === \"Identifier\" ? name.name : name.value; }\r\n    if (hasOwn(exports, name))\r\n      { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\r\n    exports[name] = true;\r\n  };\r\n\r\n  pp$8.checkPatternExport = function(exports, pat) {\r\n    var type = pat.type;\r\n    if (type === \"Identifier\")\r\n      { this.checkExport(exports, pat, pat.start); }\r\n    else if (type === \"ObjectPattern\")\r\n      { for (var i = 0, list = pat.properties; i < list.length; i += 1)\r\n        {\r\n          var prop = list[i];\r\n\r\n          this.checkPatternExport(exports, prop);\r\n        } }\r\n    else if (type === \"ArrayPattern\")\r\n      { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\r\n        var elt = list$1[i$1];\r\n\r\n          if (elt) { this.checkPatternExport(exports, elt); }\r\n      } }\r\n    else if (type === \"Property\")\r\n      { this.checkPatternExport(exports, pat.value); }\r\n    else if (type === \"AssignmentPattern\")\r\n      { this.checkPatternExport(exports, pat.left); }\r\n    else if (type === \"RestElement\")\r\n      { this.checkPatternExport(exports, pat.argument); }\r\n  };\r\n\r\n  pp$8.checkVariableExport = function(exports, decls) {\r\n    if (!exports) { return }\r\n    for (var i = 0, list = decls; i < list.length; i += 1)\r\n      {\r\n      var decl = list[i];\r\n\r\n      this.checkPatternExport(exports, decl.id);\r\n    }\r\n  };\r\n\r\n  pp$8.shouldParseExportStatement = function() {\r\n    return this.type.keyword === \"var\" ||\r\n      this.type.keyword === \"const\" ||\r\n      this.type.keyword === \"class\" ||\r\n      this.type.keyword === \"function\" ||\r\n      this.isLet() ||\r\n      this.isAsyncFunction()\r\n  };\r\n\r\n  // Parses a comma-separated list of module exports.\r\n\r\n  pp$8.parseExportSpecifier = function(exports) {\r\n    var node = this.startNode();\r\n    node.local = this.parseModuleExportName();\r\n\r\n    node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local;\r\n    this.checkExport(\r\n      exports,\r\n      node.exported,\r\n      node.exported.start\r\n    );\r\n\r\n    return this.finishNode(node, \"ExportSpecifier\")\r\n  };\r\n\r\n  pp$8.parseExportSpecifiers = function(exports) {\r\n    var nodes = [], first = true;\r\n    // export { x, y as z } [from '...']\r\n    this.expect(types$1.braceL);\r\n    while (!this.eat(types$1.braceR)) {\r\n      if (!first) {\r\n        this.expect(types$1.comma);\r\n        if (this.afterTrailingComma(types$1.braceR)) { break }\r\n      } else { first = false; }\r\n\r\n      nodes.push(this.parseExportSpecifier(exports));\r\n    }\r\n    return nodes\r\n  };\r\n\r\n  // Parses import declaration.\r\n\r\n  pp$8.parseImport = function(node) {\r\n    this.next();\r\n\r\n    // import '...'\r\n    if (this.type === types$1.string) {\r\n      node.specifiers = empty$1;\r\n      node.source = this.parseExprAtom();\r\n    } else {\r\n      node.specifiers = this.parseImportSpecifiers();\r\n      this.expectContextual(\"from\");\r\n      node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();\r\n    }\r\n    this.semicolon();\r\n    return this.finishNode(node, \"ImportDeclaration\")\r\n  };\r\n\r\n  // Parses a comma-separated list of module imports.\r\n\r\n  pp$8.parseImportSpecifier = function() {\r\n    var node = this.startNode();\r\n    node.imported = this.parseModuleExportName();\r\n\r\n    if (this.eatContextual(\"as\")) {\r\n      node.local = this.parseIdent();\r\n    } else {\r\n      this.checkUnreserved(node.imported);\r\n      node.local = node.imported;\r\n    }\r\n    this.checkLValSimple(node.local, BIND_LEXICAL);\r\n\r\n    return this.finishNode(node, \"ImportSpecifier\")\r\n  };\r\n\r\n  pp$8.parseImportDefaultSpecifier = function() {\r\n    // import defaultObj, { x, y as z } from '...'\r\n    var node = this.startNode();\r\n    node.local = this.parseIdent();\r\n    this.checkLValSimple(node.local, BIND_LEXICAL);\r\n    return this.finishNode(node, \"ImportDefaultSpecifier\")\r\n  };\r\n\r\n  pp$8.parseImportNamespaceSpecifier = function() {\r\n    var node = this.startNode();\r\n    this.next();\r\n    this.expectContextual(\"as\");\r\n    node.local = this.parseIdent();\r\n    this.checkLValSimple(node.local, BIND_LEXICAL);\r\n    return this.finishNode(node, \"ImportNamespaceSpecifier\")\r\n  };\r\n\r\n  pp$8.parseImportSpecifiers = function() {\r\n    var nodes = [], first = true;\r\n    if (this.type === types$1.name) {\r\n      nodes.push(this.parseImportDefaultSpecifier());\r\n      if (!this.eat(types$1.comma)) { return nodes }\r\n    }\r\n    if (this.type === types$1.star) {\r\n      nodes.push(this.parseImportNamespaceSpecifier());\r\n      return nodes\r\n    }\r\n    this.expect(types$1.braceL);\r\n    while (!this.eat(types$1.braceR)) {\r\n      if (!first) {\r\n        this.expect(types$1.comma);\r\n        if (this.afterTrailingComma(types$1.braceR)) { break }\r\n      } else { first = false; }\r\n\r\n      nodes.push(this.parseImportSpecifier());\r\n    }\r\n    return nodes\r\n  };\r\n\r\n  pp$8.parseModuleExportName = function() {\r\n    if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {\r\n      var stringLiteral = this.parseLiteral(this.value);\r\n      if (loneSurrogate.test(stringLiteral.value)) {\r\n        this.raise(stringLiteral.start, \"An export name cannot include a lone surrogate.\");\r\n      }\r\n      return stringLiteral\r\n    }\r\n    return this.parseIdent(true)\r\n  };\r\n\r\n  // Set `ExpressionStatement#directive` property for directive prologues.\r\n  pp$8.adaptDirectivePrologue = function(statements) {\r\n    for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\r\n      statements[i].directive = statements[i].expression.raw.slice(1, -1);\r\n    }\r\n  };\r\n  pp$8.isDirectiveCandidate = function(statement) {\r\n    return (\r\n      this.options.ecmaVersion >= 5 &&\r\n      statement.type === \"ExpressionStatement\" &&\r\n      statement.expression.type === \"Literal\" &&\r\n      typeof statement.expression.value === \"string\" &&\r\n      // Reject parenthesized strings.\r\n      (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\r\n    )\r\n  };\r\n\r\n  var pp$7 = Parser.prototype;\r\n\r\n  // Convert existing expression atom to assignable pattern\r\n  // if possible.\r\n\r\n  pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {\r\n    if (this.options.ecmaVersion >= 6 && node) {\r\n      switch (node.type) {\r\n      case \"Identifier\":\r\n        if (this.inAsync && node.name === \"await\")\r\n          { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\r\n        break\r\n\r\n      case \"ObjectPattern\":\r\n      case \"ArrayPattern\":\r\n      case \"AssignmentPattern\":\r\n      case \"RestElement\":\r\n        break\r\n\r\n      case \"ObjectExpression\":\r\n        node.type = \"ObjectPattern\";\r\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\r\n        for (var i = 0, list = node.properties; i < list.length; i += 1) {\r\n          var prop = list[i];\r\n\r\n        this.toAssignable(prop, isBinding);\r\n          // Early error:\r\n          //   AssignmentRestProperty[Yield, Await] :\r\n          //     `...` DestructuringAssignmentTarget[Yield, Await]\r\n          //\r\n          //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\r\n          if (\r\n            prop.type === \"RestElement\" &&\r\n            (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\r\n          ) {\r\n            this.raise(prop.argument.start, \"Unexpected token\");\r\n          }\r\n        }\r\n        break\r\n\r\n      case \"Property\":\r\n        // AssignmentProperty has type === \"Property\"\r\n        if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\r\n        this.toAssignable(node.value, isBinding);\r\n        break\r\n\r\n      case \"ArrayExpression\":\r\n        node.type = \"ArrayPattern\";\r\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\r\n        this.toAssignableList(node.elements, isBinding);\r\n        break\r\n\r\n      case \"SpreadElement\":\r\n        node.type = \"RestElement\";\r\n        this.toAssignable(node.argument, isBinding);\r\n        if (node.argument.type === \"AssignmentPattern\")\r\n          { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\r\n        break\r\n\r\n      case \"AssignmentExpression\":\r\n        if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\r\n        node.type = \"AssignmentPattern\";\r\n        delete node.operator;\r\n        this.toAssignable(node.left, isBinding);\r\n        break\r\n\r\n      case \"ParenthesizedExpression\":\r\n        this.toAssignable(node.expression, isBinding, refDestructuringErrors);\r\n        break\r\n\r\n      case \"ChainExpression\":\r\n        this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\r\n        break\r\n\r\n      case \"MemberExpression\":\r\n        if (!isBinding) { break }\r\n\r\n      default:\r\n        this.raise(node.start, \"Assigning to rvalue\");\r\n      }\r\n    } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\r\n    return node\r\n  };\r\n\r\n  // Convert list of expression atoms to binding list.\r\n\r\n  pp$7.toAssignableList = function(exprList, isBinding) {\r\n    var end = exprList.length;\r\n    for (var i = 0; i < end; i++) {\r\n      var elt = exprList[i];\r\n      if (elt) { this.toAssignable(elt, isBinding); }\r\n    }\r\n    if (end) {\r\n      var last = exprList[end - 1];\r\n      if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\r\n        { this.unexpected(last.argument.start); }\r\n    }\r\n    return exprList\r\n  };\r\n\r\n  // Parses spread element.\r\n\r\n  pp$7.parseSpread = function(refDestructuringErrors) {\r\n    var node = this.startNode();\r\n    this.next();\r\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\r\n    return this.finishNode(node, \"SpreadElement\")\r\n  };\r\n\r\n  pp$7.parseRestBinding = function() {\r\n    var node = this.startNode();\r\n    this.next();\r\n\r\n    // RestElement inside of a function parameter must be an identifier\r\n    if (this.options.ecmaVersion === 6 && this.type !== types$1.name)\r\n      { this.unexpected(); }\r\n\r\n    node.argument = this.parseBindingAtom();\r\n\r\n    return this.finishNode(node, \"RestElement\")\r\n  };\r\n\r\n  // Parses lvalue (assignable) atom.\r\n\r\n  pp$7.parseBindingAtom = function() {\r\n    if (this.options.ecmaVersion >= 6) {\r\n      switch (this.type) {\r\n      case types$1.bracketL:\r\n        var node = this.startNode();\r\n        this.next();\r\n        node.elements = this.parseBindingList(types$1.bracketR, true, true);\r\n        return this.finishNode(node, \"ArrayPattern\")\r\n\r\n      case types$1.braceL:\r\n        return this.parseObj(true)\r\n      }\r\n    }\r\n    return this.parseIdent()\r\n  };\r\n\r\n  pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {\r\n    var elts = [], first = true;\r\n    while (!this.eat(close)) {\r\n      if (first) { first = false; }\r\n      else { this.expect(types$1.comma); }\r\n      if (allowEmpty && this.type === types$1.comma) {\r\n        elts.push(null);\r\n      } else if (allowTrailingComma && this.afterTrailingComma(close)) {\r\n        break\r\n      } else if (this.type === types$1.ellipsis) {\r\n        var rest = this.parseRestBinding();\r\n        this.parseBindingListItem(rest);\r\n        elts.push(rest);\r\n        if (this.type === types$1.comma) { this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\"); }\r\n        this.expect(close);\r\n        break\r\n      } else {\r\n        elts.push(this.parseAssignableListItem(allowModifiers));\r\n      }\r\n    }\r\n    return elts\r\n  };\r\n\r\n  pp$7.parseAssignableListItem = function(allowModifiers) {\r\n    var elem = this.parseMaybeDefault(this.start, this.startLoc);\r\n    this.parseBindingListItem(elem);\r\n    return elem\r\n  };\r\n\r\n  pp$7.parseBindingListItem = function(param) {\r\n    return param\r\n  };\r\n\r\n  // Parses assignment pattern around given atom if possible.\r\n\r\n  pp$7.parseMaybeDefault = function(startPos, startLoc, left) {\r\n    left = left || this.parseBindingAtom();\r\n    if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) { return left }\r\n    var node = this.startNodeAt(startPos, startLoc);\r\n    node.left = left;\r\n    node.right = this.parseMaybeAssign();\r\n    return this.finishNode(node, \"AssignmentPattern\")\r\n  };\r\n\r\n  // The following three functions all verify that a node is an lvalue —\r\n  // something that can be bound, or assigned to. In order to do so, they perform\r\n  // a variety of checks:\r\n  //\r\n  // - Check that none of the bound/assigned-to identifiers are reserved words.\r\n  // - Record name declarations for bindings in the appropriate scope.\r\n  // - Check duplicate argument names, if checkClashes is set.\r\n  //\r\n  // If a complex binding pattern is encountered (e.g., object and array\r\n  // destructuring), the entire pattern is recursively checked.\r\n  //\r\n  // There are three versions of checkLVal*() appropriate for different\r\n  // circumstances:\r\n  //\r\n  // - checkLValSimple() shall be used if the syntactic construct supports\r\n  //   nothing other than identifiers and member expressions. Parenthesized\r\n  //   expressions are also correctly handled. This is generally appropriate for\r\n  //   constructs for which the spec says\r\n  //\r\n  //   > It is a Syntax Error if AssignmentTargetType of [the production] is not\r\n  //   > simple.\r\n  //\r\n  //   It is also appropriate for checking if an identifier is valid and not\r\n  //   defined elsewhere, like import declarations or function/class identifiers.\r\n  //\r\n  //   Examples where this is used include:\r\n  //     a += …;\r\n  //     import a from '…';\r\n  //   where a is the node to be checked.\r\n  //\r\n  // - checkLValPattern() shall be used if the syntactic construct supports\r\n  //   anything checkLValSimple() supports, as well as object and array\r\n  //   destructuring patterns. This is generally appropriate for constructs for\r\n  //   which the spec says\r\n  //\r\n  //   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\r\n  //   > an ArrayLiteral and AssignmentTargetType of [the production] is not\r\n  //   > simple.\r\n  //\r\n  //   Examples where this is used include:\r\n  //     (a = …);\r\n  //     const a = …;\r\n  //     try { … } catch (a) { … }\r\n  //   where a is the node to be checked.\r\n  //\r\n  // - checkLValInnerPattern() shall be used if the syntactic construct supports\r\n  //   anything checkLValPattern() supports, as well as default assignment\r\n  //   patterns, rest elements, and other constructs that may appear within an\r\n  //   object or array destructuring pattern.\r\n  //\r\n  //   As a special case, function parameters also use checkLValInnerPattern(),\r\n  //   as they also support defaults and rest constructs.\r\n  //\r\n  // These functions deliberately support both assignment and binding constructs,\r\n  // as the logic for both is exceedingly similar. If the node is the target of\r\n  // an assignment, then bindingType should be set to BIND_NONE. Otherwise, it\r\n  // should be set to the appropriate BIND_* constant, like BIND_VAR or\r\n  // BIND_LEXICAL.\r\n  //\r\n  // If the function is called with a non-BIND_NONE bindingType, then\r\n  // additionally a checkClashes object may be specified to allow checking for\r\n  // duplicate argument names. checkClashes is ignored if the provided construct\r\n  // is an assignment (i.e., bindingType is BIND_NONE).\r\n\r\n  pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {\r\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\r\n\r\n    var isBind = bindingType !== BIND_NONE;\r\n\r\n    switch (expr.type) {\r\n    case \"Identifier\":\r\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\r\n        { this.raiseRecoverable(expr.start, (isBind ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\r\n      if (isBind) {\r\n        if (bindingType === BIND_LEXICAL && expr.name === \"let\")\r\n          { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\r\n        if (checkClashes) {\r\n          if (hasOwn(checkClashes, expr.name))\r\n            { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\r\n          checkClashes[expr.name] = true;\r\n        }\r\n        if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\r\n      }\r\n      break\r\n\r\n    case \"ChainExpression\":\r\n      this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\r\n      break\r\n\r\n    case \"MemberExpression\":\r\n      if (isBind) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\r\n      break\r\n\r\n    case \"ParenthesizedExpression\":\r\n      if (isBind) { this.raiseRecoverable(expr.start, \"Binding parenthesized expression\"); }\r\n      return this.checkLValSimple(expr.expression, bindingType, checkClashes)\r\n\r\n    default:\r\n      this.raise(expr.start, (isBind ? \"Binding\" : \"Assigning to\") + \" rvalue\");\r\n    }\r\n  };\r\n\r\n  pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {\r\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\r\n\r\n    switch (expr.type) {\r\n    case \"ObjectPattern\":\r\n      for (var i = 0, list = expr.properties; i < list.length; i += 1) {\r\n        var prop = list[i];\r\n\r\n      this.checkLValInnerPattern(prop, bindingType, checkClashes);\r\n      }\r\n      break\r\n\r\n    case \"ArrayPattern\":\r\n      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\r\n        var elem = list$1[i$1];\r\n\r\n      if (elem) { this.checkLValInnerPattern(elem, bindingType, checkClashes); }\r\n      }\r\n      break\r\n\r\n    default:\r\n      this.checkLValSimple(expr, bindingType, checkClashes);\r\n    }\r\n  };\r\n\r\n  pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {\r\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\r\n\r\n    switch (expr.type) {\r\n    case \"Property\":\r\n      // AssignmentProperty has type === \"Property\"\r\n      this.checkLValInnerPattern(expr.value, bindingType, checkClashes);\r\n      break\r\n\r\n    case \"AssignmentPattern\":\r\n      this.checkLValPattern(expr.left, bindingType, checkClashes);\r\n      break\r\n\r\n    case \"RestElement\":\r\n      this.checkLValPattern(expr.argument, bindingType, checkClashes);\r\n      break\r\n\r\n    default:\r\n      this.checkLValPattern(expr, bindingType, checkClashes);\r\n    }\r\n  };\r\n\r\n  // The algorithm used to determine whether a regexp can appear at a\r\n  // given point in the program is loosely based on sweet.js' approach.\r\n  // See https://github.com/mozilla/sweet.js/wiki/design\r\n\r\n\r\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\r\n    this.token = token;\r\n    this.isExpr = !!isExpr;\r\n    this.preserveSpace = !!preserveSpace;\r\n    this.override = override;\r\n    this.generator = !!generator;\r\n  };\r\n\r\n  var types = {\r\n    b_stat: new TokContext(\"{\", false),\r\n    b_expr: new TokContext(\"{\", true),\r\n    b_tmpl: new TokContext(\"${\", false),\r\n    p_stat: new TokContext(\"(\", false),\r\n    p_expr: new TokContext(\"(\", true),\r\n    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\r\n    f_stat: new TokContext(\"function\", false),\r\n    f_expr: new TokContext(\"function\", true),\r\n    f_expr_gen: new TokContext(\"function\", true, false, null, true),\r\n    f_gen: new TokContext(\"function\", false, false, null, true)\r\n  };\r\n\r\n  var pp$6 = Parser.prototype;\r\n\r\n  pp$6.initialContext = function() {\r\n    return [types.b_stat]\r\n  };\r\n\r\n  pp$6.curContext = function() {\r\n    return this.context[this.context.length - 1]\r\n  };\r\n\r\n  pp$6.braceIsBlock = function(prevType) {\r\n    var parent = this.curContext();\r\n    if (parent === types.f_expr || parent === types.f_stat)\r\n      { return true }\r\n    if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr))\r\n      { return !parent.isExpr }\r\n\r\n    // The check for `tt.name && exprAllowed` detects whether we are\r\n    // after a `yield` or `of` construct. See the `updateContext` for\r\n    // `tt.name`.\r\n    if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed)\r\n      { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\r\n    if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow)\r\n      { return true }\r\n    if (prevType === types$1.braceL)\r\n      { return parent === types.b_stat }\r\n    if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name)\r\n      { return false }\r\n    return !this.exprAllowed\r\n  };\r\n\r\n  pp$6.inGeneratorContext = function() {\r\n    for (var i = this.context.length - 1; i >= 1; i--) {\r\n      var context = this.context[i];\r\n      if (context.token === \"function\")\r\n        { return context.generator }\r\n    }\r\n    return false\r\n  };\r\n\r\n  pp$6.updateContext = function(prevType) {\r\n    var update, type = this.type;\r\n    if (type.keyword && prevType === types$1.dot)\r\n      { this.exprAllowed = false; }\r\n    else if (update = type.updateContext)\r\n      { update.call(this, prevType); }\r\n    else\r\n      { this.exprAllowed = type.beforeExpr; }\r\n  };\r\n\r\n  // Used to handle edge cases when token context could not be inferred correctly during tokenization phase\r\n\r\n  pp$6.overrideContext = function(tokenCtx) {\r\n    if (this.curContext() !== tokenCtx) {\r\n      this.context[this.context.length - 1] = tokenCtx;\r\n    }\r\n  };\r\n\r\n  // Token-specific context update code\r\n\r\n  types$1.parenR.updateContext = types$1.braceR.updateContext = function() {\r\n    if (this.context.length === 1) {\r\n      this.exprAllowed = true;\r\n      return\r\n    }\r\n    var out = this.context.pop();\r\n    if (out === types.b_stat && this.curContext().token === \"function\") {\r\n      out = this.context.pop();\r\n    }\r\n    this.exprAllowed = !out.isExpr;\r\n  };\r\n\r\n  types$1.braceL.updateContext = function(prevType) {\r\n    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\r\n    this.exprAllowed = true;\r\n  };\r\n\r\n  types$1.dollarBraceL.updateContext = function() {\r\n    this.context.push(types.b_tmpl);\r\n    this.exprAllowed = true;\r\n  };\r\n\r\n  types$1.parenL.updateContext = function(prevType) {\r\n    var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\r\n    this.context.push(statementParens ? types.p_stat : types.p_expr);\r\n    this.exprAllowed = true;\r\n  };\r\n\r\n  types$1.incDec.updateContext = function() {\r\n    // tokExprAllowed stays unchanged\r\n  };\r\n\r\n  types$1._function.updateContext = types$1._class.updateContext = function(prevType) {\r\n    if (prevType.beforeExpr && prevType !== types$1._else &&\r\n        !(prevType === types$1.semi && this.curContext() !== types.p_stat) &&\r\n        !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\r\n        !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat))\r\n      { this.context.push(types.f_expr); }\r\n    else\r\n      { this.context.push(types.f_stat); }\r\n    this.exprAllowed = false;\r\n  };\r\n\r\n  types$1.colon.updateContext = function() {\r\n    if (this.curContext().token === \"function\") { this.context.pop(); }\r\n    this.exprAllowed = true;\r\n  };\r\n\r\n  types$1.backQuote.updateContext = function() {\r\n    if (this.curContext() === types.q_tmpl)\r\n      { this.context.pop(); }\r\n    else\r\n      { this.context.push(types.q_tmpl); }\r\n    this.exprAllowed = false;\r\n  };\r\n\r\n  types$1.star.updateContext = function(prevType) {\r\n    if (prevType === types$1._function) {\r\n      var index = this.context.length - 1;\r\n      if (this.context[index] === types.f_expr)\r\n        { this.context[index] = types.f_expr_gen; }\r\n      else\r\n        { this.context[index] = types.f_gen; }\r\n    }\r\n    this.exprAllowed = true;\r\n  };\r\n\r\n  types$1.name.updateContext = function(prevType) {\r\n    var allowed = false;\r\n    if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {\r\n      if (this.value === \"of\" && !this.exprAllowed ||\r\n          this.value === \"yield\" && this.inGeneratorContext())\r\n        { allowed = true; }\r\n    }\r\n    this.exprAllowed = allowed;\r\n  };\r\n\r\n  // A recursive descent parser operates by defining functions for all\r\n  // syntactic elements, and recursively calling those, each function\r\n  // advancing the input stream and returning an AST node. Precedence\r\n  // of constructs (for example, the fact that `!x[1]` means `!(x[1])`\r\n  // instead of `(!x)[1]` is handled by the fact that the parser\r\n  // function that parses unary prefix operators is called first, and\r\n  // in turn calls the function that parses `[]` subscripts — that\r\n  // way, it'll receive the node for `x[1]` already parsed, and wraps\r\n  // *that* in the unary operator node.\r\n  //\r\n  // Acorn uses an [operator precedence parser][opp] to handle binary\r\n  // operator precedence, because it is much more compact than using\r\n  // the technique outlined above, which uses different, nesting\r\n  // functions to specify precedence, for all of the ten binary\r\n  // precedence levels that JavaScript defines.\r\n  //\r\n  // [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\r\n\r\n\r\n  var pp$5 = Parser.prototype;\r\n\r\n  // Check if property name clashes with already added.\r\n  // Object/class getters and setters are not allowed to clash —\r\n  // either with each other or with an init property — and in\r\n  // strict mode, init properties are also not allowed to be repeated.\r\n\r\n  pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {\r\n    if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\r\n      { return }\r\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\r\n      { return }\r\n    var key = prop.key;\r\n    var name;\r\n    switch (key.type) {\r\n    case \"Identifier\": name = key.name; break\r\n    case \"Literal\": name = String(key.value); break\r\n    default: return\r\n    }\r\n    var kind = prop.kind;\r\n    if (this.options.ecmaVersion >= 6) {\r\n      if (name === \"__proto__\" && kind === \"init\") {\r\n        if (propHash.proto) {\r\n          if (refDestructuringErrors) {\r\n            if (refDestructuringErrors.doubleProto < 0) {\r\n              refDestructuringErrors.doubleProto = key.start;\r\n            }\r\n          } else {\r\n            this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\r\n          }\r\n        }\r\n        propHash.proto = true;\r\n      }\r\n      return\r\n    }\r\n    name = \"$\" + name;\r\n    var other = propHash[name];\r\n    if (other) {\r\n      var redefinition;\r\n      if (kind === \"init\") {\r\n        redefinition = this.strict && other.init || other.get || other.set;\r\n      } else {\r\n        redefinition = other.init || other[kind];\r\n      }\r\n      if (redefinition)\r\n        { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\r\n    } else {\r\n      other = propHash[name] = {\r\n        init: false,\r\n        get: false,\r\n        set: false\r\n      };\r\n    }\r\n    other[kind] = true;\r\n  };\r\n\r\n  // ### Expression parsing\r\n\r\n  // These nest, from the most general expression type at the top to\r\n  // 'atomic', nondivisible expression types at the bottom. Most of\r\n  // the functions will simply let the function(s) below them parse,\r\n  // and, *if* the syntactic construct they handle is present, wrap\r\n  // the AST node that the inner parser gave them in another node.\r\n\r\n  // Parse a full expression. The optional arguments are used to\r\n  // forbid the `in` operator (in for loops initalization expressions)\r\n  // and provide reference for storing '=' operator inside shorthand\r\n  // property assignment in contexts where both object expression\r\n  // and object pattern might appear (so it's possible to raise\r\n  // delayed syntax error at correct position).\r\n\r\n  pp$5.parseExpression = function(forInit, refDestructuringErrors) {\r\n    var startPos = this.start, startLoc = this.startLoc;\r\n    var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);\r\n    if (this.type === types$1.comma) {\r\n      var node = this.startNodeAt(startPos, startLoc);\r\n      node.expressions = [expr];\r\n      while (this.eat(types$1.comma)) { node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors)); }\r\n      return this.finishNode(node, \"SequenceExpression\")\r\n    }\r\n    return expr\r\n  };\r\n\r\n  // Parse an assignment expression. This includes applications of\r\n  // operators like `+=`.\r\n\r\n  pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {\r\n    if (this.isContextual(\"yield\")) {\r\n      if (this.inGenerator) { return this.parseYield(forInit) }\r\n      // The tokenizer will assume an expression is allowed after\r\n      // `yield`, but this isn't that kind of yield\r\n      else { this.exprAllowed = false; }\r\n    }\r\n\r\n    var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;\r\n    if (refDestructuringErrors) {\r\n      oldParenAssign = refDestructuringErrors.parenthesizedAssign;\r\n      oldTrailingComma = refDestructuringErrors.trailingComma;\r\n      oldDoubleProto = refDestructuringErrors.doubleProto;\r\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\r\n    } else {\r\n      refDestructuringErrors = new DestructuringErrors;\r\n      ownDestructuringErrors = true;\r\n    }\r\n\r\n    var startPos = this.start, startLoc = this.startLoc;\r\n    if (this.type === types$1.parenL || this.type === types$1.name) {\r\n      this.potentialArrowAt = this.start;\r\n      this.potentialArrowInForAwait = forInit === \"await\";\r\n    }\r\n    var left = this.parseMaybeConditional(forInit, refDestructuringErrors);\r\n    if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\r\n    if (this.type.isAssign) {\r\n      var node = this.startNodeAt(startPos, startLoc);\r\n      node.operator = this.value;\r\n      if (this.type === types$1.eq)\r\n        { left = this.toAssignable(left, false, refDestructuringErrors); }\r\n      if (!ownDestructuringErrors) {\r\n        refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\r\n      }\r\n      if (refDestructuringErrors.shorthandAssign >= left.start)\r\n        { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\r\n      if (this.type === types$1.eq)\r\n        { this.checkLValPattern(left); }\r\n      else\r\n        { this.checkLValSimple(left); }\r\n      node.left = left;\r\n      this.next();\r\n      node.right = this.parseMaybeAssign(forInit);\r\n      if (oldDoubleProto > -1) { refDestructuringErrors.doubleProto = oldDoubleProto; }\r\n      return this.finishNode(node, \"AssignmentExpression\")\r\n    } else {\r\n      if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\r\n    }\r\n    if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\r\n    if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\r\n    return left\r\n  };\r\n\r\n  // Parse a ternary conditional (`?:`) operator.\r\n\r\n  pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {\r\n    var startPos = this.start, startLoc = this.startLoc;\r\n    var expr = this.parseExprOps(forInit, refDestructuringErrors);\r\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\r\n    if (this.eat(types$1.question)) {\r\n      var node = this.startNodeAt(startPos, startLoc);\r\n      node.test = expr;\r\n      node.consequent = this.parseMaybeAssign();\r\n      this.expect(types$1.colon);\r\n      node.alternate = this.parseMaybeAssign(forInit);\r\n      return this.finishNode(node, \"ConditionalExpression\")\r\n    }\r\n    return expr\r\n  };\r\n\r\n  // Start the precedence parser.\r\n\r\n  pp$5.parseExprOps = function(forInit, refDestructuringErrors) {\r\n    var startPos = this.start, startLoc = this.startLoc;\r\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);\r\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\r\n    return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit)\r\n  };\r\n\r\n  // Parse binary operators with the operator precedence parsing\r\n  // algorithm. `left` is the left-hand side of the operator.\r\n  // `minPrec` provides context that allows the function to stop and\r\n  // defer further parser to one of its callers when it encounters an\r\n  // operator that has a lower precedence than the set it is parsing.\r\n\r\n  pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {\r\n    var prec = this.type.binop;\r\n    if (prec != null && (!forInit || this.type !== types$1._in)) {\r\n      if (prec > minPrec) {\r\n        var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;\r\n        var coalesce = this.type === types$1.coalesce;\r\n        if (coalesce) {\r\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\r\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\r\n          prec = types$1.logicalAND.binop;\r\n        }\r\n        var op = this.value;\r\n        this.next();\r\n        var startPos = this.start, startLoc = this.startLoc;\r\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);\r\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\r\n        if ((logical && this.type === types$1.coalesce) || (coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND))) {\r\n          this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\r\n        }\r\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit)\r\n      }\r\n    }\r\n    return left\r\n  };\r\n\r\n  pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {\r\n    if (right.type === \"PrivateIdentifier\") { this.raise(right.start, \"Private identifier can only be left side of binary expression\"); }\r\n    var node = this.startNodeAt(startPos, startLoc);\r\n    node.left = left;\r\n    node.operator = op;\r\n    node.right = right;\r\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\r\n  };\r\n\r\n  // Parse unary operators, both prefix and postfix.\r\n\r\n  pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {\r\n    var startPos = this.start, startLoc = this.startLoc, expr;\r\n    if (this.isContextual(\"await\") && this.canAwait) {\r\n      expr = this.parseAwait(forInit);\r\n      sawUnary = true;\r\n    } else if (this.type.prefix) {\r\n      var node = this.startNode(), update = this.type === types$1.incDec;\r\n      node.operator = this.value;\r\n      node.prefix = true;\r\n      this.next();\r\n      node.argument = this.parseMaybeUnary(null, true, update, forInit);\r\n      this.checkExpressionErrors(refDestructuringErrors, true);\r\n      if (update) { this.checkLValSimple(node.argument); }\r\n      else if (this.strict && node.operator === \"delete\" &&\r\n               node.argument.type === \"Identifier\")\r\n        { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\r\n      else if (node.operator === \"delete\" && isPrivateFieldAccess(node.argument))\r\n        { this.raiseRecoverable(node.start, \"Private fields can not be deleted\"); }\r\n      else { sawUnary = true; }\r\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\r\n    } else if (!sawUnary && this.type === types$1.privateId) {\r\n      if ((forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields) { this.unexpected(); }\r\n      expr = this.parsePrivateIdent();\r\n      // only could be private fields in 'in', such as #x in obj\r\n      if (this.type !== types$1._in) { this.unexpected(); }\r\n    } else {\r\n      expr = this.parseExprSubscripts(refDestructuringErrors, forInit);\r\n      if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\r\n      while (this.type.postfix && !this.canInsertSemicolon()) {\r\n        var node$1 = this.startNodeAt(startPos, startLoc);\r\n        node$1.operator = this.value;\r\n        node$1.prefix = false;\r\n        node$1.argument = expr;\r\n        this.checkLValSimple(expr);\r\n        this.next();\r\n        expr = this.finishNode(node$1, \"UpdateExpression\");\r\n      }\r\n    }\r\n\r\n    if (!incDec && this.eat(types$1.starstar)) {\r\n      if (sawUnary)\r\n        { this.unexpected(this.lastTokStart); }\r\n      else\r\n        { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), \"**\", false) }\r\n    } else {\r\n      return expr\r\n    }\r\n  };\r\n\r\n  function isPrivateFieldAccess(node) {\r\n    return (\r\n      node.type === \"MemberExpression\" && node.property.type === \"PrivateIdentifier\" ||\r\n      node.type === \"ChainExpression\" && isPrivateFieldAccess(node.expression)\r\n    )\r\n  }\r\n\r\n  // Parse call, dot, and `[]`-subscript expressions.\r\n\r\n  pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {\r\n    var startPos = this.start, startLoc = this.startLoc;\r\n    var expr = this.parseExprAtom(refDestructuringErrors, forInit);\r\n    if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\r\n      { return expr }\r\n    var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);\r\n    if (refDestructuringErrors && result.type === \"MemberExpression\") {\r\n      if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\r\n      if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\r\n      if (refDestructuringErrors.trailingComma >= result.start) { refDestructuringErrors.trailingComma = -1; }\r\n    }\r\n    return result\r\n  };\r\n\r\n  pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {\r\n    var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\r\n        this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&\r\n        this.potentialArrowAt === base.start;\r\n    var optionalChained = false;\r\n\r\n    while (true) {\r\n      var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);\r\n\r\n      if (element.optional) { optionalChained = true; }\r\n      if (element === base || element.type === \"ArrowFunctionExpression\") {\r\n        if (optionalChained) {\r\n          var chainNode = this.startNodeAt(startPos, startLoc);\r\n          chainNode.expression = element;\r\n          element = this.finishNode(chainNode, \"ChainExpression\");\r\n        }\r\n        return element\r\n      }\r\n\r\n      base = element;\r\n    }\r\n  };\r\n\r\n  pp$5.shouldParseAsyncArrow = function() {\r\n    return !this.canInsertSemicolon() && this.eat(types$1.arrow)\r\n  };\r\n\r\n  pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {\r\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit)\r\n  };\r\n\r\n  pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {\r\n    var optionalSupported = this.options.ecmaVersion >= 11;\r\n    var optional = optionalSupported && this.eat(types$1.questionDot);\r\n    if (noCalls && optional) { this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\"); }\r\n\r\n    var computed = this.eat(types$1.bracketL);\r\n    if (computed || (optional && this.type !== types$1.parenL && this.type !== types$1.backQuote) || this.eat(types$1.dot)) {\r\n      var node = this.startNodeAt(startPos, startLoc);\r\n      node.object = base;\r\n      if (computed) {\r\n        node.property = this.parseExpression();\r\n        this.expect(types$1.bracketR);\r\n      } else if (this.type === types$1.privateId && base.type !== \"Super\") {\r\n        node.property = this.parsePrivateIdent();\r\n      } else {\r\n        node.property = this.parseIdent(this.options.allowReserved !== \"never\");\r\n      }\r\n      node.computed = !!computed;\r\n      if (optionalSupported) {\r\n        node.optional = optional;\r\n      }\r\n      base = this.finishNode(node, \"MemberExpression\");\r\n    } else if (!noCalls && this.eat(types$1.parenL)) {\r\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\r\n      this.yieldPos = 0;\r\n      this.awaitPos = 0;\r\n      this.awaitIdentPos = 0;\r\n      var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\r\n      if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) {\r\n        this.checkPatternErrors(refDestructuringErrors, false);\r\n        this.checkYieldAwaitInDefaultParams();\r\n        if (this.awaitIdentPos > 0)\r\n          { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\r\n        this.yieldPos = oldYieldPos;\r\n        this.awaitPos = oldAwaitPos;\r\n        this.awaitIdentPos = oldAwaitIdentPos;\r\n        return this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit)\r\n      }\r\n      this.checkExpressionErrors(refDestructuringErrors, true);\r\n      this.yieldPos = oldYieldPos || this.yieldPos;\r\n      this.awaitPos = oldAwaitPos || this.awaitPos;\r\n      this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\r\n      var node$1 = this.startNodeAt(startPos, startLoc);\r\n      node$1.callee = base;\r\n      node$1.arguments = exprList;\r\n      if (optionalSupported) {\r\n        node$1.optional = optional;\r\n      }\r\n      base = this.finishNode(node$1, \"CallExpression\");\r\n    } else if (this.type === types$1.backQuote) {\r\n      if (optional || optionalChained) {\r\n        this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\r\n      }\r\n      var node$2 = this.startNodeAt(startPos, startLoc);\r\n      node$2.tag = base;\r\n      node$2.quasi = this.parseTemplate({isTagged: true});\r\n      base = this.finishNode(node$2, \"TaggedTemplateExpression\");\r\n    }\r\n    return base\r\n  };\r\n\r\n  // Parse an atomic expression — either a single token that is an\r\n  // expression, an expression started by a keyword like `function` or\r\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\r\n  // or `{}`.\r\n\r\n  pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {\r\n    // If a division operator appears in an expression position, the\r\n    // tokenizer got confused, and we force it to read a regexp instead.\r\n    if (this.type === types$1.slash) { this.readRegexp(); }\r\n\r\n    var node, canBeArrow = this.potentialArrowAt === this.start;\r\n    switch (this.type) {\r\n    case types$1._super:\r\n      if (!this.allowSuper)\r\n        { this.raise(this.start, \"'super' keyword outside a method\"); }\r\n      node = this.startNode();\r\n      this.next();\r\n      if (this.type === types$1.parenL && !this.allowDirectSuper)\r\n        { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\r\n      // The `super` keyword can appear at below:\r\n      // SuperProperty:\r\n      //     super [ Expression ]\r\n      //     super . IdentifierName\r\n      // SuperCall:\r\n      //     super ( Arguments )\r\n      if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL)\r\n        { this.unexpected(); }\r\n      return this.finishNode(node, \"Super\")\r\n\r\n    case types$1._this:\r\n      node = this.startNode();\r\n      this.next();\r\n      return this.finishNode(node, \"ThisExpression\")\r\n\r\n    case types$1.name:\r\n      var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\r\n      var id = this.parseIdent(false);\r\n      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types$1._function)) {\r\n        this.overrideContext(types.f_expr);\r\n        return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit)\r\n      }\r\n      if (canBeArrow && !this.canInsertSemicolon()) {\r\n        if (this.eat(types$1.arrow))\r\n          { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit) }\r\n        if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types$1.name && !containsEsc &&\r\n            (!this.potentialArrowInForAwait || this.value !== \"of\" || this.containsEsc)) {\r\n          id = this.parseIdent(false);\r\n          if (this.canInsertSemicolon() || !this.eat(types$1.arrow))\r\n            { this.unexpected(); }\r\n          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit)\r\n        }\r\n      }\r\n      return id\r\n\r\n    case types$1.regexp:\r\n      var value = this.value;\r\n      node = this.parseLiteral(value.value);\r\n      node.regex = {pattern: value.pattern, flags: value.flags};\r\n      return node\r\n\r\n    case types$1.num: case types$1.string:\r\n      return this.parseLiteral(this.value)\r\n\r\n    case types$1._null: case types$1._true: case types$1._false:\r\n      node = this.startNode();\r\n      node.value = this.type === types$1._null ? null : this.type === types$1._true;\r\n      node.raw = this.type.keyword;\r\n      this.next();\r\n      return this.finishNode(node, \"Literal\")\r\n\r\n    case types$1.parenL:\r\n      var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);\r\n      if (refDestructuringErrors) {\r\n        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\r\n          { refDestructuringErrors.parenthesizedAssign = start; }\r\n        if (refDestructuringErrors.parenthesizedBind < 0)\r\n          { refDestructuringErrors.parenthesizedBind = start; }\r\n      }\r\n      return expr\r\n\r\n    case types$1.bracketL:\r\n      node = this.startNode();\r\n      this.next();\r\n      node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);\r\n      return this.finishNode(node, \"ArrayExpression\")\r\n\r\n    case types$1.braceL:\r\n      this.overrideContext(types.b_expr);\r\n      return this.parseObj(false, refDestructuringErrors)\r\n\r\n    case types$1._function:\r\n      node = this.startNode();\r\n      this.next();\r\n      return this.parseFunction(node, 0)\r\n\r\n    case types$1._class:\r\n      return this.parseClass(this.startNode(), false)\r\n\r\n    case types$1._new:\r\n      return this.parseNew()\r\n\r\n    case types$1.backQuote:\r\n      return this.parseTemplate()\r\n\r\n    case types$1._import:\r\n      if (this.options.ecmaVersion >= 11) {\r\n        return this.parseExprImport(forNew)\r\n      } else {\r\n        return this.unexpected()\r\n      }\r\n\r\n    default:\r\n      return this.parseExprAtomDefault()\r\n    }\r\n  };\r\n\r\n  pp$5.parseExprAtomDefault = function() {\r\n    this.unexpected();\r\n  };\r\n\r\n  pp$5.parseExprImport = function(forNew) {\r\n    var node = this.startNode();\r\n\r\n    // Consume `import` as an identifier for `import.meta`.\r\n    // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\r\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword import\"); }\r\n    this.next();\r\n\r\n    if (this.type === types$1.parenL && !forNew) {\r\n      return this.parseDynamicImport(node)\r\n    } else if (this.type === types$1.dot) {\r\n      var meta = this.startNodeAt(node.start, node.loc && node.loc.start);\r\n      meta.name = \"import\";\r\n      node.meta = this.finishNode(meta, \"Identifier\");\r\n      return this.parseImportMeta(node)\r\n    } else {\r\n      this.unexpected();\r\n    }\r\n  };\r\n\r\n  pp$5.parseDynamicImport = function(node) {\r\n    this.next(); // skip `(`\r\n\r\n    // Parse node.source.\r\n    node.source = this.parseMaybeAssign();\r\n\r\n    // Verify ending.\r\n    if (!this.eat(types$1.parenR)) {\r\n      var errorPos = this.start;\r\n      if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {\r\n        this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\r\n      } else {\r\n        this.unexpected(errorPos);\r\n      }\r\n    }\r\n\r\n    return this.finishNode(node, \"ImportExpression\")\r\n  };\r\n\r\n  pp$5.parseImportMeta = function(node) {\r\n    this.next(); // skip `.`\r\n\r\n    var containsEsc = this.containsEsc;\r\n    node.property = this.parseIdent(true);\r\n\r\n    if (node.property.name !== \"meta\")\r\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\"); }\r\n    if (containsEsc)\r\n      { this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\"); }\r\n    if (this.options.sourceType !== \"module\" && !this.options.allowImportExportEverywhere)\r\n      { this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\"); }\r\n\r\n    return this.finishNode(node, \"MetaProperty\")\r\n  };\r\n\r\n  pp$5.parseLiteral = function(value) {\r\n    var node = this.startNode();\r\n    node.value = value;\r\n    node.raw = this.input.slice(this.start, this.end);\r\n    if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\"); }\r\n    this.next();\r\n    return this.finishNode(node, \"Literal\")\r\n  };\r\n\r\n  pp$5.parseParenExpression = function() {\r\n    this.expect(types$1.parenL);\r\n    var val = this.parseExpression();\r\n    this.expect(types$1.parenR);\r\n    return val\r\n  };\r\n\r\n  pp$5.shouldParseArrow = function(exprList) {\r\n    return !this.canInsertSemicolon()\r\n  };\r\n\r\n  pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {\r\n    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\r\n    if (this.options.ecmaVersion >= 6) {\r\n      this.next();\r\n\r\n      var innerStartPos = this.start, innerStartLoc = this.startLoc;\r\n      var exprList = [], first = true, lastIsComma = false;\r\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\r\n      this.yieldPos = 0;\r\n      this.awaitPos = 0;\r\n      // Do not save awaitIdentPos to allow checking awaits nested in parameters\r\n      while (this.type !== types$1.parenR) {\r\n        first ? first = false : this.expect(types$1.comma);\r\n        if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {\r\n          lastIsComma = true;\r\n          break\r\n        } else if (this.type === types$1.ellipsis) {\r\n          spreadStart = this.start;\r\n          exprList.push(this.parseParenItem(this.parseRestBinding()));\r\n          if (this.type === types$1.comma) {\r\n            this.raiseRecoverable(\r\n              this.start,\r\n              \"Comma is not permitted after the rest element\"\r\n            );\r\n          }\r\n          break\r\n        } else {\r\n          exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\r\n        }\r\n      }\r\n      var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;\r\n      this.expect(types$1.parenR);\r\n\r\n      if (canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) {\r\n        this.checkPatternErrors(refDestructuringErrors, false);\r\n        this.checkYieldAwaitInDefaultParams();\r\n        this.yieldPos = oldYieldPos;\r\n        this.awaitPos = oldAwaitPos;\r\n        return this.parseParenArrowList(startPos, startLoc, exprList, forInit)\r\n      }\r\n\r\n      if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\r\n      if (spreadStart) { this.unexpected(spreadStart); }\r\n      this.checkExpressionErrors(refDestructuringErrors, true);\r\n      this.yieldPos = oldYieldPos || this.yieldPos;\r\n      this.awaitPos = oldAwaitPos || this.awaitPos;\r\n\r\n      if (exprList.length > 1) {\r\n        val = this.startNodeAt(innerStartPos, innerStartLoc);\r\n        val.expressions = exprList;\r\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\r\n      } else {\r\n        val = exprList[0];\r\n      }\r\n    } else {\r\n      val = this.parseParenExpression();\r\n    }\r\n\r\n    if (this.options.preserveParens) {\r\n      var par = this.startNodeAt(startPos, startLoc);\r\n      par.expression = val;\r\n      return this.finishNode(par, \"ParenthesizedExpression\")\r\n    } else {\r\n      return val\r\n    }\r\n  };\r\n\r\n  pp$5.parseParenItem = function(item) {\r\n    return item\r\n  };\r\n\r\n  pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {\r\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit)\r\n  };\r\n\r\n  // New's precedence is slightly tricky. It must allow its argument to\r\n  // be a `[]` or dot subscript expression, but not a call — at least,\r\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\r\n  // argument to parseSubscripts to prevent it from consuming the\r\n  // argument list.\r\n\r\n  var empty = [];\r\n\r\n  pp$5.parseNew = function() {\r\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\r\n    var node = this.startNode();\r\n    this.next();\r\n    if (this.options.ecmaVersion >= 6 && this.type === types$1.dot) {\r\n      var meta = this.startNodeAt(node.start, node.loc && node.loc.start);\r\n      meta.name = \"new\";\r\n      node.meta = this.finishNode(meta, \"Identifier\");\r\n      this.next();\r\n      var containsEsc = this.containsEsc;\r\n      node.property = this.parseIdent(true);\r\n      if (node.property.name !== \"target\")\r\n        { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\"); }\r\n      if (containsEsc)\r\n        { this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\"); }\r\n      if (!this.allowNewDotTarget)\r\n        { this.raiseRecoverable(node.start, \"'new.target' can only be used in functions and class static block\"); }\r\n      return this.finishNode(node, \"MetaProperty\")\r\n    }\r\n    var startPos = this.start, startLoc = this.startLoc;\r\n    node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false);\r\n    if (this.eat(types$1.parenL)) { node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false); }\r\n    else { node.arguments = empty; }\r\n    return this.finishNode(node, \"NewExpression\")\r\n  };\r\n\r\n  // Parse template expression.\r\n\r\n  pp$5.parseTemplateElement = function(ref) {\r\n    var isTagged = ref.isTagged;\r\n\r\n    var elem = this.startNode();\r\n    if (this.type === types$1.invalidTemplate) {\r\n      if (!isTagged) {\r\n        this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\r\n      }\r\n      elem.value = {\r\n        raw: this.value,\r\n        cooked: null\r\n      };\r\n    } else {\r\n      elem.value = {\r\n        raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\r\n        cooked: this.value\r\n      };\r\n    }\r\n    this.next();\r\n    elem.tail = this.type === types$1.backQuote;\r\n    return this.finishNode(elem, \"TemplateElement\")\r\n  };\r\n\r\n  pp$5.parseTemplate = function(ref) {\r\n    if ( ref === void 0 ) ref = {};\r\n    var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\r\n\r\n    var node = this.startNode();\r\n    this.next();\r\n    node.expressions = [];\r\n    var curElt = this.parseTemplateElement({isTagged: isTagged});\r\n    node.quasis = [curElt];\r\n    while (!curElt.tail) {\r\n      if (this.type === types$1.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\r\n      this.expect(types$1.dollarBraceL);\r\n      node.expressions.push(this.parseExpression());\r\n      this.expect(types$1.braceR);\r\n      node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\r\n    }\r\n    this.next();\r\n    return this.finishNode(node, \"TemplateLiteral\")\r\n  };\r\n\r\n  pp$5.isAsyncProp = function(prop) {\r\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\r\n      (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types$1.star)) &&\r\n      !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\r\n  };\r\n\r\n  // Parse an object literal or binding pattern.\r\n\r\n  pp$5.parseObj = function(isPattern, refDestructuringErrors) {\r\n    var node = this.startNode(), first = true, propHash = {};\r\n    node.properties = [];\r\n    this.next();\r\n    while (!this.eat(types$1.braceR)) {\r\n      if (!first) {\r\n        this.expect(types$1.comma);\r\n        if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) { break }\r\n      } else { first = false; }\r\n\r\n      var prop = this.parseProperty(isPattern, refDestructuringErrors);\r\n      if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\r\n      node.properties.push(prop);\r\n    }\r\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\r\n  };\r\n\r\n  pp$5.parseProperty = function(isPattern, refDestructuringErrors) {\r\n    var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\r\n    if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {\r\n      if (isPattern) {\r\n        prop.argument = this.parseIdent(false);\r\n        if (this.type === types$1.comma) {\r\n          this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\");\r\n        }\r\n        return this.finishNode(prop, \"RestElement\")\r\n      }\r\n      // Parse argument.\r\n      prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\r\n      // To disallow trailing comma via `this.toAssignable()`.\r\n      if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\r\n        refDestructuringErrors.trailingComma = this.start;\r\n      }\r\n      // Finish\r\n      return this.finishNode(prop, \"SpreadElement\")\r\n    }\r\n    if (this.options.ecmaVersion >= 6) {\r\n      prop.method = false;\r\n      prop.shorthand = false;\r\n      if (isPattern || refDestructuringErrors) {\r\n        startPos = this.start;\r\n        startLoc = this.startLoc;\r\n      }\r\n      if (!isPattern)\r\n        { isGenerator = this.eat(types$1.star); }\r\n    }\r\n    var containsEsc = this.containsEsc;\r\n    this.parsePropertyName(prop);\r\n    if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\r\n      isAsync = true;\r\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);\r\n      this.parsePropertyName(prop);\r\n    } else {\r\n      isAsync = false;\r\n    }\r\n    this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\r\n    return this.finishNode(prop, \"Property\")\r\n  };\r\n\r\n  pp$5.parseGetterSetter = function(prop) {\r\n    prop.kind = prop.key.name;\r\n    this.parsePropertyName(prop);\r\n    prop.value = this.parseMethod(false);\r\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\r\n    if (prop.value.params.length !== paramCount) {\r\n      var start = prop.value.start;\r\n      if (prop.kind === \"get\")\r\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\r\n      else\r\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\r\n    } else {\r\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\r\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\r\n    }\r\n  };\r\n\r\n  pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\r\n    if ((isGenerator || isAsync) && this.type === types$1.colon)\r\n      { this.unexpected(); }\r\n\r\n    if (this.eat(types$1.colon)) {\r\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\r\n      prop.kind = \"init\";\r\n    } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {\r\n      if (isPattern) { this.unexpected(); }\r\n      prop.kind = \"init\";\r\n      prop.method = true;\r\n      prop.value = this.parseMethod(isGenerator, isAsync);\r\n    } else if (!isPattern && !containsEsc &&\r\n               this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\r\n               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\r\n               (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {\r\n      if (isGenerator || isAsync) { this.unexpected(); }\r\n      this.parseGetterSetter(prop);\r\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\r\n      if (isGenerator || isAsync) { this.unexpected(); }\r\n      this.checkUnreserved(prop.key);\r\n      if (prop.key.name === \"await\" && !this.awaitIdentPos)\r\n        { this.awaitIdentPos = startPos; }\r\n      prop.kind = \"init\";\r\n      if (isPattern) {\r\n        prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\r\n      } else if (this.type === types$1.eq && refDestructuringErrors) {\r\n        if (refDestructuringErrors.shorthandAssign < 0)\r\n          { refDestructuringErrors.shorthandAssign = this.start; }\r\n        prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\r\n      } else {\r\n        prop.value = this.copyNode(prop.key);\r\n      }\r\n      prop.shorthand = true;\r\n    } else { this.unexpected(); }\r\n  };\r\n\r\n  pp$5.parsePropertyName = function(prop) {\r\n    if (this.options.ecmaVersion >= 6) {\r\n      if (this.eat(types$1.bracketL)) {\r\n        prop.computed = true;\r\n        prop.key = this.parseMaybeAssign();\r\n        this.expect(types$1.bracketR);\r\n        return prop.key\r\n      } else {\r\n        prop.computed = false;\r\n      }\r\n    }\r\n    return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\r\n  };\r\n\r\n  // Initialize empty function node.\r\n\r\n  pp$5.initFunction = function(node) {\r\n    node.id = null;\r\n    if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\r\n    if (this.options.ecmaVersion >= 8) { node.async = false; }\r\n  };\r\n\r\n  // Parse object or class method.\r\n\r\n  pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\r\n    var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\r\n\r\n    this.initFunction(node);\r\n    if (this.options.ecmaVersion >= 6)\r\n      { node.generator = isGenerator; }\r\n    if (this.options.ecmaVersion >= 8)\r\n      { node.async = !!isAsync; }\r\n\r\n    this.yieldPos = 0;\r\n    this.awaitPos = 0;\r\n    this.awaitIdentPos = 0;\r\n    this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\r\n\r\n    this.expect(types$1.parenL);\r\n    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\r\n    this.checkYieldAwaitInDefaultParams();\r\n    this.parseFunctionBody(node, false, true, false);\r\n\r\n    this.yieldPos = oldYieldPos;\r\n    this.awaitPos = oldAwaitPos;\r\n    this.awaitIdentPos = oldAwaitIdentPos;\r\n    return this.finishNode(node, \"FunctionExpression\")\r\n  };\r\n\r\n  // Parse arrow function expression with given parameters.\r\n\r\n  pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {\r\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\r\n\r\n    this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\r\n    this.initFunction(node);\r\n    if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\r\n\r\n    this.yieldPos = 0;\r\n    this.awaitPos = 0;\r\n    this.awaitIdentPos = 0;\r\n\r\n    node.params = this.toAssignableList(params, true);\r\n    this.parseFunctionBody(node, true, false, forInit);\r\n\r\n    this.yieldPos = oldYieldPos;\r\n    this.awaitPos = oldAwaitPos;\r\n    this.awaitIdentPos = oldAwaitIdentPos;\r\n    return this.finishNode(node, \"ArrowFunctionExpression\")\r\n  };\r\n\r\n  // Parse function body and check parameters.\r\n\r\n  pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {\r\n    var isExpression = isArrowFunction && this.type !== types$1.braceL;\r\n    var oldStrict = this.strict, useStrict = false;\r\n\r\n    if (isExpression) {\r\n      node.body = this.parseMaybeAssign(forInit);\r\n      node.expression = true;\r\n      this.checkParams(node, false);\r\n    } else {\r\n      var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\r\n      if (!oldStrict || nonSimple) {\r\n        useStrict = this.strictDirective(this.end);\r\n        // If this is a strict mode function, verify that argument names\r\n        // are not repeated, and it does not try to bind the words `eval`\r\n        // or `arguments`.\r\n        if (useStrict && nonSimple)\r\n          { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\r\n      }\r\n      // Start a new scope with regard to labels and the `inFunction`\r\n      // flag (restore them to their old value afterwards).\r\n      var oldLabels = this.labels;\r\n      this.labels = [];\r\n      if (useStrict) { this.strict = true; }\r\n\r\n      // Add the params to varDeclaredNames to ensure that an error is thrown\r\n      // if a let/const declaration in the function clashes with one of the params.\r\n      this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\r\n      // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\r\n      if (this.strict && node.id) { this.checkLValSimple(node.id, BIND_OUTSIDE); }\r\n      node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\r\n      node.expression = false;\r\n      this.adaptDirectivePrologue(node.body.body);\r\n      this.labels = oldLabels;\r\n    }\r\n    this.exitScope();\r\n  };\r\n\r\n  pp$5.isSimpleParamList = function(params) {\r\n    for (var i = 0, list = params; i < list.length; i += 1)\r\n      {\r\n      var param = list[i];\r\n\r\n      if (param.type !== \"Identifier\") { return false\r\n    } }\r\n    return true\r\n  };\r\n\r\n  // Checks function params for various disallowed patterns such as using \"eval\"\r\n  // or \"arguments\" and duplicate parameters.\r\n\r\n  pp$5.checkParams = function(node, allowDuplicates) {\r\n    var nameHash = Object.create(null);\r\n    for (var i = 0, list = node.params; i < list.length; i += 1)\r\n      {\r\n      var param = list[i];\r\n\r\n      this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);\r\n    }\r\n  };\r\n\r\n  // Parses a comma-separated list of expressions, and returns them as\r\n  // an array. `close` is the token type that ends the list, and\r\n  // `allowEmpty` can be turned on to allow subsequent commas with\r\n  // nothing in between them to be parsed as `null` (which is needed\r\n  // for array literals).\r\n\r\n  pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\r\n    var elts = [], first = true;\r\n    while (!this.eat(close)) {\r\n      if (!first) {\r\n        this.expect(types$1.comma);\r\n        if (allowTrailingComma && this.afterTrailingComma(close)) { break }\r\n      } else { first = false; }\r\n\r\n      var elt = (void 0);\r\n      if (allowEmpty && this.type === types$1.comma)\r\n        { elt = null; }\r\n      else if (this.type === types$1.ellipsis) {\r\n        elt = this.parseSpread(refDestructuringErrors);\r\n        if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0)\r\n          { refDestructuringErrors.trailingComma = this.start; }\r\n      } else {\r\n        elt = this.parseMaybeAssign(false, refDestructuringErrors);\r\n      }\r\n      elts.push(elt);\r\n    }\r\n    return elts\r\n  };\r\n\r\n  pp$5.checkUnreserved = function(ref) {\r\n    var start = ref.start;\r\n    var end = ref.end;\r\n    var name = ref.name;\r\n\r\n    if (this.inGenerator && name === \"yield\")\r\n      { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\r\n    if (this.inAsync && name === \"await\")\r\n      { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\r\n    if (this.currentThisScope().inClassFieldInit && name === \"arguments\")\r\n      { this.raiseRecoverable(start, \"Cannot use 'arguments' in class field initializer\"); }\r\n    if (this.inClassStaticBlock && (name === \"arguments\" || name === \"await\"))\r\n      { this.raise(start, (\"Cannot use \" + name + \" in class static initialization block\")); }\r\n    if (this.keywords.test(name))\r\n      { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\r\n    if (this.options.ecmaVersion < 6 &&\r\n      this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\r\n    var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\r\n    if (re.test(name)) {\r\n      if (!this.inAsync && name === \"await\")\r\n        { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\r\n      this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\r\n    }\r\n  };\r\n\r\n  // Parse the next token as an identifier. If `liberal` is true (used\r\n  // when parsing properties), it will also convert keywords into\r\n  // identifiers.\r\n\r\n  pp$5.parseIdent = function(liberal) {\r\n    var node = this.parseIdentNode();\r\n    this.next(!!liberal);\r\n    this.finishNode(node, \"Identifier\");\r\n    if (!liberal) {\r\n      this.checkUnreserved(node);\r\n      if (node.name === \"await\" && !this.awaitIdentPos)\r\n        { this.awaitIdentPos = node.start; }\r\n    }\r\n    return node\r\n  };\r\n\r\n  pp$5.parseIdentNode = function() {\r\n    var node = this.startNode();\r\n    if (this.type === types$1.name) {\r\n      node.name = this.value;\r\n    } else if (this.type.keyword) {\r\n      node.name = this.type.keyword;\r\n\r\n      // To fix https://github.com/acornjs/acorn/issues/575\r\n      // `class` and `function` keywords push new context into this.context.\r\n      // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\r\n      // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\r\n      if ((node.name === \"class\" || node.name === \"function\") &&\r\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\r\n        this.context.pop();\r\n      }\r\n      this.type = types$1.name;\r\n    } else {\r\n      this.unexpected();\r\n    }\r\n    return node\r\n  };\r\n\r\n  pp$5.parsePrivateIdent = function() {\r\n    var node = this.startNode();\r\n    if (this.type === types$1.privateId) {\r\n      node.name = this.value;\r\n    } else {\r\n      this.unexpected();\r\n    }\r\n    this.next();\r\n    this.finishNode(node, \"PrivateIdentifier\");\r\n\r\n    // For validating existence\r\n    if (this.options.checkPrivateFields) {\r\n      if (this.privateNameStack.length === 0) {\r\n        this.raise(node.start, (\"Private field '#\" + (node.name) + \"' must be declared in an enclosing class\"));\r\n      } else {\r\n        this.privateNameStack[this.privateNameStack.length - 1].used.push(node);\r\n      }\r\n    }\r\n\r\n    return node\r\n  };\r\n\r\n  // Parses yield expression inside generator.\r\n\r\n  pp$5.parseYield = function(forInit) {\r\n    if (!this.yieldPos) { this.yieldPos = this.start; }\r\n\r\n    var node = this.startNode();\r\n    this.next();\r\n    if (this.type === types$1.semi || this.canInsertSemicolon() || (this.type !== types$1.star && !this.type.startsExpr)) {\r\n      node.delegate = false;\r\n      node.argument = null;\r\n    } else {\r\n      node.delegate = this.eat(types$1.star);\r\n      node.argument = this.parseMaybeAssign(forInit);\r\n    }\r\n    return this.finishNode(node, \"YieldExpression\")\r\n  };\r\n\r\n  pp$5.parseAwait = function(forInit) {\r\n    if (!this.awaitPos) { this.awaitPos = this.start; }\r\n\r\n    var node = this.startNode();\r\n    this.next();\r\n    node.argument = this.parseMaybeUnary(null, true, false, forInit);\r\n    return this.finishNode(node, \"AwaitExpression\")\r\n  };\r\n\r\n  var pp$4 = Parser.prototype;\r\n\r\n  // This function is used to raise exceptions on parse errors. It\r\n  // takes an offset integer (into the current `input`) to indicate\r\n  // the location of the error, attaches the position to the end\r\n  // of the error message, and then raises a `SyntaxError` with that\r\n  // message.\r\n\r\n  pp$4.raise = function(pos, message) {\r\n    var loc = getLineInfo(this.input, pos);\r\n    message += \" (\" + loc.line + \":\" + loc.column + \")\";\r\n    var err = new SyntaxError(message);\r\n    err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\r\n    throw err\r\n  };\r\n\r\n  pp$4.raiseRecoverable = pp$4.raise;\r\n\r\n  pp$4.curPosition = function() {\r\n    if (this.options.locations) {\r\n      return new Position(this.curLine, this.pos - this.lineStart)\r\n    }\r\n  };\r\n\r\n  var pp$3 = Parser.prototype;\r\n\r\n  var Scope = function Scope(flags) {\r\n    this.flags = flags;\r\n    // A list of var-declared names in the current lexical scope\r\n    this.var = [];\r\n    // A list of lexically-declared names in the current lexical scope\r\n    this.lexical = [];\r\n    // A list of lexically-declared FunctionDeclaration names in the current lexical scope\r\n    this.functions = [];\r\n    // A switch to disallow the identifier reference 'arguments'\r\n    this.inClassFieldInit = false;\r\n  };\r\n\r\n  // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\r\n\r\n  pp$3.enterScope = function(flags) {\r\n    this.scopeStack.push(new Scope(flags));\r\n  };\r\n\r\n  pp$3.exitScope = function() {\r\n    this.scopeStack.pop();\r\n  };\r\n\r\n  // The spec says:\r\n  // > At the top level of a function, or script, function declarations are\r\n  // > treated like var declarations rather than like lexical declarations.\r\n  pp$3.treatFunctionsAsVarInScope = function(scope) {\r\n    return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\r\n  };\r\n\r\n  pp$3.declareName = function(name, bindingType, pos) {\r\n    var redeclared = false;\r\n    if (bindingType === BIND_LEXICAL) {\r\n      var scope = this.currentScope();\r\n      redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\r\n      scope.lexical.push(name);\r\n      if (this.inModule && (scope.flags & SCOPE_TOP))\r\n        { delete this.undefinedExports[name]; }\r\n    } else if (bindingType === BIND_SIMPLE_CATCH) {\r\n      var scope$1 = this.currentScope();\r\n      scope$1.lexical.push(name);\r\n    } else if (bindingType === BIND_FUNCTION) {\r\n      var scope$2 = this.currentScope();\r\n      if (this.treatFunctionsAsVar)\r\n        { redeclared = scope$2.lexical.indexOf(name) > -1; }\r\n      else\r\n        { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\r\n      scope$2.functions.push(name);\r\n    } else {\r\n      for (var i = this.scopeStack.length - 1; i >= 0; --i) {\r\n        var scope$3 = this.scopeStack[i];\r\n        if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\r\n            !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\r\n          redeclared = true;\r\n          break\r\n        }\r\n        scope$3.var.push(name);\r\n        if (this.inModule && (scope$3.flags & SCOPE_TOP))\r\n          { delete this.undefinedExports[name]; }\r\n        if (scope$3.flags & SCOPE_VAR) { break }\r\n      }\r\n    }\r\n    if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\r\n  };\r\n\r\n  pp$3.checkLocalExport = function(id) {\r\n    // scope.functions must be empty as Module code is always strict.\r\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\r\n        this.scopeStack[0].var.indexOf(id.name) === -1) {\r\n      this.undefinedExports[id.name] = id;\r\n    }\r\n  };\r\n\r\n  pp$3.currentScope = function() {\r\n    return this.scopeStack[this.scopeStack.length - 1]\r\n  };\r\n\r\n  pp$3.currentVarScope = function() {\r\n    for (var i = this.scopeStack.length - 1;; i--) {\r\n      var scope = this.scopeStack[i];\r\n      if (scope.flags & SCOPE_VAR) { return scope }\r\n    }\r\n  };\r\n\r\n  // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\r\n  pp$3.currentThisScope = function() {\r\n    for (var i = this.scopeStack.length - 1;; i--) {\r\n      var scope = this.scopeStack[i];\r\n      if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\r\n    }\r\n  };\r\n\r\n  var Node = function Node(parser, pos, loc) {\r\n    this.type = \"\";\r\n    this.start = pos;\r\n    this.end = 0;\r\n    if (parser.options.locations)\r\n      { this.loc = new SourceLocation(parser, loc); }\r\n    if (parser.options.directSourceFile)\r\n      { this.sourceFile = parser.options.directSourceFile; }\r\n    if (parser.options.ranges)\r\n      { this.range = [pos, 0]; }\r\n  };\r\n\r\n  // Start an AST node, attaching a start offset.\r\n\r\n  var pp$2 = Parser.prototype;\r\n\r\n  pp$2.startNode = function() {\r\n    return new Node(this, this.start, this.startLoc)\r\n  };\r\n\r\n  pp$2.startNodeAt = function(pos, loc) {\r\n    return new Node(this, pos, loc)\r\n  };\r\n\r\n  // Finish an AST node, adding `type` and `end` properties.\r\n\r\n  function finishNodeAt(node, type, pos, loc) {\r\n    node.type = type;\r\n    node.end = pos;\r\n    if (this.options.locations)\r\n      { node.loc.end = loc; }\r\n    if (this.options.ranges)\r\n      { node.range[1] = pos; }\r\n    return node\r\n  }\r\n\r\n  pp$2.finishNode = function(node, type) {\r\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\r\n  };\r\n\r\n  // Finish node at given position\r\n\r\n  pp$2.finishNodeAt = function(node, type, pos, loc) {\r\n    return finishNodeAt.call(this, node, type, pos, loc)\r\n  };\r\n\r\n  pp$2.copyNode = function(node) {\r\n    var newNode = new Node(this, node.start, this.startLoc);\r\n    for (var prop in node) { newNode[prop] = node[prop]; }\r\n    return newNode\r\n  };\r\n\r\n  // This file contains Unicode properties extracted from the ECMAScript specification.\r\n  // The lists are extracted like so:\r\n  // $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\r\n\r\n  // #table-binary-unicode-properties\r\n  var ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\r\n  var ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\r\n  var ecma11BinaryProperties = ecma10BinaryProperties;\r\n  var ecma12BinaryProperties = ecma11BinaryProperties + \" EBase EComp EMod EPres ExtPict\";\r\n  var ecma13BinaryProperties = ecma12BinaryProperties;\r\n  var ecma14BinaryProperties = ecma13BinaryProperties;\r\n\r\n  var unicodeBinaryProperties = {\r\n    9: ecma9BinaryProperties,\r\n    10: ecma10BinaryProperties,\r\n    11: ecma11BinaryProperties,\r\n    12: ecma12BinaryProperties,\r\n    13: ecma13BinaryProperties,\r\n    14: ecma14BinaryProperties\r\n  };\r\n\r\n  // #table-binary-unicode-properties-of-strings\r\n  var ecma14BinaryPropertiesOfStrings = \"Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji\";\r\n\r\n  var unicodeBinaryPropertiesOfStrings = {\r\n    9: \"\",\r\n    10: \"\",\r\n    11: \"\",\r\n    12: \"\",\r\n    13: \"\",\r\n    14: ecma14BinaryPropertiesOfStrings\r\n  };\r\n\r\n  // #table-unicode-general-category-values\r\n  var unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\r\n\r\n  // #table-unicode-script-values\r\n  var ecma9ScriptValues = \"Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\r\n  var ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\r\n  var ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\r\n  var ecma12ScriptValues = ecma11ScriptValues + \" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\";\r\n  var ecma13ScriptValues = ecma12ScriptValues + \" Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith\";\r\n  var ecma14ScriptValues = ecma13ScriptValues + \" Hrkt Katakana_Or_Hiragana Kawi Nag_Mundari Nagm Unknown Zzzz\";\r\n\r\n  var unicodeScriptValues = {\r\n    9: ecma9ScriptValues,\r\n    10: ecma10ScriptValues,\r\n    11: ecma11ScriptValues,\r\n    12: ecma12ScriptValues,\r\n    13: ecma13ScriptValues,\r\n    14: ecma14ScriptValues\r\n  };\r\n\r\n  var data = {};\r\n  function buildUnicodeData(ecmaVersion) {\r\n    var d = data[ecmaVersion] = {\r\n      binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\r\n      binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]),\r\n      nonBinary: {\r\n        General_Category: wordsRegexp(unicodeGeneralCategoryValues),\r\n        Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\r\n      }\r\n    };\r\n    d.nonBinary.Script_Extensions = d.nonBinary.Script;\r\n\r\n    d.nonBinary.gc = d.nonBinary.General_Category;\r\n    d.nonBinary.sc = d.nonBinary.Script;\r\n    d.nonBinary.scx = d.nonBinary.Script_Extensions;\r\n  }\r\n\r\n  for (var i = 0, list = [9, 10, 11, 12, 13, 14]; i < list.length; i += 1) {\r\n    var ecmaVersion = list[i];\r\n\r\n    buildUnicodeData(ecmaVersion);\r\n  }\r\n\r\n  var pp$1 = Parser.prototype;\r\n\r\n  var RegExpValidationState = function RegExpValidationState(parser) {\r\n    this.parser = parser;\r\n    this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\") + (parser.options.ecmaVersion >= 13 ? \"d\" : \"\") + (parser.options.ecmaVersion >= 15 ? \"v\" : \"\");\r\n    this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];\r\n    this.source = \"\";\r\n    this.flags = \"\";\r\n    this.start = 0;\r\n    this.switchU = false;\r\n    this.switchV = false;\r\n    this.switchN = false;\r\n    this.pos = 0;\r\n    this.lastIntValue = 0;\r\n    this.lastStringValue = \"\";\r\n    this.lastAssertionIsQuantifiable = false;\r\n    this.numCapturingParens = 0;\r\n    this.maxBackReference = 0;\r\n    this.groupNames = [];\r\n    this.backReferenceNames = [];\r\n  };\r\n\r\n  RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\r\n    var unicodeSets = flags.indexOf(\"v\") !== -1;\r\n    var unicode = flags.indexOf(\"u\") !== -1;\r\n    this.start = start | 0;\r\n    this.source = pattern + \"\";\r\n    this.flags = flags;\r\n    if (unicodeSets && this.parser.options.ecmaVersion >= 15) {\r\n      this.switchU = true;\r\n      this.switchV = true;\r\n      this.switchN = true;\r\n    } else {\r\n      this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\r\n      this.switchV = false;\r\n      this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\r\n    }\r\n  };\r\n\r\n  RegExpValidationState.prototype.raise = function raise (message) {\r\n    this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\r\n  };\r\n\r\n  // If u flag is given, this returns the code point at the index (it combines a surrogate pair).\r\n  // Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\r\n  RegExpValidationState.prototype.at = function at (i, forceU) {\r\n      if ( forceU === void 0 ) forceU = false;\r\n\r\n    var s = this.source;\r\n    var l = s.length;\r\n    if (i >= l) {\r\n      return -1\r\n    }\r\n    var c = s.charCodeAt(i);\r\n    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\r\n      return c\r\n    }\r\n    var next = s.charCodeAt(i + 1);\r\n    return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\r\n  };\r\n\r\n  RegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {\r\n      if ( forceU === void 0 ) forceU = false;\r\n\r\n    var s = this.source;\r\n    var l = s.length;\r\n    if (i >= l) {\r\n      return l\r\n    }\r\n    var c = s.charCodeAt(i), next;\r\n    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\r\n        (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\r\n      return i + 1\r\n    }\r\n    return i + 2\r\n  };\r\n\r\n  RegExpValidationState.prototype.current = function current (forceU) {\r\n      if ( forceU === void 0 ) forceU = false;\r\n\r\n    return this.at(this.pos, forceU)\r\n  };\r\n\r\n  RegExpValidationState.prototype.lookahead = function lookahead (forceU) {\r\n      if ( forceU === void 0 ) forceU = false;\r\n\r\n    return this.at(this.nextIndex(this.pos, forceU), forceU)\r\n  };\r\n\r\n  RegExpValidationState.prototype.advance = function advance (forceU) {\r\n      if ( forceU === void 0 ) forceU = false;\r\n\r\n    this.pos = this.nextIndex(this.pos, forceU);\r\n  };\r\n\r\n  RegExpValidationState.prototype.eat = function eat (ch, forceU) {\r\n      if ( forceU === void 0 ) forceU = false;\r\n\r\n    if (this.current(forceU) === ch) {\r\n      this.advance(forceU);\r\n      return true\r\n    }\r\n    return false\r\n  };\r\n\r\n  RegExpValidationState.prototype.eatChars = function eatChars (chs, forceU) {\r\n      if ( forceU === void 0 ) forceU = false;\r\n\r\n    var pos = this.pos;\r\n    for (var i = 0, list = chs; i < list.length; i += 1) {\r\n      var ch = list[i];\r\n\r\n        var current = this.at(pos, forceU);\r\n      if (current === -1 || current !== ch) {\r\n        return false\r\n      }\r\n      pos = this.nextIndex(pos, forceU);\r\n    }\r\n    this.pos = pos;\r\n    return true\r\n  };\r\n\r\n  /**\r\n   * Validate the flags part of a given RegExpLiteral.\r\n   *\r\n   * @param {RegExpValidationState} state The state to validate RegExp.\r\n   * @returns {void}\r\n   */\r\n  pp$1.validateRegExpFlags = function(state) {\r\n    var validFlags = state.validFlags;\r\n    var flags = state.flags;\r\n\r\n    var u = false;\r\n    var v = false;\r\n\r\n    for (var i = 0; i < flags.length; i++) {\r\n      var flag = flags.charAt(i);\r\n      if (validFlags.indexOf(flag) === -1) {\r\n        this.raise(state.start, \"Invalid regular expression flag\");\r\n      }\r\n      if (flags.indexOf(flag, i + 1) > -1) {\r\n        this.raise(state.start, \"Duplicate regular expression flag\");\r\n      }\r\n      if (flag === \"u\") { u = true; }\r\n      if (flag === \"v\") { v = true; }\r\n    }\r\n    if (this.options.ecmaVersion >= 15 && u && v) {\r\n      this.raise(state.start, \"Invalid regular expression flag\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Validate the pattern part of a given RegExpLiteral.\r\n   *\r\n   * @param {RegExpValidationState} state The state to validate RegExp.\r\n   * @returns {void}\r\n   */\r\n  pp$1.validateRegExpPattern = function(state) {\r\n    this.regexp_pattern(state);\r\n\r\n    // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\r\n    // parsing contains a |GroupName|, reparse with the goal symbol\r\n    // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\r\n    // exception if _P_ did not conform to the grammar, if any elements of _P_\r\n    // were not matched by the parse, or if any Early Error conditions exist.\r\n    if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\r\n      state.switchN = true;\r\n      this.regexp_pattern(state);\r\n    }\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\r\n  pp$1.regexp_pattern = function(state) {\r\n    state.pos = 0;\r\n    state.lastIntValue = 0;\r\n    state.lastStringValue = \"\";\r\n    state.lastAssertionIsQuantifiable = false;\r\n    state.numCapturingParens = 0;\r\n    state.maxBackReference = 0;\r\n    state.groupNames.length = 0;\r\n    state.backReferenceNames.length = 0;\r\n\r\n    this.regexp_disjunction(state);\r\n\r\n    if (state.pos !== state.source.length) {\r\n      // Make the same messages as V8.\r\n      if (state.eat(0x29 /* ) */)) {\r\n        state.raise(\"Unmatched ')'\");\r\n      }\r\n      if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\r\n        state.raise(\"Lone quantifier brackets\");\r\n      }\r\n    }\r\n    if (state.maxBackReference > state.numCapturingParens) {\r\n      state.raise(\"Invalid escape\");\r\n    }\r\n    for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\r\n      var name = list[i];\r\n\r\n      if (state.groupNames.indexOf(name) === -1) {\r\n        state.raise(\"Invalid named capture referenced\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\r\n  pp$1.regexp_disjunction = function(state) {\r\n    this.regexp_alternative(state);\r\n    while (state.eat(0x7C /* | */)) {\r\n      this.regexp_alternative(state);\r\n    }\r\n\r\n    // Make the same message as V8.\r\n    if (this.regexp_eatQuantifier(state, true)) {\r\n      state.raise(\"Nothing to repeat\");\r\n    }\r\n    if (state.eat(0x7B /* { */)) {\r\n      state.raise(\"Lone quantifier brackets\");\r\n    }\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\r\n  pp$1.regexp_alternative = function(state) {\r\n    while (state.pos < state.source.length && this.regexp_eatTerm(state))\r\n      { }\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\r\n  pp$1.regexp_eatTerm = function(state) {\r\n    if (this.regexp_eatAssertion(state)) {\r\n      // Handle `QuantifiableAssertion Quantifier` alternative.\r\n      // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\r\n      // is a QuantifiableAssertion.\r\n      if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\r\n        // Make the same message as V8.\r\n        if (state.switchU) {\r\n          state.raise(\"Invalid quantifier\");\r\n        }\r\n      }\r\n      return true\r\n    }\r\n\r\n    if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\r\n      this.regexp_eatQuantifier(state);\r\n      return true\r\n    }\r\n\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\r\n  pp$1.regexp_eatAssertion = function(state) {\r\n    var start = state.pos;\r\n    state.lastAssertionIsQuantifiable = false;\r\n\r\n    // ^, $\r\n    if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\r\n      return true\r\n    }\r\n\r\n    // \\b \\B\r\n    if (state.eat(0x5C /* \\ */)) {\r\n      if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\r\n        return true\r\n      }\r\n      state.pos = start;\r\n    }\r\n\r\n    // Lookahead / Lookbehind\r\n    if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\r\n      var lookbehind = false;\r\n      if (this.options.ecmaVersion >= 9) {\r\n        lookbehind = state.eat(0x3C /* < */);\r\n      }\r\n      if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\r\n        this.regexp_disjunction(state);\r\n        if (!state.eat(0x29 /* ) */)) {\r\n          state.raise(\"Unterminated group\");\r\n        }\r\n        state.lastAssertionIsQuantifiable = !lookbehind;\r\n        return true\r\n      }\r\n    }\r\n\r\n    state.pos = start;\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\r\n  pp$1.regexp_eatQuantifier = function(state, noError) {\r\n    if ( noError === void 0 ) noError = false;\r\n\r\n    if (this.regexp_eatQuantifierPrefix(state, noError)) {\r\n      state.eat(0x3F /* ? */);\r\n      return true\r\n    }\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\r\n  pp$1.regexp_eatQuantifierPrefix = function(state, noError) {\r\n    return (\r\n      state.eat(0x2A /* * */) ||\r\n      state.eat(0x2B /* + */) ||\r\n      state.eat(0x3F /* ? */) ||\r\n      this.regexp_eatBracedQuantifier(state, noError)\r\n    )\r\n  };\r\n  pp$1.regexp_eatBracedQuantifier = function(state, noError) {\r\n    var start = state.pos;\r\n    if (state.eat(0x7B /* { */)) {\r\n      var min = 0, max = -1;\r\n      if (this.regexp_eatDecimalDigits(state)) {\r\n        min = state.lastIntValue;\r\n        if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\r\n          max = state.lastIntValue;\r\n        }\r\n        if (state.eat(0x7D /* } */)) {\r\n          // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\r\n          if (max !== -1 && max < min && !noError) {\r\n            state.raise(\"numbers out of order in {} quantifier\");\r\n          }\r\n          return true\r\n        }\r\n      }\r\n      if (state.switchU && !noError) {\r\n        state.raise(\"Incomplete quantifier\");\r\n      }\r\n      state.pos = start;\r\n    }\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\r\n  pp$1.regexp_eatAtom = function(state) {\r\n    return (\r\n      this.regexp_eatPatternCharacters(state) ||\r\n      state.eat(0x2E /* . */) ||\r\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\r\n      this.regexp_eatCharacterClass(state) ||\r\n      this.regexp_eatUncapturingGroup(state) ||\r\n      this.regexp_eatCapturingGroup(state)\r\n    )\r\n  };\r\n  pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {\r\n    var start = state.pos;\r\n    if (state.eat(0x5C /* \\ */)) {\r\n      if (this.regexp_eatAtomEscape(state)) {\r\n        return true\r\n      }\r\n      state.pos = start;\r\n    }\r\n    return false\r\n  };\r\n  pp$1.regexp_eatUncapturingGroup = function(state) {\r\n    var start = state.pos;\r\n    if (state.eat(0x28 /* ( */)) {\r\n      if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\r\n        this.regexp_disjunction(state);\r\n        if (state.eat(0x29 /* ) */)) {\r\n          return true\r\n        }\r\n        state.raise(\"Unterminated group\");\r\n      }\r\n      state.pos = start;\r\n    }\r\n    return false\r\n  };\r\n  pp$1.regexp_eatCapturingGroup = function(state) {\r\n    if (state.eat(0x28 /* ( */)) {\r\n      if (this.options.ecmaVersion >= 9) {\r\n        this.regexp_groupSpecifier(state);\r\n      } else if (state.current() === 0x3F /* ? */) {\r\n        state.raise(\"Invalid group\");\r\n      }\r\n      this.regexp_disjunction(state);\r\n      if (state.eat(0x29 /* ) */)) {\r\n        state.numCapturingParens += 1;\r\n        return true\r\n      }\r\n      state.raise(\"Unterminated group\");\r\n    }\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\r\n  pp$1.regexp_eatExtendedAtom = function(state) {\r\n    return (\r\n      state.eat(0x2E /* . */) ||\r\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\r\n      this.regexp_eatCharacterClass(state) ||\r\n      this.regexp_eatUncapturingGroup(state) ||\r\n      this.regexp_eatCapturingGroup(state) ||\r\n      this.regexp_eatInvalidBracedQuantifier(state) ||\r\n      this.regexp_eatExtendedPatternCharacter(state)\r\n    )\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\r\n  pp$1.regexp_eatInvalidBracedQuantifier = function(state) {\r\n    if (this.regexp_eatBracedQuantifier(state, true)) {\r\n      state.raise(\"Nothing to repeat\");\r\n    }\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\r\n  pp$1.regexp_eatSyntaxCharacter = function(state) {\r\n    var ch = state.current();\r\n    if (isSyntaxCharacter(ch)) {\r\n      state.lastIntValue = ch;\r\n      state.advance();\r\n      return true\r\n    }\r\n    return false\r\n  };\r\n  function isSyntaxCharacter(ch) {\r\n    return (\r\n      ch === 0x24 /* $ */ ||\r\n      ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\r\n      ch === 0x2E /* . */ ||\r\n      ch === 0x3F /* ? */ ||\r\n      ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\r\n      ch >= 0x7B /* { */ && ch <= 0x7D /* } */\r\n    )\r\n  }\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\r\n  // But eat eager.\r\n  pp$1.regexp_eatPatternCharacters = function(state) {\r\n    var start = state.pos;\r\n    var ch = 0;\r\n    while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\r\n      state.advance();\r\n    }\r\n    return state.pos !== start\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\r\n  pp$1.regexp_eatExtendedPatternCharacter = function(state) {\r\n    var ch = state.current();\r\n    if (\r\n      ch !== -1 &&\r\n      ch !== 0x24 /* $ */ &&\r\n      !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\r\n      ch !== 0x2E /* . */ &&\r\n      ch !== 0x3F /* ? */ &&\r\n      ch !== 0x5B /* [ */ &&\r\n      ch !== 0x5E /* ^ */ &&\r\n      ch !== 0x7C /* | */\r\n    ) {\r\n      state.advance();\r\n      return true\r\n    }\r\n    return false\r\n  };\r\n\r\n  // GroupSpecifier ::\r\n  //   [empty]\r\n  //   `?` GroupName\r\n  pp$1.regexp_groupSpecifier = function(state) {\r\n    if (state.eat(0x3F /* ? */)) {\r\n      if (this.regexp_eatGroupName(state)) {\r\n        if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\r\n          state.raise(\"Duplicate capture group name\");\r\n        }\r\n        state.groupNames.push(state.lastStringValue);\r\n        return\r\n      }\r\n      state.raise(\"Invalid group\");\r\n    }\r\n  };\r\n\r\n  // GroupName ::\r\n  //   `<` RegExpIdentifierName `>`\r\n  // Note: this updates `state.lastStringValue` property with the eaten name.\r\n  pp$1.regexp_eatGroupName = function(state) {\r\n    state.lastStringValue = \"\";\r\n    if (state.eat(0x3C /* < */)) {\r\n      if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\r\n        return true\r\n      }\r\n      state.raise(\"Invalid capture group name\");\r\n    }\r\n    return false\r\n  };\r\n\r\n  // RegExpIdentifierName ::\r\n  //   RegExpIdentifierStart\r\n  //   RegExpIdentifierName RegExpIdentifierPart\r\n  // Note: this updates `state.lastStringValue` property with the eaten name.\r\n  pp$1.regexp_eatRegExpIdentifierName = function(state) {\r\n    state.lastStringValue = \"\";\r\n    if (this.regexp_eatRegExpIdentifierStart(state)) {\r\n      state.lastStringValue += codePointToString(state.lastIntValue);\r\n      while (this.regexp_eatRegExpIdentifierPart(state)) {\r\n        state.lastStringValue += codePointToString(state.lastIntValue);\r\n      }\r\n      return true\r\n    }\r\n    return false\r\n  };\r\n\r\n  // RegExpIdentifierStart ::\r\n  //   UnicodeIDStart\r\n  //   `$`\r\n  //   `_`\r\n  //   `\\` RegExpUnicodeEscapeSequence[+U]\r\n  pp$1.regexp_eatRegExpIdentifierStart = function(state) {\r\n    var start = state.pos;\r\n    var forceU = this.options.ecmaVersion >= 11;\r\n    var ch = state.current(forceU);\r\n    state.advance(forceU);\r\n\r\n    if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\r\n      ch = state.lastIntValue;\r\n    }\r\n    if (isRegExpIdentifierStart(ch)) {\r\n      state.lastIntValue = ch;\r\n      return true\r\n    }\r\n\r\n    state.pos = start;\r\n    return false\r\n  };\r\n  function isRegExpIdentifierStart(ch) {\r\n    return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\r\n  }\r\n\r\n  // RegExpIdentifierPart ::\r\n  //   UnicodeIDContinue\r\n  //   `$`\r\n  //   `_`\r\n  //   `\\` RegExpUnicodeEscapeSequence[+U]\r\n  //   <ZWNJ>\r\n  //   <ZWJ>\r\n  pp$1.regexp_eatRegExpIdentifierPart = function(state) {\r\n    var start = state.pos;\r\n    var forceU = this.options.ecmaVersion >= 11;\r\n    var ch = state.current(forceU);\r\n    state.advance(forceU);\r\n\r\n    if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\r\n      ch = state.lastIntValue;\r\n    }\r\n    if (isRegExpIdentifierPart(ch)) {\r\n      state.lastIntValue = ch;\r\n      return true\r\n    }\r\n\r\n    state.pos = start;\r\n    return false\r\n  };\r\n  function isRegExpIdentifierPart(ch) {\r\n    return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\r\n  }\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\r\n  pp$1.regexp_eatAtomEscape = function(state) {\r\n    if (\r\n      this.regexp_eatBackReference(state) ||\r\n      this.regexp_eatCharacterClassEscape(state) ||\r\n      this.regexp_eatCharacterEscape(state) ||\r\n      (state.switchN && this.regexp_eatKGroupName(state))\r\n    ) {\r\n      return true\r\n    }\r\n    if (state.switchU) {\r\n      // Make the same message as V8.\r\n      if (state.current() === 0x63 /* c */) {\r\n        state.raise(\"Invalid unicode escape\");\r\n      }\r\n      state.raise(\"Invalid escape\");\r\n    }\r\n    return false\r\n  };\r\n  pp$1.regexp_eatBackReference = function(state) {\r\n    var start = state.pos;\r\n    if (this.regexp_eatDecimalEscape(state)) {\r\n      var n = state.lastIntValue;\r\n      if (state.switchU) {\r\n        // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\r\n        if (n > state.maxBackReference) {\r\n          state.maxBackReference = n;\r\n        }\r\n        return true\r\n      }\r\n      if (n <= state.numCapturingParens) {\r\n        return true\r\n      }\r\n      state.pos = start;\r\n    }\r\n    return false\r\n  };\r\n  pp$1.regexp_eatKGroupName = function(state) {\r\n    if (state.eat(0x6B /* k */)) {\r\n      if (this.regexp_eatGroupName(state)) {\r\n        state.backReferenceNames.push(state.lastStringValue);\r\n        return true\r\n      }\r\n      state.raise(\"Invalid named reference\");\r\n    }\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\r\n  pp$1.regexp_eatCharacterEscape = function(state) {\r\n    return (\r\n      this.regexp_eatControlEscape(state) ||\r\n      this.regexp_eatCControlLetter(state) ||\r\n      this.regexp_eatZero(state) ||\r\n      this.regexp_eatHexEscapeSequence(state) ||\r\n      this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||\r\n      (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\r\n      this.regexp_eatIdentityEscape(state)\r\n    )\r\n  };\r\n  pp$1.regexp_eatCControlLetter = function(state) {\r\n    var start = state.pos;\r\n    if (state.eat(0x63 /* c */)) {\r\n      if (this.regexp_eatControlLetter(state)) {\r\n        return true\r\n      }\r\n      state.pos = start;\r\n    }\r\n    return false\r\n  };\r\n  pp$1.regexp_eatZero = function(state) {\r\n    if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\r\n      state.lastIntValue = 0;\r\n      state.advance();\r\n      return true\r\n    }\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\r\n  pp$1.regexp_eatControlEscape = function(state) {\r\n    var ch = state.current();\r\n    if (ch === 0x74 /* t */) {\r\n      state.lastIntValue = 0x09; /* \\t */\r\n      state.advance();\r\n      return true\r\n    }\r\n    if (ch === 0x6E /* n */) {\r\n      state.lastIntValue = 0x0A; /* \\n */\r\n      state.advance();\r\n      return true\r\n    }\r\n    if (ch === 0x76 /* v */) {\r\n      state.lastIntValue = 0x0B; /* \\v */\r\n      state.advance();\r\n      return true\r\n    }\r\n    if (ch === 0x66 /* f */) {\r\n      state.lastIntValue = 0x0C; /* \\f */\r\n      state.advance();\r\n      return true\r\n    }\r\n    if (ch === 0x72 /* r */) {\r\n      state.lastIntValue = 0x0D; /* \\r */\r\n      state.advance();\r\n      return true\r\n    }\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\r\n  pp$1.regexp_eatControlLetter = function(state) {\r\n    var ch = state.current();\r\n    if (isControlLetter(ch)) {\r\n      state.lastIntValue = ch % 0x20;\r\n      state.advance();\r\n      return true\r\n    }\r\n    return false\r\n  };\r\n  function isControlLetter(ch) {\r\n    return (\r\n      (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\r\n      (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\r\n    )\r\n  }\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\r\n  pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\r\n    if ( forceU === void 0 ) forceU = false;\r\n\r\n    var start = state.pos;\r\n    var switchU = forceU || state.switchU;\r\n\r\n    if (state.eat(0x75 /* u */)) {\r\n      if (this.regexp_eatFixedHexDigits(state, 4)) {\r\n        var lead = state.lastIntValue;\r\n        if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\r\n          var leadSurrogateEnd = state.pos;\r\n          if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\r\n            var trail = state.lastIntValue;\r\n            if (trail >= 0xDC00 && trail <= 0xDFFF) {\r\n              state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\r\n              return true\r\n            }\r\n          }\r\n          state.pos = leadSurrogateEnd;\r\n          state.lastIntValue = lead;\r\n        }\r\n        return true\r\n      }\r\n      if (\r\n        switchU &&\r\n        state.eat(0x7B /* { */) &&\r\n        this.regexp_eatHexDigits(state) &&\r\n        state.eat(0x7D /* } */) &&\r\n        isValidUnicode(state.lastIntValue)\r\n      ) {\r\n        return true\r\n      }\r\n      if (switchU) {\r\n        state.raise(\"Invalid unicode escape\");\r\n      }\r\n      state.pos = start;\r\n    }\r\n\r\n    return false\r\n  };\r\n  function isValidUnicode(ch) {\r\n    return ch >= 0 && ch <= 0x10FFFF\r\n  }\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\r\n  pp$1.regexp_eatIdentityEscape = function(state) {\r\n    if (state.switchU) {\r\n      if (this.regexp_eatSyntaxCharacter(state)) {\r\n        return true\r\n      }\r\n      if (state.eat(0x2F /* / */)) {\r\n        state.lastIntValue = 0x2F; /* / */\r\n        return true\r\n      }\r\n      return false\r\n    }\r\n\r\n    var ch = state.current();\r\n    if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\r\n      state.lastIntValue = ch;\r\n      state.advance();\r\n      return true\r\n    }\r\n\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\r\n  pp$1.regexp_eatDecimalEscape = function(state) {\r\n    state.lastIntValue = 0;\r\n    var ch = state.current();\r\n    if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\r\n      do {\r\n        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\r\n        state.advance();\r\n      } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\r\n      return true\r\n    }\r\n    return false\r\n  };\r\n\r\n  // Return values used by character set parsing methods, needed to\r\n  // forbid negation of sets that can match strings.\r\n  var CharSetNone = 0; // Nothing parsed\r\n  var CharSetOk = 1; // Construct parsed, cannot contain strings\r\n  var CharSetString = 2; // Construct parsed, can contain strings\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\r\n  pp$1.regexp_eatCharacterClassEscape = function(state) {\r\n    var ch = state.current();\r\n\r\n    if (isCharacterClassEscape(ch)) {\r\n      state.lastIntValue = -1;\r\n      state.advance();\r\n      return CharSetOk\r\n    }\r\n\r\n    var negate = false;\r\n    if (\r\n      state.switchU &&\r\n      this.options.ecmaVersion >= 9 &&\r\n      ((negate = ch === 0x50 /* P */) || ch === 0x70 /* p */)\r\n    ) {\r\n      state.lastIntValue = -1;\r\n      state.advance();\r\n      var result;\r\n      if (\r\n        state.eat(0x7B /* { */) &&\r\n        (result = this.regexp_eatUnicodePropertyValueExpression(state)) &&\r\n        state.eat(0x7D /* } */)\r\n      ) {\r\n        if (negate && result === CharSetString) { state.raise(\"Invalid property name\"); }\r\n        return result\r\n      }\r\n      state.raise(\"Invalid property name\");\r\n    }\r\n\r\n    return CharSetNone\r\n  };\r\n\r\n  function isCharacterClassEscape(ch) {\r\n    return (\r\n      ch === 0x64 /* d */ ||\r\n      ch === 0x44 /* D */ ||\r\n      ch === 0x73 /* s */ ||\r\n      ch === 0x53 /* S */ ||\r\n      ch === 0x77 /* w */ ||\r\n      ch === 0x57 /* W */\r\n    )\r\n  }\r\n\r\n  // UnicodePropertyValueExpression ::\r\n  //   UnicodePropertyName `=` UnicodePropertyValue\r\n  //   LoneUnicodePropertyNameOrValue\r\n  pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {\r\n    var start = state.pos;\r\n\r\n    // UnicodePropertyName `=` UnicodePropertyValue\r\n    if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\r\n      var name = state.lastStringValue;\r\n      if (this.regexp_eatUnicodePropertyValue(state)) {\r\n        var value = state.lastStringValue;\r\n        this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\r\n        return CharSetOk\r\n      }\r\n    }\r\n    state.pos = start;\r\n\r\n    // LoneUnicodePropertyNameOrValue\r\n    if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\r\n      var nameOrValue = state.lastStringValue;\r\n      return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue)\r\n    }\r\n    return CharSetNone\r\n  };\r\n\r\n  pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\r\n    if (!hasOwn(state.unicodeProperties.nonBinary, name))\r\n      { state.raise(\"Invalid property name\"); }\r\n    if (!state.unicodeProperties.nonBinary[name].test(value))\r\n      { state.raise(\"Invalid property value\"); }\r\n  };\r\n\r\n  pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\r\n    if (state.unicodeProperties.binary.test(nameOrValue)) { return CharSetOk }\r\n    if (state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue)) { return CharSetString }\r\n    state.raise(\"Invalid property name\");\r\n  };\r\n\r\n  // UnicodePropertyName ::\r\n  //   UnicodePropertyNameCharacters\r\n  pp$1.regexp_eatUnicodePropertyName = function(state) {\r\n    var ch = 0;\r\n    state.lastStringValue = \"\";\r\n    while (isUnicodePropertyNameCharacter(ch = state.current())) {\r\n      state.lastStringValue += codePointToString(ch);\r\n      state.advance();\r\n    }\r\n    return state.lastStringValue !== \"\"\r\n  };\r\n\r\n  function isUnicodePropertyNameCharacter(ch) {\r\n    return isControlLetter(ch) || ch === 0x5F /* _ */\r\n  }\r\n\r\n  // UnicodePropertyValue ::\r\n  //   UnicodePropertyValueCharacters\r\n  pp$1.regexp_eatUnicodePropertyValue = function(state) {\r\n    var ch = 0;\r\n    state.lastStringValue = \"\";\r\n    while (isUnicodePropertyValueCharacter(ch = state.current())) {\r\n      state.lastStringValue += codePointToString(ch);\r\n      state.advance();\r\n    }\r\n    return state.lastStringValue !== \"\"\r\n  };\r\n  function isUnicodePropertyValueCharacter(ch) {\r\n    return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\r\n  }\r\n\r\n  // LoneUnicodePropertyNameOrValue ::\r\n  //   UnicodePropertyValueCharacters\r\n  pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\r\n    return this.regexp_eatUnicodePropertyValue(state)\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\r\n  pp$1.regexp_eatCharacterClass = function(state) {\r\n    if (state.eat(0x5B /* [ */)) {\r\n      var negate = state.eat(0x5E /* ^ */);\r\n      var result = this.regexp_classContents(state);\r\n      if (!state.eat(0x5D /* ] */))\r\n        { state.raise(\"Unterminated character class\"); }\r\n      if (negate && result === CharSetString)\r\n        { state.raise(\"Negated character class may contain strings\"); }\r\n      return true\r\n    }\r\n    return false\r\n  };\r\n\r\n  // https://tc39.es/ecma262/#prod-ClassContents\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\r\n  pp$1.regexp_classContents = function(state) {\r\n    if (state.current() === 0x5D /* ] */) { return CharSetOk }\r\n    if (state.switchV) { return this.regexp_classSetExpression(state) }\r\n    this.regexp_nonEmptyClassRanges(state);\r\n    return CharSetOk\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\r\n  pp$1.regexp_nonEmptyClassRanges = function(state) {\r\n    while (this.regexp_eatClassAtom(state)) {\r\n      var left = state.lastIntValue;\r\n      if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\r\n        var right = state.lastIntValue;\r\n        if (state.switchU && (left === -1 || right === -1)) {\r\n          state.raise(\"Invalid character class\");\r\n        }\r\n        if (left !== -1 && right !== -1 && left > right) {\r\n          state.raise(\"Range out of order in character class\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\r\n  pp$1.regexp_eatClassAtom = function(state) {\r\n    var start = state.pos;\r\n\r\n    if (state.eat(0x5C /* \\ */)) {\r\n      if (this.regexp_eatClassEscape(state)) {\r\n        return true\r\n      }\r\n      if (state.switchU) {\r\n        // Make the same message as V8.\r\n        var ch$1 = state.current();\r\n        if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\r\n          state.raise(\"Invalid class escape\");\r\n        }\r\n        state.raise(\"Invalid escape\");\r\n      }\r\n      state.pos = start;\r\n    }\r\n\r\n    var ch = state.current();\r\n    if (ch !== 0x5D /* ] */) {\r\n      state.lastIntValue = ch;\r\n      state.advance();\r\n      return true\r\n    }\r\n\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\r\n  pp$1.regexp_eatClassEscape = function(state) {\r\n    var start = state.pos;\r\n\r\n    if (state.eat(0x62 /* b */)) {\r\n      state.lastIntValue = 0x08; /* <BS> */\r\n      return true\r\n    }\r\n\r\n    if (state.switchU && state.eat(0x2D /* - */)) {\r\n      state.lastIntValue = 0x2D; /* - */\r\n      return true\r\n    }\r\n\r\n    if (!state.switchU && state.eat(0x63 /* c */)) {\r\n      if (this.regexp_eatClassControlLetter(state)) {\r\n        return true\r\n      }\r\n      state.pos = start;\r\n    }\r\n\r\n    return (\r\n      this.regexp_eatCharacterClassEscape(state) ||\r\n      this.regexp_eatCharacterEscape(state)\r\n    )\r\n  };\r\n\r\n  // https://tc39.es/ecma262/#prod-ClassSetExpression\r\n  // https://tc39.es/ecma262/#prod-ClassUnion\r\n  // https://tc39.es/ecma262/#prod-ClassIntersection\r\n  // https://tc39.es/ecma262/#prod-ClassSubtraction\r\n  pp$1.regexp_classSetExpression = function(state) {\r\n    var result = CharSetOk, subResult;\r\n    if (this.regexp_eatClassSetRange(state)) ; else if (subResult = this.regexp_eatClassSetOperand(state)) {\r\n      if (subResult === CharSetString) { result = CharSetString; }\r\n      // https://tc39.es/ecma262/#prod-ClassIntersection\r\n      var start = state.pos;\r\n      while (state.eatChars([0x26, 0x26] /* && */)) {\r\n        if (\r\n          state.current() !== 0x26 /* & */ &&\r\n          (subResult = this.regexp_eatClassSetOperand(state))\r\n        ) {\r\n          if (subResult !== CharSetString) { result = CharSetOk; }\r\n          continue\r\n        }\r\n        state.raise(\"Invalid character in character class\");\r\n      }\r\n      if (start !== state.pos) { return result }\r\n      // https://tc39.es/ecma262/#prod-ClassSubtraction\r\n      while (state.eatChars([0x2D, 0x2D] /* -- */)) {\r\n        if (this.regexp_eatClassSetOperand(state)) { continue }\r\n        state.raise(\"Invalid character in character class\");\r\n      }\r\n      if (start !== state.pos) { return result }\r\n    } else {\r\n      state.raise(\"Invalid character in character class\");\r\n    }\r\n    // https://tc39.es/ecma262/#prod-ClassUnion\r\n    for (;;) {\r\n      if (this.regexp_eatClassSetRange(state)) { continue }\r\n      subResult = this.regexp_eatClassSetOperand(state);\r\n      if (!subResult) { return result }\r\n      if (subResult === CharSetString) { result = CharSetString; }\r\n    }\r\n  };\r\n\r\n  // https://tc39.es/ecma262/#prod-ClassSetRange\r\n  pp$1.regexp_eatClassSetRange = function(state) {\r\n    var start = state.pos;\r\n    if (this.regexp_eatClassSetCharacter(state)) {\r\n      var left = state.lastIntValue;\r\n      if (state.eat(0x2D /* - */) && this.regexp_eatClassSetCharacter(state)) {\r\n        var right = state.lastIntValue;\r\n        if (left !== -1 && right !== -1 && left > right) {\r\n          state.raise(\"Range out of order in character class\");\r\n        }\r\n        return true\r\n      }\r\n      state.pos = start;\r\n    }\r\n    return false\r\n  };\r\n\r\n  // https://tc39.es/ecma262/#prod-ClassSetOperand\r\n  pp$1.regexp_eatClassSetOperand = function(state) {\r\n    if (this.regexp_eatClassSetCharacter(state)) { return CharSetOk }\r\n    return this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state)\r\n  };\r\n\r\n  // https://tc39.es/ecma262/#prod-NestedClass\r\n  pp$1.regexp_eatNestedClass = function(state) {\r\n    var start = state.pos;\r\n    if (state.eat(0x5B /* [ */)) {\r\n      var negate = state.eat(0x5E /* ^ */);\r\n      var result = this.regexp_classContents(state);\r\n      if (state.eat(0x5D /* ] */)) {\r\n        if (negate && result === CharSetString) {\r\n          state.raise(\"Negated character class may contain strings\");\r\n        }\r\n        return result\r\n      }\r\n      state.pos = start;\r\n    }\r\n    if (state.eat(0x5C /* \\ */)) {\r\n      var result$1 = this.regexp_eatCharacterClassEscape(state);\r\n      if (result$1) {\r\n        return result$1\r\n      }\r\n      state.pos = start;\r\n    }\r\n    return null\r\n  };\r\n\r\n  // https://tc39.es/ecma262/#prod-ClassStringDisjunction\r\n  pp$1.regexp_eatClassStringDisjunction = function(state) {\r\n    var start = state.pos;\r\n    if (state.eatChars([0x5C, 0x71] /* \\q */)) {\r\n      if (state.eat(0x7B /* { */)) {\r\n        var result = this.regexp_classStringDisjunctionContents(state);\r\n        if (state.eat(0x7D /* } */)) {\r\n          return result\r\n        }\r\n      } else {\r\n        // Make the same message as V8.\r\n        state.raise(\"Invalid escape\");\r\n      }\r\n      state.pos = start;\r\n    }\r\n    return null\r\n  };\r\n\r\n  // https://tc39.es/ecma262/#prod-ClassStringDisjunctionContents\r\n  pp$1.regexp_classStringDisjunctionContents = function(state) {\r\n    var result = this.regexp_classString(state);\r\n    while (state.eat(0x7C /* | */)) {\r\n      if (this.regexp_classString(state) === CharSetString) { result = CharSetString; }\r\n    }\r\n    return result\r\n  };\r\n\r\n  // https://tc39.es/ecma262/#prod-ClassString\r\n  // https://tc39.es/ecma262/#prod-NonEmptyClassString\r\n  pp$1.regexp_classString = function(state) {\r\n    var count = 0;\r\n    while (this.regexp_eatClassSetCharacter(state)) { count++; }\r\n    return count === 1 ? CharSetOk : CharSetString\r\n  };\r\n\r\n  // https://tc39.es/ecma262/#prod-ClassSetCharacter\r\n  pp$1.regexp_eatClassSetCharacter = function(state) {\r\n    var start = state.pos;\r\n    if (state.eat(0x5C /* \\ */)) {\r\n      if (\r\n        this.regexp_eatCharacterEscape(state) ||\r\n        this.regexp_eatClassSetReservedPunctuator(state)\r\n      ) {\r\n        return true\r\n      }\r\n      if (state.eat(0x62 /* b */)) {\r\n        state.lastIntValue = 0x08; /* <BS> */\r\n        return true\r\n      }\r\n      state.pos = start;\r\n      return false\r\n    }\r\n    var ch = state.current();\r\n    if (ch < 0 || ch === state.lookahead() && isClassSetReservedDoublePunctuatorCharacter(ch)) { return false }\r\n    if (isClassSetSyntaxCharacter(ch)) { return false }\r\n    state.advance();\r\n    state.lastIntValue = ch;\r\n    return true\r\n  };\r\n\r\n  // https://tc39.es/ecma262/#prod-ClassSetReservedDoublePunctuator\r\n  function isClassSetReservedDoublePunctuatorCharacter(ch) {\r\n    return (\r\n      ch === 0x21 /* ! */ ||\r\n      ch >= 0x23 /* # */ && ch <= 0x26 /* & */ ||\r\n      ch >= 0x2A /* * */ && ch <= 0x2C /* , */ ||\r\n      ch === 0x2E /* . */ ||\r\n      ch >= 0x3A /* : */ && ch <= 0x40 /* @ */ ||\r\n      ch === 0x5E /* ^ */ ||\r\n      ch === 0x60 /* ` */ ||\r\n      ch === 0x7E /* ~ */\r\n    )\r\n  }\r\n\r\n  // https://tc39.es/ecma262/#prod-ClassSetSyntaxCharacter\r\n  function isClassSetSyntaxCharacter(ch) {\r\n    return (\r\n      ch === 0x28 /* ( */ ||\r\n      ch === 0x29 /* ) */ ||\r\n      ch === 0x2D /* - */ ||\r\n      ch === 0x2F /* / */ ||\r\n      ch >= 0x5B /* [ */ && ch <= 0x5D /* ] */ ||\r\n      ch >= 0x7B /* { */ && ch <= 0x7D /* } */\r\n    )\r\n  }\r\n\r\n  // https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\r\n  pp$1.regexp_eatClassSetReservedPunctuator = function(state) {\r\n    var ch = state.current();\r\n    if (isClassSetReservedPunctuator(ch)) {\r\n      state.lastIntValue = ch;\r\n      state.advance();\r\n      return true\r\n    }\r\n    return false\r\n  };\r\n\r\n  // https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\r\n  function isClassSetReservedPunctuator(ch) {\r\n    return (\r\n      ch === 0x21 /* ! */ ||\r\n      ch === 0x23 /* # */ ||\r\n      ch === 0x25 /* % */ ||\r\n      ch === 0x26 /* & */ ||\r\n      ch === 0x2C /* , */ ||\r\n      ch === 0x2D /* - */ ||\r\n      ch >= 0x3A /* : */ && ch <= 0x3E /* > */ ||\r\n      ch === 0x40 /* @ */ ||\r\n      ch === 0x60 /* ` */ ||\r\n      ch === 0x7E /* ~ */\r\n    )\r\n  }\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\r\n  pp$1.regexp_eatClassControlLetter = function(state) {\r\n    var ch = state.current();\r\n    if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\r\n      state.lastIntValue = ch % 0x20;\r\n      state.advance();\r\n      return true\r\n    }\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\r\n  pp$1.regexp_eatHexEscapeSequence = function(state) {\r\n    var start = state.pos;\r\n    if (state.eat(0x78 /* x */)) {\r\n      if (this.regexp_eatFixedHexDigits(state, 2)) {\r\n        return true\r\n      }\r\n      if (state.switchU) {\r\n        state.raise(\"Invalid escape\");\r\n      }\r\n      state.pos = start;\r\n    }\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\r\n  pp$1.regexp_eatDecimalDigits = function(state) {\r\n    var start = state.pos;\r\n    var ch = 0;\r\n    state.lastIntValue = 0;\r\n    while (isDecimalDigit(ch = state.current())) {\r\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\r\n      state.advance();\r\n    }\r\n    return state.pos !== start\r\n  };\r\n  function isDecimalDigit(ch) {\r\n    return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\r\n  }\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\r\n  pp$1.regexp_eatHexDigits = function(state) {\r\n    var start = state.pos;\r\n    var ch = 0;\r\n    state.lastIntValue = 0;\r\n    while (isHexDigit(ch = state.current())) {\r\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\r\n      state.advance();\r\n    }\r\n    return state.pos !== start\r\n  };\r\n  function isHexDigit(ch) {\r\n    return (\r\n      (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\r\n      (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\r\n      (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\r\n    )\r\n  }\r\n  function hexToInt(ch) {\r\n    if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\r\n      return 10 + (ch - 0x41 /* A */)\r\n    }\r\n    if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\r\n      return 10 + (ch - 0x61 /* a */)\r\n    }\r\n    return ch - 0x30 /* 0 */\r\n  }\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\r\n  // Allows only 0-377(octal) i.e. 0-255(decimal).\r\n  pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {\r\n    if (this.regexp_eatOctalDigit(state)) {\r\n      var n1 = state.lastIntValue;\r\n      if (this.regexp_eatOctalDigit(state)) {\r\n        var n2 = state.lastIntValue;\r\n        if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\r\n          state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\r\n        } else {\r\n          state.lastIntValue = n1 * 8 + n2;\r\n        }\r\n      } else {\r\n        state.lastIntValue = n1;\r\n      }\r\n      return true\r\n    }\r\n    return false\r\n  };\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\r\n  pp$1.regexp_eatOctalDigit = function(state) {\r\n    var ch = state.current();\r\n    if (isOctalDigit(ch)) {\r\n      state.lastIntValue = ch - 0x30; /* 0 */\r\n      state.advance();\r\n      return true\r\n    }\r\n    state.lastIntValue = 0;\r\n    return false\r\n  };\r\n  function isOctalDigit(ch) {\r\n    return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\r\n  }\r\n\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\r\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\r\n  // And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\r\n  pp$1.regexp_eatFixedHexDigits = function(state, length) {\r\n    var start = state.pos;\r\n    state.lastIntValue = 0;\r\n    for (var i = 0; i < length; ++i) {\r\n      var ch = state.current();\r\n      if (!isHexDigit(ch)) {\r\n        state.pos = start;\r\n        return false\r\n      }\r\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\r\n      state.advance();\r\n    }\r\n    return true\r\n  };\r\n\r\n  // Object type used to represent tokens. Note that normally, tokens\r\n  // simply exist as properties on the parser object. This is only\r\n  // used for the onToken callback and the external tokenizer.\r\n\r\n  var Token = function Token(p) {\r\n    this.type = p.type;\r\n    this.value = p.value;\r\n    this.start = p.start;\r\n    this.end = p.end;\r\n    if (p.options.locations)\r\n      { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\r\n    if (p.options.ranges)\r\n      { this.range = [p.start, p.end]; }\r\n  };\r\n\r\n  // ## Tokenizer\r\n\r\n  var pp = Parser.prototype;\r\n\r\n  // Move to the next token\r\n\r\n  pp.next = function(ignoreEscapeSequenceInKeyword) {\r\n    if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\r\n      { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\r\n    if (this.options.onToken)\r\n      { this.options.onToken(new Token(this)); }\r\n\r\n    this.lastTokEnd = this.end;\r\n    this.lastTokStart = this.start;\r\n    this.lastTokEndLoc = this.endLoc;\r\n    this.lastTokStartLoc = this.startLoc;\r\n    this.nextToken();\r\n  };\r\n\r\n  pp.getToken = function() {\r\n    this.next();\r\n    return new Token(this)\r\n  };\r\n\r\n  // If we're in an ES6 environment, make parsers iterable\r\n  if (typeof Symbol !== \"undefined\")\r\n    { pp[Symbol.iterator] = function() {\r\n      var this$1$1 = this;\r\n\r\n      return {\r\n        next: function () {\r\n          var token = this$1$1.getToken();\r\n          return {\r\n            done: token.type === types$1.eof,\r\n            value: token\r\n          }\r\n        }\r\n      }\r\n    }; }\r\n\r\n  // Toggle strict mode. Re-reads the next number or string to please\r\n  // pedantic tests (`\"use strict\"; 010;` should fail).\r\n\r\n  // Read a single token, updating the parser object's token-related\r\n  // properties.\r\n\r\n  pp.nextToken = function() {\r\n    var curContext = this.curContext();\r\n    if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\r\n\r\n    this.start = this.pos;\r\n    if (this.options.locations) { this.startLoc = this.curPosition(); }\r\n    if (this.pos >= this.input.length) { return this.finishToken(types$1.eof) }\r\n\r\n    if (curContext.override) { return curContext.override(this) }\r\n    else { this.readToken(this.fullCharCodeAtPos()); }\r\n  };\r\n\r\n  pp.readToken = function(code) {\r\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\r\n    // identifiers, so '\\' also dispatches to that.\r\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\r\n      { return this.readWord() }\r\n\r\n    return this.getTokenFromCode(code)\r\n  };\r\n\r\n  pp.fullCharCodeAtPos = function() {\r\n    var code = this.input.charCodeAt(this.pos);\r\n    if (code <= 0xd7ff || code >= 0xdc00) { return code }\r\n    var next = this.input.charCodeAt(this.pos + 1);\r\n    return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00\r\n  };\r\n\r\n  pp.skipBlockComment = function() {\r\n    var startLoc = this.options.onComment && this.curPosition();\r\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\r\n    if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\r\n    this.pos = end + 2;\r\n    if (this.options.locations) {\r\n      for (var nextBreak = (void 0), pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;) {\r\n        ++this.curLine;\r\n        pos = this.lineStart = nextBreak;\r\n      }\r\n    }\r\n    if (this.options.onComment)\r\n      { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\r\n                             startLoc, this.curPosition()); }\r\n  };\r\n\r\n  pp.skipLineComment = function(startSkip) {\r\n    var start = this.pos;\r\n    var startLoc = this.options.onComment && this.curPosition();\r\n    var ch = this.input.charCodeAt(this.pos += startSkip);\r\n    while (this.pos < this.input.length && !isNewLine(ch)) {\r\n      ch = this.input.charCodeAt(++this.pos);\r\n    }\r\n    if (this.options.onComment)\r\n      { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\r\n                             startLoc, this.curPosition()); }\r\n  };\r\n\r\n  // Called at the start of the parse and after every token. Skips\r\n  // whitespace and comments, and.\r\n\r\n  pp.skipSpace = function() {\r\n    loop: while (this.pos < this.input.length) {\r\n      var ch = this.input.charCodeAt(this.pos);\r\n      switch (ch) {\r\n      case 32: case 160: // ' '\r\n        ++this.pos;\r\n        break\r\n      case 13:\r\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\r\n          ++this.pos;\r\n        }\r\n      case 10: case 8232: case 8233:\r\n        ++this.pos;\r\n        if (this.options.locations) {\r\n          ++this.curLine;\r\n          this.lineStart = this.pos;\r\n        }\r\n        break\r\n      case 47: // '/'\r\n        switch (this.input.charCodeAt(this.pos + 1)) {\r\n        case 42: // '*'\r\n          this.skipBlockComment();\r\n          break\r\n        case 47:\r\n          this.skipLineComment(2);\r\n          break\r\n        default:\r\n          break loop\r\n        }\r\n        break\r\n      default:\r\n        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\r\n          ++this.pos;\r\n        } else {\r\n          break loop\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Called at the end of every token. Sets `end`, `val`, and\r\n  // maintains `context` and `exprAllowed`, and skips the space after\r\n  // the token, so that the next one's `start` will point at the\r\n  // right position.\r\n\r\n  pp.finishToken = function(type, val) {\r\n    this.end = this.pos;\r\n    if (this.options.locations) { this.endLoc = this.curPosition(); }\r\n    var prevType = this.type;\r\n    this.type = type;\r\n    this.value = val;\r\n\r\n    this.updateContext(prevType);\r\n  };\r\n\r\n  // ### Token reading\r\n\r\n  // This is the function that is called to fetch the next token. It\r\n  // is somewhat obscure, because it works in character codes rather\r\n  // than characters, and because operator parsing has been inlined\r\n  // into it.\r\n  //\r\n  // All in the name of speed.\r\n  //\r\n  pp.readToken_dot = function() {\r\n    var next = this.input.charCodeAt(this.pos + 1);\r\n    if (next >= 48 && next <= 57) { return this.readNumber(true) }\r\n    var next2 = this.input.charCodeAt(this.pos + 2);\r\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\r\n      this.pos += 3;\r\n      return this.finishToken(types$1.ellipsis)\r\n    } else {\r\n      ++this.pos;\r\n      return this.finishToken(types$1.dot)\r\n    }\r\n  };\r\n\r\n  pp.readToken_slash = function() { // '/'\r\n    var next = this.input.charCodeAt(this.pos + 1);\r\n    if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\r\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\r\n    return this.finishOp(types$1.slash, 1)\r\n  };\r\n\r\n  pp.readToken_mult_modulo_exp = function(code) { // '%*'\r\n    var next = this.input.charCodeAt(this.pos + 1);\r\n    var size = 1;\r\n    var tokentype = code === 42 ? types$1.star : types$1.modulo;\r\n\r\n    // exponentiation operator ** and **=\r\n    if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\r\n      ++size;\r\n      tokentype = types$1.starstar;\r\n      next = this.input.charCodeAt(this.pos + 2);\r\n    }\r\n\r\n    if (next === 61) { return this.finishOp(types$1.assign, size + 1) }\r\n    return this.finishOp(tokentype, size)\r\n  };\r\n\r\n  pp.readToken_pipe_amp = function(code) { // '|&'\r\n    var next = this.input.charCodeAt(this.pos + 1);\r\n    if (next === code) {\r\n      if (this.options.ecmaVersion >= 12) {\r\n        var next2 = this.input.charCodeAt(this.pos + 2);\r\n        if (next2 === 61) { return this.finishOp(types$1.assign, 3) }\r\n      }\r\n      return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2)\r\n    }\r\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\r\n    return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1)\r\n  };\r\n\r\n  pp.readToken_caret = function() { // '^'\r\n    var next = this.input.charCodeAt(this.pos + 1);\r\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\r\n    return this.finishOp(types$1.bitwiseXOR, 1)\r\n  };\r\n\r\n  pp.readToken_plus_min = function(code) { // '+-'\r\n    var next = this.input.charCodeAt(this.pos + 1);\r\n    if (next === code) {\r\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\r\n          (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\r\n        // A `-->` line comment\r\n        this.skipLineComment(3);\r\n        this.skipSpace();\r\n        return this.nextToken()\r\n      }\r\n      return this.finishOp(types$1.incDec, 2)\r\n    }\r\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\r\n    return this.finishOp(types$1.plusMin, 1)\r\n  };\r\n\r\n  pp.readToken_lt_gt = function(code) { // '<>'\r\n    var next = this.input.charCodeAt(this.pos + 1);\r\n    var size = 1;\r\n    if (next === code) {\r\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\r\n      if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types$1.assign, size + 1) }\r\n      return this.finishOp(types$1.bitShift, size)\r\n    }\r\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\r\n        this.input.charCodeAt(this.pos + 3) === 45) {\r\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\r\n      this.skipLineComment(4);\r\n      this.skipSpace();\r\n      return this.nextToken()\r\n    }\r\n    if (next === 61) { size = 2; }\r\n    return this.finishOp(types$1.relational, size)\r\n  };\r\n\r\n  pp.readToken_eq_excl = function(code) { // '=!'\r\n    var next = this.input.charCodeAt(this.pos + 1);\r\n    if (next === 61) { return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\r\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\r\n      this.pos += 2;\r\n      return this.finishToken(types$1.arrow)\r\n    }\r\n    return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1)\r\n  };\r\n\r\n  pp.readToken_question = function() { // '?'\r\n    var ecmaVersion = this.options.ecmaVersion;\r\n    if (ecmaVersion >= 11) {\r\n      var next = this.input.charCodeAt(this.pos + 1);\r\n      if (next === 46) {\r\n        var next2 = this.input.charCodeAt(this.pos + 2);\r\n        if (next2 < 48 || next2 > 57) { return this.finishOp(types$1.questionDot, 2) }\r\n      }\r\n      if (next === 63) {\r\n        if (ecmaVersion >= 12) {\r\n          var next2$1 = this.input.charCodeAt(this.pos + 2);\r\n          if (next2$1 === 61) { return this.finishOp(types$1.assign, 3) }\r\n        }\r\n        return this.finishOp(types$1.coalesce, 2)\r\n      }\r\n    }\r\n    return this.finishOp(types$1.question, 1)\r\n  };\r\n\r\n  pp.readToken_numberSign = function() { // '#'\r\n    var ecmaVersion = this.options.ecmaVersion;\r\n    var code = 35; // '#'\r\n    if (ecmaVersion >= 13) {\r\n      ++this.pos;\r\n      code = this.fullCharCodeAtPos();\r\n      if (isIdentifierStart(code, true) || code === 92 /* '\\' */) {\r\n        return this.finishToken(types$1.privateId, this.readWord1())\r\n      }\r\n    }\r\n\r\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\r\n  };\r\n\r\n  pp.getTokenFromCode = function(code) {\r\n    switch (code) {\r\n    // The interpretation of a dot depends on whether it is followed\r\n    // by a digit or another two dots.\r\n    case 46: // '.'\r\n      return this.readToken_dot()\r\n\r\n    // Punctuation tokens.\r\n    case 40: ++this.pos; return this.finishToken(types$1.parenL)\r\n    case 41: ++this.pos; return this.finishToken(types$1.parenR)\r\n    case 59: ++this.pos; return this.finishToken(types$1.semi)\r\n    case 44: ++this.pos; return this.finishToken(types$1.comma)\r\n    case 91: ++this.pos; return this.finishToken(types$1.bracketL)\r\n    case 93: ++this.pos; return this.finishToken(types$1.bracketR)\r\n    case 123: ++this.pos; return this.finishToken(types$1.braceL)\r\n    case 125: ++this.pos; return this.finishToken(types$1.braceR)\r\n    case 58: ++this.pos; return this.finishToken(types$1.colon)\r\n\r\n    case 96: // '`'\r\n      if (this.options.ecmaVersion < 6) { break }\r\n      ++this.pos;\r\n      return this.finishToken(types$1.backQuote)\r\n\r\n    case 48: // '0'\r\n      var next = this.input.charCodeAt(this.pos + 1);\r\n      if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\r\n      if (this.options.ecmaVersion >= 6) {\r\n        if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\r\n        if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\r\n      }\r\n\r\n    // Anything else beginning with a digit is an integer, octal\r\n    // number, or float.\r\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\r\n      return this.readNumber(false)\r\n\r\n    // Quotes produce strings.\r\n    case 34: case 39: // '\"', \"'\"\r\n      return this.readString(code)\r\n\r\n    // Operators are parsed inline in tiny state machines. '=' (61) is\r\n    // often referred to. `finishOp` simply skips the amount of\r\n    // characters it is given as second argument, and returns a token\r\n    // of the type given by its first argument.\r\n    case 47: // '/'\r\n      return this.readToken_slash()\r\n\r\n    case 37: case 42: // '%*'\r\n      return this.readToken_mult_modulo_exp(code)\r\n\r\n    case 124: case 38: // '|&'\r\n      return this.readToken_pipe_amp(code)\r\n\r\n    case 94: // '^'\r\n      return this.readToken_caret()\r\n\r\n    case 43: case 45: // '+-'\r\n      return this.readToken_plus_min(code)\r\n\r\n    case 60: case 62: // '<>'\r\n      return this.readToken_lt_gt(code)\r\n\r\n    case 61: case 33: // '=!'\r\n      return this.readToken_eq_excl(code)\r\n\r\n    case 63: // '?'\r\n      return this.readToken_question()\r\n\r\n    case 126: // '~'\r\n      return this.finishOp(types$1.prefix, 1)\r\n\r\n    case 35: // '#'\r\n      return this.readToken_numberSign()\r\n    }\r\n\r\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\r\n  };\r\n\r\n  pp.finishOp = function(type, size) {\r\n    var str = this.input.slice(this.pos, this.pos + size);\r\n    this.pos += size;\r\n    return this.finishToken(type, str)\r\n  };\r\n\r\n  pp.readRegexp = function() {\r\n    var escaped, inClass, start = this.pos;\r\n    for (;;) {\r\n      if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\r\n      var ch = this.input.charAt(this.pos);\r\n      if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\r\n      if (!escaped) {\r\n        if (ch === \"[\") { inClass = true; }\r\n        else if (ch === \"]\" && inClass) { inClass = false; }\r\n        else if (ch === \"/\" && !inClass) { break }\r\n        escaped = ch === \"\\\\\";\r\n      } else { escaped = false; }\r\n      ++this.pos;\r\n    }\r\n    var pattern = this.input.slice(start, this.pos);\r\n    ++this.pos;\r\n    var flagsStart = this.pos;\r\n    var flags = this.readWord1();\r\n    if (this.containsEsc) { this.unexpected(flagsStart); }\r\n\r\n    // Validate pattern\r\n    var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\r\n    state.reset(start, pattern, flags);\r\n    this.validateRegExpFlags(state);\r\n    this.validateRegExpPattern(state);\r\n\r\n    // Create Literal#value property value.\r\n    var value = null;\r\n    try {\r\n      value = new RegExp(pattern, flags);\r\n    } catch (e) {\r\n      // ESTree requires null if it failed to instantiate RegExp object.\r\n      // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\r\n    }\r\n\r\n    return this.finishToken(types$1.regexp, {pattern: pattern, flags: flags, value: value})\r\n  };\r\n\r\n  // Read an integer in the given radix. Return null if zero digits\r\n  // were read, the integer value otherwise. When `len` is given, this\r\n  // will return `null` unless the integer has exactly `len` digits.\r\n\r\n  pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\r\n    // `len` is used for character escape sequences. In that case, disallow separators.\r\n    var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\r\n\r\n    // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\r\n    // and isn't fraction part nor exponent part. In that case, if the first digit\r\n    // is zero then disallow separators.\r\n    var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\r\n\r\n    var start = this.pos, total = 0, lastCode = 0;\r\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {\r\n      var code = this.input.charCodeAt(this.pos), val = (void 0);\r\n\r\n      if (allowSeparators && code === 95) {\r\n        if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\"); }\r\n        if (lastCode === 95) { this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\"); }\r\n        if (i === 0) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\"); }\r\n        lastCode = code;\r\n        continue\r\n      }\r\n\r\n      if (code >= 97) { val = code - 97 + 10; } // a\r\n      else if (code >= 65) { val = code - 65 + 10; } // A\r\n      else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\r\n      else { val = Infinity; }\r\n      if (val >= radix) { break }\r\n      lastCode = code;\r\n      total = total * radix + val;\r\n    }\r\n\r\n    if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\"); }\r\n    if (this.pos === start || len != null && this.pos - start !== len) { return null }\r\n\r\n    return total\r\n  };\r\n\r\n  function stringToNumber(str, isLegacyOctalNumericLiteral) {\r\n    if (isLegacyOctalNumericLiteral) {\r\n      return parseInt(str, 8)\r\n    }\r\n\r\n    // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\r\n    return parseFloat(str.replace(/_/g, \"\"))\r\n  }\r\n\r\n  function stringToBigInt(str) {\r\n    if (typeof BigInt !== \"function\") {\r\n      return null\r\n    }\r\n\r\n    // `BigInt(value)` throws syntax error if the string contains numeric separators.\r\n    return BigInt(str.replace(/_/g, \"\"))\r\n  }\r\n\r\n  pp.readRadixNumber = function(radix) {\r\n    var start = this.pos;\r\n    this.pos += 2; // 0x\r\n    var val = this.readInt(radix);\r\n    if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\r\n    if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\r\n      val = stringToBigInt(this.input.slice(start, this.pos));\r\n      ++this.pos;\r\n    } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\r\n    return this.finishToken(types$1.num, val)\r\n  };\r\n\r\n  // Read an integer, octal integer, or floating-point number.\r\n\r\n  pp.readNumber = function(startsWithDot) {\r\n    var start = this.pos;\r\n    if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, \"Invalid number\"); }\r\n    var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\r\n    if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\r\n    var next = this.input.charCodeAt(this.pos);\r\n    if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\r\n      var val$1 = stringToBigInt(this.input.slice(start, this.pos));\r\n      ++this.pos;\r\n      if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\r\n      return this.finishToken(types$1.num, val$1)\r\n    }\r\n    if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\r\n    if (next === 46 && !octal) { // '.'\r\n      ++this.pos;\r\n      this.readInt(10);\r\n      next = this.input.charCodeAt(this.pos);\r\n    }\r\n    if ((next === 69 || next === 101) && !octal) { // 'eE'\r\n      next = this.input.charCodeAt(++this.pos);\r\n      if (next === 43 || next === 45) { ++this.pos; } // '+-'\r\n      if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\r\n    }\r\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\r\n\r\n    var val = stringToNumber(this.input.slice(start, this.pos), octal);\r\n    return this.finishToken(types$1.num, val)\r\n  };\r\n\r\n  // Read a string value, interpreting backslash-escapes.\r\n\r\n  pp.readCodePoint = function() {\r\n    var ch = this.input.charCodeAt(this.pos), code;\r\n\r\n    if (ch === 123) { // '{'\r\n      if (this.options.ecmaVersion < 6) { this.unexpected(); }\r\n      var codePos = ++this.pos;\r\n      code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\r\n      ++this.pos;\r\n      if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\r\n    } else {\r\n      code = this.readHexChar(4);\r\n    }\r\n    return code\r\n  };\r\n\r\n  pp.readString = function(quote) {\r\n    var out = \"\", chunkStart = ++this.pos;\r\n    for (;;) {\r\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\r\n      var ch = this.input.charCodeAt(this.pos);\r\n      if (ch === quote) { break }\r\n      if (ch === 92) { // '\\'\r\n        out += this.input.slice(chunkStart, this.pos);\r\n        out += this.readEscapedChar(false);\r\n        chunkStart = this.pos;\r\n      } else if (ch === 0x2028 || ch === 0x2029) {\r\n        if (this.options.ecmaVersion < 10) { this.raise(this.start, \"Unterminated string constant\"); }\r\n        ++this.pos;\r\n        if (this.options.locations) {\r\n          this.curLine++;\r\n          this.lineStart = this.pos;\r\n        }\r\n      } else {\r\n        if (isNewLine(ch)) { this.raise(this.start, \"Unterminated string constant\"); }\r\n        ++this.pos;\r\n      }\r\n    }\r\n    out += this.input.slice(chunkStart, this.pos++);\r\n    return this.finishToken(types$1.string, out)\r\n  };\r\n\r\n  // Reads template string tokens.\r\n\r\n  var INVALID_TEMPLATE_ESCAPE_ERROR = {};\r\n\r\n  pp.tryReadTemplateToken = function() {\r\n    this.inTemplateElement = true;\r\n    try {\r\n      this.readTmplToken();\r\n    } catch (err) {\r\n      if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\r\n        this.readInvalidTemplateToken();\r\n      } else {\r\n        throw err\r\n      }\r\n    }\r\n\r\n    this.inTemplateElement = false;\r\n  };\r\n\r\n  pp.invalidStringToken = function(position, message) {\r\n    if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\r\n      throw INVALID_TEMPLATE_ESCAPE_ERROR\r\n    } else {\r\n      this.raise(position, message);\r\n    }\r\n  };\r\n\r\n  pp.readTmplToken = function() {\r\n    var out = \"\", chunkStart = this.pos;\r\n    for (;;) {\r\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\r\n      var ch = this.input.charCodeAt(this.pos);\r\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\r\n        if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {\r\n          if (ch === 36) {\r\n            this.pos += 2;\r\n            return this.finishToken(types$1.dollarBraceL)\r\n          } else {\r\n            ++this.pos;\r\n            return this.finishToken(types$1.backQuote)\r\n          }\r\n        }\r\n        out += this.input.slice(chunkStart, this.pos);\r\n        return this.finishToken(types$1.template, out)\r\n      }\r\n      if (ch === 92) { // '\\'\r\n        out += this.input.slice(chunkStart, this.pos);\r\n        out += this.readEscapedChar(true);\r\n        chunkStart = this.pos;\r\n      } else if (isNewLine(ch)) {\r\n        out += this.input.slice(chunkStart, this.pos);\r\n        ++this.pos;\r\n        switch (ch) {\r\n        case 13:\r\n          if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\r\n        case 10:\r\n          out += \"\\n\";\r\n          break\r\n        default:\r\n          out += String.fromCharCode(ch);\r\n          break\r\n        }\r\n        if (this.options.locations) {\r\n          ++this.curLine;\r\n          this.lineStart = this.pos;\r\n        }\r\n        chunkStart = this.pos;\r\n      } else {\r\n        ++this.pos;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Reads a template token to search for the end, without validating any escape sequences\r\n  pp.readInvalidTemplateToken = function() {\r\n    for (; this.pos < this.input.length; this.pos++) {\r\n      switch (this.input[this.pos]) {\r\n      case \"\\\\\":\r\n        ++this.pos;\r\n        break\r\n\r\n      case \"$\":\r\n        if (this.input[this.pos + 1] !== \"{\") {\r\n          break\r\n        }\r\n\r\n      // falls through\r\n      case \"`\":\r\n        return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos))\r\n\r\n      // no default\r\n      }\r\n    }\r\n    this.raise(this.start, \"Unterminated template\");\r\n  };\r\n\r\n  // Used to read escaped characters\r\n\r\n  pp.readEscapedChar = function(inTemplate) {\r\n    var ch = this.input.charCodeAt(++this.pos);\r\n    ++this.pos;\r\n    switch (ch) {\r\n    case 110: return \"\\n\" // 'n' -> '\\n'\r\n    case 114: return \"\\r\" // 'r' -> '\\r'\r\n    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\r\n    case 117: return codePointToString(this.readCodePoint()) // 'u'\r\n    case 116: return \"\\t\" // 't' -> '\\t'\r\n    case 98: return \"\\b\" // 'b' -> '\\b'\r\n    case 118: return \"\\u000b\" // 'v' -> '\\u000b'\r\n    case 102: return \"\\f\" // 'f' -> '\\f'\r\n    case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\r\n    case 10: // ' \\n'\r\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\r\n      return \"\"\r\n    case 56:\r\n    case 57:\r\n      if (this.strict) {\r\n        this.invalidStringToken(\r\n          this.pos - 1,\r\n          \"Invalid escape sequence\"\r\n        );\r\n      }\r\n      if (inTemplate) {\r\n        var codePos = this.pos - 1;\r\n\r\n        this.invalidStringToken(\r\n          codePos,\r\n          \"Invalid escape sequence in template string\"\r\n        );\r\n      }\r\n    default:\r\n      if (ch >= 48 && ch <= 55) {\r\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\r\n        var octal = parseInt(octalStr, 8);\r\n        if (octal > 255) {\r\n          octalStr = octalStr.slice(0, -1);\r\n          octal = parseInt(octalStr, 8);\r\n        }\r\n        this.pos += octalStr.length - 1;\r\n        ch = this.input.charCodeAt(this.pos);\r\n        if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\r\n          this.invalidStringToken(\r\n            this.pos - 1 - octalStr.length,\r\n            inTemplate\r\n              ? \"Octal literal in template string\"\r\n              : \"Octal literal in strict mode\"\r\n          );\r\n        }\r\n        return String.fromCharCode(octal)\r\n      }\r\n      if (isNewLine(ch)) {\r\n        // Unicode new line characters after \\ get removed from output in both\r\n        // template literals and strings\r\n        return \"\"\r\n      }\r\n      return String.fromCharCode(ch)\r\n    }\r\n  };\r\n\r\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\r\n\r\n  pp.readHexChar = function(len) {\r\n    var codePos = this.pos;\r\n    var n = this.readInt(16, len);\r\n    if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\r\n    return n\r\n  };\r\n\r\n  // Read an identifier, and return it as a string. Sets `this.containsEsc`\r\n  // to whether the word contained a '\\u' escape.\r\n  //\r\n  // Incrementally adds only escaped chars, adding other chunks as-is\r\n  // as a micro-optimization.\r\n\r\n  pp.readWord1 = function() {\r\n    this.containsEsc = false;\r\n    var word = \"\", first = true, chunkStart = this.pos;\r\n    var astral = this.options.ecmaVersion >= 6;\r\n    while (this.pos < this.input.length) {\r\n      var ch = this.fullCharCodeAtPos();\r\n      if (isIdentifierChar(ch, astral)) {\r\n        this.pos += ch <= 0xffff ? 1 : 2;\r\n      } else if (ch === 92) { // \"\\\"\r\n        this.containsEsc = true;\r\n        word += this.input.slice(chunkStart, this.pos);\r\n        var escStart = this.pos;\r\n        if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\r\n          { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\r\n        ++this.pos;\r\n        var esc = this.readCodePoint();\r\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\r\n          { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\r\n        word += codePointToString(esc);\r\n        chunkStart = this.pos;\r\n      } else {\r\n        break\r\n      }\r\n      first = false;\r\n    }\r\n    return word + this.input.slice(chunkStart, this.pos)\r\n  };\r\n\r\n  // Read an identifier or keyword token. Will check for reserved\r\n  // words when necessary.\r\n\r\n  pp.readWord = function() {\r\n    var word = this.readWord1();\r\n    var type = types$1.name;\r\n    if (this.keywords.test(word)) {\r\n      type = keywords[word];\r\n    }\r\n    return this.finishToken(type, word)\r\n  };\r\n\r\n  // Acorn is a tiny, fast JavaScript parser written in JavaScript.\r\n  //\r\n  // Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\r\n  // various contributors and released under an MIT license.\r\n  //\r\n  // Git repositories for Acorn are available at\r\n  //\r\n  //     http://marijnhaverbeke.nl/git/acorn\r\n  //     https://github.com/acornjs/acorn.git\r\n  //\r\n  // Please use the [github bug tracker][ghbt] to report issues.\r\n  //\r\n  // [ghbt]: https://github.com/acornjs/acorn/issues\r\n  //\r\n  // [walk]: util/walk.js\r\n\r\n\r\n  var version = \"8.11.3\";\r\n\r\n  Parser.acorn = {\r\n    Parser: Parser,\r\n    version: version,\r\n    defaultOptions: defaultOptions,\r\n    Position: Position,\r\n    SourceLocation: SourceLocation,\r\n    getLineInfo: getLineInfo,\r\n    Node: Node,\r\n    TokenType: TokenType,\r\n    tokTypes: types$1,\r\n    keywordTypes: keywords,\r\n    TokContext: TokContext,\r\n    tokContexts: types,\r\n    isIdentifierChar: isIdentifierChar,\r\n    isIdentifierStart: isIdentifierStart,\r\n    Token: Token,\r\n    isNewLine: isNewLine,\r\n    lineBreak: lineBreak,\r\n    lineBreakG: lineBreakG,\r\n    nonASCIIwhitespace: nonASCIIwhitespace\r\n  };\r\n\r\n  // The main exported interface (under `self.acorn` when in the\r\n  // browser) is a `parse` function that takes a code string and returns\r\n  // an abstract syntax tree as specified by the [ESTree spec][estree].\r\n  //\r\n  // [estree]: https://github.com/estree/estree\r\n\r\n  function parse(input, options) {\r\n    return Parser.parse(input, options)\r\n  }\r\n\r\n  // This function tries to parse a single expression at a given\r\n  // offset in a string. Useful for parsing mixed-language formats\r\n  // that embed JavaScript expressions.\r\n\r\n  function parseExpressionAt(input, pos, options) {\r\n    return Parser.parseExpressionAt(input, pos, options)\r\n  }\r\n\r\n  // Acorn is organized as a tokenizer and a recursive-descent parser.\r\n  // The `tokenizer` export provides an interface to the tokenizer.\r\n\r\n  function tokenizer(input, options) {\r\n    return Parser.tokenizer(input, options)\r\n  }\r\n\r\n  exports.Node = Node;\r\n  exports.Parser = Parser;\r\n  exports.Position = Position;\r\n  exports.SourceLocation = SourceLocation;\r\n  exports.TokContext = TokContext;\r\n  exports.Token = Token;\r\n  exports.TokenType = TokenType;\r\n  exports.defaultOptions = defaultOptions;\r\n  exports.getLineInfo = getLineInfo;\r\n  exports.isIdentifierChar = isIdentifierChar;\r\n  exports.isIdentifierStart = isIdentifierStart;\r\n  exports.isNewLine = isNewLine;\r\n  exports.keywordTypes = keywords;\r\n  exports.lineBreak = lineBreak;\r\n  exports.lineBreakG = lineBreakG;\r\n  exports.nonASCIIwhitespace = nonASCIIwhitespace;\r\n  exports.parse = parse;\r\n  exports.parseExpressionAt = parseExpressionAt;\r\n  exports.tokContexts = types;\r\n  exports.tokTypes = types$1;\r\n  exports.tokenizer = tokenizer;\r\n  exports.version = version;\r\n\r\n}));\r\n"
  },
  "202": {
    "metadata": {
      "scriptId": "202",
      "url": "node:internal/deps/acorn/acorn-walk/dist/walk",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 461,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "c4cac8f91158d5055e70021abed042a7c1e6a88d14afa3fec8625ed0777b9706",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 16418,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/deps/acorn/acorn-walk/dist/walk"
    },
    "source": "(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\r\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\r\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.acorn = global.acorn || {}, global.acorn.walk = {})));\r\n})(this, (function (exports) { 'use strict';\r\n\r\n  // AST walker module for ESTree compatible trees\r\n\r\n  // A simple walk is one where you simply specify callbacks to be\r\n  // called on specific nodes. The last two arguments are optional. A\r\n  // simple use would be\r\n  //\r\n  //     walk.simple(myTree, {\r\n  //         Expression: function(node) { ... }\r\n  //     });\r\n  //\r\n  // to do something with all expressions. All ESTree node types\r\n  // can be used to identify node types, as well as Expression and\r\n  // Statement, which denote categories of nodes.\r\n  //\r\n  // The base argument can be used to pass a custom (recursive)\r\n  // walker, and state can be used to give this walked an initial\r\n  // state.\r\n\r\n  function simple(node, visitors, baseVisitor, state, override) {\r\n    if (!baseVisitor) { baseVisitor = base\r\n    ; }(function c(node, st, override) {\r\n      var type = override || node.type;\r\n      baseVisitor[type](node, st, c);\r\n      if (visitors[type]) { visitors[type](node, st); }\r\n    })(node, state, override);\r\n  }\r\n\r\n  // An ancestor walk keeps an array of ancestor nodes (including the\r\n  // current node) and passes them to the callback as third parameter\r\n  // (and also as state parameter when no other state is present).\r\n  function ancestor(node, visitors, baseVisitor, state, override) {\r\n    var ancestors = [];\r\n    if (!baseVisitor) { baseVisitor = base\r\n    ; }(function c(node, st, override) {\r\n      var type = override || node.type;\r\n      var isNew = node !== ancestors[ancestors.length - 1];\r\n      if (isNew) { ancestors.push(node); }\r\n      baseVisitor[type](node, st, c);\r\n      if (visitors[type]) { visitors[type](node, st || ancestors, ancestors); }\r\n      if (isNew) { ancestors.pop(); }\r\n    })(node, state, override);\r\n  }\r\n\r\n  // A recursive walk is one where your functions override the default\r\n  // walkers. They can modify and replace the state parameter that's\r\n  // threaded through the walk, and can opt how and whether to walk\r\n  // their child nodes (by calling their third argument on these\r\n  // nodes).\r\n  function recursive(node, state, funcs, baseVisitor, override) {\r\n    var visitor = funcs ? make(funcs, baseVisitor || undefined) : baseVisitor\r\n    ;(function c(node, st, override) {\r\n      visitor[override || node.type](node, st, c);\r\n    })(node, state, override);\r\n  }\r\n\r\n  function makeTest(test) {\r\n    if (typeof test === \"string\")\r\n      { return function (type) { return type === test; } }\r\n    else if (!test)\r\n      { return function () { return true; } }\r\n    else\r\n      { return test }\r\n  }\r\n\r\n  var Found = function Found(node, state) { this.node = node; this.state = state; };\r\n\r\n  // A full walk triggers the callback on each node\r\n  function full(node, callback, baseVisitor, state, override) {\r\n    if (!baseVisitor) { baseVisitor = base; }\r\n    var last\r\n    ;(function c(node, st, override) {\r\n      var type = override || node.type;\r\n      baseVisitor[type](node, st, c);\r\n      if (last !== node) {\r\n        callback(node, st, type);\r\n        last = node;\r\n      }\r\n    })(node, state, override);\r\n  }\r\n\r\n  // An fullAncestor walk is like an ancestor walk, but triggers\r\n  // the callback on each node\r\n  function fullAncestor(node, callback, baseVisitor, state) {\r\n    if (!baseVisitor) { baseVisitor = base; }\r\n    var ancestors = [], last\r\n    ;(function c(node, st, override) {\r\n      var type = override || node.type;\r\n      var isNew = node !== ancestors[ancestors.length - 1];\r\n      if (isNew) { ancestors.push(node); }\r\n      baseVisitor[type](node, st, c);\r\n      if (last !== node) {\r\n        callback(node, st || ancestors, ancestors, type);\r\n        last = node;\r\n      }\r\n      if (isNew) { ancestors.pop(); }\r\n    })(node, state);\r\n  }\r\n\r\n  // Find a node with a given start, end, and type (all are optional,\r\n  // null can be used as wildcard). Returns a {node, state} object, or\r\n  // undefined when it doesn't find a matching node.\r\n  function findNodeAt(node, start, end, test, baseVisitor, state) {\r\n    if (!baseVisitor) { baseVisitor = base; }\r\n    test = makeTest(test);\r\n    try {\r\n      (function c(node, st, override) {\r\n        var type = override || node.type;\r\n        if ((start == null || node.start <= start) &&\r\n            (end == null || node.end >= end))\r\n          { baseVisitor[type](node, st, c); }\r\n        if ((start == null || node.start === start) &&\r\n            (end == null || node.end === end) &&\r\n            test(type, node))\r\n          { throw new Found(node, st) }\r\n      })(node, state);\r\n    } catch (e) {\r\n      if (e instanceof Found) { return e }\r\n      throw e\r\n    }\r\n  }\r\n\r\n  // Find the innermost node of a given type that contains the given\r\n  // position. Interface similar to findNodeAt.\r\n  function findNodeAround(node, pos, test, baseVisitor, state) {\r\n    test = makeTest(test);\r\n    if (!baseVisitor) { baseVisitor = base; }\r\n    try {\r\n      (function c(node, st, override) {\r\n        var type = override || node.type;\r\n        if (node.start > pos || node.end < pos) { return }\r\n        baseVisitor[type](node, st, c);\r\n        if (test(type, node)) { throw new Found(node, st) }\r\n      })(node, state);\r\n    } catch (e) {\r\n      if (e instanceof Found) { return e }\r\n      throw e\r\n    }\r\n  }\r\n\r\n  // Find the outermost matching node after a given position.\r\n  function findNodeAfter(node, pos, test, baseVisitor, state) {\r\n    test = makeTest(test);\r\n    if (!baseVisitor) { baseVisitor = base; }\r\n    try {\r\n      (function c(node, st, override) {\r\n        if (node.end < pos) { return }\r\n        var type = override || node.type;\r\n        if (node.start >= pos && test(type, node)) { throw new Found(node, st) }\r\n        baseVisitor[type](node, st, c);\r\n      })(node, state);\r\n    } catch (e) {\r\n      if (e instanceof Found) { return e }\r\n      throw e\r\n    }\r\n  }\r\n\r\n  // Find the outermost matching node before a given position.\r\n  function findNodeBefore(node, pos, test, baseVisitor, state) {\r\n    test = makeTest(test);\r\n    if (!baseVisitor) { baseVisitor = base; }\r\n    var max\r\n    ;(function c(node, st, override) {\r\n      if (node.start > pos) { return }\r\n      var type = override || node.type;\r\n      if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node))\r\n        { max = new Found(node, st); }\r\n      baseVisitor[type](node, st, c);\r\n    })(node, state);\r\n    return max\r\n  }\r\n\r\n  // Used to create a custom walker. Will fill in all missing node\r\n  // type properties with the defaults.\r\n  function make(funcs, baseVisitor) {\r\n    var visitor = Object.create(baseVisitor || base);\r\n    for (var type in funcs) { visitor[type] = funcs[type]; }\r\n    return visitor\r\n  }\r\n\r\n  function skipThrough(node, st, c) { c(node, st); }\r\n  function ignore(_node, _st, _c) {}\r\n\r\n  // Node walkers.\r\n\r\n  var base = {};\r\n\r\n  base.Program = base.BlockStatement = base.StaticBlock = function (node, st, c) {\r\n    for (var i = 0, list = node.body; i < list.length; i += 1)\r\n      {\r\n      var stmt = list[i];\r\n\r\n      c(stmt, st, \"Statement\");\r\n    }\r\n  };\r\n  base.Statement = skipThrough;\r\n  base.EmptyStatement = ignore;\r\n  base.ExpressionStatement = base.ParenthesizedExpression = base.ChainExpression =\r\n    function (node, st, c) { return c(node.expression, st, \"Expression\"); };\r\n  base.IfStatement = function (node, st, c) {\r\n    c(node.test, st, \"Expression\");\r\n    c(node.consequent, st, \"Statement\");\r\n    if (node.alternate) { c(node.alternate, st, \"Statement\"); }\r\n  };\r\n  base.LabeledStatement = function (node, st, c) { return c(node.body, st, \"Statement\"); };\r\n  base.BreakStatement = base.ContinueStatement = ignore;\r\n  base.WithStatement = function (node, st, c) {\r\n    c(node.object, st, \"Expression\");\r\n    c(node.body, st, \"Statement\");\r\n  };\r\n  base.SwitchStatement = function (node, st, c) {\r\n    c(node.discriminant, st, \"Expression\");\r\n    for (var i$1 = 0, list$1 = node.cases; i$1 < list$1.length; i$1 += 1) {\r\n      var cs = list$1[i$1];\r\n\r\n      if (cs.test) { c(cs.test, st, \"Expression\"); }\r\n      for (var i = 0, list = cs.consequent; i < list.length; i += 1)\r\n        {\r\n        var cons = list[i];\r\n\r\n        c(cons, st, \"Statement\");\r\n      }\r\n    }\r\n  };\r\n  base.SwitchCase = function (node, st, c) {\r\n    if (node.test) { c(node.test, st, \"Expression\"); }\r\n    for (var i = 0, list = node.consequent; i < list.length; i += 1)\r\n      {\r\n      var cons = list[i];\r\n\r\n      c(cons, st, \"Statement\");\r\n    }\r\n  };\r\n  base.ReturnStatement = base.YieldExpression = base.AwaitExpression = function (node, st, c) {\r\n    if (node.argument) { c(node.argument, st, \"Expression\"); }\r\n  };\r\n  base.ThrowStatement = base.SpreadElement =\r\n    function (node, st, c) { return c(node.argument, st, \"Expression\"); };\r\n  base.TryStatement = function (node, st, c) {\r\n    c(node.block, st, \"Statement\");\r\n    if (node.handler) { c(node.handler, st); }\r\n    if (node.finalizer) { c(node.finalizer, st, \"Statement\"); }\r\n  };\r\n  base.CatchClause = function (node, st, c) {\r\n    if (node.param) { c(node.param, st, \"Pattern\"); }\r\n    c(node.body, st, \"Statement\");\r\n  };\r\n  base.WhileStatement = base.DoWhileStatement = function (node, st, c) {\r\n    c(node.test, st, \"Expression\");\r\n    c(node.body, st, \"Statement\");\r\n  };\r\n  base.ForStatement = function (node, st, c) {\r\n    if (node.init) { c(node.init, st, \"ForInit\"); }\r\n    if (node.test) { c(node.test, st, \"Expression\"); }\r\n    if (node.update) { c(node.update, st, \"Expression\"); }\r\n    c(node.body, st, \"Statement\");\r\n  };\r\n  base.ForInStatement = base.ForOfStatement = function (node, st, c) {\r\n    c(node.left, st, \"ForInit\");\r\n    c(node.right, st, \"Expression\");\r\n    c(node.body, st, \"Statement\");\r\n  };\r\n  base.ForInit = function (node, st, c) {\r\n    if (node.type === \"VariableDeclaration\") { c(node, st); }\r\n    else { c(node, st, \"Expression\"); }\r\n  };\r\n  base.DebuggerStatement = ignore;\r\n\r\n  base.FunctionDeclaration = function (node, st, c) { return c(node, st, \"Function\"); };\r\n  base.VariableDeclaration = function (node, st, c) {\r\n    for (var i = 0, list = node.declarations; i < list.length; i += 1)\r\n      {\r\n      var decl = list[i];\r\n\r\n      c(decl, st);\r\n    }\r\n  };\r\n  base.VariableDeclarator = function (node, st, c) {\r\n    c(node.id, st, \"Pattern\");\r\n    if (node.init) { c(node.init, st, \"Expression\"); }\r\n  };\r\n\r\n  base.Function = function (node, st, c) {\r\n    if (node.id) { c(node.id, st, \"Pattern\"); }\r\n    for (var i = 0, list = node.params; i < list.length; i += 1)\r\n      {\r\n      var param = list[i];\r\n\r\n      c(param, st, \"Pattern\");\r\n    }\r\n    c(node.body, st, node.expression ? \"Expression\" : \"Statement\");\r\n  };\r\n\r\n  base.Pattern = function (node, st, c) {\r\n    if (node.type === \"Identifier\")\r\n      { c(node, st, \"VariablePattern\"); }\r\n    else if (node.type === \"MemberExpression\")\r\n      { c(node, st, \"MemberPattern\"); }\r\n    else\r\n      { c(node, st); }\r\n  };\r\n  base.VariablePattern = ignore;\r\n  base.MemberPattern = skipThrough;\r\n  base.RestElement = function (node, st, c) { return c(node.argument, st, \"Pattern\"); };\r\n  base.ArrayPattern = function (node, st, c) {\r\n    for (var i = 0, list = node.elements; i < list.length; i += 1) {\r\n      var elt = list[i];\r\n\r\n      if (elt) { c(elt, st, \"Pattern\"); }\r\n    }\r\n  };\r\n  base.ObjectPattern = function (node, st, c) {\r\n    for (var i = 0, list = node.properties; i < list.length; i += 1) {\r\n      var prop = list[i];\r\n\r\n      if (prop.type === \"Property\") {\r\n        if (prop.computed) { c(prop.key, st, \"Expression\"); }\r\n        c(prop.value, st, \"Pattern\");\r\n      } else if (prop.type === \"RestElement\") {\r\n        c(prop.argument, st, \"Pattern\");\r\n      }\r\n    }\r\n  };\r\n\r\n  base.Expression = skipThrough;\r\n  base.ThisExpression = base.Super = base.MetaProperty = ignore;\r\n  base.ArrayExpression = function (node, st, c) {\r\n    for (var i = 0, list = node.elements; i < list.length; i += 1) {\r\n      var elt = list[i];\r\n\r\n      if (elt) { c(elt, st, \"Expression\"); }\r\n    }\r\n  };\r\n  base.ObjectExpression = function (node, st, c) {\r\n    for (var i = 0, list = node.properties; i < list.length; i += 1)\r\n      {\r\n      var prop = list[i];\r\n\r\n      c(prop, st);\r\n    }\r\n  };\r\n  base.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;\r\n  base.SequenceExpression = function (node, st, c) {\r\n    for (var i = 0, list = node.expressions; i < list.length; i += 1)\r\n      {\r\n      var expr = list[i];\r\n\r\n      c(expr, st, \"Expression\");\r\n    }\r\n  };\r\n  base.TemplateLiteral = function (node, st, c) {\r\n    for (var i = 0, list = node.quasis; i < list.length; i += 1)\r\n      {\r\n      var quasi = list[i];\r\n\r\n      c(quasi, st);\r\n    }\r\n\r\n    for (var i$1 = 0, list$1 = node.expressions; i$1 < list$1.length; i$1 += 1)\r\n      {\r\n      var expr = list$1[i$1];\r\n\r\n      c(expr, st, \"Expression\");\r\n    }\r\n  };\r\n  base.TemplateElement = ignore;\r\n  base.UnaryExpression = base.UpdateExpression = function (node, st, c) {\r\n    c(node.argument, st, \"Expression\");\r\n  };\r\n  base.BinaryExpression = base.LogicalExpression = function (node, st, c) {\r\n    c(node.left, st, \"Expression\");\r\n    c(node.right, st, \"Expression\");\r\n  };\r\n  base.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {\r\n    c(node.left, st, \"Pattern\");\r\n    c(node.right, st, \"Expression\");\r\n  };\r\n  base.ConditionalExpression = function (node, st, c) {\r\n    c(node.test, st, \"Expression\");\r\n    c(node.consequent, st, \"Expression\");\r\n    c(node.alternate, st, \"Expression\");\r\n  };\r\n  base.NewExpression = base.CallExpression = function (node, st, c) {\r\n    c(node.callee, st, \"Expression\");\r\n    if (node.arguments)\r\n      { for (var i = 0, list = node.arguments; i < list.length; i += 1)\r\n        {\r\n          var arg = list[i];\r\n\r\n          c(arg, st, \"Expression\");\r\n        } }\r\n  };\r\n  base.MemberExpression = function (node, st, c) {\r\n    c(node.object, st, \"Expression\");\r\n    if (node.computed) { c(node.property, st, \"Expression\"); }\r\n  };\r\n  base.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {\r\n    if (node.declaration)\r\n      { c(node.declaration, st, node.type === \"ExportNamedDeclaration\" || node.declaration.id ? \"Statement\" : \"Expression\"); }\r\n    if (node.source) { c(node.source, st, \"Expression\"); }\r\n  };\r\n  base.ExportAllDeclaration = function (node, st, c) {\r\n    if (node.exported)\r\n      { c(node.exported, st); }\r\n    c(node.source, st, \"Expression\");\r\n  };\r\n  base.ImportDeclaration = function (node, st, c) {\r\n    for (var i = 0, list = node.specifiers; i < list.length; i += 1)\r\n      {\r\n      var spec = list[i];\r\n\r\n      c(spec, st);\r\n    }\r\n    c(node.source, st, \"Expression\");\r\n  };\r\n  base.ImportExpression = function (node, st, c) {\r\n    c(node.source, st, \"Expression\");\r\n  };\r\n  base.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.PrivateIdentifier = base.Literal = ignore;\r\n\r\n  base.TaggedTemplateExpression = function (node, st, c) {\r\n    c(node.tag, st, \"Expression\");\r\n    c(node.quasi, st, \"Expression\");\r\n  };\r\n  base.ClassDeclaration = base.ClassExpression = function (node, st, c) { return c(node, st, \"Class\"); };\r\n  base.Class = function (node, st, c) {\r\n    if (node.id) { c(node.id, st, \"Pattern\"); }\r\n    if (node.superClass) { c(node.superClass, st, \"Expression\"); }\r\n    c(node.body, st);\r\n  };\r\n  base.ClassBody = function (node, st, c) {\r\n    for (var i = 0, list = node.body; i < list.length; i += 1)\r\n      {\r\n      var elt = list[i];\r\n\r\n      c(elt, st);\r\n    }\r\n  };\r\n  base.MethodDefinition = base.PropertyDefinition = base.Property = function (node, st, c) {\r\n    if (node.computed) { c(node.key, st, \"Expression\"); }\r\n    if (node.value) { c(node.value, st, \"Expression\"); }\r\n  };\r\n\r\n  exports.ancestor = ancestor;\r\n  exports.base = base;\r\n  exports.findNodeAfter = findNodeAfter;\r\n  exports.findNodeAround = findNodeAround;\r\n  exports.findNodeAt = findNodeAt;\r\n  exports.findNodeBefore = findNodeBefore;\r\n  exports.full = full;\r\n  exports.fullAncestor = fullAncestor;\r\n  exports.make = make;\r\n  exports.recursive = recursive;\r\n  exports.simple = simple;\r\n\r\n}));\r\n"
  },
  "203": {
    "metadata": {
      "scriptId": "203",
      "url": "node:internal/repl/utils",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 752,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "98b7e39753f0e43170ea3fd605cf89db43dc248247d363875b6052fffb614555",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 25987,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/repl/utils"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeMap,\r\n  Boolean,\r\n  FunctionPrototypeBind,\r\n  MathMin,\r\n  RegExpPrototypeExec,\r\n  SafeSet,\r\n  SafeStringIterator,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeLastIndexOf,\r\n  StringPrototypeReplaceAll,\r\n  StringPrototypeSlice,\r\n  StringPrototypeStartsWith,\r\n  StringPrototypeToLowerCase,\r\n  StringPrototypeTrim,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst { tokTypes: tt, Parser: AcornParser } =\r\n  require('internal/deps/acorn/acorn/dist/acorn');\r\n\r\nconst { sendInspectorCommand } = require('internal/util/inspector');\r\n\r\nconst {\r\n  ERR_INSPECTOR_NOT_AVAILABLE,\r\n} = require('internal/errors').codes;\r\n\r\nconst {\r\n  clearLine,\r\n  clearScreenDown,\r\n  cursorTo,\r\n  moveCursor,\r\n} = require('internal/readline/callbacks');\r\n\r\nconst {\r\n  commonPrefix,\r\n  kSubstringSearch,\r\n} = require('internal/readline/utils');\r\n\r\nconst {\r\n  getStringWidth,\r\n  inspect,\r\n} = require('internal/util/inspect');\r\n\r\nlet debug = require('internal/util/debuglog').debuglog('repl', (fn) => {\r\n  debug = fn;\r\n});\r\n\r\nconst previewOptions = {\r\n  colors: false,\r\n  depth: 1,\r\n  showHidden: false,\r\n};\r\n\r\nconst REPL_MODE_STRICT = Symbol('repl-strict');\r\n\r\n// If the error is that we've unexpectedly ended the input,\r\n// then let the user try to recover by adding more input.\r\n// Note: `e` (the original exception) is not used by the current implementation,\r\n// but may be needed in the future.\r\nfunction isRecoverableError(e, code) {\r\n  // For similar reasons as `defaultEval`, wrap expressions starting with a\r\n  // curly brace with parenthesis.  Note: only the open parenthesis is added\r\n  // here as the point is to test for potentially valid but incomplete\r\n  // expressions.\r\n  if (RegExpPrototypeExec(/^\\s*\\{/, code) !== null &&\r\n      isRecoverableError(e, `(${code}`))\r\n    return true;\r\n\r\n  let recoverable = false;\r\n\r\n  // Determine if the point of any error raised is at the end of the input.\r\n  // There are two cases to consider:\r\n  //\r\n  //   1.  Any error raised after we have encountered the 'eof' token.\r\n  //       This prevents us from declaring partial tokens (like '2e') as\r\n  //       recoverable.\r\n  //\r\n  //   2.  Three cases where tokens can legally span lines.  This is\r\n  //       template, comment, and strings with a backslash at the end of\r\n  //       the line, indicating a continuation.  Note that we need to look\r\n  //       for the specific errors of 'unterminated' kind (not, for example,\r\n  //       a syntax error in a ${} expression in a template), and the only\r\n  //       way to do that currently is to look at the message.  Should Acorn\r\n  //       change these messages in the future, this will lead to a test\r\n  //       failure, indicating that this code needs to be updated.\r\n  //\r\n  const RecoverableParser = AcornParser\r\n    .extend(\r\n      (Parser) => {\r\n        return class extends Parser {\r\n          // eslint-disable-next-line no-useless-constructor\r\n          constructor(options, input, startPos) {\r\n            super(options, input, startPos);\r\n          }\r\n          nextToken() {\r\n            super.nextToken();\r\n            if (this.type === tt.eof)\r\n              recoverable = true;\r\n          }\r\n          raise(pos, message) {\r\n            switch (message) {\r\n              case 'Unterminated template':\r\n              case 'Unterminated comment':\r\n                recoverable = true;\r\n                break;\r\n\r\n              case 'Unterminated string constant': {\r\n                const token = StringPrototypeSlice(this.input,\r\n                                                   this.lastTokStart, this.pos);\r\n                // See https://www.ecma-international.org/ecma-262/#sec-line-terminators\r\n                if (RegExpPrototypeExec(/\\\\(?:\\r\\n?|\\n|\\u2028|\\u2029)$/,\r\n                                        token) !== null) {\r\n                  recoverable = true;\r\n                }\r\n              }\r\n            }\r\n            super.raise(pos, message);\r\n          }\r\n        };\r\n      },\r\n    );\r\n\r\n  // Try to parse the code with acorn.  If the parse fails, ignore the acorn\r\n  // error and return the recoverable status.\r\n  try {\r\n    RecoverableParser.parse(code, { ecmaVersion: 'latest' });\r\n\r\n    // Odd case: the underlying JS engine (V8, Chakra) rejected this input\r\n    // but Acorn detected no issue.  Presume that additional text won't\r\n    // address this issue.\r\n    return false;\r\n  } catch {\r\n    return recoverable;\r\n  }\r\n}\r\n\r\nfunction setupPreview(repl, contextSymbol, bufferSymbol, active) {\r\n  // Simple terminals can't handle previews.\r\n  if (process.env.TERM === 'dumb' || !active) {\r\n    return { showPreview() {}, clearPreview() {} };\r\n  }\r\n\r\n  let inputPreview = null;\r\n\r\n  let previewCompletionCounter = 0;\r\n  let completionPreview = null;\r\n\r\n  let hasCompletions = false;\r\n\r\n  let wrapped = false;\r\n\r\n  let escaped = null;\r\n\r\n  function getPreviewPos() {\r\n    const displayPos = repl._getDisplayPos(`${repl.getPrompt()}${repl.line}`);\r\n    const cursorPos = repl.line.length !== repl.cursor ?\r\n      repl.getCursorPos() :\r\n      displayPos;\r\n    return { displayPos, cursorPos };\r\n  }\r\n\r\n  function isCursorAtInputEnd() {\r\n    const { cursorPos, displayPos } = getPreviewPos();\r\n    return cursorPos.rows === displayPos.rows &&\r\n           cursorPos.cols === displayPos.cols;\r\n  }\r\n\r\n  const clearPreview = (key) => {\r\n    if (inputPreview !== null) {\r\n      const { displayPos, cursorPos } = getPreviewPos();\r\n      const rows = displayPos.rows - cursorPos.rows + 1;\r\n      moveCursor(repl.output, 0, rows);\r\n      clearLine(repl.output);\r\n      moveCursor(repl.output, 0, -rows);\r\n      inputPreview = null;\r\n    }\r\n    if (completionPreview !== null) {\r\n      // Prevent cursor moves if not necessary!\r\n      const move = repl.line.length !== repl.cursor;\r\n      let pos, rows;\r\n      if (move) {\r\n        pos = getPreviewPos();\r\n        cursorTo(repl.output, pos.displayPos.cols);\r\n        rows = pos.displayPos.rows - pos.cursorPos.rows;\r\n        moveCursor(repl.output, 0, rows);\r\n      }\r\n      const totalLine = `${repl.getPrompt()}${repl.line}${completionPreview}`;\r\n      const newPos = repl._getDisplayPos(totalLine);\r\n      // Minimize work for the terminal. It is enough to clear the right part of\r\n      // the current line in case the preview is visible on a single line.\r\n      if (newPos.rows === 0 || (pos && pos.displayPos.rows === newPos.rows)) {\r\n        clearLine(repl.output, 1);\r\n      } else {\r\n        clearScreenDown(repl.output);\r\n      }\r\n      if (move) {\r\n        cursorTo(repl.output, pos.cursorPos.cols);\r\n        moveCursor(repl.output, 0, -rows);\r\n      }\r\n      if (!key.ctrl && !key.shift) {\r\n        if (key.name === 'escape') {\r\n          if (escaped === null && key.meta) {\r\n            escaped = repl.line;\r\n          }\r\n        } else if ((key.name === 'return' || key.name === 'enter') &&\r\n                   !key.meta &&\r\n                   escaped !== repl.line &&\r\n                   isCursorAtInputEnd()) {\r\n          repl._insertString(completionPreview);\r\n        }\r\n      }\r\n      completionPreview = null;\r\n    }\r\n    if (escaped !== repl.line) {\r\n      escaped = null;\r\n    }\r\n  };\r\n\r\n  function showCompletionPreview(line, insertPreview) {\r\n    previewCompletionCounter++;\r\n\r\n    const count = previewCompletionCounter;\r\n\r\n    repl.completer(line, (error, data) => {\r\n      // Tab completion might be async and the result might already be outdated.\r\n      if (count !== previewCompletionCounter) {\r\n        return;\r\n      }\r\n\r\n      if (error) {\r\n        debug('Error while generating completion preview', error);\r\n        return;\r\n      }\r\n\r\n      // Result and the text that was completed.\r\n      const { 0: rawCompletions, 1: completeOn } = data;\r\n\r\n      if (!rawCompletions || rawCompletions.length === 0) {\r\n        return;\r\n      }\r\n\r\n      hasCompletions = true;\r\n\r\n      // If there is a common prefix to all matches, then apply that portion.\r\n      const completions = ArrayPrototypeFilter(rawCompletions, Boolean);\r\n      const prefix = commonPrefix(completions);\r\n\r\n      // No common prefix found.\r\n      if (prefix.length <= completeOn.length) {\r\n        return;\r\n      }\r\n\r\n      const suffix = StringPrototypeSlice(prefix, completeOn.length);\r\n\r\n      if (insertPreview) {\r\n        repl._insertString(suffix);\r\n        return;\r\n      }\r\n\r\n      completionPreview = suffix;\r\n\r\n      const result = repl.useColors ?\r\n        `\\u001b[90m${suffix}\\u001b[39m` :\r\n        ` // ${suffix}`;\r\n\r\n      const { cursorPos, displayPos } = getPreviewPos();\r\n      if (repl.line.length !== repl.cursor) {\r\n        cursorTo(repl.output, displayPos.cols);\r\n        moveCursor(repl.output, 0, displayPos.rows - cursorPos.rows);\r\n      }\r\n      repl.output.write(result);\r\n      cursorTo(repl.output, cursorPos.cols);\r\n      const totalLine = `${repl.getPrompt()}${repl.line}${suffix}`;\r\n      const newPos = repl._getDisplayPos(totalLine);\r\n      const rows = newPos.rows - cursorPos.rows - (newPos.cols === 0 ? 1 : 0);\r\n      moveCursor(repl.output, 0, -rows);\r\n    });\r\n  }\r\n\r\n  function isInStrictMode(repl) {\r\n    return repl.replMode === REPL_MODE_STRICT || ArrayPrototypeIncludes(\r\n      ArrayPrototypeMap(process.execArgv,\r\n                        (e) => StringPrototypeReplaceAll(\r\n                          StringPrototypeToLowerCase(e),\r\n                          '_',\r\n                          '-',\r\n                        )),\r\n      '--use-strict');\r\n  }\r\n\r\n  // This returns a code preview for arbitrary input code.\r\n  function getInputPreview(input, callback) {\r\n    // For similar reasons as `defaultEval`, wrap expressions starting with a\r\n    // curly brace with parenthesis.\r\n    if (StringPrototypeStartsWith(input, '{') &&\r\n        !StringPrototypeEndsWith(input, ';') && !wrapped) {\r\n      input = `(${input})`;\r\n      wrapped = true;\r\n    }\r\n    sendInspectorCommand((session) => {\r\n      session.post('Runtime.evaluate', {\r\n        expression: input,\r\n        throwOnSideEffect: true,\r\n        timeout: 333,\r\n        contextId: repl[contextSymbol],\r\n      }, (error, preview) => {\r\n        if (error) {\r\n          callback(error);\r\n          return;\r\n        }\r\n        const { result } = preview;\r\n        if (result.value !== undefined) {\r\n          callback(null, inspect(result.value, previewOptions));\r\n        // Ignore EvalErrors, SyntaxErrors and ReferenceErrors. It is not clear\r\n        // where they came from and if they are recoverable or not. Other errors\r\n        // may be inspected.\r\n        } else if (preview.exceptionDetails &&\r\n                   (result.className === 'EvalError' ||\r\n                    result.className === 'SyntaxError' ||\r\n                    // Report ReferenceError in case the strict mode is active\r\n                    // for input that has no completions.\r\n                    (result.className === 'ReferenceError' &&\r\n                     (hasCompletions || !isInStrictMode(repl))))) {\r\n          callback(null, null);\r\n        } else if (result.objectId) {\r\n          // The writer options might change and have influence on the inspect\r\n          // output. The user might change e.g., `showProxy`, `getters` or\r\n          // `showHidden`. Use `inspect` instead of `JSON.stringify` to keep\r\n          // `Infinity` and similar intact.\r\n          const inspectOptions = inspect({\r\n            ...repl.writer.options,\r\n            colors: false,\r\n            depth: 1,\r\n            compact: true,\r\n            breakLength: Infinity,\r\n          }, previewOptions);\r\n          session.post('Runtime.callFunctionOn', {\r\n            functionDeclaration:\r\n              `(v) =>\r\n                    Reflect\r\n                    .getOwnPropertyDescriptor(globalThis, 'util')\r\n                    .get().inspect(v, ${inspectOptions})`,\r\n            objectId: result.objectId,\r\n            arguments: [result],\r\n          }, (error, preview) => {\r\n            if (error) {\r\n              callback(error);\r\n            } else {\r\n              callback(null, preview.result.value);\r\n            }\r\n          });\r\n        } else {\r\n          // Either not serializable or undefined.\r\n          callback(null, result.unserializableValue || result.type);\r\n        }\r\n      });\r\n    }, () => callback(new ERR_INSPECTOR_NOT_AVAILABLE()));\r\n  }\r\n\r\n  const showPreview = (showCompletion = true) => {\r\n    // Prevent duplicated previews after a refresh.\r\n    if (inputPreview !== null || !repl.isCompletionEnabled || !process.features.inspector) {\r\n      return;\r\n    }\r\n\r\n    const line = StringPrototypeTrim(repl.line);\r\n\r\n    // Do not preview in case the line only contains whitespace.\r\n    if (line === '') {\r\n      return;\r\n    }\r\n\r\n    hasCompletions = false;\r\n\r\n    // Add the autocompletion preview.\r\n    if (showCompletion) {\r\n      const insertPreview = false;\r\n      showCompletionPreview(repl.line, insertPreview);\r\n    }\r\n\r\n    // Do not preview if the command is buffered.\r\n    if (repl[bufferSymbol]) {\r\n      return;\r\n    }\r\n\r\n    const inputPreviewCallback = (error, inspected) => {\r\n      if (inspected == null) {\r\n        return;\r\n      }\r\n\r\n      wrapped = false;\r\n\r\n      // Ignore the output if the value is identical to the current line.\r\n      if (line === inspected) {\r\n        return;\r\n      }\r\n\r\n      if (error) {\r\n        debug('Error while generating preview', error);\r\n        return;\r\n      }\r\n      // Do not preview `undefined` if colors are deactivated or explicitly\r\n      // requested.\r\n      if (inspected === 'undefined' &&\r\n          (!repl.useColors || repl.ignoreUndefined)) {\r\n        return;\r\n      }\r\n\r\n      inputPreview = inspected;\r\n\r\n      // Limit the output to maximum 250 characters. Otherwise it becomes a)\r\n      // difficult to read and b) non terminal REPLs would visualize the whole\r\n      // output.\r\n      let maxColumns = MathMin(repl.columns, 250);\r\n\r\n      // Support unicode characters of width other than one by checking the\r\n      // actual width.\r\n      if (inspected.length * 2 >= maxColumns &&\r\n          getStringWidth(inspected) > maxColumns) {\r\n        maxColumns -= 4 + (repl.useColors ? 0 : 3);\r\n        let res = '';\r\n        for (const char of new SafeStringIterator(inspected)) {\r\n          maxColumns -= getStringWidth(char);\r\n          if (maxColumns < 0)\r\n            break;\r\n          res += char;\r\n        }\r\n        inspected = `${res}...`;\r\n      }\r\n\r\n      // Line breaks are very rare and probably only occur in case of error\r\n      // messages with line breaks.\r\n      const lineBreakPos = StringPrototypeIndexOf(inspected, '\\n');\r\n      if (lineBreakPos !== -1) {\r\n        inspected = `${StringPrototypeSlice(inspected, 0, lineBreakPos)}`;\r\n      }\r\n\r\n      const result = repl.useColors ?\r\n        `\\u001b[90m${inspected}\\u001b[39m` :\r\n        `// ${inspected}`;\r\n\r\n      const { cursorPos, displayPos } = getPreviewPos();\r\n      const rows = displayPos.rows - cursorPos.rows;\r\n      moveCursor(repl.output, 0, rows);\r\n      repl.output.write(`\\n${result}`);\r\n      cursorTo(repl.output, cursorPos.cols);\r\n      moveCursor(repl.output, 0, -rows - 1);\r\n    };\r\n\r\n    let previewLine = line;\r\n\r\n    if (completionPreview !== null &&\r\n        isCursorAtInputEnd() &&\r\n        escaped !== repl.line) {\r\n      previewLine += completionPreview;\r\n    }\r\n\r\n    getInputPreview(previewLine, inputPreviewCallback);\r\n    if (wrapped) {\r\n      getInputPreview(previewLine, inputPreviewCallback);\r\n    }\r\n    wrapped = false;\r\n  };\r\n\r\n  // -------------------------------------------------------------------------//\r\n  // Replace multiple interface functions. This is required to fully support  //\r\n  // previews without changing readlines behavior.                            //\r\n  // -------------------------------------------------------------------------//\r\n\r\n  // Refresh prints the whole screen again and the preview will be removed\r\n  // during that procedure. Print the preview again. This also makes sure\r\n  // the preview is always correct after resizing the terminal window.\r\n  const originalRefresh = FunctionPrototypeBind(repl._refreshLine, repl);\r\n  repl._refreshLine = () => {\r\n    inputPreview = null;\r\n    originalRefresh();\r\n    showPreview();\r\n  };\r\n\r\n  let insertCompletionPreview = true;\r\n  // Insert the longest common suffix of the current input in case the user\r\n  // moves to the right while already being at the current input end.\r\n  const originalMoveCursor = FunctionPrototypeBind(repl._moveCursor, repl);\r\n  repl._moveCursor = (dx) => {\r\n    const currentCursor = repl.cursor;\r\n    originalMoveCursor(dx);\r\n    if (currentCursor + dx > repl.line.length &&\r\n        typeof repl.completer === 'function' &&\r\n        insertCompletionPreview) {\r\n      const insertPreview = true;\r\n      showCompletionPreview(repl.line, insertPreview);\r\n    }\r\n  };\r\n\r\n  // This is the only function that interferes with the completion insertion.\r\n  // Monkey patch it to prevent inserting the completion when it shouldn't be.\r\n  const originalClearLine = FunctionPrototypeBind(repl.clearLine, repl);\r\n  repl.clearLine = () => {\r\n    insertCompletionPreview = false;\r\n    originalClearLine();\r\n    insertCompletionPreview = true;\r\n  };\r\n\r\n  return { showPreview, clearPreview };\r\n}\r\n\r\nfunction setupReverseSearch(repl) {\r\n  // Simple terminals can't use reverse search.\r\n  if (process.env.TERM === 'dumb') {\r\n    return { reverseSearch() { return false; } };\r\n  }\r\n\r\n  const alreadyMatched = new SafeSet();\r\n  const labels = {\r\n    r: 'bck-i-search: ',\r\n    s: 'fwd-i-search: ',\r\n  };\r\n  let isInReverseSearch = false;\r\n  let historyIndex = -1;\r\n  let input = '';\r\n  let cursor = -1;\r\n  let dir = 'r';\r\n  let lastMatch = -1;\r\n  let lastCursor = -1;\r\n  let promptPos;\r\n\r\n  function checkAndSetDirectionKey(keyName) {\r\n    if (!labels[keyName]) {\r\n      return false;\r\n    }\r\n    if (dir !== keyName) {\r\n      // Reset the already matched set in case the direction is changed. That\r\n      // way it's possible to find those entries again.\r\n      alreadyMatched.clear();\r\n      dir = keyName;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function goToNextHistoryIndex() {\r\n    // Ignore this entry for further searches and continue to the next\r\n    // history entry.\r\n    alreadyMatched.add(repl.history[historyIndex]);\r\n    historyIndex += dir === 'r' ? 1 : -1;\r\n    cursor = -1;\r\n  }\r\n\r\n  function search() {\r\n    // Just print an empty line in case the user removed the search parameter.\r\n    if (input === '') {\r\n      print(repl.line, `${labels[dir]}_`);\r\n      return;\r\n    }\r\n    // Fix the bounds in case the direction has changed in the meanwhile.\r\n    if (dir === 'r') {\r\n      if (historyIndex < 0) {\r\n        historyIndex = 0;\r\n      }\r\n    } else if (historyIndex >= repl.history.length) {\r\n      historyIndex = repl.history.length - 1;\r\n    }\r\n    // Check the history entries until a match is found.\r\n    while (historyIndex >= 0 && historyIndex < repl.history.length) {\r\n      let entry = repl.history[historyIndex];\r\n      // Visualize all potential matches only once.\r\n      if (alreadyMatched.has(entry)) {\r\n        historyIndex += dir === 'r' ? 1 : -1;\r\n        continue;\r\n      }\r\n      // Match the next entry either from the start or from the end, depending\r\n      // on the current direction.\r\n      if (dir === 'r') {\r\n        // Update the cursor in case it's necessary.\r\n        if (cursor === -1) {\r\n          cursor = entry.length;\r\n        }\r\n        cursor = StringPrototypeLastIndexOf(entry, input, cursor - 1);\r\n      } else {\r\n        cursor = StringPrototypeIndexOf(entry, input, cursor + 1);\r\n      }\r\n      // Match not found.\r\n      if (cursor === -1) {\r\n        goToNextHistoryIndex();\r\n      // Match found.\r\n      } else {\r\n        if (repl.useColors) {\r\n          const start = StringPrototypeSlice(entry, 0, cursor);\r\n          const end = StringPrototypeSlice(entry, cursor + input.length);\r\n          entry = `${start}\\x1B[4m${input}\\x1B[24m${end}`;\r\n        }\r\n        print(entry, `${labels[dir]}${input}_`, cursor);\r\n        lastMatch = historyIndex;\r\n        lastCursor = cursor;\r\n        // Explicitly go to the next history item in case no further matches are\r\n        // possible with the current entry.\r\n        if ((dir === 'r' && cursor === 0) ||\r\n            (dir === 's' && entry.length === cursor + input.length)) {\r\n          goToNextHistoryIndex();\r\n        }\r\n        return;\r\n      }\r\n    }\r\n    print(repl.line, `failed-${labels[dir]}${input}_`);\r\n  }\r\n\r\n  function print(outputLine, inputLine, cursor = repl.cursor) {\r\n    // TODO(BridgeAR): Resizing the terminal window hides the overlay. To fix\r\n    // that, readline must be aware of this information. It's probably best to\r\n    // add a couple of properties to readline that allow to do the following:\r\n    // 1. Add arbitrary data to the end of the current line while not counting\r\n    //    towards the line. This would be useful for the completion previews.\r\n    // 2. Add arbitrary extra lines that do not count towards the regular line.\r\n    //    This would be useful for both, the input preview and the reverse\r\n    //    search. It might be combined with the first part?\r\n    // 3. Add arbitrary input that is \"on top\" of the current line. That is\r\n    //    useful for the reverse search.\r\n    // 4. To trigger the line refresh, functions should be used to pass through\r\n    //    the information. Alternatively, getters and setters could be used.\r\n    //    That might even be more elegant.\r\n    // The data would then be accounted for when calling `_refreshLine()`.\r\n    // This function would then look similar to:\r\n    //   repl.overlay(outputLine);\r\n    //   repl.addTrailingLine(inputLine);\r\n    //   repl.setCursor(cursor);\r\n    // More potential improvements: use something similar to stream.cork().\r\n    // Multiple cursor moves on the same tick could be prevented in case all\r\n    // writes from the same tick are combined and the cursor is moved at the\r\n    // tick end instead of after each operation.\r\n    let rows = 0;\r\n    if (lastMatch !== -1) {\r\n      const line = StringPrototypeSlice(repl.history[lastMatch], 0, lastCursor);\r\n      rows = repl._getDisplayPos(`${repl.getPrompt()}${line}`).rows;\r\n      cursorTo(repl.output, promptPos.cols);\r\n    } else if (isInReverseSearch && repl.line !== '') {\r\n      rows = repl.getCursorPos().rows;\r\n      cursorTo(repl.output, promptPos.cols);\r\n    }\r\n    if (rows !== 0)\r\n      moveCursor(repl.output, 0, -rows);\r\n\r\n    if (isInReverseSearch) {\r\n      clearScreenDown(repl.output);\r\n      repl.output.write(`${outputLine}\\n${inputLine}`);\r\n    } else {\r\n      repl.output.write(`\\n${inputLine}`);\r\n    }\r\n\r\n    lastMatch = -1;\r\n\r\n    // To know exactly how many rows we have to move the cursor back we need the\r\n    // cursor rows, the output rows and the input rows.\r\n    const prompt = repl.getPrompt();\r\n    const cursorLine = prompt + StringPrototypeSlice(outputLine, 0, cursor);\r\n    const cursorPos = repl._getDisplayPos(cursorLine);\r\n    const outputPos = repl._getDisplayPos(`${prompt}${outputLine}`);\r\n    const inputPos = repl._getDisplayPos(inputLine);\r\n    const inputRows = inputPos.rows - (inputPos.cols === 0 ? 1 : 0);\r\n\r\n    rows = -1 - inputRows - (outputPos.rows - cursorPos.rows);\r\n\r\n    moveCursor(repl.output, 0, rows);\r\n    cursorTo(repl.output, cursorPos.cols);\r\n  }\r\n\r\n  function reset(string) {\r\n    isInReverseSearch = string !== undefined;\r\n\r\n    // In case the reverse search ends and a history entry is found, reset the\r\n    // line to the found entry.\r\n    if (!isInReverseSearch) {\r\n      if (lastMatch !== -1) {\r\n        repl.line = repl.history[lastMatch];\r\n        repl.cursor = lastCursor;\r\n        repl.historyIndex = lastMatch;\r\n      }\r\n\r\n      lastMatch = -1;\r\n\r\n      // Clear screen and write the current repl.line before exiting.\r\n      cursorTo(repl.output, promptPos.cols);\r\n      moveCursor(repl.output, 0, promptPos.rows);\r\n      clearScreenDown(repl.output);\r\n      if (repl.line !== '') {\r\n        repl.output.write(repl.line);\r\n        if (repl.line.length !== repl.cursor) {\r\n          const { cols, rows } = repl.getCursorPos();\r\n          cursorTo(repl.output, cols);\r\n          moveCursor(repl.output, 0, rows);\r\n        }\r\n      }\r\n    }\r\n\r\n    input = string || '';\r\n    cursor = -1;\r\n    historyIndex = repl.historyIndex;\r\n    alreadyMatched.clear();\r\n  }\r\n\r\n  function reverseSearch(string, key) {\r\n    if (!isInReverseSearch) {\r\n      if (key.ctrl && checkAndSetDirectionKey(key.name)) {\r\n        historyIndex = repl.historyIndex;\r\n        promptPos = repl._getDisplayPos(`${repl.getPrompt()}`);\r\n        print(repl.line, `${labels[dir]}_`);\r\n        isInReverseSearch = true;\r\n      }\r\n    } else if (key.ctrl && checkAndSetDirectionKey(key.name)) {\r\n      search();\r\n    } else if (key.name === 'backspace' ||\r\n        (key.ctrl && (key.name === 'h' || key.name === 'w'))) {\r\n      reset(StringPrototypeSlice(input, 0, input.length - 1));\r\n      search();\r\n      // Special handle <ctrl> + c and escape. Those should only cancel the\r\n      // reverse search. The original line is visible afterwards again.\r\n    } else if ((key.ctrl && key.name === 'c') || key.name === 'escape') {\r\n      lastMatch = -1;\r\n      reset();\r\n      return true;\r\n      // End search in case either enter is pressed or if any non-reverse-search\r\n      // key (combination) is pressed.\r\n    } else if (key.ctrl ||\r\n               key.meta ||\r\n               key.name === 'return' ||\r\n               key.name === 'enter' ||\r\n               typeof string !== 'string' ||\r\n               string === '') {\r\n      reset();\r\n      repl[kSubstringSearch] = '';\r\n    } else {\r\n      reset(`${input}${string}`);\r\n      search();\r\n    }\r\n    return isInReverseSearch;\r\n  }\r\n\r\n  return { reverseSearch };\r\n}\r\n\r\nmodule.exports = {\r\n  REPL_MODE_SLOPPY: Symbol('repl-sloppy'),\r\n  REPL_MODE_STRICT,\r\n  isRecoverableError,\r\n  kStandaloneREPL: Symbol('kStandaloneREPL'),\r\n  setupPreview,\r\n  setupReverseSearch,\r\n};\r\n"
  },
  "204": {
    "metadata": {
      "scriptId": "204",
      "url": "node:internal/repl/history",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 182,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "d9a809748ab6ae3828078bc44647c2d18305a8a6a0a7c14245ab55f7ff92ac94",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4673,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/repl/history"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeJoin,\r\n  Boolean,\r\n  FunctionPrototype,\r\n  RegExpPrototypeSymbolSplit,\r\n  StringPrototypeTrim,\r\n} = primordials;\r\n\r\nconst { Interface } = require('readline');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst os = require('os');\r\nlet debug = require('internal/util/debuglog').debuglog('repl', (fn) => {\r\n  debug = fn;\r\n});\r\nconst permission = require('internal/process/permission');\r\nconst { clearTimeout, setTimeout } = require('timers');\r\n\r\nconst noop = FunctionPrototype;\r\n\r\n// XXX(chrisdickinson): The 15ms debounce value is somewhat arbitrary.\r\n// The debounce is to guard against code pasted into the REPL.\r\nconst kDebounceHistoryMS = 15;\r\n\r\nmodule.exports = setupHistory;\r\n\r\nfunction _writeToOutput(repl, message) {\r\n  repl._writeToOutput(message);\r\n  repl._refreshLine();\r\n}\r\n\r\nfunction setupHistory(repl, historyPath, ready) {\r\n  // Empty string disables persistent history\r\n  if (typeof historyPath === 'string')\r\n    historyPath = StringPrototypeTrim(historyPath);\r\n\r\n  if (historyPath === '') {\r\n    repl._historyPrev = _replHistoryMessage;\r\n    return ready(null, repl);\r\n  }\r\n\r\n  if (!historyPath) {\r\n    try {\r\n      historyPath = path.join(os.homedir(), '.node_repl_history');\r\n    } catch (err) {\r\n      _writeToOutput(repl, '\\nError: Could not get the home directory.\\n' +\r\n        'REPL session history will not be persisted.\\n');\r\n\r\n      debug(err.stack);\r\n      repl._historyPrev = _replHistoryMessage;\r\n      return ready(null, repl);\r\n    }\r\n  }\r\n\r\n  if (permission.isEnabled() && permission.has('fs.write', historyPath) === false) {\r\n    _writeToOutput(repl, '\\nAccess to FileSystemWrite is restricted.\\n' +\r\n      'REPL session history will not be persisted.\\n');\r\n    return ready(null, repl);\r\n  }\r\n\r\n  let timer = null;\r\n  let writing = false;\r\n  let pending = false;\r\n  repl.pause();\r\n  // History files are conventionally not readable by others:\r\n  // https://github.com/nodejs/node/issues/3392\r\n  // https://github.com/nodejs/node/pull/3394\r\n  fs.open(historyPath, 'a+', 0o0600, oninit);\r\n\r\n  function oninit(err, hnd) {\r\n    if (err) {\r\n      // Cannot open history file.\r\n      // Don't crash, just don't persist history.\r\n      _writeToOutput(repl, '\\nError: Could not open history file.\\n' +\r\n        'REPL session history will not be persisted.\\n');\r\n      debug(err.stack);\r\n\r\n      repl._historyPrev = _replHistoryMessage;\r\n      repl.resume();\r\n      return ready(null, repl);\r\n    }\r\n    fs.close(hnd, onclose);\r\n  }\r\n\r\n  function onclose(err) {\r\n    if (err) {\r\n      return ready(err);\r\n    }\r\n    fs.readFile(historyPath, 'utf8', onread);\r\n  }\r\n\r\n  function onread(err, data) {\r\n    if (err) {\r\n      return ready(err);\r\n    }\r\n\r\n    if (data) {\r\n      repl.history = RegExpPrototypeSymbolSplit(/[\\n\\r]+/, data, repl.historySize);\r\n    } else {\r\n      repl.history = [];\r\n    }\r\n\r\n    fs.open(historyPath, 'r+', onhandle);\r\n  }\r\n\r\n  function onhandle(err, hnd) {\r\n    if (err) {\r\n      return ready(err);\r\n    }\r\n    fs.ftruncate(hnd, 0, (err) => {\r\n      repl._historyHandle = hnd;\r\n      repl.on('line', online);\r\n      repl.once('exit', onexit);\r\n\r\n      // Reading the file data out erases it\r\n      repl.once('flushHistory', function() {\r\n        repl.resume();\r\n        ready(null, repl);\r\n      });\r\n      flushHistory();\r\n    });\r\n  }\r\n\r\n  // ------ history listeners ------\r\n  function online(line) {\r\n    repl._flushing = true;\r\n\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n    }\r\n\r\n    timer = setTimeout(flushHistory, kDebounceHistoryMS);\r\n  }\r\n\r\n  function flushHistory() {\r\n    timer = null;\r\n    if (writing) {\r\n      pending = true;\r\n      return;\r\n    }\r\n    writing = true;\r\n    const historyData = ArrayPrototypeJoin(repl.history, os.EOL);\r\n    fs.write(repl._historyHandle, historyData, 0, 'utf8', onwritten);\r\n  }\r\n\r\n  function onwritten(err, data) {\r\n    writing = false;\r\n    if (pending) {\r\n      pending = false;\r\n      online();\r\n    } else {\r\n      repl._flushing = Boolean(timer);\r\n      if (!repl._flushing) {\r\n        repl.emit('flushHistory');\r\n      }\r\n    }\r\n  }\r\n\r\n  function onexit() {\r\n    if (repl._flushing) {\r\n      repl.once('flushHistory', onexit);\r\n      return;\r\n    }\r\n    repl.off('line', online);\r\n    fs.close(repl._historyHandle, noop);\r\n  }\r\n}\r\n\r\nfunction _replHistoryMessage() {\r\n  if (this.history.length === 0) {\r\n    _writeToOutput(\r\n      this,\r\n      '\\nPersistent history support disabled. ' +\r\n      'Set the NODE_REPL_HISTORY environment\\nvariable to ' +\r\n      'a valid, user-writable path to enable.\\n',\r\n    );\r\n  }\r\n  this._historyPrev = Interface.prototype._historyPrev;\r\n  return this._historyPrev();\r\n}\r\n"
  },
  "205": {
    "metadata": {
      "scriptId": "205",
      "url": "node:internal/modules/esm/formats",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 66,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "2c3a76054ab4e8183bcc99627aca3e2e0c98707d3236bd0317cc001820d53aa5",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1868,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/modules/esm/formats"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  RegExpPrototypeExec,\r\n} = primordials;\r\n\r\nconst { getOptionValue } = require('internal/options');\r\nconst { getValidatedPath } = require('internal/fs/utils');\r\nconst pathModule = require('path');\r\nconst fsBindings = internalBinding('fs');\r\nconst { fs: fsConstants } = internalBinding('constants');\r\n\r\nconst experimentalWasmModules = getOptionValue('--experimental-wasm-modules');\r\n\r\nconst extensionFormatMap = {\r\n  '__proto__': null,\r\n  '.cjs': 'commonjs',\r\n  '.js': 'module',\r\n  '.json': 'json',\r\n  '.mjs': 'module',\r\n};\r\n\r\nif (experimentalWasmModules) {\r\n  extensionFormatMap['.wasm'] = 'wasm';\r\n}\r\n\r\n/**\r\n * @param {string} mime\r\n * @returns {string | null}\r\n */\r\nfunction mimeToFormat(mime) {\r\n  if (\r\n    RegExpPrototypeExec(\r\n      /^\\s*(text|application)\\/javascript\\s*(;\\s*charset=utf-?8\\s*)?$/i,\r\n      mime,\r\n    ) !== null\r\n  ) { return 'module'; }\r\n  if (mime === 'application/json') { return 'json'; }\r\n  if (experimentalWasmModules && mime === 'application/wasm') { return 'wasm'; }\r\n  return null;\r\n}\r\n\r\n/**\r\n * For extensionless files in a `module` package scope, or a default `module` scope enabled by the\r\n * `--experimental-default-type` flag, we check the file contents to disambiguate between ES module JavaScript and Wasm.\r\n * We do this by taking advantage of the fact that all Wasm files start with the header `0x00 0x61 0x73 0x6d` (`_asm`).\r\n * @param {URL} url\r\n */\r\nfunction getFormatOfExtensionlessFile(url) {\r\n  if (!experimentalWasmModules) { return 'module'; }\r\n\r\n  const path = pathModule.toNamespacedPath(getValidatedPath(url));\r\n\r\n  switch (fsBindings.getFormatOfExtensionlessFile(path)) {\r\n    case fsConstants.EXTENSIONLESS_FORMAT_WASM:\r\n      return 'wasm';\r\n    default:\r\n      return 'module';\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  extensionFormatMap,\r\n  getFormatOfExtensionlessFile,\r\n  mimeToFormat,\r\n};\r\n"
  },
  "206": {
    "metadata": {
      "scriptId": "206",
      "url": "evalmachine.<anonymous>",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 0,
      "endColumn": 38,
      "executionContextId": 3,
      "hash": "21f490174dd06ee6ed0c729ae45b963c3d87b8d15ada605bd741ffc2c51ed58b",
      "executionContextAuxData": {
        "isDefault": false
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 38,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "runInContext",
            "scriptId": "72",
            "url": "node:vm",
            "lineNumber": 147,
            "columnNumber": 11
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "evalmachine.<anonymous>"
    },
    "source": "Object.getOwnPropertyNames(globalThis)"
  },
  "207": {
    "metadata": {
      "scriptId": "207",
      "url": "node:stream/consumers",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 87,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "b141a1fc9da9285110adddc492caee96d234c9fa34cbe100dc470ab63a89adbd",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1830,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:stream/consumers"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  JSONParse,\r\n} = primordials;\r\n\r\nconst {\r\n  TextDecoder,\r\n} = require('internal/encoding');\r\n\r\nconst {\r\n  Blob,\r\n} = require('internal/blob');\r\n\r\nconst {\r\n  Buffer,\r\n} = require('buffer');\r\n\r\n/**\r\n * @typedef {import('../internal/webstreams/readablestream').ReadableStream\r\n * } ReadableStream\r\n * @typedef {import('../internal/streams/readable')} Readable\r\n */\r\n\r\n/**\r\n * @param {AsyncIterable|ReadableStream|Readable} stream\r\n * @returns {Promise<Blob>}\r\n */\r\nasync function blob(stream) {\r\n  const chunks = [];\r\n  for await (const chunk of stream)\r\n    chunks.push(chunk);\r\n  return new Blob(chunks);\r\n}\r\n\r\n/**\r\n * @param {AsyncIterable|ReadableStream|Readable} stream\r\n * @returns {Promise<ArrayBuffer>}\r\n */\r\nasync function arrayBuffer(stream) {\r\n  const ret = await blob(stream);\r\n  return ret.arrayBuffer();\r\n}\r\n\r\n/**\r\n * @param {AsyncIterable|ReadableStream|Readable} stream\r\n * @returns {Promise<Buffer>}\r\n */\r\nasync function buffer(stream) {\r\n  return Buffer.from(await arrayBuffer(stream));\r\n}\r\n\r\n/**\r\n * @param {AsyncIterable|ReadableStream|Readable} stream\r\n * @returns {Promise<string>}\r\n */\r\nasync function text(stream) {\r\n  const dec = new TextDecoder();\r\n  let str = '';\r\n  for await (const chunk of stream) {\r\n    if (typeof chunk === 'string')\r\n      str += chunk;\r\n    else\r\n      str += dec.decode(chunk, { stream: true });\r\n  }\r\n  // Flush the streaming TextDecoder so that any pending\r\n  // incomplete multibyte characters are handled.\r\n  str += dec.decode(undefined, { stream: false });\r\n  return str;\r\n}\r\n\r\n/**\r\n * @param {AsyncIterable|ReadableStream|Readable} stream\r\n * @returns {Promise<any>}\r\n */\r\nasync function json(stream) {\r\n  const str = await text(stream);\r\n  return JSONParse(str);\r\n}\r\n\r\nmodule.exports = {\r\n  arrayBuffer,\r\n  blob,\r\n  buffer,\r\n  text,\r\n  json,\r\n};\r\n"
  },
  "208": {
    "metadata": {
      "scriptId": "208",
      "url": "node:stream/web",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 56,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "57a889ea8ccb2e5add5e3d463f5b7c5f6d934fa5695caf0d46c9ea6e0c9af201",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1350,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:stream/web"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  TransformStream,\r\n  TransformStreamDefaultController,\r\n} = require('internal/webstreams/transformstream');\r\n\r\nconst {\r\n  WritableStream,\r\n  WritableStreamDefaultController,\r\n  WritableStreamDefaultWriter,\r\n} = require('internal/webstreams/writablestream');\r\n\r\nconst {\r\n  ReadableStream,\r\n  ReadableStreamDefaultReader,\r\n  ReadableStreamBYOBReader,\r\n  ReadableStreamBYOBRequest,\r\n  ReadableByteStreamController,\r\n  ReadableStreamDefaultController,\r\n} = require('internal/webstreams/readablestream');\r\n\r\nconst {\r\n  ByteLengthQueuingStrategy,\r\n  CountQueuingStrategy,\r\n} = require('internal/webstreams/queuingstrategies');\r\n\r\nconst {\r\n  TextEncoderStream,\r\n  TextDecoderStream,\r\n} = require('internal/webstreams/encoding');\r\n\r\nconst {\r\n  CompressionStream,\r\n  DecompressionStream,\r\n} = require('internal/webstreams/compression');\r\n\r\nmodule.exports = {\r\n  ReadableStream,\r\n  ReadableStreamDefaultReader,\r\n  ReadableStreamBYOBReader,\r\n  ReadableStreamBYOBRequest,\r\n  ReadableByteStreamController,\r\n  ReadableStreamDefaultController,\r\n  TransformStream,\r\n  TransformStreamDefaultController,\r\n  WritableStream,\r\n  WritableStreamDefaultWriter,\r\n  WritableStreamDefaultController,\r\n  ByteLengthQueuingStrategy,\r\n  CountQueuingStrategy,\r\n  TextEncoderStream,\r\n  TextDecoderStream,\r\n  CompressionStream,\r\n  DecompressionStream,\r\n};\r\n"
  },
  "209": {
    "metadata": {
      "scriptId": "209",
      "url": "node:internal/webstreams/transformstream",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 694,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "3741efa3c9dcf7c436bb5bdcf041b1274c3cee96314c849166bbc6ffaf75698b",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 19398,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/webstreams/transformstream"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeCall,\r\n  ObjectDefineProperties,\r\n  ObjectSetPrototypeOf,\r\n  PromisePrototypeThen,\r\n  Symbol,\r\n  SymbolToStringTag,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_STATE,\r\n    ERR_INVALID_THIS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  DOMException,\r\n} = internalBinding('messaging');\r\n\r\nconst {\r\n  createDeferredPromise,\r\n  customInspectSymbol: kInspect,\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  validateObject,\r\n  kValidateObjectAllowObjects,\r\n  kValidateObjectAllowObjectsAndNull,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  kDeserialize,\r\n  kTransfer,\r\n  kTransferList,\r\n  markTransferMode,\r\n} = require('internal/worker/js_transferable');\r\n\r\nconst {\r\n  createPromiseCallback,\r\n  customInspect,\r\n  extractHighWaterMark,\r\n  extractSizeAlgorithm,\r\n  isBrandCheck,\r\n  nonOpFlush,\r\n  kType,\r\n  kState,\r\n  nonOpCancel,\r\n} = require('internal/webstreams/util');\r\n\r\nconst {\r\n  createReadableStream,\r\n  readableStreamDefaultControllerCanCloseOrEnqueue,\r\n  readableStreamDefaultControllerClose,\r\n  readableStreamDefaultControllerEnqueue,\r\n  readableStreamDefaultControllerError,\r\n  readableStreamDefaultControllerGetDesiredSize,\r\n  readableStreamDefaultControllerHasBackpressure,\r\n} = require('internal/webstreams/readablestream');\r\n\r\nconst {\r\n  createWritableStream,\r\n  writableStreamDefaultControllerErrorIfNeeded,\r\n} = require('internal/webstreams/writablestream');\r\n\r\nconst assert = require('internal/assert');\r\n\r\nconst kSkipThrow = Symbol('kSkipThrow');\r\n\r\nconst getNonWritablePropertyDescriptor = (value) => {\r\n  return {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value,\r\n  };\r\n};\r\n\r\n/**\r\n * @typedef {import('./queuingstrategies').QueuingStrategy\r\n * } QueuingStrategy\r\n * @typedef {import('./queuingstrategies').QueuingStrategySize\r\n * } QueuingStrategySize\r\n */\r\n\r\n/**\r\n * @callback TransformerStartCallback\r\n * @param {TransformStreamDefaultController} controller;\r\n */\r\n\r\n/**\r\n * @callback TransformerFlushCallback\r\n * @param {TransformStreamDefaultController} controller;\r\n * @returns {Promise<void>}\r\n */\r\n\r\n/**\r\n * @callback TransformerTransformCallback\r\n * @param {any} chunk\r\n * @param {TransformStreamDefaultController} controller\r\n * @returns {Promise<void>}\r\n */\r\n\r\n/**\r\n * @typedef {{\r\n *  start? : TransformerStartCallback,\r\n *  transform? : TransformerTransformCallback,\r\n *  flush? : TransformerFlushCallback,\r\n *  readableType? : any,\r\n *  writableType? : any,\r\n * }} Transformer\r\n */\r\n\r\nclass TransformStream {\r\n  [kType] = 'TransformStream';\r\n\r\n  /**\r\n   * @param {Transformer} [transformer]\r\n   * @param {QueuingStrategy} [writableStrategy]\r\n   * @param {QueuingStrategy} [readableStrategy]\r\n   */\r\n  constructor(\r\n    transformer = kEmptyObject,\r\n    writableStrategy = kEmptyObject,\r\n    readableStrategy = kEmptyObject) {\r\n    markTransferMode(this, false, true);\r\n    validateObject(transformer, 'transformer', kValidateObjectAllowObjects);\r\n    validateObject(writableStrategy, 'writableStrategy', kValidateObjectAllowObjectsAndNull);\r\n    validateObject(readableStrategy, 'readableStrategy', kValidateObjectAllowObjectsAndNull);\r\n    const readableType = transformer?.readableType;\r\n    const writableType = transformer?.writableType;\r\n    const start = transformer?.start;\r\n\r\n    if (readableType !== undefined) {\r\n      throw new ERR_INVALID_ARG_VALUE.RangeError(\r\n        'transformer.readableType',\r\n        readableType);\r\n    }\r\n    if (writableType !== undefined) {\r\n      throw new ERR_INVALID_ARG_VALUE.RangeError(\r\n        'transformer.writableType',\r\n        writableType);\r\n    }\r\n\r\n    const readableHighWaterMark = readableStrategy?.highWaterMark;\r\n    const readableSize = readableStrategy?.size;\r\n\r\n    const writableHighWaterMark = writableStrategy?.highWaterMark;\r\n    const writableSize = writableStrategy?.size;\r\n\r\n    const actualReadableHighWaterMark =\r\n      extractHighWaterMark(readableHighWaterMark, 0);\r\n    const actualReadableSize = extractSizeAlgorithm(readableSize);\r\n\r\n    const actualWritableHighWaterMark =\r\n      extractHighWaterMark(writableHighWaterMark, 1);\r\n    const actualWritableSize = extractSizeAlgorithm(writableSize);\r\n\r\n    const startPromise = createDeferredPromise();\r\n\r\n    initializeTransformStream(\r\n      this,\r\n      startPromise,\r\n      actualWritableHighWaterMark,\r\n      actualWritableSize,\r\n      actualReadableHighWaterMark,\r\n      actualReadableSize);\r\n\r\n    setupTransformStreamDefaultControllerFromTransformer(this, transformer);\r\n\r\n    if (start !== undefined) {\r\n      startPromise.resolve(\r\n        FunctionPrototypeCall(\r\n          start,\r\n          transformer,\r\n          this[kState].controller));\r\n    } else {\r\n      startPromise.resolve();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {ReadableStream}\r\n   */\r\n  get readable() {\r\n    if (!isTransformStream(this))\r\n      throw new ERR_INVALID_THIS('TransformStream');\r\n    return this[kState].readable;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {WritableStream}\r\n   */\r\n  get writable() {\r\n    if (!isTransformStream(this))\r\n      throw new ERR_INVALID_THIS('TransformStream');\r\n    return this[kState].writable;\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, this[kType], {\r\n      readable: this.readable,\r\n      writable: this.writable,\r\n      backpressure: this[kState].backpressure,\r\n    });\r\n  }\r\n\r\n  [kTransfer]() {\r\n    if (!isTransformStream(this))\r\n      throw new ERR_INVALID_THIS('TransformStream');\r\n    const {\r\n      readable,\r\n      writable,\r\n    } = this[kState];\r\n    if (readable.locked) {\r\n      throw new DOMException(\r\n        'Cannot transfer a locked ReadableStream',\r\n        'DataCloneError');\r\n    }\r\n    if (writable.locked) {\r\n      throw new DOMException(\r\n        'Cannot transfer a locked WritableStream',\r\n        'DataCloneError');\r\n    }\r\n    return {\r\n      data: {\r\n        readable,\r\n        writable,\r\n      },\r\n      deserializeInfo:\r\n        'internal/webstreams/transformstream:TransferredTransformStream',\r\n    };\r\n  }\r\n\r\n  [kTransferList]() {\r\n    return [ this[kState].readable, this[kState].writable ];\r\n  }\r\n\r\n  [kDeserialize]({ readable, writable }) {\r\n    this[kState].readable = readable;\r\n    this[kState].writable = writable;\r\n  }\r\n}\r\n\r\nObjectDefineProperties(TransformStream.prototype, {\r\n  readable: kEnumerableProperty,\r\n  writable: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(TransformStream.name),\r\n});\r\n\r\nfunction InternalTransferredTransformStream() {\r\n  markTransferMode(this, false, true);\r\n  this[kType] = 'TransformStream';\r\n  this[kState] = {\r\n    __proto__: null,\r\n    readable: undefined,\r\n    writable: undefined,\r\n    backpressure: undefined,\r\n    backpressureChange: {\r\n      __proto__: null,\r\n      promise: undefined,\r\n      resolve: undefined,\r\n      reject: undefined,\r\n    },\r\n    controller: undefined,\r\n  };\r\n}\r\n\r\nObjectSetPrototypeOf(InternalTransferredTransformStream.prototype, TransformStream.prototype);\r\nObjectSetPrototypeOf(InternalTransferredTransformStream, TransformStream);\r\n\r\nfunction TransferredTransformStream() {\r\n  const stream = new InternalTransferredTransformStream();\r\n\r\n  stream.constructor = TransformStream;\r\n\r\n  return stream;\r\n}\r\n\r\nTransferredTransformStream.prototype[kDeserialize] = () => {};\r\n\r\nclass TransformStreamDefaultController {\r\n  [kType] = 'TransformStreamDefaultController';\r\n\r\n  constructor(skipThrowSymbol = undefined) {\r\n    if (skipThrowSymbol !== kSkipThrow) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get desiredSize() {\r\n    if (!isTransformStreamDefaultController(this))\r\n      throw new ERR_INVALID_THIS('TransformStreamDefaultController');\r\n    const {\r\n      stream,\r\n    } = this[kState];\r\n    const {\r\n      readable,\r\n    } = stream[kState];\r\n    const {\r\n      controller: readableController,\r\n    } = readable[kState];\r\n    return readableStreamDefaultControllerGetDesiredSize(readableController);\r\n  }\r\n\r\n  /**\r\n   * @param {any} [chunk]\r\n   */\r\n  enqueue(chunk = undefined) {\r\n    if (!isTransformStreamDefaultController(this))\r\n      throw new ERR_INVALID_THIS('TransformStreamDefaultController');\r\n    transformStreamDefaultControllerEnqueue(this, chunk);\r\n  }\r\n\r\n  /**\r\n   * @param {any} [reason]\r\n   */\r\n  error(reason = undefined) {\r\n    if (!isTransformStreamDefaultController(this))\r\n      throw new ERR_INVALID_THIS('TransformStreamDefaultController');\r\n    transformStreamDefaultControllerError(this, reason);\r\n  }\r\n\r\n  terminate() {\r\n    if (!isTransformStreamDefaultController(this))\r\n      throw new ERR_INVALID_THIS('TransformStreamDefaultController');\r\n    transformStreamDefaultControllerTerminate(this);\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, this[kType], {\r\n      stream: this[kState].stream,\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(TransformStreamDefaultController.prototype, {\r\n  desiredSize: kEnumerableProperty,\r\n  enqueue: kEnumerableProperty,\r\n  error: kEnumerableProperty,\r\n  terminate: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(TransformStreamDefaultController.name),\r\n});\r\n\r\nconst isTransformStream =\r\n  isBrandCheck('TransformStream');\r\nconst isTransformStreamDefaultController =\r\n  isBrandCheck('TransformStreamDefaultController');\r\n\r\nasync function defaultTransformAlgorithm(chunk, controller) {\r\n  transformStreamDefaultControllerEnqueue(controller, chunk);\r\n}\r\n\r\nfunction initializeTransformStream(\r\n  stream,\r\n  startPromise,\r\n  writableHighWaterMark,\r\n  writableSizeAlgorithm,\r\n  readableHighWaterMark,\r\n  readableSizeAlgorithm) {\r\n\r\n  const startAlgorithm = () => startPromise.promise;\r\n\r\n  const writable = createWritableStream(\r\n    startAlgorithm,\r\n    (chunk) => transformStreamDefaultSinkWriteAlgorithm(stream, chunk),\r\n    () => transformStreamDefaultSinkCloseAlgorithm(stream),\r\n    (reason) => transformStreamDefaultSinkAbortAlgorithm(stream, reason),\r\n    writableHighWaterMark,\r\n    writableSizeAlgorithm,\r\n  );\r\n\r\n  const readable = createReadableStream(\r\n    startAlgorithm,\r\n    () => transformStreamDefaultSourcePullAlgorithm(stream),\r\n    (reason) => transformStreamDefaultSourceCancelAlgorithm(stream, reason),\r\n    readableHighWaterMark,\r\n    readableSizeAlgorithm,\r\n  );\r\n\r\n  stream[kState] = {\r\n    __proto__: null,\r\n    readable,\r\n    writable,\r\n    controller: undefined,\r\n    backpressure: undefined,\r\n    backpressureChange: {\r\n      __proto__: null,\r\n      promise: undefined,\r\n      resolve: undefined,\r\n      reject: undefined,\r\n    },\r\n  };\r\n\r\n  transformStreamSetBackpressure(stream, true);\r\n}\r\n\r\nfunction transformStreamError(stream, error) {\r\n  const {\r\n    readable,\r\n  } = stream[kState];\r\n  const {\r\n    controller,\r\n  } = readable[kState];\r\n  readableStreamDefaultControllerError(controller, error);\r\n  transformStreamErrorWritableAndUnblockWrite(stream, error);\r\n}\r\n\r\nfunction transformStreamErrorWritableAndUnblockWrite(stream, error) {\r\n  const {\r\n    controller,\r\n    writable,\r\n  } = stream[kState];\r\n  transformStreamDefaultControllerClearAlgorithms(controller);\r\n  writableStreamDefaultControllerErrorIfNeeded(\r\n    writable[kState].controller,\r\n    error);\r\n  transformStreamUnblockWrite(stream);\r\n}\r\n\r\nfunction transformStreamUnblockWrite(stream) {\r\n  if (stream[kState].backpressure)\r\n    transformStreamSetBackpressure(stream, false);\r\n}\r\n\r\nfunction transformStreamSetBackpressure(stream, backpressure) {\r\n  assert(stream[kState].backpressure !== backpressure);\r\n  if (stream[kState].backpressureChange.promise !== undefined)\r\n    stream[kState].backpressureChange.resolve?.();\r\n  stream[kState].backpressureChange = createDeferredPromise();\r\n  stream[kState].backpressure = backpressure;\r\n}\r\n\r\nfunction setupTransformStreamDefaultController(\r\n  stream,\r\n  controller,\r\n  transformAlgorithm,\r\n  flushAlgorithm,\r\n  cancelAlgorithm) {\r\n  assert(isTransformStream(stream));\r\n  assert(stream[kState].controller === undefined);\r\n  controller[kState] = {\r\n    __proto__: null,\r\n    stream,\r\n    transformAlgorithm,\r\n    flushAlgorithm,\r\n    cancelAlgorithm,\r\n  };\r\n  stream[kState].controller = controller;\r\n}\r\n\r\nfunction setupTransformStreamDefaultControllerFromTransformer(\r\n  stream,\r\n  transformer) {\r\n  const controller = new TransformStreamDefaultController(kSkipThrow);\r\n  const transform = transformer?.transform;\r\n  const flush = transformer?.flush;\r\n  const cancel = transformer?.cancel;\r\n  const transformAlgorithm = transform ?\r\n    createPromiseCallback('transformer.transform', transform, transformer) :\r\n    defaultTransformAlgorithm;\r\n  const flushAlgorithm = flush ?\r\n    createPromiseCallback('transformer.flush', flush, transformer) :\r\n    nonOpFlush;\r\n  const cancelAlgorithm = cancel ?\r\n    createPromiseCallback('transformer.cancel', cancel, transformer) :\r\n    nonOpCancel;\r\n\r\n  setupTransformStreamDefaultController(\r\n    stream,\r\n    controller,\r\n    transformAlgorithm,\r\n    flushAlgorithm,\r\n    cancelAlgorithm);\r\n}\r\n\r\nfunction transformStreamDefaultControllerClearAlgorithms(controller) {\r\n  controller[kState].transformAlgorithm = undefined;\r\n  controller[kState].flushAlgorithm = undefined;\r\n  controller[kState].cancelAlgorithm = undefined;\r\n}\r\n\r\nfunction transformStreamDefaultControllerEnqueue(controller, chunk) {\r\n  const {\r\n    stream,\r\n  } = controller[kState];\r\n  const {\r\n    readable,\r\n  } = stream[kState];\r\n  const {\r\n    controller: readableController,\r\n  } = readable[kState];\r\n  if (!readableStreamDefaultControllerCanCloseOrEnqueue(readableController))\r\n    throw new ERR_INVALID_STATE.TypeError('Unable to enqueue');\r\n  try {\r\n    readableStreamDefaultControllerEnqueue(readableController, chunk);\r\n  } catch (error) {\r\n    transformStreamErrorWritableAndUnblockWrite(stream, error);\r\n    throw readable[kState].storedError;\r\n  }\r\n  const backpressure =\r\n    readableStreamDefaultControllerHasBackpressure(readableController);\r\n  if (backpressure !== stream[kState].backpressure) {\r\n    assert(backpressure);\r\n    transformStreamSetBackpressure(stream, true);\r\n  }\r\n}\r\n\r\nfunction transformStreamDefaultControllerError(controller, error) {\r\n  transformStreamError(controller[kState].stream, error);\r\n}\r\n\r\nasync function transformStreamDefaultControllerPerformTransform(controller, chunk) {\r\n  try {\r\n    return await controller[kState].transformAlgorithm(chunk, controller);\r\n  } catch (error) {\r\n    transformStreamError(controller[kState].stream, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction transformStreamDefaultControllerTerminate(controller) {\r\n  const {\r\n    stream,\r\n  } = controller[kState];\r\n  const {\r\n    readable,\r\n  } = stream[kState];\r\n  assert(readable !== undefined);\r\n  const {\r\n    controller: readableController,\r\n  } = readable[kState];\r\n  readableStreamDefaultControllerClose(readableController);\r\n  transformStreamErrorWritableAndUnblockWrite(\r\n    stream,\r\n    new ERR_INVALID_STATE.TypeError('TransformStream has been terminated'));\r\n}\r\n\r\nfunction transformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\r\n  const {\r\n    writable,\r\n    controller,\r\n  } = stream[kState];\r\n  assert(writable[kState].state === 'writable');\r\n  if (stream[kState].backpressure) {\r\n    const backpressureChange = stream[kState].backpressureChange.promise;\r\n    return PromisePrototypeThen(\r\n      backpressureChange,\r\n      () => {\r\n        const {\r\n          writable,\r\n        } = stream[kState];\r\n        if (writable[kState].state === 'erroring')\r\n          throw writable[kState].storedError;\r\n        assert(writable[kState].state === 'writable');\r\n        return transformStreamDefaultControllerPerformTransform(\r\n          controller,\r\n          chunk);\r\n      });\r\n  }\r\n  return transformStreamDefaultControllerPerformTransform(controller, chunk);\r\n}\r\n\r\nasync function transformStreamDefaultSinkAbortAlgorithm(stream, reason) {\r\n  const {\r\n    controller,\r\n    readable,\r\n  } = stream[kState];\r\n\r\n  if (controller[kState].finishPromise !== undefined) {\r\n    return controller[kState].finishPromise;\r\n  }\r\n\r\n  const { promise, resolve, reject } = createDeferredPromise();\r\n  controller[kState].finishPromise = promise;\r\n  const cancelPromise = controller[kState].cancelAlgorithm(reason);\r\n  transformStreamDefaultControllerClearAlgorithms(controller);\r\n\r\n  PromisePrototypeThen(\r\n    cancelPromise,\r\n    () => {\r\n      if (readable[kState].state === 'errored')\r\n        reject(readable[kState].storedError);\r\n      else {\r\n        readableStreamDefaultControllerError(readable[kState].controller, reason);\r\n        resolve();\r\n      }\r\n    },\r\n    (error) => {\r\n      readableStreamDefaultControllerError(readable[kState].controller, error);\r\n      reject(error);\r\n    },\r\n  );\r\n\r\n  return controller[kState].finishPromise;\r\n}\r\n\r\nfunction transformStreamDefaultSinkCloseAlgorithm(stream) {\r\n  const {\r\n    readable,\r\n    controller,\r\n  } = stream[kState];\r\n\r\n  if (controller[kState].finishPromise !== undefined) {\r\n    return controller[kState].finishPromise;\r\n  }\r\n  const { promise, resolve, reject } = createDeferredPromise();\r\n  controller[kState].finishPromise = promise;\r\n  const flushPromise = controller[kState].flushAlgorithm(controller);\r\n  transformStreamDefaultControllerClearAlgorithms(controller);\r\n  PromisePrototypeThen(\r\n    flushPromise,\r\n    () => {\r\n      if (readable[kState].state === 'errored')\r\n        reject(readable[kState].storedError);\r\n      else {\r\n        readableStreamDefaultControllerClose(readable[kState].controller);\r\n        resolve();\r\n      }\r\n    },\r\n    (error) => {\r\n      readableStreamDefaultControllerError(readable[kState].controller, error);\r\n      reject(error);\r\n    });\r\n  return controller[kState].finishPromise;\r\n}\r\n\r\nfunction transformStreamDefaultSourcePullAlgorithm(stream) {\r\n  assert(stream[kState].backpressure);\r\n  assert(stream[kState].backpressureChange.promise !== undefined);\r\n  transformStreamSetBackpressure(stream, false);\r\n  return stream[kState].backpressureChange.promise;\r\n}\r\n\r\nfunction transformStreamDefaultSourceCancelAlgorithm(stream, reason) {\r\n  const {\r\n    controller,\r\n    writable,\r\n  } = stream[kState];\r\n\r\n  if (controller[kState].finishPromise !== undefined) {\r\n    return controller[kState].finishPromise;\r\n  }\r\n\r\n  const { promise, resolve, reject } = createDeferredPromise();\r\n  controller[kState].finishPromise = promise;\r\n  const cancelPromise = controller[kState].cancelAlgorithm(reason);\r\n  transformStreamDefaultControllerClearAlgorithms(controller);\r\n\r\n  PromisePrototypeThen(\r\n    cancelPromise,\r\n    () => {\r\n      if (writable[kState].state === 'errored')\r\n        reject(writable[kState].storedError);\r\n      else {\r\n        writableStreamDefaultControllerErrorIfNeeded(\r\n          writable[kState].controller,\r\n          reason);\r\n        transformStreamUnblockWrite(stream);\r\n        resolve();\r\n      }\r\n    },\r\n    (error) => {\r\n      writableStreamDefaultControllerErrorIfNeeded(\r\n        writable[kState].controller,\r\n        error);\r\n      transformStreamUnblockWrite(stream);\r\n      reject(error);\r\n    },\r\n  );\r\n\r\n  return controller[kState].finishPromise;\r\n}\r\n\r\nmodule.exports = {\r\n  TransformStream,\r\n  TransformStreamDefaultController,\r\n  TransferredTransformStream,\r\n\r\n  // Exported Brand Checks\r\n  isTransformStream,\r\n  isTransformStreamDefaultController,\r\n};\r\n"
  },
  "210": {
    "metadata": {
      "scriptId": "210",
      "url": "node:internal/webstreams/readablestream",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 3397,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "ff8560dde3e03df3c47902a726f5f2fc5072dbfcccdc2bb7886c105e54bc1307",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 99109,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/webstreams/readablestream"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayBuffer,\r\n  ArrayBufferPrototypeGetByteLength,\r\n  ArrayBufferPrototypeSlice,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeShift,\r\n  DataView,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeCall,\r\n  MathMin,\r\n  NumberIsInteger,\r\n  ObjectDefineProperties,\r\n  ObjectSetPrototypeOf,\r\n  Promise,\r\n  PromisePrototypeThen,\r\n  PromiseReject,\r\n  PromiseResolve,\r\n  SafePromiseAll,\r\n  Symbol,\r\n  SymbolAsyncIterator,\r\n  SymbolDispose,\r\n  SymbolToStringTag,\r\n  TypedArrayPrototypeGetLength,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  AbortError,\r\n  codes: {\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_STATE,\r\n    ERR_INVALID_THIS,\r\n    ERR_OUT_OF_RANGE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  DOMException,\r\n} = internalBinding('messaging');\r\n\r\nconst {\r\n  isArrayBufferView,\r\n  isDataView,\r\n} = require('internal/util/types');\r\n\r\nconst {\r\n  createDeferredPromise,\r\n  customInspectSymbol: kInspect,\r\n  isArrayBufferDetached,\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n  SideEffectFreeRegExpPrototypeSymbolReplace,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  validateAbortSignal,\r\n  validateBuffer,\r\n  validateObject,\r\n  kValidateObjectAllowObjects,\r\n  kValidateObjectAllowObjectsAndNull,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  MessageChannel,\r\n} = require('internal/worker/io');\r\n\r\nconst {\r\n  kDeserialize,\r\n  kTransfer,\r\n  kTransferList,\r\n  markTransferMode,\r\n} = require('internal/worker/js_transferable');\r\n\r\nconst {\r\n  queueMicrotask,\r\n} = require('internal/process/task_queues');\r\n\r\nconst {\r\n  kIsDisturbed,\r\n  kIsErrored,\r\n  kIsReadable,\r\n  kIsClosedPromise,\r\n  kControllerErrorFunction,\r\n} = require('internal/streams/utils');\r\n\r\nconst { structuredClone } = internalBinding('messaging');\r\n\r\nconst {\r\n  ArrayBufferViewGetBuffer,\r\n  ArrayBufferViewGetByteLength,\r\n  ArrayBufferViewGetByteOffset,\r\n  AsyncIterator,\r\n  cloneAsUint8Array,\r\n  copyArrayBuffer,\r\n  createPromiseCallback,\r\n  customInspect,\r\n  dequeueValue,\r\n  enqueueValueWithSize,\r\n  extractHighWaterMark,\r\n  extractSizeAlgorithm,\r\n  lazyTransfer,\r\n  isViewedArrayBufferDetached,\r\n  isBrandCheck,\r\n  resetQueue,\r\n  setPromiseHandled,\r\n  transferArrayBuffer,\r\n  nonOpCancel,\r\n  nonOpPull,\r\n  nonOpStart,\r\n  getIterator,\r\n  iteratorNext,\r\n  kType,\r\n  kState,\r\n} = require('internal/webstreams/util');\r\n\r\nconst {\r\n  WritableStreamDefaultWriter,\r\n\r\n  isWritableStream,\r\n  isWritableStreamLocked,\r\n  isWritableStreamDefaultController,\r\n  isWritableStreamDefaultWriter,\r\n\r\n  writableStreamAbort,\r\n  writableStreamCloseQueuedOrInFlight,\r\n  writableStreamDefaultWriterCloseWithErrorPropagation,\r\n  writableStreamDefaultWriterRelease,\r\n  writableStreamDefaultWriterWrite,\r\n} = require('internal/webstreams/writablestream');\r\n\r\nconst { Buffer } = require('buffer');\r\n\r\nconst assert = require('internal/assert');\r\n\r\nconst kCancel = Symbol('kCancel');\r\nconst kClose = Symbol('kClose');\r\nconst kChunk = Symbol('kChunk');\r\nconst kError = Symbol('kError');\r\nconst kPull = Symbol('kPull');\r\nconst kRelease = Symbol('kRelease');\r\nconst kSkipThrow = Symbol('kSkipThrow');\r\n\r\nlet releasedError;\r\nlet releasingError;\r\nlet addAbortListener;\r\n\r\nconst userModuleRegExp = /^ {4}at (?:[^/\\\\(]+ \\()(?!node:(.+):\\d+:\\d+\\)$).*/gm;\r\n\r\nfunction lazyReadableReleasedError() {\r\n  if (releasedError) {\r\n    return releasedError;\r\n  }\r\n\r\n  releasedError = new ERR_INVALID_STATE.TypeError('Reader released');\r\n  // Avoid V8 leak and remove userland stackstrace\r\n  releasedError.stack = SideEffectFreeRegExpPrototypeSymbolReplace(userModuleRegExp, releasedError.stack, '');\r\n  return releasedError;\r\n}\r\n\r\nfunction lazyReadableReleasingError() {\r\n  if (releasingError) {\r\n    return releasingError;\r\n  }\r\n  releasingError = new ERR_INVALID_STATE.TypeError('Releasing reader');\r\n  // Avoid V8 leak and remove userland stackstrace\r\n  releasingError.stack = SideEffectFreeRegExpPrototypeSymbolReplace(userModuleRegExp, releasingError.stack, '');\r\n  return releasingError;\r\n}\r\n\r\nconst getNonWritablePropertyDescriptor = (value) => {\r\n  return {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value,\r\n  };\r\n};\r\n\r\n/**\r\n * @typedef {import('../abort_controller').AbortSignal} AbortSignal\r\n * @typedef {import('./queuingstrategies').QueuingStrategy} QueuingStrategy\r\n * @typedef {import('./queuingstrategies').QueuingStrategySize\r\n * } QueuingStrategySize\r\n * @typedef {import('./writablestream').WritableStream} WritableStream\r\n */\r\n\r\n/**\r\n * @typedef {ReadableStreamDefaultController | ReadableByteStreamController\r\n * } ReadableStreamController\r\n */\r\n\r\n/**\r\n * @typedef {ReadableStreamDefaultReader | ReadableStreamBYOBReader\r\n * } ReadableStreamReader\r\n */\r\n\r\n/**\r\n * @callback UnderlyingSourceStartCallback\r\n * @param {ReadableStreamController} controller\r\n * @returns { any | Promise<void> }\r\n */\r\n\r\n/**\r\n * @callback UnderlyingSourcePullCallback\r\n * @param {ReadableStreamController} controller\r\n * @returns { Promise<void> }\r\n */\r\n\r\n/**\r\n * @callback UnderlyingSourceCancelCallback\r\n * @param {any} reason\r\n * @returns { Promise<void> }\r\n */\r\n\r\n/**\r\n * @typedef {{\r\n *   readable: ReadableStream,\r\n *   writable: WritableStream,\r\n * }} ReadableWritablePair\r\n */\r\n\r\n/**\r\n * @typedef {{\r\n *   preventClose? : boolean,\r\n *   preventAbort? : boolean,\r\n *   preventCancel? : boolean,\r\n *   signal? : AbortSignal,\r\n * }} StreamPipeOptions\r\n */\r\n\r\n/**\r\n * @typedef {{\r\n *   start? : UnderlyingSourceStartCallback,\r\n *   pull? : UnderlyingSourcePullCallback,\r\n *   cancel? : UnderlyingSourceCancelCallback,\r\n *   type? : \"bytes\",\r\n *   autoAllocateChunkSize? : number\r\n * }} UnderlyingSource\r\n */\r\n\r\nclass ReadableStream {\r\n  [kType] = 'ReadableStream';\r\n\r\n  /**\r\n   * @param {UnderlyingSource} [source]\r\n   * @param {QueuingStrategy} [strategy]\r\n   */\r\n  constructor(source = kEmptyObject, strategy = kEmptyObject) {\r\n    markTransferMode(this, false, true);\r\n    validateObject(source, 'source', kValidateObjectAllowObjects);\r\n    validateObject(strategy, 'strategy', kValidateObjectAllowObjectsAndNull);\r\n    this[kState] = createReadableStreamState();\r\n\r\n    this[kIsClosedPromise] = createDeferredPromise();\r\n    this[kControllerErrorFunction] = () => {};\r\n\r\n    // The spec requires handling of the strategy first\r\n    // here. Specifically, if getting the size and\r\n    // highWaterMark from the strategy fail, that has\r\n    // to trigger a throw before getting the details\r\n    // from the source. So be sure to keep these in\r\n    // this order.\r\n    const size = strategy?.size;\r\n    const highWaterMark = strategy?.highWaterMark;\r\n    const type = source.type;\r\n\r\n    if (`${type}` === 'bytes') {\r\n      if (size !== undefined)\r\n        throw new ERR_INVALID_ARG_VALUE.RangeError('strategy.size', size);\r\n      setupReadableByteStreamControllerFromSource(\r\n        this,\r\n        source,\r\n        extractHighWaterMark(highWaterMark, 0));\r\n    } else {\r\n      if (type !== undefined)\r\n        throw new ERR_INVALID_ARG_VALUE('source.type', type);\r\n      setupReadableStreamDefaultControllerFromSource(\r\n        this,\r\n        source,\r\n        extractHighWaterMark(highWaterMark, 1),\r\n        extractSizeAlgorithm(size));\r\n    }\r\n  }\r\n\r\n  get [kIsDisturbed]() {\r\n    return this[kState].disturbed;\r\n  }\r\n\r\n  get [kIsErrored]() {\r\n    return this[kState].state === 'errored';\r\n  }\r\n\r\n  get [kIsReadable]() {\r\n    return this[kState].state === 'readable';\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {boolean}\r\n   */\r\n  get locked() {\r\n    if (!isReadableStream(this))\r\n      throw new ERR_INVALID_THIS('ReadableStream');\r\n    return isReadableStreamLocked(this);\r\n  }\r\n\r\n  static from(iterable) {\r\n    return readableStreamFromIterable(iterable);\r\n  }\r\n\r\n  /**\r\n   * @param {any} [reason]\r\n   * @returns { Promise<void> }\r\n   */\r\n  cancel(reason = undefined) {\r\n    if (!isReadableStream(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('ReadableStream'));\r\n    if (isReadableStreamLocked(this)) {\r\n      return PromiseReject(\r\n        new ERR_INVALID_STATE.TypeError('ReadableStream is locked'));\r\n    }\r\n    return readableStreamCancel(this, reason);\r\n  }\r\n\r\n  /**\r\n   * @param {{\r\n   *   mode? : \"byob\"\r\n   * }} [options]\r\n   * @returns {ReadableStreamReader}\r\n   */\r\n  getReader(options = kEmptyObject) {\r\n    if (!isReadableStream(this))\r\n      throw new ERR_INVALID_THIS('ReadableStream');\r\n    validateObject(options, 'options', kValidateObjectAllowObjectsAndNull);\r\n    const mode = options?.mode;\r\n\r\n    if (mode === undefined)\r\n      // eslint-disable-next-line no-use-before-define\r\n      return new ReadableStreamDefaultReader(this);\r\n\r\n    if (`${mode}` !== 'byob')\r\n      throw new ERR_INVALID_ARG_VALUE('options.mode', mode);\r\n    // eslint-disable-next-line no-use-before-define\r\n    return new ReadableStreamBYOBReader(this);\r\n  }\r\n\r\n  /**\r\n   * @param {ReadableWritablePair} transform\r\n   * @param {StreamPipeOptions} [options]\r\n   * @returns {ReadableStream}\r\n   */\r\n  pipeThrough(transform, options = kEmptyObject) {\r\n    if (!isReadableStream(this))\r\n      throw new ERR_INVALID_THIS('ReadableStream');\r\n    const readable = transform?.readable;\r\n    if (!isReadableStream(readable)) {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'transform.readable',\r\n        'ReadableStream',\r\n        readable);\r\n    }\r\n    const writable = transform?.writable;\r\n    if (!isWritableStream(writable)) {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'transform.writable',\r\n        'WritableStream',\r\n        writable);\r\n    }\r\n\r\n    // The web platform tests require that these be handled one at a\r\n    // time and in a specific order. options can be null or undefined.\r\n    validateObject(options, 'options', kValidateObjectAllowObjectsAndNull);\r\n    const preventAbort = options?.preventAbort;\r\n    const preventCancel = options?.preventCancel;\r\n    const preventClose = options?.preventClose;\r\n    const signal = options?.signal;\r\n\r\n    if (signal !== undefined) {\r\n      validateAbortSignal(signal, 'options.signal');\r\n    }\r\n\r\n    if (isReadableStreamLocked(this))\r\n      throw new ERR_INVALID_STATE.TypeError('The ReadableStream is locked');\r\n    if (isWritableStreamLocked(writable))\r\n      throw new ERR_INVALID_STATE.TypeError('The WritableStream is locked');\r\n\r\n    const promise = readableStreamPipeTo(\r\n      this,\r\n      writable,\r\n      !!preventClose,\r\n      !!preventAbort,\r\n      !!preventCancel,\r\n      signal);\r\n    setPromiseHandled(promise);\r\n\r\n    return readable;\r\n  }\r\n\r\n  /**\r\n   * @param {WritableStream} destination\r\n   * @param {StreamPipeOptions} [options]\r\n   * @returns {Promise<void>}\r\n   */\r\n  pipeTo(destination, options = kEmptyObject) {\r\n    try {\r\n      if (!isReadableStream(this))\r\n        throw new ERR_INVALID_THIS('ReadableStream');\r\n      if (!isWritableStream(destination)) {\r\n        throw new ERR_INVALID_ARG_TYPE(\r\n          'transform.writable',\r\n          'WritableStream',\r\n          destination);\r\n      }\r\n\r\n      validateObject(options, 'options', kValidateObjectAllowObjectsAndNull);\r\n      const preventAbort = options?.preventAbort;\r\n      const preventCancel = options?.preventCancel;\r\n      const preventClose = options?.preventClose;\r\n      const signal = options?.signal;\r\n\r\n      if (signal !== undefined) {\r\n        validateAbortSignal(signal, 'options.signal');\r\n      }\r\n\r\n      if (isReadableStreamLocked(this))\r\n        throw new ERR_INVALID_STATE.TypeError('The ReadableStream is locked');\r\n      if (isWritableStreamLocked(destination))\r\n        throw new ERR_INVALID_STATE.TypeError('The WritableStream is locked');\r\n\r\n      return readableStreamPipeTo(\r\n        this,\r\n        destination,\r\n        !!preventClose,\r\n        !!preventAbort,\r\n        !!preventCancel,\r\n        signal);\r\n    } catch (error) {\r\n      return PromiseReject(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {ReadableStream[]}\r\n   */\r\n  tee() {\r\n    if (!isReadableStream(this))\r\n      throw new ERR_INVALID_THIS('ReadableStream');\r\n    return readableStreamTee(this, false);\r\n  }\r\n\r\n  /**\r\n   * @param {{\r\n   *   preventCancel? : boolean,\r\n   * }} [options]\r\n   * @returns {AsyncIterable}\r\n   */\r\n  values(options = kEmptyObject) {\r\n    if (!isReadableStream(this))\r\n      throw new ERR_INVALID_THIS('ReadableStream');\r\n    validateObject(options, 'options', kValidateObjectAllowObjectsAndNull);\r\n    const preventCancel = !!(options?.preventCancel);\r\n\r\n    // eslint-disable-next-line no-use-before-define\r\n    const reader = new ReadableStreamDefaultReader(this);\r\n\r\n    // No __proto__ here to avoid the performance hit.\r\n    const state = {\r\n      done: false,\r\n      current: undefined,\r\n    };\r\n    let started = false;\r\n\r\n    // The nextSteps function is not an async function in order\r\n    // to make it more efficient. Because nextSteps explicitly\r\n    // creates a Promise and returns it in the common case,\r\n    // making it an async function just causes two additional\r\n    // unnecessary Promise allocations to occur, which just add\r\n    // cost.\r\n    function nextSteps() {\r\n      if (state.done)\r\n        return PromiseResolve({ done: true, value: undefined });\r\n\r\n      if (reader[kState].stream === undefined) {\r\n        return PromiseReject(\r\n          new ERR_INVALID_STATE.TypeError(\r\n            'The reader is not bound to a ReadableStream'));\r\n      }\r\n      const promise = createDeferredPromise();\r\n\r\n      // eslint-disable-next-line no-use-before-define\r\n      readableStreamDefaultReaderRead(reader, new ReadableStreamAsyncIteratorReadRequest(reader, state, promise));\r\n      return promise.promise;\r\n    }\r\n\r\n    async function returnSteps(value) {\r\n      if (state.done)\r\n        return { done: true, value }; // eslint-disable-line node-core/avoid-prototype-pollution\r\n      state.done = true;\r\n\r\n      if (reader[kState].stream === undefined) {\r\n        throw new ERR_INVALID_STATE.TypeError(\r\n          'The reader is not bound to a ReadableStream');\r\n      }\r\n      assert(!reader[kState].readRequests.length);\r\n      if (!preventCancel) {\r\n        const result = readableStreamReaderGenericCancel(reader, value);\r\n        readableStreamReaderGenericRelease(reader);\r\n        await result;\r\n        return { done: true, value }; // eslint-disable-line node-core/avoid-prototype-pollution\r\n      }\r\n\r\n      readableStreamReaderGenericRelease(reader);\r\n      return { done: true, value }; // eslint-disable-line node-core/avoid-prototype-pollution\r\n    }\r\n\r\n    // TODO(@jasnell): Explore whether an async generator\r\n    // can be used here instead of a custom iterator object.\r\n    return ObjectSetPrototypeOf({\r\n      // Changing either of these functions (next or return)\r\n      // to async functions causes a failure in the streams\r\n      // Web Platform Tests that check for use of a modified\r\n      // Promise.prototype.then. Since the await keyword\r\n      // uses Promise.prototype.then, it is open to prototype\r\n      // pollution, which causes the test to fail. The other\r\n      // await uses here do not trigger that failure because\r\n      // the test that fails does not trigger those code paths.\r\n      next() {\r\n        // If this is the first read, delay by one microtask\r\n        // to ensure that the controller has had an opportunity\r\n        // to properly start and perform the initial pull.\r\n        // TODO(@jasnell): The spec doesn't call this out so\r\n        // need to investigate if it's a bug in our impl or\r\n        // the spec.\r\n        if (!started) {\r\n          state.current = PromiseResolve();\r\n          started = true;\r\n        }\r\n        state.current = state.current !== undefined ?\r\n          PromisePrototypeThen(state.current, nextSteps, nextSteps) :\r\n          nextSteps();\r\n        return state.current;\r\n      },\r\n\r\n      return(error) {\r\n        started = true;\r\n        state.current = state.current !== undefined ?\r\n          PromisePrototypeThen(\r\n            state.current,\r\n            () => returnSteps(error),\r\n            () => returnSteps(error)) :\r\n          returnSteps(error);\r\n        return state.current;\r\n      },\r\n\r\n      [SymbolAsyncIterator]() { return this; },\r\n    }, AsyncIterator);\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, this[kType], {\r\n      locked: this.locked,\r\n      state: this[kState].state,\r\n      supportsBYOB:\r\n        // eslint-disable-next-line no-use-before-define\r\n        this[kState].controller instanceof ReadableByteStreamController,\r\n    });\r\n  }\r\n\r\n  [kTransfer]() {\r\n    if (!isReadableStream(this))\r\n      throw new ERR_INVALID_THIS('ReadableStream');\r\n    if (this.locked) {\r\n      this[kState].transfer.port1?.close();\r\n      this[kState].transfer.port1 = undefined;\r\n      this[kState].transfer.port2 = undefined;\r\n      throw new DOMException(\r\n        'Cannot transfer a locked ReadableStream',\r\n        'DataCloneError');\r\n    }\r\n\r\n    const {\r\n      writable,\r\n      promise,\r\n    } = lazyTransfer().newCrossRealmWritableSink(\r\n      this,\r\n      this[kState].transfer.port1);\r\n\r\n    this[kState].transfer.writable = writable;\r\n    this[kState].transfer.promise = promise;\r\n\r\n    return {\r\n      data: { port: this[kState].transfer.port2 },\r\n      deserializeInfo:\r\n        'internal/webstreams/readablestream:TransferredReadableStream',\r\n    };\r\n  }\r\n\r\n  [kTransferList]() {\r\n    const { port1, port2 } = new MessageChannel();\r\n    this[kState].transfer.port1 = port1;\r\n    this[kState].transfer.port2 = port2;\r\n    return [ port2 ];\r\n  }\r\n\r\n  [kDeserialize]({ port }) {\r\n    const transfer = lazyTransfer();\r\n    setupReadableStreamDefaultControllerFromSource(\r\n      this,\r\n      // The MessagePort is set to be referenced when reading.\r\n      // After two MessagePorts are closed, there is a problem with\r\n      // lingering promise not being properly resolved.\r\n      // https://github.com/nodejs/node/issues/51486\r\n      new transfer.CrossRealmTransformReadableSource(port, true),\r\n      0, () => 1);\r\n  }\r\n}\r\n\r\nObjectDefineProperties(ReadableStream.prototype, {\r\n  [SymbolAsyncIterator]: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: false,\r\n    writable: true,\r\n    value: ReadableStream.prototype.values,\r\n  },\r\n  locked: kEnumerableProperty,\r\n  cancel: kEnumerableProperty,\r\n  getReader: kEnumerableProperty,\r\n  pipeThrough: kEnumerableProperty,\r\n  pipeTo: kEnumerableProperty,\r\n  tee: kEnumerableProperty,\r\n  values: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(ReadableStream.name),\r\n});\r\nObjectDefineProperties(ReadableStream, {\r\n  from: kEnumerableProperty,\r\n});\r\n\r\nfunction InternalTransferredReadableStream() {\r\n  markTransferMode(this, false, true);\r\n  this[kType] = 'ReadableStream';\r\n  this[kState] = createReadableStreamState();\r\n\r\n  this[kIsClosedPromise] = createDeferredPromise();\r\n}\r\n\r\nObjectSetPrototypeOf(InternalTransferredReadableStream.prototype, ReadableStream.prototype);\r\nObjectSetPrototypeOf(InternalTransferredReadableStream, ReadableStream);\r\n\r\nfunction TransferredReadableStream() {\r\n  const stream = new InternalTransferredReadableStream();\r\n\r\n  stream.constructor = ReadableStream;\r\n\r\n  return stream;\r\n}\r\n\r\nTransferredReadableStream.prototype[kDeserialize] = () => {};\r\n\r\nclass ReadableStreamBYOBRequest {\r\n  [kType] = 'ReadableStreamBYOBRequest';\r\n\r\n  constructor(skipThrowSymbol = undefined) {\r\n    if (skipThrowSymbol !== kSkipThrow) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {ArrayBufferView}\r\n   */\r\n  get view() {\r\n    if (!isReadableStreamBYOBRequest(this))\r\n      throw new ERR_INVALID_THIS('ReadableStreamBYOBRequest');\r\n    return this[kState].view;\r\n  }\r\n\r\n  /**\r\n   * @param {number} bytesWritten\r\n   */\r\n  respond(bytesWritten) {\r\n    if (!isReadableStreamBYOBRequest(this))\r\n      throw new ERR_INVALID_THIS('ReadableStreamBYOBRequest');\r\n    const {\r\n      view,\r\n      controller,\r\n    } = this[kState];\r\n    if (controller === undefined) {\r\n      throw new ERR_INVALID_STATE.TypeError(\r\n        'This BYOB request has been invalidated');\r\n    }\r\n\r\n    const viewByteLength = ArrayBufferViewGetByteLength(view);\r\n    const viewBuffer = ArrayBufferViewGetBuffer(view);\r\n    const viewBufferByteLength = ArrayBufferPrototypeGetByteLength(viewBuffer);\r\n\r\n    if (isArrayBufferDetached(viewBuffer)) {\r\n      throw new ERR_INVALID_STATE.TypeError('Viewed ArrayBuffer is detached');\r\n    }\r\n\r\n    assert(viewByteLength > 0);\r\n    assert(viewBufferByteLength > 0);\r\n\r\n    readableByteStreamControllerRespond(controller, bytesWritten);\r\n  }\r\n\r\n  /**\r\n   * @param {ArrayBufferView} view\r\n   */\r\n  respondWithNewView(view) {\r\n    if (!isReadableStreamBYOBRequest(this))\r\n      throw new ERR_INVALID_THIS('ReadableStreamBYOBRequest');\r\n    const {\r\n      controller,\r\n    } = this[kState];\r\n\r\n    if (controller === undefined) {\r\n      throw new ERR_INVALID_STATE.TypeError(\r\n        'This BYOB request has been invalidated');\r\n    }\r\n\r\n    validateBuffer(view, 'view');\r\n\r\n    if (isViewedArrayBufferDetached(view)) {\r\n      throw new ERR_INVALID_STATE.TypeError('Viewed ArrayBuffer is detached');\r\n    }\r\n\r\n    readableByteStreamControllerRespondWithNewView(controller, view);\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, this[kType], {\r\n      view: this.view,\r\n      controller: this[kState].controller,\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(ReadableStreamBYOBRequest.prototype, {\r\n  view: kEnumerableProperty,\r\n  respond: kEnumerableProperty,\r\n  respondWithNewView: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(ReadableStreamBYOBRequest.name),\r\n});\r\n\r\nfunction createReadableStreamBYOBRequest(controller, view) {\r\n  const stream = new ReadableStreamBYOBRequest(kSkipThrow);\r\n\r\n  stream[kState] = {\r\n    controller,\r\n    view,\r\n  };\r\n\r\n  return stream;\r\n}\r\n\r\nclass ReadableStreamAsyncIteratorReadRequest {\r\n  constructor(reader, state, promise) {\r\n    this.reader = reader;\r\n    this.state = state;\r\n    this.promise = promise;\r\n  }\r\n\r\n  [kChunk](chunk) {\r\n    this.state.current = undefined;\r\n    this.promise.resolve({ value: chunk, done: false });\r\n  }\r\n\r\n  [kClose]() {\r\n    this.state.current = undefined;\r\n    this.state.done = true;\r\n    readableStreamReaderGenericRelease(this.reader);\r\n    this.promise.resolve({ done: true, value: undefined });\r\n  }\r\n\r\n  [kError](error) {\r\n    this.state.current = undefined;\r\n    this.state.done = true;\r\n    readableStreamReaderGenericRelease(this.reader);\r\n    this.promise.reject(error);\r\n  }\r\n}\r\n\r\nclass DefaultReadRequest {\r\n  constructor() {\r\n    this[kState] = createDeferredPromise();\r\n  }\r\n\r\n  [kChunk](value) {\r\n    this[kState].resolve?.({ value, done: false });\r\n  }\r\n\r\n  [kClose]() {\r\n    this[kState].resolve?.({ value: undefined, done: true });\r\n  }\r\n\r\n  [kError](error) {\r\n    this[kState].reject?.(error);\r\n  }\r\n\r\n  get promise() { return this[kState].promise; }\r\n}\r\n\r\nclass ReadIntoRequest {\r\n  constructor() {\r\n    this[kState] = createDeferredPromise();\r\n  }\r\n\r\n  [kChunk](value) {\r\n    this[kState].resolve?.({ value, done: false });\r\n  }\r\n\r\n  [kClose](value) {\r\n    this[kState].resolve?.({ value, done: true });\r\n  }\r\n\r\n  [kError](error) {\r\n    this[kState].reject?.(error);\r\n  }\r\n\r\n  get promise() { return this[kState].promise; }\r\n}\r\n\r\nclass ReadableStreamDefaultReader {\r\n  [kType] = 'ReadableStreamDefaultReader';\r\n\r\n  /**\r\n   * @param {ReadableStream} stream\r\n   */\r\n  constructor(stream) {\r\n    if (!isReadableStream(stream))\r\n      throw new ERR_INVALID_ARG_TYPE('stream', 'ReadableStream', stream);\r\n    this[kState] = {\r\n      readRequests: [],\r\n      stream: undefined,\r\n      close: {\r\n        promise: undefined,\r\n        resolve: undefined,\r\n        reject: undefined,\r\n      },\r\n    };\r\n    setupReadableStreamDefaultReader(this, stream);\r\n  }\r\n\r\n  /**\r\n   * @returns {Promise<{\r\n   *   value : any,\r\n   *   done : boolean\r\n   * }>}\r\n   */\r\n  read() {\r\n    if (!isReadableStreamDefaultReader(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('ReadableStreamDefaultReader'));\r\n    if (this[kState].stream === undefined) {\r\n      return PromiseReject(\r\n        new ERR_INVALID_STATE.TypeError(\r\n          'The reader is not attached to a stream'));\r\n    }\r\n    const readRequest = new DefaultReadRequest();\r\n    readableStreamDefaultReaderRead(this, readRequest);\r\n    return readRequest.promise;\r\n  }\r\n\r\n  releaseLock() {\r\n    if (!isReadableStreamDefaultReader(this))\r\n      throw new ERR_INVALID_THIS('ReadableStreamDefaultReader');\r\n    if (this[kState].stream === undefined)\r\n      return;\r\n    readableStreamDefaultReaderRelease(this);\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {Promise<void>}\r\n   */\r\n  get closed() {\r\n    if (!isReadableStreamDefaultReader(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('ReadableStreamDefaultReader'));\r\n    return this[kState].close.promise;\r\n  }\r\n\r\n  /**\r\n   * @param {any} [reason]\r\n   * @returns {Promise<void>}\r\n   */\r\n  cancel(reason = undefined) {\r\n    if (!isReadableStreamDefaultReader(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('ReadableStreamDefaultReader'));\r\n    if (this[kState].stream === undefined) {\r\n      return PromiseReject(new ERR_INVALID_STATE.TypeError(\r\n        'The reader is not attached to a stream'));\r\n    }\r\n    return readableStreamReaderGenericCancel(this, reason);\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, this[kType], {\r\n      stream: this[kState].stream,\r\n      readRequests: this[kState].readRequests.length,\r\n      close: this[kState].close.promise,\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(ReadableStreamDefaultReader.prototype, {\r\n  closed: kEnumerableProperty,\r\n  read: kEnumerableProperty,\r\n  releaseLock: kEnumerableProperty,\r\n  cancel: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(ReadableStreamDefaultReader.name),\r\n});\r\n\r\nclass ReadableStreamBYOBReader {\r\n  [kType] = 'ReadableStreamBYOBReader';\r\n\r\n  /**\r\n   * @param {ReadableStream} stream\r\n   */\r\n  constructor(stream) {\r\n    if (!isReadableStream(stream))\r\n      throw new ERR_INVALID_ARG_TYPE('stream', 'ReadableStream', stream);\r\n    this[kState] = {\r\n      stream: undefined,\r\n      requestIntoRequests: [],\r\n      close: {\r\n        promise: undefined,\r\n        resolve: undefined,\r\n        reject: undefined,\r\n      },\r\n    };\r\n    setupReadableStreamBYOBReader(this, stream);\r\n  }\r\n\r\n  /**\r\n   * @param {ArrayBufferView} view\r\n   * @param {{\r\n   *   min? : number\r\n   * }} [options]\r\n   * @returns {Promise<{\r\n   *   value : ArrayBufferView,\r\n   *   done : boolean,\r\n   * }>}\r\n   */\r\n  async read(view, options = kEmptyObject) {\r\n    if (!isReadableStreamBYOBReader(this))\r\n      throw new ERR_INVALID_THIS('ReadableStreamBYOBReader');\r\n    if (!isArrayBufferView(view)) {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'view',\r\n        [\r\n          'Buffer',\r\n          'TypedArray',\r\n          'DataView',\r\n        ],\r\n        view,\r\n      );\r\n    }\r\n    validateObject(options, 'options', kValidateObjectAllowObjectsAndNull);\r\n\r\n    const viewByteLength = ArrayBufferViewGetByteLength(view);\r\n    const viewBuffer = ArrayBufferViewGetBuffer(view);\r\n    const viewBufferByteLength = ArrayBufferPrototypeGetByteLength(viewBuffer);\r\n\r\n    if (viewByteLength === 0 || viewBufferByteLength === 0) {\r\n      throw new ERR_INVALID_STATE.TypeError(\r\n        'View or Viewed ArrayBuffer is zero-length or detached');\r\n    }\r\n\r\n    // Supposed to assert here that the view's buffer is not\r\n    // detached, but there's no API available to use to check that.\r\n\r\n    const min = options?.min ?? 1;\r\n    if (typeof min !== 'number')\r\n      throw new ERR_INVALID_ARG_TYPE('options.min', 'number', min);\r\n    if (!NumberIsInteger(min))\r\n      throw new ERR_INVALID_ARG_VALUE('options.min', min, 'must be an integer');\r\n    if (min <= 0)\r\n      throw new ERR_INVALID_ARG_VALUE('options.min', min, 'must be greater than 0');\r\n    if (!isDataView(view)) {\r\n      if (min > TypedArrayPrototypeGetLength(view)) {\r\n        throw new ERR_OUT_OF_RANGE('options.min', '<= view.length', min);\r\n      }\r\n    } else if (min > viewByteLength) {\r\n      throw new ERR_OUT_OF_RANGE('options.min', '<= view.byteLength', min);\r\n    }\r\n\r\n    if (this[kState].stream === undefined) {\r\n      throw new ERR_INVALID_STATE.TypeError('The reader is not attached to a stream');\r\n    }\r\n    const readIntoRequest = new ReadIntoRequest();\r\n    readableStreamBYOBReaderRead(this, view, min, readIntoRequest);\r\n    return readIntoRequest.promise;\r\n  }\r\n\r\n  releaseLock() {\r\n    if (!isReadableStreamBYOBReader(this))\r\n      throw new ERR_INVALID_THIS('ReadableStreamBYOBReader');\r\n    if (this[kState].stream === undefined)\r\n      return;\r\n    readableStreamBYOBReaderRelease(this);\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {Promise<void>}\r\n   */\r\n  get closed() {\r\n    if (!isReadableStreamBYOBReader(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('ReadableStreamBYOBReader'));\r\n    return this[kState].close.promise;\r\n  }\r\n\r\n  /**\r\n   * @param {any} [reason]\r\n   * @returns {Promise<void>}\r\n   */\r\n  cancel(reason = undefined) {\r\n    if (!isReadableStreamBYOBReader(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('ReadableStreamBYOBReader'));\r\n    if (this[kState].stream === undefined) {\r\n      return PromiseReject(new ERR_INVALID_STATE.TypeError(\r\n        'The reader is not attached to a stream'));\r\n    }\r\n    return readableStreamReaderGenericCancel(this, reason);\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, this[kType], {\r\n      stream: this[kState].stream,\r\n      requestIntoRequests: this[kState].requestIntoRequests.length,\r\n      close: this[kState].close.promise,\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(ReadableStreamBYOBReader.prototype, {\r\n  closed: kEnumerableProperty,\r\n  read: kEnumerableProperty,\r\n  releaseLock: kEnumerableProperty,\r\n  cancel: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(ReadableStreamBYOBReader.name),\r\n});\r\n\r\nclass ReadableStreamDefaultController {\r\n  [kType] = 'ReadableStreamDefaultController';\r\n  [kState] = {};\r\n\r\n  constructor(skipThrowSymbol = undefined) {\r\n    if (skipThrowSymbol !== kSkipThrow) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get desiredSize() {\r\n    return readableStreamDefaultControllerGetDesiredSize(this);\r\n  }\r\n\r\n  close() {\r\n    if (!readableStreamDefaultControllerCanCloseOrEnqueue(this))\r\n      throw new ERR_INVALID_STATE.TypeError('Controller is already closed');\r\n    readableStreamDefaultControllerClose(this);\r\n  }\r\n\r\n  /**\r\n   * @param {any} [chunk]\r\n   */\r\n  enqueue(chunk = undefined) {\r\n    if (!readableStreamDefaultControllerCanCloseOrEnqueue(this))\r\n      throw new ERR_INVALID_STATE.TypeError('Controller is already closed');\r\n    readableStreamDefaultControllerEnqueue(this, chunk);\r\n  }\r\n\r\n  /**\r\n   * @param {any} [error]\r\n   */\r\n  error(error = undefined) {\r\n    readableStreamDefaultControllerError(this, error);\r\n  }\r\n\r\n  [kCancel](reason) {\r\n    return readableStreamDefaultControllerCancelSteps(this, reason);\r\n  }\r\n\r\n  [kPull](readRequest) {\r\n    readableStreamDefaultControllerPullSteps(this, readRequest);\r\n  }\r\n\r\n  [kRelease]() {}\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, this[kType], { });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(ReadableStreamDefaultController.prototype, {\r\n  desiredSize: kEnumerableProperty,\r\n  close: kEnumerableProperty,\r\n  enqueue: kEnumerableProperty,\r\n  error: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(ReadableStreamDefaultController.name),\r\n});\r\n\r\nclass ReadableByteStreamController {\r\n  [kType] = 'ReadableByteStreamController';\r\n  [kState] = {};\r\n\r\n  constructor(skipThrowSymbol = undefined) {\r\n    if (skipThrowSymbol !== kSkipThrow) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {ReadableStreamBYOBRequest}\r\n   */\r\n  get byobRequest() {\r\n    if (!isReadableByteStreamController(this))\r\n      throw new ERR_INVALID_THIS('ReadableByteStreamController');\r\n    if (this[kState].byobRequest === null &&\r\n        this[kState].pendingPullIntos.length) {\r\n      const {\r\n        buffer,\r\n        byteOffset,\r\n        bytesFilled,\r\n        byteLength,\r\n      } = this[kState].pendingPullIntos[0];\r\n      const view =\r\n        new Uint8Array(\r\n          buffer,\r\n          byteOffset + bytesFilled,\r\n          byteLength - bytesFilled);\r\n      this[kState].byobRequest = createReadableStreamBYOBRequest(this, view);\r\n    }\r\n    return this[kState].byobRequest;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get desiredSize() {\r\n    if (!isReadableByteStreamController(this))\r\n      throw new ERR_INVALID_THIS('ReadableByteStreamController');\r\n    return readableByteStreamControllerGetDesiredSize(this);\r\n  }\r\n\r\n  close() {\r\n    if (!isReadableByteStreamController(this))\r\n      throw new ERR_INVALID_THIS('ReadableByteStreamController');\r\n    if (this[kState].closeRequested)\r\n      throw new ERR_INVALID_STATE.TypeError('Controller is already closed');\r\n    if (this[kState].stream[kState].state !== 'readable')\r\n      throw new ERR_INVALID_STATE.TypeError('ReadableStream is already closed');\r\n    readableByteStreamControllerClose(this);\r\n  }\r\n\r\n  /**\r\n   * @param {ArrayBufferView} chunk\r\n   */\r\n  enqueue(chunk) {\r\n    if (!isReadableByteStreamController(this))\r\n      throw new ERR_INVALID_THIS('ReadableByteStreamController');\r\n    validateBuffer(chunk);\r\n    const chunkByteLength = ArrayBufferViewGetByteLength(chunk);\r\n    const chunkBuffer = ArrayBufferViewGetBuffer(chunk);\r\n    const chunkBufferByteLength = ArrayBufferPrototypeGetByteLength(chunkBuffer);\r\n    if (chunkByteLength === 0 || chunkBufferByteLength === 0) {\r\n      throw new ERR_INVALID_STATE.TypeError(\r\n        'chunk ArrayBuffer is zero-length or detached');\r\n    }\r\n    if (this[kState].closeRequested)\r\n      throw new ERR_INVALID_STATE.TypeError('Controller is already closed');\r\n    if (this[kState].stream[kState].state !== 'readable')\r\n      throw new ERR_INVALID_STATE.TypeError('ReadableStream is already closed');\r\n    readableByteStreamControllerEnqueue(this, chunk);\r\n  }\r\n\r\n  /**\r\n   * @param {any} [error]\r\n   */\r\n  error(error = undefined) {\r\n    if (!isReadableByteStreamController(this))\r\n      throw new ERR_INVALID_THIS('ReadableByteStreamController');\r\n    readableByteStreamControllerError(this, error);\r\n  }\r\n\r\n  [kCancel](reason) {\r\n    return readableByteStreamControllerCancelSteps(this, reason);\r\n  }\r\n\r\n  [kPull](readRequest) {\r\n    readableByteStreamControllerPullSteps(this, readRequest);\r\n  }\r\n\r\n  [kRelease]() {\r\n    const {\r\n      pendingPullIntos,\r\n    } = this[kState];\r\n    if (pendingPullIntos.length > 0) {\r\n      const firstPendingPullInto = pendingPullIntos[0];\r\n      firstPendingPullInto.type = 'none';\r\n      this[kState].pendingPullIntos = [firstPendingPullInto];\r\n    }\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, this[kType], { });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(ReadableByteStreamController.prototype, {\r\n  byobRequest: kEnumerableProperty,\r\n  desiredSize: kEnumerableProperty,\r\n  close: kEnumerableProperty,\r\n  enqueue: kEnumerableProperty,\r\n  error: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(ReadableByteStreamController.name),\r\n});\r\n\r\nfunction InternalReadableStream(start, pull, cancel, highWaterMark, size) {\r\n  markTransferMode(this, false, true);\r\n  this[kType] = 'ReadableStream';\r\n  this[kState] = createReadableStreamState();\r\n  this[kIsClosedPromise] = createDeferredPromise();\r\n  const controller = new ReadableStreamDefaultController(kSkipThrow);\r\n  setupReadableStreamDefaultController(\r\n    this,\r\n    controller,\r\n    start,\r\n    pull,\r\n    cancel,\r\n    highWaterMark,\r\n    size);\r\n}\r\n\r\nObjectSetPrototypeOf(InternalReadableStream.prototype, ReadableStream.prototype);\r\nObjectSetPrototypeOf(InternalReadableStream, ReadableStream);\r\n\r\nfunction createReadableStream(start, pull, cancel, highWaterMark = 1, size = () => 1) {\r\n  const stream = new InternalReadableStream(start, pull, cancel, highWaterMark, size);\r\n\r\n  // For spec compliance the InternalReadableStream must be a ReadableStream\r\n  stream.constructor = ReadableStream;\r\n  return stream;\r\n}\r\n\r\nfunction InternalReadableByteStream(start, pull, cancel) {\r\n  markTransferMode(this, false, true);\r\n  this[kType] = 'ReadableStream';\r\n  this[kState] = createReadableStreamState();\r\n  this[kIsClosedPromise] = createDeferredPromise();\r\n  const controller = new ReadableByteStreamController(kSkipThrow);\r\n  setupReadableByteStreamController(\r\n    this,\r\n    controller,\r\n    start,\r\n    pull,\r\n    cancel,\r\n    0,\r\n    undefined);\r\n}\r\n\r\nObjectSetPrototypeOf(InternalReadableByteStream.prototype, ReadableStream.prototype);\r\nObjectSetPrototypeOf(InternalReadableByteStream, ReadableStream);\r\n\r\nfunction createReadableByteStream(start, pull, cancel) {\r\n  const stream = new InternalReadableByteStream(start, pull, cancel);\r\n\r\n  // For spec compliance the InternalReadableByteStream must be a ReadableStream\r\n  stream.constructor = ReadableStream;\r\n  return stream;\r\n}\r\n\r\nconst isReadableStream =\r\n  isBrandCheck('ReadableStream');\r\nconst isReadableByteStreamController =\r\n  isBrandCheck('ReadableByteStreamController');\r\nconst isReadableStreamBYOBRequest =\r\n  isBrandCheck('ReadableStreamBYOBRequest');\r\nconst isReadableStreamDefaultReader =\r\n  isBrandCheck('ReadableStreamDefaultReader');\r\nconst isReadableStreamBYOBReader =\r\n  isBrandCheck('ReadableStreamBYOBReader');\r\n\r\n// ---- ReadableStream Implementation\r\n\r\nfunction createReadableStreamState() {\r\n  return {\r\n    __proto__: null,\r\n    disturbed: false,\r\n    reader: undefined,\r\n    state: 'readable',\r\n    storedError: undefined,\r\n    transfer: {\r\n      __proto__: null,\r\n      writable: undefined,\r\n      port1: undefined,\r\n      port2: undefined,\r\n      promise: undefined,\r\n    },\r\n  };\r\n}\r\n\r\nfunction readableStreamFromIterable(iterable) {\r\n  let stream;\r\n  const iteratorRecord = getIterator(iterable, 'async');\r\n\r\n  const startAlgorithm = nonOpStart;\r\n\r\n  async function pullAlgorithm() {\r\n    const nextResult = iteratorNext(iteratorRecord);\r\n    const nextPromise = PromiseResolve(nextResult);\r\n    return PromisePrototypeThen(nextPromise, (iterResult) => {\r\n      if (typeof iterResult !== 'object' || iterResult === null) {\r\n        throw new ERR_INVALID_STATE.TypeError(\r\n          'The promise returned by the iterator.next() method must fulfill with an object');\r\n      }\r\n      if (iterResult.done) {\r\n        readableStreamDefaultControllerClose(stream[kState].controller);\r\n      } else {\r\n        readableStreamDefaultControllerEnqueue(stream[kState].controller, iterResult.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  async function cancelAlgorithm(reason) {\r\n    const iterator = iteratorRecord.iterator;\r\n    const returnMethod = iterator.return;\r\n    if (returnMethod === undefined) {\r\n      return PromiseResolve();\r\n    }\r\n    const returnResult = FunctionPrototypeCall(returnMethod, iterator, reason);\r\n    const returnPromise = PromiseResolve(returnResult);\r\n    return PromisePrototypeThen(returnPromise, (iterResult) => {\r\n      if (typeof iterResult !== 'object' || iterResult === null) {\r\n        throw new ERR_INVALID_STATE.TypeError(\r\n          'The promise returned by the iterator.return() method must fulfill with an object');\r\n      }\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  stream = createReadableStream(\r\n    startAlgorithm,\r\n    pullAlgorithm,\r\n    cancelAlgorithm,\r\n    0,\r\n  );\r\n\r\n  return stream;\r\n}\r\n\r\nfunction readableStreamPipeTo(\r\n  source,\r\n  dest,\r\n  preventClose,\r\n  preventAbort,\r\n  preventCancel,\r\n  signal) {\r\n\r\n  let reader;\r\n  let writer;\r\n  let disposable;\r\n  // Both of these can throw synchronously. We want to capture\r\n  // the error and return a rejected promise instead.\r\n  try {\r\n    reader = new ReadableStreamDefaultReader(source);\r\n    writer = new WritableStreamDefaultWriter(dest);\r\n  } catch (error) {\r\n    return PromiseReject(error);\r\n  }\r\n\r\n  source[kState].disturbed = true;\r\n\r\n  let shuttingDown = false;\r\n\r\n  if (signal !== undefined) {\r\n    try {\r\n      validateAbortSignal(signal, 'options.signal');\r\n    } catch (error) {\r\n      return PromiseReject(error);\r\n    }\r\n  }\r\n\r\n  const promise = createDeferredPromise();\r\n\r\n  const state = {\r\n    currentWrite: PromiseResolve(),\r\n  };\r\n\r\n  // The error here can be undefined. The rejected arg\r\n  // tells us that the promise must be rejected even\r\n  // when error is undefine.\r\n  function finalize(rejected, error) {\r\n    writableStreamDefaultWriterRelease(writer);\r\n    readableStreamReaderGenericRelease(reader);\r\n    if (signal !== undefined)\r\n      disposable?.[SymbolDispose]();\r\n    if (rejected)\r\n      promise.reject(error);\r\n    else\r\n      promise.resolve();\r\n  }\r\n\r\n  async function waitForCurrentWrite() {\r\n    const write = state.currentWrite;\r\n    await write;\r\n    if (write !== state.currentWrite)\r\n      await waitForCurrentWrite();\r\n  }\r\n\r\n  function shutdownWithAnAction(action, rejected, originalError) {\r\n    if (shuttingDown) return;\r\n    shuttingDown = true;\r\n    if (dest[kState].state === 'writable' &&\r\n        !writableStreamCloseQueuedOrInFlight(dest)) {\r\n      PromisePrototypeThen(\r\n        waitForCurrentWrite(),\r\n        complete,\r\n        (error) => finalize(true, error));\r\n      return;\r\n    }\r\n    complete();\r\n\r\n    function complete() {\r\n      PromisePrototypeThen(\r\n        action(),\r\n        () => finalize(rejected, originalError),\r\n        (error) => finalize(true, error));\r\n    }\r\n  }\r\n\r\n  function shutdown(rejected, error) {\r\n    if (shuttingDown) return;\r\n    shuttingDown = true;\r\n    if (dest[kState].state === 'writable' &&\r\n        !writableStreamCloseQueuedOrInFlight(dest)) {\r\n      PromisePrototypeThen(\r\n        waitForCurrentWrite(),\r\n        () => finalize(rejected, error),\r\n        (error) => finalize(true, error));\r\n      return;\r\n    }\r\n    finalize(rejected, error);\r\n  }\r\n\r\n  function abortAlgorithm() {\r\n    let error;\r\n    if (signal.reason instanceof AbortError) {\r\n      // Cannot use the AbortError class here. It must be a DOMException.\r\n      error = new DOMException(signal.reason.message, 'AbortError');\r\n    } else {\r\n      error = signal.reason;\r\n    }\r\n\r\n    const actions = [];\r\n    if (!preventAbort) {\r\n      ArrayPrototypePush(\r\n        actions,\r\n        () => {\r\n          if (dest[kState].state === 'writable')\r\n            return writableStreamAbort(dest, error);\r\n          return PromiseResolve();\r\n        });\r\n    }\r\n    if (!preventCancel) {\r\n      ArrayPrototypePush(\r\n        actions,\r\n        () => {\r\n          if (source[kState].state === 'readable')\r\n            return readableStreamCancel(source, error);\r\n          return PromiseResolve();\r\n        });\r\n    }\r\n\r\n    shutdownWithAnAction(\r\n      () => SafePromiseAll(actions, (action) => action()),\r\n      true,\r\n      error);\r\n  }\r\n\r\n  function watchErrored(stream, promise, action) {\r\n    if (stream[kState].state === 'errored')\r\n      action(stream[kState].storedError);\r\n    else\r\n      PromisePrototypeThen(promise, undefined, action);\r\n  }\r\n\r\n  function watchClosed(stream, promise, action) {\r\n    if (stream[kState].state === 'closed')\r\n      action();\r\n    else\r\n      PromisePrototypeThen(promise, action, () => {});\r\n  }\r\n\r\n  async function step() {\r\n    if (shuttingDown)\r\n      return true;\r\n\r\n    await writer[kState].ready.promise;\r\n\r\n    const promise = createDeferredPromise();\r\n    // eslint-disable-next-line no-use-before-define\r\n    readableStreamDefaultReaderRead(reader, new PipeToReadableStreamReadRequest(writer, state, promise));\r\n\r\n    return promise.promise;\r\n  }\r\n\r\n  async function run() {\r\n    // Run until step resolves as true\r\n    while (!await step());\r\n  }\r\n\r\n  if (signal !== undefined) {\r\n    if (signal.aborted) {\r\n      abortAlgorithm();\r\n      return promise.promise;\r\n    }\r\n    addAbortListener ??= require('internal/events/abort_listener').addAbortListener;\r\n    disposable = addAbortListener(signal, abortAlgorithm);\r\n  }\r\n\r\n  setPromiseHandled(run());\r\n\r\n  watchErrored(source, reader[kState].close.promise, (error) => {\r\n    if (!preventAbort) {\r\n      return shutdownWithAnAction(\r\n        () => writableStreamAbort(dest, error),\r\n        true,\r\n        error);\r\n    }\r\n    shutdown(true, error);\r\n  });\r\n\r\n  watchErrored(dest, writer[kState].close.promise, (error) => {\r\n    if (!preventCancel) {\r\n      return shutdownWithAnAction(\r\n        () => readableStreamCancel(source, error),\r\n        true,\r\n        error);\r\n    }\r\n    shutdown(true, error);\r\n  });\r\n\r\n  watchClosed(source, reader[kState].close.promise, () => {\r\n    if (!preventClose) {\r\n      return shutdownWithAnAction(\r\n        () => writableStreamDefaultWriterCloseWithErrorPropagation(writer));\r\n    }\r\n    shutdown();\r\n  });\r\n\r\n  if (writableStreamCloseQueuedOrInFlight(dest) ||\r\n      dest[kState].state === 'closed') {\r\n    const error = new ERR_INVALID_STATE.TypeError(\r\n      'Destination WritableStream is closed');\r\n    if (!preventCancel) {\r\n      shutdownWithAnAction(\r\n        () => readableStreamCancel(source, error), true, error);\r\n    } else {\r\n      shutdown(true, error);\r\n    }\r\n  }\r\n\r\n  return promise.promise;\r\n}\r\n\r\nclass PipeToReadableStreamReadRequest {\r\n  constructor(writer, state, promise) {\r\n    this.writer = writer;\r\n    this.state = state;\r\n    this.promise = promise;\r\n  }\r\n\r\n  [kChunk](chunk) {\r\n    this.state.currentWrite = writableStreamDefaultWriterWrite(this.writer, chunk);\r\n    setPromiseHandled(this.state.currentWrite);\r\n    this.promise.resolve(false);\r\n  }\r\n\r\n  [kClose]() {\r\n    this.promise.resolve(true);\r\n  }\r\n\r\n  [kError](error) {\r\n    this.promise.reject(error);\r\n  }\r\n}\r\n\r\nfunction readableStreamTee(stream, cloneForBranch2) {\r\n  if (isReadableByteStreamController(stream[kState].controller)) {\r\n    return readableByteStreamTee(stream);\r\n  }\r\n  return readableStreamDefaultTee(stream, cloneForBranch2);\r\n}\r\n\r\nfunction readableStreamDefaultTee(stream, cloneForBranch2) {\r\n  const reader = new ReadableStreamDefaultReader(stream);\r\n  let reading = false;\r\n  let canceled1 = false;\r\n  let canceled2 = false;\r\n  let reason1;\r\n  let reason2;\r\n  let branch1;\r\n  let branch2;\r\n  const cancelPromise = createDeferredPromise();\r\n\r\n  async function pullAlgorithm() {\r\n    if (reading) return;\r\n    reading = true;\r\n    const readRequest = {\r\n      [kChunk](value) {\r\n        queueMicrotask(() => {\r\n          reading = false;\r\n          const value1 = value;\r\n          let value2 = value;\r\n          if (!canceled2 && cloneForBranch2) {\r\n            value2 = structuredClone(value2);\r\n          }\r\n          if (!canceled1) {\r\n            readableStreamDefaultControllerEnqueue(\r\n              branch1[kState].controller,\r\n              value1);\r\n          }\r\n          if (!canceled2) {\r\n            readableStreamDefaultControllerEnqueue(\r\n              branch2[kState].controller,\r\n              value2);\r\n          }\r\n        });\r\n      },\r\n      [kClose]() {\r\n        // The `process.nextTick()` is not part of the spec.\r\n        // This approach was needed to avoid a race condition working with esm\r\n        // Further information, see: https://github.com/nodejs/node/issues/39758\r\n        process.nextTick(() => {\r\n          reading = false;\r\n          if (!canceled1)\r\n            readableStreamDefaultControllerClose(branch1[kState].controller);\r\n          if (!canceled2)\r\n            readableStreamDefaultControllerClose(branch2[kState].controller);\r\n          if (!canceled1 || !canceled2)\r\n            cancelPromise.resolve();\r\n        });\r\n      },\r\n      [kError]() {\r\n        reading = false;\r\n      },\r\n    };\r\n    readableStreamDefaultReaderRead(reader, readRequest);\r\n  }\r\n\r\n  function cancel1Algorithm(reason) {\r\n    canceled1 = true;\r\n    reason1 = reason;\r\n    if (canceled2) {\r\n      const compositeReason = [reason1, reason2];\r\n      cancelPromise.resolve(readableStreamCancel(stream, compositeReason));\r\n    }\r\n    return cancelPromise.promise;\r\n  }\r\n\r\n  function cancel2Algorithm(reason) {\r\n    canceled2 = true;\r\n    reason2 = reason;\r\n    if (canceled1) {\r\n      const compositeReason = [reason1, reason2];\r\n      cancelPromise.resolve(readableStreamCancel(stream, compositeReason));\r\n    }\r\n    return cancelPromise.promise;\r\n  }\r\n\r\n  branch1 =\r\n    createReadableStream(nonOpStart, pullAlgorithm, cancel1Algorithm);\r\n  branch2 =\r\n    createReadableStream(nonOpStart, pullAlgorithm, cancel2Algorithm);\r\n\r\n  PromisePrototypeThen(\r\n    reader[kState].close.promise,\r\n    undefined,\r\n    (error) => {\r\n      readableStreamDefaultControllerError(branch1[kState].controller, error);\r\n      readableStreamDefaultControllerError(branch2[kState].controller, error);\r\n      if (!canceled1 || !canceled2)\r\n        cancelPromise.resolve();\r\n    });\r\n\r\n  return [branch1, branch2];\r\n}\r\n\r\nfunction readableByteStreamTee(stream) {\r\n  assert(isReadableStream(stream));\r\n  assert(isReadableByteStreamController(stream[kState].controller));\r\n\r\n  let reader = new ReadableStreamDefaultReader(stream);\r\n  let reading = false;\r\n  let readAgainForBranch1 = false;\r\n  let readAgainForBranch2 = false;\r\n  let canceled1 = false;\r\n  let canceled2 = false;\r\n  let reason1;\r\n  let reason2;\r\n  let branch1;\r\n  let branch2;\r\n  const cancelDeferred = createDeferredPromise();\r\n\r\n  function forwardReaderError(thisReader) {\r\n    PromisePrototypeThen(\r\n      thisReader[kState].close.promise,\r\n      undefined,\r\n      (error) => {\r\n        if (thisReader !== reader) {\r\n          return;\r\n        }\r\n        readableStreamDefaultControllerError(branch1[kState].controller, error);\r\n        readableStreamDefaultControllerError(branch2[kState].controller, error);\r\n        if (!canceled1 || !canceled2) {\r\n          cancelDeferred.resolve();\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  function pullWithDefaultReader() {\r\n    if (isReadableStreamBYOBReader(reader)) {\r\n      readableStreamBYOBReaderRelease(reader);\r\n      reader = new ReadableStreamDefaultReader(stream);\r\n      forwardReaderError(reader);\r\n    }\r\n\r\n    const readRequest = {\r\n      [kChunk](chunk) {\r\n        queueMicrotask(() => {\r\n          readAgainForBranch1 = false;\r\n          readAgainForBranch2 = false;\r\n          const chunk1 = chunk;\r\n          let chunk2 = chunk;\r\n\r\n          if (!canceled1 && !canceled2) {\r\n            try {\r\n              chunk2 = cloneAsUint8Array(chunk);\r\n            } catch (error) {\r\n              readableByteStreamControllerError(\r\n                branch1[kState].controller,\r\n                error,\r\n              );\r\n              readableByteStreamControllerError(\r\n                branch2[kState].controller,\r\n                error,\r\n              );\r\n              cancelDeferred.resolve(readableStreamCancel(stream, error));\r\n              return;\r\n            }\r\n          }\r\n          if (!canceled1) {\r\n            readableByteStreamControllerEnqueue(\r\n              branch1[kState].controller,\r\n              chunk1,\r\n            );\r\n          }\r\n          if (!canceled2) {\r\n            readableByteStreamControllerEnqueue(\r\n              branch2[kState].controller,\r\n              chunk2,\r\n            );\r\n          }\r\n          reading = false;\r\n\r\n          if (readAgainForBranch1) {\r\n            pull1Algorithm();\r\n          } else if (readAgainForBranch2) {\r\n            pull2Algorithm();\r\n          }\r\n        });\r\n      },\r\n      [kClose]() {\r\n        reading = false;\r\n\r\n        if (!canceled1) {\r\n          readableByteStreamControllerClose(branch1[kState].controller);\r\n        }\r\n        if (!canceled2) {\r\n          readableByteStreamControllerClose(branch2[kState].controller);\r\n        }\r\n        if (branch1[kState].controller[kState].pendingPullIntos.length > 0) {\r\n          readableByteStreamControllerRespond(branch1[kState].controller, 0);\r\n        }\r\n        if (branch2[kState].controller[kState].pendingPullIntos.length > 0) {\r\n          readableByteStreamControllerRespond(branch2[kState].controller, 0);\r\n        }\r\n        if (!canceled1 || !canceled2) {\r\n          cancelDeferred.resolve();\r\n        }\r\n      },\r\n      [kError]() {\r\n        reading = false;\r\n      },\r\n    };\r\n\r\n    readableStreamDefaultReaderRead(reader, readRequest);\r\n  }\r\n\r\n  function pullWithBYOBReader(view, forBranch2) {\r\n    if (isReadableStreamDefaultReader(reader)) {\r\n      readableStreamDefaultReaderRelease(reader);\r\n      reader = new ReadableStreamBYOBReader(stream);\r\n      forwardReaderError(reader);\r\n    }\r\n\r\n    const byobBranch = forBranch2 === true ? branch2 : branch1;\r\n    const otherBranch = forBranch2 === false ? branch2 : branch1;\r\n    const readIntoRequest = {\r\n      [kChunk](chunk) {\r\n        queueMicrotask(() => {\r\n          readAgainForBranch1 = false;\r\n          readAgainForBranch2 = false;\r\n          const byobCanceled = forBranch2 === true ? canceled2 : canceled1;\r\n          const otherCanceled = forBranch2 === false ? canceled2 : canceled1;\r\n\r\n          if (!otherCanceled) {\r\n            let clonedChunk;\r\n\r\n            try {\r\n              clonedChunk = cloneAsUint8Array(chunk);\r\n            } catch (error) {\r\n              readableByteStreamControllerError(\r\n                byobBranch[kState].controller,\r\n                error,\r\n              );\r\n              readableByteStreamControllerError(\r\n                otherBranch[kState].controller,\r\n                error,\r\n              );\r\n              cancelDeferred.resolve(readableStreamCancel(stream, error));\r\n              return;\r\n            }\r\n            if (!byobCanceled) {\r\n              readableByteStreamControllerRespondWithNewView(\r\n                byobBranch[kState].controller,\r\n                chunk,\r\n              );\r\n            }\r\n\r\n            readableByteStreamControllerEnqueue(\r\n              otherBranch[kState].controller,\r\n              clonedChunk,\r\n            );\r\n          } else if (!byobCanceled) {\r\n            readableByteStreamControllerRespondWithNewView(\r\n              byobBranch[kState].controller,\r\n              chunk,\r\n            );\r\n          }\r\n          reading = false;\r\n\r\n          if (readAgainForBranch1) {\r\n            pull1Algorithm();\r\n          } else if (readAgainForBranch2) {\r\n            pull2Algorithm();\r\n          }\r\n        });\r\n      },\r\n      [kClose](chunk) {\r\n        reading = false;\r\n\r\n        const byobCanceled = forBranch2 === true ? canceled2 : canceled1;\r\n        const otherCanceled = forBranch2 === false ? canceled2 : canceled1;\r\n\r\n        if (!byobCanceled) {\r\n          readableByteStreamControllerClose(byobBranch[kState].controller);\r\n        }\r\n        if (!otherCanceled) {\r\n          readableByteStreamControllerClose(otherBranch[kState].controller);\r\n        }\r\n        if (chunk !== undefined) {\r\n          if (!byobCanceled) {\r\n            readableByteStreamControllerRespondWithNewView(\r\n              byobBranch[kState].controller,\r\n              chunk,\r\n            );\r\n          }\r\n          if (\r\n            !otherCanceled &&\r\n            otherBranch[kState].controller[kState].pendingPullIntos.length > 0\r\n          ) {\r\n            readableByteStreamControllerRespond(\r\n              otherBranch[kState].controller,\r\n              0,\r\n            );\r\n          }\r\n        }\r\n        if (!byobCanceled || !otherCanceled) {\r\n          cancelDeferred.resolve();\r\n        }\r\n      },\r\n      [kError]() {\r\n        reading = false;\r\n      },\r\n    };\r\n    readableStreamBYOBReaderRead(reader, view, 1, readIntoRequest);\r\n  }\r\n\r\n  function pull1Algorithm() {\r\n    if (reading) {\r\n      readAgainForBranch1 = true;\r\n      return PromiseResolve();\r\n    }\r\n    reading = true;\r\n\r\n    const byobRequest = branch1[kState].controller.byobRequest;\r\n    if (byobRequest === null) {\r\n      pullWithDefaultReader();\r\n    } else {\r\n      pullWithBYOBReader(byobRequest[kState].view, false);\r\n    }\r\n    return PromiseResolve();\r\n  }\r\n\r\n  function pull2Algorithm() {\r\n    if (reading) {\r\n      readAgainForBranch2 = true;\r\n      return PromiseResolve();\r\n    }\r\n    reading = true;\r\n\r\n    const byobRequest = branch2[kState].controller.byobRequest;\r\n    if (byobRequest === null) {\r\n      pullWithDefaultReader();\r\n    } else {\r\n      pullWithBYOBReader(byobRequest[kState].view, true);\r\n    }\r\n    return PromiseResolve();\r\n  }\r\n\r\n  function cancel1Algorithm(reason) {\r\n    canceled1 = true;\r\n    reason1 = reason;\r\n    if (canceled2) {\r\n      cancelDeferred.resolve(readableStreamCancel(stream, [reason1, reason2]));\r\n    }\r\n    return cancelDeferred.promise;\r\n  }\r\n\r\n  function cancel2Algorithm(reason) {\r\n    canceled2 = true;\r\n    reason2 = reason;\r\n    if (canceled1) {\r\n      cancelDeferred.resolve(readableStreamCancel(stream, [reason1, reason2]));\r\n    }\r\n    return cancelDeferred.promise;\r\n  }\r\n\r\n  branch1 =\r\n    createReadableByteStream(nonOpStart, pull1Algorithm, cancel1Algorithm);\r\n  branch2 =\r\n    createReadableByteStream(nonOpStart, pull2Algorithm, cancel2Algorithm);\r\n\r\n  forwardReaderError(reader);\r\n\r\n  return [branch1, branch2];\r\n}\r\n\r\nfunction readableByteStreamControllerConvertPullIntoDescriptor(desc) {\r\n  const {\r\n    buffer,\r\n    bytesFilled,\r\n    byteLength,\r\n    byteOffset,\r\n    ctor,\r\n    elementSize,\r\n  } = desc;\r\n  if (bytesFilled > byteLength)\r\n    throw new ERR_INVALID_STATE.RangeError('The buffer size is invalid');\r\n  assert(!(bytesFilled % elementSize));\r\n  const transferredBuffer = transferArrayBuffer(buffer);\r\n\r\n  if (ctor === Buffer) {\r\n    return Buffer.from(transferredBuffer, byteOffset, bytesFilled / elementSize);\r\n  }\r\n\r\n  return new ctor(transferredBuffer, byteOffset, bytesFilled / elementSize);\r\n}\r\n\r\nfunction isReadableStreamLocked(stream) {\r\n  return stream[kState].reader !== undefined;\r\n}\r\n\r\nfunction readableStreamCancel(stream, reason) {\r\n  stream[kState].disturbed = true;\r\n  switch (stream[kState].state) {\r\n    case 'closed':\r\n      return PromiseResolve();\r\n    case 'errored':\r\n      return PromiseReject(stream[kState].storedError);\r\n  }\r\n  readableStreamClose(stream);\r\n  const {\r\n    reader,\r\n  } = stream[kState];\r\n  if (reader !== undefined && readableStreamHasBYOBReader(stream)) {\r\n    for (let n = 0; n < reader[kState].readIntoRequests.length; n++)\r\n      reader[kState].readIntoRequests[n][kClose]();\r\n    reader[kState].readIntoRequests = [];\r\n  }\r\n\r\n  return PromisePrototypeThen(\r\n    stream[kState].controller[kCancel](reason),\r\n    () => {});\r\n}\r\n\r\nfunction readableStreamClose(stream) {\r\n  assert(stream[kState].state === 'readable');\r\n  stream[kState].state = 'closed';\r\n  stream[kIsClosedPromise].resolve();\r\n  const {\r\n    reader,\r\n  } = stream[kState];\r\n\r\n  if (reader === undefined)\r\n    return;\r\n\r\n  reader[kState].close.resolve();\r\n\r\n  if (readableStreamHasDefaultReader(stream)) {\r\n    for (let n = 0; n < reader[kState].readRequests.length; n++)\r\n      reader[kState].readRequests[n][kClose]();\r\n    reader[kState].readRequests = [];\r\n  }\r\n}\r\n\r\nfunction readableStreamError(stream, error) {\r\n  assert(stream[kState].state === 'readable');\r\n  stream[kState].state = 'errored';\r\n  stream[kState].storedError = error;\r\n  stream[kIsClosedPromise].reject(error);\r\n  setPromiseHandled(stream[kIsClosedPromise].promise);\r\n\r\n  const {\r\n    reader,\r\n  } = stream[kState];\r\n\r\n  if (reader === undefined)\r\n    return;\r\n\r\n  reader[kState].close.reject(error);\r\n  setPromiseHandled(reader[kState].close.promise);\r\n\r\n  if (readableStreamHasDefaultReader(stream)) {\r\n    for (let n = 0; n < reader[kState].readRequests.length; n++)\r\n      reader[kState].readRequests[n][kError](error);\r\n    reader[kState].readRequests = [];\r\n  } else {\r\n    assert(readableStreamHasBYOBReader(stream));\r\n    for (let n = 0; n < reader[kState].readIntoRequests.length; n++)\r\n      reader[kState].readIntoRequests[n][kError](error);\r\n    reader[kState].readIntoRequests = [];\r\n  }\r\n}\r\n\r\nfunction readableStreamHasDefaultReader(stream) {\r\n  const {\r\n    reader,\r\n  } = stream[kState];\r\n\r\n  if (reader === undefined)\r\n    return false;\r\n\r\n  return reader[kState] !== undefined &&\r\n         reader[kType] === 'ReadableStreamDefaultReader';\r\n}\r\n\r\nfunction readableStreamGetNumReadRequests(stream) {\r\n  assert(readableStreamHasDefaultReader(stream));\r\n  return stream[kState].reader[kState].readRequests.length;\r\n}\r\n\r\nfunction readableStreamHasBYOBReader(stream) {\r\n  const {\r\n    reader,\r\n  } = stream[kState];\r\n\r\n  if (reader === undefined)\r\n    return false;\r\n\r\n  return reader[kState] !== undefined &&\r\n         reader[kType] === 'ReadableStreamBYOBReader';\r\n}\r\n\r\nfunction readableStreamGetNumReadIntoRequests(stream) {\r\n  assert(readableStreamHasBYOBReader(stream));\r\n  return stream[kState].reader[kState].readIntoRequests.length;\r\n}\r\n\r\nfunction readableStreamFulfillReadRequest(stream, chunk, done) {\r\n  assert(readableStreamHasDefaultReader(stream));\r\n  const {\r\n    reader,\r\n  } = stream[kState];\r\n  assert(reader[kState].readRequests.length);\r\n  const readRequest = ArrayPrototypeShift(reader[kState].readRequests);\r\n\r\n  // TODO(@jasnell): It's not clear under what exact conditions done\r\n  // will be true here. The spec requires this check but none of the\r\n  // WPT's or other tests trigger it. Will need to investigate how to\r\n  // get coverage for this.\r\n  if (done)\r\n    readRequest[kClose]();\r\n  else\r\n    readRequest[kChunk](chunk);\r\n}\r\n\r\nfunction readableStreamFulfillReadIntoRequest(stream, chunk, done) {\r\n  assert(readableStreamHasBYOBReader(stream));\r\n  const {\r\n    reader,\r\n  } = stream[kState];\r\n  assert(reader[kState].readIntoRequests.length);\r\n  const readIntoRequest = ArrayPrototypeShift(reader[kState].readIntoRequests);\r\n  if (done)\r\n    readIntoRequest[kClose](chunk);\r\n  else\r\n    readIntoRequest[kChunk](chunk);\r\n}\r\n\r\nfunction readableStreamAddReadRequest(stream, readRequest) {\r\n  assert(readableStreamHasDefaultReader(stream));\r\n  assert(stream[kState].state === 'readable');\r\n  ArrayPrototypePush(stream[kState].reader[kState].readRequests, readRequest);\r\n}\r\n\r\nfunction readableStreamAddReadIntoRequest(stream, readIntoRequest) {\r\n  assert(readableStreamHasBYOBReader(stream));\r\n  assert(stream[kState].state !== 'errored');\r\n  ArrayPrototypePush(\r\n    stream[kState].reader[kState].readIntoRequests,\r\n    readIntoRequest);\r\n}\r\n\r\nfunction readableStreamReaderGenericCancel(reader, reason) {\r\n  const {\r\n    stream,\r\n  } = reader[kState];\r\n  assert(stream !== undefined);\r\n  return readableStreamCancel(stream, reason);\r\n}\r\n\r\nfunction readableStreamReaderGenericInitialize(reader, stream) {\r\n  reader[kState].stream = stream;\r\n  stream[kState].reader = reader;\r\n  switch (stream[kState].state) {\r\n    case 'readable':\r\n      reader[kState].close = createDeferredPromise();\r\n      break;\r\n    case 'closed':\r\n      reader[kState].close = {\r\n        promise: PromiseResolve(),\r\n        resolve: undefined,\r\n        reject: undefined,\r\n      };\r\n      break;\r\n    case 'errored':\r\n      reader[kState].close = {\r\n        promise: PromiseReject(stream[kState].storedError),\r\n        resolve: undefined,\r\n        reject: undefined,\r\n      };\r\n      setPromiseHandled(reader[kState].close.promise);\r\n      break;\r\n  }\r\n}\r\n\r\nfunction readableStreamDefaultReaderRelease(reader) {\r\n  readableStreamReaderGenericRelease(reader);\r\n  readableStreamDefaultReaderErrorReadRequests(\r\n    reader,\r\n    lazyReadableReleasingError(),\r\n  );\r\n}\r\n\r\nfunction readableStreamDefaultReaderErrorReadRequests(reader, e) {\r\n  for (let n = 0; n < reader[kState].readRequests.length; ++n) {\r\n    reader[kState].readRequests[n][kError](e);\r\n  }\r\n  reader[kState].readRequests = [];\r\n}\r\n\r\nfunction readableStreamBYOBReaderRelease(reader) {\r\n  readableStreamReaderGenericRelease(reader);\r\n  readableStreamBYOBReaderErrorReadIntoRequests(\r\n    reader,\r\n    lazyReadableReleasingError(),\r\n  );\r\n}\r\n\r\nfunction readableStreamBYOBReaderErrorReadIntoRequests(reader, e) {\r\n  for (let n = 0; n < reader[kState].readIntoRequests.length; ++n) {\r\n    reader[kState].readIntoRequests[n][kError](e);\r\n  }\r\n  reader[kState].readIntoRequests = [];\r\n}\r\n\r\nfunction readableStreamReaderGenericRelease(reader) {\r\n  const {\r\n    stream,\r\n  } = reader[kState];\r\n  assert(stream !== undefined);\r\n  assert(stream[kState].reader === reader);\r\n\r\n  const releasedStateError = lazyReadableReleasedError();\r\n  if (stream[kState].state === 'readable') {\r\n    reader[kState].close.reject?.(releasedStateError);\r\n  } else {\r\n    reader[kState].close = {\r\n      promise: PromiseReject(releasedStateError),\r\n      resolve: undefined,\r\n      reject: undefined,\r\n    };\r\n  }\r\n  setPromiseHandled(reader[kState].close.promise);\r\n\r\n  stream[kState].controller[kRelease]();\r\n\r\n  stream[kState].reader = undefined;\r\n  reader[kState].stream = undefined;\r\n}\r\n\r\nfunction readableStreamBYOBReaderRead(reader, view, min, readIntoRequest) {\r\n  const {\r\n    stream,\r\n  } = reader[kState];\r\n  assert(stream !== undefined);\r\n  stream[kState].disturbed = true;\r\n  if (stream[kState].state === 'errored') {\r\n    readIntoRequest[kError](stream[kState].storedError);\r\n    return;\r\n  }\r\n  readableByteStreamControllerPullInto(\r\n    stream[kState].controller,\r\n    view,\r\n    min,\r\n    readIntoRequest);\r\n}\r\n\r\nfunction readableStreamDefaultReaderRead(reader, readRequest) {\r\n  const {\r\n    stream,\r\n  } = reader[kState];\r\n  assert(stream !== undefined);\r\n  stream[kState].disturbed = true;\r\n  switch (stream[kState].state) {\r\n    case 'closed':\r\n      readRequest[kClose]();\r\n      break;\r\n    case 'errored':\r\n      readRequest[kError](stream[kState].storedError);\r\n      break;\r\n    case 'readable':\r\n      stream[kState].controller[kPull](readRequest);\r\n  }\r\n}\r\n\r\nfunction setupReadableStreamBYOBReader(reader, stream) {\r\n  if (isReadableStreamLocked(stream))\r\n    throw new ERR_INVALID_STATE.TypeError('ReadableStream is locked');\r\n  const {\r\n    controller,\r\n  } = stream[kState];\r\n  if (!isReadableByteStreamController(controller))\r\n    throw new ERR_INVALID_ARG_VALUE('stream', stream, 'must be a byte stream');\r\n  readableStreamReaderGenericInitialize(reader, stream);\r\n  reader[kState].readIntoRequests = [];\r\n}\r\n\r\nfunction setupReadableStreamDefaultReader(reader, stream) {\r\n  if (isReadableStreamLocked(stream))\r\n    throw new ERR_INVALID_STATE.TypeError('ReadableStream is locked');\r\n  readableStreamReaderGenericInitialize(reader, stream);\r\n  reader[kState].readRequests = [];\r\n}\r\n\r\nfunction readableStreamDefaultControllerClose(controller) {\r\n  if (!readableStreamDefaultControllerCanCloseOrEnqueue(controller))\r\n    return;\r\n  controller[kState].closeRequested = true;\r\n  if (!controller[kState].queue.length) {\r\n    readableStreamDefaultControllerClearAlgorithms(controller);\r\n    readableStreamClose(controller[kState].stream);\r\n  }\r\n}\r\n\r\nfunction readableStreamDefaultControllerEnqueue(controller, chunk) {\r\n  if (!readableStreamDefaultControllerCanCloseOrEnqueue(controller))\r\n    return;\r\n\r\n  const {\r\n    stream,\r\n  } = controller[kState];\r\n\r\n  if (isReadableStreamLocked(stream) &&\r\n      readableStreamGetNumReadRequests(stream)) {\r\n    readableStreamFulfillReadRequest(stream, chunk, false);\r\n  } else {\r\n    try {\r\n      const chunkSize =\r\n        FunctionPrototypeCall(\r\n          controller[kState].sizeAlgorithm,\r\n          undefined,\r\n          chunk);\r\n      enqueueValueWithSize(controller, chunk, chunkSize);\r\n    } catch (error) {\r\n      readableStreamDefaultControllerError(controller, error);\r\n      throw error;\r\n    }\r\n  }\r\n  readableStreamDefaultControllerCallPullIfNeeded(controller);\r\n}\r\n\r\nfunction readableStreamDefaultControllerHasBackpressure(controller) {\r\n  return !readableStreamDefaultControllerShouldCallPull(controller);\r\n}\r\n\r\nfunction readableStreamDefaultControllerCanCloseOrEnqueue(controller) {\r\n  const {\r\n    stream,\r\n  } = controller[kState];\r\n  return !controller[kState].closeRequested &&\r\n         stream[kState].state === 'readable';\r\n}\r\n\r\nfunction readableStreamDefaultControllerGetDesiredSize(controller) {\r\n  const {\r\n    stream,\r\n    highWaterMark,\r\n    queueTotalSize,\r\n  } = controller[kState];\r\n  switch (stream[kState].state) {\r\n    case 'errored': return null;\r\n    case 'closed': return 0;\r\n    default:\r\n      return highWaterMark - queueTotalSize;\r\n  }\r\n}\r\n\r\nfunction readableStreamDefaultControllerShouldCallPull(controller) {\r\n  const {\r\n    stream,\r\n  } = controller[kState];\r\n  if (!readableStreamDefaultControllerCanCloseOrEnqueue(controller) ||\r\n      !controller[kState].started)\r\n    return false;\r\n\r\n  if (isReadableStreamLocked(stream) &&\r\n      readableStreamGetNumReadRequests(stream)) {\r\n    return true;\r\n  }\r\n\r\n  const desiredSize = readableStreamDefaultControllerGetDesiredSize(controller);\r\n  assert(desiredSize !== null);\r\n\r\n  return desiredSize > 0;\r\n}\r\n\r\nfunction readableStreamDefaultControllerCallPullIfNeeded(controller) {\r\n  if (!readableStreamDefaultControllerShouldCallPull(controller))\r\n    return;\r\n  if (controller[kState].pulling) {\r\n    controller[kState].pullAgain = true;\r\n    return;\r\n  }\r\n  assert(!controller[kState].pullAgain);\r\n  controller[kState].pulling = true;\r\n  PromisePrototypeThen(\r\n    controller[kState].pullAlgorithm(controller),\r\n    () => {\r\n      controller[kState].pulling = false;\r\n      if (controller[kState].pullAgain) {\r\n        controller[kState].pullAgain = false;\r\n        readableStreamDefaultControllerCallPullIfNeeded(controller);\r\n      }\r\n    },\r\n    (error) => readableStreamDefaultControllerError(controller, error));\r\n}\r\n\r\nfunction readableStreamDefaultControllerClearAlgorithms(controller) {\r\n  controller[kState].pullAlgorithm = undefined;\r\n  controller[kState].cancelAlgorithm = undefined;\r\n  controller[kState].sizeAlgorithm = undefined;\r\n}\r\n\r\nfunction readableStreamDefaultControllerError(controller, error) {\r\n  const {\r\n    stream,\r\n  } = controller[kState];\r\n  if (stream[kState].state === 'readable') {\r\n    resetQueue(controller);\r\n    readableStreamDefaultControllerClearAlgorithms(controller);\r\n    readableStreamError(stream, error);\r\n  }\r\n}\r\n\r\nfunction readableStreamDefaultControllerCancelSteps(controller, reason) {\r\n  resetQueue(controller);\r\n  const result = controller[kState].cancelAlgorithm(reason);\r\n  readableStreamDefaultControllerClearAlgorithms(controller);\r\n  return result;\r\n}\r\n\r\nfunction readableStreamDefaultControllerPullSteps(controller, readRequest) {\r\n  const {\r\n    stream,\r\n    queue,\r\n  } = controller[kState];\r\n  if (queue.length) {\r\n    const chunk = dequeueValue(controller);\r\n    if (controller[kState].closeRequested && !queue.length) {\r\n      readableStreamDefaultControllerClearAlgorithms(controller);\r\n      readableStreamClose(stream);\r\n    } else {\r\n      readableStreamDefaultControllerCallPullIfNeeded(controller);\r\n    }\r\n    readRequest[kChunk](chunk);\r\n    return;\r\n  }\r\n  readableStreamAddReadRequest(stream, readRequest);\r\n  readableStreamDefaultControllerCallPullIfNeeded(controller);\r\n}\r\n\r\nfunction setupReadableStreamDefaultController(\r\n  stream,\r\n  controller,\r\n  startAlgorithm,\r\n  pullAlgorithm,\r\n  cancelAlgorithm,\r\n  highWaterMark,\r\n  sizeAlgorithm) {\r\n  assert(stream[kState].controller === undefined);\r\n  controller[kState] = {\r\n    cancelAlgorithm,\r\n    closeRequested: false,\r\n    highWaterMark,\r\n    pullAgain: false,\r\n    pullAlgorithm,\r\n    pulling: false,\r\n    queue: [],\r\n    queueTotalSize: 0,\r\n    started: false,\r\n    sizeAlgorithm,\r\n    stream,\r\n  };\r\n  stream[kState].controller = controller;\r\n  stream[kControllerErrorFunction] = FunctionPrototypeBind(controller.error, controller);\r\n\r\n  const startResult = startAlgorithm();\r\n\r\n  PromisePrototypeThen(\r\n    new Promise((r) => r(startResult)),\r\n    () => {\r\n      controller[kState].started = true;\r\n      assert(!controller[kState].pulling);\r\n      assert(!controller[kState].pullAgain);\r\n      readableStreamDefaultControllerCallPullIfNeeded(controller);\r\n    },\r\n    (error) => readableStreamDefaultControllerError(controller, error));\r\n}\r\n\r\nfunction setupReadableStreamDefaultControllerFromSource(\r\n  stream,\r\n  source,\r\n  highWaterMark,\r\n  sizeAlgorithm) {\r\n  const controller = new ReadableStreamDefaultController(kSkipThrow);\r\n  const start = source?.start;\r\n  const pull = source?.pull;\r\n  const cancel = source?.cancel;\r\n  const startAlgorithm = start ?\r\n    FunctionPrototypeBind(start, source, controller) :\r\n    nonOpStart;\r\n  const pullAlgorithm = pull ?\r\n    createPromiseCallback('source.pull', pull, source) :\r\n    nonOpPull;\r\n  const cancelAlgorithm = cancel ?\r\n    createPromiseCallback('source.cancel', cancel, source) :\r\n    nonOpCancel;\r\n\r\n  setupReadableStreamDefaultController(\r\n    stream,\r\n    controller,\r\n    startAlgorithm,\r\n    pullAlgorithm,\r\n    cancelAlgorithm,\r\n    highWaterMark,\r\n    sizeAlgorithm);\r\n}\r\n\r\nfunction readableByteStreamControllerClose(controller) {\r\n  const {\r\n    closeRequested,\r\n    pendingPullIntos,\r\n    queueTotalSize,\r\n    stream,\r\n  } = controller[kState];\r\n\r\n  if (closeRequested || stream[kState].state !== 'readable')\r\n    return;\r\n\r\n  if (queueTotalSize) {\r\n    controller[kState].closeRequested = true;\r\n    return;\r\n  }\r\n\r\n  if (pendingPullIntos.length) {\r\n    const firstPendingPullInto = pendingPullIntos[0];\r\n    if (firstPendingPullInto.bytesFilled % firstPendingPullInto.elementSize !== 0) {\r\n      const error = new ERR_INVALID_STATE.TypeError('Partial read');\r\n      readableByteStreamControllerError(controller, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  readableByteStreamControllerClearAlgorithms(controller);\r\n  readableStreamClose(stream);\r\n}\r\n\r\nfunction readableByteStreamControllerCommitPullIntoDescriptor(stream, desc) {\r\n  assert(stream[kState].state !== 'errored');\r\n  assert(desc.type !== 'none');\r\n\r\n  let done = false;\r\n  if (stream[kState].state === 'closed') {\r\n    assert(desc.bytesFilled % desc.elementSize === 0);\r\n    done = true;\r\n  }\r\n\r\n  const filledView =\r\n    readableByteStreamControllerConvertPullIntoDescriptor(desc);\r\n\r\n  if (desc.type === 'default') {\r\n    readableStreamFulfillReadRequest(stream, filledView, done);\r\n  } else {\r\n    assert(desc.type === 'byob');\r\n    readableStreamFulfillReadIntoRequest(stream, filledView, done);\r\n  }\r\n}\r\n\r\nfunction readableByteStreamControllerInvalidateBYOBRequest(controller) {\r\n  if (controller[kState].byobRequest === null)\r\n    return;\r\n  controller[kState].byobRequest[kState].controller = undefined;\r\n  controller[kState].byobRequest[kState].view = null;\r\n  controller[kState].byobRequest = null;\r\n}\r\n\r\nfunction readableByteStreamControllerClearAlgorithms(controller) {\r\n  controller[kState].pullAlgorithm = undefined;\r\n  controller[kState].cancelAlgorithm = undefined;\r\n}\r\n\r\nfunction readableByteStreamControllerClearPendingPullIntos(controller) {\r\n  readableByteStreamControllerInvalidateBYOBRequest(controller);\r\n  controller[kState].pendingPullIntos = [];\r\n}\r\n\r\nfunction readableByteStreamControllerGetDesiredSize(controller) {\r\n  const {\r\n    stream,\r\n    highWaterMark,\r\n    queueTotalSize,\r\n  } = controller[kState];\r\n  switch (stream[kState].state) {\r\n    case 'errored': return null;\r\n    case 'closed': return 0;\r\n    default: return highWaterMark - queueTotalSize;\r\n  }\r\n}\r\n\r\nfunction readableByteStreamControllerShouldCallPull(controller) {\r\n  const {\r\n    stream,\r\n  } = controller[kState];\r\n  if (stream[kState].state !== 'readable' ||\r\n      controller[kState].closeRequested ||\r\n      !controller[kState].started) {\r\n    return false;\r\n  }\r\n  if (readableStreamHasDefaultReader(stream) &&\r\n      readableStreamGetNumReadRequests(stream) > 0) {\r\n    return true;\r\n  }\r\n\r\n  if (readableStreamHasBYOBReader(stream) &&\r\n      readableStreamGetNumReadIntoRequests(stream) > 0) {\r\n    return true;\r\n  }\r\n\r\n  const desiredSize = readableByteStreamControllerGetDesiredSize(controller);\r\n  assert(desiredSize !== null);\r\n\r\n  return desiredSize > 0;\r\n}\r\n\r\nfunction readableByteStreamControllerHandleQueueDrain(controller) {\r\n  const {\r\n    closeRequested,\r\n    queueTotalSize,\r\n    stream,\r\n  } = controller[kState];\r\n  assert(stream[kState].state === 'readable');\r\n  if (!queueTotalSize && closeRequested) {\r\n    readableByteStreamControllerClearAlgorithms(controller);\r\n    readableStreamClose(stream);\r\n    return;\r\n  }\r\n  readableByteStreamControllerCallPullIfNeeded(controller);\r\n}\r\n\r\nfunction readableByteStreamControllerPullInto(\r\n  controller,\r\n  view,\r\n  min,\r\n  readIntoRequest) {\r\n  const {\r\n    closeRequested,\r\n    stream,\r\n    pendingPullIntos,\r\n  } = controller[kState];\r\n  let elementSize = 1;\r\n  let ctor = DataView;\r\n  if (isArrayBufferView(view) && !isDataView(view)) {\r\n    elementSize = view.constructor.BYTES_PER_ELEMENT;\r\n    ctor = view.constructor;\r\n  }\r\n\r\n  const minimumFill = min * elementSize;\r\n  assert(minimumFill >= elementSize && minimumFill <= view.byteLength);\r\n  assert(minimumFill % elementSize === 0);\r\n\r\n  const buffer = ArrayBufferViewGetBuffer(view);\r\n  const byteOffset = ArrayBufferViewGetByteOffset(view);\r\n  const byteLength = ArrayBufferViewGetByteLength(view);\r\n  const bufferByteLength = ArrayBufferPrototypeGetByteLength(buffer);\r\n\r\n  let transferredBuffer;\r\n  try {\r\n    transferredBuffer = transferArrayBuffer(buffer);\r\n  } catch (error) {\r\n    readIntoRequest[kError](error);\r\n    return;\r\n  }\r\n  const desc = {\r\n    buffer: transferredBuffer,\r\n    bufferByteLength,\r\n    byteOffset,\r\n    byteLength,\r\n    bytesFilled: 0,\r\n    minimumFill,\r\n    elementSize,\r\n    ctor,\r\n    type: 'byob',\r\n  };\r\n  if (pendingPullIntos.length) {\r\n    ArrayPrototypePush(pendingPullIntos, desc);\r\n    readableStreamAddReadIntoRequest(stream, readIntoRequest);\r\n    return;\r\n  }\r\n  if (stream[kState].state === 'closed') {\r\n    const emptyView = new ctor(desc.buffer, byteOffset, 0);\r\n    readIntoRequest[kClose](emptyView);\r\n    return;\r\n  }\r\n  if (controller[kState].queueTotalSize) {\r\n    if (readableByteStreamControllerFillPullIntoDescriptorFromQueue(\r\n      controller,\r\n      desc)) {\r\n      const filledView =\r\n        readableByteStreamControllerConvertPullIntoDescriptor(desc);\r\n      readableByteStreamControllerHandleQueueDrain(controller);\r\n      readIntoRequest[kChunk](filledView);\r\n      return;\r\n    }\r\n    if (closeRequested) {\r\n      const error = new ERR_INVALID_STATE.TypeError('ReadableStream closed');\r\n      readableByteStreamControllerError(controller, error);\r\n      readIntoRequest[kError](error);\r\n      return;\r\n    }\r\n  }\r\n  ArrayPrototypePush(pendingPullIntos, desc);\r\n  readableStreamAddReadIntoRequest(stream, readIntoRequest);\r\n  readableByteStreamControllerCallPullIfNeeded(controller);\r\n}\r\n\r\nfunction readableByteStreamControllerRespondInternal(controller, bytesWritten) {\r\n  const {\r\n    stream,\r\n    pendingPullIntos,\r\n  } = controller[kState];\r\n  const desc = pendingPullIntos[0];\r\n  readableByteStreamControllerInvalidateBYOBRequest(controller);\r\n  if (stream[kState].state === 'closed') {\r\n    if (bytesWritten)\r\n      throw new ERR_INVALID_STATE.TypeError(\r\n        'Controller is closed but view is not zero-length');\r\n    readableByteStreamControllerRespondInClosedState(controller, desc);\r\n  } else {\r\n    assert(stream[kState].state === 'readable');\r\n    if (!bytesWritten)\r\n      throw new ERR_INVALID_STATE.TypeError('View cannot be zero-length');\r\n    readableByteStreamControllerRespondInReadableState(\r\n      controller,\r\n      bytesWritten,\r\n      desc);\r\n  }\r\n  readableByteStreamControllerCallPullIfNeeded(controller);\r\n}\r\n\r\nfunction readableByteStreamControllerRespond(controller, bytesWritten) {\r\n  const {\r\n    pendingPullIntos,\r\n    stream,\r\n  } = controller[kState];\r\n  assert(pendingPullIntos.length);\r\n  const desc = pendingPullIntos[0];\r\n\r\n  if (stream[kState].state === 'closed') {\r\n    if (bytesWritten !== 0)\r\n      throw new ERR_INVALID_ARG_VALUE('bytesWritten', bytesWritten);\r\n  } else {\r\n    assert(stream[kState].state === 'readable');\r\n\r\n    if (!bytesWritten)\r\n      throw new ERR_INVALID_ARG_VALUE('bytesWritten', bytesWritten);\r\n\r\n    if ((desc.bytesFilled + bytesWritten) > desc.byteLength)\r\n      throw new ERR_INVALID_ARG_VALUE.RangeError('bytesWritten', bytesWritten);\r\n  }\r\n\r\n  desc.buffer = transferArrayBuffer(desc.buffer);\r\n\r\n  readableByteStreamControllerRespondInternal(controller, bytesWritten);\r\n}\r\n\r\nfunction readableByteStreamControllerRespondInClosedState(controller, desc) {\r\n  assert(desc.bytesFilled % desc.elementSize === 0);\r\n  if (desc.type === 'none') {\r\n    readableByteStreamControllerShiftPendingPullInto(controller);\r\n  }\r\n  const {\r\n    stream,\r\n  } = controller[kState];\r\n  if (readableStreamHasBYOBReader(stream)) {\r\n    while (readableStreamGetNumReadIntoRequests(stream) > 0) {\r\n      readableByteStreamControllerCommitPullIntoDescriptor(\r\n        stream,\r\n        readableByteStreamControllerShiftPendingPullInto(controller));\r\n    }\r\n  }\r\n}\r\n\r\nfunction readableByteStreamControllerFillHeadPullIntoDescriptor(\r\n  controller,\r\n  size,\r\n  desc) {\r\n  const {\r\n    pendingPullIntos,\r\n    byobRequest,\r\n  } = controller[kState];\r\n  assert(!pendingPullIntos.length || pendingPullIntos[0] === desc);\r\n  assert(byobRequest === null);\r\n  desc.bytesFilled += size;\r\n}\r\n\r\nfunction readableByteStreamControllerEnqueue(controller, chunk) {\r\n  const {\r\n    closeRequested,\r\n    pendingPullIntos,\r\n    queue,\r\n    stream,\r\n  } = controller[kState];\r\n\r\n  const buffer = ArrayBufferViewGetBuffer(chunk);\r\n  const byteOffset = ArrayBufferViewGetByteOffset(chunk);\r\n  const byteLength = ArrayBufferViewGetByteLength(chunk);\r\n\r\n  if (closeRequested || stream[kState].state !== 'readable')\r\n    return;\r\n\r\n  const transferredBuffer = transferArrayBuffer(buffer);\r\n\r\n  if (pendingPullIntos.length) {\r\n    const firstPendingPullInto = pendingPullIntos[0];\r\n\r\n    if (isArrayBufferDetached(firstPendingPullInto.buffer)) {\r\n      throw new ERR_INVALID_STATE.TypeError(\r\n        'Destination ArrayBuffer is detached',\r\n      );\r\n    }\r\n\r\n    readableByteStreamControllerInvalidateBYOBRequest(controller);\r\n\r\n    firstPendingPullInto.buffer = transferArrayBuffer(\r\n      firstPendingPullInto.buffer,\r\n    );\r\n\r\n    if (firstPendingPullInto.type === 'none') {\r\n      readableByteStreamControllerEnqueueDetachedPullIntoToQueue(\r\n        controller,\r\n        firstPendingPullInto,\r\n      );\r\n    }\r\n  }\r\n\r\n  if (readableStreamHasDefaultReader(stream)) {\r\n    readableByteStreamControllerProcessReadRequestsUsingQueue(controller);\r\n    if (!readableStreamGetNumReadRequests(stream)) {\r\n      readableByteStreamControllerEnqueueChunkToQueue(\r\n        controller,\r\n        transferredBuffer,\r\n        byteOffset,\r\n        byteLength);\r\n    } else {\r\n      assert(!queue.length);\r\n      if (pendingPullIntos.length) {\r\n        assert(pendingPullIntos[0].type === 'default');\r\n        readableByteStreamControllerShiftPendingPullInto(controller);\r\n      }\r\n      const transferredView =\r\n        new Uint8Array(transferredBuffer, byteOffset, byteLength);\r\n      readableStreamFulfillReadRequest(stream, transferredView, false);\r\n    }\r\n  } else if (readableStreamHasBYOBReader(stream)) {\r\n    readableByteStreamControllerEnqueueChunkToQueue(\r\n      controller,\r\n      transferredBuffer,\r\n      byteOffset,\r\n      byteLength);\r\n    readableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(\r\n      controller);\r\n  } else {\r\n    assert(!isReadableStreamLocked(stream));\r\n    readableByteStreamControllerEnqueueChunkToQueue(\r\n      controller,\r\n      transferredBuffer,\r\n      byteOffset,\r\n      byteLength);\r\n  }\r\n  readableByteStreamControllerCallPullIfNeeded(controller);\r\n}\r\n\r\nfunction readableByteStreamControllerEnqueueClonedChunkToQueue(\r\n  controller,\r\n  buffer,\r\n  byteOffset,\r\n  byteLength,\r\n) {\r\n  let cloneResult;\r\n  try {\r\n    cloneResult = ArrayBufferPrototypeSlice(\r\n      buffer,\r\n      byteOffset,\r\n      byteOffset + byteLength,\r\n    );\r\n  } catch (error) {\r\n    readableByteStreamControllerError(controller, error);\r\n    throw error;\r\n  }\r\n  readableByteStreamControllerEnqueueChunkToQueue(\r\n    controller,\r\n    cloneResult,\r\n    0,\r\n    byteLength,\r\n  );\r\n}\r\n\r\nfunction readableByteStreamControllerEnqueueChunkToQueue(\r\n  controller,\r\n  buffer,\r\n  byteOffset,\r\n  byteLength) {\r\n  ArrayPrototypePush(\r\n    controller[kState].queue,\r\n    {\r\n      buffer,\r\n      byteOffset,\r\n      byteLength,\r\n    });\r\n  controller[kState].queueTotalSize += byteLength;\r\n}\r\n\r\nfunction readableByteStreamControllerEnqueueDetachedPullIntoToQueue(\r\n  controller,\r\n  desc,\r\n) {\r\n  const {\r\n    buffer,\r\n    byteOffset,\r\n    bytesFilled,\r\n    type,\r\n  } = desc;\r\n  assert(type === 'none');\r\n\r\n  if (bytesFilled > 0) {\r\n    readableByteStreamControllerEnqueueClonedChunkToQueue(\r\n      controller,\r\n      buffer,\r\n      byteOffset,\r\n      bytesFilled,\r\n    );\r\n  }\r\n  readableByteStreamControllerShiftPendingPullInto(controller);\r\n}\r\n\r\nfunction readableByteStreamControllerFillPullIntoDescriptorFromQueue(\r\n  controller,\r\n  desc) {\r\n  const {\r\n    buffer,\r\n    byteLength,\r\n    byteOffset,\r\n    bytesFilled,\r\n    minimumFill,\r\n    elementSize,\r\n  } = desc;\r\n  const maxBytesToCopy = MathMin(\r\n    controller[kState].queueTotalSize,\r\n    byteLength - bytesFilled);\r\n  const maxBytesFilled = bytesFilled + maxBytesToCopy;\r\n  const maxAlignedBytes = maxBytesFilled - (maxBytesFilled % elementSize);\r\n  let totalBytesToCopyRemaining = maxBytesToCopy;\r\n  let ready = false;\r\n  assert(bytesFilled < minimumFill);\r\n  if (maxAlignedBytes >= minimumFill) {\r\n    totalBytesToCopyRemaining = maxAlignedBytes - bytesFilled;\r\n    ready = true;\r\n  }\r\n  const {\r\n    queue,\r\n  } = controller[kState];\r\n\r\n  while (totalBytesToCopyRemaining) {\r\n    const headOfQueue = queue[0];\r\n    const bytesToCopy = MathMin(\r\n      totalBytesToCopyRemaining,\r\n      headOfQueue.byteLength);\r\n    const destStart = byteOffset + desc.bytesFilled;\r\n    const arrayBufferByteLength = ArrayBufferPrototypeGetByteLength(buffer);\r\n    if (arrayBufferByteLength - destStart < bytesToCopy) {\r\n      throw new ERR_INVALID_STATE.RangeError(\r\n        'view ArrayBuffer size is invalid');\r\n    }\r\n    assert(arrayBufferByteLength - destStart >= bytesToCopy);\r\n    copyArrayBuffer(\r\n      buffer,\r\n      destStart,\r\n      headOfQueue.buffer,\r\n      headOfQueue.byteOffset,\r\n      bytesToCopy);\r\n    if (headOfQueue.byteLength === bytesToCopy) {\r\n      ArrayPrototypeShift(queue);\r\n    } else {\r\n      headOfQueue.byteOffset += bytesToCopy;\r\n      headOfQueue.byteLength -= bytesToCopy;\r\n    }\r\n    controller[kState].queueTotalSize -= bytesToCopy;\r\n    readableByteStreamControllerFillHeadPullIntoDescriptor(\r\n      controller,\r\n      bytesToCopy,\r\n      desc);\r\n    totalBytesToCopyRemaining -= bytesToCopy;\r\n  }\r\n\r\n  if (!ready) {\r\n    assert(!controller[kState].queueTotalSize);\r\n    assert(desc.bytesFilled > 0);\r\n    assert(desc.bytesFilled < minimumFill);\r\n  }\r\n  return ready;\r\n}\r\n\r\nfunction readableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(\r\n  controller) {\r\n  const {\r\n    closeRequested,\r\n    pendingPullIntos,\r\n    stream,\r\n  } = controller[kState];\r\n  assert(!closeRequested);\r\n  while (pendingPullIntos.length) {\r\n    if (!controller[kState].queueTotalSize)\r\n      return;\r\n    const desc = pendingPullIntos[0];\r\n    if (readableByteStreamControllerFillPullIntoDescriptorFromQueue(\r\n      controller,\r\n      desc)) {\r\n      readableByteStreamControllerShiftPendingPullInto(controller);\r\n      readableByteStreamControllerCommitPullIntoDescriptor(stream, desc);\r\n    }\r\n  }\r\n}\r\n\r\nfunction readableByteStreamControllerRespondInReadableState(\r\n  controller,\r\n  bytesWritten,\r\n  desc) {\r\n  const {\r\n    buffer,\r\n    bytesFilled,\r\n    byteLength,\r\n    type,\r\n  } = desc;\r\n\r\n  if (bytesFilled + bytesWritten > byteLength)\r\n    throw new ERR_INVALID_STATE.RangeError('The buffer size is invalid');\r\n\r\n  readableByteStreamControllerFillHeadPullIntoDescriptor(\r\n    controller,\r\n    bytesWritten,\r\n    desc);\r\n\r\n  if (type === 'none') {\r\n    readableByteStreamControllerEnqueueDetachedPullIntoToQueue(\r\n      controller,\r\n      desc,\r\n    );\r\n    readableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(\r\n      controller,\r\n    );\r\n    return;\r\n  }\r\n\r\n  if (desc.bytesFilled < desc.minimumFill)\r\n    return;\r\n\r\n  readableByteStreamControllerShiftPendingPullInto(controller);\r\n\r\n  const remainderSize = desc.bytesFilled % desc.elementSize;\r\n\r\n  if (remainderSize) {\r\n    const end = desc.byteOffset + desc.bytesFilled;\r\n    const start = end - remainderSize;\r\n    const remainder =\r\n      ArrayBufferPrototypeSlice(\r\n        buffer,\r\n        start,\r\n        end);\r\n    readableByteStreamControllerEnqueueChunkToQueue(\r\n      controller,\r\n      remainder,\r\n      0,\r\n      ArrayBufferPrototypeGetByteLength(remainder));\r\n  }\r\n  desc.bytesFilled -= remainderSize;\r\n  readableByteStreamControllerCommitPullIntoDescriptor(\r\n    controller[kState].stream,\r\n    desc);\r\n  readableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\r\n}\r\n\r\nfunction readableByteStreamControllerRespondWithNewView(controller, view) {\r\n  const {\r\n    stream,\r\n    pendingPullIntos,\r\n  } = controller[kState];\r\n  assert(pendingPullIntos.length);\r\n\r\n  const desc = pendingPullIntos[0];\r\n  assert(stream[kState].state !== 'errored');\r\n\r\n  const viewByteLength = ArrayBufferViewGetByteLength(view);\r\n  const viewByteOffset = ArrayBufferViewGetByteOffset(view);\r\n  const viewBuffer = ArrayBufferViewGetBuffer(view);\r\n  const viewBufferByteLength = ArrayBufferPrototypeGetByteLength(viewBuffer);\r\n\r\n  if (stream[kState].state === 'closed') {\r\n    if (viewByteLength !== 0)\r\n      throw new ERR_INVALID_STATE.TypeError('View is not zero-length');\r\n  } else {\r\n    assert(stream[kState].state === 'readable');\r\n    if (viewByteLength === 0)\r\n      throw new ERR_INVALID_STATE.TypeError('View is zero-length');\r\n  }\r\n\r\n  const {\r\n    byteOffset,\r\n    byteLength,\r\n    bytesFilled,\r\n    bufferByteLength,\r\n  } = desc;\r\n\r\n  if (byteOffset + bytesFilled !== viewByteOffset)\r\n    throw new ERR_INVALID_ARG_VALUE.RangeError('view', view);\r\n\r\n  if (bytesFilled + viewByteLength > byteLength)\r\n    throw new ERR_INVALID_ARG_VALUE.RangeError('view', view);\r\n\r\n  if (bufferByteLength !== viewBufferByteLength)\r\n    throw new ERR_INVALID_ARG_VALUE.RangeError('view', view);\r\n\r\n  desc.buffer = transferArrayBuffer(viewBuffer);\r\n\r\n  readableByteStreamControllerRespondInternal(controller, viewByteLength);\r\n}\r\n\r\nfunction readableByteStreamControllerShiftPendingPullInto(controller) {\r\n  assert(controller[kState].byobRequest === null);\r\n  return ArrayPrototypeShift(controller[kState].pendingPullIntos);\r\n}\r\n\r\nfunction readableByteStreamControllerCallPullIfNeeded(controller) {\r\n  if (!readableByteStreamControllerShouldCallPull(controller))\r\n    return;\r\n  if (controller[kState].pulling) {\r\n    controller[kState].pullAgain = true;\r\n    return;\r\n  }\r\n  assert(!controller[kState].pullAgain);\r\n  controller[kState].pulling = true;\r\n  PromisePrototypeThen(\r\n    controller[kState].pullAlgorithm(controller),\r\n    () => {\r\n      controller[kState].pulling = false;\r\n      if (controller[kState].pullAgain) {\r\n        controller[kState].pullAgain = false;\r\n        readableByteStreamControllerCallPullIfNeeded(controller);\r\n      }\r\n    },\r\n    (error) => readableByteStreamControllerError(controller, error));\r\n}\r\n\r\nfunction readableByteStreamControllerError(controller, error) {\r\n  const {\r\n    stream,\r\n  } = controller[kState];\r\n  if (stream[kState].state !== 'readable')\r\n    return;\r\n  readableByteStreamControllerClearPendingPullIntos(controller);\r\n  resetQueue(controller);\r\n  readableByteStreamControllerClearAlgorithms(controller);\r\n  readableStreamError(stream, error);\r\n}\r\n\r\nfunction readableByteStreamControllerCancelSteps(controller, reason) {\r\n  readableByteStreamControllerClearPendingPullIntos(controller);\r\n  resetQueue(controller);\r\n  const result = controller[kState].cancelAlgorithm(reason);\r\n  readableByteStreamControllerClearAlgorithms(controller);\r\n  return result;\r\n}\r\n\r\nfunction readableByteStreamControllerFillReadRequestFromQueue(controller, readRequest) {\r\n  const {\r\n    queue,\r\n    queueTotalSize,\r\n  } = controller[kState];\r\n  assert(queueTotalSize > 0);\r\n  const {\r\n    buffer,\r\n    byteOffset,\r\n    byteLength,\r\n  } = ArrayPrototypeShift(queue);\r\n\r\n  controller[kState].queueTotalSize -= byteLength;\r\n  readableByteStreamControllerHandleQueueDrain(controller);\r\n  const view = new Uint8Array(buffer, byteOffset, byteLength);\r\n  readRequest[kChunk](view);\r\n}\r\n\r\nfunction readableByteStreamControllerProcessReadRequestsUsingQueue(controller) {\r\n  const {\r\n    stream,\r\n    queueTotalSize,\r\n  } = controller[kState];\r\n  const { reader } = stream[kState];\r\n  assert(isReadableStreamDefaultReader(reader));\r\n\r\n  while (reader[kState].readRequests.length > 0) {\r\n    if (queueTotalSize === 0) {\r\n      return;\r\n    }\r\n    readableByteStreamControllerFillReadRequestFromQueue(\r\n      controller,\r\n      ArrayPrototypeShift(reader[kState].readRequests),\r\n    );\r\n  }\r\n}\r\n\r\nfunction readableByteStreamControllerPullSteps(controller, readRequest) {\r\n  const {\r\n    pendingPullIntos,\r\n    queueTotalSize,\r\n    stream,\r\n  } = controller[kState];\r\n  assert(readableStreamHasDefaultReader(stream));\r\n  if (queueTotalSize) {\r\n    assert(!readableStreamGetNumReadRequests(stream));\r\n    readableByteStreamControllerFillReadRequestFromQueue(\r\n      controller,\r\n      readRequest,\r\n    );\r\n    return;\r\n  }\r\n  const {\r\n    autoAllocateChunkSize,\r\n  } = controller[kState];\r\n  if (autoAllocateChunkSize !== undefined) {\r\n    try {\r\n      const buffer = new ArrayBuffer(autoAllocateChunkSize);\r\n      ArrayPrototypePush(\r\n        pendingPullIntos,\r\n        {\r\n          buffer,\r\n          bufferByteLength: autoAllocateChunkSize,\r\n          byteOffset: 0,\r\n          byteLength: autoAllocateChunkSize,\r\n          bytesFilled: 0,\r\n          minimumFill: 1,\r\n          elementSize: 1,\r\n          ctor: Uint8Array,\r\n          type: 'default',\r\n        });\r\n    } catch (error) {\r\n      readRequest[kError](error);\r\n      return;\r\n    }\r\n  }\r\n\r\n  readableStreamAddReadRequest(stream, readRequest);\r\n  readableByteStreamControllerCallPullIfNeeded(controller);\r\n}\r\n\r\nfunction setupReadableByteStreamController(\r\n  stream,\r\n  controller,\r\n  startAlgorithm,\r\n  pullAlgorithm,\r\n  cancelAlgorithm,\r\n  highWaterMark,\r\n  autoAllocateChunkSize) {\r\n  assert(stream[kState].controller === undefined);\r\n  if (autoAllocateChunkSize !== undefined) {\r\n    assert(NumberIsInteger(autoAllocateChunkSize));\r\n    assert(autoAllocateChunkSize > 0);\r\n  }\r\n  controller[kState] = {\r\n    byobRequest: null,\r\n    closeRequested: false,\r\n    pullAgain: false,\r\n    pulling: false,\r\n    started: false,\r\n    stream,\r\n    queue: [],\r\n    queueTotalSize: 0,\r\n    highWaterMark,\r\n    pullAlgorithm,\r\n    cancelAlgorithm,\r\n    autoAllocateChunkSize,\r\n    pendingPullIntos: [],\r\n  };\r\n  stream[kState].controller = controller;\r\n\r\n  const startResult = startAlgorithm();\r\n\r\n  PromisePrototypeThen(\r\n    new Promise((r) => r(startResult)),\r\n    () => {\r\n      controller[kState].started = true;\r\n      assert(!controller[kState].pulling);\r\n      assert(!controller[kState].pullAgain);\r\n      readableByteStreamControllerCallPullIfNeeded(controller);\r\n    },\r\n    (error) => readableByteStreamControllerError(controller, error));\r\n}\r\n\r\nfunction setupReadableByteStreamControllerFromSource(\r\n  stream,\r\n  source,\r\n  highWaterMark) {\r\n  const controller = new ReadableByteStreamController(kSkipThrow);\r\n  const start = source?.start;\r\n  const pull = source?.pull;\r\n  const cancel = source?.cancel;\r\n  const autoAllocateChunkSize = source?.autoAllocateChunkSize;\r\n  const startAlgorithm = start ?\r\n    FunctionPrototypeBind(start, source, controller) :\r\n    nonOpStart;\r\n  const pullAlgorithm = pull ?\r\n    createPromiseCallback('source.pull', pull, source, controller) :\r\n    nonOpPull;\r\n  const cancelAlgorithm = cancel ?\r\n    createPromiseCallback('source.cancel', cancel, source) :\r\n    nonOpCancel;\r\n\r\n  if (autoAllocateChunkSize === 0) {\r\n    throw new ERR_INVALID_ARG_VALUE(\r\n      'source.autoAllocateChunkSize',\r\n      autoAllocateChunkSize);\r\n  }\r\n  setupReadableByteStreamController(\r\n    stream,\r\n    controller,\r\n    startAlgorithm,\r\n    pullAlgorithm,\r\n    cancelAlgorithm,\r\n    highWaterMark,\r\n    autoAllocateChunkSize);\r\n}\r\n\r\nmodule.exports = {\r\n  ReadableStream,\r\n  ReadableStreamDefaultReader,\r\n  ReadableStreamBYOBReader,\r\n  ReadableStreamBYOBRequest,\r\n  ReadableByteStreamController,\r\n  ReadableStreamDefaultController,\r\n  TransferredReadableStream,\r\n\r\n  // Exported Brand Checks\r\n  isReadableStream,\r\n  isReadableByteStreamController,\r\n  isReadableStreamBYOBRequest,\r\n  isReadableStreamDefaultReader,\r\n  isReadableStreamBYOBReader,\r\n  isWritableStreamDefaultWriter,\r\n  isWritableStreamDefaultController,\r\n\r\n  readableStreamPipeTo,\r\n  readableStreamTee,\r\n  readableByteStreamControllerConvertPullIntoDescriptor,\r\n  isReadableStreamLocked,\r\n  readableStreamCancel,\r\n  readableStreamClose,\r\n  readableStreamError,\r\n  readableStreamHasDefaultReader,\r\n  readableStreamGetNumReadRequests,\r\n  readableStreamHasBYOBReader,\r\n  readableStreamGetNumReadIntoRequests,\r\n  readableStreamFulfillReadRequest,\r\n  readableStreamFulfillReadIntoRequest,\r\n  readableStreamAddReadRequest,\r\n  readableStreamAddReadIntoRequest,\r\n  readableStreamReaderGenericCancel,\r\n  readableStreamReaderGenericInitialize,\r\n  readableStreamReaderGenericRelease,\r\n  readableStreamBYOBReaderRead,\r\n  readableStreamDefaultReaderRead,\r\n  setupReadableStreamBYOBReader,\r\n  setupReadableStreamDefaultReader,\r\n  readableStreamDefaultControllerClose,\r\n  readableStreamDefaultControllerEnqueue,\r\n  readableStreamDefaultControllerHasBackpressure,\r\n  readableStreamDefaultControllerCanCloseOrEnqueue,\r\n  readableStreamDefaultControllerGetDesiredSize,\r\n  readableStreamDefaultControllerShouldCallPull,\r\n  readableStreamDefaultControllerCallPullIfNeeded,\r\n  readableStreamDefaultControllerClearAlgorithms,\r\n  readableStreamDefaultControllerError,\r\n  readableStreamDefaultControllerCancelSteps,\r\n  readableStreamDefaultControllerPullSteps,\r\n  setupReadableStreamDefaultController,\r\n  setupReadableStreamDefaultControllerFromSource,\r\n  readableByteStreamControllerClose,\r\n  readableByteStreamControllerCommitPullIntoDescriptor,\r\n  readableByteStreamControllerInvalidateBYOBRequest,\r\n  readableByteStreamControllerClearAlgorithms,\r\n  readableByteStreamControllerClearPendingPullIntos,\r\n  readableByteStreamControllerGetDesiredSize,\r\n  readableByteStreamControllerShouldCallPull,\r\n  readableByteStreamControllerHandleQueueDrain,\r\n  readableByteStreamControllerPullInto,\r\n  readableByteStreamControllerRespondInternal,\r\n  readableByteStreamControllerRespond,\r\n  readableByteStreamControllerRespondInClosedState,\r\n  readableByteStreamControllerFillHeadPullIntoDescriptor,\r\n  readableByteStreamControllerEnqueue,\r\n  readableByteStreamControllerEnqueueChunkToQueue,\r\n  readableByteStreamControllerFillPullIntoDescriptorFromQueue,\r\n  readableByteStreamControllerProcessPullIntoDescriptorsUsingQueue,\r\n  readableByteStreamControllerRespondInReadableState,\r\n  readableByteStreamControllerRespondWithNewView,\r\n  readableByteStreamControllerShiftPendingPullInto,\r\n  readableByteStreamControllerCallPullIfNeeded,\r\n  readableByteStreamControllerError,\r\n  readableByteStreamControllerCancelSteps,\r\n  readableByteStreamControllerPullSteps,\r\n  setupReadableByteStreamController,\r\n  setupReadableByteStreamControllerFromSource,\r\n  createReadableStream,\r\n  createReadableByteStream,\r\n};\r\n"
  },
  "211": {
    "metadata": {
      "scriptId": "211",
      "url": "node:internal/webstreams/writablestream",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1377,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "fe94b4e6a539ada07eda96dc16aa628a032e4cb31652495a510f051077879901",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 39648,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/webstreams/writablestream"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeShift,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeCall,\r\n  ObjectDefineProperties,\r\n  ObjectSetPrototypeOf,\r\n  Promise,\r\n  PromisePrototypeThen,\r\n  PromiseReject,\r\n  PromiseResolve,\r\n  Symbol,\r\n  SymbolToStringTag,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_STATE,\r\n    ERR_INVALID_THIS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  DOMException,\r\n} = internalBinding('messaging');\r\n\r\nconst {\r\n  createDeferredPromise,\r\n  customInspectSymbol: kInspect,\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n  SideEffectFreeRegExpPrototypeSymbolReplace,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  validateObject,\r\n  kValidateObjectAllowObjects,\r\n  kValidateObjectAllowObjectsAndNull,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  MessageChannel,\r\n} = require('internal/worker/io');\r\n\r\nconst {\r\n  kDeserialize,\r\n  kTransfer,\r\n  kTransferList,\r\n  markTransferMode,\r\n} = require('internal/worker/js_transferable');\r\n\r\nconst {\r\n  createPromiseCallback,\r\n  customInspect,\r\n  dequeueValue,\r\n  enqueueValueWithSize,\r\n  extractHighWaterMark,\r\n  extractSizeAlgorithm,\r\n  lazyTransfer,\r\n  isBrandCheck,\r\n  isPromisePending,\r\n  peekQueueValue,\r\n  resetQueue,\r\n  setPromiseHandled,\r\n  nonOpCancel,\r\n  nonOpStart,\r\n  nonOpWrite,\r\n  kType,\r\n  kState,\r\n} = require('internal/webstreams/util');\r\n\r\nconst {\r\n  kIsClosedPromise,\r\n  kControllerErrorFunction,\r\n} = require('internal/streams/utils');\r\n\r\nconst {\r\n  AbortController,\r\n} = require('internal/abort_controller');\r\n\r\nconst assert = require('internal/assert');\r\n\r\nconst kAbort = Symbol('kAbort');\r\nconst kCloseSentinel = Symbol('kCloseSentinel');\r\nconst kError = Symbol('kError');\r\nconst kSkipThrow = Symbol('kSkipThrow');\r\n\r\nlet releasedError;\r\n\r\nfunction lazyWritableReleasedError() {\r\n  if (releasedError) {\r\n    return releasedError;\r\n  }\r\n  const userModuleRegExp = /^ {4}at (?:[^/\\\\(]+ \\()(?!node:(.+):\\d+:\\d+\\)$).*/gm;\r\n\r\n  releasedError = new ERR_INVALID_STATE.TypeError('Writer has been released');\r\n  // Avoid V8 leak and remove userland stackstrace\r\n  releasedError.stack = SideEffectFreeRegExpPrototypeSymbolReplace(userModuleRegExp, releasedError.stack, '');\r\n  return releasedError;\r\n}\r\n\r\nconst getNonWritablePropertyDescriptor = (value) => {\r\n  return {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value,\r\n  };\r\n};\r\n\r\n/**\r\n * @typedef {import('../abort_controller').AbortSignal} AbortSignal\r\n * @typedef {import('./queuingstrategies').QueuingStrategy\r\n * } QueuingStrategy\r\n * @typedef {import('./queuingstrategies').QueuingStrategySize\r\n * } QueuingStrategySize\r\n */\r\n\r\n/**\r\n * @callback UnderlyingSinkStartCallback\r\n * @param {WritableStreamDefaultController} controller\r\n */\r\n\r\n/**\r\n * @callback UnderlyingSinkWriteCallback\r\n * @param {any} chunk\r\n * @param {WritableStreamDefaultController} controller\r\n * @returns {Promise<void>}\r\n */\r\n\r\n/**\r\n * @callback UnderlyingSinkCloseCallback\r\n * @returns {Promise<void>}\r\n */\r\n\r\n/**\r\n * @callback UnderlyingSinkAbortCallback\r\n * @param {any} reason\r\n * @returns {Promise<void>}\r\n */\r\n\r\n/**\r\n * @typedef {{\r\n *   start? : UnderlyingSinkStartCallback,\r\n *   write? : UnderlyingSinkWriteCallback,\r\n *   close? : UnderlyingSinkCloseCallback,\r\n *   abort? : UnderlyingSinkAbortCallback,\r\n *   type? : any,\r\n * }} UnderlyingSink\r\n */\r\n\r\nclass WritableStream {\r\n  [kType] = 'WritableStream';\r\n\r\n  /**\r\n   * @param {UnderlyingSink} [sink]\r\n   * @param {QueuingStrategy} [strategy]\r\n   */\r\n  constructor(sink = kEmptyObject, strategy = kEmptyObject) {\r\n    markTransferMode(this, false, true);\r\n    validateObject(sink, 'sink', kValidateObjectAllowObjects);\r\n    validateObject(strategy, 'strategy', kValidateObjectAllowObjectsAndNull);\r\n    const type = sink?.type;\r\n    if (type !== undefined)\r\n      throw new ERR_INVALID_ARG_VALUE.RangeError('type', type);\r\n\r\n    this[kState] = createWritableStreamState();\r\n\r\n    this[kIsClosedPromise] = createDeferredPromise();\r\n    this[kControllerErrorFunction] = () => {};\r\n\r\n    const size = extractSizeAlgorithm(strategy?.size);\r\n    const highWaterMark = extractHighWaterMark(strategy?.highWaterMark, 1);\r\n\r\n    setupWritableStreamDefaultControllerFromSink(\r\n      this,\r\n      sink,\r\n      highWaterMark,\r\n      size);\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {boolean}\r\n   */\r\n  get locked() {\r\n    if (!isWritableStream(this))\r\n      throw new ERR_INVALID_THIS('WritableStream');\r\n    return isWritableStreamLocked(this);\r\n  }\r\n\r\n  /**\r\n   * @param {any} [reason]\r\n   * @returns {Promise<void>}\r\n   */\r\n  abort(reason = undefined) {\r\n    if (!isWritableStream(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('WritableStream'));\r\n    if (isWritableStreamLocked(this)) {\r\n      return PromiseReject(\r\n        new ERR_INVALID_STATE.TypeError('WritableStream is locked'));\r\n    }\r\n    return writableStreamAbort(this, reason);\r\n  }\r\n\r\n  /**\r\n   * @returns {Promise<void>}\r\n   */\r\n  close() {\r\n    if (!isWritableStream(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('WritableStream'));\r\n    if (isWritableStreamLocked(this)) {\r\n      return PromiseReject(\r\n        new ERR_INVALID_STATE.TypeError('WritableStream is locked'));\r\n    }\r\n    if (writableStreamCloseQueuedOrInFlight(this)) {\r\n      return PromiseReject(\r\n        new ERR_INVALID_STATE.TypeError('Failure closing WritableStream'));\r\n    }\r\n    return writableStreamClose(this);\r\n  }\r\n\r\n  /**\r\n   * @returns {WritableStreamDefaultWriter}\r\n   */\r\n  getWriter() {\r\n    if (!isWritableStream(this))\r\n      throw new ERR_INVALID_THIS('WritableStream');\r\n    // eslint-disable-next-line no-use-before-define\r\n    return new WritableStreamDefaultWriter(this);\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, this[kType], {\r\n      locked: this.locked,\r\n      state: this[kState].state,\r\n    });\r\n  }\r\n\r\n  [kTransfer]() {\r\n    if (!isWritableStream(this))\r\n      throw new ERR_INVALID_THIS('WritableStream');\r\n    if (this.locked) {\r\n      this[kState].transfer.port1?.close();\r\n      this[kState].transfer.port1 = undefined;\r\n      this[kState].transfer.port2 = undefined;\r\n      throw new DOMException(\r\n        'Cannot transfer a locked WritableStream',\r\n        'DataCloneError');\r\n    }\r\n\r\n    const {\r\n      readable,\r\n      promise,\r\n    } = lazyTransfer().newCrossRealmReadableStream(\r\n      this,\r\n      this[kState].transfer.port1);\r\n\r\n    this[kState].transfer.readable = readable;\r\n    this[kState].transfer.promise = promise;\r\n\r\n    return {\r\n      data: { port: this[kState].transfer.port2 },\r\n      deserializeInfo:\r\n        'internal/webstreams/writablestream:TransferredWritableStream',\r\n    };\r\n  }\r\n\r\n  [kTransferList]() {\r\n    const { port1, port2 } = new MessageChannel();\r\n    this[kState].transfer.port1 = port1;\r\n    this[kState].transfer.port2 = port2;\r\n    return [ port2 ];\r\n  }\r\n\r\n  [kDeserialize]({ port }) {\r\n    const transfer = lazyTransfer();\r\n    setupWritableStreamDefaultControllerFromSink(\r\n      this,\r\n      // The MessagePort is set to be referenced when reading.\r\n      // After two MessagePorts are closed, there is a problem with\r\n      // lingering promise not being properly resolved.\r\n      // https://github.com/nodejs/node/issues/51486\r\n      new transfer.CrossRealmTransformWritableSink(port, true),\r\n      1,\r\n      () => 1);\r\n  }\r\n}\r\n\r\nObjectDefineProperties(WritableStream.prototype, {\r\n  locked: kEnumerableProperty,\r\n  abort: kEnumerableProperty,\r\n  close: kEnumerableProperty,\r\n  getWriter: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(WritableStream.name),\r\n});\r\n\r\nfunction InternalTransferredWritableStream() {\r\n  markTransferMode(this, false, true);\r\n  this[kType] = 'WritableStream';\r\n  this[kState] = createWritableStreamState();\r\n\r\n  this[kIsClosedPromise] = createDeferredPromise();\r\n}\r\n\r\nObjectSetPrototypeOf(InternalTransferredWritableStream.prototype, WritableStream.prototype);\r\nObjectSetPrototypeOf(InternalTransferredWritableStream, WritableStream);\r\n\r\nfunction TransferredWritableStream() {\r\n  const stream = new InternalTransferredWritableStream();\r\n\r\n  stream.constructor = WritableStream;\r\n\r\n  return stream;\r\n}\r\n\r\nTransferredWritableStream.prototype[kDeserialize] = () => {};\r\n\r\nclass WritableStreamDefaultWriter {\r\n  [kType] = 'WritableStreamDefaultWriter';\r\n\r\n  /**\r\n   * @param {WritableStream} stream\r\n   */\r\n  constructor(stream) {\r\n    if (!isWritableStream(stream))\r\n      throw new ERR_INVALID_ARG_TYPE('stream', 'WritableStream', stream);\r\n    this[kState] = {\r\n      stream: undefined,\r\n      close: {\r\n        promise: undefined,\r\n        resolve: undefined,\r\n        reject: undefined,\r\n      },\r\n      ready: {\r\n        promise: undefined,\r\n        resolve: undefined,\r\n        reject: undefined,\r\n      },\r\n    };\r\n    setupWritableStreamDefaultWriter(this, stream);\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {Promise<void>}\r\n   */\r\n  get closed() {\r\n    if (!isWritableStreamDefaultWriter(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('WritableStreamDefaultWriter'));\r\n    return this[kState].close.promise;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get desiredSize() {\r\n    if (!isWritableStreamDefaultWriter(this))\r\n      throw new ERR_INVALID_THIS('WritableStreamDefaultWriter');\r\n    if (this[kState].stream === undefined) {\r\n      throw new ERR_INVALID_STATE.TypeError(\r\n        'Writer is not bound to a WritableStream');\r\n    }\r\n    return writableStreamDefaultWriterGetDesiredSize(this);\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {Promise<void>}\r\n   */\r\n  get ready() {\r\n    if (!isWritableStreamDefaultWriter(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('WritableStreamDefaultWriter'));\r\n    return this[kState].ready.promise;\r\n  }\r\n\r\n  /**\r\n   * @param {any} [reason]\r\n   * @returns {Promise<void>}\r\n   */\r\n  abort(reason = undefined) {\r\n    if (!isWritableStreamDefaultWriter(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('WritableStreamDefaultWriter'));\r\n    if (this[kState].stream === undefined) {\r\n      return PromiseReject(\r\n        new ERR_INVALID_STATE.TypeError(\r\n          'Writer is not bound to a WritableStream'));\r\n    }\r\n    return writableStreamDefaultWriterAbort(this, reason);\r\n  }\r\n\r\n  /**\r\n   * @returns {Promise<void>}\r\n   */\r\n  close() {\r\n    if (!isWritableStreamDefaultWriter(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('WritableStreamDefaultWriter'));\r\n    const {\r\n      stream,\r\n    } = this[kState];\r\n    if (stream === undefined) {\r\n      return PromiseReject(\r\n        new ERR_INVALID_STATE.TypeError(\r\n          'Writer is not bound to a WritableStream'));\r\n    }\r\n    if (writableStreamCloseQueuedOrInFlight(stream)) {\r\n      return PromiseReject(\r\n        new ERR_INVALID_STATE.TypeError('Failure to close WritableStream'));\r\n    }\r\n    return writableStreamDefaultWriterClose(this);\r\n  }\r\n\r\n  releaseLock() {\r\n    if (!isWritableStreamDefaultWriter(this))\r\n      throw new ERR_INVALID_THIS('WritableStreamDefaultWriter');\r\n    const {\r\n      stream,\r\n    } = this[kState];\r\n    if (stream === undefined)\r\n      return;\r\n    assert(stream[kState].writer !== undefined);\r\n    writableStreamDefaultWriterRelease(this);\r\n  }\r\n\r\n  /**\r\n   * @param {any} [chunk]\r\n   * @returns {Promise<void>}\r\n   */\r\n  write(chunk = undefined) {\r\n    if (!isWritableStreamDefaultWriter(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('WritableStreamDefaultWriter'));\r\n    if (this[kState].stream === undefined) {\r\n      return PromiseReject(\r\n        new ERR_INVALID_STATE.TypeError(\r\n          'Writer is not bound to a WritableStream'));\r\n    }\r\n    return writableStreamDefaultWriterWrite(this, chunk);\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, this[kType], {\r\n      stream: this[kState].stream,\r\n      close: this[kState].close.promise,\r\n      ready: this[kState].ready.promise,\r\n      desiredSize: this.desiredSize,\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(WritableStreamDefaultWriter.prototype, {\r\n  closed: kEnumerableProperty,\r\n  ready: kEnumerableProperty,\r\n  desiredSize: kEnumerableProperty,\r\n  abort: kEnumerableProperty,\r\n  close: kEnumerableProperty,\r\n  releaseLock: kEnumerableProperty,\r\n  write: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(WritableStreamDefaultWriter.name),\r\n});\r\n\r\nclass WritableStreamDefaultController {\r\n  [kType] = 'WritableStreamDefaultController';\r\n\r\n  constructor(skipThrowSymbol = undefined) {\r\n    if (skipThrowSymbol !== kSkipThrow) {\r\n      throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n    }\r\n  }\r\n\r\n  [kAbort](reason) {\r\n    const result = this[kState].abortAlgorithm(reason);\r\n    writableStreamDefaultControllerClearAlgorithms(this);\r\n    return result;\r\n  }\r\n\r\n  [kError]() {\r\n    resetQueue(this);\r\n  }\r\n\r\n  /**\r\n   * @type {AbortSignal}\r\n   */\r\n  get signal() {\r\n    if (!isWritableStreamDefaultController(this))\r\n      throw new ERR_INVALID_THIS('WritableStreamDefaultController');\r\n    return this[kState].abortController.signal;\r\n  }\r\n\r\n  /**\r\n   * @param {any} [error]\r\n   */\r\n  error(error = undefined) {\r\n    if (!isWritableStreamDefaultController(this))\r\n      throw new ERR_INVALID_THIS('WritableStreamDefaultController');\r\n    if (this[kState].stream[kState].state !== 'writable')\r\n      return;\r\n    writableStreamDefaultControllerError(this, error);\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, this[kType], {\r\n      stream: this[kState].stream,\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(WritableStreamDefaultController.prototype, {\r\n  signal: kEnumerableProperty,\r\n  error: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(WritableStreamDefaultController.name),\r\n});\r\n\r\nfunction InternalWritableStream(start, write, close, abort, highWaterMark, size) {\r\n  markTransferMode(this, false, true);\r\n  this[kType] = 'WritableStream';\r\n  this[kState] = createWritableStreamState();\r\n  this[kIsClosedPromise] = createDeferredPromise();\r\n\r\n  const controller = new WritableStreamDefaultController(kSkipThrow);\r\n  setupWritableStreamDefaultController(\r\n    this,\r\n    controller,\r\n    start,\r\n    write,\r\n    close,\r\n    abort,\r\n    highWaterMark,\r\n    size,\r\n  );\r\n}\r\n\r\nObjectSetPrototypeOf(InternalWritableStream.prototype, WritableStream.prototype);\r\nObjectSetPrototypeOf(InternalWritableStream, WritableStream);\r\n\r\nfunction createWritableStream(start, write, close, abort, highWaterMark = 1, size = () => 1) {\r\n  const stream = new InternalWritableStream(start, write, close, abort, highWaterMark, size);\r\n\r\n  // For spec compliance the InternalWritableStream must be a WritableStream\r\n  stream.constructor = WritableStream;\r\n  return stream;\r\n}\r\n\r\nconst isWritableStream =\r\n  isBrandCheck('WritableStream');\r\nconst isWritableStreamDefaultWriter =\r\n  isBrandCheck('WritableStreamDefaultWriter');\r\nconst isWritableStreamDefaultController =\r\n  isBrandCheck('WritableStreamDefaultController');\r\n\r\nfunction createWritableStreamState() {\r\n  return {\r\n    __proto__: null,\r\n    close: createDeferredPromise(),\r\n    closeRequest: {\r\n      __proto__: null,\r\n      promise: undefined,\r\n      resolve: undefined,\r\n      reject: undefined,\r\n    },\r\n    inFlightWriteRequest: {\r\n      __proto__: null,\r\n      promise: undefined,\r\n      resolve: undefined,\r\n      reject: undefined,\r\n    },\r\n    inFlightCloseRequest: {\r\n      __proto__: null,\r\n      promise: undefined,\r\n      resolve: undefined,\r\n      reject: undefined,\r\n    },\r\n    pendingAbortRequest: {\r\n      __proto__: null,\r\n      abort: {\r\n        __proto__: null,\r\n        promise: undefined,\r\n        resolve: undefined,\r\n        reject: undefined,\r\n      },\r\n      reason: undefined,\r\n      wasAlreadyErroring: false,\r\n    },\r\n    backpressure: false,\r\n    controller: undefined,\r\n    state: 'writable',\r\n    storedError: undefined,\r\n    writeRequests: [],\r\n    writer: undefined,\r\n    transfer: {\r\n      __proto__: null,\r\n      readable: undefined,\r\n      port1: undefined,\r\n      port2: undefined,\r\n      promise: undefined,\r\n    },\r\n  };\r\n}\r\n\r\nfunction isWritableStreamLocked(stream) {\r\n  return stream[kState].writer !== undefined;\r\n}\r\n\r\nfunction setupWritableStreamDefaultWriter(writer, stream) {\r\n  if (isWritableStreamLocked(stream))\r\n    throw new ERR_INVALID_STATE.TypeError('WritableStream is locked');\r\n  writer[kState].stream = stream;\r\n  stream[kState].writer = writer;\r\n  switch (stream[kState].state) {\r\n    case 'writable':\r\n      if (!writableStreamCloseQueuedOrInFlight(stream) &&\r\n          stream[kState].backpressure) {\r\n        writer[kState].ready = createDeferredPromise();\r\n      } else {\r\n        writer[kState].ready = {\r\n          promise: PromiseResolve(),\r\n          resolve: undefined,\r\n          reject: undefined,\r\n        };\r\n      }\r\n      setClosedPromiseToNewPromise();\r\n      break;\r\n    case 'erroring':\r\n      writer[kState].ready = {\r\n        promise: PromiseReject(stream[kState].storedError),\r\n        resolve: undefined,\r\n        reject: undefined,\r\n      };\r\n      setPromiseHandled(writer[kState].ready.promise);\r\n      setClosedPromiseToNewPromise();\r\n      break;\r\n    case 'closed':\r\n      writer[kState].ready = {\r\n        promise: PromiseResolve(),\r\n        resolve: undefined,\r\n        reject: undefined,\r\n      };\r\n      writer[kState].close = {\r\n        promise: PromiseResolve(),\r\n        resolve: undefined,\r\n        reject: undefined,\r\n      };\r\n      break;\r\n    default:\r\n      writer[kState].ready = {\r\n        promise: PromiseReject(stream[kState].storedError),\r\n        resolve: undefined,\r\n        reject: undefined,\r\n      };\r\n      writer[kState].close = {\r\n        promise: PromiseReject(stream[kState].storedError),\r\n        resolve: undefined,\r\n        reject: undefined,\r\n      };\r\n      setPromiseHandled(writer[kState].ready.promise);\r\n      setPromiseHandled(writer[kState].close.promise);\r\n  }\r\n\r\n  function setClosedPromiseToNewPromise() {\r\n    writer[kState].close = createDeferredPromise();\r\n  }\r\n}\r\n\r\nfunction writableStreamAbort(stream, reason) {\r\n  const {\r\n    state,\r\n    controller,\r\n  } = stream[kState];\r\n  if (state === 'closed' || state === 'errored')\r\n    return PromiseResolve();\r\n\r\n  controller[kState].abortController.abort(reason);\r\n\r\n  if (stream[kState].pendingAbortRequest.abort.promise !== undefined)\r\n    return stream[kState].pendingAbortRequest.abort.promise;\r\n\r\n  assert(state === 'writable' || state === 'erroring');\r\n\r\n  let wasAlreadyErroring = false;\r\n  if (state === 'erroring') {\r\n    wasAlreadyErroring = true;\r\n    reason = undefined;\r\n  }\r\n\r\n  const abort = createDeferredPromise();\r\n\r\n  stream[kState].pendingAbortRequest = {\r\n    abort,\r\n    reason,\r\n    wasAlreadyErroring,\r\n  };\r\n\r\n  if (!wasAlreadyErroring)\r\n    writableStreamStartErroring(stream, reason);\r\n\r\n  return abort.promise;\r\n}\r\n\r\nfunction writableStreamClose(stream) {\r\n  const {\r\n    state,\r\n    writer,\r\n    backpressure,\r\n    controller,\r\n  } = stream[kState];\r\n  if (state === 'closed' || state === 'errored') {\r\n    return PromiseReject(\r\n      new ERR_INVALID_STATE.TypeError('WritableStream is closed'));\r\n  }\r\n  assert(state === 'writable' || state === 'erroring');\r\n  assert(!writableStreamCloseQueuedOrInFlight(stream));\r\n  stream[kState].closeRequest = createDeferredPromise();\r\n  const { promise } = stream[kState].closeRequest;\r\n  if (writer !== undefined && backpressure && state === 'writable')\r\n    writer[kState].ready.resolve?.();\r\n  writableStreamDefaultControllerClose(controller);\r\n  return promise;\r\n}\r\n\r\nfunction writableStreamUpdateBackpressure(stream, backpressure) {\r\n  assert(stream[kState].state === 'writable');\r\n  assert(!writableStreamCloseQueuedOrInFlight(stream));\r\n  const {\r\n    writer,\r\n  } = stream[kState];\r\n  if (writer !== undefined && stream[kState].backpressure !== backpressure) {\r\n    if (backpressure) {\r\n      writer[kState].ready = createDeferredPromise();\r\n    } else {\r\n      writer[kState].ready.resolve?.();\r\n    }\r\n  }\r\n  stream[kState].backpressure = backpressure;\r\n}\r\n\r\nfunction writableStreamStartErroring(stream, reason) {\r\n  assert(stream[kState].storedError === undefined);\r\n  assert(stream[kState].state === 'writable');\r\n  const {\r\n    controller,\r\n    writer,\r\n  } = stream[kState];\r\n  assert(controller !== undefined);\r\n  stream[kState].state = 'erroring';\r\n  stream[kState].storedError = reason;\r\n  if (writer !== undefined) {\r\n    writableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\r\n  }\r\n  if (!writableStreamHasOperationMarkedInFlight(stream) &&\r\n      controller[kState].started) {\r\n    writableStreamFinishErroring(stream);\r\n  }\r\n}\r\n\r\nfunction writableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\r\n  assert(stream[kState].state === 'errored');\r\n  if (stream[kState].closeRequest.promise !== undefined) {\r\n    assert(stream[kState].inFlightCloseRequest.promise === undefined);\r\n    stream[kState].closeRequest.reject?.(stream[kState].storedError);\r\n    stream[kState].closeRequest = {\r\n      promise: undefined,\r\n      reject: undefined,\r\n      resolve: undefined,\r\n    };\r\n  }\r\n\r\n  stream[kIsClosedPromise].reject(stream[kState]?.storedError);\r\n  setPromiseHandled(stream[kIsClosedPromise].promise);\r\n\r\n  const {\r\n    writer,\r\n  } = stream[kState];\r\n  if (writer !== undefined) {\r\n    writer[kState].close.reject?.(stream[kState].storedError);\r\n    setPromiseHandled(writer[kState].close.promise);\r\n  }\r\n}\r\n\r\nfunction writableStreamMarkFirstWriteRequestInFlight(stream) {\r\n  assert(stream[kState].inFlightWriteRequest.promise === undefined);\r\n  assert(stream[kState].writeRequests.length);\r\n  const writeRequest = ArrayPrototypeShift(stream[kState].writeRequests);\r\n  stream[kState].inFlightWriteRequest = writeRequest;\r\n}\r\n\r\nfunction writableStreamMarkCloseRequestInFlight(stream) {\r\n  assert(stream[kState].inFlightWriteRequest.promise === undefined);\r\n  assert(stream[kState].closeRequest.promise !== undefined);\r\n  stream[kState].inFlightCloseRequest = stream[kState].closeRequest;\r\n  stream[kState].closeRequest = {\r\n    promise: undefined,\r\n    resolve: undefined,\r\n    reject: undefined,\r\n  };\r\n}\r\n\r\nfunction writableStreamHasOperationMarkedInFlight(stream) {\r\n  const {\r\n    inFlightWriteRequest,\r\n    inFlightCloseRequest,\r\n  } = stream[kState];\r\n  if (inFlightWriteRequest.promise === undefined &&\r\n      inFlightCloseRequest.promise === undefined) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction writableStreamFinishInFlightWriteWithError(stream, error) {\r\n  assert(stream[kState].inFlightWriteRequest.promise !== undefined);\r\n  stream[kState].inFlightWriteRequest.reject?.(error);\r\n  stream[kState].inFlightWriteRequest = {\r\n    promise: undefined,\r\n    resolve: undefined,\r\n    reject: undefined,\r\n  };\r\n  assert(stream[kState].state === 'writable' ||\r\n         stream[kState].state === 'erroring');\r\n  writableStreamDealWithRejection(stream, error);\r\n}\r\n\r\nfunction writableStreamFinishInFlightWrite(stream) {\r\n  assert(stream[kState].inFlightWriteRequest.promise !== undefined);\r\n  stream[kState].inFlightWriteRequest.resolve?.();\r\n  stream[kState].inFlightWriteRequest = {\r\n    promise: undefined,\r\n    resolve: undefined,\r\n    reject: undefined,\r\n  };\r\n}\r\n\r\nfunction writableStreamFinishInFlightCloseWithError(stream, error) {\r\n  assert(stream[kState].inFlightCloseRequest.promise !== undefined);\r\n  stream[kState].inFlightCloseRequest.reject?.(error);\r\n  stream[kState].inFlightCloseRequest = {\r\n    promise: undefined,\r\n    resolve: undefined,\r\n    reject: undefined,\r\n  };\r\n  assert(stream[kState].state === 'writable' ||\r\n         stream[kState].state === 'erroring');\r\n  if (stream[kState].pendingAbortRequest.abort.promise !== undefined) {\r\n    stream[kState].pendingAbortRequest.abort.reject?.(error);\r\n    stream[kState].pendingAbortRequest = {\r\n      abort: {\r\n        promise: undefined,\r\n        resolve: undefined,\r\n        reject: undefined,\r\n      },\r\n      reason: undefined,\r\n      wasAlreadyErroring: false,\r\n    };\r\n  }\r\n  writableStreamDealWithRejection(stream, error);\r\n}\r\n\r\nfunction writableStreamFinishInFlightClose(stream) {\r\n  assert(stream[kState].inFlightCloseRequest.promise !== undefined);\r\n  stream[kState].inFlightCloseRequest.resolve?.();\r\n  stream[kState].inFlightCloseRequest = {\r\n    promise: undefined,\r\n    resolve: undefined,\r\n    reject: undefined,\r\n  };\r\n  if (stream[kState].state === 'erroring') {\r\n    stream[kState].storedError = undefined;\r\n    if (stream[kState].pendingAbortRequest.abort.promise !== undefined) {\r\n      stream[kState].pendingAbortRequest.abort.resolve?.();\r\n      stream[kState].pendingAbortRequest = {\r\n        abort: {\r\n          promise: undefined,\r\n          resolve: undefined,\r\n          reject: undefined,\r\n        },\r\n        reason: undefined,\r\n        wasAlreadyErroring: false,\r\n      };\r\n    }\r\n  }\r\n  stream[kState].state = 'closed';\r\n  if (stream[kState].writer !== undefined)\r\n    stream[kState].writer[kState].close.resolve?.();\r\n  stream[kIsClosedPromise].resolve?.();\r\n  assert(stream[kState].pendingAbortRequest.abort.promise === undefined);\r\n  assert(stream[kState].storedError === undefined);\r\n}\r\n\r\nfunction writableStreamFinishErroring(stream) {\r\n  assert(stream[kState].state === 'erroring');\r\n  assert(!writableStreamHasOperationMarkedInFlight(stream));\r\n  stream[kState].state = 'errored';\r\n  stream[kState].controller[kError]();\r\n  const storedError = stream[kState].storedError;\r\n  for (let n = 0; n < stream[kState].writeRequests.length; n++)\r\n    stream[kState].writeRequests[n].reject?.(storedError);\r\n  stream[kState].writeRequests = [];\r\n\r\n  if (stream[kState].pendingAbortRequest.abort.promise === undefined) {\r\n    writableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\r\n    return;\r\n  }\r\n\r\n  const abortRequest = stream[kState].pendingAbortRequest;\r\n  stream[kState].pendingAbortRequest = {\r\n    abort: {\r\n      promise: undefined,\r\n      resolve: undefined,\r\n      reject: undefined,\r\n    },\r\n    reason: undefined,\r\n    wasAlreadyErroring: false,\r\n  };\r\n  if (abortRequest.wasAlreadyErroring) {\r\n    abortRequest.abort.reject?.(storedError);\r\n    writableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\r\n    return;\r\n  }\r\n  PromisePrototypeThen(\r\n    stream[kState].controller[kAbort](abortRequest.reason),\r\n    () => {\r\n      abortRequest.abort.resolve?.();\r\n      writableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\r\n    },\r\n    (error) => {\r\n      abortRequest.abort.reject?.(error);\r\n      writableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\r\n    });\r\n}\r\n\r\nfunction writableStreamDealWithRejection(stream, error) {\r\n  const {\r\n    state,\r\n  } = stream[kState];\r\n  if (state === 'writable') {\r\n    writableStreamStartErroring(stream, error);\r\n    return;\r\n  }\r\n\r\n  assert(state === 'erroring');\r\n  writableStreamFinishErroring(stream);\r\n}\r\n\r\nfunction writableStreamCloseQueuedOrInFlight(stream) {\r\n  if (stream[kState].closeRequest.promise === undefined &&\r\n      stream[kState].inFlightCloseRequest.promise === undefined) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction writableStreamAddWriteRequest(stream) {\r\n  assert(isWritableStreamLocked(stream));\r\n  assert(stream[kState].state === 'writable');\r\n  const {\r\n    promise,\r\n    resolve,\r\n    reject,\r\n  } = createDeferredPromise();\r\n  ArrayPrototypePush(\r\n    stream[kState].writeRequests,\r\n    {\r\n      promise,\r\n      resolve,\r\n      reject,\r\n    });\r\n  return promise;\r\n}\r\n\r\nfunction writableStreamDefaultWriterWrite(writer, chunk) {\r\n  const {\r\n    stream,\r\n  } = writer[kState];\r\n  assert(stream !== undefined);\r\n  const {\r\n    controller,\r\n  } = stream[kState];\r\n  const chunkSize = writableStreamDefaultControllerGetChunkSize(\r\n    controller,\r\n    chunk);\r\n  if (stream !== writer[kState].stream) {\r\n    return PromiseReject(\r\n      new ERR_INVALID_STATE.TypeError('Mismatched WritableStreams'));\r\n  }\r\n  const {\r\n    state,\r\n  } = stream[kState];\r\n\r\n  if (state === 'errored')\r\n    return PromiseReject(stream[kState].storedError);\r\n\r\n  if (writableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\r\n    return PromiseReject(\r\n      new ERR_INVALID_STATE.TypeError('WritableStream is closed'));\r\n  }\r\n\r\n  if (state === 'erroring')\r\n    return PromiseReject(stream[kState].storedError);\r\n\r\n  assert(state === 'writable');\r\n\r\n  const promise = writableStreamAddWriteRequest(stream);\r\n  writableStreamDefaultControllerWrite(controller, chunk, chunkSize);\r\n  return promise;\r\n}\r\n\r\nfunction writableStreamDefaultWriterRelease(writer) {\r\n  const {\r\n    stream,\r\n  } = writer[kState];\r\n  assert(stream !== undefined);\r\n  assert(stream[kState].writer === writer);\r\n  const releasedStateError = lazyWritableReleasedError();\r\n  writableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedStateError);\r\n  writableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedStateError);\r\n  stream[kState].writer = undefined;\r\n  writer[kState].stream = undefined;\r\n}\r\n\r\nfunction writableStreamDefaultWriterGetDesiredSize(writer) {\r\n  const {\r\n    stream,\r\n  } = writer[kState];\r\n  switch (stream[kState].state) {\r\n    case 'errored':\r\n      // Fall through\r\n    case 'erroring':\r\n      return null;\r\n    case 'closed':\r\n      return 0;\r\n  }\r\n  return writableStreamDefaultControllerGetDesiredSize(\r\n    stream[kState].controller);\r\n}\r\n\r\nfunction writableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\r\n  if (isPromisePending(writer[kState].ready.promise)) {\r\n    writer[kState].ready.reject?.(error);\r\n  } else {\r\n    writer[kState].ready = {\r\n      promise: PromiseReject(error),\r\n      resolve: undefined,\r\n      reject: undefined,\r\n    };\r\n  }\r\n  setPromiseHandled(writer[kState].ready.promise);\r\n}\r\n\r\nfunction writableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\r\n  if (isPromisePending(writer[kState].close.promise)) {\r\n    writer[kState].close.reject?.(error);\r\n  } else {\r\n    writer[kState].close = {\r\n      promise: PromiseReject(error),\r\n      resolve: undefined,\r\n      reject: undefined,\r\n    };\r\n  }\r\n  setPromiseHandled(writer[kState].close.promise);\r\n}\r\n\r\nfunction writableStreamDefaultWriterCloseWithErrorPropagation(writer) {\r\n  const {\r\n    stream,\r\n  } = writer[kState];\r\n  assert(stream !== undefined);\r\n  const {\r\n    state,\r\n  } = stream[kState];\r\n  if (writableStreamCloseQueuedOrInFlight(stream) || state === 'closed')\r\n    return PromiseResolve();\r\n\r\n  if (state === 'errored')\r\n    return PromiseReject(stream[kState].storedError);\r\n\r\n  assert(state === 'writable' || state === 'erroring');\r\n\r\n  return writableStreamDefaultWriterClose(writer);\r\n}\r\n\r\nfunction writableStreamDefaultWriterClose(writer) {\r\n  const {\r\n    stream,\r\n  } = writer[kState];\r\n  assert(stream !== undefined);\r\n  return writableStreamClose(stream);\r\n}\r\n\r\nfunction writableStreamDefaultWriterAbort(writer, reason) {\r\n  const {\r\n    stream,\r\n  } = writer[kState];\r\n  assert(stream !== undefined);\r\n  return writableStreamAbort(stream, reason);\r\n}\r\n\r\nfunction writableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\r\n  try {\r\n    enqueueValueWithSize(controller, chunk, chunkSize);\r\n  } catch (error) {\r\n    writableStreamDefaultControllerErrorIfNeeded(controller, error);\r\n    return;\r\n  }\r\n  const {\r\n    stream,\r\n  } = controller[kState];\r\n  if (!writableStreamCloseQueuedOrInFlight(stream) &&\r\n      stream[kState].state === 'writable') {\r\n    writableStreamUpdateBackpressure(\r\n      stream,\r\n      writableStreamDefaultControllerGetBackpressure(controller));\r\n  }\r\n  writableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\r\n}\r\n\r\nfunction writableStreamDefaultControllerProcessWrite(controller, chunk) {\r\n  const {\r\n    stream,\r\n    writeAlgorithm,\r\n  } = controller[kState];\r\n  writableStreamMarkFirstWriteRequestInFlight(stream);\r\n\r\n  PromisePrototypeThen(\r\n    writeAlgorithm(chunk, controller),\r\n    () => {\r\n      writableStreamFinishInFlightWrite(stream);\r\n      const {\r\n        state,\r\n      } = stream[kState];\r\n      assert(state === 'writable' || state === 'erroring');\r\n      dequeueValue(controller);\r\n      if (!writableStreamCloseQueuedOrInFlight(stream) &&\r\n          state === 'writable') {\r\n        writableStreamUpdateBackpressure(\r\n          stream,\r\n          writableStreamDefaultControllerGetBackpressure(controller));\r\n      }\r\n      writableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\r\n    },\r\n    (error) => {\r\n      if (stream[kState].state === 'writable')\r\n        writableStreamDefaultControllerClearAlgorithms(controller);\r\n      writableStreamFinishInFlightWriteWithError(stream, error);\r\n    });\r\n\r\n}\r\n\r\nfunction writableStreamDefaultControllerProcessClose(controller) {\r\n  const {\r\n    closeAlgorithm,\r\n    queue,\r\n    stream,\r\n  } = controller[kState];\r\n  writableStreamMarkCloseRequestInFlight(stream);\r\n  dequeueValue(controller);\r\n  assert(!queue.length);\r\n  const sinkClosePromise = closeAlgorithm();\r\n  writableStreamDefaultControllerClearAlgorithms(controller);\r\n  PromisePrototypeThen(\r\n    sinkClosePromise,\r\n    () => writableStreamFinishInFlightClose(stream),\r\n    (error) => writableStreamFinishInFlightCloseWithError(stream, error));\r\n}\r\n\r\nfunction writableStreamDefaultControllerGetDesiredSize(controller) {\r\n  const {\r\n    highWaterMark,\r\n    queueTotalSize,\r\n  } = controller[kState];\r\n  return highWaterMark - queueTotalSize;\r\n}\r\n\r\nfunction writableStreamDefaultControllerGetChunkSize(controller, chunk) {\r\n  try {\r\n    return FunctionPrototypeCall(\r\n      controller[kState].sizeAlgorithm,\r\n      undefined,\r\n      chunk);\r\n  } catch (error) {\r\n    writableStreamDefaultControllerErrorIfNeeded(controller, error);\r\n    return 1;\r\n  }\r\n}\r\n\r\nfunction writableStreamDefaultControllerErrorIfNeeded(controller, error) {\r\n  const {\r\n    stream,\r\n  } = controller[kState];\r\n  if (stream[kState].state === 'writable')\r\n    writableStreamDefaultControllerError(controller, error);\r\n}\r\n\r\nfunction writableStreamDefaultControllerError(controller, error) {\r\n  const {\r\n    stream,\r\n  } = controller[kState];\r\n  assert(stream[kState].state === 'writable');\r\n  writableStreamDefaultControllerClearAlgorithms(controller);\r\n  writableStreamStartErroring(stream, error);\r\n}\r\n\r\nfunction writableStreamDefaultControllerClose(controller) {\r\n  enqueueValueWithSize(controller, kCloseSentinel, 0);\r\n  writableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\r\n}\r\n\r\nfunction writableStreamDefaultControllerClearAlgorithms(controller) {\r\n  controller[kState].writeAlgorithm = undefined;\r\n  controller[kState].closeAlgorithm = undefined;\r\n  controller[kState].abortAlgorithm = undefined;\r\n  controller[kState].sizeAlgorithm = undefined;\r\n}\r\n\r\nfunction writableStreamDefaultControllerGetBackpressure(controller) {\r\n  return writableStreamDefaultControllerGetDesiredSize(controller) <= 0;\r\n}\r\n\r\nfunction writableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\r\n  const {\r\n    queue,\r\n    started,\r\n    stream,\r\n  } = controller[kState];\r\n  if (!started || stream[kState].inFlightWriteRequest.promise !== undefined)\r\n    return;\r\n\r\n  if (stream[kState].state === 'erroring') {\r\n    writableStreamFinishErroring(stream);\r\n    return;\r\n  }\r\n\r\n  if (!queue.length)\r\n    return;\r\n\r\n  const value = peekQueueValue(controller);\r\n  if (value === kCloseSentinel)\r\n    writableStreamDefaultControllerProcessClose(controller);\r\n  else\r\n    writableStreamDefaultControllerProcessWrite(controller, value);\r\n}\r\n\r\nfunction setupWritableStreamDefaultControllerFromSink(\r\n  stream,\r\n  sink,\r\n  highWaterMark,\r\n  sizeAlgorithm) {\r\n  const controller = new WritableStreamDefaultController(kSkipThrow);\r\n  const start = sink?.start;\r\n  const write = sink?.write;\r\n  const close = sink?.close;\r\n  const abort = sink?.abort;\r\n  const startAlgorithm = start ?\r\n    FunctionPrototypeBind(start, sink, controller) :\r\n    nonOpStart;\r\n  const writeAlgorithm = write ?\r\n    createPromiseCallback('sink.write', write, sink) :\r\n    nonOpWrite;\r\n  const closeAlgorithm = close ?\r\n    createPromiseCallback('sink.close', close, sink) :\r\n    nonOpCancel;\r\n  const abortAlgorithm = abort ?\r\n    createPromiseCallback('sink.abort', abort, sink) :\r\n    nonOpCancel;\r\n  setupWritableStreamDefaultController(\r\n    stream,\r\n    controller,\r\n    startAlgorithm,\r\n    writeAlgorithm,\r\n    closeAlgorithm,\r\n    abortAlgorithm,\r\n    highWaterMark,\r\n    sizeAlgorithm);\r\n}\r\n\r\nfunction setupWritableStreamDefaultController(\r\n  stream,\r\n  controller,\r\n  startAlgorithm,\r\n  writeAlgorithm,\r\n  closeAlgorithm,\r\n  abortAlgorithm,\r\n  highWaterMark,\r\n  sizeAlgorithm) {\r\n  assert(isWritableStream(stream));\r\n  assert(stream[kState].controller === undefined);\r\n  controller[kState] = {\r\n    abortAlgorithm,\r\n    closeAlgorithm,\r\n    highWaterMark,\r\n    queue: [],\r\n    queueTotalSize: 0,\r\n    abortController: new AbortController(),\r\n    sizeAlgorithm,\r\n    started: false,\r\n    stream,\r\n    writeAlgorithm,\r\n  };\r\n  stream[kState].controller = controller;\r\n  stream[kControllerErrorFunction] = FunctionPrototypeBind(controller.error, controller);\r\n\r\n  writableStreamUpdateBackpressure(\r\n    stream,\r\n    writableStreamDefaultControllerGetBackpressure(controller));\r\n\r\n  const startResult = startAlgorithm();\r\n\r\n  PromisePrototypeThen(\r\n    new Promise((r) => r(startResult)),\r\n    () => {\r\n      assert(stream[kState].state === 'writable' ||\r\n             stream[kState].state === 'erroring');\r\n      controller[kState].started = true;\r\n      writableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\r\n    },\r\n    (error) => {\r\n      assert(stream[kState].state === 'writable' ||\r\n             stream[kState].state === 'erroring');\r\n      controller[kState].started = true;\r\n      writableStreamDealWithRejection(stream, error);\r\n    });\r\n}\r\n\r\nmodule.exports = {\r\n  WritableStream,\r\n  WritableStreamDefaultWriter,\r\n  WritableStreamDefaultController,\r\n  TransferredWritableStream,\r\n\r\n  // Exported Brand Checks\r\n  isWritableStream,\r\n  isWritableStreamDefaultController,\r\n  isWritableStreamDefaultWriter,\r\n\r\n  isWritableStreamLocked,\r\n  setupWritableStreamDefaultWriter,\r\n  writableStreamAbort,\r\n  writableStreamClose,\r\n  writableStreamUpdateBackpressure,\r\n  writableStreamStartErroring,\r\n  writableStreamRejectCloseAndClosedPromiseIfNeeded,\r\n  writableStreamMarkFirstWriteRequestInFlight,\r\n  writableStreamMarkCloseRequestInFlight,\r\n  writableStreamHasOperationMarkedInFlight,\r\n  writableStreamFinishInFlightWriteWithError,\r\n  writableStreamFinishInFlightWrite,\r\n  writableStreamFinishInFlightCloseWithError,\r\n  writableStreamFinishInFlightClose,\r\n  writableStreamFinishErroring,\r\n  writableStreamDealWithRejection,\r\n  writableStreamCloseQueuedOrInFlight,\r\n  writableStreamAddWriteRequest,\r\n  writableStreamDefaultWriterWrite,\r\n  writableStreamDefaultWriterRelease,\r\n  writableStreamDefaultWriterGetDesiredSize,\r\n  writableStreamDefaultWriterEnsureReadyPromiseRejected,\r\n  writableStreamDefaultWriterEnsureClosedPromiseRejected,\r\n  writableStreamDefaultWriterCloseWithErrorPropagation,\r\n  writableStreamDefaultWriterClose,\r\n  writableStreamDefaultWriterAbort,\r\n  writableStreamDefaultControllerWrite,\r\n  writableStreamDefaultControllerProcessWrite,\r\n  writableStreamDefaultControllerProcessClose,\r\n  writableStreamDefaultControllerGetDesiredSize,\r\n  writableStreamDefaultControllerGetChunkSize,\r\n  writableStreamDefaultControllerErrorIfNeeded,\r\n  writableStreamDefaultControllerError,\r\n  writableStreamDefaultControllerClose,\r\n  writableStreamDefaultControllerClearAlgorithms,\r\n  writableStreamDefaultControllerGetBackpressure,\r\n  writableStreamDefaultControllerAdvanceQueueIfNeeded,\r\n  setupWritableStreamDefaultControllerFromSink,\r\n  setupWritableStreamDefaultController,\r\n  createWritableStream,\r\n};\r\n"
  },
  "212": {
    "metadata": {
      "scriptId": "212",
      "url": "node:internal/webstreams/encoding",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 219,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "613ec9e6f341879a3bbc333bc6ce784fd361664d2f1cc0a9518b3333948cc096",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 5169,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/webstreams/encoding"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperties,\r\n  String,\r\n  StringPrototypeCharCodeAt,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  TextDecoder,\r\n  TextEncoder,\r\n} = require('internal/encoding');\r\n\r\nconst {\r\n  TransformStream,\r\n} = require('internal/webstreams/transformstream');\r\n\r\nconst { customInspect } = require('internal/webstreams/util');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_THIS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  customInspectSymbol: kInspect,\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\n\r\n/**\r\n * @typedef {import('./readablestream').ReadableStream} ReadableStream\r\n * @typedef {import('./writablestream').WritableStream} WritableStream\r\n */\r\n\r\nclass TextEncoderStream {\r\n  #pendingHighSurrogate = null;\r\n  #handle;\r\n  #transform;\r\n\r\n  constructor() {\r\n    this.#handle = new TextEncoder();\r\n    this.#transform = new TransformStream({\r\n      transform: (chunk, controller) => {\r\n        // https://encoding.spec.whatwg.org/#encode-and-enqueue-a-chunk\r\n        chunk = String(chunk);\r\n        let finalChunk = '';\r\n        for (let i = 0; i < chunk.length; i++) {\r\n          const item = chunk[i];\r\n          const codeUnit = StringPrototypeCharCodeAt(item, 0);\r\n          if (this.#pendingHighSurrogate !== null) {\r\n            const highSurrogate = this.#pendingHighSurrogate;\r\n            this.#pendingHighSurrogate = null;\r\n            if (0xDC00 <= codeUnit && codeUnit <= 0xDFFF) {\r\n              finalChunk += highSurrogate + item;\r\n              continue;\r\n            }\r\n            finalChunk += '\\uFFFD';\r\n          }\r\n          if (0xD800 <= codeUnit && codeUnit <= 0xDBFF) {\r\n            this.#pendingHighSurrogate = item;\r\n            continue;\r\n          }\r\n          if (0xDC00 <= codeUnit && codeUnit <= 0xDFFF) {\r\n            finalChunk += '\\uFFFD';\r\n            continue;\r\n          }\r\n          finalChunk += item;\r\n        }\r\n        if (finalChunk) {\r\n          const value = this.#handle.encode(finalChunk);\r\n          controller.enqueue(value);\r\n        }\r\n      },\r\n      flush: (controller) => {\r\n        // https://encoding.spec.whatwg.org/#encode-and-flush\r\n        if (this.#pendingHighSurrogate !== null) {\r\n          controller.enqueue(new Uint8Array([0xEF, 0xBF, 0xBD]));\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {string}\r\n   */\r\n  get encoding() {\r\n    return this.#handle.encoding;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {ReadableStream}\r\n   */\r\n  get readable() {\r\n    return this.#transform.readable;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {WritableStream}\r\n   */\r\n  get writable() {\r\n    return this.#transform.writable;\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (this == null)\r\n      throw new ERR_INVALID_THIS('TextEncoderStream');\r\n    return customInspect(depth, options, 'TextEncoderStream', {\r\n      encoding: this.#handle.encoding,\r\n      readable: this.#transform.readable,\r\n      writable: this.#transform.writable,\r\n    });\r\n  }\r\n}\r\n\r\nclass TextDecoderStream {\r\n  #handle;\r\n  #transform;\r\n\r\n  /**\r\n   * @param {string} [encoding]\r\n   * @param {{\r\n   *   fatal? : boolean,\r\n   *   ignoreBOM? : boolean,\r\n   * }} [options]\r\n   */\r\n  constructor(encoding = 'utf-8', options = kEmptyObject) {\r\n    this.#handle = new TextDecoder(encoding, options);\r\n    this.#transform = new TransformStream({\r\n      transform: (chunk, controller) => {\r\n        const value = this.#handle.decode(chunk, { stream: true });\r\n        if (value)\r\n          controller.enqueue(value);\r\n      },\r\n      flush: (controller) => {\r\n        const value = this.#handle.decode();\r\n        if (value)\r\n          controller.enqueue(value);\r\n        controller.terminate();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {string}\r\n   */\r\n  get encoding() {\r\n    return this.#handle.encoding;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {boolean}\r\n   */\r\n  get fatal() {\r\n    return this.#handle.fatal;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {boolean}\r\n   */\r\n  get ignoreBOM() {\r\n    return this.#handle.ignoreBOM;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {ReadableStream}\r\n   */\r\n  get readable() {\r\n    return this.#transform.readable;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {WritableStream}\r\n   */\r\n  get writable() {\r\n    return this.#transform.writable;\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (this == null)\r\n      throw new ERR_INVALID_THIS('TextDecoderStream');\r\n    return customInspect(depth, options, 'TextDecoderStream', {\r\n      encoding: this.#handle.encoding,\r\n      fatal: this.#handle.fatal,\r\n      ignoreBOM: this.#handle.ignoreBOM,\r\n      readable: this.#transform.readable,\r\n      writable: this.#transform.writable,\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(TextEncoderStream.prototype, {\r\n  encoding: kEnumerableProperty,\r\n  readable: kEnumerableProperty,\r\n  writable: kEnumerableProperty,\r\n});\r\n\r\nObjectDefineProperties(TextDecoderStream.prototype, {\r\n  encoding: kEnumerableProperty,\r\n  fatal: kEnumerableProperty,\r\n  ignoreBOM: kEnumerableProperty,\r\n  readable: kEnumerableProperty,\r\n  writable: kEnumerableProperty,\r\n});\r\n\r\nmodule.exports = {\r\n  TextEncoderStream,\r\n  TextDecoderStream,\r\n};\r\n"
  },
  "213": {
    "metadata": {
      "scriptId": "213",
      "url": "node:internal/webstreams/compression",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 161,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "3321b5a008432adc745415a74ad9fb599a61581b9515f33cd497fc8f7af39a4e",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3583,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/webstreams/compression"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperties,\r\n  SymbolToStringTag,\r\n} = primordials;\r\n\r\nconst {\r\n  newReadableWritablePairFromDuplex,\r\n} = require('internal/webstreams/adapters');\r\n\r\nconst { customInspect } = require('internal/webstreams/util');\r\n\r\nconst {\r\n  customInspectSymbol: kInspect,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\n\r\nconst { createEnumConverter } = require('internal/webidl');\r\n\r\nlet zlib;\r\nfunction lazyZlib() {\r\n  zlib ??= require('zlib');\r\n  return zlib;\r\n}\r\n\r\nconst formatConverter = createEnumConverter('CompressionFormat', [\r\n  'deflate',\r\n  'deflate-raw',\r\n  'gzip',\r\n]);\r\n\r\n/**\r\n * @typedef {import('./readablestream').ReadableStream} ReadableStream\r\n * @typedef {import('./writablestream').WritableStream} WritableStream\r\n */\r\n\r\nclass CompressionStream {\r\n  #handle;\r\n  #transform;\r\n\r\n  /**\r\n   * @param {'deflate'|'deflate-raw'|'gzip'} format\r\n   */\r\n  constructor(format) {\r\n    format = formatConverter(format, {\r\n      prefix: \"Failed to construct 'CompressionStream'\",\r\n      context: '1st argument',\r\n    });\r\n    switch (format) {\r\n      case 'deflate':\r\n        this.#handle = lazyZlib().createDeflate();\r\n        break;\r\n      case 'deflate-raw':\r\n        this.#handle = lazyZlib().createDeflateRaw();\r\n        break;\r\n      case 'gzip':\r\n        this.#handle = lazyZlib().createGzip();\r\n        break;\r\n    }\r\n    this.#transform = newReadableWritablePairFromDuplex(this.#handle);\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {ReadableStream}\r\n   */\r\n  get readable() {\r\n    return this.#transform.readable;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {WritableStream}\r\n   */\r\n  get writable() {\r\n    return this.#transform.writable;\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, 'CompressionStream', {\r\n      readable: this.#transform.readable,\r\n      writable: this.#transform.writable,\r\n    });\r\n  }\r\n}\r\n\r\nclass DecompressionStream {\r\n  #handle;\r\n  #transform;\r\n\r\n  /**\r\n   * @param {'deflate'|'deflate-raw'|'gzip'} format\r\n   */\r\n  constructor(format) {\r\n    format = formatConverter(format, {\r\n      prefix: \"Failed to construct 'DecompressionStream'\",\r\n      context: '1st argument',\r\n    });\r\n    switch (format) {\r\n      case 'deflate':\r\n        this.#handle = lazyZlib().createInflate();\r\n        break;\r\n      case 'deflate-raw':\r\n        this.#handle = lazyZlib().createInflateRaw();\r\n        break;\r\n      case 'gzip':\r\n        this.#handle = lazyZlib().createGunzip();\r\n        break;\r\n    }\r\n    this.#transform = newReadableWritablePairFromDuplex(this.#handle);\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {ReadableStream}\r\n   */\r\n  get readable() {\r\n    return this.#transform.readable;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {WritableStream}\r\n   */\r\n  get writable() {\r\n    return this.#transform.writable;\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, 'DecompressionStream', {\r\n      readable: this.#transform.readable,\r\n      writable: this.#transform.writable,\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(CompressionStream.prototype, {\r\n  readable: kEnumerableProperty,\r\n  writable: kEnumerableProperty,\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value: 'CompressionStream',\r\n  },\r\n});\r\n\r\nObjectDefineProperties(DecompressionStream.prototype, {\r\n  readable: kEnumerableProperty,\r\n  writable: kEnumerableProperty,\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value: 'DecompressionStream',\r\n  },\r\n});\r\n\r\nmodule.exports = {\r\n  CompressionStream,\r\n  DecompressionStream,\r\n};\r\n"
  },
  "214": {
    "metadata": {
      "scriptId": "214",
      "url": "node:internal/webstreams/adapters",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1023,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "ceba8b7d5b26dd4719fb2ad886bfb5631a4e90519024fa863d932a0fb2ef6b13",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 26809,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/webstreams/adapters"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeMap,\r\n  Boolean,\r\n  ObjectEntries,\r\n  PromisePrototypeThen,\r\n  PromiseResolve,\r\n  SafePromiseAll,\r\n  SafePromisePrototypeFinally,\r\n  SafeSet,\r\n  TypeError,\r\n  TypedArrayPrototypeGetBuffer,\r\n  TypedArrayPrototypeGetByteLength,\r\n  TypedArrayPrototypeGetByteOffset,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst { TextEncoder } = require('internal/encoding');\r\n\r\nconst {\r\n  ReadableStream,\r\n  isReadableStream,\r\n} = require('internal/webstreams/readablestream');\r\n\r\nconst {\r\n  WritableStream,\r\n  isWritableStream,\r\n} = require('internal/webstreams/writablestream');\r\n\r\nconst {\r\n  CountQueuingStrategy,\r\n  ByteLengthQueuingStrategy,\r\n} = require('internal/webstreams/queuingstrategies');\r\n\r\nconst {\r\n  Writable,\r\n  Readable,\r\n  Duplex,\r\n  destroy,\r\n} = require('stream');\r\n\r\nconst {\r\n  isDestroyed,\r\n  isReadable,\r\n  isWritable,\r\n  isWritableEnded,\r\n} = require('internal/streams/utils');\r\n\r\nconst {\r\n  Buffer,\r\n} = require('buffer');\r\n\r\nconst {\r\n  AbortError,\r\n  ErrnoException,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_STATE,\r\n    ERR_STREAM_PREMATURE_CLOSE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  createDeferredPromise,\r\n  kEmptyObject,\r\n  normalizeEncoding,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  validateBoolean,\r\n  validateFunction,\r\n  validateObject,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  WriteWrap,\r\n  ShutdownWrap,\r\n  kReadBytesOrError,\r\n  kLastWriteWasAsync,\r\n  streamBaseState,\r\n} = internalBinding('stream_wrap');\r\n\r\nconst finished = require('internal/streams/end-of-stream');\r\n\r\nconst { UV_EOF } = internalBinding('uv');\r\n\r\nconst encoder = new TextEncoder();\r\n\r\n// Collect all negative (error) ZLIB codes and Z_NEED_DICT\r\nconst ZLIB_FAILURES = new SafeSet([\r\n  ...ArrayPrototypeFilter(\r\n    ArrayPrototypeMap(\r\n      ObjectEntries(internalBinding('constants').zlib),\r\n      ({ 0: code, 1: value }) => (value < 0 ? code : null),\r\n    ),\r\n    Boolean,\r\n  ),\r\n  'Z_NEED_DICT',\r\n]);\r\n\r\n/**\r\n * @param {Error|null} cause\r\n * @returns {Error|null}\r\n */\r\nfunction handleKnownInternalErrors(cause) {\r\n  switch (true) {\r\n    case cause?.code === 'ERR_STREAM_PREMATURE_CLOSE': {\r\n      return new AbortError(undefined, { cause });\r\n    }\r\n    case ZLIB_FAILURES.has(cause?.code): {\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      const error = new TypeError(undefined, { cause });\r\n      error.code = cause.code;\r\n      return error;\r\n    }\r\n    default:\r\n      return cause;\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {import('../../stream').Writable} Writable\r\n * @typedef {import('../../stream').Readable} Readable\r\n * @typedef {import('./writablestream').WritableStream} WritableStream\r\n * @typedef {import('./readablestream').ReadableStream} ReadableStream\r\n */\r\n\r\n/**\r\n * @typedef {import('../abort_controller').AbortSignal} AbortSignal\r\n */\r\n\r\n/**\r\n * @param {Writable} streamWritable\r\n * @returns {WritableStream}\r\n */\r\nfunction newWritableStreamFromStreamWritable(streamWritable) {\r\n  // Not using the internal/streams/utils isWritableNodeStream utility\r\n  // here because it will return false if streamWritable is a Duplex\r\n  // whose writable option is false. For a Duplex that is not writable,\r\n  // we want it to pass this check but return a closed WritableStream.\r\n  // We check if the given stream is a stream.Writable or http.OutgoingMessage\r\n  const checkIfWritableOrOutgoingMessage =\r\n    streamWritable &&\r\n    typeof streamWritable?.write === 'function' &&\r\n    typeof streamWritable?.on === 'function';\r\n  if (!checkIfWritableOrOutgoingMessage) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'streamWritable',\r\n      'stream.Writable',\r\n      streamWritable,\r\n    );\r\n  }\r\n\r\n  if (isDestroyed(streamWritable) || !isWritable(streamWritable)) {\r\n    const writable = new WritableStream();\r\n    writable.close();\r\n    return writable;\r\n  }\r\n\r\n  const highWaterMark = streamWritable.writableHighWaterMark;\r\n  const strategy =\r\n    streamWritable.writableObjectMode ?\r\n      new CountQueuingStrategy({ highWaterMark }) :\r\n      { highWaterMark };\r\n\r\n  let controller;\r\n  let backpressurePromise;\r\n  let closed;\r\n\r\n  function onDrain() {\r\n    if (backpressurePromise !== undefined)\r\n      backpressurePromise.resolve();\r\n  }\r\n\r\n  const cleanup = finished(streamWritable, (error) => {\r\n    error = handleKnownInternalErrors(error);\r\n\r\n    cleanup();\r\n    // This is a protection against non-standard, legacy streams\r\n    // that happen to emit an error event again after finished is called.\r\n    streamWritable.on('error', () => {});\r\n    if (error != null) {\r\n      if (backpressurePromise !== undefined)\r\n        backpressurePromise.reject(error);\r\n      // If closed is not undefined, the error is happening\r\n      // after the WritableStream close has already started.\r\n      // We need to reject it here.\r\n      if (closed !== undefined) {\r\n        closed.reject(error);\r\n        closed = undefined;\r\n      }\r\n      controller.error(error);\r\n      controller = undefined;\r\n      return;\r\n    }\r\n\r\n    if (closed !== undefined) {\r\n      closed.resolve();\r\n      closed = undefined;\r\n      return;\r\n    }\r\n    controller.error(new AbortError());\r\n    controller = undefined;\r\n  });\r\n\r\n  streamWritable.on('drain', onDrain);\r\n\r\n  return new WritableStream({\r\n    start(c) { controller = c; },\r\n\r\n    async write(chunk) {\r\n      if (streamWritable.writableNeedDrain || !streamWritable.write(chunk)) {\r\n        backpressurePromise = createDeferredPromise();\r\n        return SafePromisePrototypeFinally(\r\n          backpressurePromise.promise, () => {\r\n            backpressurePromise = undefined;\r\n          });\r\n      }\r\n    },\r\n\r\n    abort(reason) {\r\n      destroy(streamWritable, reason);\r\n    },\r\n\r\n    close() {\r\n      if (closed === undefined && !isWritableEnded(streamWritable)) {\r\n        closed = createDeferredPromise();\r\n        streamWritable.end();\r\n        return closed.promise;\r\n      }\r\n\r\n      controller = undefined;\r\n      return PromiseResolve();\r\n    },\r\n  }, strategy);\r\n}\r\n\r\n/**\r\n * @param {WritableStream} writableStream\r\n * @param {{\r\n *   decodeStrings? : boolean,\r\n *   highWaterMark? : number,\r\n *   objectMode? : boolean,\r\n *   signal? : AbortSignal,\r\n * }} [options]\r\n * @returns {Writable}\r\n */\r\nfunction newStreamWritableFromWritableStream(writableStream, options = kEmptyObject) {\r\n  if (!isWritableStream(writableStream)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'writableStream',\r\n      'WritableStream',\r\n      writableStream);\r\n  }\r\n\r\n  validateObject(options, 'options');\r\n  const {\r\n    highWaterMark,\r\n    decodeStrings = true,\r\n    objectMode = false,\r\n    signal,\r\n  } = options;\r\n\r\n  validateBoolean(objectMode, 'options.objectMode');\r\n  validateBoolean(decodeStrings, 'options.decodeStrings');\r\n\r\n  const writer = writableStream.getWriter();\r\n  let closed = false;\r\n\r\n  const writable = new Writable({\r\n    highWaterMark,\r\n    objectMode,\r\n    decodeStrings,\r\n    signal,\r\n\r\n    writev(chunks, callback) {\r\n      function done(error) {\r\n        error = error.filter((e) => e);\r\n        try {\r\n          callback(error.length === 0 ? undefined : error);\r\n        } catch (error) {\r\n          // In a next tick because this is happening within\r\n          // a promise context, and if there are any errors\r\n          // thrown we don't want those to cause an unhandled\r\n          // rejection. Let's just escape the promise and\r\n          // handle it separately.\r\n          process.nextTick(() => destroy(writable, error));\r\n        }\r\n      }\r\n\r\n      PromisePrototypeThen(\r\n        writer.ready,\r\n        () => {\r\n          return PromisePrototypeThen(\r\n            SafePromiseAll(\r\n              chunks,\r\n              (data) => writer.write(data.chunk)),\r\n            done,\r\n            done);\r\n        },\r\n        done);\r\n    },\r\n\r\n    write(chunk, encoding, callback) {\r\n      if (typeof chunk === 'string' && decodeStrings && !objectMode) {\r\n        const enc = normalizeEncoding(encoding);\r\n\r\n        if (enc === 'utf8') {\r\n          chunk = encoder.encode(chunk);\r\n        } else {\r\n          chunk = Buffer.from(chunk, encoding);\r\n          chunk = new Uint8Array(\r\n            TypedArrayPrototypeGetBuffer(chunk),\r\n            TypedArrayPrototypeGetByteOffset(chunk),\r\n            TypedArrayPrototypeGetByteLength(chunk),\r\n          );\r\n        }\r\n      }\r\n\r\n      function done(error) {\r\n        try {\r\n          callback(error);\r\n        } catch (error) {\r\n          destroy(writable, error);\r\n        }\r\n      }\r\n\r\n      PromisePrototypeThen(\r\n        writer.ready,\r\n        () => {\r\n          return PromisePrototypeThen(\r\n            writer.write(chunk),\r\n            done,\r\n            done);\r\n        },\r\n        done);\r\n    },\r\n\r\n    destroy(error, callback) {\r\n      function done() {\r\n        try {\r\n          callback(error);\r\n        } catch (error) {\r\n          // In a next tick because this is happening within\r\n          // a promise context, and if there are any errors\r\n          // thrown we don't want those to cause an unhandled\r\n          // rejection. Let's just escape the promise and\r\n          // handle it separately.\r\n          process.nextTick(() => { throw error; });\r\n        }\r\n      }\r\n\r\n      if (!closed) {\r\n        if (error != null) {\r\n          PromisePrototypeThen(\r\n            writer.abort(error),\r\n            done,\r\n            done);\r\n        } else {\r\n          PromisePrototypeThen(\r\n            writer.close(),\r\n            done,\r\n            done);\r\n        }\r\n        return;\r\n      }\r\n\r\n      done();\r\n    },\r\n\r\n    final(callback) {\r\n      function done(error) {\r\n        try {\r\n          callback(error);\r\n        } catch (error) {\r\n          // In a next tick because this is happening within\r\n          // a promise context, and if there are any errors\r\n          // thrown we don't want those to cause an unhandled\r\n          // rejection. Let's just escape the promise and\r\n          // handle it separately.\r\n          process.nextTick(() => destroy(writable, error));\r\n        }\r\n      }\r\n\r\n      if (!closed) {\r\n        PromisePrototypeThen(\r\n          writer.close(),\r\n          done,\r\n          done);\r\n      }\r\n    },\r\n  });\r\n\r\n  PromisePrototypeThen(\r\n    writer.closed,\r\n    () => {\r\n      // If the WritableStream closes before the stream.Writable has been\r\n      // ended, we signal an error on the stream.Writable.\r\n      closed = true;\r\n      if (!isWritableEnded(writable))\r\n        destroy(writable, new ERR_STREAM_PREMATURE_CLOSE());\r\n    },\r\n    (error) => {\r\n      // If the WritableStream errors before the stream.Writable has been\r\n      // destroyed, signal an error on the stream.Writable.\r\n      closed = true;\r\n      destroy(writable, error);\r\n    });\r\n\r\n  return writable;\r\n}\r\n\r\n/**\r\n * @typedef {import('./queuingstrategies').QueuingStrategy} QueuingStrategy\r\n * @param {Readable} streamReadable\r\n * @param {{\r\n *  strategy : QueuingStrategy\r\n * }} [options]\r\n * @returns {ReadableStream}\r\n */\r\nfunction newReadableStreamFromStreamReadable(streamReadable, options = kEmptyObject) {\r\n  // Not using the internal/streams/utils isReadableNodeStream utility\r\n  // here because it will return false if streamReadable is a Duplex\r\n  // whose readable option is false. For a Duplex that is not readable,\r\n  // we want it to pass this check but return a closed ReadableStream.\r\n  if (typeof streamReadable?._readableState !== 'object') {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'streamReadable',\r\n      'stream.Readable',\r\n      streamReadable);\r\n  }\r\n\r\n  if (isDestroyed(streamReadable) || !isReadable(streamReadable)) {\r\n    const readable = new ReadableStream();\r\n    readable.cancel();\r\n    return readable;\r\n  }\r\n\r\n  const objectMode = streamReadable.readableObjectMode;\r\n  const highWaterMark = streamReadable.readableHighWaterMark;\r\n\r\n  const evaluateStrategyOrFallback = (strategy) => {\r\n    // If there is a strategy available, use it\r\n    if (strategy)\r\n      return strategy;\r\n\r\n    if (objectMode) {\r\n      // When running in objectMode explicitly but no strategy, we just fall\r\n      // back to CountQueuingStrategy\r\n      return new CountQueuingStrategy({ highWaterMark });\r\n    }\r\n\r\n    return new ByteLengthQueuingStrategy({ highWaterMark });\r\n  };\r\n\r\n  const strategy = evaluateStrategyOrFallback(options?.strategy);\r\n\r\n  let controller;\r\n\r\n  function onData(chunk) {\r\n    // Copy the Buffer to detach it from the pool.\r\n    if (Buffer.isBuffer(chunk) && !objectMode)\r\n      chunk = new Uint8Array(chunk);\r\n    controller.enqueue(chunk);\r\n    if (controller.desiredSize <= 0)\r\n      streamReadable.pause();\r\n  }\r\n\r\n  streamReadable.pause();\r\n\r\n  const cleanup = finished(streamReadable, (error) => {\r\n    error = handleKnownInternalErrors(error);\r\n\r\n    cleanup();\r\n    // This is a protection against non-standard, legacy streams\r\n    // that happen to emit an error event again after finished is called.\r\n    streamReadable.on('error', () => {});\r\n    if (error)\r\n      return controller.error(error);\r\n    controller.close();\r\n  });\r\n\r\n  streamReadable.on('data', onData);\r\n\r\n  return new ReadableStream({\r\n    start(c) { controller = c; },\r\n\r\n    pull() { streamReadable.resume(); },\r\n\r\n    cancel(reason) {\r\n      destroy(streamReadable, reason);\r\n    },\r\n  }, strategy);\r\n}\r\n\r\n/**\r\n * @param {ReadableStream} readableStream\r\n * @param {{\r\n *   highWaterMark? : number,\r\n *   encoding? : string,\r\n *   objectMode? : boolean,\r\n *   signal? : AbortSignal,\r\n * }} [options]\r\n * @returns {Readable}\r\n */\r\nfunction newStreamReadableFromReadableStream(readableStream, options = kEmptyObject) {\r\n  if (!isReadableStream(readableStream)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'readableStream',\r\n      'ReadableStream',\r\n      readableStream);\r\n  }\r\n\r\n  validateObject(options, 'options');\r\n  const {\r\n    highWaterMark,\r\n    encoding,\r\n    objectMode = false,\r\n    signal,\r\n  } = options;\r\n\r\n  if (encoding !== undefined && !Buffer.isEncoding(encoding))\r\n    throw new ERR_INVALID_ARG_VALUE(encoding, 'options.encoding');\r\n  validateBoolean(objectMode, 'options.objectMode');\r\n\r\n  const reader = readableStream.getReader();\r\n  let closed = false;\r\n\r\n  const readable = new Readable({\r\n    objectMode,\r\n    highWaterMark,\r\n    encoding,\r\n    signal,\r\n\r\n    read() {\r\n      PromisePrototypeThen(\r\n        reader.read(),\r\n        (chunk) => {\r\n          if (chunk.done) {\r\n            // Value should always be undefined here.\r\n            readable.push(null);\r\n          } else {\r\n            readable.push(chunk.value);\r\n          }\r\n        },\r\n        (error) => destroy(readable, error));\r\n    },\r\n\r\n    destroy(error, callback) {\r\n      function done() {\r\n        try {\r\n          callback(error);\r\n        } catch (error) {\r\n          // In a next tick because this is happening within\r\n          // a promise context, and if there are any errors\r\n          // thrown we don't want those to cause an unhandled\r\n          // rejection. Let's just escape the promise and\r\n          // handle it separately.\r\n          process.nextTick(() => { throw error; });\r\n        }\r\n      }\r\n\r\n      if (!closed) {\r\n        PromisePrototypeThen(\r\n          reader.cancel(error),\r\n          done,\r\n          done);\r\n        return;\r\n      }\r\n      done();\r\n    },\r\n  });\r\n\r\n  PromisePrototypeThen(\r\n    reader.closed,\r\n    () => {\r\n      closed = true;\r\n    },\r\n    (error) => {\r\n      closed = true;\r\n      destroy(readable, error);\r\n    });\r\n\r\n  return readable;\r\n}\r\n\r\n/**\r\n * @typedef {import('./readablestream').ReadableWritablePair\r\n * } ReadableWritablePair\r\n * @typedef {import('../../stream').Duplex} Duplex\r\n */\r\n\r\n/**\r\n * @param {Duplex} duplex\r\n * @returns {ReadableWritablePair}\r\n */\r\nfunction newReadableWritablePairFromDuplex(duplex) {\r\n  // Not using the internal/streams/utils isWritableNodeStream and\r\n  // isReadableNodeStream utilities here because they will return false\r\n  // if the duplex was created with writable or readable options set to\r\n  // false. Instead, we'll check the readable and writable state after\r\n  // and return closed WritableStream or closed ReadableStream as\r\n  // necessary.\r\n  if (typeof duplex?._writableState !== 'object' ||\r\n      typeof duplex?._readableState !== 'object') {\r\n    throw new ERR_INVALID_ARG_TYPE('duplex', 'stream.Duplex', duplex);\r\n  }\r\n\r\n  if (isDestroyed(duplex)) {\r\n    const writable = new WritableStream();\r\n    const readable = new ReadableStream();\r\n    writable.close();\r\n    readable.cancel();\r\n    return { readable, writable };\r\n  }\r\n\r\n  const writable =\r\n    isWritable(duplex) ?\r\n      newWritableStreamFromStreamWritable(duplex) :\r\n      new WritableStream();\r\n\r\n  if (!isWritable(duplex))\r\n    writable.close();\r\n\r\n  const readable =\r\n    isReadable(duplex) ?\r\n      newReadableStreamFromStreamReadable(duplex) :\r\n      new ReadableStream();\r\n\r\n  if (!isReadable(duplex))\r\n    readable.cancel();\r\n\r\n  return { writable, readable };\r\n}\r\n\r\n/**\r\n * @param {ReadableWritablePair} pair\r\n * @param {{\r\n *   allowHalfOpen? : boolean,\r\n *   decodeStrings? : boolean,\r\n *   encoding? : string,\r\n *   highWaterMark? : number,\r\n *   objectMode? : boolean,\r\n *   signal? : AbortSignal,\r\n * }} [options]\r\n * @returns {Duplex}\r\n */\r\nfunction newStreamDuplexFromReadableWritablePair(pair = kEmptyObject, options = kEmptyObject) {\r\n  validateObject(pair, 'pair');\r\n  const {\r\n    readable: readableStream,\r\n    writable: writableStream,\r\n  } = pair;\r\n\r\n  if (!isReadableStream(readableStream)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'pair.readable',\r\n      'ReadableStream',\r\n      readableStream);\r\n  }\r\n  if (!isWritableStream(writableStream)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'pair.writable',\r\n      'WritableStream',\r\n      writableStream);\r\n  }\r\n\r\n  validateObject(options, 'options');\r\n  const {\r\n    allowHalfOpen = false,\r\n    objectMode = false,\r\n    encoding,\r\n    decodeStrings = true,\r\n    highWaterMark,\r\n    signal,\r\n  } = options;\r\n\r\n  validateBoolean(objectMode, 'options.objectMode');\r\n  if (encoding !== undefined && !Buffer.isEncoding(encoding))\r\n    throw new ERR_INVALID_ARG_VALUE(encoding, 'options.encoding');\r\n\r\n  const writer = writableStream.getWriter();\r\n  const reader = readableStream.getReader();\r\n  let writableClosed = false;\r\n  let readableClosed = false;\r\n\r\n  const duplex = new Duplex({\r\n    allowHalfOpen,\r\n    highWaterMark,\r\n    objectMode,\r\n    encoding,\r\n    decodeStrings,\r\n    signal,\r\n\r\n    writev(chunks, callback) {\r\n      function done(error) {\r\n        error = error.filter((e) => e);\r\n        try {\r\n          callback(error.length === 0 ? undefined : error);\r\n        } catch (error) {\r\n          // In a next tick because this is happening within\r\n          // a promise context, and if there are any errors\r\n          // thrown we don't want those to cause an unhandled\r\n          // rejection. Let's just escape the promise and\r\n          // handle it separately.\r\n          process.nextTick(() => destroy(duplex, error));\r\n        }\r\n      }\r\n\r\n      PromisePrototypeThen(\r\n        writer.ready,\r\n        () => {\r\n          return PromisePrototypeThen(\r\n            SafePromiseAll(\r\n              chunks,\r\n              (data) => writer.write(data.chunk)),\r\n            done,\r\n            done);\r\n        },\r\n        done);\r\n    },\r\n\r\n    write(chunk, encoding, callback) {\r\n      if (typeof chunk === 'string' && decodeStrings && !objectMode) {\r\n        const enc = normalizeEncoding(encoding);\r\n\r\n        if (enc === 'utf8') {\r\n          chunk = encoder.encode(chunk);\r\n        } else {\r\n          chunk = Buffer.from(chunk, encoding);\r\n          chunk = new Uint8Array(\r\n            TypedArrayPrototypeGetBuffer(chunk),\r\n            TypedArrayPrototypeGetByteOffset(chunk),\r\n            TypedArrayPrototypeGetByteLength(chunk),\r\n          );\r\n        }\r\n      }\r\n\r\n      function done(error) {\r\n        try {\r\n          callback(error);\r\n        } catch (error) {\r\n          destroy(duplex, error);\r\n        }\r\n      }\r\n\r\n      PromisePrototypeThen(\r\n        writer.ready,\r\n        () => {\r\n          return PromisePrototypeThen(\r\n            writer.write(chunk),\r\n            done,\r\n            done);\r\n        },\r\n        done);\r\n    },\r\n\r\n    final(callback) {\r\n      function done(error) {\r\n        try {\r\n          callback(error);\r\n        } catch (error) {\r\n          // In a next tick because this is happening within\r\n          // a promise context, and if there are any errors\r\n          // thrown we don't want those to cause an unhandled\r\n          // rejection. Let's just escape the promise and\r\n          // handle it separately.\r\n          process.nextTick(() => destroy(duplex, error));\r\n        }\r\n      }\r\n\r\n      if (!writableClosed) {\r\n        PromisePrototypeThen(\r\n          writer.close(),\r\n          done,\r\n          done);\r\n      }\r\n    },\r\n\r\n    read() {\r\n      PromisePrototypeThen(\r\n        reader.read(),\r\n        (chunk) => {\r\n          if (chunk.done) {\r\n            duplex.push(null);\r\n          } else {\r\n            duplex.push(chunk.value);\r\n          }\r\n        },\r\n        (error) => destroy(duplex, error));\r\n    },\r\n\r\n    destroy(error, callback) {\r\n      function done() {\r\n        try {\r\n          callback(error);\r\n        } catch (error) {\r\n          // In a next tick because this is happening within\r\n          // a promise context, and if there are any errors\r\n          // thrown we don't want those to cause an unhandled\r\n          // rejection. Let's just escape the promise and\r\n          // handle it separately.\r\n          process.nextTick(() => { throw error; });\r\n        }\r\n      }\r\n\r\n      async function closeWriter() {\r\n        if (!writableClosed)\r\n          await writer.abort(error);\r\n      }\r\n\r\n      async function closeReader() {\r\n        if (!readableClosed)\r\n          await reader.cancel(error);\r\n      }\r\n\r\n      if (!writableClosed || !readableClosed) {\r\n        PromisePrototypeThen(\r\n          SafePromiseAll([\r\n            closeWriter(),\r\n            closeReader(),\r\n          ]),\r\n          done,\r\n          done);\r\n        return;\r\n      }\r\n\r\n      done();\r\n    },\r\n  });\r\n\r\n  PromisePrototypeThen(\r\n    writer.closed,\r\n    () => {\r\n      writableClosed = true;\r\n      if (!isWritableEnded(duplex))\r\n        destroy(duplex, new ERR_STREAM_PREMATURE_CLOSE());\r\n    },\r\n    (error) => {\r\n      writableClosed = true;\r\n      readableClosed = true;\r\n      destroy(duplex, error);\r\n    });\r\n\r\n  PromisePrototypeThen(\r\n    reader.closed,\r\n    () => {\r\n      readableClosed = true;\r\n    },\r\n    (error) => {\r\n      writableClosed = true;\r\n      readableClosed = true;\r\n      destroy(duplex, error);\r\n    });\r\n\r\n  return duplex;\r\n}\r\n\r\n/**\r\n * @typedef {import('./queuingstrategies').QueuingStrategy} QueuingStrategy\r\n * @typedef {{}} StreamBase\r\n * @param {StreamBase} streamBase\r\n * @param {QueuingStrategy} strategy\r\n * @returns {WritableStream}\r\n */\r\nfunction newWritableStreamFromStreamBase(streamBase, strategy) {\r\n  validateObject(streamBase, 'streamBase');\r\n\r\n  let current;\r\n\r\n  function createWriteWrap(controller, promise) {\r\n    const req = new WriteWrap();\r\n    req.handle = streamBase;\r\n    req.oncomplete = onWriteComplete;\r\n    req.async = false;\r\n    req.bytes = 0;\r\n    req.buffer = null;\r\n    req.controller = controller;\r\n    req.promise = promise;\r\n    return req;\r\n  }\r\n\r\n  function onWriteComplete(status) {\r\n    if (status < 0) {\r\n      const error = new ErrnoException(status, 'write', this.error);\r\n      this.promise.reject(error);\r\n      this.controller.error(error);\r\n      return;\r\n    }\r\n    this.promise.resolve();\r\n  }\r\n\r\n  function doWrite(chunk, controller) {\r\n    const promise = createDeferredPromise();\r\n    let ret;\r\n    let req;\r\n    try {\r\n      req = createWriteWrap(controller, promise);\r\n      ret = streamBase.writeBuffer(req, chunk);\r\n      if (streamBaseState[kLastWriteWasAsync])\r\n        req.buffer = chunk;\r\n      req.async = !!streamBaseState[kLastWriteWasAsync];\r\n    } catch (error) {\r\n      promise.reject(error);\r\n    }\r\n\r\n    if (ret !== 0)\r\n      promise.reject(new ErrnoException(ret, 'write', req));\r\n    else if (!req.async)\r\n      promise.resolve();\r\n\r\n    return promise.promise;\r\n  }\r\n\r\n  return new WritableStream({\r\n    write(chunk, controller) {\r\n      current = current !== undefined ?\r\n        PromisePrototypeThen(\r\n          current,\r\n          () => doWrite(chunk, controller),\r\n          (error) => controller.error(error)) :\r\n        doWrite(chunk, controller);\r\n      return current;\r\n    },\r\n\r\n    close() {\r\n      const promise = createDeferredPromise();\r\n      const req = new ShutdownWrap();\r\n      req.oncomplete = () => promise.resolve();\r\n      const err = streamBase.shutdown(req);\r\n      if (err === 1)\r\n        promise.resolve();\r\n      return promise.promise;\r\n    },\r\n  }, strategy);\r\n}\r\n\r\n/**\r\n * @param {StreamBase} streamBase\r\n * @param {QueuingStrategy} strategy\r\n * @returns {ReadableStream}\r\n */\r\nfunction newReadableStreamFromStreamBase(streamBase, strategy, options = kEmptyObject) {\r\n  validateObject(streamBase, 'streamBase');\r\n  validateObject(options, 'options');\r\n\r\n  const {\r\n    ondone = () => {},\r\n  } = options;\r\n\r\n  if (typeof streamBase.onread === 'function')\r\n    throw new ERR_INVALID_STATE('StreamBase already has a consumer');\r\n\r\n  validateFunction(ondone, 'options.ondone');\r\n\r\n  let controller;\r\n\r\n  streamBase.onread = (arrayBuffer) => {\r\n    const nread = streamBaseState[kReadBytesOrError];\r\n\r\n    if (nread === 0)\r\n      return;\r\n\r\n    try {\r\n      if (nread === UV_EOF) {\r\n        controller.close();\r\n        streamBase.readStop();\r\n        try {\r\n          ondone();\r\n        } catch (error) {\r\n          controller.error(error);\r\n        }\r\n        return;\r\n      }\r\n\r\n      controller.enqueue(arrayBuffer);\r\n\r\n      if (controller.desiredSize <= 0)\r\n        streamBase.readStop();\r\n    } catch (error) {\r\n      controller.error(error);\r\n      streamBase.readStop();\r\n    }\r\n  };\r\n\r\n  return new ReadableStream({\r\n    start(c) { controller = c; },\r\n\r\n    pull() {\r\n      streamBase.readStart();\r\n    },\r\n\r\n    cancel() {\r\n      const promise = createDeferredPromise();\r\n      try {\r\n        ondone();\r\n      } catch (error) {\r\n        promise.reject(error);\r\n        return promise.promise;\r\n      }\r\n      const req = new ShutdownWrap();\r\n      req.oncomplete = () => promise.resolve();\r\n      const err = streamBase.shutdown(req);\r\n      if (err === 1)\r\n        promise.resolve();\r\n      return promise.promise;\r\n    },\r\n  }, strategy);\r\n}\r\n\r\nmodule.exports = {\r\n  newWritableStreamFromStreamWritable,\r\n  newReadableStreamFromStreamReadable,\r\n  newStreamWritableFromWritableStream,\r\n  newStreamReadableFromReadableStream,\r\n  newReadableWritablePairFromDuplex,\r\n  newStreamDuplexFromReadableWritablePair,\r\n  newWritableStreamFromStreamBase,\r\n  newReadableStreamFromStreamBase,\r\n};\r\n"
  },
  "215": {
    "metadata": {
      "scriptId": "215",
      "url": "node:sys",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 29,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "b009c96d270c0e704265aa7dd05c8949f6c99fdc6056540e923035f2e408a09a",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1462,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:sys"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\n// The sys module was renamed to 'util'. This shim remains to keep old programs\r\n// working. `sys` is deprecated and shouldn't be used.\r\n\r\nmodule.exports = require('util');\r\nprocess.emitWarning('sys is deprecated. Use util instead.',\r\n                    'DeprecationWarning', 'DEP0025');\r\n"
  },
  "216": {
    "metadata": {
      "scriptId": "216",
      "url": "node:test/mock_loader",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 227,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "bd4fa921c3176462c5e1fca25460773ef9e1feea13d37d32f725bb241e23605e",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 6838,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:test/mock_loader"
    },
    "source": "'use strict';\r\nconst {\r\n  JSONStringify,\r\n  SafeMap,\r\n  globalThis: {\r\n    Atomics: {\r\n      notify: AtomicsNotify,\r\n      store: AtomicsStore,\r\n    },\r\n  },\r\n} = primordials;\r\nconst {\r\n  ensureNodeScheme,\r\n  kBadExportsMessage,\r\n  kMockSearchParam,\r\n  kMockSuccess,\r\n  kMockExists,\r\n  kMockUnknownMessage,\r\n} = require('internal/test_runner/mock/mock');\r\nconst { pathToFileURL, URL } = require('internal/url');\r\nconst { normalizeReferrerURL } = require('internal/modules/helpers');\r\nlet debug = require('internal/util/debuglog').debuglog('test_runner', (fn) => {\r\n  debug = fn;\r\n});\r\nconst { createRequire, isBuiltin } = require('module');\r\n\r\n// TODO(cjihrig): This file should not be exposed publicly, but register() does\r\n// not handle internal loaders. Before marking this API as stable, one of the\r\n// following issues needs to be implemented:\r\n// https://github.com/nodejs/node/issues/49473\r\n// or https://github.com/nodejs/node/issues/52219\r\n\r\n// TODO(cjihrig): The mocks need to be thread aware because the exports are\r\n// evaluated on the thread that creates the mock. Before marking this API as\r\n// stable, one of the following issues needs to be implemented:\r\n// https://github.com/nodejs/node/issues/49472\r\n// or https://github.com/nodejs/node/issues/52219\r\n\r\n// TODO(cjihrig): Network imports should be supported. There are two current\r\n// hurdles:\r\n// - The module format returned by the load() hook is not known. This could be\r\n//   implemented as an option, or default to 'module' for network imports.\r\n// - The generated mock module imports 'node:test', which is not allowed by\r\n//   checkIfDisallowedImport() in the ESM code.\r\n\r\nconst mocks = new SafeMap();\r\n\r\nasync function initialize(data) {\r\n  data?.port.on('message', ({ type, payload }) => {\r\n    debug('mock loader received message type \"%s\" with payload %o', type, payload);\r\n\r\n    if (type === 'node:test:register') {\r\n      const { baseURL } = payload;\r\n      const mock = mocks.get(baseURL);\r\n\r\n      if (mock?.active) {\r\n        debug('already mocking \"%s\"', baseURL);\r\n        sendAck(payload.ack, kMockExists);\r\n        return;\r\n      }\r\n\r\n      const localVersion = mock?.localVersion ?? 0;\r\n\r\n      debug('new mock version %d for \"%s\"', localVersion, baseURL);\r\n      mocks.set(baseURL, {\r\n        __proto__: null,\r\n        active: true,\r\n        cache: payload.cache,\r\n        exportNames: payload.exportNames,\r\n        format: payload.format,\r\n        hasDefaultExport: payload.hasDefaultExport,\r\n        localVersion,\r\n        url: baseURL,\r\n      });\r\n      sendAck(payload.ack);\r\n    } else if (type === 'node:test:unregister') {\r\n      const mock = mocks.get(payload.baseURL);\r\n\r\n      if (mock !== undefined) {\r\n        mock.active = false;\r\n        mock.localVersion++;\r\n      }\r\n\r\n      sendAck(payload.ack);\r\n    } else {\r\n      sendAck(payload.ack, kMockUnknownMessage);\r\n    }\r\n  });\r\n}\r\n\r\nasync function resolve(specifier, context, nextResolve) {\r\n  debug('resolve hook entry, specifier = \"%s\", context = %o', specifier, context);\r\n  let mockSpecifier;\r\n\r\n  if (isBuiltin(specifier)) {\r\n    mockSpecifier = ensureNodeScheme(specifier);\r\n  } else {\r\n    // TODO(cjihrig): This try...catch should be replaced by defaultResolve(),\r\n    // but there are some edge cases that caused the tests to fail on Windows.\r\n    try {\r\n      const req = createRequire(context.parentURL);\r\n      specifier = pathToFileURL(req.resolve(specifier)).href;\r\n    } catch {\r\n      const parentURL = normalizeReferrerURL(context.parentURL);\r\n      const parsedURL = URL.parse(specifier, parentURL)?.href;\r\n\r\n      if (parsedURL) {\r\n        specifier = parsedURL;\r\n      }\r\n    }\r\n\r\n    mockSpecifier = specifier;\r\n  }\r\n\r\n  const mock = mocks.get(mockSpecifier);\r\n  debug('resolve hook, specifier = \"%s\", mock = %o', specifier, mock);\r\n\r\n  if (mock?.active !== true) {\r\n    return nextResolve(specifier, context);\r\n  }\r\n\r\n  const url = new URL(mockSpecifier);\r\n\r\n  url.searchParams.set(kMockSearchParam, mock.localVersion);\r\n\r\n  if (!mock.cache) {\r\n    // With ESM, we can't remove modules from the cache. Bump the module's\r\n    // version instead so that the next import will be uncached.\r\n    mock.localVersion++;\r\n  }\r\n\r\n  debug('resolve hook finished, url = \"%s\"', url.href);\r\n  return nextResolve(url.href, context);\r\n}\r\n\r\nasync function load(url, context, nextLoad) {\r\n  debug('load hook entry, url = \"%s\", context = %o', url, context);\r\n  const parsedURL = URL.parse(url);\r\n  if (parsedURL) {\r\n    parsedURL.searchParams.delete(kMockSearchParam);\r\n  }\r\n\r\n  const baseURL = parsedURL ? parsedURL.href : url;\r\n  const mock = mocks.get(baseURL);\r\n\r\n  debug('load hook, mock = %o', mock);\r\n  if (mock?.active !== true) {\r\n    return nextLoad(url);\r\n  }\r\n\r\n  // Treat builtins as commonjs because customization hooks do not allow a\r\n  // core module to be replaced.\r\n  const format = mock.format === 'builtin' ? 'commonjs' : mock.format;\r\n\r\n  return {\r\n    __proto__: null,\r\n    format,\r\n    shortCircuit: true,\r\n    source: await createSourceFromMock(mock),\r\n  };\r\n}\r\n\r\nasync function createSourceFromMock(mock) {\r\n  // Create mock implementation from provided exports.\r\n  const { exportNames, format, hasDefaultExport, url } = mock;\r\n  const useESM = format === 'module';\r\n  const source = `${testImportSource(useESM)}\r\nif (!$__test.mock._mockExports.has('${url}')) {\r\n  throw new Error(${JSONStringify(`mock exports not found for \"${url}\"`)});\r\n}\r\n\r\nconst $__exports = $__test.mock._mockExports.get(${JSONStringify(url)});\r\n${defaultExportSource(useESM, hasDefaultExport)}\r\n${namedExportsSource(useESM, exportNames)}\r\n`;\r\n\r\n  return source;\r\n}\r\n\r\nfunction testImportSource(useESM) {\r\n  if (useESM) {\r\n    return \"import $__test from 'node:test';\";\r\n  }\r\n\r\n  return \"const $__test = require('node:test');\";\r\n}\r\n\r\nfunction defaultExportSource(useESM, hasDefaultExport) {\r\n  if (!hasDefaultExport) {\r\n    return '';\r\n  } else if (useESM) {\r\n    return 'export default $__exports.defaultExport;';\r\n  }\r\n\r\n  return 'module.exports = $__exports.defaultExport;';\r\n}\r\n\r\nfunction namedExportsSource(useESM, exportNames) {\r\n  let source = '';\r\n\r\n  if (!useESM && exportNames.length > 0) {\r\n    source += `\r\nif (module.exports === null || typeof module.exports !== 'object') {\r\n  throw new Error('${JSONStringify(kBadExportsMessage)}');\r\n}\r\n`;\r\n  }\r\n\r\n  for (let i = 0; i < exportNames.length; ++i) {\r\n    const name = exportNames[i];\r\n\r\n    if (useESM) {\r\n      source += `export let ${name} = $__exports.namedExports[${JSONStringify(name)}];\\n`;\r\n    } else {\r\n      source += `module.exports[${JSONStringify(name)}] = $__exports.namedExports[${JSONStringify(name)}];\\n`;\r\n    }\r\n  }\r\n\r\n  return source;\r\n}\r\n\r\nfunction sendAck(buf, status = kMockSuccess) {\r\n  AtomicsStore(buf, 0, status);\r\n  AtomicsNotify(buf, 0);\r\n}\r\n\r\nmodule.exports = { initialize, load, resolve };\r\n"
  },
  "217": {
    "metadata": {
      "scriptId": "217",
      "url": "node:internal/test_runner/mock/mock",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 787,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "309e45f657da7347fc50d41d54897f37056df5208e99607d42399a948c41e6c9",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 22431,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/test_runner/mock/mock"
    },
    "source": "'use strict';\r\nconst {\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  Error,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeCall,\r\n  Int32Array,\r\n  ObjectDefineProperty,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ObjectGetPrototypeOf,\r\n  ObjectKeys,\r\n  Proxy,\r\n  ReflectApply,\r\n  ReflectConstruct,\r\n  ReflectGet,\r\n  SafeMap,\r\n  StringPrototypeSlice,\r\n  StringPrototypeStartsWith,\r\n  globalThis: {\r\n    Atomics: {\r\n      store: AtomicsStore,\r\n      wait: AtomicsWait,\r\n    },\r\n    SharedArrayBuffer,\r\n  },\r\n} = primordials;\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_STATE,\r\n  },\r\n} = require('internal/errors');\r\nconst esmLoader = require('internal/modules/esm/loader');\r\nconst { getOptionValue } = require('internal/options');\r\nconst { fileURLToPath, toPathIfFileURL, URL } = require('internal/url');\r\nconst {\r\n  emitExperimentalWarning,\r\n  getStructuredStack,\r\n  kEmptyObject,\r\n} = require('internal/util');\r\nlet debug = require('internal/util/debuglog').debuglog('test_runner', (fn) => {\r\n  debug = fn;\r\n});\r\nconst {\r\n  validateBoolean,\r\n  validateFunction,\r\n  validateInteger,\r\n  validateObject,\r\n  validateOneOf,\r\n  validateString,\r\n} = require('internal/validators');\r\nconst { MockTimers } = require('internal/test_runner/mock/mock_timers');\r\nconst { strictEqual, notStrictEqual } = require('assert');\r\nconst { isBuiltin, Module, register } = require('module');\r\nconst { MessageChannel } = require('worker_threads');\r\nconst { _load, _nodeModulePaths, _resolveFilename } = Module;\r\nfunction kDefaultFunction() {}\r\nconst enableModuleMocking = getOptionValue('--experimental-test-module-mocks');\r\nconst kMockSearchParam = 'node-test-mock';\r\nconst kMockSuccess = 1;\r\nconst kMockExists = 2;\r\nconst kMockUnknownMessage = 3;\r\nconst kWaitTimeout = 5_000;\r\nconst kBadExportsMessage = 'Cannot create mock because named exports ' +\r\n  'cannot be applied to the provided default export.';\r\nconst kSupportedFormats = ['builtin', 'commonjs', 'module'];\r\nlet sharedModuleState;\r\n\r\nclass MockFunctionContext {\r\n  #calls;\r\n  #mocks;\r\n  #implementation;\r\n  #restore;\r\n  #times;\r\n\r\n  constructor(implementation, restore, times) {\r\n    this.#calls = [];\r\n    this.#mocks = new SafeMap();\r\n    this.#implementation = implementation;\r\n    this.#restore = restore;\r\n    this.#times = times;\r\n  }\r\n\r\n  /**\r\n   * Gets an array of recorded calls made to the mock function.\r\n   * @returns {Array} An array of recorded calls.\r\n   */\r\n  get calls() {\r\n    return ArrayPrototypeSlice(this.#calls, 0);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the number of times the mock function has been called.\r\n   * @returns {number} The call count.\r\n   */\r\n  callCount() {\r\n    return this.#calls.length;\r\n  }\r\n\r\n  /**\r\n   * Sets a new implementation for the mock function.\r\n   * @param {Function} implementation - The new implementation for the mock function.\r\n   */\r\n  mockImplementation(implementation) {\r\n    validateFunction(implementation, 'implementation');\r\n    this.#implementation = implementation;\r\n  }\r\n\r\n  /**\r\n   * Replaces the implementation of the function only once.\r\n   * @param {Function} implementation - The substitute function.\r\n   * @param {number} [onCall] - The call index to be replaced.\r\n   */\r\n  mockImplementationOnce(implementation, onCall) {\r\n    validateFunction(implementation, 'implementation');\r\n    const nextCall = this.#calls.length;\r\n    const call = onCall ?? nextCall;\r\n    validateInteger(call, 'onCall', nextCall);\r\n    this.#mocks.set(call, implementation);\r\n  }\r\n\r\n  /**\r\n   * Restores the original function that was mocked.\r\n   */\r\n  restore() {\r\n    const { descriptor, object, original, methodName } = this.#restore;\r\n\r\n    if (typeof methodName === 'string') {\r\n      // This is an object method spy.\r\n      ObjectDefineProperty(object, methodName, descriptor);\r\n    } else {\r\n      // This is a bare function spy. There isn't much to do here but make\r\n      // the mock call the original function.\r\n      this.#implementation = original;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets the recorded calls to the mock function\r\n   */\r\n  resetCalls() {\r\n    this.#calls = [];\r\n  }\r\n\r\n  /**\r\n   * Tracks a call made to the mock function.\r\n   * @param {object} call - The call details.\r\n   */\r\n  trackCall(call) {\r\n    ArrayPrototypePush(this.#calls, call);\r\n  }\r\n\r\n  /**\r\n   * Gets the next implementation to use for the mock function.\r\n   * @returns {Function} The next implementation.\r\n   */\r\n  nextImpl() {\r\n    const nextCall = this.#calls.length;\r\n    const mock = this.#mocks.get(nextCall);\r\n    const impl = mock ?? this.#implementation;\r\n\r\n    if (nextCall + 1 === this.#times) {\r\n      this.restore();\r\n    }\r\n\r\n    this.#mocks.delete(nextCall);\r\n    return impl;\r\n  }\r\n}\r\n\r\nconst {\r\n  nextImpl,\r\n  restore: restoreFn,\r\n  trackCall,\r\n} = MockFunctionContext.prototype;\r\ndelete MockFunctionContext.prototype.trackCall;\r\ndelete MockFunctionContext.prototype.nextImpl;\r\n\r\nclass MockModuleContext {\r\n  #restore;\r\n  #sharedState;\r\n\r\n  constructor({\r\n    baseURL,\r\n    cache,\r\n    caller,\r\n    defaultExport,\r\n    format,\r\n    fullPath,\r\n    hasDefaultExport,\r\n    namedExports,\r\n    sharedState,\r\n  }) {\r\n    const ack = new Int32Array(new SharedArrayBuffer(4));\r\n    const config = {\r\n      __proto__: null,\r\n      cache,\r\n      defaultExport,\r\n      hasDefaultExport,\r\n      namedExports,\r\n      caller: toPathIfFileURL(caller),\r\n    };\r\n\r\n    sharedState.mockMap.set(baseURL, config);\r\n    sharedState.mockMap.set(fullPath, config);\r\n\r\n    this.#sharedState = sharedState;\r\n    this.#restore = {\r\n      __proto__: null,\r\n      ack,\r\n      baseURL,\r\n      cached: fullPath in Module._cache,\r\n      format,\r\n      fullPath,\r\n      value: Module._cache[fullPath],\r\n    };\r\n\r\n    sharedState.loaderPort.postMessage({\r\n      __proto__: null,\r\n      type: 'node:test:register',\r\n      payload: {\r\n        __proto__: null,\r\n        ack,\r\n        baseURL,\r\n        cache,\r\n        exportNames: ObjectKeys(namedExports),\r\n        hasDefaultExport,\r\n        format,\r\n      },\r\n    });\r\n    waitForAck(ack);\r\n    delete Module._cache[fullPath];\r\n    sharedState.mockExports.set(baseURL, {\r\n      __proto__: null,\r\n      defaultExport,\r\n      namedExports,\r\n    });\r\n  }\r\n\r\n  restore() {\r\n    if (this.#restore === undefined) {\r\n      return;\r\n    }\r\n\r\n    // Delete the mock CJS cache entry. If the module was previously in the\r\n    // cache then restore the old value.\r\n    delete Module._cache[this.#restore.fullPath];\r\n\r\n    if (this.#restore.cached) {\r\n      Module._cache[this.#restore.fullPath] = this.#restore.value;\r\n    }\r\n\r\n    AtomicsStore(this.#restore.ack, 0, 0);\r\n    this.#sharedState.loaderPort.postMessage({\r\n      __proto__: null,\r\n      type: 'node:test:unregister',\r\n      payload: {\r\n        __proto__: null,\r\n        ack: this.#restore.ack,\r\n        baseURL: this.#restore.baseURL,\r\n      },\r\n    });\r\n    waitForAck(this.#restore.ack);\r\n\r\n    this.#sharedState.mockMap.delete(this.#restore.baseURL);\r\n    this.#sharedState.mockMap.delete(this.#restore.fullPath);\r\n    this.#restore = undefined;\r\n  }\r\n}\r\n\r\nconst { restore: restoreModule } = MockModuleContext.prototype;\r\n\r\nclass MockTracker {\r\n  #mocks = [];\r\n  #timers;\r\n\r\n  /**\r\n   * Returns the mock timers of this MockTracker instance.\r\n   * @returns {MockTimers} The mock timers instance.\r\n   */\r\n  get timers() {\r\n    this.#timers ??= new MockTimers();\r\n    return this.#timers;\r\n  }\r\n\r\n  /**\r\n   * Creates a mock function tracker.\r\n   * @param {Function} [original] - The original function to be tracked.\r\n   * @param {Function} [implementation] - An optional replacement function for the original one.\r\n   * @param {object} [options] - Additional tracking options.\r\n   * @param {number} [options.times=Infinity] - The maximum number of times the mock function can be called.\r\n   * @returns {ProxyConstructor} The mock function tracker.\r\n   */\r\n  fn(\r\n    original = function() {},\r\n    implementation = original,\r\n    options = kEmptyObject,\r\n  ) {\r\n    if (original !== null && typeof original === 'object') {\r\n      options = original;\r\n      original = function() {};\r\n      implementation = original;\r\n    } else if (implementation !== null && typeof implementation === 'object') {\r\n      options = implementation;\r\n      implementation = original;\r\n    }\r\n\r\n    validateFunction(original, 'original');\r\n    validateFunction(implementation, 'implementation');\r\n    validateObject(options, 'options');\r\n    const { times = Infinity } = options;\r\n    validateTimes(times, 'options.times');\r\n    const ctx = new MockFunctionContext(implementation, { __proto__: null, original }, times);\r\n    return this.#setupMock(ctx, original);\r\n  }\r\n\r\n  /**\r\n   * Creates a method tracker for a specified object or function.\r\n   * @param {(object | Function)} objectOrFunction - The object or function containing the method to be tracked.\r\n   * @param {string} methodName - The name of the method to be tracked.\r\n   * @param {Function} [implementation] - An optional replacement function for the original method.\r\n   * @param {object} [options] - Additional tracking options.\r\n   * @param {boolean} [options.getter=false] - Indicates whether this is a getter method.\r\n   * @param {boolean} [options.setter=false] - Indicates whether this is a setter method.\r\n   * @param {number} [options.times=Infinity] - The maximum number of times the mock method can be called.\r\n   * @returns {ProxyConstructor} The mock method tracker.\r\n   */\r\n  method(\r\n    objectOrFunction,\r\n    methodName,\r\n    implementation = kDefaultFunction,\r\n    options = kEmptyObject,\r\n  ) {\r\n    validateStringOrSymbol(methodName, 'methodName');\r\n    if (typeof objectOrFunction !== 'function') {\r\n      validateObject(objectOrFunction, 'object');\r\n    }\r\n\r\n    if (implementation !== null && typeof implementation === 'object') {\r\n      options = implementation;\r\n      implementation = kDefaultFunction;\r\n    }\r\n\r\n    validateFunction(implementation, 'implementation');\r\n    validateObject(options, 'options');\r\n\r\n    const {\r\n      getter = false,\r\n      setter = false,\r\n      times = Infinity,\r\n    } = options;\r\n\r\n    validateBoolean(getter, 'options.getter');\r\n    validateBoolean(setter, 'options.setter');\r\n    validateTimes(times, 'options.times');\r\n\r\n    if (setter && getter) {\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        'options.setter', setter, \"cannot be used with 'options.getter'\",\r\n      );\r\n    }\r\n    const descriptor = findMethodOnPrototypeChain(objectOrFunction, methodName);\r\n\r\n    let original;\r\n\r\n    if (getter) {\r\n      original = descriptor?.get;\r\n    } else if (setter) {\r\n      original = descriptor?.set;\r\n    } else {\r\n      original = descriptor?.value;\r\n    }\r\n\r\n    if (typeof original !== 'function') {\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        'methodName', original, 'must be a method',\r\n      );\r\n    }\r\n\r\n    const restore = { __proto__: null, descriptor, object: objectOrFunction, methodName };\r\n    const impl = implementation === kDefaultFunction ?\r\n      original : implementation;\r\n    const ctx = new MockFunctionContext(impl, restore, times);\r\n    const mock = this.#setupMock(ctx, original);\r\n    const mockDescriptor = {\r\n      __proto__: null,\r\n      configurable: descriptor.configurable,\r\n      enumerable: descriptor.enumerable,\r\n    };\r\n\r\n    if (getter) {\r\n      mockDescriptor.get = mock;\r\n      mockDescriptor.set = descriptor.set;\r\n    } else if (setter) {\r\n      mockDescriptor.get = descriptor.get;\r\n      mockDescriptor.set = mock;\r\n    } else {\r\n      mockDescriptor.writable = descriptor.writable;\r\n      mockDescriptor.value = mock;\r\n    }\r\n\r\n    ObjectDefineProperty(objectOrFunction, methodName, mockDescriptor);\r\n\r\n    return mock;\r\n  }\r\n\r\n  /**\r\n   * Mocks a getter method of an object.\r\n   * This is a syntax sugar for the MockTracker.method with options.getter set to true\r\n   * @param {object} object - The target object.\r\n   * @param {string} methodName - The name of the getter method to be mocked.\r\n   * @param {Function} [implementation] - An optional replacement function for the targeted method.\r\n   * @param {object} [options] - Additional tracking options.\r\n   * @param {boolean} [options.getter=true] - Indicates whether this is a getter method.\r\n   * @param {boolean} [options.setter=false] - Indicates whether this is a setter method.\r\n   * @param {number} [options.times=Infinity] - The maximum number of times the mock method can be called.\r\n   * @returns {ProxyConstructor} The mock method tracker.\r\n   */\r\n  getter(\r\n    object,\r\n    methodName,\r\n    implementation = kDefaultFunction,\r\n    options = kEmptyObject,\r\n  ) {\r\n    if (implementation !== null && typeof implementation === 'object') {\r\n      options = implementation;\r\n      implementation = kDefaultFunction;\r\n    } else {\r\n      validateObject(options, 'options');\r\n    }\r\n\r\n    const { getter = true } = options;\r\n\r\n    if (getter === false) {\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        'options.getter', getter, 'cannot be false',\r\n      );\r\n    }\r\n\r\n    return this.method(object, methodName, implementation, {\r\n      __proto__: null,\r\n      ...options,\r\n      getter,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Mocks a setter method of an object.\r\n   * This function is a syntax sugar for MockTracker.method with options.setter set to true.\r\n   * @param {object} object - The target object.\r\n   * @param {string} methodName  - The setter method to be mocked.\r\n   * @param {Function} [implementation] - An optional replacement function for the targeted method.\r\n   * @param {object} [options] - Additional tracking options.\r\n   * @param {boolean} [options.getter=false] - Indicates whether this is a getter method.\r\n   * @param {boolean} [options.setter=true] - Indicates whether this is a setter method.\r\n   * @param {number} [options.times=Infinity] - The maximum number of times the mock method can be called.\r\n   * @returns {ProxyConstructor} The mock method tracker.\r\n   */\r\n  setter(\r\n    object,\r\n    methodName,\r\n    implementation = kDefaultFunction,\r\n    options = kEmptyObject,\r\n  ) {\r\n    if (implementation !== null && typeof implementation === 'object') {\r\n      options = implementation;\r\n      implementation = kDefaultFunction;\r\n    } else {\r\n      validateObject(options, 'options');\r\n    }\r\n\r\n    const { setter = true } = options;\r\n\r\n    if (setter === false) {\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        'options.setter', setter, 'cannot be false',\r\n      );\r\n    }\r\n\r\n    return this.method(object, methodName, implementation, {\r\n      __proto__: null,\r\n      ...options,\r\n      setter,\r\n    });\r\n  }\r\n\r\n  module(specifier, options = kEmptyObject) {\r\n    emitExperimentalWarning('Module mocking');\r\n    validateString(specifier, 'specifier');\r\n    validateObject(options, 'options');\r\n    debug('module mock entry, specifier = \"%s\", options = %o', specifier, options);\r\n\r\n    const {\r\n      cache = false,\r\n      namedExports = kEmptyObject,\r\n      defaultExport,\r\n    } = options;\r\n    const hasDefaultExport = 'defaultExport' in options;\r\n\r\n    validateBoolean(cache, 'options.cache');\r\n    validateObject(namedExports, 'options.namedExports');\r\n\r\n    const sharedState = setupSharedModuleState();\r\n    const mockSpecifier = StringPrototypeStartsWith(specifier, 'node:') ?\r\n      StringPrototypeSlice(specifier, 5) : specifier;\r\n\r\n    // Get the file that called this function. We need four stack frames:\r\n    // vm context -> getStructuredStack() -> this function -> actual caller.\r\n    const caller = getStructuredStack()[3]?.getFileName();\r\n    const { format, url } = sharedState.moduleLoader.resolveSync(\r\n      mockSpecifier, caller, null,\r\n    );\r\n    debug('module mock, url = \"%s\", format = \"%s\", caller = \"%s\"', url, format, caller);\r\n    validateOneOf(format, 'format', kSupportedFormats);\r\n    const baseURL = URL.parse(url);\r\n\r\n    if (!baseURL) {\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        'specifier', specifier, 'cannot compute URL',\r\n      );\r\n    }\r\n\r\n    if (baseURL.searchParams.has(kMockSearchParam)) {\r\n      throw new ERR_INVALID_STATE(\r\n        `Cannot mock '${specifier}.' The module is already mocked.`,\r\n      );\r\n    }\r\n\r\n    const fullPath = StringPrototypeStartsWith(url, 'file://') ?\r\n      fileURLToPath(url) : null;\r\n    const ctx = new MockModuleContext({\r\n      __proto__: null,\r\n      baseURL: baseURL.href,\r\n      cache,\r\n      caller,\r\n      defaultExport,\r\n      format,\r\n      fullPath,\r\n      hasDefaultExport,\r\n      namedExports,\r\n      sharedState,\r\n      specifier: mockSpecifier,\r\n    });\r\n\r\n    ArrayPrototypePush(this.#mocks, {\r\n      __proto__: null,\r\n      ctx,\r\n      restore: restoreModule,\r\n    });\r\n    return ctx;\r\n  }\r\n\r\n  /**\r\n   * Resets the mock tracker, restoring all mocks and clearing timers.\r\n   */\r\n  reset() {\r\n    this.restoreAll();\r\n    this.#timers?.reset();\r\n    this.#mocks = [];\r\n  }\r\n\r\n  /**\r\n   * Restore all mocks created by this MockTracker instance.\r\n   */\r\n  restoreAll() {\r\n    for (let i = 0; i < this.#mocks.length; i++) {\r\n      const { ctx, restore } = this.#mocks[i];\r\n\r\n      FunctionPrototypeCall(restore, ctx);\r\n    }\r\n  }\r\n\r\n  #setupMock(ctx, fnToMatch) {\r\n    const mock = new Proxy(fnToMatch, {\r\n      __proto__: null,\r\n      apply(_fn, thisArg, argList) {\r\n        const fn = FunctionPrototypeCall(nextImpl, ctx);\r\n        let result;\r\n        let error;\r\n\r\n        try {\r\n          result = ReflectApply(fn, thisArg, argList);\r\n        } catch (err) {\r\n          error = err;\r\n          throw err;\r\n        } finally {\r\n          FunctionPrototypeCall(trackCall, ctx, {\r\n            __proto__: null,\r\n            arguments: argList,\r\n            error,\r\n            result,\r\n            // eslint-disable-next-line no-restricted-syntax\r\n            stack: new Error(),\r\n            target: undefined,\r\n            this: thisArg,\r\n          });\r\n        }\r\n\r\n        return result;\r\n      },\r\n      construct(target, argList, newTarget) {\r\n        const realTarget = FunctionPrototypeCall(nextImpl, ctx);\r\n        let result;\r\n        let error;\r\n\r\n        try {\r\n          result = ReflectConstruct(realTarget, argList, newTarget);\r\n        } catch (err) {\r\n          error = err;\r\n          throw err;\r\n        } finally {\r\n          FunctionPrototypeCall(trackCall, ctx, {\r\n            __proto__: null,\r\n            arguments: argList,\r\n            error,\r\n            result,\r\n            // eslint-disable-next-line no-restricted-syntax\r\n            stack: new Error(),\r\n            target,\r\n            this: result,\r\n          });\r\n        }\r\n\r\n        return result;\r\n      },\r\n      get(target, property, receiver) {\r\n        if (property === 'mock') {\r\n          return ctx;\r\n        }\r\n\r\n        return ReflectGet(target, property, receiver);\r\n      },\r\n    });\r\n\r\n    ArrayPrototypePush(this.#mocks, {\r\n      __proto__: null,\r\n      ctx,\r\n      restore: restoreFn,\r\n    });\r\n    return mock;\r\n  }\r\n}\r\n\r\nfunction setupSharedModuleState() {\r\n  if (sharedModuleState === undefined) {\r\n    const { mock } = require('test');\r\n    const mockExports = new SafeMap();\r\n    const { port1, port2 } = new MessageChannel();\r\n\r\n    register('node:test/mock_loader', {\r\n      __proto__: null,\r\n      data: { __proto__: null, port: port2 },\r\n      transferList: [port2],\r\n    });\r\n\r\n    sharedModuleState = {\r\n      __proto__: null,\r\n      loaderPort: port1,\r\n      mockExports,\r\n      mockMap: new SafeMap(),\r\n      moduleLoader: esmLoader.getOrInitializeCascadedLoader(),\r\n    };\r\n    mock._mockExports = mockExports;\r\n    Module._load = FunctionPrototypeBind(cjsMockModuleLoad, sharedModuleState);\r\n  }\r\n\r\n  return sharedModuleState;\r\n}\r\n\r\nfunction cjsMockModuleLoad(request, parent, isMain) {\r\n  let resolved;\r\n\r\n  if (isBuiltin(request)) {\r\n    resolved = ensureNodeScheme(request);\r\n  } else {\r\n    resolved = _resolveFilename(request, parent, isMain);\r\n  }\r\n\r\n  const config = this.mockMap.get(resolved);\r\n  if (config === undefined) {\r\n    return _load(request, parent, isMain);\r\n  }\r\n\r\n  const {\r\n    cache,\r\n    caller,\r\n    defaultExport,\r\n    hasDefaultExport,\r\n    namedExports,\r\n  } = config;\r\n\r\n  if (cache && Module._cache[resolved]) {\r\n    // The CJS cache entry is deleted when the mock is configured. If it has\r\n    // been repopulated, return the exports from that entry.\r\n    return Module._cache[resolved].exports;\r\n  }\r\n\r\n  // eslint-disable-next-line node-core/set-proto-to-null-in-object\r\n  const modExports = hasDefaultExport ? defaultExport : {};\r\n  const exportNames = ObjectKeys(namedExports);\r\n\r\n  if ((typeof modExports !== 'object' || modExports === null) &&\r\n      exportNames.length > 0) {\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    throw new Error(kBadExportsMessage);\r\n  }\r\n\r\n  for (let i = 0; i < exportNames.length; ++i) {\r\n    const name = exportNames[i];\r\n    const descriptor = ObjectGetOwnPropertyDescriptor(namedExports, name);\r\n    ObjectDefineProperty(modExports, name, descriptor);\r\n  }\r\n\r\n  if (cache) {\r\n    const entry = new Module(resolved, caller);\r\n\r\n    entry.exports = modExports;\r\n    entry.filename = resolved;\r\n    entry.loaded = true;\r\n    entry.paths = _nodeModulePaths(entry.path);\r\n    Module._cache[resolved] = entry;\r\n  }\r\n\r\n  return modExports;\r\n}\r\n\r\nfunction validateStringOrSymbol(value, name) {\r\n  if (typeof value !== 'string' && typeof value !== 'symbol') {\r\n    throw new ERR_INVALID_ARG_TYPE(name, ['string', 'symbol'], value);\r\n  }\r\n}\r\n\r\nfunction validateTimes(value, name) {\r\n  if (value === Infinity) {\r\n    return;\r\n  }\r\n\r\n  validateInteger(value, name, 1);\r\n}\r\n\r\nfunction findMethodOnPrototypeChain(instance, methodName) {\r\n  let host = instance;\r\n  let descriptor;\r\n\r\n  while (host !== null) {\r\n    descriptor = ObjectGetOwnPropertyDescriptor(host, methodName);\r\n\r\n    if (descriptor) {\r\n      break;\r\n    }\r\n\r\n    host = ObjectGetPrototypeOf(host);\r\n  }\r\n\r\n  return descriptor;\r\n}\r\n\r\nfunction waitForAck(buf) {\r\n  const result = AtomicsWait(buf, 0, 0, kWaitTimeout);\r\n\r\n  notStrictEqual(result, 'timed-out', 'test mocking synchronization failed');\r\n  strictEqual(buf[0], kMockSuccess);\r\n}\r\n\r\nfunction ensureNodeScheme(specifier) {\r\n  if (!StringPrototypeStartsWith(specifier, 'node:')) {\r\n    return `node:${specifier}`;\r\n  }\r\n\r\n  return specifier;\r\n}\r\n\r\nif (!enableModuleMocking) {\r\n  delete MockTracker.prototype.module;\r\n}\r\n\r\nmodule.exports = {\r\n  ensureNodeScheme,\r\n  kBadExportsMessage,\r\n  kMockSearchParam,\r\n  kMockSuccess,\r\n  kMockExists,\r\n  kMockUnknownMessage,\r\n  MockTracker,\r\n};\r\n"
  },
  "218": {
    "metadata": {
      "scriptId": "218",
      "url": "node:internal/test_runner/mock/mock_timers",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 773,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "cdd054c8645d05631d0209ad2d1cb272d395113d90e3b7ba59511fd0fd2ac86c",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 22047,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/test_runner/mock/mock_timers"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeAt,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeIncludes,\r\n  DatePrototypeGetTime,\r\n  DatePrototypeToString,\r\n  FunctionPrototypeApply,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeToString,\r\n  NumberIsNaN,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ObjectGetOwnPropertyDescriptors,\r\n  Promise,\r\n  Symbol,\r\n  SymbolAsyncIterator,\r\n  SymbolDispose,\r\n  globalThis,\r\n} = primordials;\r\n\r\nconst {\r\n  validateAbortSignal,\r\n  validateArray,\r\n  validateNumber,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  emitExperimentalWarning,\r\n} = require('internal/util');\r\nconst {\r\n  AbortError,\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_STATE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst PriorityQueue = require('internal/priority_queue');\r\nconst nodeTimers = require('timers');\r\nconst nodeTimersPromises = require('timers/promises');\r\nconst EventEmitter = require('events');\r\n\r\nlet kResistStopPropagation;\r\n// Internal reference to the MockTimers class inside MockDate\r\nlet kMock;\r\n// Initial epoch to which #now should be set to\r\nconst kInitialEpoch = 0;\r\n\r\nfunction compareTimersLists(a, b) {\r\n  return (a.runAt - b.runAt) || (a.id - b.id);\r\n}\r\n\r\nfunction setPosition(node, pos) {\r\n  node.priorityQueuePosition = pos;\r\n}\r\n\r\nfunction abortIt(signal) {\r\n  return new AbortError(undefined, { __proto__: null, cause: signal.reason });\r\n}\r\n\r\n/**\r\n * @enum {('setTimeout'|'setInterval'|'setImmediate'|'Date')[]} Supported timers\r\n */\r\nconst SUPPORTED_APIS = ['setTimeout', 'setInterval', 'setImmediate', 'Date'];\r\nconst TIMERS_DEFAULT_INTERVAL = {\r\n  __proto__: null,\r\n  setImmediate: -1,\r\n};\r\n\r\nclass Timeout {\r\n  constructor(opts) {\r\n    this.id = opts.id;\r\n    this.callback = opts.callback;\r\n    this.runAt = opts.runAt;\r\n    this.interval = opts.interval;\r\n    this.args = opts.args;\r\n  }\r\n\r\n  hasRef() {\r\n    return true;\r\n  }\r\n\r\n  ref() {\r\n    return this;\r\n  }\r\n\r\n  unref() {\r\n    return this;\r\n  }\r\n\r\n  refresh() {\r\n    return this;\r\n  }\r\n}\r\n\r\nclass MockTimers {\r\n  #realSetTimeout;\r\n  #realClearTimeout;\r\n  #realSetInterval;\r\n  #realClearInterval;\r\n  #realSetImmediate;\r\n  #realClearImmediate;\r\n\r\n  #realPromisifiedSetTimeout;\r\n  #realPromisifiedSetInterval;\r\n\r\n  #realTimersSetTimeout;\r\n  #realTimersClearTimeout;\r\n  #realTimersSetInterval;\r\n  #realTimersClearInterval;\r\n  #realTimersSetImmediate;\r\n  #realTimersClearImmediate;\r\n  #realPromisifiedSetImmediate;\r\n\r\n  #nativeDateDescriptor;\r\n\r\n  #timersInContext = [];\r\n  #isEnabled = false;\r\n  #currentTimer = 1;\r\n  #now = kInitialEpoch;\r\n\r\n  #executionQueue = new PriorityQueue(compareTimersLists, setPosition);\r\n\r\n  #setTimeout = FunctionPrototypeBind(this.#createTimer, this, false);\r\n  #clearTimeout = FunctionPrototypeBind(this.#clearTimer, this);\r\n  #setInterval = FunctionPrototypeBind(this.#createTimer, this, true);\r\n  #clearInterval = FunctionPrototypeBind(this.#clearTimer, this);\r\n  #clearImmediate = FunctionPrototypeBind(this.#clearTimer, this);\r\n\r\n  constructor() {\r\n    emitExperimentalWarning('The MockTimers API');\r\n  }\r\n\r\n  #restoreSetImmediate() {\r\n    ObjectDefineProperty(\r\n      globalThis,\r\n      'setImmediate',\r\n      this.#realSetImmediate,\r\n    );\r\n    ObjectDefineProperty(\r\n      globalThis,\r\n      'clearImmediate',\r\n      this.#realClearImmediate,\r\n    );\r\n    ObjectDefineProperty(\r\n      nodeTimers,\r\n      'setImmediate',\r\n      this.#realTimersSetImmediate,\r\n    );\r\n    ObjectDefineProperty(\r\n      nodeTimers,\r\n      'clearImmediate',\r\n      this.#realTimersClearImmediate,\r\n    );\r\n    ObjectDefineProperty(\r\n      nodeTimersPromises,\r\n      'setImmediate',\r\n      this.#realPromisifiedSetImmediate,\r\n    );\r\n  }\r\n\r\n  #restoreOriginalSetInterval() {\r\n    ObjectDefineProperty(\r\n      globalThis,\r\n      'setInterval',\r\n      this.#realSetInterval,\r\n    );\r\n    ObjectDefineProperty(\r\n      globalThis,\r\n      'clearInterval',\r\n      this.#realClearInterval,\r\n    );\r\n    ObjectDefineProperty(\r\n      nodeTimers,\r\n      'setInterval',\r\n      this.#realTimersSetInterval,\r\n    );\r\n    ObjectDefineProperty(\r\n      nodeTimers,\r\n      'clearInterval',\r\n      this.#realTimersClearInterval,\r\n    );\r\n    ObjectDefineProperty(\r\n      nodeTimersPromises,\r\n      'setInterval',\r\n      this.#realPromisifiedSetInterval,\r\n    );\r\n  }\r\n\r\n  #restoreOriginalSetTimeout() {\r\n    ObjectDefineProperty(\r\n      globalThis,\r\n      'setTimeout',\r\n      this.#realSetTimeout,\r\n    );\r\n    ObjectDefineProperty(\r\n      globalThis,\r\n      'clearTimeout',\r\n      this.#realClearTimeout,\r\n    );\r\n    ObjectDefineProperty(\r\n      nodeTimers,\r\n      'setTimeout',\r\n      this.#realTimersSetTimeout,\r\n    );\r\n    ObjectDefineProperty(\r\n      nodeTimers,\r\n      'clearTimeout',\r\n      this.#realTimersClearTimeout,\r\n    );\r\n    ObjectDefineProperty(\r\n      nodeTimersPromises,\r\n      'setTimeout',\r\n      this.#realPromisifiedSetTimeout,\r\n    );\r\n  }\r\n\r\n  #storeOriginalSetImmediate() {\r\n    this.#realSetImmediate = ObjectGetOwnPropertyDescriptor(\r\n      globalThis,\r\n      'setImmediate',\r\n    );\r\n    this.#realClearImmediate = ObjectGetOwnPropertyDescriptor(\r\n      globalThis,\r\n      'clearImmediate',\r\n    );\r\n    this.#realTimersSetImmediate = ObjectGetOwnPropertyDescriptor(\r\n      nodeTimers,\r\n      'setImmediate',\r\n    );\r\n    this.#realTimersClearImmediate = ObjectGetOwnPropertyDescriptor(\r\n      nodeTimers,\r\n      'clearImmediate',\r\n    );\r\n    this.#realPromisifiedSetImmediate = ObjectGetOwnPropertyDescriptor(\r\n      nodeTimersPromises,\r\n      'setImmediate',\r\n    );\r\n  }\r\n\r\n  #storeOriginalSetInterval() {\r\n    this.#realSetInterval = ObjectGetOwnPropertyDescriptor(\r\n      globalThis,\r\n      'setInterval',\r\n    );\r\n    this.#realClearInterval = ObjectGetOwnPropertyDescriptor(\r\n      globalThis,\r\n      'clearInterval',\r\n    );\r\n    this.#realTimersSetInterval = ObjectGetOwnPropertyDescriptor(\r\n      nodeTimers,\r\n      'setInterval',\r\n    );\r\n    this.#realTimersClearInterval = ObjectGetOwnPropertyDescriptor(\r\n      nodeTimers,\r\n      'clearInterval',\r\n    );\r\n    this.#realPromisifiedSetInterval = ObjectGetOwnPropertyDescriptor(\r\n      nodeTimersPromises,\r\n      'setInterval',\r\n    );\r\n  }\r\n\r\n  #storeOriginalSetTimeout() {\r\n    this.#realSetTimeout = ObjectGetOwnPropertyDescriptor(\r\n      globalThis,\r\n      'setTimeout',\r\n    );\r\n    this.#realClearTimeout = ObjectGetOwnPropertyDescriptor(\r\n      globalThis,\r\n      'clearTimeout',\r\n    );\r\n    this.#realTimersSetTimeout = ObjectGetOwnPropertyDescriptor(\r\n      nodeTimers,\r\n      'setTimeout',\r\n    );\r\n    this.#realTimersClearTimeout = ObjectGetOwnPropertyDescriptor(\r\n      nodeTimers,\r\n      'clearTimeout',\r\n    );\r\n    this.#realPromisifiedSetTimeout = ObjectGetOwnPropertyDescriptor(\r\n      nodeTimersPromises,\r\n      'setTimeout',\r\n    );\r\n  }\r\n\r\n  #createTimer(isInterval, callback, delay, ...args) {\r\n    const timerId = this.#currentTimer++;\r\n    const opts = {\r\n      __proto__: null,\r\n      id: timerId,\r\n      callback,\r\n      runAt: this.#now + delay,\r\n      interval: isInterval ? delay : undefined,\r\n      args,\r\n    };\r\n\r\n    const timer = new Timeout(opts);\r\n    this.#executionQueue.insert(timer);\r\n    return timer;\r\n  }\r\n\r\n  #clearTimer(timer) {\r\n    if (timer.priorityQueuePosition !== undefined) {\r\n      this.#executionQueue.removeAt(timer.priorityQueuePosition);\r\n      timer.priorityQueuePosition = undefined;\r\n    }\r\n  }\r\n\r\n  #createDate() {\r\n    kMock ??= Symbol('MockTimers');\r\n    const NativeDateConstructor = this.#nativeDateDescriptor.value;\r\n    /**\r\n     * Function to mock the Date constructor, treats cases as per ECMA-262\r\n     * and returns a Date object with a mocked implementation\r\n     * @typedef {Date} MockDate\r\n     * @returns {MockDate} a mocked Date object\r\n     */\r\n    function MockDate(year, month, date, hours, minutes, seconds, ms) {\r\n      const mockTimersSource = MockDate[kMock];\r\n      const nativeDate = mockTimersSource.#nativeDateDescriptor.value;\r\n\r\n      // As of the fake-timers implementation for Sinon\r\n      // ref https://github.com/sinonjs/fake-timers/blob/a4c757f80840829e45e0852ea1b17d87a998388e/src/fake-timers-src.js#L456\r\n      // This covers the Date constructor called as a function ref.\r\n      // ECMA-262 Edition 5.1 section 15.9.2.\r\n      // and ECMA-262 Edition 14 Section 21.4.2.1\r\n      // replaces 'this instanceof MockDate' with a more reliable check\r\n      // from ECMA-262 Edition 14 Section 13.3.12.1 NewTarget\r\n      if (!new.target) {\r\n        return DatePrototypeToString(new nativeDate(mockTimersSource.#now));\r\n      }\r\n\r\n      // Cases where Date is called as a constructor\r\n      // This is intended as a defensive implementation to avoid\r\n      // having unexpected returns\r\n      switch (arguments.length) {\r\n        case 0:\r\n          return new nativeDate(MockDate[kMock].#now);\r\n        case 1:\r\n          return new nativeDate(year);\r\n        case 2:\r\n          return new nativeDate(year, month);\r\n        case 3:\r\n          return new nativeDate(year, month, date);\r\n        case 4:\r\n          return new nativeDate(year, month, date, hours);\r\n        case 5:\r\n          return new nativeDate(year, month, date, hours, minutes);\r\n        case 6:\r\n          return new nativeDate(year, month, date, hours, minutes, seconds);\r\n        default:\r\n          return new nativeDate(year, month, date, hours, minutes, seconds, ms);\r\n      }\r\n    }\r\n\r\n    // Prototype is read-only, and non assignable through Object.defineProperties\r\n    // eslint-disable-next-line no-unused-vars -- used to get the prototype out of the object\r\n    const { prototype, ...dateProps } = ObjectGetOwnPropertyDescriptors(NativeDateConstructor);\r\n\r\n    // Binds all the properties of Date to the MockDate function\r\n    ObjectDefineProperties(\r\n      MockDate,\r\n      dateProps,\r\n    );\r\n\r\n    MockDate.now = function now() {\r\n      return MockDate[kMock].#now;\r\n    };\r\n\r\n    // This is just to print the function { native code } in the console\r\n    // when the user prints the function and not the internal code\r\n    MockDate.toString = function toString() {\r\n      return FunctionPrototypeToString(MockDate[kMock].#nativeDateDescriptor.value);\r\n    };\r\n\r\n    // We need to polute the prototype of this\r\n    ObjectDefineProperties(MockDate, {\r\n      __proto__: null,\r\n      [kMock]: {\r\n        __proto__: null,\r\n        enumerable: false,\r\n        configurable: false,\r\n        writable: false,\r\n        value: this,\r\n      },\r\n\r\n      isMock: {\r\n        __proto__: null,\r\n        enumerable: true,\r\n        configurable: false,\r\n        writable: false,\r\n        value: true,\r\n      },\r\n    });\r\n\r\n    MockDate.prototype = NativeDateConstructor.prototype;\r\n    MockDate.parse = NativeDateConstructor.parse;\r\n    MockDate.UTC = NativeDateConstructor.UTC;\r\n    MockDate.prototype.toUTCString = NativeDateConstructor.prototype.toUTCString;\r\n    return MockDate;\r\n  }\r\n\r\n  async * #setIntervalPromisified(interval, result, options) {\r\n    const context = this;\r\n    const emitter = new EventEmitter();\r\n    if (options?.signal) {\r\n      validateAbortSignal(options.signal, 'options.signal');\r\n\r\n      if (options.signal.aborted) {\r\n        throw abortIt(options.signal);\r\n      }\r\n\r\n      const onAbort = (reason) => {\r\n        emitter.emit('data', { __proto__: null, aborted: true, reason });\r\n      };\r\n\r\n      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;\r\n      options.signal.addEventListener('abort', onAbort, {\r\n        __proto__: null,\r\n        once: true,\r\n        [kResistStopPropagation]: true,\r\n      });\r\n    }\r\n\r\n    const eventIt = EventEmitter.on(emitter, 'data');\r\n    const callback = () => {\r\n      emitter.emit('data', result);\r\n    };\r\n\r\n    const timer = this.#createTimer(true, callback, interval, options);\r\n    const clearListeners = () => {\r\n      emitter.removeAllListeners();\r\n      context.#clearTimer(timer);\r\n    };\r\n    const iterator = {\r\n      __proto__: null,\r\n      [SymbolAsyncIterator]() {\r\n        return this;\r\n      },\r\n      async next() {\r\n        const result = await eventIt.next();\r\n        const value = ArrayPrototypeAt(result.value, 0);\r\n        if (value?.aborted) {\r\n          iterator.return();\r\n          throw abortIt(options.signal);\r\n        }\r\n\r\n        return {\r\n          __proto__: null,\r\n          done: result.done,\r\n          value,\r\n        };\r\n      },\r\n      async return() {\r\n        clearListeners();\r\n        return eventIt.return();\r\n      },\r\n    };\r\n    yield* iterator;\r\n  }\r\n\r\n  #setImmediate(callback, ...args) {\r\n    return this.#createTimer(\r\n      false,\r\n      callback,\r\n      TIMERS_DEFAULT_INTERVAL.setImmediate,\r\n      ...args,\r\n    );\r\n  }\r\n\r\n  #promisifyTimer({ timerFn, clearFn, ms, result, options }) {\r\n    return new Promise((resolve, reject) => {\r\n      if (options?.signal) {\r\n        try {\r\n          validateAbortSignal(options.signal, 'options.signal');\r\n        } catch (err) {\r\n          return reject(err);\r\n        }\r\n\r\n        if (options.signal.aborted) {\r\n          return reject(abortIt(options.signal));\r\n        }\r\n      }\r\n\r\n      const onabort = () => {\r\n        clearFn(timer);\r\n        return reject(abortIt(options.signal));\r\n      };\r\n\r\n      const timer = timerFn(() => {\r\n        return resolve(result);\r\n      }, ms);\r\n\r\n      if (options?.signal) {\r\n        kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;\r\n        options.signal.addEventListener('abort', onabort, {\r\n          __proto__: null,\r\n          once: true,\r\n          [kResistStopPropagation]: true,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  #setImmediatePromisified(result, options) {\r\n    return this.#promisifyTimer({\r\n      __proto__: null,\r\n      timerFn: FunctionPrototypeBind(this.#setImmediate, this),\r\n      clearFn: FunctionPrototypeBind(this.#clearImmediate, this),\r\n      ms: TIMERS_DEFAULT_INTERVAL.setImmediate,\r\n      result,\r\n      options,\r\n    });\r\n  }\r\n\r\n  #setTimeoutPromisified(ms, result, options) {\r\n    return this.#promisifyTimer({\r\n      __proto__: null,\r\n      timerFn: FunctionPrototypeBind(this.#setTimeout, this),\r\n      clearFn: FunctionPrototypeBind(this.#clearTimeout, this),\r\n      ms,\r\n      result,\r\n      options,\r\n    });\r\n  }\r\n\r\n  #assertTimersAreEnabled() {\r\n    if (!this.#isEnabled) {\r\n      throw new ERR_INVALID_STATE(\r\n        'You should enable MockTimers first by calling the .enable function',\r\n      );\r\n    }\r\n  }\r\n\r\n  #assertTimeArg(time) {\r\n    if (time < 0) {\r\n      throw new ERR_INVALID_ARG_VALUE('time', 'positive integer', time);\r\n    }\r\n  }\r\n\r\n  #isValidDateWithGetTime(maybeDate) {\r\n    // Validation inspired on https://github.com/inspect-js/is-date-object/blob/main/index.js#L3-L11\r\n    try {\r\n      DatePrototypeGetTime(maybeDate);\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  #toggleEnableTimers(activate) {\r\n    const options = {\r\n      __proto__: null,\r\n      toFake: {\r\n        __proto__: null,\r\n        setTimeout: () => {\r\n          this.#storeOriginalSetTimeout();\r\n\r\n          globalThis.setTimeout = this.#setTimeout;\r\n          globalThis.clearTimeout = this.#clearTimeout;\r\n\r\n          nodeTimers.setTimeout = this.#setTimeout;\r\n          nodeTimers.clearTimeout = this.#clearTimeout;\r\n\r\n          nodeTimersPromises.setTimeout = FunctionPrototypeBind(\r\n            this.#setTimeoutPromisified,\r\n            this,\r\n          );\r\n        },\r\n        setInterval: () => {\r\n          this.#storeOriginalSetInterval();\r\n\r\n          globalThis.setInterval = this.#setInterval;\r\n          globalThis.clearInterval = this.#clearInterval;\r\n\r\n          nodeTimers.setInterval = this.#setInterval;\r\n          nodeTimers.clearInterval = this.#clearInterval;\r\n\r\n          nodeTimersPromises.setInterval = FunctionPrototypeBind(\r\n            this.#setIntervalPromisified,\r\n            this,\r\n          );\r\n        },\r\n        setImmediate: () => {\r\n          this.#storeOriginalSetImmediate();\r\n\r\n          // setImmediate functions needs to bind MockTimers\r\n          // otherwise it will throw an error when called\r\n          // \"Receiver must be an instance of MockTimers\"\r\n          // because #setImmediate is the only function here\r\n          // that calls #createTimer and it's not bound to MockTimers\r\n          globalThis.setImmediate = FunctionPrototypeBind(\r\n            this.#setImmediate,\r\n            this,\r\n          );\r\n          globalThis.clearImmediate = this.#clearImmediate;\r\n\r\n          nodeTimers.setImmediate = FunctionPrototypeBind(\r\n            this.#setImmediate,\r\n            this,\r\n          );\r\n          nodeTimers.clearImmediate = this.#clearImmediate;\r\n          nodeTimersPromises.setImmediate = FunctionPrototypeBind(\r\n            this.#setImmediatePromisified,\r\n            this,\r\n          );\r\n        },\r\n        Date: () => {\r\n          this.#nativeDateDescriptor = ObjectGetOwnPropertyDescriptor(globalThis, 'Date');\r\n          globalThis.Date = this.#createDate();\r\n        },\r\n      },\r\n      toReal: {\r\n        __proto__: null,\r\n        setTimeout: () => {\r\n          this.#restoreOriginalSetTimeout();\r\n        },\r\n        setInterval: () => {\r\n          this.#restoreOriginalSetInterval();\r\n        },\r\n        setImmediate: () => {\r\n          this.#restoreSetImmediate();\r\n        },\r\n        Date: () => {\r\n          ObjectDefineProperty(globalThis, 'Date', this.#nativeDateDescriptor);\r\n        },\r\n      },\r\n    };\r\n\r\n    const target = activate ? options.toFake : options.toReal;\r\n    ArrayPrototypeForEach(this.#timersInContext, (timer) => target[timer]());\r\n    this.#isEnabled = activate;\r\n  }\r\n\r\n  /**\r\n   * Advances the virtual time of MockTimers by the specified duration (in milliseconds).\r\n   * This method simulates the passage of time and triggers any scheduled timers that are due.\r\n   * @param {number} [time=1] - The amount of time (in milliseconds) to advance the virtual time.\r\n   * @throws {ERR_INVALID_STATE} If MockTimers are not enabled.\r\n   * @throws {ERR_INVALID_ARG_VALUE} If a negative time value is provided.\r\n   */\r\n  tick(time = 1) {\r\n    this.#assertTimersAreEnabled();\r\n    this.#assertTimeArg(time);\r\n\r\n    this.#now += time;\r\n    let timer = this.#executionQueue.peek();\r\n    while (timer) {\r\n      if (timer.runAt > this.#now) break;\r\n      FunctionPrototypeApply(timer.callback, undefined, timer.args);\r\n\r\n      // Check if the timeout was cleared by calling clearTimeout inside its own callback\r\n      const afterCallback = this.#executionQueue.peek();\r\n      if (afterCallback?.id === timer.id) {\r\n        this.#executionQueue.shift();\r\n        timer.priorityQueuePosition = undefined;\r\n      }\r\n\r\n      if (timer.interval !== undefined) {\r\n        timer.runAt += timer.interval;\r\n        this.#executionQueue.insert(timer);\r\n      }\r\n\r\n      timer = this.#executionQueue.peek();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @typedef {{apis: SUPPORTED_APIS;now: number | Date;}} EnableOptions Options to enable the timers\r\n   * @property {SUPPORTED_APIS} apis List of timers to enable, defaults to all\r\n   * @property {number | Date} now The epoch to which the timers should be set to, defaults to 0\r\n   */\r\n  /**\r\n   * Enables the MockTimers replacing the native timers with the fake ones.\r\n   * @param {EnableOptions} options\r\n   */\r\n  enable(options = { __proto__: null, apis: SUPPORTED_APIS, now: 0 }) {\r\n    const internalOptions = { __proto__: null, ...options };\r\n    if (this.#isEnabled) {\r\n      throw new ERR_INVALID_STATE('MockTimers is already enabled!');\r\n    }\r\n\r\n    if (NumberIsNaN(internalOptions.now)) {\r\n      throw new ERR_INVALID_ARG_VALUE('now', internalOptions.now, `epoch must be a positive integer received ${internalOptions.now}`);\r\n    }\r\n\r\n    if (!internalOptions.now) {\r\n      internalOptions.now = 0;\r\n    }\r\n\r\n    if (!internalOptions.apis) {\r\n      internalOptions.apis = SUPPORTED_APIS;\r\n    }\r\n\r\n    validateArray(internalOptions.apis, 'options.apis');\r\n    // Check that the timers passed are supported\r\n    ArrayPrototypeForEach(internalOptions.apis, (timer) => {\r\n      if (!ArrayPrototypeIncludes(SUPPORTED_APIS, timer)) {\r\n        throw new ERR_INVALID_ARG_VALUE(\r\n          'options.apis',\r\n          timer,\r\n          `option ${timer} is not supported`,\r\n        );\r\n      }\r\n    });\r\n    this.#timersInContext = internalOptions.apis;\r\n\r\n    // Checks if the second argument is the initial time\r\n    if (this.#isValidDateWithGetTime(internalOptions.now)) {\r\n      this.#now = DatePrototypeGetTime(internalOptions.now);\r\n    } else if (validateNumber(internalOptions.now, 'initialTime') === undefined) {\r\n      this.#assertTimeArg(internalOptions.now);\r\n      this.#now = internalOptions.now;\r\n    }\r\n\r\n    this.#toggleEnableTimers(true);\r\n  }\r\n\r\n  /**\r\n   * Sets the current time to the given epoch.\r\n   * @param {number} time The epoch to set the current time to.\r\n   */\r\n  setTime(time = kInitialEpoch) {\r\n    validateNumber(time, 'time');\r\n    this.#assertTimeArg(time);\r\n    this.#assertTimersAreEnabled();\r\n\r\n    this.#now = time;\r\n  }\r\n\r\n  /**\r\n   * An alias for `this.reset()`, allowing the disposal of the `MockTimers` instance.\r\n   */\r\n  [SymbolDispose]() {\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Resets MockTimers, disabling any enabled timers and clearing the execution queue.\r\n   * Does nothing if MockTimers are not enabled.\r\n   */\r\n  reset() {\r\n    // Ignore if not enabled\r\n    if (!this.#isEnabled) return;\r\n\r\n    this.#toggleEnableTimers(false);\r\n    this.#timersInContext = [];\r\n    this.#now = kInitialEpoch;\r\n\r\n    let timer = this.#executionQueue.peek();\r\n    while (timer) {\r\n      this.#executionQueue.shift();\r\n      timer = this.#executionQueue.peek();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Runs all scheduled timers until there are no more pending timers.\r\n   * @throws {ERR_INVALID_STATE} If MockTimers are not enabled.\r\n   */\r\n  runAll() {\r\n    this.#assertTimersAreEnabled();\r\n    const longestTimer = this.#executionQueue.peekBottom();\r\n    if (!longestTimer) return;\r\n    this.tick(longestTimer.runAt - this.#now);\r\n  }\r\n}\r\n\r\nmodule.exports = { MockTimers };\r\n"
  },
  "219": {
    "metadata": {
      "scriptId": "219",
      "url": "node:timers/promises",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 230,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "df92785efc034b4f17fa350aee2666eadfaba55db6e6c292bc12fcb65ecb278a",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 6610,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:timers/promises"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeBind,\r\n  Promise,\r\n  PromiseReject,\r\n  ReflectConstruct,\r\n  SafePromisePrototypeFinally,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  Timeout,\r\n  Immediate,\r\n  insert,\r\n} = require('internal/timers');\r\nconst {\r\n  clearImmediate,\r\n  clearInterval,\r\n  clearTimeout,\r\n} = require('timers');\r\n\r\nconst {\r\n  AbortError,\r\n  codes: {\r\n    ERR_ILLEGAL_CONSTRUCTOR,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_THIS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateAbortSignal,\r\n  validateBoolean,\r\n  validateObject,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  kEmptyObject,\r\n} = require('internal/util');\r\n\r\nconst kScheduler = Symbol('kScheduler');\r\nlet kResistStopPropagation;\r\n\r\nfunction cancelListenerHandler(clear, reject, signal) {\r\n  if (!this._destroyed) {\r\n    clear(this);\r\n    reject(new AbortError(undefined, { cause: signal?.reason }));\r\n  }\r\n}\r\n\r\nfunction setTimeout(after, value, options = kEmptyObject) {\r\n  const args = value !== undefined ? [value] : value;\r\n  if (options == null || typeof options !== 'object') {\r\n    return PromiseReject(\r\n      new ERR_INVALID_ARG_TYPE(\r\n        'options',\r\n        'Object',\r\n        options));\r\n  }\r\n  const { signal, ref = true } = options;\r\n  try {\r\n    validateAbortSignal(signal, 'options.signal');\r\n  } catch (err) {\r\n    return PromiseReject(err);\r\n  }\r\n  if (typeof ref !== 'boolean') {\r\n    return PromiseReject(\r\n      new ERR_INVALID_ARG_TYPE(\r\n        'options.ref',\r\n        'boolean',\r\n        ref));\r\n  }\r\n\r\n  if (signal?.aborted) {\r\n    return PromiseReject(new AbortError(undefined, { cause: signal.reason }));\r\n  }\r\n  let oncancel;\r\n  const ret = new Promise((resolve, reject) => {\r\n    const timeout = new Timeout(resolve, after, args, false, ref);\r\n    insert(timeout, timeout._idleTimeout);\r\n    if (signal) {\r\n      oncancel = FunctionPrototypeBind(cancelListenerHandler,\r\n                                       timeout, clearTimeout, reject, signal);\r\n      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;\r\n      signal.addEventListener('abort', oncancel, { __proto__: null, [kResistStopPropagation]: true });\r\n    }\r\n  });\r\n  return oncancel !== undefined ?\r\n    SafePromisePrototypeFinally(\r\n      ret,\r\n      () => signal.removeEventListener('abort', oncancel)) : ret;\r\n}\r\n\r\nfunction setImmediate(value, options = kEmptyObject) {\r\n  if (options == null || typeof options !== 'object') {\r\n    return PromiseReject(\r\n      new ERR_INVALID_ARG_TYPE(\r\n        'options',\r\n        'Object',\r\n        options));\r\n  }\r\n  const { signal, ref = true } = options;\r\n  try {\r\n    validateAbortSignal(signal, 'options.signal');\r\n  } catch (err) {\r\n    return PromiseReject(err);\r\n  }\r\n  if (typeof ref !== 'boolean') {\r\n    return PromiseReject(\r\n      new ERR_INVALID_ARG_TYPE(\r\n        'options.ref',\r\n        'boolean',\r\n        ref));\r\n  }\r\n\r\n  if (signal?.aborted) {\r\n    return PromiseReject(new AbortError(undefined, { cause: signal.reason }));\r\n  }\r\n  let oncancel;\r\n  const ret = new Promise((resolve, reject) => {\r\n    const immediate = new Immediate(resolve, [value]);\r\n    if (!ref) immediate.unref();\r\n    if (signal) {\r\n      oncancel = FunctionPrototypeBind(cancelListenerHandler,\r\n                                       immediate, clearImmediate, reject,\r\n                                       signal);\r\n      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;\r\n      signal.addEventListener('abort', oncancel, { __proto__: null, [kResistStopPropagation]: true });\r\n    }\r\n  });\r\n  return oncancel !== undefined ?\r\n    SafePromisePrototypeFinally(\r\n      ret,\r\n      () => signal.removeEventListener('abort', oncancel)) : ret;\r\n}\r\n\r\nasync function* setInterval(after, value, options = kEmptyObject) {\r\n  validateObject(options, 'options');\r\n  const { signal, ref = true } = options;\r\n  validateAbortSignal(signal, 'options.signal');\r\n  validateBoolean(ref, 'options.ref');\r\n\r\n  if (signal?.aborted)\r\n    throw new AbortError(undefined, { cause: signal?.reason });\r\n\r\n  let onCancel;\r\n  let interval;\r\n  try {\r\n    let notYielded = 0;\r\n    let callback;\r\n    interval = new Timeout(() => {\r\n      notYielded++;\r\n      if (callback) {\r\n        callback();\r\n        callback = undefined;\r\n      }\r\n    }, after, undefined, true, ref);\r\n    insert(interval, interval._idleTimeout);\r\n    if (signal) {\r\n      onCancel = () => {\r\n        clearInterval(interval);\r\n        if (callback) {\r\n          callback(\r\n            PromiseReject(\r\n              new AbortError(undefined, { cause: signal.reason })));\r\n          callback = undefined;\r\n        }\r\n      };\r\n      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;\r\n      signal.addEventListener('abort', onCancel, { __proto__: null, once: true, [kResistStopPropagation]: true });\r\n    }\r\n\r\n    while (!signal?.aborted) {\r\n      if (notYielded === 0) {\r\n        await new Promise((resolve) => callback = resolve);\r\n      }\r\n      for (; notYielded > 0; notYielded--) {\r\n        yield value;\r\n      }\r\n    }\r\n    throw new AbortError(undefined, { cause: signal?.reason });\r\n  } finally {\r\n    clearInterval(interval);\r\n    signal?.removeEventListener('abort', onCancel);\r\n  }\r\n}\r\n\r\n// TODO(@jasnell): Scheduler is an API currently being discussed by WICG\r\n// for Web Platform standardization: https://github.com/WICG/scheduling-apis\r\n// The scheduler.yield() and scheduler.wait() methods correspond roughly to\r\n// the awaitable setTimeout and setImmediate implementations here. This api\r\n// should be considered to be experimental until the spec for these are\r\n// finalized. Note, also, that Scheduler is expected to be defined as a global,\r\n// but while the API is experimental we shouldn't expose it as such.\r\nclass Scheduler {\r\n  constructor() {\r\n    throw new ERR_ILLEGAL_CONSTRUCTOR();\r\n  }\r\n\r\n  /**\r\n   * @returns {Promise<void>}\r\n   */\r\n  yield() {\r\n    if (!this[kScheduler])\r\n      throw new ERR_INVALID_THIS('Scheduler');\r\n    return setImmediate();\r\n  }\r\n\r\n  /**\r\n   * @typedef {import('../internal/abort_controller').AbortSignal} AbortSignal\r\n   * @param {number} delay\r\n   * @param {{ signal?: AbortSignal }} [options]\r\n   * @returns {Promise<void>}\r\n   */\r\n  wait(delay, options) {\r\n    if (!this[kScheduler])\r\n      throw new ERR_INVALID_THIS('Scheduler');\r\n    return setTimeout(delay, undefined, { signal: options?.signal });\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  setTimeout,\r\n  setImmediate,\r\n  setInterval,\r\n  scheduler: ReflectConstruct(function() {\r\n    this[kScheduler] = true;\r\n  }, [], Scheduler),\r\n};\r\n"
  },
  "220": {
    "metadata": {
      "scriptId": "220",
      "url": "node:trace_events",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 96,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "5a1993883c3dca755d14e0e2def38976c9960b622298fd04c84e7b685a8f9314",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2256,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:trace_events"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeJoin,\r\n  SafeSet,\r\n} = primordials;\r\n\r\nconst { hasTracing } = internalBinding('config');\r\n\r\nconst kMaxTracingCount = 10;\r\n\r\nconst {\r\n  ERR_TRACE_EVENTS_CATEGORY_REQUIRED,\r\n  ERR_TRACE_EVENTS_UNAVAILABLE,\r\n} = require('internal/errors').codes;\r\n\r\nconst { ownsProcessState } = require('internal/worker');\r\nif (!hasTracing || !ownsProcessState)\r\n  throw new ERR_TRACE_EVENTS_UNAVAILABLE();\r\n\r\nconst { CategorySet, getEnabledCategories } = internalBinding('trace_events');\r\nconst { customInspectSymbol } = require('internal/util');\r\nconst { format } = require('internal/util/inspect');\r\nconst {\r\n  validateObject,\r\n  validateStringArray,\r\n} = require('internal/validators');\r\n\r\nconst enabledTracingObjects = new SafeSet();\r\n\r\nclass Tracing {\r\n  #handle;\r\n  #categories;\r\n  #enabled = false;\r\n\r\n  constructor(categories) {\r\n    this.#handle = new CategorySet(categories);\r\n    this.#categories = categories;\r\n  }\r\n\r\n  enable() {\r\n    if (!this.#enabled) {\r\n      this.#enabled = true;\r\n      this.#handle.enable();\r\n      enabledTracingObjects.add(this);\r\n      if (enabledTracingObjects.size > kMaxTracingCount) {\r\n        process.emitWarning(\r\n          'Possible trace_events memory leak detected. There are more than ' +\r\n          `${kMaxTracingCount} enabled Tracing objects.`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  disable() {\r\n    if (this.#enabled) {\r\n      this.#enabled = false;\r\n      this.#handle.disable();\r\n      enabledTracingObjects.delete(this);\r\n    }\r\n  }\r\n\r\n  get enabled() {\r\n    return this.#enabled;\r\n  }\r\n\r\n  get categories() {\r\n    return ArrayPrototypeJoin(this.#categories, ',');\r\n  }\r\n\r\n  [customInspectSymbol](depth, opts) {\r\n    if (typeof depth === 'number' && depth < 0)\r\n      return this;\r\n\r\n    const obj = {\r\n      enabled: this.enabled,\r\n      categories: this.categories,\r\n    };\r\n    return `Tracing ${format(obj)}`;\r\n  }\r\n}\r\n\r\nfunction createTracing(options) {\r\n  validateObject(options, 'options');\r\n  validateStringArray(options.categories, 'options.categories');\r\n\r\n  if (options.categories.length <= 0)\r\n    throw new ERR_TRACE_EVENTS_CATEGORY_REQUIRED();\r\n\r\n  return new Tracing(options.categories);\r\n}\r\n\r\nmodule.exports = {\r\n  createTracing,\r\n  getEnabledCategories,\r\n};\r\n"
  },
  "221": {
    "metadata": {
      "scriptId": "221",
      "url": "node:tty",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 169,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "2e98750a84ea22f98f4acb33ad4c712b0f6d45b9d5935189be867e928f7b1b23",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 5235,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:tty"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  Array,\r\n  NumberIsInteger,\r\n  ObjectSetPrototypeOf,\r\n} = primordials;\r\n\r\nconst net = require('net');\r\nconst { TTY, isTTY } = internalBinding('tty_wrap');\r\nconst {\r\n  ErrnoException,\r\n  codes: {\r\n    ERR_INVALID_FD,\r\n    ERR_TTY_INIT_FAILED,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  getColorDepth,\r\n  hasColors,\r\n} = require('internal/tty');\r\n\r\n// Lazy loaded for startup performance.\r\nlet readline;\r\n\r\nfunction isatty(fd) {\r\n  return NumberIsInteger(fd) && fd >= 0 && fd <= 2147483647 &&\r\n         isTTY(fd);\r\n}\r\n\r\nfunction ReadStream(fd, options) {\r\n  if (!(this instanceof ReadStream))\r\n    return new ReadStream(fd, options);\r\n  if (fd >> 0 !== fd || fd < 0)\r\n    throw new ERR_INVALID_FD(fd);\r\n\r\n  const ctx = {};\r\n  const tty = new TTY(fd, ctx);\r\n  if (ctx.code !== undefined) {\r\n    throw new ERR_TTY_INIT_FAILED(ctx);\r\n  }\r\n\r\n  net.Socket.call(this, {\r\n    readableHighWaterMark: 0,\r\n    handle: tty,\r\n    manualStart: true,\r\n    ...options,\r\n  });\r\n\r\n  this.isRaw = false;\r\n  this.isTTY = true;\r\n}\r\n\r\nObjectSetPrototypeOf(ReadStream.prototype, net.Socket.prototype);\r\nObjectSetPrototypeOf(ReadStream, net.Socket);\r\n\r\nReadStream.prototype.setRawMode = function(flag) {\r\n  flag = !!flag;\r\n  const err = this._handle?.setRawMode(flag);\r\n  if (err) {\r\n    this.emit('error', new ErrnoException(err, 'setRawMode'));\r\n    return this;\r\n  }\r\n  this.isRaw = flag;\r\n  return this;\r\n};\r\n\r\nfunction WriteStream(fd) {\r\n  if (!(this instanceof WriteStream))\r\n    return new WriteStream(fd);\r\n  if (fd >> 0 !== fd || fd < 0)\r\n    throw new ERR_INVALID_FD(fd);\r\n\r\n  const ctx = {};\r\n  const tty = new TTY(fd, ctx);\r\n  if (ctx.code !== undefined) {\r\n    throw new ERR_TTY_INIT_FAILED(ctx);\r\n  }\r\n\r\n  net.Socket.call(this, {\r\n    readableHighWaterMark: 0,\r\n    handle: tty,\r\n    manualStart: true,\r\n  });\r\n\r\n  // Prevents interleaved or dropped stdout/stderr output for terminals.\r\n  // As noted in the following reference, local TTYs tend to be quite fast and\r\n  // this behavior has become expected due historical functionality on OS X,\r\n  // even though it was originally intended to change in v1.0.2 (Libuv 1.2.1).\r\n  // Ref: https://github.com/nodejs/node/pull/1771#issuecomment-119351671\r\n  this._handle.setBlocking(true);\r\n\r\n  const winSize = new Array(2);\r\n  const err = this._handle.getWindowSize(winSize);\r\n  if (!err) {\r\n    this.columns = winSize[0];\r\n    this.rows = winSize[1];\r\n  }\r\n}\r\n\r\nObjectSetPrototypeOf(WriteStream.prototype, net.Socket.prototype);\r\nObjectSetPrototypeOf(WriteStream, net.Socket);\r\n\r\nWriteStream.prototype.isTTY = true;\r\n\r\nWriteStream.prototype.getColorDepth = getColorDepth;\r\n\r\nWriteStream.prototype.hasColors = hasColors;\r\n\r\nWriteStream.prototype._refreshSize = function() {\r\n  const oldCols = this.columns;\r\n  const oldRows = this.rows;\r\n  const winSize = new Array(2);\r\n  const err = this._handle.getWindowSize(winSize);\r\n  if (err) {\r\n    this.emit('error', new ErrnoException(err, 'getWindowSize'));\r\n    return;\r\n  }\r\n  const { 0: newCols, 1: newRows } = winSize;\r\n  if (oldCols !== newCols || oldRows !== newRows) {\r\n    this.columns = newCols;\r\n    this.rows = newRows;\r\n    this.emit('resize');\r\n  }\r\n};\r\n\r\n// Backwards-compat\r\nWriteStream.prototype.cursorTo = function(x, y, callback) {\r\n  if (readline === undefined) readline = require('readline');\r\n  return readline.cursorTo(this, x, y, callback);\r\n};\r\nWriteStream.prototype.moveCursor = function(dx, dy, callback) {\r\n  if (readline === undefined) readline = require('readline');\r\n  return readline.moveCursor(this, dx, dy, callback);\r\n};\r\nWriteStream.prototype.clearLine = function(dir, callback) {\r\n  if (readline === undefined) readline = require('readline');\r\n  return readline.clearLine(this, dir, callback);\r\n};\r\nWriteStream.prototype.clearScreenDown = function(callback) {\r\n  if (readline === undefined) readline = require('readline');\r\n  return readline.clearScreenDown(this, callback);\r\n};\r\nWriteStream.prototype.getWindowSize = function() {\r\n  return [this.columns, this.rows];\r\n};\r\n\r\nmodule.exports = { isatty, ReadStream, WriteStream };\r\n"
  },
  "222": {
    "metadata": {
      "scriptId": "222",
      "url": "node:internal/tty",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 237,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "9a9ea26c8bb57720b23adfc7b4a7ac716ceaf211f0f9463a0c2ca1cec0d0b0c5",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 6722,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/tty"
    },
    "source": "// MIT License\r\n\r\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\r\n\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n// SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeSome,\r\n  RegExpPrototypeExec,\r\n  StringPrototypeSplit,\r\n  StringPrototypeToLowerCase,\r\n} = primordials;\r\n\r\nconst { validateInteger } = require('internal/validators');\r\n\r\nlet OSRelease;\r\n\r\nconst COLORS_2 = 1;\r\nconst COLORS_16 = 4;\r\nconst COLORS_256 = 8;\r\nconst COLORS_16m = 24;\r\n\r\n// Some entries were taken from `dircolors`\r\n// (https://linux.die.net/man/1/dircolors). The corresponding terminals might\r\n// support more than 16 colors, but this was not tested for.\r\n//\r\n// Copyright (C) 1996-2016 Free Software Foundation, Inc. Copying and\r\n// distribution of this file, with or without modification, are permitted\r\n// provided the copyright notice and this notice are preserved.\r\nconst TERM_ENVS = {\r\n  'eterm': COLORS_16,\r\n  'cons25': COLORS_16,\r\n  'console': COLORS_16,\r\n  'cygwin': COLORS_16,\r\n  'dtterm': COLORS_16,\r\n  'gnome': COLORS_16,\r\n  'hurd': COLORS_16,\r\n  'jfbterm': COLORS_16,\r\n  'konsole': COLORS_16,\r\n  'kterm': COLORS_16,\r\n  'mlterm': COLORS_16,\r\n  'mosh': COLORS_16m,\r\n  'putty': COLORS_16,\r\n  'st': COLORS_16,\r\n  // https://github.com/da-x/rxvt-unicode/tree/v9.22-with-24bit-color\r\n  'rxvt-unicode-24bit': COLORS_16m,\r\n  // https://gist.github.com/XVilka/8346728#gistcomment-2823421\r\n  'terminator': COLORS_16m,\r\n};\r\n\r\nconst TERM_ENVS_REG_EXP = [\r\n  /ansi/,\r\n  /color/,\r\n  /linux/,\r\n  /^con[0-9]*x[0-9]/,\r\n  /^rxvt/,\r\n  /^screen/,\r\n  /^xterm/,\r\n  /^vt100/,\r\n];\r\n\r\nlet warned = false;\r\nfunction warnOnDeactivatedColors(env) {\r\n  if (warned)\r\n    return;\r\n  let name = '';\r\n  if (env.NODE_DISABLE_COLORS !== undefined)\r\n    name = 'NODE_DISABLE_COLORS';\r\n  if (env.NO_COLOR !== undefined) {\r\n    if (name !== '') {\r\n      name += \"' and '\";\r\n    }\r\n    name += 'NO_COLOR';\r\n  }\r\n\r\n  if (name !== '') {\r\n    process.emitWarning(\r\n      `The '${name}' env is ignored due to the 'FORCE_COLOR' env being set.`,\r\n      'Warning',\r\n    );\r\n    warned = true;\r\n  }\r\n}\r\n\r\n// The `getColorDepth` API got inspired by multiple sources such as\r\n// https://github.com/chalk/supports-color,\r\n// https://github.com/isaacs/color-support.\r\nfunction getColorDepth(env = process.env) {\r\n  // Use level 0-3 to support the same levels as `chalk` does. This is done for\r\n  // consistency throughout the ecosystem.\r\n  if (env.FORCE_COLOR !== undefined) {\r\n    switch (env.FORCE_COLOR) {\r\n      case '':\r\n      case '1':\r\n      case 'true':\r\n        warnOnDeactivatedColors(env);\r\n        return COLORS_16;\r\n      case '2':\r\n        warnOnDeactivatedColors(env);\r\n        return COLORS_256;\r\n      case '3':\r\n        warnOnDeactivatedColors(env);\r\n        return COLORS_16m;\r\n      default:\r\n        return COLORS_2;\r\n    }\r\n  }\r\n\r\n  if (env.NODE_DISABLE_COLORS !== undefined ||\r\n      // See https://no-color.org/\r\n      env.NO_COLOR !== undefined ||\r\n      // The \"dumb\" special terminal, as defined by terminfo, doesn't support\r\n      // ANSI color control codes.\r\n      // See https://invisible-island.net/ncurses/terminfo.ti.html#toc-_Specials\r\n      env.TERM === 'dumb') {\r\n    return COLORS_2;\r\n  }\r\n\r\n  if (process.platform === 'win32') {\r\n    // Lazy load for startup performance.\r\n    if (OSRelease === undefined) {\r\n      const { release } = require('os');\r\n      OSRelease = StringPrototypeSplit(release(), '.');\r\n    }\r\n    // Windows 10 build 10586 is the first Windows release that supports 256\r\n    // colors. Windows 10 build 14931 is the first release that supports\r\n    // 16m/TrueColor.\r\n    if (+OSRelease[0] >= 10) {\r\n      const build = +OSRelease[2];\r\n      if (build >= 14931)\r\n        return COLORS_16m;\r\n      if (build >= 10586)\r\n        return COLORS_256;\r\n    }\r\n\r\n    return COLORS_16;\r\n  }\r\n\r\n  if (env.TMUX) {\r\n    return COLORS_256;\r\n  }\r\n\r\n  if (env.CI) {\r\n    if ([\r\n      'APPVEYOR',\r\n      'BUILDKITE',\r\n      'CIRCLECI',\r\n      'DRONE',\r\n      'GITHUB_ACTIONS',\r\n      'GITLAB_CI',\r\n      'TRAVIS',\r\n    ].some((sign) => sign in env) || env.CI_NAME === 'codeship') {\r\n      return COLORS_256;\r\n    }\r\n    return COLORS_2;\r\n  }\r\n\r\n  if ('TEAMCITY_VERSION' in env) {\r\n    return RegExpPrototypeExec(/^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/, env.TEAMCITY_VERSION) !== null ?\r\n      COLORS_16 : COLORS_2;\r\n  }\r\n\r\n  switch (env.TERM_PROGRAM) {\r\n    case 'iTerm.app':\r\n      if (!env.TERM_PROGRAM_VERSION ||\r\n        RegExpPrototypeExec(/^[0-2]\\./, env.TERM_PROGRAM_VERSION) !== null\r\n      ) {\r\n        return COLORS_256;\r\n      }\r\n      return COLORS_16m;\r\n    case 'HyperTerm':\r\n    case 'MacTerm':\r\n      return COLORS_16m;\r\n    case 'Apple_Terminal':\r\n      return COLORS_256;\r\n  }\r\n\r\n  if (env.COLORTERM === 'truecolor' || env.COLORTERM === '24bit') {\r\n    return COLORS_16m;\r\n  }\r\n\r\n  if (env.TERM) {\r\n    if (RegExpPrototypeExec(/^xterm-256/, env.TERM) !== null) {\r\n      return COLORS_256;\r\n    }\r\n\r\n    const termEnv = StringPrototypeToLowerCase(env.TERM);\r\n\r\n    if (TERM_ENVS[termEnv]) {\r\n      return TERM_ENVS[termEnv];\r\n    }\r\n    if (ArrayPrototypeSome(TERM_ENVS_REG_EXP,\r\n                           (term) => RegExpPrototypeExec(term, termEnv) !== null)) {\r\n      return COLORS_16;\r\n    }\r\n  }\r\n  // Move 16 color COLORTERM below 16m and 256\r\n  if (env.COLORTERM) {\r\n    return COLORS_16;\r\n  }\r\n  return COLORS_2;\r\n}\r\n\r\nfunction hasColors(count, env) {\r\n  if (env === undefined &&\r\n      (count === undefined || (typeof count === 'object' && count !== null))) {\r\n    env = count;\r\n    count = 16;\r\n  } else {\r\n    validateInteger(count, 'count', 2);\r\n  }\r\n\r\n  return count <= 2 ** getColorDepth(env);\r\n}\r\n\r\nmodule.exports = {\r\n  getColorDepth,\r\n  hasColors,\r\n};\r\n"
  },
  "223": {
    "metadata": {
      "scriptId": "223",
      "url": "node:util/types",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 3,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "c0852ef556c5f323437cacc811825f337229383db1308629db0ab420c1d49082",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 67,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:util/types"
    },
    "source": "'use strict';\r\n\r\nmodule.exports = require('internal/util/types');\r\n"
  },
  "224": {
    "metadata": {
      "scriptId": "224",
      "url": "node:v8",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 445,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "ab2ef404f78097211a595e5e40cec8c06821cf6ddf0a054767a9852bad703bcf",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 13760,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:v8"
    },
    "source": "// Copyright (c) 2014, StrongLoop Inc.\r\n//\r\n// Permission to use, copy, modify, and/or distribute this software for any\r\n// purpose with or without fee is hereby granted, provided that the above\r\n// copyright notice and this permission notice appear in all copies.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\r\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\r\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\r\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  Array,\r\n  BigInt64Array,\r\n  BigUint64Array,\r\n  DataView,\r\n  Error,\r\n  Float32Array,\r\n  Float64Array,\r\n  Int16Array,\r\n  Int32Array,\r\n  Int8Array,\r\n  JSONParse,\r\n  ObjectPrototypeToString,\r\n  Uint16Array,\r\n  Uint32Array,\r\n  Uint8Array,\r\n  Uint8ClampedArray,\r\n} = primordials;\r\n\r\nconst { Buffer } = require('buffer');\r\nconst { validateString, validateUint32 } = require('internal/validators');\r\nconst {\r\n  Serializer,\r\n  Deserializer,\r\n} = internalBinding('serdes');\r\nconst {\r\n  namespace: startupSnapshot,\r\n} = require('internal/v8/startup_snapshot');\r\n\r\nlet profiler = {};\r\nif (internalBinding('config').hasInspector) {\r\n  profiler = internalBinding('profiler');\r\n}\r\n\r\nconst assert = require('internal/assert');\r\nconst { copy } = internalBinding('buffer');\r\nconst { inspect } = require('internal/util/inspect');\r\nconst { FastBuffer } = require('internal/buffer');\r\nconst { getValidatedPath } = require('internal/fs/utils');\r\nconst { toNamespacedPath } = require('path');\r\nconst {\r\n  createHeapSnapshotStream,\r\n  triggerHeapSnapshot,\r\n} = internalBinding('heap_utils');\r\nconst {\r\n  HeapSnapshotStream,\r\n  getHeapSnapshotOptions,\r\n  queryObjects,\r\n} = require('internal/heap_utils');\r\nconst promiseHooks = require('internal/promise_hooks');\r\nconst { getOptionValue } = require('internal/options');\r\n/**\r\n * Generates a snapshot of the current V8 heap\r\n * and writes it to a JSON file.\r\n * @param {string} [filename]\r\n * @param {{\r\n *   exposeInternals?: boolean,\r\n *   exposeNumericValues?: boolean\r\n * }} [options]\r\n * @returns {string}\r\n */\r\nfunction writeHeapSnapshot(filename, options) {\r\n  if (filename !== undefined) {\r\n    filename = getValidatedPath(filename);\r\n    filename = toNamespacedPath(filename);\r\n  }\r\n  const optionArray = getHeapSnapshotOptions(options);\r\n  return triggerHeapSnapshot(filename, optionArray);\r\n}\r\n\r\n/**\r\n * Generates a snapshot of the current V8 heap\r\n * and returns a Readable Stream.\r\n * @param {{\r\n *   exposeInternals?: boolean,\r\n *   exposeNumericValues?: boolean\r\n * }} [options]\r\n * @returns {import('./stream.js').Readable}\r\n */\r\nfunction getHeapSnapshot(options) {\r\n  const optionArray = getHeapSnapshotOptions(options);\r\n  const handle = createHeapSnapshotStream(optionArray);\r\n  assert(handle);\r\n  return new HeapSnapshotStream(handle);\r\n}\r\n\r\n// We need to get the buffer from the binding at the callsite since\r\n// it's re-initialized after deserialization.\r\nconst binding = internalBinding('v8');\r\n\r\nconst {\r\n  cachedDataVersionTag,\r\n  setFlagsFromString: _setFlagsFromString,\r\n  updateHeapStatisticsBuffer,\r\n  updateHeapSpaceStatisticsBuffer,\r\n  updateHeapCodeStatisticsBuffer,\r\n  setHeapSnapshotNearHeapLimit: _setHeapSnapshotNearHeapLimit,\r\n\r\n  // Properties for heap statistics buffer extraction.\r\n  kTotalHeapSizeIndex,\r\n  kTotalHeapSizeExecutableIndex,\r\n  kTotalPhysicalSizeIndex,\r\n  kTotalAvailableSize,\r\n  kUsedHeapSizeIndex,\r\n  kHeapSizeLimitIndex,\r\n  kDoesZapGarbageIndex,\r\n  kMallocedMemoryIndex,\r\n  kPeakMallocedMemoryIndex,\r\n  kNumberOfNativeContextsIndex,\r\n  kNumberOfDetachedContextsIndex,\r\n  kTotalGlobalHandlesSizeIndex,\r\n  kUsedGlobalHandlesSizeIndex,\r\n  kExternalMemoryIndex,\r\n\r\n  // Properties for heap spaces statistics buffer extraction.\r\n  kHeapSpaces,\r\n  kSpaceSizeIndex,\r\n  kSpaceUsedSizeIndex,\r\n  kSpaceAvailableSizeIndex,\r\n  kPhysicalSpaceSizeIndex,\r\n\r\n  // Properties for heap code statistics buffer extraction.\r\n  kCodeAndMetadataSizeIndex,\r\n  kBytecodeAndMetadataSizeIndex,\r\n  kExternalScriptSourceSizeIndex,\r\n  kCPUProfilerMetaDataSizeIndex,\r\n\r\n  heapStatisticsBuffer,\r\n  heapCodeStatisticsBuffer,\r\n  heapSpaceStatisticsBuffer,\r\n} = binding;\r\n\r\nconst kNumberOfHeapSpaces = kHeapSpaces.length;\r\n\r\n/**\r\n * Sets V8 command-line flags.\r\n * @param {string} flags\r\n * @returns {void}\r\n */\r\nfunction setFlagsFromString(flags) {\r\n  validateString(flags, 'flags');\r\n  _setFlagsFromString(flags);\r\n}\r\n\r\n/**\r\n * Gets the current V8 heap statistics.\r\n * @returns {{\r\n *   total_heap_size: number;\r\n *   total_heap_size_executable: number;\r\n *   total_physical_size: number;\r\n *   total_available_size: number;\r\n *   used_heap_size: number;\r\n *   heap_size_limit: number;\r\n *   malloced_memory: number;\r\n *   peak_malloced_memory: number;\r\n *   does_zap_garbage: number;\r\n *   number_of_native_contexts: number;\r\n *   number_of_detached_contexts: number;\r\n *   }}\r\n */\r\nfunction getHeapStatistics() {\r\n  const buffer = heapStatisticsBuffer;\r\n\r\n  updateHeapStatisticsBuffer();\r\n\r\n  return {\r\n    total_heap_size: buffer[kTotalHeapSizeIndex],\r\n    total_heap_size_executable: buffer[kTotalHeapSizeExecutableIndex],\r\n    total_physical_size: buffer[kTotalPhysicalSizeIndex],\r\n    total_available_size: buffer[kTotalAvailableSize],\r\n    used_heap_size: buffer[kUsedHeapSizeIndex],\r\n    heap_size_limit: buffer[kHeapSizeLimitIndex],\r\n    malloced_memory: buffer[kMallocedMemoryIndex],\r\n    peak_malloced_memory: buffer[kPeakMallocedMemoryIndex],\r\n    does_zap_garbage: buffer[kDoesZapGarbageIndex],\r\n    number_of_native_contexts: buffer[kNumberOfNativeContextsIndex],\r\n    number_of_detached_contexts: buffer[kNumberOfDetachedContextsIndex],\r\n    total_global_handles_size: buffer[kTotalGlobalHandlesSizeIndex],\r\n    used_global_handles_size: buffer[kUsedGlobalHandlesSizeIndex],\r\n    external_memory: buffer[kExternalMemoryIndex],\r\n  };\r\n}\r\n\r\n/**\r\n * Gets the current V8 heap space statistics.\r\n * @returns {{\r\n *   space_name: string;\r\n *   space_size: number;\r\n *   space_used_size: number;\r\n *   space_available_size: number;\r\n *   physical_space_size: number;\r\n *   }[]}\r\n */\r\nfunction getHeapSpaceStatistics() {\r\n  const heapSpaceStatistics = new Array(kNumberOfHeapSpaces);\r\n  const buffer = heapSpaceStatisticsBuffer;\r\n\r\n  for (let i = 0; i < kNumberOfHeapSpaces; i++) {\r\n    updateHeapSpaceStatisticsBuffer(i);\r\n    heapSpaceStatistics[i] = {\r\n      space_name: kHeapSpaces[i],\r\n      space_size: buffer[kSpaceSizeIndex],\r\n      space_used_size: buffer[kSpaceUsedSizeIndex],\r\n      space_available_size: buffer[kSpaceAvailableSizeIndex],\r\n      physical_space_size: buffer[kPhysicalSpaceSizeIndex],\r\n    };\r\n  }\r\n\r\n  return heapSpaceStatistics;\r\n}\r\n\r\n/**\r\n * Gets the current V8 heap code statistics.\r\n * @returns {{\r\n *   code_and_metadata_size: number;\r\n *   bytecode_and_metadata_size: number;\r\n *   external_script_source_size: number;\r\n *   cpu_profiler_metadata_size: number;\r\n *   }}\r\n */\r\nfunction getHeapCodeStatistics() {\r\n  const buffer = heapCodeStatisticsBuffer;\r\n\r\n  updateHeapCodeStatisticsBuffer();\r\n  return {\r\n    code_and_metadata_size: buffer[kCodeAndMetadataSizeIndex],\r\n    bytecode_and_metadata_size: buffer[kBytecodeAndMetadataSizeIndex],\r\n    external_script_source_size: buffer[kExternalScriptSourceSizeIndex],\r\n    cpu_profiler_metadata_size: buffer[kCPUProfilerMetaDataSizeIndex],\r\n  };\r\n}\r\n\r\nlet heapSnapshotNearHeapLimitCallbackAdded = false;\r\nfunction setHeapSnapshotNearHeapLimit(limit) {\r\n  validateUint32(limit, 'limit', true);\r\n  if (heapSnapshotNearHeapLimitCallbackAdded ||\r\n      getOptionValue('--heapsnapshot-near-heap-limit') > 0\r\n  ) {\r\n    return;\r\n  }\r\n  heapSnapshotNearHeapLimitCallbackAdded = true;\r\n  _setHeapSnapshotNearHeapLimit(limit);\r\n}\r\n\r\n/* V8 serialization API */\r\n\r\n/* JS methods for the base objects */\r\nSerializer.prototype._getDataCloneError = Error;\r\n\r\n/**\r\n * Reads raw bytes from the deserializer's internal buffer.\r\n * @param {number} length\r\n * @returns {Buffer}\r\n */\r\nDeserializer.prototype.readRawBytes = function readRawBytes(length) {\r\n  const offset = this._readRawBytes(length);\r\n  // `this.buffer` can be a Buffer or a plain Uint8Array, so just calling\r\n  // `.slice()` doesn't work.\r\n  return new FastBuffer(this.buffer.buffer,\r\n                        this.buffer.byteOffset + offset,\r\n                        length);\r\n};\r\n\r\nfunction arrayBufferViewTypeToIndex(abView) {\r\n  const type = ObjectPrototypeToString(abView);\r\n  if (type === '[object Int8Array]') return 0;\r\n  if (type === '[object Uint8Array]') return 1;\r\n  if (type === '[object Uint8ClampedArray]') return 2;\r\n  if (type === '[object Int16Array]') return 3;\r\n  if (type === '[object Uint16Array]') return 4;\r\n  if (type === '[object Int32Array]') return 5;\r\n  if (type === '[object Uint32Array]') return 6;\r\n  if (type === '[object Float32Array]') return 7;\r\n  if (type === '[object Float64Array]') return 8;\r\n  if (type === '[object DataView]') return 9;\r\n  // Index 10 is FastBuffer.\r\n  if (type === '[object BigInt64Array]') return 11;\r\n  if (type === '[object BigUint64Array]') return 12;\r\n  return -1;\r\n}\r\n\r\nfunction arrayBufferViewIndexToType(index) {\r\n  if (index === 0) return Int8Array;\r\n  if (index === 1) return Uint8Array;\r\n  if (index === 2) return Uint8ClampedArray;\r\n  if (index === 3) return Int16Array;\r\n  if (index === 4) return Uint16Array;\r\n  if (index === 5) return Int32Array;\r\n  if (index === 6) return Uint32Array;\r\n  if (index === 7) return Float32Array;\r\n  if (index === 8) return Float64Array;\r\n  if (index === 9) return DataView;\r\n  if (index === 10) return FastBuffer;\r\n  if (index === 11) return BigInt64Array;\r\n  if (index === 12) return BigUint64Array;\r\n  return undefined;\r\n}\r\n\r\nclass DefaultSerializer extends Serializer {\r\n  constructor() {\r\n    super();\r\n\r\n    this._setTreatArrayBufferViewsAsHostObjects(true);\r\n  }\r\n\r\n  /**\r\n   * Used to write some kind of host object, i.e. an\r\n   * object that is created by native C++ bindings.\r\n   * @param {object} abView\r\n   * @returns {void}\r\n   */\r\n  _writeHostObject(abView) {\r\n    // Keep track of how to handle different ArrayBufferViews. The default\r\n    // Serializer for Node does not use the V8 methods for serializing those\r\n    // objects because Node's `Buffer` objects use pooled allocation in many\r\n    // cases, and their underlying `ArrayBuffer`s would show up in the\r\n    // serialization. Because a) those may contain sensitive data and the user\r\n    // may not be aware of that and b) they are often much larger than the\r\n    // `Buffer` itself, custom serialization is applied.\r\n    let i = 10;  // FastBuffer\r\n    if (abView.constructor !== Buffer) {\r\n      i = arrayBufferViewTypeToIndex(abView);\r\n      if (i === -1) {\r\n        throw new this._getDataCloneError(\r\n          `Unserializable host object: ${inspect(abView)}`);\r\n      }\r\n    }\r\n    this.writeUint32(i);\r\n    this.writeUint32(abView.byteLength);\r\n    this.writeRawBytes(new Uint8Array(abView.buffer,\r\n                                      abView.byteOffset,\r\n                                      abView.byteLength));\r\n  }\r\n}\r\n\r\nclass DefaultDeserializer extends Deserializer {\r\n  /**\r\n   * Used to read some kind of host object, i.e. an\r\n   * object that is created by native C++ bindings.\r\n   * @returns {any}\r\n   */\r\n  _readHostObject() {\r\n    const typeIndex = this.readUint32();\r\n    const ctor = arrayBufferViewIndexToType(typeIndex);\r\n    const byteLength = this.readUint32();\r\n    const byteOffset = this._readRawBytes(byteLength);\r\n    const BYTES_PER_ELEMENT = ctor.BYTES_PER_ELEMENT || 1;\r\n\r\n    const offset = this.buffer.byteOffset + byteOffset;\r\n    if (offset % BYTES_PER_ELEMENT === 0) {\r\n      return new ctor(this.buffer.buffer,\r\n                      offset,\r\n                      byteLength / BYTES_PER_ELEMENT);\r\n    }\r\n    // Copy to an aligned buffer first.\r\n    const buffer_copy = Buffer.allocUnsafe(byteLength);\r\n    copy(this.buffer, buffer_copy, 0, byteOffset, byteOffset + byteLength);\r\n    return new ctor(buffer_copy.buffer,\r\n                    buffer_copy.byteOffset,\r\n                    byteLength / BYTES_PER_ELEMENT);\r\n  }\r\n}\r\n\r\n/**\r\n * Uses a `DefaultSerializer` to serialize `value`\r\n * into a buffer.\r\n * @param {any} value\r\n * @returns {Buffer}\r\n */\r\nfunction serialize(value) {\r\n  const ser = new DefaultSerializer();\r\n  ser.writeHeader();\r\n  ser.writeValue(value);\r\n  return ser.releaseBuffer();\r\n}\r\n\r\n/**\r\n * Uses a `DefaultDeserializer` with default options\r\n * to read a JavaScript value from a buffer.\r\n * @param {Buffer | TypedArray | DataView} buffer\r\n * @returns {any}\r\n */\r\nfunction deserialize(buffer) {\r\n  const der = new DefaultDeserializer(buffer);\r\n  der.readHeader();\r\n  return der.readValue();\r\n}\r\n\r\nclass GCProfiler {\r\n  #profiler = null;\r\n\r\n  start() {\r\n    if (!this.#profiler) {\r\n      this.#profiler = new binding.GCProfiler();\r\n      this.#profiler.start();\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    if (this.#profiler) {\r\n      const data = this.#profiler.stop();\r\n      this.#profiler = null;\r\n      return JSONParse(data);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  cachedDataVersionTag,\r\n  getHeapSnapshot,\r\n  getHeapStatistics,\r\n  getHeapSpaceStatistics,\r\n  getHeapCodeStatistics,\r\n  setFlagsFromString,\r\n  Serializer,\r\n  Deserializer,\r\n  DefaultSerializer,\r\n  DefaultDeserializer,\r\n  deserialize,\r\n  takeCoverage: profiler.takeCoverage,\r\n  stopCoverage: profiler.stopCoverage,\r\n  serialize,\r\n  writeHeapSnapshot,\r\n  promiseHooks,\r\n  queryObjects,\r\n  startupSnapshot,\r\n  setHeapSnapshotNearHeapLimit,\r\n  GCProfiler,\r\n};\r\n"
  },
  "225": {
    "metadata": {
      "scriptId": "225",
      "url": "node:internal/heap_utils",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 95,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "675cf17e0e6d9bdadf5d47bdd9e3cbb519c345fc1bb9f06c930718e86bef9b67",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2522,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/heap_utils"
    },
    "source": "'use strict';\r\nconst {\r\n  ArrayPrototypeMap,\r\n  Symbol,\r\n  Uint8Array,\r\n} = primordials;\r\nconst {\r\n  kUpdateTimer,\r\n  onStreamRead,\r\n} = require('internal/stream_base_commons');\r\nconst { owner_symbol } = require('internal/async_hooks').symbols;\r\nconst { Readable } = require('stream');\r\nconst {\r\n  validateObject,\r\n  validateBoolean,\r\n  validateFunction,\r\n} = require('internal/validators');\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\nconst { kEmptyObject, emitExperimentalWarning } = require('internal/util');\r\nconst {\r\n  queryObjects: _queryObjects,\r\n} = internalBinding('internal_only_v8');\r\nconst {\r\n  inspect,\r\n} = require('internal/util/inspect');\r\nconst kHandle = Symbol('kHandle');\r\n\r\nfunction getHeapSnapshotOptions(options = kEmptyObject) {\r\n  validateObject(options, 'options');\r\n  const {\r\n    exposeInternals = false,\r\n    exposeNumericValues = false,\r\n  } = options;\r\n  validateBoolean(exposeInternals, 'options.exposeInternals');\r\n  validateBoolean(exposeNumericValues, 'options.exposeNumericValues');\r\n  return new Uint8Array([+exposeInternals, +exposeNumericValues]);\r\n}\r\n\r\nclass HeapSnapshotStream extends Readable {\r\n  constructor(handle) {\r\n    super({ autoDestroy: true });\r\n    this[kHandle] = handle;\r\n    handle[owner_symbol] = this;\r\n    handle.onread = onStreamRead;\r\n  }\r\n\r\n  _read() {\r\n    if (this[kHandle])\r\n      this[kHandle].readStart();\r\n  }\r\n\r\n  _destroy() {\r\n    // Release the references on the handle so that\r\n    // it can be garbage collected.\r\n    this[kHandle][owner_symbol] = undefined;\r\n    this[kHandle] = undefined;\r\n  }\r\n\r\n  [kUpdateTimer]() {\r\n    // Does nothing\r\n  }\r\n}\r\n\r\nconst inspectOptions = {\r\n  __proto__: null,\r\n  depth: 0,\r\n};\r\nfunction queryObjects(ctor, options = kEmptyObject) {\r\n  validateFunction(ctor, 'constructor');\r\n  if (options !== kEmptyObject) {\r\n    validateObject(options, 'options');\r\n  }\r\n  const format = options.format || 'count';\r\n  if (format !== 'count' && format !== 'summary') {\r\n    throw new ERR_INVALID_ARG_VALUE('options.format', format);\r\n  }\r\n  emitExperimentalWarning('v8.queryObjects()');\r\n  // Matching the console API behavior - just access the .prototype.\r\n  const objects = _queryObjects(ctor.prototype);\r\n  if (format === 'count') {\r\n    return objects.length;\r\n  }\r\n  // options.format is 'summary'.\r\n  return ArrayPrototypeMap(objects, (object) => inspect(object, inspectOptions));\r\n}\r\n\r\nmodule.exports = {\r\n  getHeapSnapshotOptions,\r\n  HeapSnapshotStream,\r\n  queryObjects,\r\n};\r\n"
  },
  "226": {
    "metadata": {
      "scriptId": "226",
      "url": "node:internal/promise_hooks",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 126,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "30a555b933f6ef49f0c93001fce25eca042f301a74e785dd95af94521c265a1e",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3200,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/promise_hooks"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSplice,\r\n  FunctionPrototypeBind,\r\n} = primordials;\r\n\r\nconst { setPromiseHooks } = internalBinding('async_wrap');\r\nconst { triggerUncaughtException } = internalBinding('errors');\r\n\r\nconst { kEmptyObject } = require('internal/util');\r\nconst { validatePlainFunction } = require('internal/validators');\r\n\r\nconst hooks = {\r\n  init: [],\r\n  before: [],\r\n  after: [],\r\n  settled: [],\r\n};\r\n\r\nfunction initAll(promise, parent) {\r\n  const hookSet = ArrayPrototypeSlice(hooks.init);\r\n  const exceptions = [];\r\n\r\n  for (let i = 0; i < hookSet.length; i++) {\r\n    const init = hookSet[i];\r\n    try {\r\n      init(promise, parent);\r\n    } catch (err) {\r\n      ArrayPrototypePush(exceptions, err);\r\n    }\r\n  }\r\n\r\n  // Triggering exceptions is deferred to allow other hooks to complete\r\n  for (let i = 0; i < exceptions.length; i++) {\r\n    const err = exceptions[i];\r\n    triggerUncaughtException(err, false);\r\n  }\r\n}\r\n\r\nfunction makeRunHook(list) {\r\n  return (promise) => {\r\n    const hookSet = ArrayPrototypeSlice(list);\r\n    const exceptions = [];\r\n\r\n    for (let i = 0; i < hookSet.length; i++) {\r\n      const hook = hookSet[i];\r\n      try {\r\n        hook(promise);\r\n      } catch (err) {\r\n        ArrayPrototypePush(exceptions, err);\r\n      }\r\n    }\r\n\r\n    // Triggering exceptions is deferred to allow other hooks to complete\r\n    for (let i = 0; i < exceptions.length; i++) {\r\n      const err = exceptions[i];\r\n      triggerUncaughtException(err, false);\r\n    }\r\n  };\r\n}\r\n\r\nconst beforeAll = makeRunHook(hooks.before);\r\nconst afterAll = makeRunHook(hooks.after);\r\nconst settledAll = makeRunHook(hooks.settled);\r\n\r\nfunction maybeFastPath(list, runAll) {\r\n  return list.length > 1 ? runAll : list[0];\r\n}\r\n\r\nfunction update() {\r\n  const init = maybeFastPath(hooks.init, initAll);\r\n  const before = maybeFastPath(hooks.before, beforeAll);\r\n  const after = maybeFastPath(hooks.after, afterAll);\r\n  const settled = maybeFastPath(hooks.settled, settledAll);\r\n  setPromiseHooks(init, before, after, settled);\r\n}\r\n\r\nfunction stop(list, hook) {\r\n  const index = ArrayPrototypeIndexOf(list, hook);\r\n  if (index >= 0) {\r\n    ArrayPrototypeSplice(list, index, 1);\r\n    update();\r\n  }\r\n}\r\n\r\nfunction makeUseHook(name) {\r\n  const list = hooks[name];\r\n  return (hook) => {\r\n    validatePlainFunction(hook, `${name}Hook`);\r\n    ArrayPrototypePush(list, hook);\r\n    update();\r\n    return FunctionPrototypeBind(stop, null, list, hook);\r\n  };\r\n}\r\n\r\nconst onInit = makeUseHook('init');\r\nconst onBefore = makeUseHook('before');\r\nconst onAfter = makeUseHook('after');\r\nconst onSettled = makeUseHook('settled');\r\n\r\nfunction createHook({ init, before, after, settled } = kEmptyObject) {\r\n  const hooks = [];\r\n\r\n  if (init) ArrayPrototypePush(hooks, onInit(init));\r\n  if (before) ArrayPrototypePush(hooks, onBefore(before));\r\n  if (after) ArrayPrototypePush(hooks, onAfter(after));\r\n  if (settled) ArrayPrototypePush(hooks, onSettled(settled));\r\n\r\n  return () => {\r\n    for (const stop of hooks) {\r\n      stop();\r\n    }\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  createHook,\r\n  onInit,\r\n  onBefore,\r\n  onAfter,\r\n  onSettled,\r\n};\r\n"
  },
  "227": {
    "metadata": {
      "scriptId": "227",
      "url": "node:wasi",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 179,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "e2b91bd0ce3a2825d77190d8edce2a12fe71c123fa862c3a59f3b2e36bf79d18",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 5076,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:wasi"
    },
    "source": "'use strict';\r\nconst {\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  FunctionPrototypeBind,\r\n  ObjectEntries,\r\n  String,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  ERR_INVALID_ARG_VALUE,\r\n  ERR_WASI_ALREADY_STARTED,\r\n} = require('internal/errors').codes;\r\nconst {\r\n  emitExperimentalWarning,\r\n  kEmptyObject,\r\n} = require('internal/util');\r\nconst {\r\n  validateArray,\r\n  validateBoolean,\r\n  validateFunction,\r\n  validateInt32,\r\n  validateObject,\r\n  validateString,\r\n  validateUndefined,\r\n} = require('internal/validators');\r\nconst kExitCode = Symbol('kExitCode');\r\nconst kSetMemory = Symbol('kSetMemory');\r\nconst kStarted = Symbol('kStarted');\r\nconst kInstance = Symbol('kInstance');\r\nconst kBindingName = Symbol('kBindingName');\r\n\r\nemitExperimentalWarning('WASI');\r\n\r\n\r\nfunction setupInstance(self, instance) {\r\n  validateObject(instance, 'instance');\r\n  validateObject(instance.exports, 'instance.exports');\r\n\r\n  self[kInstance] = instance;\r\n  self[kSetMemory](instance.exports.memory);\r\n}\r\n\r\nclass WASI {\r\n  constructor(options = kEmptyObject) {\r\n    validateObject(options, 'options');\r\n\r\n    let _WASI;\r\n    validateString(options.version, 'options.version');\r\n    switch (options.version) {\r\n      case 'unstable':\r\n        ({ WASI: _WASI } = internalBinding('wasi'));\r\n        this[kBindingName] = 'wasi_unstable';\r\n        break;\r\n      case 'preview1':\r\n        ({ WASI: _WASI } = internalBinding('wasi'));\r\n        this[kBindingName] = 'wasi_snapshot_preview1';\r\n        break;\r\n      // When adding support for additional wasi versions add case here\r\n      default:\r\n        throw new ERR_INVALID_ARG_VALUE('options.version',\r\n                                        options.version,\r\n                                        'unsupported WASI version');\r\n    }\r\n\r\n    if (options.args !== undefined)\r\n      validateArray(options.args, 'options.args');\r\n    const args = ArrayPrototypeMap(options.args || [], String);\r\n\r\n    const env = [];\r\n    if (options.env !== undefined) {\r\n      validateObject(options.env, 'options.env');\r\n      ArrayPrototypeForEach(\r\n        ObjectEntries(options.env),\r\n        ({ 0: key, 1: value }) => {\r\n          if (value !== undefined)\r\n            ArrayPrototypePush(env, `${key}=${value}`);\r\n        });\r\n    }\r\n\r\n    const preopens = [];\r\n    if (options.preopens !== undefined) {\r\n      validateObject(options.preopens, 'options.preopens');\r\n      ArrayPrototypeForEach(\r\n        ObjectEntries(options.preopens),\r\n        ({ 0: key, 1: value }) =>\r\n          ArrayPrototypePush(preopens, String(key), String(value)),\r\n      );\r\n    }\r\n\r\n    const { stdin = 0, stdout = 1, stderr = 2 } = options;\r\n    validateInt32(stdin, 'options.stdin', 0);\r\n    validateInt32(stdout, 'options.stdout', 0);\r\n    validateInt32(stderr, 'options.stderr', 0);\r\n    const stdio = [stdin, stdout, stderr];\r\n\r\n    const wrap = new _WASI(args, env, preopens, stdio);\r\n\r\n    for (const prop in wrap) {\r\n      wrap[prop] = FunctionPrototypeBind(wrap[prop], wrap);\r\n    }\r\n\r\n    let returnOnExit = true;\r\n    if (options.returnOnExit !== undefined) {\r\n      validateBoolean(options.returnOnExit, 'options.returnOnExit');\r\n      returnOnExit = options.returnOnExit;\r\n    }\r\n    if (returnOnExit)\r\n      wrap.proc_exit = FunctionPrototypeBind(wasiReturnOnProcExit, this);\r\n\r\n    this[kSetMemory] = wrap._setMemory;\r\n    delete wrap._setMemory;\r\n    this.wasiImport = wrap;\r\n    this[kStarted] = false;\r\n    this[kExitCode] = 0;\r\n    this[kInstance] = undefined;\r\n  }\r\n\r\n  // Must not export _initialize, must export _start\r\n  start(instance) {\r\n    if (this[kStarted]) {\r\n      throw new ERR_WASI_ALREADY_STARTED();\r\n    }\r\n    this[kStarted] = true;\r\n\r\n    setupInstance(this, instance);\r\n\r\n    const { _start, _initialize } = this[kInstance].exports;\r\n\r\n    validateFunction(_start, 'instance.exports._start');\r\n    validateUndefined(_initialize, 'instance.exports._initialize');\r\n\r\n    try {\r\n      _start();\r\n    } catch (err) {\r\n      if (err !== kExitCode) {\r\n        throw err;\r\n      }\r\n    }\r\n\r\n    return this[kExitCode];\r\n  }\r\n\r\n  // Must not export _start, may optionally export _initialize\r\n  initialize(instance) {\r\n    if (this[kStarted]) {\r\n      throw new ERR_WASI_ALREADY_STARTED();\r\n    }\r\n    this[kStarted] = true;\r\n\r\n    setupInstance(this, instance);\r\n\r\n    const { _start, _initialize } = this[kInstance].exports;\r\n\r\n    validateUndefined(_start, 'instance.exports._start');\r\n    if (_initialize !== undefined) {\r\n      validateFunction(_initialize, 'instance.exports._initialize');\r\n      _initialize();\r\n    }\r\n  }\r\n\r\n  getImportObject() {\r\n    return { [this[kBindingName]]: this.wasiImport };\r\n  }\r\n}\r\n\r\nmodule.exports = { WASI };\r\n\r\n\r\nfunction wasiReturnOnProcExit(rval) {\r\n  // If __wasi_proc_exit() does not terminate the process, an assertion is\r\n  // triggered in the wasm runtime. Node can sidestep the assertion and return\r\n  // an exit code by recording the exit code, and throwing a JavaScript\r\n  // exception that WebAssembly cannot catch.\r\n  this[kExitCode] = rval;\r\n  throw kExitCode;\r\n}\r\n"
  },
  "228": {
    "metadata": {
      "scriptId": "228",
      "url": "node:zlib",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 986,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "76efc7ef1ef209f5b981897a629c394e9bf2b7d7577bb29f149ffdb115cf73fa",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 31508,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:zlib"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayBuffer,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  FunctionPrototypeBind,\r\n  MathMaxApply,\r\n  NumberIsFinite,\r\n  NumberIsNaN,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ObjectKeys,\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n  StringPrototypeStartsWith,\r\n  Symbol,\r\n  TypedArrayPrototypeFill,\r\n  Uint32Array,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_BROTLI_INVALID_PARAM,\r\n    ERR_BUFFER_TOO_LARGE,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_OUT_OF_RANGE,\r\n    ERR_ZLIB_INITIALIZATION_FAILED,\r\n  },\r\n  genericNodeError,\r\n  hideStackFrames,\r\n} = require('internal/errors');\r\nconst { Transform, finished } = require('stream');\r\nconst {\r\n  deprecate,\r\n} = require('internal/util');\r\nconst {\r\n  isArrayBufferView,\r\n  isAnyArrayBuffer,\r\n  isUint8Array,\r\n} = require('internal/util/types');\r\nconst binding = internalBinding('zlib');\r\nconst { crc32: crc32Native } = binding;\r\nconst assert = require('internal/assert');\r\nconst {\r\n  Buffer,\r\n  kMaxLength,\r\n} = require('buffer');\r\nconst { owner_symbol } = require('internal/async_hooks').symbols;\r\nconst {\r\n  validateFunction,\r\n  validateNumber,\r\n  validateUint32,\r\n} = require('internal/validators');\r\n\r\nconst kFlushFlag = Symbol('kFlushFlag');\r\nconst kError = Symbol('kError');\r\n\r\nconst constants = internalBinding('constants').zlib;\r\nconst {\r\n  // Zlib flush levels\r\n  Z_NO_FLUSH, Z_BLOCK, Z_PARTIAL_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,\r\n  // Zlib option values\r\n  Z_MIN_CHUNK, Z_MIN_WINDOWBITS, Z_MAX_WINDOWBITS, Z_MIN_LEVEL, Z_MAX_LEVEL,\r\n  Z_MIN_MEMLEVEL, Z_MAX_MEMLEVEL, Z_DEFAULT_CHUNK, Z_DEFAULT_COMPRESSION,\r\n  Z_DEFAULT_STRATEGY, Z_DEFAULT_WINDOWBITS, Z_DEFAULT_MEMLEVEL, Z_FIXED,\r\n  // Node's compression stream modes (node_zlib_mode)\r\n  DEFLATE, DEFLATERAW, INFLATE, INFLATERAW, GZIP, GUNZIP, UNZIP,\r\n  BROTLI_DECODE, BROTLI_ENCODE,\r\n  // Brotli operations (~flush levels)\r\n  BROTLI_OPERATION_PROCESS, BROTLI_OPERATION_FLUSH,\r\n  BROTLI_OPERATION_FINISH, BROTLI_OPERATION_EMIT_METADATA,\r\n} = constants;\r\n\r\n// Translation table for return codes.\r\nconst codes = {\r\n  Z_OK: constants.Z_OK,\r\n  Z_STREAM_END: constants.Z_STREAM_END,\r\n  Z_NEED_DICT: constants.Z_NEED_DICT,\r\n  Z_ERRNO: constants.Z_ERRNO,\r\n  Z_STREAM_ERROR: constants.Z_STREAM_ERROR,\r\n  Z_DATA_ERROR: constants.Z_DATA_ERROR,\r\n  Z_MEM_ERROR: constants.Z_MEM_ERROR,\r\n  Z_BUF_ERROR: constants.Z_BUF_ERROR,\r\n  Z_VERSION_ERROR: constants.Z_VERSION_ERROR,\r\n};\r\n\r\nfor (const ckey of ObjectKeys(codes)) {\r\n  codes[codes[ckey]] = ckey;\r\n}\r\n\r\nfunction zlibBuffer(engine, buffer, callback) {\r\n  validateFunction(callback, 'callback');\r\n  // Streams do not support non-Uint8Array ArrayBufferViews yet. Convert it to a\r\n  // Buffer without copying.\r\n  if (isArrayBufferView(buffer) && !isUint8Array(buffer)) {\r\n    buffer = Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\r\n  } else if (isAnyArrayBuffer(buffer)) {\r\n    buffer = Buffer.from(buffer);\r\n  }\r\n  engine.buffers = null;\r\n  engine.nread = 0;\r\n  engine.cb = callback;\r\n  engine.on('data', zlibBufferOnData);\r\n  engine.on('error', zlibBufferOnError);\r\n  engine.on('end', zlibBufferOnEnd);\r\n  engine.end(buffer);\r\n}\r\n\r\nfunction zlibBufferOnData(chunk) {\r\n  if (!this.buffers)\r\n    this.buffers = [chunk];\r\n  else\r\n    ArrayPrototypePush(this.buffers, chunk);\r\n  this.nread += chunk.length;\r\n  if (this.nread > this._maxOutputLength) {\r\n    this.close();\r\n    this.removeAllListeners('end');\r\n    this.cb(new ERR_BUFFER_TOO_LARGE(this._maxOutputLength));\r\n  }\r\n}\r\n\r\nfunction zlibBufferOnError(err) {\r\n  this.removeAllListeners('end');\r\n  this.cb(err);\r\n}\r\n\r\nfunction zlibBufferOnEnd() {\r\n  let buf;\r\n  if (this.nread === 0) {\r\n    buf = Buffer.alloc(0);\r\n  } else {\r\n    const bufs = this.buffers;\r\n    buf = (bufs.length === 1 ? bufs[0] : Buffer.concat(bufs, this.nread));\r\n  }\r\n  this.close();\r\n  if (this._info)\r\n    this.cb(null, { buffer: buf, engine: this });\r\n  else\r\n    this.cb(null, buf);\r\n}\r\n\r\nfunction zlibBufferSync(engine, buffer) {\r\n  if (typeof buffer === 'string') {\r\n    buffer = Buffer.from(buffer);\r\n  } else if (!isArrayBufferView(buffer)) {\r\n    if (isAnyArrayBuffer(buffer)) {\r\n      buffer = Buffer.from(buffer);\r\n    } else {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'buffer',\r\n        ['string', 'Buffer', 'TypedArray', 'DataView', 'ArrayBuffer'],\r\n        buffer,\r\n      );\r\n    }\r\n  }\r\n  buffer = processChunkSync(engine, buffer, engine._finishFlushFlag);\r\n  if (engine._info)\r\n    return { buffer, engine };\r\n  return buffer;\r\n}\r\n\r\nfunction zlibOnError(message, errno, code) {\r\n  const self = this[owner_symbol];\r\n  // There is no way to cleanly recover.\r\n  // Continuing only obscures problems.\r\n\r\n  const error = genericNodeError(message, { errno, code });\r\n  error.errno = errno;\r\n  error.code = code;\r\n  self.destroy(error);\r\n  self[kError] = error;\r\n}\r\n\r\n// 1. Returns false for undefined and NaN\r\n// 2. Returns true for finite numbers\r\n// 3. Throws ERR_INVALID_ARG_TYPE for non-numbers\r\n// 4. Throws ERR_OUT_OF_RANGE for infinite numbers\r\nconst checkFiniteNumber = hideStackFrames((number, name) => {\r\n  // Common case\r\n  if (number === undefined) {\r\n    return false;\r\n  }\r\n\r\n  if (NumberIsFinite(number)) {\r\n    return true; // Is a valid number\r\n  }\r\n\r\n  if (NumberIsNaN(number)) {\r\n    return false;\r\n  }\r\n\r\n  validateNumber.withoutStackTrace(number, name);\r\n\r\n  // Infinite numbers\r\n  throw new ERR_OUT_OF_RANGE.HideStackFramesError(name, 'a finite number', number);\r\n});\r\n\r\n// 1. Returns def for number when it's undefined or NaN\r\n// 2. Returns number for finite numbers >= lower and <= upper\r\n// 3. Throws ERR_INVALID_ARG_TYPE for non-numbers\r\n// 4. Throws ERR_OUT_OF_RANGE for infinite numbers or numbers > upper or < lower\r\nconst checkRangesOrGetDefault = hideStackFrames(\r\n  (number, name, lower, upper, def) => {\r\n    if (!checkFiniteNumber.withoutStackTrace(number, name)) {\r\n      return def;\r\n    }\r\n    if (number < lower || number > upper) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError(name,\r\n                                                      `>= ${lower} and <= ${upper}`, number);\r\n    }\r\n    return number;\r\n  },\r\n);\r\n\r\nconst FLUSH_BOUND = [\r\n  [ Z_NO_FLUSH, Z_BLOCK ],\r\n  [ BROTLI_OPERATION_PROCESS, BROTLI_OPERATION_EMIT_METADATA ],\r\n];\r\nconst FLUSH_BOUND_IDX_NORMAL = 0;\r\nconst FLUSH_BOUND_IDX_BROTLI = 1;\r\n\r\n// The base class for all Zlib-style streams.\r\nfunction ZlibBase(opts, mode, handle, { flush, finishFlush, fullFlush }) {\r\n  let chunkSize = Z_DEFAULT_CHUNK;\r\n  let maxOutputLength = kMaxLength;\r\n  // The ZlibBase class is not exported to user land, the mode should only be\r\n  // passed in by us.\r\n  assert(typeof mode === 'number');\r\n  assert(mode >= DEFLATE && mode <= BROTLI_ENCODE);\r\n\r\n  let flushBoundIdx;\r\n  if (mode !== BROTLI_ENCODE && mode !== BROTLI_DECODE) {\r\n    flushBoundIdx = FLUSH_BOUND_IDX_NORMAL;\r\n  } else {\r\n    flushBoundIdx = FLUSH_BOUND_IDX_BROTLI;\r\n  }\r\n\r\n  if (opts) {\r\n    chunkSize = opts.chunkSize;\r\n    if (!checkFiniteNumber(chunkSize, 'options.chunkSize')) {\r\n      chunkSize = Z_DEFAULT_CHUNK;\r\n    } else if (chunkSize < Z_MIN_CHUNK) {\r\n      throw new ERR_OUT_OF_RANGE('options.chunkSize',\r\n                                 `>= ${Z_MIN_CHUNK}`, chunkSize);\r\n    }\r\n\r\n    flush = checkRangesOrGetDefault(\r\n      opts.flush, 'options.flush',\r\n      FLUSH_BOUND[flushBoundIdx][0], FLUSH_BOUND[flushBoundIdx][1], flush);\r\n\r\n    finishFlush = checkRangesOrGetDefault(\r\n      opts.finishFlush, 'options.finishFlush',\r\n      FLUSH_BOUND[flushBoundIdx][0], FLUSH_BOUND[flushBoundIdx][1],\r\n      finishFlush);\r\n\r\n    maxOutputLength = checkRangesOrGetDefault(\r\n      opts.maxOutputLength, 'options.maxOutputLength',\r\n      1, kMaxLength, kMaxLength);\r\n\r\n    if (opts.encoding || opts.objectMode || opts.writableObjectMode) {\r\n      opts = { ...opts };\r\n      opts.encoding = null;\r\n      opts.objectMode = false;\r\n      opts.writableObjectMode = false;\r\n    }\r\n  }\r\n\r\n  ReflectApply(Transform, this, [{ autoDestroy: true, ...opts }]);\r\n  this[kError] = null;\r\n  this.bytesWritten = 0;\r\n  this._handle = handle;\r\n  handle[owner_symbol] = this;\r\n  // Used by processCallback() and zlibOnError()\r\n  handle.onerror = zlibOnError;\r\n  this._outBuffer = Buffer.allocUnsafe(chunkSize);\r\n  this._outOffset = 0;\r\n\r\n  this._chunkSize = chunkSize;\r\n  this._defaultFlushFlag = flush;\r\n  this._finishFlushFlag = finishFlush;\r\n  this._defaultFullFlushFlag = fullFlush;\r\n  this._info = opts && opts.info;\r\n  this._maxOutputLength = maxOutputLength;\r\n}\r\nObjectSetPrototypeOf(ZlibBase.prototype, Transform.prototype);\r\nObjectSetPrototypeOf(ZlibBase, Transform);\r\n\r\nObjectDefineProperty(ZlibBase.prototype, '_closed', {\r\n  __proto__: null,\r\n  configurable: true,\r\n  enumerable: true,\r\n  get() {\r\n    return !this._handle;\r\n  },\r\n});\r\n\r\n// `bytesRead` made sense as a name when looking from the zlib engine's\r\n// perspective, but it is inconsistent with all other streams exposed by Node.js\r\n// that have this concept, where it stands for the number of bytes read\r\n// *from* the stream (that is, net.Socket/tls.Socket & file system streams).\r\nObjectDefineProperty(ZlibBase.prototype, 'bytesRead', {\r\n  __proto__: null,\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: deprecate(function() {\r\n    return this.bytesWritten;\r\n  }, 'zlib.bytesRead is deprecated and will change its meaning in the ' +\r\n     'future. Use zlib.bytesWritten instead.', 'DEP0108'),\r\n  set: deprecate(function(value) {\r\n    this.bytesWritten = value;\r\n  }, 'Setting zlib.bytesRead is deprecated. ' +\r\n     'This feature will be removed in the future.', 'DEP0108'),\r\n});\r\n\r\nZlibBase.prototype.reset = function() {\r\n  if (!this._handle)\r\n    assert(false, 'zlib binding closed');\r\n  return this._handle.reset();\r\n};\r\n\r\n// This is the _flush function called by the transform class,\r\n// internally, when the last chunk has been written.\r\nZlibBase.prototype._flush = function(callback) {\r\n  this._transform(Buffer.alloc(0), '', callback);\r\n};\r\n\r\n// Force Transform compat behavior.\r\nZlibBase.prototype._final = function(callback) {\r\n  callback();\r\n};\r\n\r\n// If a flush is scheduled while another flush is still pending, a way to figure\r\n// out which one is the \"stronger\" flush is needed.\r\n// This is currently only used to figure out which flush flag to use for the\r\n// last chunk.\r\n// Roughly, the following holds:\r\n// Z_NO_FLUSH (< Z_TREES) < Z_BLOCK < Z_PARTIAL_FLUSH <\r\n//     Z_SYNC_FLUSH < Z_FULL_FLUSH < Z_FINISH\r\nconst flushiness = [];\r\nlet i = 0;\r\nconst kFlushFlagList = [Z_NO_FLUSH, Z_BLOCK, Z_PARTIAL_FLUSH,\r\n                        Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH];\r\nfor (const flushFlag of kFlushFlagList) {\r\n  flushiness[flushFlag] = i++;\r\n}\r\n\r\nfunction maxFlush(a, b) {\r\n  return flushiness[a] > flushiness[b] ? a : b;\r\n}\r\n\r\n// Set up a list of 'special' buffers that can be written using .write()\r\n// from the .flush() code as a way of introducing flushing operations into the\r\n// write sequence.\r\nconst kFlushBuffers = [];\r\n{\r\n  const dummyArrayBuffer = new ArrayBuffer();\r\n  for (const flushFlag of kFlushFlagList) {\r\n    kFlushBuffers[flushFlag] = Buffer.from(dummyArrayBuffer);\r\n    kFlushBuffers[flushFlag][kFlushFlag] = flushFlag;\r\n  }\r\n}\r\n\r\nZlibBase.prototype.flush = function(kind, callback) {\r\n  if (typeof kind === 'function' || (kind === undefined && !callback)) {\r\n    callback = kind;\r\n    kind = this._defaultFullFlushFlag;\r\n  }\r\n\r\n  if (this.writableFinished) {\r\n    if (callback)\r\n      process.nextTick(callback);\r\n  } else if (this.writableEnded) {\r\n    if (callback)\r\n      this.once('end', callback);\r\n  } else {\r\n    this.write(kFlushBuffers[kind], '', callback);\r\n  }\r\n};\r\n\r\nZlibBase.prototype.close = function(callback) {\r\n  if (callback) finished(this, callback);\r\n  this.destroy();\r\n};\r\n\r\nZlibBase.prototype._destroy = function(err, callback) {\r\n  _close(this);\r\n  callback(err);\r\n};\r\n\r\nZlibBase.prototype._transform = function(chunk, encoding, cb) {\r\n  let flushFlag = this._defaultFlushFlag;\r\n  // We use a 'fake' zero-length chunk to carry information about flushes from\r\n  // the public API to the actual stream implementation.\r\n  if (typeof chunk[kFlushFlag] === 'number') {\r\n    flushFlag = chunk[kFlushFlag];\r\n  }\r\n\r\n  // For the last chunk, also apply `_finishFlushFlag`.\r\n  if (this.writableEnded && this.writableLength === chunk.byteLength) {\r\n    flushFlag = maxFlush(flushFlag, this._finishFlushFlag);\r\n  }\r\n  processChunk(this, chunk, flushFlag, cb);\r\n};\r\n\r\nZlibBase.prototype._processChunk = function(chunk, flushFlag, cb) {\r\n  // _processChunk() is left for backwards compatibility\r\n  if (typeof cb === 'function')\r\n    processChunk(this, chunk, flushFlag, cb);\r\n  else\r\n    return processChunkSync(this, chunk, flushFlag);\r\n};\r\n\r\nfunction processChunkSync(self, chunk, flushFlag) {\r\n  let availInBefore = chunk.byteLength;\r\n  let availOutBefore = self._chunkSize - self._outOffset;\r\n  let inOff = 0;\r\n  let availOutAfter;\r\n  let availInAfter;\r\n\r\n  let buffers = null;\r\n  let nread = 0;\r\n  let inputRead = 0;\r\n  const state = self._writeState;\r\n  const handle = self._handle;\r\n  let buffer = self._outBuffer;\r\n  let offset = self._outOffset;\r\n  const chunkSize = self._chunkSize;\r\n\r\n  let error;\r\n  self.on('error', function onError(er) {\r\n    error = er;\r\n  });\r\n\r\n  while (true) {\r\n    handle.writeSync(flushFlag,\r\n                     chunk, // in\r\n                     inOff, // in_off\r\n                     availInBefore, // in_len\r\n                     buffer, // out\r\n                     offset, // out_off\r\n                     availOutBefore); // out_len\r\n    if (error)\r\n      throw error;\r\n    else if (self[kError])\r\n      throw self[kError];\r\n\r\n    availOutAfter = state[0];\r\n    availInAfter = state[1];\r\n\r\n    const inDelta = (availInBefore - availInAfter);\r\n    inputRead += inDelta;\r\n\r\n    const have = availOutBefore - availOutAfter;\r\n    if (have > 0) {\r\n      const out = buffer.slice(offset, offset + have);\r\n      offset += have;\r\n      if (!buffers)\r\n        buffers = [out];\r\n      else\r\n        ArrayPrototypePush(buffers, out);\r\n      nread += out.byteLength;\r\n\r\n      if (nread > self._maxOutputLength) {\r\n        _close(self);\r\n        throw new ERR_BUFFER_TOO_LARGE(self._maxOutputLength);\r\n      }\r\n\r\n    } else {\r\n      assert(have === 0, 'have should not go down');\r\n    }\r\n\r\n    // Exhausted the output buffer, or used all the input create a new one.\r\n    if (availOutAfter === 0 || offset >= chunkSize) {\r\n      availOutBefore = chunkSize;\r\n      offset = 0;\r\n      buffer = Buffer.allocUnsafe(chunkSize);\r\n    }\r\n\r\n    if (availOutAfter === 0) {\r\n      // Not actually done. Need to reprocess.\r\n      // Also, update the availInBefore to the availInAfter value,\r\n      // so that if we have to hit it a third (fourth, etc.) time,\r\n      // it'll have the correct byte counts.\r\n      inOff += inDelta;\r\n      availInBefore = availInAfter;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n\r\n  self.bytesWritten = inputRead;\r\n  _close(self);\r\n\r\n  if (nread === 0)\r\n    return Buffer.alloc(0);\r\n\r\n  return (buffers.length === 1 ? buffers[0] : Buffer.concat(buffers, nread));\r\n}\r\n\r\nfunction processChunk(self, chunk, flushFlag, cb) {\r\n  const handle = self._handle;\r\n  if (!handle) return process.nextTick(cb);\r\n\r\n  handle.buffer = chunk;\r\n  handle.cb = cb;\r\n  handle.availOutBefore = self._chunkSize - self._outOffset;\r\n  handle.availInBefore = chunk.byteLength;\r\n  handle.inOff = 0;\r\n  handle.flushFlag = flushFlag;\r\n\r\n  handle.write(flushFlag,\r\n               chunk, // in\r\n               0, // in_off\r\n               handle.availInBefore, // in_len\r\n               self._outBuffer, // out\r\n               self._outOffset, // out_off\r\n               handle.availOutBefore); // out_len\r\n}\r\n\r\nfunction processCallback() {\r\n  // This callback's context (`this`) is the `_handle` (ZCtx) object. It is\r\n  // important to null out the values once they are no longer needed since\r\n  // `_handle` can stay in memory long after the buffer is needed.\r\n  const handle = this;\r\n  const self = this[owner_symbol];\r\n  const state = self._writeState;\r\n\r\n  if (self.destroyed) {\r\n    this.buffer = null;\r\n    this.cb();\r\n    return;\r\n  }\r\n\r\n  const availOutAfter = state[0];\r\n  const availInAfter = state[1];\r\n\r\n  const inDelta = handle.availInBefore - availInAfter;\r\n  self.bytesWritten += inDelta;\r\n\r\n  const have = handle.availOutBefore - availOutAfter;\r\n  let streamBufferIsFull = false;\r\n  if (have > 0) {\r\n    const out = self._outBuffer.slice(self._outOffset, self._outOffset + have);\r\n    self._outOffset += have;\r\n    streamBufferIsFull = !self.push(out);\r\n  } else {\r\n    assert(have === 0, 'have should not go down');\r\n  }\r\n\r\n  if (self.destroyed) {\r\n    this.cb();\r\n    return;\r\n  }\r\n\r\n  // Exhausted the output buffer, or used all the input create a new one.\r\n  if (availOutAfter === 0 || self._outOffset >= self._chunkSize) {\r\n    handle.availOutBefore = self._chunkSize;\r\n    self._outOffset = 0;\r\n    self._outBuffer = Buffer.allocUnsafe(self._chunkSize);\r\n  }\r\n\r\n  if (availOutAfter === 0) {\r\n    // Not actually done. Need to reprocess.\r\n    // Also, update the availInBefore to the availInAfter value,\r\n    // so that if we have to hit it a third (fourth, etc.) time,\r\n    // it'll have the correct byte counts.\r\n    handle.inOff += inDelta;\r\n    handle.availInBefore = availInAfter;\r\n\r\n\r\n    if (!streamBufferIsFull) {\r\n      this.write(handle.flushFlag,\r\n                 this.buffer, // in\r\n                 handle.inOff, // in_off\r\n                 handle.availInBefore, // in_len\r\n                 self._outBuffer, // out\r\n                 self._outOffset, // out_off\r\n                 self._chunkSize); // out_len\r\n    } else {\r\n      const oldRead = self._read;\r\n      self._read = (n) => {\r\n        self._read = oldRead;\r\n        this.write(handle.flushFlag,\r\n                   this.buffer, // in\r\n                   handle.inOff, // in_off\r\n                   handle.availInBefore, // in_len\r\n                   self._outBuffer, // out\r\n                   self._outOffset, // out_off\r\n                   self._chunkSize); // out_len\r\n        self._read(n);\r\n      };\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (availInAfter > 0) {\r\n    // If we have more input that should be written, but we also have output\r\n    // space available, that means that the compression library was not\r\n    // interested in receiving more data, and in particular that the input\r\n    // stream has ended early.\r\n    // This applies to streams where we don't check data past the end of\r\n    // what was consumed; that is, everything except Gunzip/Unzip.\r\n    self.push(null);\r\n  }\r\n\r\n  // Finished with the chunk.\r\n  this.buffer = null;\r\n  this.cb();\r\n}\r\n\r\nfunction _close(engine) {\r\n  // Caller may invoke .close after a zlib error (which will null _handle).\r\n  if (!engine._handle)\r\n    return;\r\n\r\n  engine._handle.close();\r\n  engine._handle = null;\r\n}\r\n\r\nconst zlibDefaultOpts = {\r\n  flush: Z_NO_FLUSH,\r\n  finishFlush: Z_FINISH,\r\n  fullFlush: Z_FULL_FLUSH,\r\n};\r\n// Base class for all streams actually backed by zlib and using zlib-specific\r\n// parameters.\r\nfunction Zlib(opts, mode) {\r\n  let windowBits = Z_DEFAULT_WINDOWBITS;\r\n  let level = Z_DEFAULT_COMPRESSION;\r\n  let memLevel = Z_DEFAULT_MEMLEVEL;\r\n  let strategy = Z_DEFAULT_STRATEGY;\r\n  let dictionary;\r\n\r\n  if (opts) {\r\n    // windowBits is special. On the compression side, 0 is an invalid value.\r\n    // But on the decompression side, a value of 0 for windowBits tells zlib\r\n    // to use the window size in the zlib header of the compressed stream.\r\n    if ((opts.windowBits == null || opts.windowBits === 0) &&\r\n        (mode === INFLATE ||\r\n         mode === GUNZIP ||\r\n         mode === UNZIP)) {\r\n      windowBits = 0;\r\n    } else {\r\n      // `{ windowBits: 8 }` is valid for deflate but not gzip.\r\n      const min = Z_MIN_WINDOWBITS + (mode === GZIP ? 1 : 0);\r\n      windowBits = checkRangesOrGetDefault(\r\n        opts.windowBits, 'options.windowBits',\r\n        min, Z_MAX_WINDOWBITS, Z_DEFAULT_WINDOWBITS);\r\n    }\r\n\r\n    level = checkRangesOrGetDefault(\r\n      opts.level, 'options.level',\r\n      Z_MIN_LEVEL, Z_MAX_LEVEL, Z_DEFAULT_COMPRESSION);\r\n\r\n    memLevel = checkRangesOrGetDefault(\r\n      opts.memLevel, 'options.memLevel',\r\n      Z_MIN_MEMLEVEL, Z_MAX_MEMLEVEL, Z_DEFAULT_MEMLEVEL);\r\n\r\n    strategy = checkRangesOrGetDefault(\r\n      opts.strategy, 'options.strategy',\r\n      Z_DEFAULT_STRATEGY, Z_FIXED, Z_DEFAULT_STRATEGY);\r\n\r\n    dictionary = opts.dictionary;\r\n    if (dictionary !== undefined && !isArrayBufferView(dictionary)) {\r\n      if (isAnyArrayBuffer(dictionary)) {\r\n        dictionary = Buffer.from(dictionary);\r\n      } else {\r\n        throw new ERR_INVALID_ARG_TYPE(\r\n          'options.dictionary',\r\n          ['Buffer', 'TypedArray', 'DataView', 'ArrayBuffer'],\r\n          dictionary,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  const handle = new binding.Zlib(mode);\r\n  // Ideally, we could let ZlibBase() set up _writeState. I haven't been able\r\n  // to come up with a good solution that doesn't break our internal API,\r\n  // and with it all supported npm versions at the time of writing.\r\n  this._writeState = new Uint32Array(2);\r\n  handle.init(windowBits,\r\n              level,\r\n              memLevel,\r\n              strategy,\r\n              this._writeState,\r\n              processCallback,\r\n              dictionary);\r\n\r\n  ReflectApply(ZlibBase, this, [opts, mode, handle, zlibDefaultOpts]);\r\n\r\n  this._level = level;\r\n  this._strategy = strategy;\r\n}\r\nObjectSetPrototypeOf(Zlib.prototype, ZlibBase.prototype);\r\nObjectSetPrototypeOf(Zlib, ZlibBase);\r\n\r\n// This callback is used by `.params()` to wait until a full flush happened\r\n// before adjusting the parameters. In particular, the call to the native\r\n// `params()` function should not happen while a write is currently in progress\r\n// on the threadpool.\r\nfunction paramsAfterFlushCallback(level, strategy, callback) {\r\n  assert(this._handle, 'zlib binding closed');\r\n  this._handle.params(level, strategy);\r\n  if (!this.destroyed) {\r\n    this._level = level;\r\n    this._strategy = strategy;\r\n    if (callback) callback();\r\n  }\r\n}\r\n\r\nZlib.prototype.params = function params(level, strategy, callback) {\r\n  checkRangesOrGetDefault(level, 'level', Z_MIN_LEVEL, Z_MAX_LEVEL);\r\n  checkRangesOrGetDefault(strategy, 'strategy', Z_DEFAULT_STRATEGY, Z_FIXED);\r\n\r\n  if (this._level !== level || this._strategy !== strategy) {\r\n    this.flush(Z_SYNC_FLUSH,\r\n               FunctionPrototypeBind(paramsAfterFlushCallback, this,\r\n                                     level, strategy, callback));\r\n  } else {\r\n    process.nextTick(callback);\r\n  }\r\n};\r\n\r\n// generic zlib\r\n// minimal 2-byte header\r\nfunction Deflate(opts) {\r\n  if (!(this instanceof Deflate))\r\n    return new Deflate(opts);\r\n  ReflectApply(Zlib, this, [opts, DEFLATE]);\r\n}\r\nObjectSetPrototypeOf(Deflate.prototype, Zlib.prototype);\r\nObjectSetPrototypeOf(Deflate, Zlib);\r\n\r\nfunction Inflate(opts) {\r\n  if (!(this instanceof Inflate))\r\n    return new Inflate(opts);\r\n  ReflectApply(Zlib, this, [opts, INFLATE]);\r\n}\r\nObjectSetPrototypeOf(Inflate.prototype, Zlib.prototype);\r\nObjectSetPrototypeOf(Inflate, Zlib);\r\n\r\nfunction Gzip(opts) {\r\n  if (!(this instanceof Gzip))\r\n    return new Gzip(opts);\r\n  ReflectApply(Zlib, this, [opts, GZIP]);\r\n}\r\nObjectSetPrototypeOf(Gzip.prototype, Zlib.prototype);\r\nObjectSetPrototypeOf(Gzip, Zlib);\r\n\r\nfunction Gunzip(opts) {\r\n  if (!(this instanceof Gunzip))\r\n    return new Gunzip(opts);\r\n  ReflectApply(Zlib, this, [opts, GUNZIP]);\r\n}\r\nObjectSetPrototypeOf(Gunzip.prototype, Zlib.prototype);\r\nObjectSetPrototypeOf(Gunzip, Zlib);\r\n\r\nfunction DeflateRaw(opts) {\r\n  if (opts && opts.windowBits === 8) opts.windowBits = 9;\r\n  if (!(this instanceof DeflateRaw))\r\n    return new DeflateRaw(opts);\r\n  ReflectApply(Zlib, this, [opts, DEFLATERAW]);\r\n}\r\nObjectSetPrototypeOf(DeflateRaw.prototype, Zlib.prototype);\r\nObjectSetPrototypeOf(DeflateRaw, Zlib);\r\n\r\nfunction InflateRaw(opts) {\r\n  if (!(this instanceof InflateRaw))\r\n    return new InflateRaw(opts);\r\n  ReflectApply(Zlib, this, [opts, INFLATERAW]);\r\n}\r\nObjectSetPrototypeOf(InflateRaw.prototype, Zlib.prototype);\r\nObjectSetPrototypeOf(InflateRaw, Zlib);\r\n\r\nfunction Unzip(opts) {\r\n  if (!(this instanceof Unzip))\r\n    return new Unzip(opts);\r\n  ReflectApply(Zlib, this, [opts, UNZIP]);\r\n}\r\nObjectSetPrototypeOf(Unzip.prototype, Zlib.prototype);\r\nObjectSetPrototypeOf(Unzip, Zlib);\r\n\r\nfunction createConvenienceMethod(ctor, sync) {\r\n  if (sync) {\r\n    return function syncBufferWrapper(buffer, opts) {\r\n      return zlibBufferSync(new ctor(opts), buffer);\r\n    };\r\n  }\r\n  return function asyncBufferWrapper(buffer, opts, callback) {\r\n    if (typeof opts === 'function') {\r\n      callback = opts;\r\n      opts = {};\r\n    }\r\n    return zlibBuffer(new ctor(opts), buffer, callback);\r\n  };\r\n}\r\n\r\nconst kMaxBrotliParam = MathMaxApply(ArrayPrototypeMap(\r\n  ObjectKeys(constants),\r\n  (key) => (StringPrototypeStartsWith(key, 'BROTLI_PARAM_') ?\r\n    constants[key] :\r\n    0),\r\n));\r\n\r\nconst brotliInitParamsArray = new Uint32Array(kMaxBrotliParam + 1);\r\n\r\nconst brotliDefaultOpts = {\r\n  flush: BROTLI_OPERATION_PROCESS,\r\n  finishFlush: BROTLI_OPERATION_FINISH,\r\n  fullFlush: BROTLI_OPERATION_FLUSH,\r\n};\r\nfunction Brotli(opts, mode) {\r\n  assert(mode === BROTLI_DECODE || mode === BROTLI_ENCODE);\r\n\r\n  TypedArrayPrototypeFill(brotliInitParamsArray, -1);\r\n  if (opts?.params) {\r\n    ArrayPrototypeForEach(ObjectKeys(opts.params), (origKey) => {\r\n      const key = +origKey;\r\n      if (NumberIsNaN(key) || key < 0 || key > kMaxBrotliParam ||\r\n          (brotliInitParamsArray[key] | 0) !== -1) {\r\n        throw new ERR_BROTLI_INVALID_PARAM(origKey);\r\n      }\r\n\r\n      const value = opts.params[origKey];\r\n      if (typeof value !== 'number' && typeof value !== 'boolean') {\r\n        throw new ERR_INVALID_ARG_TYPE('options.params[key]',\r\n                                       'number', opts.params[origKey]);\r\n      }\r\n      brotliInitParamsArray[key] = value;\r\n    });\r\n  }\r\n\r\n  const handle = mode === BROTLI_DECODE ?\r\n    new binding.BrotliDecoder(mode) : new binding.BrotliEncoder(mode);\r\n\r\n  this._writeState = new Uint32Array(2);\r\n  // TODO(addaleax): Sometimes we generate better error codes in C++ land,\r\n  // e.g. ERR_BROTLI_PARAM_SET_FAILED -- it's hard to access them with\r\n  // the current bindings setup, though.\r\n  if (!handle.init(brotliInitParamsArray,\r\n                   this._writeState,\r\n                   processCallback)) {\r\n    throw new ERR_ZLIB_INITIALIZATION_FAILED();\r\n  }\r\n\r\n  ReflectApply(ZlibBase, this, [opts, mode, handle, brotliDefaultOpts]);\r\n}\r\nObjectSetPrototypeOf(Brotli.prototype, Zlib.prototype);\r\nObjectSetPrototypeOf(Brotli, Zlib);\r\n\r\nfunction BrotliCompress(opts) {\r\n  if (!(this instanceof BrotliCompress))\r\n    return new BrotliCompress(opts);\r\n  ReflectApply(Brotli, this, [opts, BROTLI_ENCODE]);\r\n}\r\nObjectSetPrototypeOf(BrotliCompress.prototype, Brotli.prototype);\r\nObjectSetPrototypeOf(BrotliCompress, Brotli);\r\n\r\nfunction BrotliDecompress(opts) {\r\n  if (!(this instanceof BrotliDecompress))\r\n    return new BrotliDecompress(opts);\r\n  ReflectApply(Brotli, this, [opts, BROTLI_DECODE]);\r\n}\r\nObjectSetPrototypeOf(BrotliDecompress.prototype, Brotli.prototype);\r\nObjectSetPrototypeOf(BrotliDecompress, Brotli);\r\n\r\n\r\nfunction createProperty(ctor) {\r\n  return {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    value: function(options) {\r\n      return new ctor(options);\r\n    },\r\n  };\r\n}\r\n\r\nfunction crc32(data, value = 0) {\r\n  if (typeof data !== 'string' && !isArrayBufferView(data)) {\r\n    throw new ERR_INVALID_ARG_TYPE('data', ['Buffer', 'TypedArray', 'DataView', 'string'], data);\r\n  }\r\n  validateUint32(value, 'value');\r\n  return crc32Native(data, value);\r\n}\r\n\r\n// Legacy alias on the C++ wrapper object. This is not public API, so we may\r\n// want to runtime-deprecate it at some point. There's no hurry, though.\r\nObjectDefineProperty(binding.Zlib.prototype, 'jsref', {\r\n  __proto__: null,\r\n  get() { return this[owner_symbol]; },\r\n  set(v) { return this[owner_symbol] = v; },\r\n});\r\n\r\nmodule.exports = {\r\n  crc32,\r\n  Deflate,\r\n  Inflate,\r\n  Gzip,\r\n  Gunzip,\r\n  DeflateRaw,\r\n  InflateRaw,\r\n  Unzip,\r\n  BrotliCompress,\r\n  BrotliDecompress,\r\n\r\n  // Convenience methods.\r\n  // compress/decompress a string or buffer in one step.\r\n  deflate: createConvenienceMethod(Deflate, false),\r\n  deflateSync: createConvenienceMethod(Deflate, true),\r\n  gzip: createConvenienceMethod(Gzip, false),\r\n  gzipSync: createConvenienceMethod(Gzip, true),\r\n  deflateRaw: createConvenienceMethod(DeflateRaw, false),\r\n  deflateRawSync: createConvenienceMethod(DeflateRaw, true),\r\n  unzip: createConvenienceMethod(Unzip, false),\r\n  unzipSync: createConvenienceMethod(Unzip, true),\r\n  inflate: createConvenienceMethod(Inflate, false),\r\n  inflateSync: createConvenienceMethod(Inflate, true),\r\n  gunzip: createConvenienceMethod(Gunzip, false),\r\n  gunzipSync: createConvenienceMethod(Gunzip, true),\r\n  inflateRaw: createConvenienceMethod(InflateRaw, false),\r\n  inflateRawSync: createConvenienceMethod(InflateRaw, true),\r\n  brotliCompress: createConvenienceMethod(BrotliCompress, false),\r\n  brotliCompressSync: createConvenienceMethod(BrotliCompress, true),\r\n  brotliDecompress: createConvenienceMethod(BrotliDecompress, false),\r\n  brotliDecompressSync: createConvenienceMethod(BrotliDecompress, true),\r\n};\r\n\r\nObjectDefineProperties(module.exports, {\r\n  createDeflate: createProperty(Deflate),\r\n  createInflate: createProperty(Inflate),\r\n  createDeflateRaw: createProperty(DeflateRaw),\r\n  createInflateRaw: createProperty(InflateRaw),\r\n  createGzip: createProperty(Gzip),\r\n  createGunzip: createProperty(Gunzip),\r\n  createUnzip: createProperty(Unzip),\r\n  createBrotliCompress: createProperty(BrotliCompress),\r\n  createBrotliDecompress: createProperty(BrotliDecompress),\r\n  constants: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    value: constants,\r\n  },\r\n  codes: {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    writable: false,\r\n    value: ObjectFreeze(codes),\r\n  },\r\n});\r\n\r\n// These should be considered deprecated\r\n// expose all the zlib constants\r\nfor (const bkey of ObjectKeys(constants)) {\r\n  if (StringPrototypeStartsWith(bkey, 'BROTLI')) continue;\r\n  ObjectDefineProperty(module.exports, bkey, {\r\n    __proto__: null,\r\n    enumerable: false, value: constants[bkey], writable: false,\r\n  });\r\n}\r\n"
  },
  "229": {
    "metadata": {
      "scriptId": "229",
      "url": "node:internal/blocklist",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 166,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "d7ecd357e4501fe47eba0e78a42bc7f432a67d789985b5de44c5d68bf94f4c11",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4058,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/blocklist"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Boolean,\r\n  ObjectSetPrototypeOf,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  BlockList: BlockListHandle,\r\n} = internalBinding('block_list');\r\n\r\nconst {\r\n  customInspectSymbol: kInspect,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  SocketAddress,\r\n  kHandle: kSocketAddressHandle,\r\n} = require('internal/socketaddress');\r\n\r\nconst {\r\n  markTransferMode,\r\n  kClone,\r\n  kDeserialize,\r\n} = require('internal/worker/js_transferable');\r\n\r\nconst { inspect } = require('internal/util/inspect');\r\n\r\nconst kHandle = Symbol('kHandle');\r\nconst { owner_symbol } = internalBinding('symbols');\r\n\r\nconst {\r\n  ERR_INVALID_ARG_VALUE,\r\n} = require('internal/errors').codes;\r\n\r\nconst { validateInt32, validateString } = require('internal/validators');\r\n\r\nclass BlockList {\r\n  constructor() {\r\n    markTransferMode(this, true, false);\r\n    this[kHandle] = new BlockListHandle();\r\n    this[kHandle][owner_symbol] = this;\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (depth < 0)\r\n      return this;\r\n\r\n    const opts = {\r\n      ...options,\r\n      depth: options.depth == null ? null : options.depth - 1,\r\n    };\r\n\r\n    return `BlockList ${inspect({\r\n      rules: this.rules,\r\n    }, opts)}`;\r\n  }\r\n\r\n  addAddress(address, family = 'ipv4') {\r\n    if (!SocketAddress.isSocketAddress(address)) {\r\n      validateString(address, 'address');\r\n      validateString(family, 'family');\r\n      address = new SocketAddress({\r\n        address,\r\n        family,\r\n      });\r\n    }\r\n    this[kHandle].addAddress(address[kSocketAddressHandle]);\r\n  }\r\n\r\n  addRange(start, end, family = 'ipv4') {\r\n    if (!SocketAddress.isSocketAddress(start)) {\r\n      validateString(start, 'start');\r\n      validateString(family, 'family');\r\n      start = new SocketAddress({\r\n        address: start,\r\n        family,\r\n      });\r\n    }\r\n    if (!SocketAddress.isSocketAddress(end)) {\r\n      validateString(end, 'end');\r\n      validateString(family, 'family');\r\n      end = new SocketAddress({\r\n        address: end,\r\n        family,\r\n      });\r\n    }\r\n    const ret = this[kHandle].addRange(\r\n      start[kSocketAddressHandle],\r\n      end[kSocketAddressHandle]);\r\n    if (ret === false)\r\n      throw new ERR_INVALID_ARG_VALUE('start', start, 'must come before end');\r\n  }\r\n\r\n  addSubnet(network, prefix, family = 'ipv4') {\r\n    if (!SocketAddress.isSocketAddress(network)) {\r\n      validateString(network, 'network');\r\n      validateString(family, 'family');\r\n      network = new SocketAddress({\r\n        address: network,\r\n        family,\r\n      });\r\n    }\r\n    switch (network.family) {\r\n      case 'ipv4':\r\n        validateInt32(prefix, 'prefix', 0, 32);\r\n        break;\r\n      case 'ipv6':\r\n        validateInt32(prefix, 'prefix', 0, 128);\r\n        break;\r\n    }\r\n    this[kHandle].addSubnet(network[kSocketAddressHandle], prefix);\r\n  }\r\n\r\n  check(address, family = 'ipv4') {\r\n    if (!SocketAddress.isSocketAddress(address)) {\r\n      validateString(address, 'address');\r\n      validateString(family, 'family');\r\n      try {\r\n        address = new SocketAddress({\r\n          address,\r\n          family,\r\n        });\r\n      } catch {\r\n        // Ignore the error. If it's not a valid address, return false.\r\n        return false;\r\n      }\r\n    }\r\n    return Boolean(this[kHandle].check(address[kSocketAddressHandle]));\r\n  }\r\n\r\n  get rules() {\r\n    return this[kHandle].getRules();\r\n  }\r\n\r\n  [kClone]() {\r\n    const handle = this[kHandle];\r\n    return {\r\n      data: { handle },\r\n      deserializeInfo: 'internal/blocklist:InternalBlockList',\r\n    };\r\n  }\r\n\r\n  [kDeserialize]({ handle }) {\r\n    this[kHandle] = handle;\r\n    this[kHandle][owner_symbol] = this;\r\n  }\r\n}\r\n\r\nclass InternalBlockList {\r\n  constructor(handle) {\r\n    markTransferMode(this, true, false);\r\n    this[kHandle] = handle;\r\n    if (handle !== undefined)\r\n      handle[owner_symbol] = this;\r\n  }\r\n}\r\n\r\nInternalBlockList.prototype.constructor = BlockList.prototype.constructor;\r\nObjectSetPrototypeOf(InternalBlockList.prototype, BlockList.prototype);\r\n\r\nmodule.exports = {\r\n  BlockList,\r\n  InternalBlockList,\r\n};\r\n"
  },
  "230": {
    "metadata": {
      "scriptId": "230",
      "url": "node:internal/socketaddress",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 165,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "e646a54efe3cc7c01f45952d64078e534924410ff4d5fc282ff8676937973d7e",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3567,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/socketaddress"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectSetPrototypeOf,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  SocketAddress: _SocketAddress,\r\n  AF_INET,\r\n  AF_INET6,\r\n} = internalBinding('block_list');\r\n\r\nconst {\r\n  validateObject,\r\n  validateString,\r\n  validatePort,\r\n  validateUint32,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  customInspectSymbol: kInspect,\r\n  kEmptyObject,\r\n} = require('internal/util');\r\n\r\nconst { inspect } = require('internal/util/inspect');\r\n\r\nconst {\r\n  markTransferMode,\r\n  kClone,\r\n  kDeserialize,\r\n} = require('internal/worker/js_transferable');\r\n\r\nconst kHandle = Symbol('kHandle');\r\nconst kDetail = Symbol('kDetail');\r\n\r\nclass SocketAddress {\r\n  static isSocketAddress(value) {\r\n    return value?.[kHandle] !== undefined;\r\n  }\r\n\r\n  constructor(options = kEmptyObject) {\r\n    markTransferMode(this, true, false);\r\n\r\n    validateObject(options, 'options');\r\n    let { family = 'ipv4' } = options;\r\n    const {\r\n      address = (family === 'ipv4' ? '127.0.0.1' : '::'),\r\n      port = 0,\r\n      flowlabel = 0,\r\n    } = options;\r\n\r\n    let type;\r\n    if (typeof family?.toLowerCase === 'function')\r\n      family = family.toLowerCase();\r\n    switch (family) {\r\n      case 'ipv4':\r\n        type = AF_INET;\r\n        break;\r\n      case 'ipv6':\r\n        type = AF_INET6;\r\n        break;\r\n      default:\r\n        throw new ERR_INVALID_ARG_VALUE('options.family', options.family);\r\n    }\r\n\r\n    validateString(address, 'options.address');\r\n    validatePort(port, 'options.port');\r\n    validateUint32(flowlabel, 'options.flowlabel', false);\r\n\r\n    this[kHandle] = new _SocketAddress(address, port, type, flowlabel);\r\n    this[kDetail] = this[kHandle].detail({\r\n      address: undefined,\r\n      port: undefined,\r\n      family: undefined,\r\n      flowlabel: undefined,\r\n    });\r\n  }\r\n\r\n  get address() {\r\n    return this[kDetail].address;\r\n  }\r\n\r\n  get port() {\r\n    return this[kDetail].port;\r\n  }\r\n\r\n  get family() {\r\n    return this[kDetail].family === AF_INET ? 'ipv4' : 'ipv6';\r\n  }\r\n\r\n  get flowlabel() {\r\n    // The flow label can be changed internally.\r\n    return this[kHandle].flowlabel();\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (depth < 0)\r\n      return this;\r\n\r\n    const opts = {\r\n      ...options,\r\n      depth: options.depth == null ? null : options.depth - 1,\r\n    };\r\n\r\n    return `SocketAddress ${inspect(this.toJSON(), opts)}`;\r\n  }\r\n\r\n  [kClone]() {\r\n    const handle = this[kHandle];\r\n    return {\r\n      data: { handle },\r\n      deserializeInfo: 'internal/socketaddress:InternalSocketAddress',\r\n    };\r\n  }\r\n\r\n  [kDeserialize]({ handle }) {\r\n    this[kHandle] = handle;\r\n    this[kDetail] = handle.detail({\r\n      address: undefined,\r\n      port: undefined,\r\n      family: undefined,\r\n      flowlabel: undefined,\r\n    });\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      address: this.address,\r\n      port: this.port,\r\n      family: this.family,\r\n      flowlabel: this.flowlabel,\r\n    };\r\n  }\r\n}\r\n\r\nclass InternalSocketAddress {\r\n  constructor(handle) {\r\n    markTransferMode(this, true, false);\r\n\r\n    this[kHandle] = handle;\r\n    this[kDetail] = this[kHandle]?.detail({\r\n      address: undefined,\r\n      port: undefined,\r\n      family: undefined,\r\n      flowlabel: undefined,\r\n    });\r\n  }\r\n}\r\n\r\nInternalSocketAddress.prototype.constructor =\r\n  SocketAddress.prototype.constructor;\r\nObjectSetPrototypeOf(InternalSocketAddress.prototype, SocketAddress.prototype);\r\n\r\nmodule.exports = {\r\n  SocketAddress,\r\n  InternalSocketAddress,\r\n  kHandle,\r\n};\r\n"
  },
  "231": {
    "metadata": {
      "scriptId": "231",
      "url": "node:internal/bootstrap/node",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 426,
      "endColumn": 0,
      "executionContextId": 1,
      "hash": "8e3b07d1764ddafd1cbe981e9fd86f19140136306f0bc2a7b0b10ac13bb53b64",
      "executionContextAuxData": {
        "isDefault": true
      },
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 14553,
      "stackTrace": {
        "callFrames": [
          {
            "functionName": "compileForInternalLoader",
            "scriptId": "6",
            "url": "node:internal/bootstrap/realm",
            "lineNumber": 394,
            "columnNumber": 17
          }
        ]
      },
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/bootstrap/node"
    },
    "source": "// Hello, and welcome to hacking node.js!\r\n//\r\n// This file is invoked by `Realm::BootstrapRealm()` in `src/node_realm.cc`,\r\n// and is responsible for setting up Node.js core before main scripts\r\n// under `lib/internal/main/` are executed.\r\n//\r\n// By default, Node.js binaries come with an embedded V8 startup snapshot\r\n// that is generated at build-time with a `node_mksnapshot` executable.\r\n// The snapshot generation code can be found in `SnapshotBuilder::Generate()`\r\n// from `src/node_snapshotable.cc`.\r\n// This snapshot captures the V8 heap initialized by scripts under\r\n// `lib/internal/bootstrap/`, including this file. When initializing the main\r\n// thread, Node.js deserializes the heap from the snapshot, instead of actually\r\n// running this script and others in `lib/internal/bootstrap/`. To disable this\r\n// behavior, pass `--no-node-snapshot` when starting the process so that\r\n// Node.js actually runs this script to initialize the heap.\r\n//\r\n// This script is expected not to perform any asynchronous operations itself\r\n// when being executed - those should be done in either\r\n// `lib/internal/process/pre_execution.js` or in main scripts. It should not\r\n// query any run-time states (e.g. command line arguments, environment\r\n// variables) when being executed - functions in this script that are invoked\r\n// at a later time can, however, query those states lazily.\r\n// The majority of the code here focuses on setting up the global object and\r\n// the process object in a synchronous, environment-independent manner.\r\n//\r\n// Scripts run before this file:\r\n// - `lib/internal/per_context/primordials.js`: this saves copies of JavaScript\r\n//   builtins that won't be affected by user land monkey-patching for internal\r\n//   modules to use.\r\n// - `lib/internal/per_context/domexception.js`: implementation of the\r\n//   `DOMException` class.\r\n// - `lib/internal/per_context/messageport.js`: JS-side components of the\r\n//   `MessagePort` implementation.\r\n// - `lib/internal/bootstrap/realm.js`: this sets up internal binding and\r\n//   module loaders, including `process.binding()`, `process._linkedBinding()`,\r\n//   `internalBinding()` and `BuiltinModule`, and per-realm internal states\r\n//   and bindings, including `prepare_stack_trace_callback`.\r\n//\r\n// The initialization done in this script is included in both the main thread\r\n// and the worker threads. After this, further initialization is done based\r\n// on the configuration of the Node.js instance by executing the scripts in\r\n// `lib/internal/bootstrap/switches/`.\r\n//\r\n// Then, depending on how the Node.js instance is launched, one of the main\r\n// scripts in `lib/internal/main` will be selected by C++ to start the actual\r\n// execution. They may run additional setups exported by\r\n// `lib/internal/process/pre_execution.js` depending on the run-time states.\r\n\r\n'use strict';\r\n\r\n// This file is compiled as if it's wrapped in a function with arguments\r\n// passed by `BuiltinLoader::CompileAndCall()`.\r\n/* global process, require, internalBinding, primordials */\r\n\r\nconst {\r\n  FunctionPrototypeCall,\r\n  JSONParse,\r\n  Number,\r\n  NumberIsNaN,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ObjectGetPrototypeOf,\r\n  ObjectSetPrototypeOf,\r\n  SymbolToStringTag,\r\n  globalThis,\r\n} = primordials;\r\nconst config = internalBinding('config');\r\nconst internalTimers = require('internal/timers');\r\nconst {\r\n  defineOperation,\r\n  deprecate,\r\n} = require('internal/util');\r\nconst {\r\n  validateInteger,\r\n} = require('internal/validators');\r\nconst {\r\n  constants: {\r\n    kExitCode,\r\n    kExiting,\r\n    kHasExitCode,\r\n  },\r\n  privateSymbols: {\r\n    exit_info_private_symbol,\r\n  },\r\n} = internalBinding('util');\r\n\r\nsetupProcessObject();\r\n\r\nsetupGlobalProxy();\r\nsetupBuffer();\r\n\r\nprocess.domain = null;\r\n\r\n// process._exiting and process.exitCode\r\n{\r\n  const fields = process[exit_info_private_symbol];\r\n  ObjectDefineProperty(process, '_exiting', {\r\n    __proto__: null,\r\n    get() {\r\n      return fields[kExiting] === 1;\r\n    },\r\n    set(value) {\r\n      fields[kExiting] = value ? 1 : 0;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n  });\r\n\r\n  let exitCode;\r\n  ObjectDefineProperty(process, 'exitCode', {\r\n    __proto__: null,\r\n    get() {\r\n      return exitCode;\r\n    },\r\n    set(code) {\r\n      if (code !== null && code !== undefined) {\r\n        let value = code;\r\n        if (typeof code === 'string' && code !== '' &&\r\n          NumberIsNaN((value = Number(code)))) {\r\n          value = code;\r\n        }\r\n        validateInteger(value, 'code');\r\n        fields[kExitCode] = value;\r\n        fields[kHasExitCode] = 1;\r\n      } else {\r\n        fields[kHasExitCode] = 0;\r\n      }\r\n      exitCode = code;\r\n    },\r\n    enumerable: true,\r\n    configurable: false,\r\n  });\r\n}\r\nprocess._exiting = false;\r\n\r\n// process.config is serialized config.gypi\r\nconst binding = internalBinding('builtins');\r\n\r\nconst processConfig = JSONParse(binding.config, (_key, value) => {\r\n  // The `reviver` argument of the JSONParse method will visit all the values of\r\n  // the parsed config, including the \"root\" object, so there is no need to\r\n  // explicitly freeze the config outside of this method\r\n  return ObjectFreeze(value);\r\n});\r\n\r\nObjectDefineProperty(process, 'config', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  configurable: true,\r\n  value: processConfig,\r\n});\r\n\r\nrequire('internal/worker/js_transferable').setup();\r\n\r\n// Bootstrappers for all threads, including worker threads and main thread\r\nconst perThreadSetup = require('internal/process/per_thread');\r\nconst rawMethods = internalBinding('process_methods');\r\n\r\n// Set up methods on the process object for all threads\r\n{\r\n  process.dlopen = rawMethods.dlopen;\r\n  process.uptime = rawMethods.uptime;\r\n\r\n  // TODO(joyeecheung): either remove them or make them public\r\n  process._getActiveRequests = rawMethods._getActiveRequests;\r\n  process._getActiveHandles = rawMethods._getActiveHandles;\r\n  process.getActiveResourcesInfo = rawMethods.getActiveResourcesInfo;\r\n\r\n  // TODO(joyeecheung): remove these\r\n  process.reallyExit = rawMethods.reallyExit;\r\n  process._kill = rawMethods._kill;\r\n\r\n  const wrapped = perThreadSetup.wrapProcessMethods(rawMethods);\r\n  process.loadEnvFile = wrapped.loadEnvFile;\r\n  process._rawDebug = wrapped._rawDebug;\r\n  process.cpuUsage = wrapped.cpuUsage;\r\n  process.resourceUsage = wrapped.resourceUsage;\r\n  process.memoryUsage = wrapped.memoryUsage;\r\n  process.constrainedMemory = rawMethods.constrainedMemory;\r\n  process.availableMemory = rawMethods.availableMemory;\r\n  process.kill = wrapped.kill;\r\n  process.exit = wrapped.exit;\r\n\r\n  process.hrtime = perThreadSetup.hrtime;\r\n  process.hrtime.bigint = perThreadSetup.hrtimeBigInt;\r\n\r\n  process.openStdin = function() {\r\n    process.stdin.resume();\r\n    return process.stdin;\r\n  };\r\n}\r\n\r\nconst credentials = internalBinding('credentials');\r\nif (credentials.implementsPosixCredentials) {\r\n  process.getuid = credentials.getuid;\r\n  process.geteuid = credentials.geteuid;\r\n  process.getgid = credentials.getgid;\r\n  process.getegid = credentials.getegid;\r\n  process.getgroups = credentials.getgroups;\r\n}\r\n\r\n// Setup the callbacks that node::AsyncWrap will call when there are hooks to\r\n// process. They use the same functions as the JS embedder API. These callbacks\r\n// are setup immediately to prevent async_wrap.setupHooks() from being hijacked\r\n// and the cost of doing so is negligible.\r\nconst { nativeHooks } = require('internal/async_hooks');\r\ninternalBinding('async_wrap').setupHooks(nativeHooks);\r\n\r\nconst {\r\n  setupTaskQueue,\r\n} = require('internal/process/task_queues');\r\nconst timers = require('timers');\r\n// Non-standard extensions:\r\ndefineOperation(globalThis, 'clearImmediate', timers.clearImmediate);\r\ndefineOperation(globalThis, 'setImmediate', timers.setImmediate);\r\n\r\n// Set the per-Environment callback that will be called\r\n// when the TrackingTraceStateObserver updates trace state.\r\n// Note that when NODE_USE_V8_PLATFORM is true, the observer is\r\n// attached to the per-process TracingController.\r\nconst { setTraceCategoryStateUpdateHandler } = internalBinding('trace_events');\r\nsetTraceCategoryStateUpdateHandler(perThreadSetup.toggleTraceCategoryState);\r\n\r\n// process.allowedNodeEnvironmentFlags\r\nObjectDefineProperty(process, 'allowedNodeEnvironmentFlags', {\r\n  __proto__: null,\r\n  get() {\r\n    const flags = perThreadSetup.buildAllowedFlags();\r\n    process.allowedNodeEnvironmentFlags = flags;\r\n    return process.allowedNodeEnvironmentFlags;\r\n  },\r\n  // If the user tries to set this to another value, override\r\n  // this completely to that value.\r\n  set(value) {\r\n    ObjectDefineProperty(this, 'allowedNodeEnvironmentFlags', {\r\n      __proto__: null,\r\n      value,\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n    });\r\n  },\r\n  enumerable: true,\r\n  configurable: true,\r\n});\r\n\r\n// process.assert\r\nprocess.assert = deprecate(\r\n  perThreadSetup.assert,\r\n  'process.assert() is deprecated. Please use the `assert` module instead.',\r\n  'DEP0100');\r\n\r\n// TODO(joyeecheung): this property has not been well-maintained, should we\r\n// deprecate it in favor of a better API?\r\nconst { isDebugBuild, hasOpenSSL, hasInspector } = config;\r\nconst features = {\r\n  inspector: hasInspector,\r\n  debug: isDebugBuild,\r\n  uv: true,\r\n  ipv6: true,  // TODO(bnoordhuis) ping libuv\r\n  tls_alpn: hasOpenSSL,\r\n  tls_sni: hasOpenSSL,\r\n  tls_ocsp: hasOpenSSL,\r\n  tls: hasOpenSSL,\r\n  // This needs to be dynamic because --no-node-snapshot disables the\r\n  // code cache even if the binary is built with embedded code cache.\r\n  get cached_builtins() {\r\n    return binding.hasCachedBuiltins();\r\n  },\r\n};\r\n\r\nObjectDefineProperty(process, 'features', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  writable: false,\r\n  configurable: false,\r\n  value: features,\r\n});\r\n\r\n{\r\n  const {\r\n    onGlobalUncaughtException,\r\n    setUncaughtExceptionCaptureCallback,\r\n    hasUncaughtExceptionCaptureCallback,\r\n  } = require('internal/process/execution');\r\n\r\n  // For legacy reasons this is still called `_fatalException`, even\r\n  // though it is now a global uncaught exception handler.\r\n  // The C++ land node::errors::TriggerUncaughtException grabs it\r\n  // from the process object because it has been monkey-patchable.\r\n  // TODO(joyeecheung): investigate whether process._fatalException\r\n  // can be deprecated.\r\n  process._fatalException = onGlobalUncaughtException;\r\n  process.setUncaughtExceptionCaptureCallback =\r\n    setUncaughtExceptionCaptureCallback;\r\n  process.hasUncaughtExceptionCaptureCallback =\r\n    hasUncaughtExceptionCaptureCallback;\r\n}\r\n\r\nconst { emitWarning, emitWarningSync } = require('internal/process/warning');\r\nprocess.emitWarning = emitWarning;\r\ninternalBinding('process_methods').setEmitWarningSync(emitWarningSync);\r\n\r\n// We initialize the tick callbacks and the timer callbacks last during\r\n// bootstrap to make sure that any operation done before this are synchronous.\r\n// If any ticks or timers are scheduled before this they are unlikely to work.\r\n{\r\n  const { nextTick, runNextTicks } = setupTaskQueue();\r\n  process.nextTick = nextTick;\r\n  // Used to emulate a tick manually in the JS land.\r\n  // A better name for this function would be `runNextTicks` but\r\n  // it has been exposed to the process object so we keep this legacy name\r\n  // TODO(joyeecheung): either remove it or make it public\r\n  process._tickCallback = runNextTicks;\r\n\r\n  const { setupTimers } = internalBinding('timers');\r\n  const {\r\n    processImmediate,\r\n    processTimers,\r\n  } = internalTimers.getTimerCallbacks(runNextTicks);\r\n  // Sets two per-Environment callbacks that will be run from libuv:\r\n  // - processImmediate will be run in the callback of the per-Environment\r\n  //   check handle.\r\n  // - processTimers will be run in the callback of the per-Environment timer.\r\n  setupTimers(processImmediate, processTimers);\r\n  // Note: only after this point are the timers effective\r\n}\r\n\r\n{\r\n  const {\r\n    getSourceMapsEnabled,\r\n    setSourceMapsEnabled,\r\n    maybeCacheGeneratedSourceMap,\r\n  } = require('internal/source_map/source_map_cache');\r\n  const {\r\n    setMaybeCacheGeneratedSourceMap,\r\n  } = internalBinding('errors');\r\n\r\n  ObjectDefineProperty(process, 'sourceMapsEnabled', {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return getSourceMapsEnabled();\r\n    },\r\n  });\r\n  process.setSourceMapsEnabled = setSourceMapsEnabled;\r\n  // The C++ land calls back to maybeCacheGeneratedSourceMap()\r\n  // when code is generated by user with eval() or new Function()\r\n  // to cache the source maps from the evaluated code, if any.\r\n  setMaybeCacheGeneratedSourceMap(maybeCacheGeneratedSourceMap);\r\n}\r\n\r\n{\r\n  const { getBuiltinModule } = require('internal/modules/helpers');\r\n  process.getBuiltinModule = getBuiltinModule;\r\n}\r\n\r\nfunction setupProcessObject() {\r\n  const EventEmitter = require('events');\r\n  const origProcProto = ObjectGetPrototypeOf(process);\r\n  ObjectSetPrototypeOf(origProcProto, EventEmitter.prototype);\r\n  FunctionPrototypeCall(EventEmitter, process);\r\n  ObjectDefineProperty(process, SymbolToStringTag, {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    writable: true,\r\n    configurable: false,\r\n    value: 'process',\r\n  });\r\n\r\n  // Create global.process as getters so that we have a\r\n  // deprecation path for these in ES Modules.\r\n  // See https://github.com/nodejs/node/pull/26334.\r\n  let _process = process;\r\n  ObjectDefineProperty(globalThis, 'process', {\r\n    __proto__: null,\r\n    get() {\r\n      return _process;\r\n    },\r\n    set(value) {\r\n      _process = value;\r\n    },\r\n    enumerable: false,\r\n    configurable: true,\r\n  });\r\n}\r\n\r\nfunction setupGlobalProxy() {\r\n  ObjectDefineProperty(globalThis, SymbolToStringTag, {\r\n    __proto__: null,\r\n    value: 'global',\r\n    writable: false,\r\n    enumerable: false,\r\n    configurable: true,\r\n  });\r\n  globalThis.global = globalThis;\r\n}\r\n\r\nfunction setupBuffer() {\r\n  const {\r\n    Buffer,\r\n  } = require('buffer');\r\n  const bufferBinding = internalBinding('buffer');\r\n\r\n  // Only after this point can C++ use Buffer::New()\r\n  bufferBinding.setBufferPrototype(Buffer.prototype);\r\n  delete bufferBinding.setBufferPrototype;\r\n\r\n  // Create global.Buffer as getters so that we have a\r\n  // deprecation path for these in ES Modules.\r\n  // See https://github.com/nodejs/node/pull/26334.\r\n  let _Buffer = Buffer;\r\n  ObjectDefineProperty(globalThis, 'Buffer', {\r\n    __proto__: null,\r\n    get() {\r\n      return _Buffer;\r\n    },\r\n    set(value) {\r\n      _Buffer = value;\r\n    },\r\n    enumerable: false,\r\n    configurable: true,\r\n  });\r\n}\r\n"
  }
}